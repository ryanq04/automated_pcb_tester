
project_camera2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007694  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007864  08007864  00008864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800790c  0800790c  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  0800790c  0800790c  0000890c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007914  08007914  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007914  08007914  00008914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007918  08007918  00008918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800791c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  2000005c  08007978  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  08007978  0000990c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c61  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe5  00000000  00000000  0001fced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00022cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc7  00000000  00000000  000240e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e13  00000000  00000000  000250af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194ef  00000000  00000000  00048ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d71e8  00000000  00000000  000623b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b5c  00000000  00000000  001395dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0013f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800784c 	.word	0x0800784c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800784c 	.word	0x0800784c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <print_msg>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef print_msg(char * msg) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe29 	bl	8000210 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <print_msg+0x28>)
 80005c8:	f005 f988 	bl	80058dc <HAL_UART_Transmit_DMA>
 80005cc:	4603      	mov	r3, r0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000020c 	.word	0x2000020c

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 ff90 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f816 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa28 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f9f0 	bl	80009d0 <MX_DMA_Init>
  MX_DCMI_Init();
 80005f0:	f000 f87c 	bl	80006ec <MX_DCMI_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f994 	bl	8000920 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 f9bc 	bl	8000974 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80005fc:	f000 f8aa 	bl	8000754 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000600:	f000 f8d6 	bl	80007b0 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000604:	f000 f956 	bl	80008b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  i2c_scan();
 8000608:	f000 fb6c 	bl	8000ce4 <i2c_scan>
  ov2640_init();
 800060c:	f000 faf2 	bl	8000bf4 <ov2640_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x34>

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2234      	movs	r2, #52	@ 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 fc92 	bl	8006f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a28      	ldr	r2, [pc, #160]	@ (80006e4 <SystemClock_Config+0xd0>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <SystemClock_Config+0xd0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a22      	ldr	r2, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd4>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000674:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000682:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	@ 0xa8
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f004 f865 	bl	800476c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a8:	f000 fa9e 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f9da 	bl	8003a84 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d6:	f000 fa87 	bl	8000be8 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006f0:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_DCMI_Init+0x60>)
 80006f2:	4a17      	ldr	r2, [pc, #92]	@ (8000750 <MX_DCMI_Init+0x64>)
 80006f4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_DCMI_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_DCMI_Init+0x60>)
 80006fe:	2220      	movs	r2, #32
 8000700:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_DCMI_Init+0x60>)
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_DCMI_Init+0x60>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_DCMI_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_DCMI_Init+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_DCMI_Init+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_DCMI_Init+0x60>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_DCMI_Init+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_DCMI_Init+0x60>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_DCMI_Init+0x60>)
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_DCMI_Init+0x60>)
 800073a:	f001 f949 	bl	80019d0 <HAL_DCMI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 fa50 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000078 	.word	0x20000078
 8000750:	50050000 	.word	0x50050000

08000754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_I2C2_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <MX_I2C2_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000760:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <MX_I2C2_Init+0x58>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_I2C2_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000772:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000776:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_I2C2_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_I2C2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_I2C2_Init+0x50>)
 8000792:	f001 ff6b 	bl	800266c <HAL_I2C_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 fa24 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000128 	.word	0x20000128
 80007a8:	40005800 	.word	0x40005800
 80007ac:	000186a0 	.word	0x000186a0

080007b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b092      	sub	sp, #72	@ 0x48
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2220      	movs	r2, #32
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 fbb6 	bl	8006f4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e0:	4b32      	ldr	r3, [pc, #200]	@ (80008ac <MX_TIM1_Init+0xfc>)
 80007e2:	4a33      	ldr	r2, [pc, #204]	@ (80008b0 <MX_TIM1_Init+0x100>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007e6:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <MX_TIM1_Init+0xfc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b2f      	ldr	r3, [pc, #188]	@ (80008ac <MX_TIM1_Init+0xfc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80007f2:	4b2e      	ldr	r3, [pc, #184]	@ (80008ac <MX_TIM1_Init+0xfc>)
 80007f4:	2214      	movs	r2, #20
 80007f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b2c      	ldr	r3, [pc, #176]	@ (80008ac <MX_TIM1_Init+0xfc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_TIM1_Init+0xfc>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000804:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <MX_TIM1_Init+0xfc>)
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800080a:	4828      	ldr	r0, [pc, #160]	@ (80008ac <MX_TIM1_Init+0xfc>)
 800080c:	f004 fa9b 	bl	8004d46 <HAL_TIM_PWM_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000816:	f000 f9e7 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000822:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000826:	4619      	mov	r1, r3
 8000828:	4820      	ldr	r0, [pc, #128]	@ (80008ac <MX_TIM1_Init+0xfc>)
 800082a:	f004 ff27 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000834:	f000 f9d8 	bl	8000be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000838:	2360      	movs	r3, #96	@ 0x60
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 800083c:	230a      	movs	r3, #10
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4813      	ldr	r0, [pc, #76]	@ (80008ac <MX_TIM1_Init+0xfc>)
 800085e:	f004 fbc9 	bl	8004ff4 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000868:	f000 f9be 	bl	8000be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000880:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000884:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4807      	ldr	r0, [pc, #28]	@ (80008ac <MX_TIM1_Init+0xfc>)
 8000890:	f004 ff70 	bl	8005774 <HAL_TIMEx_ConfigBreakDeadTime>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800089a:	f000 f9a5 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800089e:	4803      	ldr	r0, [pc, #12]	@ (80008ac <MX_TIM1_Init+0xfc>)
 80008a0:	f000 fc1e 	bl	80010e0 <HAL_TIM_MspPostInit>

}
 80008a4:	bf00      	nop
 80008a6:	3748      	adds	r7, #72	@ 0x48
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000017c 	.word	0x2000017c
 80008b0:	40010000 	.word	0x40010000

080008b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_TIM6_Init+0x64>)
 80008c4:	4a15      	ldr	r2, [pc, #84]	@ (800091c <MX_TIM6_Init+0x68>)
 80008c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80008c8:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_TIM6_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_TIM6_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_TIM6_Init+0x64>)
 80008d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_TIM6_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_TIM6_Init+0x64>)
 80008e4:	f004 f9e0 	bl	8004ca8 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008ee:	f000 f97b 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <MX_TIM6_Init+0x64>)
 8000900:	f004 febc 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800090a:	f000 f96d 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001c4 	.word	0x200001c4
 800091c:	40001000 	.word	0x40001000

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <MX_USART3_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_USART3_UART_Init+0x4c>)
 8000958:	f004 ff72 	bl	8005840 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f941 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000020c 	.word	0x2000020c
 8000970:	40004800 	.word	0x40004800

08000974 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800097e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2206      	movs	r2, #6
 8000984:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2202      	movs	r2, #2
 800098a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2202      	movs	r2, #2
 8000996:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2201      	movs	r2, #1
 800099c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	f002 ff1b 	bl	80037f2 <HAL_PCD_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f911 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200002b0 	.word	0x200002b0

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a16      	ldr	r2, [pc, #88]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <MX_DMA_Init+0x68>)
 80009fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_DMA_Init+0x68>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	200e      	movs	r0, #14
 8000a14:	f000 fee7 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a18:	200e      	movs	r0, #14
 8000a1a:	f000 ff00 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2039      	movs	r0, #57	@ 0x39
 8000a24:	f000 fedf 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a28:	2039      	movs	r0, #57	@ 0x39
 8000a2a:	f000 fef8 	bl	800181e <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	@ 0x38
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
 8000a56:	4b60      	ldr	r3, [pc, #384]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a5f      	ldr	r2, [pc, #380]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	623b      	str	r3, [r7, #32]
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
 8000a72:	4b59      	ldr	r3, [pc, #356]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a58      	ldr	r2, [pc, #352]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b56      	ldr	r3, [pc, #344]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	4b52      	ldr	r3, [pc, #328]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a51      	ldr	r2, [pc, #324]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b48      	ldr	r3, [pc, #288]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b44      	ldr	r3, [pc, #272]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a43      	ldr	r2, [pc, #268]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a35      	ldr	r2, [pc, #212]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b33      	ldr	r3, [pc, #204]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <MX_GPIO_Init+0x19c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b38:	4828      	ldr	r0, [pc, #160]	@ (8000bdc <MX_GPIO_Init+0x1a0>)
 8000b3a:	f001 fd59 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(camera_reset_GPIO_Port, camera_reset_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2101      	movs	r1, #1
 8000b42:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <MX_GPIO_Init+0x1a4>)
 8000b44:	f001 fd54 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, camera_PWDN_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2142      	movs	r1, #66	@ 0x42
 8000b4c:	4824      	ldr	r0, [pc, #144]	@ (8000be0 <MX_GPIO_Init+0x1a4>)
 8000b4e:	f001 fd4f 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	481e      	ldr	r0, [pc, #120]	@ (8000be4 <MX_GPIO_Init+0x1a8>)
 8000b6a:	f001 fbad 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b6e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4815      	ldr	r0, [pc, #84]	@ (8000bdc <MX_GPIO_Init+0x1a0>)
 8000b88:	f001 fb9e 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_reset_Pin camera_PWDN_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = camera_reset_Pin|camera_PWDN_Pin|USB_PowerSwitchOn_Pin;
 8000b8c:	2343      	movs	r3, #67	@ 0x43
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480f      	ldr	r0, [pc, #60]	@ (8000be0 <MX_GPIO_Init+0x1a4>)
 8000ba4:	f001 fb90 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ba8:	2380      	movs	r3, #128	@ 0x80
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <MX_GPIO_Init+0x1a4>)
 8000bbc:	f001 fb84 	bl	80022c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2028      	movs	r0, #40	@ 0x28
 8000bc6:	f000 fe0e 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bca:	2028      	movs	r0, #40	@ 0x28
 8000bcc:	f000 fe27 	bl	800181e <HAL_NVIC_EnableIRQ>

}
 8000bd0:	bf00      	nop
 8000bd2:	3738      	adds	r7, #56	@ 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40021800 	.word	0x40021800
 8000be4:	40020800 	.word	0x40020800

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <ov2640_init>:
  {0x98, 0x00},
  {0x99, 0x00},
  {0x00, 0x00},
};

uint8_t ov2640_init(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09a      	sub	sp, #104	@ 0x68
 8000bf8:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 8000bfa:	4814      	ldr	r0, [pc, #80]	@ (8000c4c <ov2640_init+0x58>)
 8000bfc:	f7ff fcd8 	bl	80005b0 <print_msg>
  val = ov2640_read(0x0A);
 8000c00:	200a      	movs	r0, #10
 8000c02:	f000 f829 	bl	8000c58 <ov2640_read>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if (val != 0x26) {
 8000c0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c10:	2b26      	cmp	r3, #38	@ 0x26
 8000c12:	d00c      	beq.n	8000c2e <ov2640_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8000c14:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000c18:	463b      	mov	r3, r7
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <ov2640_init+0x5c>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f006 f975 	bl	8006f0c <siprintf>
    print_msg(msg);
 8000c22:	463b      	mov	r3, r7
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fcc3 	bl	80005b0 <print_msg>
    return 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e009      	b.n	8000c42 <ov2640_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <ov2640_init+0x60>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f006 f96a 	bl	8006f0c <siprintf>
		print_msg(msg);
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fcb8 	bl	80005b0 <print_msg>
  }

  // Re-use the same code from Lab 5 here.

  return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3768      	adds	r7, #104	@ 0x68
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08007864 	.word	0x08007864
 8000c50:	08007870 	.word	0x08007870
 8000c54:	0800788c 	.word	0x0800788c

08000c58 <ov2640_read>:

uint8_t ov2640_read(uint8_t reg){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b09e      	sub	sp, #120	@ 0x78
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  // Re-use the same code from Lab 5 here.

	uint8_t data;
	char msg[100];
	// Transmit register
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV2640, &reg, 1, 10000);
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2160      	movs	r1, #96	@ 0x60
 8000c6e:	481b      	ldr	r0, [pc, #108]	@ (8000cdc <ov2640_read+0x84>)
 8000c70:	f001 fe40 	bl	80028f4 <HAL_I2C_Master_Transmit>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	while(status != HAL_OK) {
 8000c7a:	e01a      	b.n	8000cb2 <ov2640_read+0x5a>
		 sprintf(msg, "Error\n");
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	4917      	ldr	r1, [pc, #92]	@ (8000ce0 <ov2640_read+0x88>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f006 f942 	bl	8006f0c <siprintf>
	print_msg(msg);
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fc8f 	bl	80005b0 <print_msg>
	HAL_Delay(1000);
 8000c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c96:	f000 fca7 	bl	80015e8 <HAL_Delay>
	status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV2640, &reg, 1, 10000);
 8000c9a:	1dfa      	adds	r2, r7, #7
 8000c9c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	2160      	movs	r1, #96	@ 0x60
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <ov2640_read+0x84>)
 8000ca8:	f001 fe24 	bl	80028f4 <HAL_I2C_Master_Transmit>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	while(status != HAL_OK) {
 8000cb2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1e0      	bne.n	8000c7c <ov2640_read+0x24>
	}
	// Read data
	HAL_I2C_Master_Receive(&hi2c2, Read_ADDR_OV2640, &data, 1, HAL_MAX_DELAY);
 8000cba:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2161      	movs	r1, #97	@ 0x61
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <ov2640_read+0x84>)
 8000cca:	f001 ff11 	bl	8002af0 <HAL_I2C_Master_Receive>
	return data;
 8000cce:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e

  //
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3770      	adds	r7, #112	@ 0x70
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000128 	.word	0x20000128
 8000ce0:	08007898 	.word	0x08007898

08000ce4 <i2c_scan>:


void i2c_scan() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	@ 0x38
 8000ce8:	af00      	add	r7, sp, #0
    char msg[50];
    for (uint8_t addr = 0x08; addr < 0x78; addr++) {
 8000cea:	2308      	movs	r3, #8
 8000cec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000cf0:	e01c      	b.n	8000d2c <i2c_scan+0x48>
        if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, 100) == HAL_OK) {
 8000cf2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	b299      	uxth	r1, r3
 8000cfc:	2364      	movs	r3, #100	@ 0x64
 8000cfe:	2201      	movs	r2, #1
 8000d00:	480f      	ldr	r0, [pc, #60]	@ (8000d40 <i2c_scan+0x5c>)
 8000d02:	f002 f91b 	bl	8002f3c <HAL_I2C_IsDeviceReady>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10a      	bne.n	8000d22 <i2c_scan+0x3e>
            sprintf(msg, "Device found at 0x%X\n", addr);
 8000d0c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	490c      	ldr	r1, [pc, #48]	@ (8000d44 <i2c_scan+0x60>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f006 f8f9 	bl	8006f0c <siprintf>
            print_msg(msg);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fc47 	bl	80005b0 <print_msg>
    for (uint8_t addr = 0x08; addr < 0x78; addr++) {
 8000d22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d26:	3301      	adds	r3, #1
 8000d28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d30:	2b77      	cmp	r3, #119	@ 0x77
 8000d32:	d9de      	bls.n	8000cf2 <i2c_scan+0xe>
        }
    }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3738      	adds	r7, #56	@ 0x38
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000128 	.word	0x20000128
 8000d44:	080078a0 	.word	0x080078a0

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	@ 0x38
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a78      	ldr	r2, [pc, #480]	@ (8000f98 <HAL_DCMI_MspInit+0x200>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	f040 80e9 	bne.w	8000f8e <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
 8000dc0:	4b76      	ldr	r3, [pc, #472]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dc4:	4a75      	ldr	r2, [pc, #468]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dcc:	4b73      	ldr	r3, [pc, #460]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
 8000ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de0:	4a6e      	ldr	r2, [pc, #440]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de8:	4b6c      	ldr	r3, [pc, #432]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	4b68      	ldr	r3, [pc, #416]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	4a67      	ldr	r2, [pc, #412]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e04:	4b65      	ldr	r3, [pc, #404]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	4b61      	ldr	r3, [pc, #388]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	4a60      	ldr	r2, [pc, #384]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e20:	4b5e      	ldr	r3, [pc, #376]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	4b5a      	ldr	r3, [pc, #360]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a59      	ldr	r2, [pc, #356]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b57      	ldr	r3, [pc, #348]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b53      	ldr	r3, [pc, #332]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	4a52      	ldr	r2, [pc, #328]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e58:	4b50      	ldr	r3, [pc, #320]	@ (8000f9c <HAL_DCMI_MspInit+0x204>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e64:	2370      	movs	r3, #112	@ 0x70
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e74:	230d      	movs	r3, #13
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4848      	ldr	r0, [pc, #288]	@ (8000fa0 <HAL_DCMI_MspInit+0x208>)
 8000e80:	f001 fa22 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000e84:	2350      	movs	r3, #80	@ 0x50
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e94:	230d      	movs	r3, #13
 8000e96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4841      	ldr	r0, [pc, #260]	@ (8000fa4 <HAL_DCMI_MspInit+0x20c>)
 8000ea0:	f001 fa12 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ea4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb6:	230d      	movs	r3, #13
 8000eb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4839      	ldr	r0, [pc, #228]	@ (8000fa8 <HAL_DCMI_MspInit+0x210>)
 8000ec2:	f001 fa01 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ed6:	230d      	movs	r3, #13
 8000ed8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4832      	ldr	r0, [pc, #200]	@ (8000fac <HAL_DCMI_MspInit+0x214>)
 8000ee2:	f001 f9f1 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ef8:	230d      	movs	r3, #13
 8000efa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	482b      	ldr	r0, [pc, #172]	@ (8000fb0 <HAL_DCMI_MspInit+0x218>)
 8000f04:	f001 f9e0 	bl	80022c8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fb8 <HAL_DCMI_MspInit+0x220>)
 8000f0c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f14:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f16:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1c:	4b25      	ldr	r3, [pc, #148]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f28:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f30:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f38:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f40:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f48:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f52:	2203      	movs	r2, #3
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000f62:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f64:	f000 fdae 	bl	8001ac4 <HAL_DMA_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8000f6e:	f7ff fe3b 	bl	8000be8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f76:	649a      	str	r2, [r3, #72]	@ 0x48
 8000f78:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <HAL_DCMI_MspInit+0x21c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	204e      	movs	r0, #78	@ 0x4e
 8000f84:	f000 fc2f 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000f88:	204e      	movs	r0, #78	@ 0x4e
 8000f8a:	f000 fc48 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3738      	adds	r7, #56	@ 0x38
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	50050000 	.word	0x50050000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	200000c8 	.word	0x200000c8
 8000fb8:	40026428 	.word	0x40026428

08000fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <HAL_I2C_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12b      	bne.n	8001036 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_I2C_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_I2C_MspInit+0x88>)
 8000fe8:	f043 0320 	orr.w	r3, r3, #32
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_I2C_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0320 	and.w	r3, r3, #32
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffe:	2312      	movs	r3, #18
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001002:	2301      	movs	r3, #1
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800100a:	2304      	movs	r3, #4
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <HAL_I2C_MspInit+0x8c>)
 8001016:	f001 f957 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <HAL_I2C_MspInit+0x88>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <HAL_I2C_MspInit+0x88>)
 8001024:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001028:	6413      	str	r3, [r2, #64]	@ 0x40
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_I2C_MspInit+0x88>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40005800 	.word	0x40005800
 8001044:	40023800 	.word	0x40023800
 8001048:	40021400 	.word	0x40021400

0800104c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <HAL_TIM_PWM_MspInit+0x3c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10d      	bne.n	800107a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_TIM_PWM_MspInit+0x40>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a09      	ldr	r2, [pc, #36]	@ (800108c <HAL_TIM_PWM_MspInit+0x40>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <HAL_TIM_PWM_MspInit+0x40>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40010000 	.word	0x40010000
 800108c:	40023800 	.word	0x40023800

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d115      	bne.n	80010ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <HAL_TIM_Base_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <HAL_TIM_Base_MspInit+0x4c>)
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_TIM_Base_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2036      	movs	r0, #54	@ 0x36
 80010c4:	f000 fb8f 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010c8:	2036      	movs	r0, #54	@ 0x36
 80010ca:	f000 fba8 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40001000 	.word	0x40001000
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <HAL_TIM_MspPostInit+0x68>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11e      	bne.n	8001140 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_TIM_MspPostInit+0x6c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a10      	ldr	r2, [pc, #64]	@ (800114c <HAL_TIM_MspPostInit+0x6c>)
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_TIM_MspPostInit+0x6c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800111e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001122:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	@ (8001150 <HAL_TIM_MspPostInit+0x70>)
 800113c:	f001 f8c4 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40010000 	.word	0x40010000
 800114c:	40023800 	.word	0x40023800
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a39      	ldr	r2, [pc, #228]	@ (8001258 <HAL_UART_MspInit+0x104>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d16b      	bne.n	800124e <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_UART_MspInit+0x108>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	4a37      	ldr	r2, [pc, #220]	@ (800125c <HAL_UART_MspInit+0x108>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
 8001186:	4b35      	ldr	r3, [pc, #212]	@ (800125c <HAL_UART_MspInit+0x108>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b31      	ldr	r3, [pc, #196]	@ (800125c <HAL_UART_MspInit+0x108>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a30      	ldr	r2, [pc, #192]	@ (800125c <HAL_UART_MspInit+0x108>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b2e      	ldr	r3, [pc, #184]	@ (800125c <HAL_UART_MspInit+0x108>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c0:	2307      	movs	r3, #7
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4825      	ldr	r0, [pc, #148]	@ (8001260 <HAL_UART_MspInit+0x10c>)
 80011cc:	f001 f87c 	bl	80022c8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80011d0:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <HAL_UART_MspInit+0x110>)
 80011d2:	4a25      	ldr	r2, [pc, #148]	@ (8001268 <HAL_UART_MspInit+0x114>)
 80011d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80011d6:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <HAL_UART_MspInit+0x110>)
 80011d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_UART_MspInit+0x110>)
 80011e0:	2240      	movs	r2, #64	@ 0x40
 80011e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_UART_MspInit+0x110>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <HAL_UART_MspInit+0x110>)
 80011ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_UART_MspInit+0x110>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_UART_MspInit+0x110>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_UART_MspInit+0x110>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_UART_MspInit+0x110>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_UART_MspInit+0x110>)
 800120c:	2204      	movs	r2, #4
 800120e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001210:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HAL_UART_MspInit+0x110>)
 8001212:	2203      	movs	r2, #3
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <HAL_UART_MspInit+0x110>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_UART_MspInit+0x110>)
 800121e:	2200      	movs	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001222:	4810      	ldr	r0, [pc, #64]	@ (8001264 <HAL_UART_MspInit+0x110>)
 8001224:	f000 fc4e 	bl	8001ac4 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800122e:	f7ff fcdb 	bl	8000be8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <HAL_UART_MspInit+0x110>)
 8001236:	635a      	str	r2, [r3, #52]	@ 0x34
 8001238:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <HAL_UART_MspInit+0x110>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2027      	movs	r0, #39	@ 0x27
 8001244:	f000 facf 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001248:	2027      	movs	r0, #39	@ 0x27
 800124a:	f000 fae8 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40004800 	.word	0x40004800
 800125c:	40023800 	.word	0x40023800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	20000250 	.word	0x20000250
 8001268:	40026058 	.word	0x40026058

0800126c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0a0      	sub	sp, #128	@ 0x80
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	225c      	movs	r2, #92	@ 0x5c
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fe5d 	bl	8006f4c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800129a:	d14e      	bne.n	800133a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800129c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80012a2:	2300      	movs	r3, #0
 80012a4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fd04 	bl	8003cb8 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80012b6:	f7ff fc97 	bl	8000be8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <HAL_PCD_MspInit+0xd8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a20      	ldr	r2, [pc, #128]	@ (8001344 <HAL_PCD_MspInit+0xd8>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <HAL_PCD_MspInit+0xd8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012d6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80012da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012e8:	230a      	movs	r3, #10
 80012ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012f0:	4619      	mov	r1, r3
 80012f2:	4815      	ldr	r0, [pc, #84]	@ (8001348 <HAL_PCD_MspInit+0xdc>)
 80012f4:	f000 ffe8 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800130a:	4619      	mov	r1, r3
 800130c:	480e      	ldr	r0, [pc, #56]	@ (8001348 <HAL_PCD_MspInit+0xdc>)
 800130e:	f000 ffdb 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HAL_PCD_MspInit+0xd8>)
 8001314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001316:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <HAL_PCD_MspInit+0xd8>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131c:	6353      	str	r3, [r2, #52]	@ 0x34
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_PCD_MspInit+0xd8>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_PCD_MspInit+0xd8>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_PCD_MspInit+0xd8>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3780      	adds	r7, #128	@ 0x80
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 f901 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <DMA1_Stream3_IRQHandler+0x10>)
 80013b2:	f000 fd1f 	bl	8001df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000250 	.word	0x20000250

080013c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <USART3_IRQHandler+0x10>)
 80013c6:	f004 fb07 	bl	80059d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000020c 	.word	0x2000020c

080013d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80013d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013dc:	f001 f922 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <TIM6_DAC_IRQHandler+0x10>)
 80013ea:	f003 fcfb 	bl	8004de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001c4 	.word	0x200001c4

080013f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <DMA2_Stream1_IRQHandler+0x10>)
 80013fe:	f000 fcf9 	bl	8001df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200000c8 	.word	0x200000c8

0800140c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <DCMI_IRQHandler+0x10>)
 8001412:	f000 fa1f 	bl	8001854 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000078 	.word	0x20000078

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	@ (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f005 fd84 	bl	8006f5c <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20020000 	.word	0x20020000
 8001480:	00000400 	.word	0x00000400
 8001484:	200007bc 	.word	0x200007bc
 8001488:	20000910 	.word	0x20000910

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b6:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b8:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014cc:	4c0b      	ldr	r4, [pc, #44]	@ (80014fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014da:	f7ff ffd7 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f005 fd43 	bl	8006f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff f87b 	bl	80005dc <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014f4:	0800791c 	.word	0x0800791c
  ldr r2, =_sbss
 80014f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014fc:	2000090c 	.word	0x2000090c

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <HAL_Init+0x40>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_Init+0x40>)
 800151a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <HAL_Init+0x40>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 f94f 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fc06 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f967 	bl	800183a <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001584:	f000 f92f 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	@ (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	200007c0 	.word	0x200007c0

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200007c0 	.word	0x200007c0

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	@ (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	@ (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	@ (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	@ 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d016      	beq.n	800189c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2204      	movs	r2, #4
 8001874:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	f043 0202 	orr.w	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2204      	movs	r2, #4
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800188e:	4a2f      	ldr	r2, [pc, #188]	@ (800194c <HAL_DCMI_IRQHandler+0xf8>)
 8001890:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fa8a 	bl	8001db0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d016      	beq.n	80018d4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2202      	movs	r2, #2
 80018ac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c6:	4a21      	ldr	r2, [pc, #132]	@ (800194c <HAL_DCMI_IRQHandler+0xf8>)
 80018c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fa6e 	bl	8001db0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2210      	movs	r2, #16
 80018e4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f83c 	bl	8001964 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2208      	movs	r2, #8
 80018fc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f83a 	bl	8001978 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b02      	cmp	r3, #2
 800191a:	d107      	bne.n	800192c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 021e 	bic.w	r2, r2, #30
 800192a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f825 	bl	800198c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	080019a1 	.word	0x080019a1

08001950 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ac:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d003      	beq.n	80019c0 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff ffc5 	bl	8001950 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e069      	b.n	8001ab6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff f9ce 	bl	8000d98 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff f9cb 	bl	8000d98 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac0 <HAL_DCMI_Init+0xf0>)
 8001a16:	400b      	ands	r3, r1
 8001a18:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001a2e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001a3a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001a46:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8001a52:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001a5e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b10      	cmp	r3, #16
 8001a6e:	d112      	bne.n	8001a96 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7f1b      	ldrb	r3, [r3, #28]
 8001a74:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7f5b      	ldrb	r3, [r3, #29]
 8001a7a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001a7c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7f9b      	ldrb	r3, [r3, #30]
 8001a82:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001a84:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7fdb      	ldrb	r3, [r3, #31]
 8001a8c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001a92:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001a94:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 021e 	orr.w	r2, r2, #30
 8001aa4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	ffe0f007 	.word	0xffe0f007

08001ac4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fd7e 	bl	80015d0 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e099      	b.n	8001c14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b00:	e00f      	b.n	8001b22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b02:	f7ff fd65 	bl	80015d0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d908      	bls.n	8001b22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e078      	b.n	8001c14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e8      	bne.n	8001b02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4b38      	ldr	r3, [pc, #224]	@ (8001c1c <HAL_DMA_Init+0x158>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d107      	bne.n	8001b8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	4313      	orrs	r3, r2
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f023 0307 	bic.w	r3, r3, #7
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d117      	bne.n	8001be6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00e      	beq.n	8001be6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fb01 	bl	80021d0 <DMA_CheckFifoParam>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2240      	movs	r2, #64	@ 0x40
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001be2:	2301      	movs	r3, #1
 8001be4:	e016      	b.n	8001c14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fab8 	bl	8002164 <DMA_CalcBaseAndBitshift>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	223f      	movs	r2, #63	@ 0x3f
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	f010803f 	.word	0xf010803f

08001c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_DMA_Start_IT+0x26>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e040      	b.n	8001cc8 <HAL_DMA_Start_IT+0xa8>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d12f      	bne.n	8001cba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fa4a 	bl	8002108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	223f      	movs	r2, #63	@ 0x3f
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0216 	orr.w	r2, r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0208 	orr.w	r2, r2, #8
 8001ca6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e005      	b.n	8001cc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cde:	f7ff fc77 	bl	80015d0 <HAL_GetTick>
 8001ce2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d008      	beq.n	8001d02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e052      	b.n	8001da8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0216 	bic.w	r2, r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <HAL_DMA_Abort+0x62>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d52:	e013      	b.n	8001d7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d54:	f7ff fc3c 	bl	80015d0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d90c      	bls.n	8001d7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2220      	movs	r2, #32
 8001d66:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e015      	b.n	8001da8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e4      	bne.n	8001d54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8e:	223f      	movs	r2, #63	@ 0x3f
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d004      	beq.n	8001dce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2280      	movs	r2, #128	@ 0x80
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00c      	b.n	8001de8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e00:	4b8e      	ldr	r3, [pc, #568]	@ (800203c <HAL_DMA_IRQHandler+0x248>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a8e      	ldr	r2, [pc, #568]	@ (8002040 <HAL_DMA_IRQHandler+0x24c>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0a9b      	lsrs	r3, r3, #10
 8001e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	2208      	movs	r2, #8
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d01a      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	2201      	movs	r2, #1
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d012      	beq.n	8001e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8e:	f043 0202 	orr.w	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d012      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00b      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb8:	2204      	movs	r2, #4
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d043      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03c      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eee:	2210      	movs	r2, #16
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d018      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d108      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
 8001f22:	e01f      	b.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
 8001f34:	e016      	b.n	8001f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0208 	bic.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f68:	2220      	movs	r2, #32
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 808f 	beq.w	8002094 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8087 	beq.w	8002094 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d136      	bne.n	800200c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0216 	bic.w	r2, r2, #22
 8001fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <HAL_DMA_IRQHandler+0x1da>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0208 	bic.w	r2, r2, #8
 8001fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe2:	223f      	movs	r2, #63	@ 0x3f
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d07e      	beq.n	8002100 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
        }
        return;
 800200a:	e079      	b.n	8002100 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01d      	beq.n	8002056 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202c:	2b00      	cmp	r3, #0
 800202e:	d031      	beq.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
 8002038:	e02c      	b.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000
 8002040:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e01e      	b.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10f      	bne.n	8002084 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0210 	bic.w	r2, r2, #16
 8002072:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002098:	2b00      	cmp	r3, #0
 800209a:	d032      	beq.n	8002102 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d022      	beq.n	80020ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2205      	movs	r2, #5
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3301      	adds	r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d307      	bcc.n	80020dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f2      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x2cc>
 80020da:	e000      	b.n	80020de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
 80020fe:	e000      	b.n	8002102 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002100:	bf00      	nop
    }
  }
}
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b40      	cmp	r3, #64	@ 0x40
 8002134:	d108      	bne.n	8002148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002146:	e007      	b.n	8002158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3b10      	subs	r3, #16
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800217e:	4a13      	ldr	r2, [pc, #76]	@ (80021cc <DMA_CalcBaseAndBitshift+0x68>)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d909      	bls.n	80021a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80021a4:	e007      	b.n	80021b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	aaaaaaab 	.word	0xaaaaaaab
 80021cc:	080078d0 	.word	0x080078d0

080021d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d11f      	bne.n	800222a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d856      	bhi.n	800229e <DMA_CheckFifoParam+0xce>
 80021f0:	a201      	add	r2, pc, #4	@ (adr r2, 80021f8 <DMA_CheckFifoParam+0x28>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800221b 	.word	0x0800221b
 8002200:	08002209 	.word	0x08002209
 8002204:	0800229f 	.word	0x0800229f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d046      	beq.n	80022a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002218:	e043      	b.n	80022a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002222:	d140      	bne.n	80022a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002228:	e03d      	b.n	80022a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002232:	d121      	bne.n	8002278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d837      	bhi.n	80022aa <DMA_CheckFifoParam+0xda>
 800223a:	a201      	add	r2, pc, #4	@ (adr r2, 8002240 <DMA_CheckFifoParam+0x70>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002251 	.word	0x08002251
 8002244:	08002257 	.word	0x08002257
 8002248:	08002251 	.word	0x08002251
 800224c:	08002269 	.word	0x08002269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      break;
 8002254:	e030      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d025      	beq.n	80022ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002266:	e022      	b.n	80022ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002270:	d11f      	bne.n	80022b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002276:	e01c      	b.n	80022b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d903      	bls.n	8002286 <DMA_CheckFifoParam+0xb6>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d003      	beq.n	800228c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002284:	e018      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      break;
 800228a:	e015      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e00b      	b.n	80022b6 <DMA_CheckFifoParam+0xe6>
      break;
 800229e:	bf00      	nop
 80022a0:	e00a      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e008      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e006      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022aa:	bf00      	nop
 80022ac:	e004      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e002      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
    }
  } 
  
  return status; 
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	@ 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e165      	b.n	80025b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8154 	bne.w	80025aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d005      	beq.n	800231a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	2b02      	cmp	r3, #2
 8002318:	d130      	bne.n	800237c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 0201 	and.w	r2, r3, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b03      	cmp	r3, #3
 8002386:	d017      	beq.n	80023b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d123      	bne.n	800240c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80ae 	beq.w	80025aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b5d      	ldr	r3, [pc, #372]	@ (80025c8 <HAL_GPIO_Init+0x300>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	4a5c      	ldr	r2, [pc, #368]	@ (80025c8 <HAL_GPIO_Init+0x300>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800245c:	6453      	str	r3, [r2, #68]	@ 0x44
 800245e:	4b5a      	ldr	r3, [pc, #360]	@ (80025c8 <HAL_GPIO_Init+0x300>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	4a58      	ldr	r2, [pc, #352]	@ (80025cc <HAL_GPIO_Init+0x304>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4f      	ldr	r2, [pc, #316]	@ (80025d0 <HAL_GPIO_Init+0x308>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d025      	beq.n	80024e2 <HAL_GPIO_Init+0x21a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4e      	ldr	r2, [pc, #312]	@ (80025d4 <HAL_GPIO_Init+0x30c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <HAL_GPIO_Init+0x216>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4d      	ldr	r2, [pc, #308]	@ (80025d8 <HAL_GPIO_Init+0x310>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_GPIO_Init+0x212>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4c      	ldr	r2, [pc, #304]	@ (80025dc <HAL_GPIO_Init+0x314>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x20e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4b      	ldr	r2, [pc, #300]	@ (80025e0 <HAL_GPIO_Init+0x318>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_GPIO_Init+0x20a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	@ (80025e4 <HAL_GPIO_Init+0x31c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x206>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a49      	ldr	r2, [pc, #292]	@ (80025e8 <HAL_GPIO_Init+0x320>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_GPIO_Init+0x202>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00c      	b.n	80024e4 <HAL_GPIO_Init+0x21c>
 80024ca:	2307      	movs	r3, #7
 80024cc:	e00a      	b.n	80024e4 <HAL_GPIO_Init+0x21c>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x21c>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x21c>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x21c>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x21c>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x21c>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f4:	4935      	ldr	r1, [pc, #212]	@ (80025cc <HAL_GPIO_Init+0x304>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002502:	4b3a      	ldr	r3, [pc, #232]	@ (80025ec <HAL_GPIO_Init+0x324>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002526:	4a31      	ldr	r2, [pc, #196]	@ (80025ec <HAL_GPIO_Init+0x324>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252c:	4b2f      	ldr	r3, [pc, #188]	@ (80025ec <HAL_GPIO_Init+0x324>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002550:	4a26      	ldr	r2, [pc, #152]	@ (80025ec <HAL_GPIO_Init+0x324>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002556:	4b25      	ldr	r3, [pc, #148]	@ (80025ec <HAL_GPIO_Init+0x324>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257a:	4a1c      	ldr	r2, [pc, #112]	@ (80025ec <HAL_GPIO_Init+0x324>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002580:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <HAL_GPIO_Init+0x324>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a4:	4a11      	ldr	r2, [pc, #68]	@ (80025ec <HAL_GPIO_Init+0x324>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f ae96 	bls.w	80022e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40021400 	.word	0x40021400
 80025e8:	40021800 	.word	0x40021800
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263a:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f806 	bl	8002654 <HAL_GPIO_EXTI_Callback>
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40013c00 	.word	0x40013c00

08002654 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e12b      	b.n	80028d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fc92 	bl	8000fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	@ 0x24
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d0:	f001 faca 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 80026d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a81      	ldr	r2, [pc, #516]	@ (80028e0 <HAL_I2C_Init+0x274>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d807      	bhi.n	80026f0 <HAL_I2C_Init+0x84>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4a80      	ldr	r2, [pc, #512]	@ (80028e4 <HAL_I2C_Init+0x278>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	bf94      	ite	ls
 80026e8:	2301      	movls	r3, #1
 80026ea:	2300      	movhi	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e006      	b.n	80026fe <HAL_I2C_Init+0x92>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a7d      	ldr	r2, [pc, #500]	@ (80028e8 <HAL_I2C_Init+0x27c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	bf94      	ite	ls
 80026f8:	2301      	movls	r3, #1
 80026fa:	2300      	movhi	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0e7      	b.n	80028d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a78      	ldr	r2, [pc, #480]	@ (80028ec <HAL_I2C_Init+0x280>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a6a      	ldr	r2, [pc, #424]	@ (80028e0 <HAL_I2C_Init+0x274>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d802      	bhi.n	8002740 <HAL_I2C_Init+0xd4>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3301      	adds	r3, #1
 800273e:	e009      	b.n	8002754 <HAL_I2C_Init+0xe8>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	4a69      	ldr	r2, [pc, #420]	@ (80028f0 <HAL_I2C_Init+0x284>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	3301      	adds	r3, #1
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002766:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	495c      	ldr	r1, [pc, #368]	@ (80028e0 <HAL_I2C_Init+0x274>)
 8002770:	428b      	cmp	r3, r1
 8002772:	d819      	bhi.n	80027a8 <HAL_I2C_Init+0x13c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e59      	subs	r1, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002788:	400b      	ands	r3, r1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_I2C_Init+0x138>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e59      	subs	r1, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fbb1 f3f3 	udiv	r3, r1, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a2:	e051      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e04f      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <HAL_I2C_Init+0x168>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e012      	b.n	80027fa <HAL_I2C_Init+0x18e>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	0099      	lsls	r1, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Init+0x196>
 80027fe:	2301      	movs	r3, #1
 8002800:	e022      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10e      	bne.n	8002828 <HAL_I2C_Init+0x1bc>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1e58      	subs	r0, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	440b      	add	r3, r1
 8002818:	fbb0 f3f3 	udiv	r3, r0, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002826:	e00f      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e58      	subs	r0, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	0099      	lsls	r1, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	fbb0 f3f3 	udiv	r3, r0, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	6809      	ldr	r1, [r1, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6911      	ldr	r1, [r2, #16]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68d2      	ldr	r2, [r2, #12]
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	000186a0 	.word	0x000186a0
 80028e4:	001e847f 	.word	0x001e847f
 80028e8:	003d08ff 	.word	0x003d08ff
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	10624dd3 	.word	0x10624dd3

080028f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	461a      	mov	r2, r3
 8002900:	460b      	mov	r3, r1
 8002902:	817b      	strh	r3, [r7, #10]
 8002904:	4613      	mov	r3, r2
 8002906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7fe fe62 	bl	80015d0 <HAL_GetTick>
 800290c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	f040 80e0 	bne.w	8002adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2319      	movs	r3, #25
 8002922:	2201      	movs	r2, #1
 8002924:	4970      	ldr	r1, [pc, #448]	@ (8002ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fd86 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002932:	2302      	movs	r3, #2
 8002934:	e0d3      	b.n	8002ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_I2C_Master_Transmit+0x50>
 8002940:	2302      	movs	r3, #2
 8002942:	e0cc      	b.n	8002ade <HAL_I2C_Master_Transmit+0x1ea>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d007      	beq.n	800296a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2221      	movs	r2, #33	@ 0x21
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2210      	movs	r2, #16
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	893a      	ldrh	r2, [r7, #8]
 800299a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a50      	ldr	r2, [pc, #320]	@ (8002aec <HAL_I2C_Master_Transmit+0x1f8>)
 80029aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029ac:	8979      	ldrh	r1, [r7, #10]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fbf0 	bl	8003198 <I2C_MasterRequestWrite>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e08d      	b.n	8002ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029d8:	e066      	b.n	8002aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	6a39      	ldr	r1, [r7, #32]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fe00 	bl	80035e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d107      	bne.n	8002a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06b      	b.n	8002ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d11b      	bne.n	8002a7c <HAL_I2C_Master_Transmit+0x188>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d017      	beq.n	8002a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	6a39      	ldr	r1, [r7, #32]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fdf0 	bl	8003666 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d107      	bne.n	8002aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e01a      	b.n	8002ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d194      	bne.n	80029da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	00100002 	.word	0x00100002
 8002aec:	ffff0000 	.word	0xffff0000

08002af0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	@ 0x30
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	460b      	mov	r3, r1
 8002afe:	817b      	strh	r3, [r7, #10]
 8002b00:	4613      	mov	r3, r2
 8002b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7fe fd64 	bl	80015d0 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	f040 820b 	bne.w	8002f2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2319      	movs	r3, #25
 8002b1e:	2201      	movs	r2, #1
 8002b20:	497c      	ldr	r1, [pc, #496]	@ (8002d14 <HAL_I2C_Master_Receive+0x224>)
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fc88 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e1fe      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_I2C_Master_Receive+0x50>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e1f7      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d007      	beq.n	8002b66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2222      	movs	r2, #34	@ 0x22
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2210      	movs	r2, #16
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	893a      	ldrh	r2, [r7, #8]
 8002b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d18 <HAL_I2C_Master_Receive+0x228>)
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fb74 	bl	800329c <I2C_MasterRequestRead>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1b8      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d113      	bne.n	8002bee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	623b      	str	r3, [r7, #32]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e18c      	b.n	8002f08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d11b      	bne.n	8002c2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e16c      	b.n	8002f08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d11b      	bne.n	8002c6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	e14c      	b.n	8002f08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c94:	e138      	b.n	8002f08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	f200 80f1 	bhi.w	8002e82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d123      	bne.n	8002cf0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fd1b 	bl	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e139      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cee:	e10b      	b.n	8002f08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d14e      	bne.n	8002d96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	2200      	movs	r2, #0
 8002d00:	4906      	ldr	r1, [pc, #24]	@ (8002d1c <HAL_I2C_Master_Receive+0x22c>)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fb98 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e10e      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
 8002d12:	bf00      	nop
 8002d14:	00100002 	.word	0x00100002
 8002d18:	ffff0000 	.word	0xffff0000
 8002d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d94:	e0b8      	b.n	8002f08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	4966      	ldr	r1, [pc, #408]	@ (8002f38 <HAL_I2C_Master_Receive+0x448>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fb49 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0bf      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	2200      	movs	r2, #0
 8002dfa:	494f      	ldr	r1, [pc, #316]	@ (8002f38 <HAL_I2C_Master_Receive+0x448>)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fb1b 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e091      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e80:	e042      	b.n	8002f08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fc2e 	bl	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e04c      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d118      	bne.n	8002f08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f aec2 	bne.w	8002c96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3728      	adds	r7, #40	@ 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	00010004 	.word	0x00010004

08002f3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	@ 0x28
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7fe fb40 	bl	80015d0 <HAL_GetTick>
 8002f50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	f040 8111 	bne.w	8003186 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2319      	movs	r3, #25
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4988      	ldr	r1, [pc, #544]	@ (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa62 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e104      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_I2C_IsDeviceReady+0x50>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0fd      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d007      	beq.n	8002fb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2224      	movs	r2, #36	@ 0x24
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a70      	ldr	r2, [pc, #448]	@ (8003194 <HAL_I2C_IsDeviceReady+0x258>)
 8002fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa20 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800300c:	d103      	bne.n	8003016 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003014:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0b6      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003028:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800302a:	f7fe fad1 	bl	80015d0 <HAL_GetTick>
 800302e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800305e:	e025      	b.n	80030ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003060:	f7fe fab6 	bl	80015d0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <HAL_I2C_IsDeviceReady+0x13a>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22a0      	movs	r2, #160	@ 0xa0
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80030b6:	d005      	beq.n	80030c4 <HAL_I2C_IsDeviceReady+0x188>
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <HAL_I2C_IsDeviceReady+0x188>
 80030be:	7dbb      	ldrb	r3, [r7, #22]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0cd      	beq.n	8003060 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d129      	bne.n	800312e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	4921      	ldr	r1, [pc, #132]	@ (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f994 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e036      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e02c      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003146:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2319      	movs	r3, #25
 800314e:	2201      	movs	r2, #1
 8003150:	490f      	ldr	r1, [pc, #60]	@ (8003190 <HAL_I2C_IsDeviceReady+0x254>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f970 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e012      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	3301      	adds	r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	f4ff af32 	bcc.w	8002fd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00100002 	.word	0x00100002
 8003194:	ffff0000 	.word	0xffff0000

08003198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	460b      	mov	r3, r1
 80031a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d006      	beq.n	80031c2 <I2C_MasterRequestWrite+0x2a>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d003      	beq.n	80031c2 <I2C_MasterRequestWrite+0x2a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031c0:	d108      	bne.n	80031d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e00b      	b.n	80031ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d8:	2b12      	cmp	r3, #18
 80031da:	d107      	bne.n	80031ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f91d 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003212:	d103      	bne.n	800321c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e035      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003228:	d108      	bne.n	800323c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	e01b      	b.n	8003274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	11db      	asrs	r3, r3, #7
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0306 	and.w	r3, r3, #6
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f063 030f 	orn	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	490e      	ldr	r1, [pc, #56]	@ (8003294 <I2C_MasterRequestWrite+0xfc>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f943 	bl	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e010      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4907      	ldr	r1, [pc, #28]	@ (8003298 <I2C_MasterRequestWrite+0x100>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f933 	bl	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	00010008 	.word	0x00010008
 8003298:	00010002 	.word	0x00010002

0800329c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	460b      	mov	r3, r1
 80032aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d006      	beq.n	80032d6 <I2C_MasterRequestRead+0x3a>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d003      	beq.n	80032d6 <I2C_MasterRequestRead+0x3a>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032d4:	d108      	bne.n	80032e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e00b      	b.n	8003300 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	2b11      	cmp	r3, #17
 80032ee:	d107      	bne.n	8003300 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f893 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003326:	d103      	bne.n	8003330 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800332e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e079      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800333c:	d108      	bne.n	8003350 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	611a      	str	r2, [r3, #16]
 800334e:	e05f      	b.n	8003410 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003350:	897b      	ldrh	r3, [r7, #10]
 8003352:	11db      	asrs	r3, r3, #7
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f003 0306 	and.w	r3, r3, #6
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f063 030f 	orn	r3, r3, #15
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4930      	ldr	r1, [pc, #192]	@ (8003430 <I2C_MasterRequestRead+0x194>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f8b9 	bl	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e054      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4929      	ldr	r1, [pc, #164]	@ (8003434 <I2C_MasterRequestRead+0x198>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f8a9 	bl	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e044      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f831 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ea:	d103      	bne.n	80033f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e017      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033f8:	897b      	ldrh	r3, [r7, #10]
 80033fa:	11db      	asrs	r3, r3, #7
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0306 	and.w	r3, r3, #6
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f063 030e 	orn	r3, r3, #14
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4907      	ldr	r1, [pc, #28]	@ (8003434 <I2C_MasterRequestRead+0x198>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f865 	bl	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	00010008 	.word	0x00010008
 8003434:	00010002 	.word	0x00010002

08003438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	e025      	b.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003450:	d021      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fe f8bd 	bl	80015d0 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d116      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	f043 0220 	orr.w	r2, r3, #32
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e023      	b.n	80034de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10d      	bne.n	80034bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	e00c      	b.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d0b6      	beq.n	800344a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f4:	e051      	b.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003504:	d123      	bne.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800351e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e046      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003554:	d021      	beq.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fe f83b 	bl	80015d0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e020      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10c      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e00b      	b.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d18d      	bne.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f0:	e02d      	b.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f8ce 	bl	8003794 <I2C_IsAcknowledgeFailed>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e02d      	b.n	800365e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003608:	d021      	beq.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fd ffe1 	bl	80015d0 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d116      	bne.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e007      	b.n	800365e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003658:	2b80      	cmp	r3, #128	@ 0x80
 800365a:	d1ca      	bne.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003672:	e02d      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f88d 	bl	8003794 <I2C_IsAcknowledgeFailed>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e02d      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800368a:	d021      	beq.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7fd ffa0 	bl	80015d0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e007      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d1ca      	bne.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f4:	e042      	b.n	800377c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d119      	bne.n	8003738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e029      	b.n	800378c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003738:	f7fd ff4a 	bl	80015d0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d116      	bne.n	800377c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e007      	b.n	800378c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003786:	2b40      	cmp	r3, #64	@ 0x40
 8003788:	d1b5      	bne.n	80036f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037aa:	d11b      	bne.n	80037e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f4:	b08f      	sub	sp, #60	@ 0x3c
 80037f6:	af0a      	add	r7, sp, #40	@ 0x28
 80037f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e116      	b.n	8003a32 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fd24 	bl	800126c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2203      	movs	r2, #3
 8003828:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f003 f8c7 	bl	80069d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	687e      	ldr	r6, [r7, #4]
 8003850:	466d      	mov	r5, sp
 8003852:	f106 0410 	add.w	r4, r6, #16
 8003856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003862:	e885 0003 	stmia.w	r5, {r0, r1}
 8003866:	1d33      	adds	r3, r6, #4
 8003868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800386a:	6838      	ldr	r0, [r7, #0]
 800386c:	f003 f852 	bl	8006914 <USB_CoreInit>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0d7      	b.n	8003a32 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f003 f8b5 	bl	80069f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e04a      	b.n	800392a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	333d      	adds	r3, #61	@ 0x3d
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	333c      	adds	r3, #60	@ 0x3c
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	b298      	uxth	r0, r3
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3344      	adds	r3, #68	@ 0x44
 80038d0:	4602      	mov	r2, r0
 80038d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3340      	adds	r3, #64	@ 0x40
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3348      	adds	r3, #72	@ 0x48
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334c      	adds	r3, #76	@ 0x4c
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	3354      	adds	r3, #84	@ 0x54
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	3301      	adds	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d3af      	bcc.n	8003894 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	e044      	b.n	80039c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	3301      	adds	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3b5      	bcc.n	800393a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	687e      	ldr	r6, [r7, #4]
 80039d6:	466d      	mov	r5, sp
 80039d8:	f106 0410 	add.w	r4, r6, #16
 80039dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ec:	1d33      	adds	r3, r6, #4
 80039ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f0:	6838      	ldr	r0, [r7, #0]
 80039f2:	f003 f84d 	bl	8006a90 <USB_DevInit>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e014      	b.n	8003a32 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d102      	bne.n	8003a26 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f80a 	bl	8003a3a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 fa0b 	bl	8006e46 <USB_DevDisconnect>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a3a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	f043 0303 	orr.w	r3, r3, #3
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0cc      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b68      	ldr	r3, [pc, #416]	@ (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d90c      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b65      	ldr	r3, [pc, #404]	@ (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b63      	ldr	r3, [pc, #396]	@ (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0b8      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad8:	4b59      	ldr	r3, [pc, #356]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a58      	ldr	r2, [pc, #352]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af0:	4b53      	ldr	r3, [pc, #332]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a52      	ldr	r2, [pc, #328]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afc:	4b50      	ldr	r3, [pc, #320]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	494d      	ldr	r1, [pc, #308]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d044      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	4b47      	ldr	r3, [pc, #284]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d119      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e07f      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d003      	beq.n	8003b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	4b3f      	ldr	r3, [pc, #252]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06f      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b52:	4b3b      	ldr	r3, [pc, #236]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e067      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b62:	4b37      	ldr	r3, [pc, #220]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f023 0203 	bic.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4934      	ldr	r1, [pc, #208]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b74:	f7fd fd2c 	bl	80015d0 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7c:	f7fd fd28 	bl	80015d0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e04f      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	4b2b      	ldr	r3, [pc, #172]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 020c 	and.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1eb      	bne.n	8003b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b25      	ldr	r3, [pc, #148]	@ (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d20c      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b22      	ldr	r3, [pc, #136]	@ (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b20      	ldr	r3, [pc, #128]	@ (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e032      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	4b19      	ldr	r3, [pc, #100]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4916      	ldr	r1, [pc, #88]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf6:	4b12      	ldr	r3, [pc, #72]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	490e      	ldr	r1, [pc, #56]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c0a:	f000 fb7f 	bl	800430c <HAL_RCC_GetSysClockFreq>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4b0b      	ldr	r3, [pc, #44]	@ (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	490a      	ldr	r1, [pc, #40]	@ (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	5ccb      	ldrb	r3, [r1, r3]
 8003c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c22:	4a09      	ldr	r2, [pc, #36]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c26:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fc8c 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023c00 	.word	0x40023c00
 8003c40:	40023800 	.word	0x40023800
 8003c44:	080078b8 	.word	0x080078b8
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	20000004 	.word	0x20000004

08003c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b03      	ldr	r3, [pc, #12]	@ (8003c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000000 	.word	0x20000000

08003c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c6c:	f7ff fff0 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	@ (8003c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0a9b      	lsrs	r3, r3, #10
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4903      	ldr	r1, [pc, #12]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	080078c8 	.word	0x080078c8

08003c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c94:	f7ff ffdc 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0b5b      	lsrs	r3, r3, #13
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	@ (8003cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	080078c8 	.word	0x080078c8

08003cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	@ 0x30
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	496c      	ldr	r1, [pc, #432]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d010      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003d1e:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d24:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	4960      	ldr	r1, [pc, #384]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d017      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d4c:	4b58      	ldr	r3, [pc, #352]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	4955      	ldr	r1, [pc, #340]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d017      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d88:	4b49      	ldr	r3, [pc, #292]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d96:	4946      	ldr	r1, [pc, #280]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003da6:	d101      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003da8:	2301      	movs	r3, #1
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003db4:	2301      	movs	r3, #1
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 808a 	beq.w	8003eda <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b39      	ldr	r3, [pc, #228]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	4a38      	ldr	r2, [pc, #224]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd6:	4b36      	ldr	r3, [pc, #216]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003de2:	4b34      	ldr	r3, [pc, #208]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a33      	ldr	r2, [pc, #204]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dee:	f7fd fbef 	bl	80015d0 <HAL_GetTick>
 8003df2:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003df6:	f7fd fbeb 	bl	80015d0 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e278      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e08:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e14:	4b26      	ldr	r3, [pc, #152]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02f      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e2c:	6a3a      	ldr	r2, [r7, #32]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d028      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e32:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e42:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e48:	4a19      	ldr	r2, [pc, #100]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e4e:	4b18      	ldr	r3, [pc, #96]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d114      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fbb9 	bl	80015d0 <HAL_GetTick>
 8003e5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fd fbb5 	bl	80015d0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e240      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e90:	d114      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003e92:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea6:	4902      	ldr	r1, [pc, #8]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]
 8003eac:	e00c      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	42470e40 	.word	0x42470e40
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a49      	ldr	r2, [pc, #292]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ec2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ec6:	6093      	str	r3, [r2, #8]
 8003ec8:	4b47      	ldr	r3, [pc, #284]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	4944      	ldr	r1, [pc, #272]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003eec:	4b3f      	ldr	r3, [pc, #252]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003eee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003efc:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	4937      	ldr	r1, [pc, #220]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f1e:	4b32      	ldr	r3, [pc, #200]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f24:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f2c:	492e      	ldr	r1, [pc, #184]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d011      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f40:	4b29      	ldr	r3, [pc, #164]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f46:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	4926      	ldr	r1, [pc, #152]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003f60:	2301      	movs	r3, #1
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003f70:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	491a      	ldr	r1, [pc, #104]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d011      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003f92:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa0:	4911      	ldr	r1, [pc, #68]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	f040 80ff 	bne.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fc8:	4b09      	ldr	r3, [pc, #36]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fce:	f7fd faff 	bl	80015d0 <HAL_GetTick>
 8003fd2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd4:	e00e      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fd6:	f7fd fafb 	bl	80015d0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d907      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e188      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	424711e0 	.word	0x424711e0
 8003ff0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ea      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d009      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800401c:	2b00      	cmp	r3, #0
 800401e:	d028      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d124      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004028:	4b71      	ldr	r3, [pc, #452]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800402a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	3301      	adds	r3, #1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800403a:	4b6d      	ldr	r3, [pc, #436]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004040:	0e1b      	lsrs	r3, r3, #24
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	019b      	lsls	r3, r3, #6
 8004052:	431a      	orrs	r2, r3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	3b01      	subs	r3, #1
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	431a      	orrs	r2, r3
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	4961      	ldr	r1, [pc, #388]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004090:	2b00      	cmp	r3, #0
 8004092:	d035      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004098:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800409c:	d130      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800409e:	4b54      	ldr	r3, [pc, #336]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040b0:	4b4f      	ldr	r3, [pc, #316]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b6:	0f1b      	lsrs	r3, r3, #28
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	019b      	lsls	r3, r3, #6
 80040c8:	431a      	orrs	r2, r3
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	3b01      	subs	r3, #1
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	431a      	orrs	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	071b      	lsls	r3, r3, #28
 80040e0:	4943      	ldr	r1, [pc, #268]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040e8:	4b41      	ldr	r3, [pc, #260]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040ee:	f023 021f 	bic.w	r2, r3, #31
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	493d      	ldr	r1, [pc, #244]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d029      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004114:	d124      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004116:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	3301      	adds	r3, #1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004128:	4b31      	ldr	r3, [pc, #196]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800412e:	0f1b      	lsrs	r3, r3, #28
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	019b      	lsls	r3, r3, #6
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	431a      	orrs	r2, r3
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	431a      	orrs	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	071b      	lsls	r3, r3, #28
 8004158:	4925      	ldr	r1, [pc, #148]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004168:	2b00      	cmp	r3, #0
 800416a:	d016      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	019b      	lsls	r3, r3, #6
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	3b01      	subs	r3, #1
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	071b      	lsls	r3, r3, #28
 8004192:	4917      	ldr	r1, [pc, #92]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800419a:	4b16      	ldr	r3, [pc, #88]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041a0:	f7fd fa16 	bl	80015d0 <HAL_GetTick>
 80041a4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041a8:	f7fd fa12 	bl	80015d0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e09f      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041ba:	4b0d      	ldr	r3, [pc, #52]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	f040 8095 	bne.w	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041ce:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fd f9fc 	bl	80015d0 <HAL_GetTick>
 80041d8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041da:	e00f      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041dc:	f7fd f9f8 	bl	80015d0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d908      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e085      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80041ee:	bf00      	nop
 80041f0:	40023800 	.word	0x40023800
 80041f4:	42470068 	.word	0x42470068
 80041f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041fc:	4b41      	ldr	r3, [pc, #260]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004208:	d0e8      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02b      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422e:	2b00      	cmp	r3, #0
 8004230:	d127      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004232:	4b34      	ldr	r3, [pc, #208]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	3301      	adds	r3, #1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	431a      	orrs	r2, r3
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	3b01      	subs	r3, #1
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	4928      	ldr	r1, [pc, #160]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004268:	4b26      	ldr	r3, [pc, #152]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800426a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800426e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	3b01      	subs	r3, #1
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	4922      	ldr	r1, [pc, #136]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01d      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x612>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004296:	d118      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	0e1b      	lsrs	r3, r3, #24
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	019b      	lsls	r3, r3, #6
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	3b01      	subs	r3, #1
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	4910      	ldr	r1, [pc, #64]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042d0:	f7fd f97e 	bl	80015d0 <HAL_GetTick>
 80042d4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80042d8:	f7fd f97a 	bl	80015d0 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e007      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ea:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f6:	d1ef      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3730      	adds	r7, #48	@ 0x30
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	42470070 	.word	0x42470070

0800430c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	b0ae      	sub	sp, #184	@ 0xb8
 8004312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004332:	4bcb      	ldr	r3, [pc, #812]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b0c      	cmp	r3, #12
 800433c:	f200 8206 	bhi.w	800474c <HAL_RCC_GetSysClockFreq+0x440>
 8004340:	a201      	add	r2, pc, #4	@ (adr r2, 8004348 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800437d 	.word	0x0800437d
 800434c:	0800474d 	.word	0x0800474d
 8004350:	0800474d 	.word	0x0800474d
 8004354:	0800474d 	.word	0x0800474d
 8004358:	08004385 	.word	0x08004385
 800435c:	0800474d 	.word	0x0800474d
 8004360:	0800474d 	.word	0x0800474d
 8004364:	0800474d 	.word	0x0800474d
 8004368:	0800438d 	.word	0x0800438d
 800436c:	0800474d 	.word	0x0800474d
 8004370:	0800474d 	.word	0x0800474d
 8004374:	0800474d 	.word	0x0800474d
 8004378:	0800457d 	.word	0x0800457d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800437c:	4bb9      	ldr	r3, [pc, #740]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x358>)
 800437e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004382:	e1e7      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004384:	4bb8      	ldr	r3, [pc, #736]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004386:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800438a:	e1e3      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800438c:	4bb4      	ldr	r3, [pc, #720]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004398:	4bb1      	ldr	r3, [pc, #708]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d071      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a4:	4bae      	ldr	r3, [pc, #696]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80043b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	f04f 0000 	mov.w	r0, #0
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	0159      	lsls	r1, r3, #5
 80043d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043dc:	0150      	lsls	r0, r2, #5
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4621      	mov	r1, r4
 80043e4:	1a51      	subs	r1, r2, r1
 80043e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80043e8:	4629      	mov	r1, r5
 80043ea:	eb63 0301 	sbc.w	r3, r3, r1
 80043ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80043fc:	4649      	mov	r1, r9
 80043fe:	018b      	lsls	r3, r1, #6
 8004400:	4641      	mov	r1, r8
 8004402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004406:	4641      	mov	r1, r8
 8004408:	018a      	lsls	r2, r1, #6
 800440a:	4641      	mov	r1, r8
 800440c:	1a51      	subs	r1, r2, r1
 800440e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004410:	4649      	mov	r1, r9
 8004412:	eb63 0301 	sbc.w	r3, r3, r1
 8004416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004424:	4649      	mov	r1, r9
 8004426:	00cb      	lsls	r3, r1, #3
 8004428:	4641      	mov	r1, r8
 800442a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442e:	4641      	mov	r1, r8
 8004430:	00ca      	lsls	r2, r1, #3
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	4603      	mov	r3, r0
 8004438:	4622      	mov	r2, r4
 800443a:	189b      	adds	r3, r3, r2
 800443c:	633b      	str	r3, [r7, #48]	@ 0x30
 800443e:	462b      	mov	r3, r5
 8004440:	460a      	mov	r2, r1
 8004442:	eb42 0303 	adc.w	r3, r2, r3
 8004446:	637b      	str	r3, [r7, #52]	@ 0x34
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004454:	4629      	mov	r1, r5
 8004456:	024b      	lsls	r3, r1, #9
 8004458:	4621      	mov	r1, r4
 800445a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800445e:	4621      	mov	r1, r4
 8004460:	024a      	lsls	r2, r1, #9
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800446a:	2200      	movs	r2, #0
 800446c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004470:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004474:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004478:	f7fb ff22 	bl	80002c0 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4613      	mov	r3, r2
 8004482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004486:	e067      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004488:	4b75      	ldr	r3, [pc, #468]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004494:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004498:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800449c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044a2:	2300      	movs	r3, #0
 80044a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	f04f 0000 	mov.w	r0, #0
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	0159      	lsls	r1, r3, #5
 80044b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044bc:	0150      	lsls	r0, r2, #5
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4621      	mov	r1, r4
 80044c4:	1a51      	subs	r1, r2, r1
 80044c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044c8:	4629      	mov	r1, r5
 80044ca:	eb63 0301 	sbc.w	r3, r3, r1
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80044dc:	4649      	mov	r1, r9
 80044de:	018b      	lsls	r3, r1, #6
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044e6:	4641      	mov	r1, r8
 80044e8:	018a      	lsls	r2, r1, #6
 80044ea:	4641      	mov	r1, r8
 80044ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80044f0:	4649      	mov	r1, r9
 80044f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004502:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004506:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800450a:	4692      	mov	sl, r2
 800450c:	469b      	mov	fp, r3
 800450e:	4623      	mov	r3, r4
 8004510:	eb1a 0303 	adds.w	r3, sl, r3
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	462b      	mov	r3, r5
 8004518:	eb4b 0303 	adc.w	r3, fp, r3
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800452a:	4629      	mov	r1, r5
 800452c:	028b      	lsls	r3, r1, #10
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004534:	4621      	mov	r1, r4
 8004536:	028a      	lsls	r2, r1, #10
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004540:	2200      	movs	r2, #0
 8004542:	673b      	str	r3, [r7, #112]	@ 0x70
 8004544:	677a      	str	r2, [r7, #116]	@ 0x74
 8004546:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800454a:	f7fb feb9 	bl	80002c0 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4613      	mov	r3, r2
 8004554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004558:	4b41      	ldr	r3, [pc, #260]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	3301      	adds	r3, #1
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800456a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800456e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004572:	fbb2 f3f3 	udiv	r3, r2, r3
 8004576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800457a:	e0eb      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800457c:	4b38      	ldr	r3, [pc, #224]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004588:	4b35      	ldr	r3, [pc, #212]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d06b      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004594:	4b32      	ldr	r3, [pc, #200]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x354>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	2200      	movs	r2, #0
 800459c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800459e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045a8:	2300      	movs	r3, #0
 80045aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80045b0:	4622      	mov	r2, r4
 80045b2:	462b      	mov	r3, r5
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f04f 0100 	mov.w	r1, #0
 80045bc:	0159      	lsls	r1, r3, #5
 80045be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c2:	0150      	lsls	r0, r2, #5
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4621      	mov	r1, r4
 80045ca:	1a51      	subs	r1, r2, r1
 80045cc:	61b9      	str	r1, [r7, #24]
 80045ce:	4629      	mov	r1, r5
 80045d0:	eb63 0301 	sbc.w	r3, r3, r1
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045e2:	4659      	mov	r1, fp
 80045e4:	018b      	lsls	r3, r1, #6
 80045e6:	4651      	mov	r1, sl
 80045e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ec:	4651      	mov	r1, sl
 80045ee:	018a      	lsls	r2, r1, #6
 80045f0:	4651      	mov	r1, sl
 80045f2:	ebb2 0801 	subs.w	r8, r2, r1
 80045f6:	4659      	mov	r1, fp
 80045f8:	eb63 0901 	sbc.w	r9, r3, r1
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004608:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800460c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004610:	4690      	mov	r8, r2
 8004612:	4699      	mov	r9, r3
 8004614:	4623      	mov	r3, r4
 8004616:	eb18 0303 	adds.w	r3, r8, r3
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	462b      	mov	r3, r5
 800461e:	eb49 0303 	adc.w	r3, r9, r3
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004630:	4629      	mov	r1, r5
 8004632:	024b      	lsls	r3, r1, #9
 8004634:	4621      	mov	r1, r4
 8004636:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800463a:	4621      	mov	r1, r4
 800463c:	024a      	lsls	r2, r1, #9
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004646:	2200      	movs	r2, #0
 8004648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800464a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800464c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004650:	f7fb fe36 	bl	80002c0 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4613      	mov	r3, r2
 800465a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800465e:	e065      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x420>
 8004660:	40023800 	.word	0x40023800
 8004664:	00f42400 	.word	0x00f42400
 8004668:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466c:	4b3d      	ldr	r3, [pc, #244]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x458>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	2200      	movs	r2, #0
 8004674:	4618      	mov	r0, r3
 8004676:	4611      	mov	r1, r2
 8004678:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800467c:	653b      	str	r3, [r7, #80]	@ 0x50
 800467e:	2300      	movs	r3, #0
 8004680:	657b      	str	r3, [r7, #84]	@ 0x54
 8004682:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004686:	4642      	mov	r2, r8
 8004688:	464b      	mov	r3, r9
 800468a:	f04f 0000 	mov.w	r0, #0
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	0159      	lsls	r1, r3, #5
 8004694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004698:	0150      	lsls	r0, r2, #5
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4641      	mov	r1, r8
 80046a0:	1a51      	subs	r1, r2, r1
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	4649      	mov	r1, r9
 80046a6:	eb63 0301 	sbc.w	r3, r3, r1
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046b8:	4659      	mov	r1, fp
 80046ba:	018b      	lsls	r3, r1, #6
 80046bc:	4651      	mov	r1, sl
 80046be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046c2:	4651      	mov	r1, sl
 80046c4:	018a      	lsls	r2, r1, #6
 80046c6:	4651      	mov	r1, sl
 80046c8:	1a54      	subs	r4, r2, r1
 80046ca:	4659      	mov	r1, fp
 80046cc:	eb63 0501 	sbc.w	r5, r3, r1
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	00eb      	lsls	r3, r5, #3
 80046da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046de:	00e2      	lsls	r2, r4, #3
 80046e0:	4614      	mov	r4, r2
 80046e2:	461d      	mov	r5, r3
 80046e4:	4643      	mov	r3, r8
 80046e6:	18e3      	adds	r3, r4, r3
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	464b      	mov	r3, r9
 80046ec:	eb45 0303 	adc.w	r3, r5, r3
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046fe:	4629      	mov	r1, r5
 8004700:	028b      	lsls	r3, r1, #10
 8004702:	4621      	mov	r1, r4
 8004704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004708:	4621      	mov	r1, r4
 800470a:	028a      	lsls	r2, r1, #10
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004714:	2200      	movs	r2, #0
 8004716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004718:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800471a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800471e:	f7fb fdcf 	bl	80002c0 <__aeabi_uldivmod>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4613      	mov	r3, r2
 8004728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800472c:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x458>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	0f1b      	lsrs	r3, r3, #28
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800473a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800473e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800474a:	e003      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800474c:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x45c>)
 800474e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004752:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004754:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004758:	4618      	mov	r0, r3
 800475a:	37b8      	adds	r7, #184	@ 0xb8
 800475c:	46bd      	mov	sp, r7
 800475e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800
 8004768:	00f42400 	.word	0x00f42400

0800476c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e28d      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8083 	beq.w	8004892 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800478c:	4b94      	ldr	r3, [pc, #592]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b04      	cmp	r3, #4
 8004796:	d019      	beq.n	80047cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004798:	4b91      	ldr	r3, [pc, #580]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047a4:	4b8e      	ldr	r3, [pc, #568]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047b0:	d00c      	beq.n	80047cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b2:	4b8b      	ldr	r3, [pc, #556]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d112      	bne.n	80047e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b88      	ldr	r3, [pc, #544]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	4b84      	ldr	r3, [pc, #528]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05b      	beq.n	8004890 <HAL_RCC_OscConfig+0x124>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d157      	bne.n	8004890 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e25a      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ec:	d106      	bne.n	80047fc <HAL_RCC_OscConfig+0x90>
 80047ee:	4b7c      	ldr	r3, [pc, #496]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7b      	ldr	r2, [pc, #492]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e01d      	b.n	8004838 <HAL_RCC_OscConfig+0xcc>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0xb4>
 8004806:	4b76      	ldr	r3, [pc, #472]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a75      	ldr	r2, [pc, #468]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 800480c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b73      	ldr	r3, [pc, #460]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a72      	ldr	r2, [pc, #456]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0xcc>
 8004820:	4b6f      	ldr	r3, [pc, #444]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6e      	ldr	r2, [pc, #440]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b6c      	ldr	r3, [pc, #432]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a6b      	ldr	r2, [pc, #428]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fc fec6 	bl	80015d0 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004848:	f7fc fec2 	bl	80015d0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	@ 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e21f      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b61      	ldr	r3, [pc, #388]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0xdc>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fc feb2 	bl	80015d0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004870:	f7fc feae 	bl	80015d0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	@ 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e20b      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	4b57      	ldr	r3, [pc, #348]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x104>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d06f      	beq.n	800497e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800489e:	4b50      	ldr	r3, [pc, #320]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048aa:	4b4d      	ldr	r3, [pc, #308]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d105      	bne.n	80048c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048b6:	4b4a      	ldr	r3, [pc, #296]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00b      	beq.n	80048da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c2:	4b47      	ldr	r3, [pc, #284]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048ca:	2b0c      	cmp	r3, #12
 80048cc:	d11c      	bne.n	8004908 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ce:	4b44      	ldr	r3, [pc, #272]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d116      	bne.n	8004908 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048da:	4b41      	ldr	r3, [pc, #260]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_RCC_OscConfig+0x186>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d001      	beq.n	80048f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e1d3      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f2:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4937      	ldr	r1, [pc, #220]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004906:	e03a      	b.n	800497e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d020      	beq.n	8004952 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004910:	4b34      	ldr	r3, [pc, #208]	@ (80049e4 <HAL_RCC_OscConfig+0x278>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004916:	f7fc fe5b 	bl	80015d0 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800491e:	f7fc fe57 	bl	80015d0 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e1b4      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004930:	4b2b      	ldr	r3, [pc, #172]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493c:	4b28      	ldr	r3, [pc, #160]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4925      	ldr	r1, [pc, #148]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]
 8004950:	e015      	b.n	800497e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004952:	4b24      	ldr	r3, [pc, #144]	@ (80049e4 <HAL_RCC_OscConfig+0x278>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fc fe3a 	bl	80015d0 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004960:	f7fc fe36 	bl	80015d0 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e193      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004972:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d036      	beq.n	80049f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004992:	4b15      	ldr	r3, [pc, #84]	@ (80049e8 <HAL_RCC_OscConfig+0x27c>)
 8004994:	2201      	movs	r2, #1
 8004996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fc fe1a 	bl	80015d0 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a0:	f7fc fe16 	bl	80015d0 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e173      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_RCC_OscConfig+0x274>)
 80049b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0x234>
 80049be:	e01b      	b.n	80049f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c0:	4b09      	ldr	r3, [pc, #36]	@ (80049e8 <HAL_RCC_OscConfig+0x27c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c6:	f7fc fe03 	bl	80015d0 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	e00e      	b.n	80049ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ce:	f7fc fdff 	bl	80015d0 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d907      	bls.n	80049ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e15c      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
 80049e0:	40023800 	.word	0x40023800
 80049e4:	42470000 	.word	0x42470000
 80049e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 80049ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ea      	bne.n	80049ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8097 	beq.w	8004b34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a0a:	4b83      	ldr	r3, [pc, #524]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a26:	4b7c      	ldr	r3, [pc, #496]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a36:	4b79      	ldr	r3, [pc, #484]	@ (8004c1c <HAL_RCC_OscConfig+0x4b0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d118      	bne.n	8004a74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a42:	4b76      	ldr	r3, [pc, #472]	@ (8004c1c <HAL_RCC_OscConfig+0x4b0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a75      	ldr	r2, [pc, #468]	@ (8004c1c <HAL_RCC_OscConfig+0x4b0>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4e:	f7fc fdbf 	bl	80015d0 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a56:	f7fc fdbb 	bl	80015d0 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e118      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a68:	4b6c      	ldr	r3, [pc, #432]	@ (8004c1c <HAL_RCC_OscConfig+0x4b0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCC_OscConfig+0x31e>
 8004a7c:	4b66      	ldr	r3, [pc, #408]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a80:	4a65      	ldr	r2, [pc, #404]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a88:	e01c      	b.n	8004ac4 <HAL_RCC_OscConfig+0x358>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b05      	cmp	r3, #5
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x340>
 8004a92:	4b61      	ldr	r3, [pc, #388]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	4a60      	ldr	r2, [pc, #384]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9e:	4b5e      	ldr	r3, [pc, #376]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa2:	4a5d      	ldr	r2, [pc, #372]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0x358>
 8004aac:	4b5a      	ldr	r3, [pc, #360]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab0:	4a59      	ldr	r2, [pc, #356]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab8:	4b57      	ldr	r3, [pc, #348]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abc:	4a56      	ldr	r2, [pc, #344]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d015      	beq.n	8004af8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fc fd80 	bl	80015d0 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad2:	e00a      	b.n	8004aea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	f7fc fd7c 	bl	80015d0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e0d7      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0ee      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x368>
 8004af6:	e014      	b.n	8004b22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af8:	f7fc fd6a 	bl	80015d0 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b00:	f7fc fd66 	bl	80015d0 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e0c1      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b16:	4b40      	ldr	r3, [pc, #256]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ee      	bne.n	8004b00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b28:	4b3b      	ldr	r3, [pc, #236]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80ad 	beq.w	8004c98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b3e:	4b36      	ldr	r3, [pc, #216]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d060      	beq.n	8004c0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d145      	bne.n	8004bde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b33      	ldr	r3, [pc, #204]	@ (8004c20 <HAL_RCC_OscConfig+0x4b4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fc fd3a 	bl	80015d0 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fc fd36 	bl	80015d0 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e093      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b29      	ldr	r3, [pc, #164]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8c:	019b      	lsls	r3, r3, #6
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	3b01      	subs	r3, #1
 8004b98:	041b      	lsls	r3, r3, #16
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	071b      	lsls	r3, r3, #28
 8004baa:	491b      	ldr	r1, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <HAL_RCC_OscConfig+0x4b4>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fc fd0b 	bl	80015d0 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7fc fd07 	bl	80015d0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e064      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd0:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x452>
 8004bdc:	e05c      	b.n	8004c98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <HAL_RCC_OscConfig+0x4b4>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fc fcf4 	bl	80015d0 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fc fcf0 	bl	80015d0 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e04d      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_RCC_OscConfig+0x4ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x480>
 8004c0a:	e045      	b.n	8004c98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e040      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c24:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca4 <HAL_RCC_OscConfig+0x538>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d030      	beq.n	8004c94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d129      	bne.n	8004c94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d122      	bne.n	8004c94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d119      	bne.n	8004c94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d10f      	bne.n	8004c94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d107      	bne.n	8004c94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d001      	beq.n	8004c98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800

08004ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e041      	b.n	8004d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc f9de 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 fa78 	bl	80051dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e041      	b.n	8004ddc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fc f96d 	bl	800104c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f000 fa29 	bl	80051dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d122      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d11b      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0202 	mvn.w	r2, #2
 8004e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f9ba 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9ac 	bl	800518c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f9bd 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d122      	bne.n	8004e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d11b      	bne.n	8004e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0204 	mvn.w	r2, #4
 8004e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f990 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f982 	bl	800518c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f993 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d122      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d11b      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0208 	mvn.w	r2, #8
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f966 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f958 	bl	800518c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f969 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d122      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d11b      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0210 	mvn.w	r2, #16
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2208      	movs	r2, #8
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f93c 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f92e 	bl	800518c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f93f 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0201 	mvn.w	r2, #1
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f908 	bl	8005178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f80:	2b80      	cmp	r3, #128	@ 0x80
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fc4c 	bl	800582c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9e:	2b40      	cmp	r3, #64	@ 0x40
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b40      	cmp	r3, #64	@ 0x40
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f904 	bl	80051c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0220 	mvn.w	r2, #32
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fc16 	bl	8005818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800500e:	2302      	movs	r3, #2
 8005010:	e0ae      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b0c      	cmp	r3, #12
 800501e:	f200 809f 	bhi.w	8005160 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005022:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	0800505d 	.word	0x0800505d
 800502c:	08005161 	.word	0x08005161
 8005030:	08005161 	.word	0x08005161
 8005034:	08005161 	.word	0x08005161
 8005038:	0800509d 	.word	0x0800509d
 800503c:	08005161 	.word	0x08005161
 8005040:	08005161 	.word	0x08005161
 8005044:	08005161 	.word	0x08005161
 8005048:	080050df 	.word	0x080050df
 800504c:	08005161 	.word	0x08005161
 8005050:	08005161 	.word	0x08005161
 8005054:	08005161 	.word	0x08005161
 8005058:	0800511f 	.word	0x0800511f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 f95a 	bl	800531c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0208 	orr.w	r2, r2, #8
 8005076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0204 	bic.w	r2, r2, #4
 8005086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6999      	ldr	r1, [r3, #24]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	619a      	str	r2, [r3, #24]
      break;
 800509a:	e064      	b.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f9aa 	bl	80053fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	021a      	lsls	r2, r3, #8
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	619a      	str	r2, [r3, #24]
      break;
 80050dc:	e043      	b.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f9ff 	bl	80054e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0208 	orr.w	r2, r2, #8
 80050f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0204 	bic.w	r2, r2, #4
 8005108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69d9      	ldr	r1, [r3, #28]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	61da      	str	r2, [r3, #28]
      break;
 800511c:	e023      	b.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa53 	bl	80055d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	021a      	lsls	r2, r3, #8
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	61da      	str	r2, [r3, #28]
      break;
 800515e:	e002      	b.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
      break;
 8005164:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a40      	ldr	r2, [pc, #256]	@ (80052f0 <TIM_Base_SetConfig+0x114>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fa:	d00f      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a3d      	ldr	r2, [pc, #244]	@ (80052f4 <TIM_Base_SetConfig+0x118>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00b      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a3c      	ldr	r2, [pc, #240]	@ (80052f8 <TIM_Base_SetConfig+0x11c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a3b      	ldr	r2, [pc, #236]	@ (80052fc <TIM_Base_SetConfig+0x120>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a3a      	ldr	r2, [pc, #232]	@ (8005300 <TIM_Base_SetConfig+0x124>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d108      	bne.n	800522e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2f      	ldr	r2, [pc, #188]	@ (80052f0 <TIM_Base_SetConfig+0x114>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d02b      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523c:	d027      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2c      	ldr	r2, [pc, #176]	@ (80052f4 <TIM_Base_SetConfig+0x118>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d023      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2b      	ldr	r2, [pc, #172]	@ (80052f8 <TIM_Base_SetConfig+0x11c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01f      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2a      	ldr	r2, [pc, #168]	@ (80052fc <TIM_Base_SetConfig+0x120>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01b      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a29      	ldr	r2, [pc, #164]	@ (8005300 <TIM_Base_SetConfig+0x124>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d017      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a28      	ldr	r2, [pc, #160]	@ (8005304 <TIM_Base_SetConfig+0x128>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a27      	ldr	r2, [pc, #156]	@ (8005308 <TIM_Base_SetConfig+0x12c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00f      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a26      	ldr	r2, [pc, #152]	@ (800530c <TIM_Base_SetConfig+0x130>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a25      	ldr	r2, [pc, #148]	@ (8005310 <TIM_Base_SetConfig+0x134>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a24      	ldr	r2, [pc, #144]	@ (8005314 <TIM_Base_SetConfig+0x138>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a23      	ldr	r2, [pc, #140]	@ (8005318 <TIM_Base_SetConfig+0x13c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d108      	bne.n	80052a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a0a      	ldr	r2, [pc, #40]	@ (80052f0 <TIM_Base_SetConfig+0x114>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_Base_SetConfig+0xf8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005300 <TIM_Base_SetConfig+0x124>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d103      	bne.n	80052dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	615a      	str	r2, [r3, #20]
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40010400 	.word	0x40010400
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800
 8005310:	40001800 	.word	0x40001800
 8005314:	40001c00 	.word	0x40001c00
 8005318:	40002000 	.word	0x40002000

0800531c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0201 	bic.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f023 0302 	bic.w	r3, r3, #2
 8005364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a20      	ldr	r2, [pc, #128]	@ (80053f4 <TIM_OC1_SetConfig+0xd8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC1_SetConfig+0x64>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a1f      	ldr	r2, [pc, #124]	@ (80053f8 <TIM_OC1_SetConfig+0xdc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10c      	bne.n	800539a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0308 	bic.w	r3, r3, #8
 8005386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a15      	ldr	r2, [pc, #84]	@ (80053f4 <TIM_OC1_SetConfig+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_OC1_SetConfig+0x8e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a14      	ldr	r2, [pc, #80]	@ (80053f8 <TIM_OC1_SetConfig+0xdc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d111      	bne.n	80053ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40010400 	.word	0x40010400

080053fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0210 	bic.w	r2, r3, #16
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0320 	bic.w	r3, r3, #32
 8005446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a22      	ldr	r2, [pc, #136]	@ (80054e0 <TIM_OC2_SetConfig+0xe4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC2_SetConfig+0x68>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a21      	ldr	r2, [pc, #132]	@ (80054e4 <TIM_OC2_SetConfig+0xe8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10d      	bne.n	8005480 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800547e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <TIM_OC2_SetConfig+0xe4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC2_SetConfig+0x94>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a16      	ldr	r2, [pc, #88]	@ (80054e4 <TIM_OC2_SetConfig+0xe8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d113      	bne.n	80054b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400

080054e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <TIM_OC3_SetConfig+0xe0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_OC3_SetConfig+0x66>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a20      	ldr	r2, [pc, #128]	@ (80055cc <TIM_OC3_SetConfig+0xe4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d10d      	bne.n	800556a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <TIM_OC3_SetConfig+0xe0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_OC3_SetConfig+0x92>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a15      	ldr	r2, [pc, #84]	@ (80055cc <TIM_OC3_SetConfig+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d113      	bne.n	80055a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40010400 	.word	0x40010400

080055d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a12      	ldr	r2, [pc, #72]	@ (8005674 <TIM_OC4_SetConfig+0xa4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC4_SetConfig+0x68>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <TIM_OC4_SetConfig+0xa8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d109      	bne.n	800564c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800563e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	019b      	lsls	r3, r3, #6
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000
 8005678:	40010400 	.word	0x40010400

0800567c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005690:	2302      	movs	r3, #2
 8005692:	e05a      	b.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a21      	ldr	r2, [pc, #132]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d022      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e0:	d01d      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1d      	ldr	r2, [pc, #116]	@ (800575c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d018      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d013      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00e      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a18      	ldr	r2, [pc, #96]	@ (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d009      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a17      	ldr	r2, [pc, #92]	@ (800576c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a15      	ldr	r2, [pc, #84]	@ (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d10c      	bne.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4313      	orrs	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40001800 	.word	0x40001800

08005774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800578c:	2302      	movs	r3, #2
 800578e:	e03d      	b.n	800580c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e03f      	b.n	80058d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fb fc74 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2224      	movs	r2, #36	@ 0x24
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fdd1 	bl	800642c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08c      	sub	sp, #48	@ 0x30
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d165      	bne.n	80059c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_UART_Transmit_DMA+0x26>
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e05e      	b.n	80059c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_UART_Transmit_DMA+0x38>
 8005910:	2302      	movs	r3, #2
 8005912:	e057      	b.n	80059c4 <HAL_UART_Transmit_DMA+0xe8>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	88fa      	ldrh	r2, [r7, #6]
 8005926:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2221      	movs	r2, #33	@ 0x21
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005940:	4a22      	ldr	r2, [pc, #136]	@ (80059cc <HAL_UART_Transmit_DMA+0xf0>)
 8005942:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005948:	4a21      	ldr	r2, [pc, #132]	@ (80059d0 <HAL_UART_Transmit_DMA+0xf4>)
 800594a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005950:	4a20      	ldr	r2, [pc, #128]	@ (80059d4 <HAL_UART_Transmit_DMA+0xf8>)
 8005952:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005958:	2200      	movs	r2, #0
 800595a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800595c:	f107 0308 	add.w	r3, r7, #8
 8005960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3304      	adds	r3, #4
 8005970:	461a      	mov	r2, r3
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	f7fc f954 	bl	8001c20 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005980:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3314      	adds	r3, #20
 8005990:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	617b      	str	r3, [r7, #20]
   return(result);
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3314      	adds	r3, #20
 80059a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80059ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6a39      	ldr	r1, [r7, #32]
 80059b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	e000      	b.n	80059c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
  }
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3730      	adds	r7, #48	@ 0x30
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	08005f5d 	.word	0x08005f5d
 80059d0:	08005ff7 	.word	0x08005ff7
 80059d4:	08006013 	.word	0x08006013

080059d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b0ba      	sub	sp, #232	@ 0xe8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10f      	bne.n	8005a3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_UART_IRQHandler+0x66>
 8005a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fc3c 	bl	80062b4 <UART_Receive_IT>
      return;
 8005a3c:	e256      	b.n	8005eec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80de 	beq.w	8005c04 <HAL_UART_IRQHandler+0x22c>
 8005a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80d1 	beq.w	8005c04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_UART_IRQHandler+0xae>
 8005a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	f043 0201 	orr.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <HAL_UART_IRQHandler+0xd2>
 8005a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f043 0202 	orr.w	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <HAL_UART_IRQHandler+0xf6>
 8005ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac6:	f043 0204 	orr.w	r2, r3, #4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d011      	beq.n	8005afe <HAL_UART_IRQHandler+0x126>
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d105      	bne.n	8005af2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	f043 0208 	orr.w	r2, r3, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 81ed 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_UART_IRQHandler+0x14e>
 8005b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fbc7 	bl	80062b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b30:	2b40      	cmp	r3, #64	@ 0x40
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <HAL_UART_IRQHandler+0x17a>
 8005b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d04f      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 facf 	bl	80060f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b62:	2b40      	cmp	r3, #64	@ 0x40
 8005b64:	d141      	bne.n	8005bea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1d9      	bne.n	8005b66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d013      	beq.n	8005be2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	4a7d      	ldr	r2, [pc, #500]	@ (8005db4 <HAL_UART_IRQHandler+0x3dc>)
 8005bc0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fc f8f2 	bl	8001db0 <HAL_DMA_Abort_IT>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d016      	beq.n	8005c00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	e00e      	b.n	8005c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9a4 	bl	8005f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be8:	e00a      	b.n	8005c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f9a0 	bl	8005f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	e006      	b.n	8005c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f99c 	bl	8005f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005bfe:	e170      	b.n	8005ee2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	bf00      	nop
    return;
 8005c02:	e16e      	b.n	8005ee2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	f040 814a 	bne.w	8005ea2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8143 	beq.w	8005ea2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 813c 	beq.w	8005ea2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4a:	2b40      	cmp	r3, #64	@ 0x40
 8005c4c:	f040 80b4 	bne.w	8005db8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8140 	beq.w	8005ee6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	f080 8139 	bcs.w	8005ee6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c86:	f000 8088 	beq.w	8005d9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1d9      	bne.n	8005c8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3314      	adds	r3, #20
 8005cdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e1      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e3      	bne.n	8005d12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d6a:	f023 0310 	bic.w	r3, r3, #16
 8005d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005d7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e3      	bne.n	8005d58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fb ff9b 	bl	8001cd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f8ca 	bl	8005f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005db0:	e099      	b.n	8005ee6 <HAL_UART_IRQHandler+0x50e>
 8005db2:	bf00      	nop
 8005db4:	080061bd 	.word	0x080061bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 808b 	beq.w	8005eea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8086 	beq.w	8005eea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005df4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e02:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e3      	bne.n	8005dde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	623b      	str	r3, [r7, #32]
   return(result);
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e3      	bne.n	8005e16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0310 	bic.w	r3, r3, #16
 8005e72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e80:	61fa      	str	r2, [r7, #28]
 8005e82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	69b9      	ldr	r1, [r7, #24]
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e3      	bne.n	8005e5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f852 	bl	8005f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ea0:	e023      	b.n	8005eea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x4ea>
 8005eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f992 	bl	80061e4 <UART_Transmit_IT>
    return;
 8005ec0:	e014      	b.n	8005eec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <HAL_UART_IRQHandler+0x514>
 8005ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f9d2 	bl	8006284 <UART_EndTransmit_IT>
    return;
 8005ee0:	e004      	b.n	8005eec <HAL_UART_IRQHandler+0x514>
    return;
 8005ee2:	bf00      	nop
 8005ee4:	e002      	b.n	8005eec <HAL_UART_IRQHandler+0x514>
      return;
 8005ee6:	bf00      	nop
 8005ee8:	e000      	b.n	8005eec <HAL_UART_IRQHandler+0x514>
      return;
 8005eea:	bf00      	nop
  }
}
 8005eec:	37e8      	adds	r7, #232	@ 0xe8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop

08005ef4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b090      	sub	sp, #64	@ 0x40
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d137      	bne.n	8005fe8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3314      	adds	r3, #20
 8005f9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e5      	bne.n	8005f7e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fd2:	61fa      	str	r2, [r7, #28]
 8005fd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	69b9      	ldr	r1, [r7, #24]
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e5      	bne.n	8005fb2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fe6:	e002      	b.n	8005fee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005fe8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005fea:	f7ff ff83 	bl	8005ef4 <HAL_UART_TxCpltCallback>
}
 8005fee:	bf00      	nop
 8005ff0:	3740      	adds	r7, #64	@ 0x40
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006002:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff ff7f 	bl	8005f08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006022:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602e:	2b80      	cmp	r3, #128	@ 0x80
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b21      	cmp	r3, #33	@ 0x21
 8006044:	d108      	bne.n	8006058 <UART_DMAError+0x46>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006052:	68b8      	ldr	r0, [r7, #8]
 8006054:	f000 f827 	bl	80060a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006062:	2b40      	cmp	r3, #64	@ 0x40
 8006064:	bf0c      	ite	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	2300      	movne	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b22      	cmp	r3, #34	@ 0x22
 8006078:	d108      	bne.n	800608c <UART_DMAError+0x7a>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006086:	68b8      	ldr	r0, [r7, #8]
 8006088:	f000 f835 	bl	80060f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006090:	f043 0210 	orr.w	r2, r3, #16
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006098:	68b8      	ldr	r0, [r7, #8]
 800609a:	f7ff ff49 	bl	8005f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b089      	sub	sp, #36	@ 0x24
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	61ba      	str	r2, [r7, #24]
 80060d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6979      	ldr	r1, [r7, #20]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	613b      	str	r3, [r7, #16]
   return(result);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e5      	bne.n	80060ae <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80060ea:	bf00      	nop
 80060ec:	3724      	adds	r7, #36	@ 0x24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b095      	sub	sp, #84	@ 0x54
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800611e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006124:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e5      	bne.n	80060fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	61fb      	str	r3, [r7, #28]
   return(result);
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3314      	adds	r3, #20
 8006150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006154:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e5      	bne.n	8006132 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616a:	2b01      	cmp	r3, #1
 800616c:	d119      	bne.n	80061a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	60bb      	str	r3, [r7, #8]
   return(result);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f023 0310 	bic.w	r3, r3, #16
 8006184:	647b      	str	r3, [r7, #68]	@ 0x44
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	330c      	adds	r3, #12
 800618c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800618e:	61ba      	str	r2, [r7, #24]
 8006190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6979      	ldr	r1, [r7, #20]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	613b      	str	r3, [r7, #16]
   return(result);
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e5      	bne.n	800616e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061b0:	bf00      	nop
 80061b2:	3754      	adds	r7, #84	@ 0x54
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff feaa 	bl	8005f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b21      	cmp	r3, #33	@ 0x21
 80061f6:	d13e      	bne.n	8006276 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006200:	d114      	bne.n	800622c <UART_Transmit_IT+0x48>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d110      	bne.n	800622c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800621e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	1c9a      	adds	r2, r3, #2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	621a      	str	r2, [r3, #32]
 800622a:	e008      	b.n	800623e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	1c59      	adds	r1, r3, #1
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6211      	str	r1, [r2, #32]
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4619      	mov	r1, r3
 800624c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10f      	bne.n	8006272 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006260:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006270:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e000      	b.n	8006278 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006276:	2302      	movs	r3, #2
  }
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800629a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff fe25 	bl	8005ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08c      	sub	sp, #48	@ 0x30
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b22      	cmp	r3, #34	@ 0x22
 80062c6:	f040 80ab 	bne.w	8006420 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d2:	d117      	bne.n	8006304 <UART_Receive_IT+0x50>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d113      	bne.n	8006304 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	1c9a      	adds	r2, r3, #2
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	629a      	str	r2, [r3, #40]	@ 0x28
 8006302:	e026      	b.n	8006352 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006316:	d007      	beq.n	8006328 <UART_Receive_IT+0x74>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <UART_Receive_IT+0x82>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	e008      	b.n	8006348 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006342:	b2da      	uxtb	r2, r3
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29b      	uxth	r3, r3
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	4619      	mov	r1, r3
 8006360:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006362:	2b00      	cmp	r3, #0
 8006364:	d15a      	bne.n	800641c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0220 	bic.w	r2, r2, #32
 8006374:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006384:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d135      	bne.n	8006412 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	613b      	str	r3, [r7, #16]
   return(result);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 0310 	bic.w	r3, r3, #16
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330c      	adds	r3, #12
 80063ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063cc:	623a      	str	r2, [r7, #32]
 80063ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	69f9      	ldr	r1, [r7, #28]
 80063d2:	6a3a      	ldr	r2, [r7, #32]
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e5      	bne.n	80063ac <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b10      	cmp	r3, #16
 80063ec:	d10a      	bne.n	8006404 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fd9a 	bl	8005f44 <HAL_UARTEx_RxEventCallback>
 8006410:	e002      	b.n	8006418 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fd82 	bl	8005f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	e002      	b.n	8006422 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	e000      	b.n	8006422 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006420:	2302      	movs	r3, #2
  }
}
 8006422:	4618      	mov	r0, r3
 8006424:	3730      	adds	r7, #48	@ 0x30
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800642c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006430:	b0c0      	sub	sp, #256	@ 0x100
 8006432:	af00      	add	r7, sp, #0
 8006434:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006448:	68d9      	ldr	r1, [r3, #12]
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	ea40 0301 	orr.w	r3, r0, r1
 8006454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	431a      	orrs	r2, r3
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	431a      	orrs	r2, r3
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006484:	f021 010c 	bic.w	r1, r1, #12
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006492:	430b      	orrs	r3, r1
 8006494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80064a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a6:	6999      	ldr	r1, [r3, #24]
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	ea40 0301 	orr.w	r3, r0, r1
 80064b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b8f      	ldr	r3, [pc, #572]	@ (80066f8 <UART_SetConfig+0x2cc>)
 80064bc:	429a      	cmp	r2, r3
 80064be:	d005      	beq.n	80064cc <UART_SetConfig+0xa0>
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b8d      	ldr	r3, [pc, #564]	@ (80066fc <UART_SetConfig+0x2d0>)
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d104      	bne.n	80064d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064cc:	f7fd fbe0 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 80064d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064d4:	e003      	b.n	80064de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064d6:	f7fd fbc7 	bl	8003c68 <HAL_RCC_GetPCLK1Freq>
 80064da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064e8:	f040 810c 	bne.w	8006704 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064f0:	2200      	movs	r2, #0
 80064f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064fe:	4622      	mov	r2, r4
 8006500:	462b      	mov	r3, r5
 8006502:	1891      	adds	r1, r2, r2
 8006504:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006506:	415b      	adcs	r3, r3
 8006508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800650a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800650e:	4621      	mov	r1, r4
 8006510:	eb12 0801 	adds.w	r8, r2, r1
 8006514:	4629      	mov	r1, r5
 8006516:	eb43 0901 	adc.w	r9, r3, r1
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800652a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800652e:	4690      	mov	r8, r2
 8006530:	4699      	mov	r9, r3
 8006532:	4623      	mov	r3, r4
 8006534:	eb18 0303 	adds.w	r3, r8, r3
 8006538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800653c:	462b      	mov	r3, r5
 800653e:	eb49 0303 	adc.w	r3, r9, r3
 8006542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006552:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006556:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800655a:	460b      	mov	r3, r1
 800655c:	18db      	adds	r3, r3, r3
 800655e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006560:	4613      	mov	r3, r2
 8006562:	eb42 0303 	adc.w	r3, r2, r3
 8006566:	657b      	str	r3, [r7, #84]	@ 0x54
 8006568:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800656c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006570:	f7f9 fea6 	bl	80002c0 <__aeabi_uldivmod>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4b61      	ldr	r3, [pc, #388]	@ (8006700 <UART_SetConfig+0x2d4>)
 800657a:	fba3 2302 	umull	r2, r3, r3, r2
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	011c      	lsls	r4, r3, #4
 8006582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006586:	2200      	movs	r2, #0
 8006588:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800658c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006590:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006594:	4642      	mov	r2, r8
 8006596:	464b      	mov	r3, r9
 8006598:	1891      	adds	r1, r2, r2
 800659a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800659c:	415b      	adcs	r3, r3
 800659e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065a4:	4641      	mov	r1, r8
 80065a6:	eb12 0a01 	adds.w	sl, r2, r1
 80065aa:	4649      	mov	r1, r9
 80065ac:	eb43 0b01 	adc.w	fp, r3, r1
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065c4:	4692      	mov	sl, r2
 80065c6:	469b      	mov	fp, r3
 80065c8:	4643      	mov	r3, r8
 80065ca:	eb1a 0303 	adds.w	r3, sl, r3
 80065ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065d2:	464b      	mov	r3, r9
 80065d4:	eb4b 0303 	adc.w	r3, fp, r3
 80065d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065f0:	460b      	mov	r3, r1
 80065f2:	18db      	adds	r3, r3, r3
 80065f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80065f6:	4613      	mov	r3, r2
 80065f8:	eb42 0303 	adc.w	r3, r2, r3
 80065fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006606:	f7f9 fe5b 	bl	80002c0 <__aeabi_uldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4611      	mov	r1, r2
 8006610:	4b3b      	ldr	r3, [pc, #236]	@ (8006700 <UART_SetConfig+0x2d4>)
 8006612:	fba3 2301 	umull	r2, r3, r3, r1
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	2264      	movs	r2, #100	@ 0x64
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	1acb      	subs	r3, r1, r3
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006626:	4b36      	ldr	r3, [pc, #216]	@ (8006700 <UART_SetConfig+0x2d4>)
 8006628:	fba3 2302 	umull	r2, r3, r3, r2
 800662c:	095b      	lsrs	r3, r3, #5
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006634:	441c      	add	r4, r3
 8006636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800663a:	2200      	movs	r2, #0
 800663c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006640:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006644:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	1891      	adds	r1, r2, r2
 800664e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006650:	415b      	adcs	r3, r3
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006658:	4641      	mov	r1, r8
 800665a:	1851      	adds	r1, r2, r1
 800665c:	6339      	str	r1, [r7, #48]	@ 0x30
 800665e:	4649      	mov	r1, r9
 8006660:	414b      	adcs	r3, r1
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006670:	4659      	mov	r1, fp
 8006672:	00cb      	lsls	r3, r1, #3
 8006674:	4651      	mov	r1, sl
 8006676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667a:	4651      	mov	r1, sl
 800667c:	00ca      	lsls	r2, r1, #3
 800667e:	4610      	mov	r0, r2
 8006680:	4619      	mov	r1, r3
 8006682:	4603      	mov	r3, r0
 8006684:	4642      	mov	r2, r8
 8006686:	189b      	adds	r3, r3, r2
 8006688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800668c:	464b      	mov	r3, r9
 800668e:	460a      	mov	r2, r1
 8006690:	eb42 0303 	adc.w	r3, r2, r3
 8006694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066ac:	460b      	mov	r3, r1
 80066ae:	18db      	adds	r3, r3, r3
 80066b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066b2:	4613      	mov	r3, r2
 80066b4:	eb42 0303 	adc.w	r3, r2, r3
 80066b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066c2:	f7f9 fdfd 	bl	80002c0 <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <UART_SetConfig+0x2d4>)
 80066cc:	fba3 1302 	umull	r1, r3, r3, r2
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	2164      	movs	r1, #100	@ 0x64
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	3332      	adds	r3, #50	@ 0x32
 80066de:	4a08      	ldr	r2, [pc, #32]	@ (8006700 <UART_SetConfig+0x2d4>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	f003 0207 	and.w	r2, r3, #7
 80066ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4422      	add	r2, r4
 80066f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066f4:	e106      	b.n	8006904 <UART_SetConfig+0x4d8>
 80066f6:	bf00      	nop
 80066f8:	40011000 	.word	0x40011000
 80066fc:	40011400 	.word	0x40011400
 8006700:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006708:	2200      	movs	r2, #0
 800670a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800670e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006712:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006716:	4642      	mov	r2, r8
 8006718:	464b      	mov	r3, r9
 800671a:	1891      	adds	r1, r2, r2
 800671c:	6239      	str	r1, [r7, #32]
 800671e:	415b      	adcs	r3, r3
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
 8006722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006726:	4641      	mov	r1, r8
 8006728:	1854      	adds	r4, r2, r1
 800672a:	4649      	mov	r1, r9
 800672c:	eb43 0501 	adc.w	r5, r3, r1
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	00eb      	lsls	r3, r5, #3
 800673a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800673e:	00e2      	lsls	r2, r4, #3
 8006740:	4614      	mov	r4, r2
 8006742:	461d      	mov	r5, r3
 8006744:	4643      	mov	r3, r8
 8006746:	18e3      	adds	r3, r4, r3
 8006748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800674c:	464b      	mov	r3, r9
 800674e:	eb45 0303 	adc.w	r3, r5, r3
 8006752:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006762:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	f04f 0300 	mov.w	r3, #0
 800676e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006772:	4629      	mov	r1, r5
 8006774:	008b      	lsls	r3, r1, #2
 8006776:	4621      	mov	r1, r4
 8006778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800677c:	4621      	mov	r1, r4
 800677e:	008a      	lsls	r2, r1, #2
 8006780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006784:	f7f9 fd9c 	bl	80002c0 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4b60      	ldr	r3, [pc, #384]	@ (8006910 <UART_SetConfig+0x4e4>)
 800678e:	fba3 2302 	umull	r2, r3, r3, r2
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	011c      	lsls	r4, r3, #4
 8006796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800679a:	2200      	movs	r2, #0
 800679c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80067a8:	4642      	mov	r2, r8
 80067aa:	464b      	mov	r3, r9
 80067ac:	1891      	adds	r1, r2, r2
 80067ae:	61b9      	str	r1, [r7, #24]
 80067b0:	415b      	adcs	r3, r3
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067b8:	4641      	mov	r1, r8
 80067ba:	1851      	adds	r1, r2, r1
 80067bc:	6139      	str	r1, [r7, #16]
 80067be:	4649      	mov	r1, r9
 80067c0:	414b      	adcs	r3, r1
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067d0:	4659      	mov	r1, fp
 80067d2:	00cb      	lsls	r3, r1, #3
 80067d4:	4651      	mov	r1, sl
 80067d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067da:	4651      	mov	r1, sl
 80067dc:	00ca      	lsls	r2, r1, #3
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	4642      	mov	r2, r8
 80067e6:	189b      	adds	r3, r3, r2
 80067e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067ec:	464b      	mov	r3, r9
 80067ee:	460a      	mov	r2, r1
 80067f0:	eb42 0303 	adc.w	r3, r2, r3
 80067f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006802:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006810:	4649      	mov	r1, r9
 8006812:	008b      	lsls	r3, r1, #2
 8006814:	4641      	mov	r1, r8
 8006816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800681a:	4641      	mov	r1, r8
 800681c:	008a      	lsls	r2, r1, #2
 800681e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006822:	f7f9 fd4d 	bl	80002c0 <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4611      	mov	r1, r2
 800682c:	4b38      	ldr	r3, [pc, #224]	@ (8006910 <UART_SetConfig+0x4e4>)
 800682e:	fba3 2301 	umull	r2, r3, r3, r1
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	2264      	movs	r2, #100	@ 0x64
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	1acb      	subs	r3, r1, r3
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	3332      	adds	r3, #50	@ 0x32
 8006840:	4a33      	ldr	r2, [pc, #204]	@ (8006910 <UART_SetConfig+0x4e4>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800684c:	441c      	add	r4, r3
 800684e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006852:	2200      	movs	r2, #0
 8006854:	673b      	str	r3, [r7, #112]	@ 0x70
 8006856:	677a      	str	r2, [r7, #116]	@ 0x74
 8006858:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800685c:	4642      	mov	r2, r8
 800685e:	464b      	mov	r3, r9
 8006860:	1891      	adds	r1, r2, r2
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	415b      	adcs	r3, r3
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800686c:	4641      	mov	r1, r8
 800686e:	1851      	adds	r1, r2, r1
 8006870:	6039      	str	r1, [r7, #0]
 8006872:	4649      	mov	r1, r9
 8006874:	414b      	adcs	r3, r1
 8006876:	607b      	str	r3, [r7, #4]
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006884:	4659      	mov	r1, fp
 8006886:	00cb      	lsls	r3, r1, #3
 8006888:	4651      	mov	r1, sl
 800688a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800688e:	4651      	mov	r1, sl
 8006890:	00ca      	lsls	r2, r1, #3
 8006892:	4610      	mov	r0, r2
 8006894:	4619      	mov	r1, r3
 8006896:	4603      	mov	r3, r0
 8006898:	4642      	mov	r2, r8
 800689a:	189b      	adds	r3, r3, r2
 800689c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800689e:	464b      	mov	r3, r9
 80068a0:	460a      	mov	r2, r1
 80068a2:	eb42 0303 	adc.w	r3, r2, r3
 80068a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80068b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068c0:	4649      	mov	r1, r9
 80068c2:	008b      	lsls	r3, r1, #2
 80068c4:	4641      	mov	r1, r8
 80068c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ca:	4641      	mov	r1, r8
 80068cc:	008a      	lsls	r2, r1, #2
 80068ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068d2:	f7f9 fcf5 	bl	80002c0 <__aeabi_uldivmod>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4b0d      	ldr	r3, [pc, #52]	@ (8006910 <UART_SetConfig+0x4e4>)
 80068dc:	fba3 1302 	umull	r1, r3, r3, r2
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	2164      	movs	r1, #100	@ 0x64
 80068e4:	fb01 f303 	mul.w	r3, r1, r3
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	3332      	adds	r3, #50	@ 0x32
 80068ee:	4a08      	ldr	r2, [pc, #32]	@ (8006910 <UART_SetConfig+0x4e4>)
 80068f0:	fba2 2303 	umull	r2, r3, r2, r3
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	f003 020f 	and.w	r2, r3, #15
 80068fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4422      	add	r2, r4
 8006902:	609a      	str	r2, [r3, #8]
}
 8006904:	bf00      	nop
 8006906:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800690a:	46bd      	mov	sp, r7
 800690c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006910:	51eb851f 	.word	0x51eb851f

08006914 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006914:	b084      	sub	sp, #16
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	f107 001c 	add.w	r0, r7, #28
 8006922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	2b01      	cmp	r3, #1
 800692a:	d122      	bne.n	8006972 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d105      	bne.n	8006966 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa9c 	bl	8006ea4 <USB_CoreReset>
 800696c:	4603      	mov	r3, r0
 800696e:	73fb      	strb	r3, [r7, #15]
 8006970:	e01a      	b.n	80069a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa90 	bl	8006ea4 <USB_CoreReset>
 8006984:	4603      	mov	r3, r0
 8006986:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006992:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	@ 0x38
 800699a:	e005      	b.n	80069a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d10b      	bne.n	80069c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f043 0206 	orr.w	r2, r3, #6
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f043 0220 	orr.w	r2, r3, #32
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d2:	b004      	add	sp, #16
 80069d4:	4770      	bx	lr

080069d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d115      	bne.n	8006a46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a26:	2001      	movs	r0, #1
 8006a28:	f7fa fdde 	bl	80015e8 <HAL_Delay>
      ms++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa28 	bl	8006e88 <USB_GetMode>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d01e      	beq.n	8006a7c <USB_SetCurrentMode+0x84>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b31      	cmp	r3, #49	@ 0x31
 8006a42:	d9f0      	bls.n	8006a26 <USB_SetCurrentMode+0x2e>
 8006a44:	e01a      	b.n	8006a7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d115      	bne.n	8006a78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a58:	2001      	movs	r0, #1
 8006a5a:	f7fa fdc5 	bl	80015e8 <HAL_Delay>
      ms++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fa0f 	bl	8006e88 <USB_GetMode>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <USB_SetCurrentMode+0x84>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b31      	cmp	r3, #49	@ 0x31
 8006a74:	d9f0      	bls.n	8006a58 <USB_SetCurrentMode+0x60>
 8006a76:	e001      	b.n	8006a7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e005      	b.n	8006a88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b32      	cmp	r3, #50	@ 0x32
 8006a80:	d101      	bne.n	8006a86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a90:	b084      	sub	sp, #16
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b086      	sub	sp, #24
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006aaa:	2300      	movs	r3, #0
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	e009      	b.n	8006ac4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3340      	adds	r3, #64	@ 0x40
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b0e      	cmp	r3, #14
 8006ac8:	d9f2      	bls.n	8006ab0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d11c      	bne.n	8006b0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ade:	f043 0302 	orr.w	r3, r3, #2
 8006ae2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	e005      	b.n	8006b16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b30:	461a      	mov	r2, r3
 8006b32:	680b      	ldr	r3, [r1, #0]
 8006b34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d10c      	bne.n	8006b56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b42:	2100      	movs	r1, #0
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f965 	bl	8006e14 <USB_SetDevSpeed>
 8006b4a:	e008      	b.n	8006b5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f960 	bl	8006e14 <USB_SetDevSpeed>
 8006b54:	e003      	b.n	8006b5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b56:	2103      	movs	r1, #3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f95b 	bl	8006e14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b5e:	2110      	movs	r1, #16
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f8f3 	bl	8006d4c <USB_FlushTxFifo>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f91f 	bl	8006db4 <USB_FlushRxFifo>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b86:	461a      	mov	r2, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b92:	461a      	mov	r2, r3
 8006b94:	2300      	movs	r3, #0
 8006b96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	e043      	b.n	8006c32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bc0:	d118      	bne.n	8006bf4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e013      	b.n	8006c06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bea:	461a      	mov	r2, r3
 8006bec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e008      	b.n	8006c06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c00:	461a      	mov	r2, r3
 8006c02:	2300      	movs	r3, #0
 8006c04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c12:	461a      	mov	r2, r3
 8006c14:	2300      	movs	r3, #0
 8006c16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c24:	461a      	mov	r2, r3
 8006c26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d3b7      	bcc.n	8006baa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	e043      	b.n	8006cc8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c56:	d118      	bne.n	8006c8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e013      	b.n	8006c9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c80:	461a      	mov	r2, r3
 8006c82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	e008      	b.n	8006c9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c96:	461a      	mov	r2, r3
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca8:	461a      	mov	r2, r3
 8006caa:	2300      	movs	r3, #0
 8006cac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d3b7      	bcc.n	8006c40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ce2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006cf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f043 0210 	orr.w	r2, r3, #16
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699a      	ldr	r2, [r3, #24]
 8006d08:	4b0f      	ldr	r3, [pc, #60]	@ (8006d48 <USB_DevInit+0x2b8>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f043 0208 	orr.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d107      	bne.n	8006d38 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d30:	f043 0304 	orr.w	r3, r3, #4
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d44:	b004      	add	sp, #16
 8006d46:	4770      	bx	lr
 8006d48:	803c3800 	.word	0x803c3800

08006d4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a13      	ldr	r2, [pc, #76]	@ (8006db0 <USB_FlushTxFifo+0x64>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d901      	bls.n	8006d6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e01b      	b.n	8006da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	daf2      	bge.n	8006d5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	019b      	lsls	r3, r3, #6
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3301      	adds	r3, #1
 8006d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a08      	ldr	r2, [pc, #32]	@ (8006db0 <USB_FlushTxFifo+0x64>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d901      	bls.n	8006d96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e006      	b.n	8006da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d0f0      	beq.n	8006d84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	00030d40 	.word	0x00030d40

08006db4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a11      	ldr	r2, [pc, #68]	@ (8006e10 <USB_FlushRxFifo+0x5c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e018      	b.n	8006e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	daf2      	bge.n	8006dc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2210      	movs	r2, #16
 8006de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <USB_FlushRxFifo+0x5c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d901      	bls.n	8006df6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e006      	b.n	8006e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	2b10      	cmp	r3, #16
 8006e00:	d0f0      	beq.n	8006de4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	00030d40 	.word	0x00030d40

08006e14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	68f9      	ldr	r1, [r7, #12]
 8006e30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e34:	4313      	orrs	r3, r2
 8006e36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e74:	f043 0302 	orr.w	r3, r3, #2
 8006e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	f003 0301 	and.w	r3, r3, #1
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4a13      	ldr	r2, [pc, #76]	@ (8006f08 <USB_CoreReset+0x64>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e01b      	b.n	8006efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	daf2      	bge.n	8006eb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f043 0201 	orr.w	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a09      	ldr	r2, [pc, #36]	@ (8006f08 <USB_CoreReset+0x64>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e006      	b.n	8006efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d0f0      	beq.n	8006eda <USB_CoreReset+0x36>

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	00030d40 	.word	0x00030d40

08006f0c <siprintf>:
 8006f0c:	b40e      	push	{r1, r2, r3}
 8006f0e:	b500      	push	{lr}
 8006f10:	b09c      	sub	sp, #112	@ 0x70
 8006f12:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f14:	9002      	str	r0, [sp, #8]
 8006f16:	9006      	str	r0, [sp, #24]
 8006f18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f1c:	4809      	ldr	r0, [pc, #36]	@ (8006f44 <siprintf+0x38>)
 8006f1e:	9107      	str	r1, [sp, #28]
 8006f20:	9104      	str	r1, [sp, #16]
 8006f22:	4909      	ldr	r1, [pc, #36]	@ (8006f48 <siprintf+0x3c>)
 8006f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f28:	9105      	str	r1, [sp, #20]
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	a902      	add	r1, sp, #8
 8006f30:	f000 f89c 	bl	800706c <_svfiprintf_r>
 8006f34:	9b02      	ldr	r3, [sp, #8]
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	b01c      	add	sp, #112	@ 0x70
 8006f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f40:	b003      	add	sp, #12
 8006f42:	4770      	bx	lr
 8006f44:	2000000c 	.word	0x2000000c
 8006f48:	ffff0208 	.word	0xffff0208

08006f4c <memset>:
 8006f4c:	4402      	add	r2, r0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d100      	bne.n	8006f56 <memset+0xa>
 8006f54:	4770      	bx	lr
 8006f56:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5a:	e7f9      	b.n	8006f50 <memset+0x4>

08006f5c <__errno>:
 8006f5c:	4b01      	ldr	r3, [pc, #4]	@ (8006f64 <__errno+0x8>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	2000000c 	.word	0x2000000c

08006f68 <__libc_init_array>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8006fa0 <__libc_init_array+0x38>)
 8006f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8006fa4 <__libc_init_array+0x3c>)
 8006f6e:	1b64      	subs	r4, r4, r5
 8006f70:	10a4      	asrs	r4, r4, #2
 8006f72:	2600      	movs	r6, #0
 8006f74:	42a6      	cmp	r6, r4
 8006f76:	d109      	bne.n	8006f8c <__libc_init_array+0x24>
 8006f78:	4d0b      	ldr	r5, [pc, #44]	@ (8006fa8 <__libc_init_array+0x40>)
 8006f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8006fac <__libc_init_array+0x44>)
 8006f7c:	f000 fc66 	bl	800784c <_init>
 8006f80:	1b64      	subs	r4, r4, r5
 8006f82:	10a4      	asrs	r4, r4, #2
 8006f84:	2600      	movs	r6, #0
 8006f86:	42a6      	cmp	r6, r4
 8006f88:	d105      	bne.n	8006f96 <__libc_init_array+0x2e>
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f90:	4798      	blx	r3
 8006f92:	3601      	adds	r6, #1
 8006f94:	e7ee      	b.n	8006f74 <__libc_init_array+0xc>
 8006f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9a:	4798      	blx	r3
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	e7f2      	b.n	8006f86 <__libc_init_array+0x1e>
 8006fa0:	08007914 	.word	0x08007914
 8006fa4:	08007914 	.word	0x08007914
 8006fa8:	08007914 	.word	0x08007914
 8006fac:	08007918 	.word	0x08007918

08006fb0 <__retarget_lock_acquire_recursive>:
 8006fb0:	4770      	bx	lr

08006fb2 <__retarget_lock_release_recursive>:
 8006fb2:	4770      	bx	lr

08006fb4 <__ssputs_r>:
 8006fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	688e      	ldr	r6, [r1, #8]
 8006fba:	461f      	mov	r7, r3
 8006fbc:	42be      	cmp	r6, r7
 8006fbe:	680b      	ldr	r3, [r1, #0]
 8006fc0:	4682      	mov	sl, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	4690      	mov	r8, r2
 8006fc6:	d82d      	bhi.n	8007024 <__ssputs_r+0x70>
 8006fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fd0:	d026      	beq.n	8007020 <__ssputs_r+0x6c>
 8006fd2:	6965      	ldr	r5, [r4, #20]
 8006fd4:	6909      	ldr	r1, [r1, #16]
 8006fd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fda:	eba3 0901 	sub.w	r9, r3, r1
 8006fde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fe2:	1c7b      	adds	r3, r7, #1
 8006fe4:	444b      	add	r3, r9
 8006fe6:	106d      	asrs	r5, r5, #1
 8006fe8:	429d      	cmp	r5, r3
 8006fea:	bf38      	it	cc
 8006fec:	461d      	movcc	r5, r3
 8006fee:	0553      	lsls	r3, r2, #21
 8006ff0:	d527      	bpl.n	8007042 <__ssputs_r+0x8e>
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	f000 f958 	bl	80072a8 <_malloc_r>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	b360      	cbz	r0, 8007056 <__ssputs_r+0xa2>
 8006ffc:	6921      	ldr	r1, [r4, #16]
 8006ffe:	464a      	mov	r2, r9
 8007000:	f000 fbc4 	bl	800778c <memcpy>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	6126      	str	r6, [r4, #16]
 8007012:	6165      	str	r5, [r4, #20]
 8007014:	444e      	add	r6, r9
 8007016:	eba5 0509 	sub.w	r5, r5, r9
 800701a:	6026      	str	r6, [r4, #0]
 800701c:	60a5      	str	r5, [r4, #8]
 800701e:	463e      	mov	r6, r7
 8007020:	42be      	cmp	r6, r7
 8007022:	d900      	bls.n	8007026 <__ssputs_r+0x72>
 8007024:	463e      	mov	r6, r7
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	4632      	mov	r2, r6
 800702a:	4641      	mov	r1, r8
 800702c:	f000 fb84 	bl	8007738 <memmove>
 8007030:	68a3      	ldr	r3, [r4, #8]
 8007032:	1b9b      	subs	r3, r3, r6
 8007034:	60a3      	str	r3, [r4, #8]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	4433      	add	r3, r6
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	2000      	movs	r0, #0
 800703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007042:	462a      	mov	r2, r5
 8007044:	f000 fb4a 	bl	80076dc <_realloc_r>
 8007048:	4606      	mov	r6, r0
 800704a:	2800      	cmp	r0, #0
 800704c:	d1e0      	bne.n	8007010 <__ssputs_r+0x5c>
 800704e:	6921      	ldr	r1, [r4, #16]
 8007050:	4650      	mov	r0, sl
 8007052:	f000 fba9 	bl	80077a8 <_free_r>
 8007056:	230c      	movs	r3, #12
 8007058:	f8ca 3000 	str.w	r3, [sl]
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007068:	e7e9      	b.n	800703e <__ssputs_r+0x8a>
	...

0800706c <_svfiprintf_r>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	4698      	mov	r8, r3
 8007072:	898b      	ldrh	r3, [r1, #12]
 8007074:	061b      	lsls	r3, r3, #24
 8007076:	b09d      	sub	sp, #116	@ 0x74
 8007078:	4607      	mov	r7, r0
 800707a:	460d      	mov	r5, r1
 800707c:	4614      	mov	r4, r2
 800707e:	d510      	bpl.n	80070a2 <_svfiprintf_r+0x36>
 8007080:	690b      	ldr	r3, [r1, #16]
 8007082:	b973      	cbnz	r3, 80070a2 <_svfiprintf_r+0x36>
 8007084:	2140      	movs	r1, #64	@ 0x40
 8007086:	f000 f90f 	bl	80072a8 <_malloc_r>
 800708a:	6028      	str	r0, [r5, #0]
 800708c:	6128      	str	r0, [r5, #16]
 800708e:	b930      	cbnz	r0, 800709e <_svfiprintf_r+0x32>
 8007090:	230c      	movs	r3, #12
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007098:	b01d      	add	sp, #116	@ 0x74
 800709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709e:	2340      	movs	r3, #64	@ 0x40
 80070a0:	616b      	str	r3, [r5, #20]
 80070a2:	2300      	movs	r3, #0
 80070a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a6:	2320      	movs	r3, #32
 80070a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b0:	2330      	movs	r3, #48	@ 0x30
 80070b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007250 <_svfiprintf_r+0x1e4>
 80070b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070ba:	f04f 0901 	mov.w	r9, #1
 80070be:	4623      	mov	r3, r4
 80070c0:	469a      	mov	sl, r3
 80070c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070c6:	b10a      	cbz	r2, 80070cc <_svfiprintf_r+0x60>
 80070c8:	2a25      	cmp	r2, #37	@ 0x25
 80070ca:	d1f9      	bne.n	80070c0 <_svfiprintf_r+0x54>
 80070cc:	ebba 0b04 	subs.w	fp, sl, r4
 80070d0:	d00b      	beq.n	80070ea <_svfiprintf_r+0x7e>
 80070d2:	465b      	mov	r3, fp
 80070d4:	4622      	mov	r2, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	4638      	mov	r0, r7
 80070da:	f7ff ff6b 	bl	8006fb4 <__ssputs_r>
 80070de:	3001      	adds	r0, #1
 80070e0:	f000 80a7 	beq.w	8007232 <_svfiprintf_r+0x1c6>
 80070e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070e6:	445a      	add	r2, fp
 80070e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80070ea:	f89a 3000 	ldrb.w	r3, [sl]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 809f 	beq.w	8007232 <_svfiprintf_r+0x1c6>
 80070f4:	2300      	movs	r3, #0
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070fe:	f10a 0a01 	add.w	sl, sl, #1
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	9307      	str	r3, [sp, #28]
 8007106:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800710a:	931a      	str	r3, [sp, #104]	@ 0x68
 800710c:	4654      	mov	r4, sl
 800710e:	2205      	movs	r2, #5
 8007110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007114:	484e      	ldr	r0, [pc, #312]	@ (8007250 <_svfiprintf_r+0x1e4>)
 8007116:	f7f9 f883 	bl	8000220 <memchr>
 800711a:	9a04      	ldr	r2, [sp, #16]
 800711c:	b9d8      	cbnz	r0, 8007156 <_svfiprintf_r+0xea>
 800711e:	06d0      	lsls	r0, r2, #27
 8007120:	bf44      	itt	mi
 8007122:	2320      	movmi	r3, #32
 8007124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007128:	0711      	lsls	r1, r2, #28
 800712a:	bf44      	itt	mi
 800712c:	232b      	movmi	r3, #43	@ 0x2b
 800712e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007132:	f89a 3000 	ldrb.w	r3, [sl]
 8007136:	2b2a      	cmp	r3, #42	@ 0x2a
 8007138:	d015      	beq.n	8007166 <_svfiprintf_r+0xfa>
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	4654      	mov	r4, sl
 800713e:	2000      	movs	r0, #0
 8007140:	f04f 0c0a 	mov.w	ip, #10
 8007144:	4621      	mov	r1, r4
 8007146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800714a:	3b30      	subs	r3, #48	@ 0x30
 800714c:	2b09      	cmp	r3, #9
 800714e:	d94b      	bls.n	80071e8 <_svfiprintf_r+0x17c>
 8007150:	b1b0      	cbz	r0, 8007180 <_svfiprintf_r+0x114>
 8007152:	9207      	str	r2, [sp, #28]
 8007154:	e014      	b.n	8007180 <_svfiprintf_r+0x114>
 8007156:	eba0 0308 	sub.w	r3, r0, r8
 800715a:	fa09 f303 	lsl.w	r3, r9, r3
 800715e:	4313      	orrs	r3, r2
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	46a2      	mov	sl, r4
 8007164:	e7d2      	b.n	800710c <_svfiprintf_r+0xa0>
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	1d19      	adds	r1, r3, #4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	9103      	str	r1, [sp, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfbb      	ittet	lt
 8007172:	425b      	neglt	r3, r3
 8007174:	f042 0202 	orrlt.w	r2, r2, #2
 8007178:	9307      	strge	r3, [sp, #28]
 800717a:	9307      	strlt	r3, [sp, #28]
 800717c:	bfb8      	it	lt
 800717e:	9204      	strlt	r2, [sp, #16]
 8007180:	7823      	ldrb	r3, [r4, #0]
 8007182:	2b2e      	cmp	r3, #46	@ 0x2e
 8007184:	d10a      	bne.n	800719c <_svfiprintf_r+0x130>
 8007186:	7863      	ldrb	r3, [r4, #1]
 8007188:	2b2a      	cmp	r3, #42	@ 0x2a
 800718a:	d132      	bne.n	80071f2 <_svfiprintf_r+0x186>
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	1d1a      	adds	r2, r3, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	9203      	str	r2, [sp, #12]
 8007194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007198:	3402      	adds	r4, #2
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007260 <_svfiprintf_r+0x1f4>
 80071a0:	7821      	ldrb	r1, [r4, #0]
 80071a2:	2203      	movs	r2, #3
 80071a4:	4650      	mov	r0, sl
 80071a6:	f7f9 f83b 	bl	8000220 <memchr>
 80071aa:	b138      	cbz	r0, 80071bc <_svfiprintf_r+0x150>
 80071ac:	9b04      	ldr	r3, [sp, #16]
 80071ae:	eba0 000a 	sub.w	r0, r0, sl
 80071b2:	2240      	movs	r2, #64	@ 0x40
 80071b4:	4082      	lsls	r2, r0
 80071b6:	4313      	orrs	r3, r2
 80071b8:	3401      	adds	r4, #1
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c0:	4824      	ldr	r0, [pc, #144]	@ (8007254 <_svfiprintf_r+0x1e8>)
 80071c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071c6:	2206      	movs	r2, #6
 80071c8:	f7f9 f82a 	bl	8000220 <memchr>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d036      	beq.n	800723e <_svfiprintf_r+0x1d2>
 80071d0:	4b21      	ldr	r3, [pc, #132]	@ (8007258 <_svfiprintf_r+0x1ec>)
 80071d2:	bb1b      	cbnz	r3, 800721c <_svfiprintf_r+0x1b0>
 80071d4:	9b03      	ldr	r3, [sp, #12]
 80071d6:	3307      	adds	r3, #7
 80071d8:	f023 0307 	bic.w	r3, r3, #7
 80071dc:	3308      	adds	r3, #8
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e2:	4433      	add	r3, r6
 80071e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071e6:	e76a      	b.n	80070be <_svfiprintf_r+0x52>
 80071e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ec:	460c      	mov	r4, r1
 80071ee:	2001      	movs	r0, #1
 80071f0:	e7a8      	b.n	8007144 <_svfiprintf_r+0xd8>
 80071f2:	2300      	movs	r3, #0
 80071f4:	3401      	adds	r4, #1
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	4619      	mov	r1, r3
 80071fa:	f04f 0c0a 	mov.w	ip, #10
 80071fe:	4620      	mov	r0, r4
 8007200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007204:	3a30      	subs	r2, #48	@ 0x30
 8007206:	2a09      	cmp	r2, #9
 8007208:	d903      	bls.n	8007212 <_svfiprintf_r+0x1a6>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0c6      	beq.n	800719c <_svfiprintf_r+0x130>
 800720e:	9105      	str	r1, [sp, #20]
 8007210:	e7c4      	b.n	800719c <_svfiprintf_r+0x130>
 8007212:	fb0c 2101 	mla	r1, ip, r1, r2
 8007216:	4604      	mov	r4, r0
 8007218:	2301      	movs	r3, #1
 800721a:	e7f0      	b.n	80071fe <_svfiprintf_r+0x192>
 800721c:	ab03      	add	r3, sp, #12
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	462a      	mov	r2, r5
 8007222:	4b0e      	ldr	r3, [pc, #56]	@ (800725c <_svfiprintf_r+0x1f0>)
 8007224:	a904      	add	r1, sp, #16
 8007226:	4638      	mov	r0, r7
 8007228:	f3af 8000 	nop.w
 800722c:	1c42      	adds	r2, r0, #1
 800722e:	4606      	mov	r6, r0
 8007230:	d1d6      	bne.n	80071e0 <_svfiprintf_r+0x174>
 8007232:	89ab      	ldrh	r3, [r5, #12]
 8007234:	065b      	lsls	r3, r3, #25
 8007236:	f53f af2d 	bmi.w	8007094 <_svfiprintf_r+0x28>
 800723a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800723c:	e72c      	b.n	8007098 <_svfiprintf_r+0x2c>
 800723e:	ab03      	add	r3, sp, #12
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	462a      	mov	r2, r5
 8007244:	4b05      	ldr	r3, [pc, #20]	@ (800725c <_svfiprintf_r+0x1f0>)
 8007246:	a904      	add	r1, sp, #16
 8007248:	4638      	mov	r0, r7
 800724a:	f000 f91b 	bl	8007484 <_printf_i>
 800724e:	e7ed      	b.n	800722c <_svfiprintf_r+0x1c0>
 8007250:	080078d8 	.word	0x080078d8
 8007254:	080078e2 	.word	0x080078e2
 8007258:	00000000 	.word	0x00000000
 800725c:	08006fb5 	.word	0x08006fb5
 8007260:	080078de 	.word	0x080078de

08007264 <sbrk_aligned>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4e0f      	ldr	r6, [pc, #60]	@ (80072a4 <sbrk_aligned+0x40>)
 8007268:	460c      	mov	r4, r1
 800726a:	6831      	ldr	r1, [r6, #0]
 800726c:	4605      	mov	r5, r0
 800726e:	b911      	cbnz	r1, 8007276 <sbrk_aligned+0x12>
 8007270:	f000 fa7c 	bl	800776c <_sbrk_r>
 8007274:	6030      	str	r0, [r6, #0]
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f000 fa77 	bl	800776c <_sbrk_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d103      	bne.n	800728a <sbrk_aligned+0x26>
 8007282:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007286:	4620      	mov	r0, r4
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	1cc4      	adds	r4, r0, #3
 800728c:	f024 0403 	bic.w	r4, r4, #3
 8007290:	42a0      	cmp	r0, r4
 8007292:	d0f8      	beq.n	8007286 <sbrk_aligned+0x22>
 8007294:	1a21      	subs	r1, r4, r0
 8007296:	4628      	mov	r0, r5
 8007298:	f000 fa68 	bl	800776c <_sbrk_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d1f2      	bne.n	8007286 <sbrk_aligned+0x22>
 80072a0:	e7ef      	b.n	8007282 <sbrk_aligned+0x1e>
 80072a2:	bf00      	nop
 80072a4:	20000900 	.word	0x20000900

080072a8 <_malloc_r>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	1ccd      	adds	r5, r1, #3
 80072ae:	f025 0503 	bic.w	r5, r5, #3
 80072b2:	3508      	adds	r5, #8
 80072b4:	2d0c      	cmp	r5, #12
 80072b6:	bf38      	it	cc
 80072b8:	250c      	movcc	r5, #12
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	4606      	mov	r6, r0
 80072be:	db01      	blt.n	80072c4 <_malloc_r+0x1c>
 80072c0:	42a9      	cmp	r1, r5
 80072c2:	d904      	bls.n	80072ce <_malloc_r+0x26>
 80072c4:	230c      	movs	r3, #12
 80072c6:	6033      	str	r3, [r6, #0]
 80072c8:	2000      	movs	r0, #0
 80072ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073a4 <_malloc_r+0xfc>
 80072d2:	f000 f9f7 	bl	80076c4 <__malloc_lock>
 80072d6:	f8d8 3000 	ldr.w	r3, [r8]
 80072da:	461c      	mov	r4, r3
 80072dc:	bb44      	cbnz	r4, 8007330 <_malloc_r+0x88>
 80072de:	4629      	mov	r1, r5
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff ffbf 	bl	8007264 <sbrk_aligned>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	4604      	mov	r4, r0
 80072ea:	d158      	bne.n	800739e <_malloc_r+0xf6>
 80072ec:	f8d8 4000 	ldr.w	r4, [r8]
 80072f0:	4627      	mov	r7, r4
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	d143      	bne.n	800737e <_malloc_r+0xd6>
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	d04b      	beq.n	8007392 <_malloc_r+0xea>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4639      	mov	r1, r7
 80072fe:	4630      	mov	r0, r6
 8007300:	eb04 0903 	add.w	r9, r4, r3
 8007304:	f000 fa32 	bl	800776c <_sbrk_r>
 8007308:	4581      	cmp	r9, r0
 800730a:	d142      	bne.n	8007392 <_malloc_r+0xea>
 800730c:	6821      	ldr	r1, [r4, #0]
 800730e:	1a6d      	subs	r5, r5, r1
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ffa6 	bl	8007264 <sbrk_aligned>
 8007318:	3001      	adds	r0, #1
 800731a:	d03a      	beq.n	8007392 <_malloc_r+0xea>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	442b      	add	r3, r5
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	f8d8 3000 	ldr.w	r3, [r8]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	bb62      	cbnz	r2, 8007384 <_malloc_r+0xdc>
 800732a:	f8c8 7000 	str.w	r7, [r8]
 800732e:	e00f      	b.n	8007350 <_malloc_r+0xa8>
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	1b52      	subs	r2, r2, r5
 8007334:	d420      	bmi.n	8007378 <_malloc_r+0xd0>
 8007336:	2a0b      	cmp	r2, #11
 8007338:	d917      	bls.n	800736a <_malloc_r+0xc2>
 800733a:	1961      	adds	r1, r4, r5
 800733c:	42a3      	cmp	r3, r4
 800733e:	6025      	str	r5, [r4, #0]
 8007340:	bf18      	it	ne
 8007342:	6059      	strne	r1, [r3, #4]
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	bf08      	it	eq
 8007348:	f8c8 1000 	streq.w	r1, [r8]
 800734c:	5162      	str	r2, [r4, r5]
 800734e:	604b      	str	r3, [r1, #4]
 8007350:	4630      	mov	r0, r6
 8007352:	f000 f9bd 	bl	80076d0 <__malloc_unlock>
 8007356:	f104 000b 	add.w	r0, r4, #11
 800735a:	1d23      	adds	r3, r4, #4
 800735c:	f020 0007 	bic.w	r0, r0, #7
 8007360:	1ac2      	subs	r2, r0, r3
 8007362:	bf1c      	itt	ne
 8007364:	1a1b      	subne	r3, r3, r0
 8007366:	50a3      	strne	r3, [r4, r2]
 8007368:	e7af      	b.n	80072ca <_malloc_r+0x22>
 800736a:	6862      	ldr	r2, [r4, #4]
 800736c:	42a3      	cmp	r3, r4
 800736e:	bf0c      	ite	eq
 8007370:	f8c8 2000 	streq.w	r2, [r8]
 8007374:	605a      	strne	r2, [r3, #4]
 8007376:	e7eb      	b.n	8007350 <_malloc_r+0xa8>
 8007378:	4623      	mov	r3, r4
 800737a:	6864      	ldr	r4, [r4, #4]
 800737c:	e7ae      	b.n	80072dc <_malloc_r+0x34>
 800737e:	463c      	mov	r4, r7
 8007380:	687f      	ldr	r7, [r7, #4]
 8007382:	e7b6      	b.n	80072f2 <_malloc_r+0x4a>
 8007384:	461a      	mov	r2, r3
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	42a3      	cmp	r3, r4
 800738a:	d1fb      	bne.n	8007384 <_malloc_r+0xdc>
 800738c:	2300      	movs	r3, #0
 800738e:	6053      	str	r3, [r2, #4]
 8007390:	e7de      	b.n	8007350 <_malloc_r+0xa8>
 8007392:	230c      	movs	r3, #12
 8007394:	6033      	str	r3, [r6, #0]
 8007396:	4630      	mov	r0, r6
 8007398:	f000 f99a 	bl	80076d0 <__malloc_unlock>
 800739c:	e794      	b.n	80072c8 <_malloc_r+0x20>
 800739e:	6005      	str	r5, [r0, #0]
 80073a0:	e7d6      	b.n	8007350 <_malloc_r+0xa8>
 80073a2:	bf00      	nop
 80073a4:	20000904 	.word	0x20000904

080073a8 <_printf_common>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	4616      	mov	r6, r2
 80073ae:	4698      	mov	r8, r3
 80073b0:	688a      	ldr	r2, [r1, #8]
 80073b2:	690b      	ldr	r3, [r1, #16]
 80073b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073b8:	4293      	cmp	r3, r2
 80073ba:	bfb8      	it	lt
 80073bc:	4613      	movlt	r3, r2
 80073be:	6033      	str	r3, [r6, #0]
 80073c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073c4:	4607      	mov	r7, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	b10a      	cbz	r2, 80073ce <_printf_common+0x26>
 80073ca:	3301      	adds	r3, #1
 80073cc:	6033      	str	r3, [r6, #0]
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	0699      	lsls	r1, r3, #26
 80073d2:	bf42      	ittt	mi
 80073d4:	6833      	ldrmi	r3, [r6, #0]
 80073d6:	3302      	addmi	r3, #2
 80073d8:	6033      	strmi	r3, [r6, #0]
 80073da:	6825      	ldr	r5, [r4, #0]
 80073dc:	f015 0506 	ands.w	r5, r5, #6
 80073e0:	d106      	bne.n	80073f0 <_printf_common+0x48>
 80073e2:	f104 0a19 	add.w	sl, r4, #25
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	6832      	ldr	r2, [r6, #0]
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	42ab      	cmp	r3, r5
 80073ee:	dc26      	bgt.n	800743e <_printf_common+0x96>
 80073f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073f4:	6822      	ldr	r2, [r4, #0]
 80073f6:	3b00      	subs	r3, #0
 80073f8:	bf18      	it	ne
 80073fa:	2301      	movne	r3, #1
 80073fc:	0692      	lsls	r2, r2, #26
 80073fe:	d42b      	bmi.n	8007458 <_printf_common+0xb0>
 8007400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007404:	4641      	mov	r1, r8
 8007406:	4638      	mov	r0, r7
 8007408:	47c8      	blx	r9
 800740a:	3001      	adds	r0, #1
 800740c:	d01e      	beq.n	800744c <_printf_common+0xa4>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	6922      	ldr	r2, [r4, #16]
 8007412:	f003 0306 	and.w	r3, r3, #6
 8007416:	2b04      	cmp	r3, #4
 8007418:	bf02      	ittt	eq
 800741a:	68e5      	ldreq	r5, [r4, #12]
 800741c:	6833      	ldreq	r3, [r6, #0]
 800741e:	1aed      	subeq	r5, r5, r3
 8007420:	68a3      	ldr	r3, [r4, #8]
 8007422:	bf0c      	ite	eq
 8007424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007428:	2500      	movne	r5, #0
 800742a:	4293      	cmp	r3, r2
 800742c:	bfc4      	itt	gt
 800742e:	1a9b      	subgt	r3, r3, r2
 8007430:	18ed      	addgt	r5, r5, r3
 8007432:	2600      	movs	r6, #0
 8007434:	341a      	adds	r4, #26
 8007436:	42b5      	cmp	r5, r6
 8007438:	d11a      	bne.n	8007470 <_printf_common+0xc8>
 800743a:	2000      	movs	r0, #0
 800743c:	e008      	b.n	8007450 <_printf_common+0xa8>
 800743e:	2301      	movs	r3, #1
 8007440:	4652      	mov	r2, sl
 8007442:	4641      	mov	r1, r8
 8007444:	4638      	mov	r0, r7
 8007446:	47c8      	blx	r9
 8007448:	3001      	adds	r0, #1
 800744a:	d103      	bne.n	8007454 <_printf_common+0xac>
 800744c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007454:	3501      	adds	r5, #1
 8007456:	e7c6      	b.n	80073e6 <_printf_common+0x3e>
 8007458:	18e1      	adds	r1, r4, r3
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	2030      	movs	r0, #48	@ 0x30
 800745e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007462:	4422      	add	r2, r4
 8007464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800746c:	3302      	adds	r3, #2
 800746e:	e7c7      	b.n	8007400 <_printf_common+0x58>
 8007470:	2301      	movs	r3, #1
 8007472:	4622      	mov	r2, r4
 8007474:	4641      	mov	r1, r8
 8007476:	4638      	mov	r0, r7
 8007478:	47c8      	blx	r9
 800747a:	3001      	adds	r0, #1
 800747c:	d0e6      	beq.n	800744c <_printf_common+0xa4>
 800747e:	3601      	adds	r6, #1
 8007480:	e7d9      	b.n	8007436 <_printf_common+0x8e>
	...

08007484 <_printf_i>:
 8007484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	7e0f      	ldrb	r7, [r1, #24]
 800748a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800748c:	2f78      	cmp	r7, #120	@ 0x78
 800748e:	4691      	mov	r9, r2
 8007490:	4680      	mov	r8, r0
 8007492:	460c      	mov	r4, r1
 8007494:	469a      	mov	sl, r3
 8007496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800749a:	d807      	bhi.n	80074ac <_printf_i+0x28>
 800749c:	2f62      	cmp	r7, #98	@ 0x62
 800749e:	d80a      	bhi.n	80074b6 <_printf_i+0x32>
 80074a0:	2f00      	cmp	r7, #0
 80074a2:	f000 80d2 	beq.w	800764a <_printf_i+0x1c6>
 80074a6:	2f58      	cmp	r7, #88	@ 0x58
 80074a8:	f000 80b9 	beq.w	800761e <_printf_i+0x19a>
 80074ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074b4:	e03a      	b.n	800752c <_printf_i+0xa8>
 80074b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074ba:	2b15      	cmp	r3, #21
 80074bc:	d8f6      	bhi.n	80074ac <_printf_i+0x28>
 80074be:	a101      	add	r1, pc, #4	@ (adr r1, 80074c4 <_printf_i+0x40>)
 80074c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074c4:	0800751d 	.word	0x0800751d
 80074c8:	08007531 	.word	0x08007531
 80074cc:	080074ad 	.word	0x080074ad
 80074d0:	080074ad 	.word	0x080074ad
 80074d4:	080074ad 	.word	0x080074ad
 80074d8:	080074ad 	.word	0x080074ad
 80074dc:	08007531 	.word	0x08007531
 80074e0:	080074ad 	.word	0x080074ad
 80074e4:	080074ad 	.word	0x080074ad
 80074e8:	080074ad 	.word	0x080074ad
 80074ec:	080074ad 	.word	0x080074ad
 80074f0:	08007631 	.word	0x08007631
 80074f4:	0800755b 	.word	0x0800755b
 80074f8:	080075eb 	.word	0x080075eb
 80074fc:	080074ad 	.word	0x080074ad
 8007500:	080074ad 	.word	0x080074ad
 8007504:	08007653 	.word	0x08007653
 8007508:	080074ad 	.word	0x080074ad
 800750c:	0800755b 	.word	0x0800755b
 8007510:	080074ad 	.word	0x080074ad
 8007514:	080074ad 	.word	0x080074ad
 8007518:	080075f3 	.word	0x080075f3
 800751c:	6833      	ldr	r3, [r6, #0]
 800751e:	1d1a      	adds	r2, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6032      	str	r2, [r6, #0]
 8007524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800752c:	2301      	movs	r3, #1
 800752e:	e09d      	b.n	800766c <_printf_i+0x1e8>
 8007530:	6833      	ldr	r3, [r6, #0]
 8007532:	6820      	ldr	r0, [r4, #0]
 8007534:	1d19      	adds	r1, r3, #4
 8007536:	6031      	str	r1, [r6, #0]
 8007538:	0606      	lsls	r6, r0, #24
 800753a:	d501      	bpl.n	8007540 <_printf_i+0xbc>
 800753c:	681d      	ldr	r5, [r3, #0]
 800753e:	e003      	b.n	8007548 <_printf_i+0xc4>
 8007540:	0645      	lsls	r5, r0, #25
 8007542:	d5fb      	bpl.n	800753c <_printf_i+0xb8>
 8007544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007548:	2d00      	cmp	r5, #0
 800754a:	da03      	bge.n	8007554 <_printf_i+0xd0>
 800754c:	232d      	movs	r3, #45	@ 0x2d
 800754e:	426d      	negs	r5, r5
 8007550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007554:	4859      	ldr	r0, [pc, #356]	@ (80076bc <_printf_i+0x238>)
 8007556:	230a      	movs	r3, #10
 8007558:	e011      	b.n	800757e <_printf_i+0xfa>
 800755a:	6821      	ldr	r1, [r4, #0]
 800755c:	6833      	ldr	r3, [r6, #0]
 800755e:	0608      	lsls	r0, r1, #24
 8007560:	f853 5b04 	ldr.w	r5, [r3], #4
 8007564:	d402      	bmi.n	800756c <_printf_i+0xe8>
 8007566:	0649      	lsls	r1, r1, #25
 8007568:	bf48      	it	mi
 800756a:	b2ad      	uxthmi	r5, r5
 800756c:	2f6f      	cmp	r7, #111	@ 0x6f
 800756e:	4853      	ldr	r0, [pc, #332]	@ (80076bc <_printf_i+0x238>)
 8007570:	6033      	str	r3, [r6, #0]
 8007572:	bf14      	ite	ne
 8007574:	230a      	movne	r3, #10
 8007576:	2308      	moveq	r3, #8
 8007578:	2100      	movs	r1, #0
 800757a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800757e:	6866      	ldr	r6, [r4, #4]
 8007580:	60a6      	str	r6, [r4, #8]
 8007582:	2e00      	cmp	r6, #0
 8007584:	bfa2      	ittt	ge
 8007586:	6821      	ldrge	r1, [r4, #0]
 8007588:	f021 0104 	bicge.w	r1, r1, #4
 800758c:	6021      	strge	r1, [r4, #0]
 800758e:	b90d      	cbnz	r5, 8007594 <_printf_i+0x110>
 8007590:	2e00      	cmp	r6, #0
 8007592:	d04b      	beq.n	800762c <_printf_i+0x1a8>
 8007594:	4616      	mov	r6, r2
 8007596:	fbb5 f1f3 	udiv	r1, r5, r3
 800759a:	fb03 5711 	mls	r7, r3, r1, r5
 800759e:	5dc7      	ldrb	r7, [r0, r7]
 80075a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075a4:	462f      	mov	r7, r5
 80075a6:	42bb      	cmp	r3, r7
 80075a8:	460d      	mov	r5, r1
 80075aa:	d9f4      	bls.n	8007596 <_printf_i+0x112>
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d10b      	bne.n	80075c8 <_printf_i+0x144>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	07df      	lsls	r7, r3, #31
 80075b4:	d508      	bpl.n	80075c8 <_printf_i+0x144>
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	6861      	ldr	r1, [r4, #4]
 80075ba:	4299      	cmp	r1, r3
 80075bc:	bfde      	ittt	le
 80075be:	2330      	movle	r3, #48	@ 0x30
 80075c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80075c8:	1b92      	subs	r2, r2, r6
 80075ca:	6122      	str	r2, [r4, #16]
 80075cc:	f8cd a000 	str.w	sl, [sp]
 80075d0:	464b      	mov	r3, r9
 80075d2:	aa03      	add	r2, sp, #12
 80075d4:	4621      	mov	r1, r4
 80075d6:	4640      	mov	r0, r8
 80075d8:	f7ff fee6 	bl	80073a8 <_printf_common>
 80075dc:	3001      	adds	r0, #1
 80075de:	d14a      	bne.n	8007676 <_printf_i+0x1f2>
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075e4:	b004      	add	sp, #16
 80075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	f043 0320 	orr.w	r3, r3, #32
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	4833      	ldr	r0, [pc, #204]	@ (80076c0 <_printf_i+0x23c>)
 80075f4:	2778      	movs	r7, #120	@ 0x78
 80075f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	6831      	ldr	r1, [r6, #0]
 80075fe:	061f      	lsls	r7, r3, #24
 8007600:	f851 5b04 	ldr.w	r5, [r1], #4
 8007604:	d402      	bmi.n	800760c <_printf_i+0x188>
 8007606:	065f      	lsls	r7, r3, #25
 8007608:	bf48      	it	mi
 800760a:	b2ad      	uxthmi	r5, r5
 800760c:	6031      	str	r1, [r6, #0]
 800760e:	07d9      	lsls	r1, r3, #31
 8007610:	bf44      	itt	mi
 8007612:	f043 0320 	orrmi.w	r3, r3, #32
 8007616:	6023      	strmi	r3, [r4, #0]
 8007618:	b11d      	cbz	r5, 8007622 <_printf_i+0x19e>
 800761a:	2310      	movs	r3, #16
 800761c:	e7ac      	b.n	8007578 <_printf_i+0xf4>
 800761e:	4827      	ldr	r0, [pc, #156]	@ (80076bc <_printf_i+0x238>)
 8007620:	e7e9      	b.n	80075f6 <_printf_i+0x172>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	f023 0320 	bic.w	r3, r3, #32
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	e7f6      	b.n	800761a <_printf_i+0x196>
 800762c:	4616      	mov	r6, r2
 800762e:	e7bd      	b.n	80075ac <_printf_i+0x128>
 8007630:	6833      	ldr	r3, [r6, #0]
 8007632:	6825      	ldr	r5, [r4, #0]
 8007634:	6961      	ldr	r1, [r4, #20]
 8007636:	1d18      	adds	r0, r3, #4
 8007638:	6030      	str	r0, [r6, #0]
 800763a:	062e      	lsls	r6, r5, #24
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	d501      	bpl.n	8007644 <_printf_i+0x1c0>
 8007640:	6019      	str	r1, [r3, #0]
 8007642:	e002      	b.n	800764a <_printf_i+0x1c6>
 8007644:	0668      	lsls	r0, r5, #25
 8007646:	d5fb      	bpl.n	8007640 <_printf_i+0x1bc>
 8007648:	8019      	strh	r1, [r3, #0]
 800764a:	2300      	movs	r3, #0
 800764c:	6123      	str	r3, [r4, #16]
 800764e:	4616      	mov	r6, r2
 8007650:	e7bc      	b.n	80075cc <_printf_i+0x148>
 8007652:	6833      	ldr	r3, [r6, #0]
 8007654:	1d1a      	adds	r2, r3, #4
 8007656:	6032      	str	r2, [r6, #0]
 8007658:	681e      	ldr	r6, [r3, #0]
 800765a:	6862      	ldr	r2, [r4, #4]
 800765c:	2100      	movs	r1, #0
 800765e:	4630      	mov	r0, r6
 8007660:	f7f8 fdde 	bl	8000220 <memchr>
 8007664:	b108      	cbz	r0, 800766a <_printf_i+0x1e6>
 8007666:	1b80      	subs	r0, r0, r6
 8007668:	6060      	str	r0, [r4, #4]
 800766a:	6863      	ldr	r3, [r4, #4]
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	2300      	movs	r3, #0
 8007670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007674:	e7aa      	b.n	80075cc <_printf_i+0x148>
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	4632      	mov	r2, r6
 800767a:	4649      	mov	r1, r9
 800767c:	4640      	mov	r0, r8
 800767e:	47d0      	blx	sl
 8007680:	3001      	adds	r0, #1
 8007682:	d0ad      	beq.n	80075e0 <_printf_i+0x15c>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	079b      	lsls	r3, r3, #30
 8007688:	d413      	bmi.n	80076b2 <_printf_i+0x22e>
 800768a:	68e0      	ldr	r0, [r4, #12]
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	4298      	cmp	r0, r3
 8007690:	bfb8      	it	lt
 8007692:	4618      	movlt	r0, r3
 8007694:	e7a6      	b.n	80075e4 <_printf_i+0x160>
 8007696:	2301      	movs	r3, #1
 8007698:	4632      	mov	r2, r6
 800769a:	4649      	mov	r1, r9
 800769c:	4640      	mov	r0, r8
 800769e:	47d0      	blx	sl
 80076a0:	3001      	adds	r0, #1
 80076a2:	d09d      	beq.n	80075e0 <_printf_i+0x15c>
 80076a4:	3501      	adds	r5, #1
 80076a6:	68e3      	ldr	r3, [r4, #12]
 80076a8:	9903      	ldr	r1, [sp, #12]
 80076aa:	1a5b      	subs	r3, r3, r1
 80076ac:	42ab      	cmp	r3, r5
 80076ae:	dcf2      	bgt.n	8007696 <_printf_i+0x212>
 80076b0:	e7eb      	b.n	800768a <_printf_i+0x206>
 80076b2:	2500      	movs	r5, #0
 80076b4:	f104 0619 	add.w	r6, r4, #25
 80076b8:	e7f5      	b.n	80076a6 <_printf_i+0x222>
 80076ba:	bf00      	nop
 80076bc:	080078e9 	.word	0x080078e9
 80076c0:	080078fa 	.word	0x080078fa

080076c4 <__malloc_lock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	@ (80076cc <__malloc_lock+0x8>)
 80076c6:	f7ff bc73 	b.w	8006fb0 <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	200008fc 	.word	0x200008fc

080076d0 <__malloc_unlock>:
 80076d0:	4801      	ldr	r0, [pc, #4]	@ (80076d8 <__malloc_unlock+0x8>)
 80076d2:	f7ff bc6e 	b.w	8006fb2 <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	200008fc 	.word	0x200008fc

080076dc <_realloc_r>:
 80076dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e0:	4680      	mov	r8, r0
 80076e2:	4615      	mov	r5, r2
 80076e4:	460c      	mov	r4, r1
 80076e6:	b921      	cbnz	r1, 80076f2 <_realloc_r+0x16>
 80076e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	4611      	mov	r1, r2
 80076ee:	f7ff bddb 	b.w	80072a8 <_malloc_r>
 80076f2:	b92a      	cbnz	r2, 8007700 <_realloc_r+0x24>
 80076f4:	f000 f858 	bl	80077a8 <_free_r>
 80076f8:	2400      	movs	r4, #0
 80076fa:	4620      	mov	r0, r4
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007700:	f000 f89c 	bl	800783c <_malloc_usable_size_r>
 8007704:	4285      	cmp	r5, r0
 8007706:	4606      	mov	r6, r0
 8007708:	d802      	bhi.n	8007710 <_realloc_r+0x34>
 800770a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800770e:	d8f4      	bhi.n	80076fa <_realloc_r+0x1e>
 8007710:	4629      	mov	r1, r5
 8007712:	4640      	mov	r0, r8
 8007714:	f7ff fdc8 	bl	80072a8 <_malloc_r>
 8007718:	4607      	mov	r7, r0
 800771a:	2800      	cmp	r0, #0
 800771c:	d0ec      	beq.n	80076f8 <_realloc_r+0x1c>
 800771e:	42b5      	cmp	r5, r6
 8007720:	462a      	mov	r2, r5
 8007722:	4621      	mov	r1, r4
 8007724:	bf28      	it	cs
 8007726:	4632      	movcs	r2, r6
 8007728:	f000 f830 	bl	800778c <memcpy>
 800772c:	4621      	mov	r1, r4
 800772e:	4640      	mov	r0, r8
 8007730:	f000 f83a 	bl	80077a8 <_free_r>
 8007734:	463c      	mov	r4, r7
 8007736:	e7e0      	b.n	80076fa <_realloc_r+0x1e>

08007738 <memmove>:
 8007738:	4288      	cmp	r0, r1
 800773a:	b510      	push	{r4, lr}
 800773c:	eb01 0402 	add.w	r4, r1, r2
 8007740:	d902      	bls.n	8007748 <memmove+0x10>
 8007742:	4284      	cmp	r4, r0
 8007744:	4623      	mov	r3, r4
 8007746:	d807      	bhi.n	8007758 <memmove+0x20>
 8007748:	1e43      	subs	r3, r0, #1
 800774a:	42a1      	cmp	r1, r4
 800774c:	d008      	beq.n	8007760 <memmove+0x28>
 800774e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007756:	e7f8      	b.n	800774a <memmove+0x12>
 8007758:	4402      	add	r2, r0
 800775a:	4601      	mov	r1, r0
 800775c:	428a      	cmp	r2, r1
 800775e:	d100      	bne.n	8007762 <memmove+0x2a>
 8007760:	bd10      	pop	{r4, pc}
 8007762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800776a:	e7f7      	b.n	800775c <memmove+0x24>

0800776c <_sbrk_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4d06      	ldr	r5, [pc, #24]	@ (8007788 <_sbrk_r+0x1c>)
 8007770:	2300      	movs	r3, #0
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	f7f9 fe52 	bl	8001420 <_sbrk>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_sbrk_r+0x1a>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_sbrk_r+0x1a>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	20000908 	.word	0x20000908

0800778c <memcpy>:
 800778c:	440a      	add	r2, r1
 800778e:	4291      	cmp	r1, r2
 8007790:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007794:	d100      	bne.n	8007798 <memcpy+0xc>
 8007796:	4770      	bx	lr
 8007798:	b510      	push	{r4, lr}
 800779a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800779e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077a2:	4291      	cmp	r1, r2
 80077a4:	d1f9      	bne.n	800779a <memcpy+0xe>
 80077a6:	bd10      	pop	{r4, pc}

080077a8 <_free_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4605      	mov	r5, r0
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d041      	beq.n	8007834 <_free_r+0x8c>
 80077b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b4:	1f0c      	subs	r4, r1, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bfb8      	it	lt
 80077ba:	18e4      	addlt	r4, r4, r3
 80077bc:	f7ff ff82 	bl	80076c4 <__malloc_lock>
 80077c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007838 <_free_r+0x90>)
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	b933      	cbnz	r3, 80077d4 <_free_r+0x2c>
 80077c6:	6063      	str	r3, [r4, #4]
 80077c8:	6014      	str	r4, [r2, #0]
 80077ca:	4628      	mov	r0, r5
 80077cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077d0:	f7ff bf7e 	b.w	80076d0 <__malloc_unlock>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d908      	bls.n	80077ea <_free_r+0x42>
 80077d8:	6820      	ldr	r0, [r4, #0]
 80077da:	1821      	adds	r1, r4, r0
 80077dc:	428b      	cmp	r3, r1
 80077de:	bf01      	itttt	eq
 80077e0:	6819      	ldreq	r1, [r3, #0]
 80077e2:	685b      	ldreq	r3, [r3, #4]
 80077e4:	1809      	addeq	r1, r1, r0
 80077e6:	6021      	streq	r1, [r4, #0]
 80077e8:	e7ed      	b.n	80077c6 <_free_r+0x1e>
 80077ea:	461a      	mov	r2, r3
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	b10b      	cbz	r3, 80077f4 <_free_r+0x4c>
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d9fa      	bls.n	80077ea <_free_r+0x42>
 80077f4:	6811      	ldr	r1, [r2, #0]
 80077f6:	1850      	adds	r0, r2, r1
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d10b      	bne.n	8007814 <_free_r+0x6c>
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	4401      	add	r1, r0
 8007800:	1850      	adds	r0, r2, r1
 8007802:	4283      	cmp	r3, r0
 8007804:	6011      	str	r1, [r2, #0]
 8007806:	d1e0      	bne.n	80077ca <_free_r+0x22>
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	6053      	str	r3, [r2, #4]
 800780e:	4408      	add	r0, r1
 8007810:	6010      	str	r0, [r2, #0]
 8007812:	e7da      	b.n	80077ca <_free_r+0x22>
 8007814:	d902      	bls.n	800781c <_free_r+0x74>
 8007816:	230c      	movs	r3, #12
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	e7d6      	b.n	80077ca <_free_r+0x22>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	1821      	adds	r1, r4, r0
 8007820:	428b      	cmp	r3, r1
 8007822:	bf04      	itt	eq
 8007824:	6819      	ldreq	r1, [r3, #0]
 8007826:	685b      	ldreq	r3, [r3, #4]
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	bf04      	itt	eq
 800782c:	1809      	addeq	r1, r1, r0
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	6054      	str	r4, [r2, #4]
 8007832:	e7ca      	b.n	80077ca <_free_r+0x22>
 8007834:	bd38      	pop	{r3, r4, r5, pc}
 8007836:	bf00      	nop
 8007838:	20000904 	.word	0x20000904

0800783c <_malloc_usable_size_r>:
 800783c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007840:	1f18      	subs	r0, r3, #4
 8007842:	2b00      	cmp	r3, #0
 8007844:	bfbc      	itt	lt
 8007846:	580b      	ldrlt	r3, [r1, r0]
 8007848:	18c0      	addlt	r0, r0, r3
 800784a:	4770      	bx	lr

0800784c <_init>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr

08007858 <_fini>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr
