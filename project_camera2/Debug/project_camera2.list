
project_camera2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f7c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800914c  0800914c  0000a14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d0  080094d0  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  080094d0  080094d0  0000a4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094d8  080094d8  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d8  080094d8  0000a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094dc  080094dc  0000a4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080094e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e9b4  2000005c  0800953c  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ea10  0800953c  0000ba10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ea8  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347f  00000000  00000000  00023f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000273b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001031  00000000  00000000  00028858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248dd  00000000  00000000  00029889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c34b  00000000  00000000  0004e166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7483  00000000  00000000  0006a4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d40  00000000  00000000  00141978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001476b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009134 	.word	0x08009134

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08009134 	.word	0x08009134

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <print_msg>:
#include "config.h"




void print_msg(char * msg) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe29 	bl	8000210 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <print_msg+0x24>)
 80005c8:	f006 fe51 	bl	800726e <HAL_UART_Transmit>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000020c 	.word	0x2000020c

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 f924 	bl	8008834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a22      	ldr	r2, [pc, #136]	@ (80006ac <SystemClock_Config+0xd4>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800063c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	@ 0xa8
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fc5f 	bl	8005f24 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 fa9e 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2105      	movs	r1, #5
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fdd4 	bl	800523c <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069a:	f000 fa87 	bl	8000bac <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
 void MX_DCMI_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006b6:	4a17      	ldr	r2, [pc, #92]	@ (8000714 <MX_DCMI_Init+0x64>)
 80006b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006c2:	2220      	movs	r2, #32
 80006c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006c8:	2280      	movs	r2, #128	@ 0x80
 80006ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_DCMI_Init+0x60>)
 80006fe:	f001 fcb7 	bl	8002070 <HAL_DCMI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000708:	f000 fa50 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000078 	.word	0x20000078
 8000714:	50050000 	.word	0x50050000

08000718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_I2C2_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <MX_I2C2_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_I2C2_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_I2C2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_I2C2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_I2C2_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_I2C2_Init+0x50>)
 8000756:	f003 fc93 	bl	8004080 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fa24 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000128 	.word	0x20000128
 800076c:	40005800 	.word	0x40005800
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b092      	sub	sp, #72	@ 0x48
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f008 f848 	bl	8008834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007a6:	4a33      	ldr	r2, [pc, #204]	@ (8000874 <MX_TIM1_Init+0x100>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007aa:	4b31      	ldr	r3, [pc, #196]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80007b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007b8:	2214      	movs	r2, #20
 80007ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c8:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ce:	4828      	ldr	r0, [pc, #160]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007d0:	f005 fe95 	bl	80064fe <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80007da:	f000 f9e7 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007ea:	4619      	mov	r1, r3
 80007ec:	4820      	ldr	r0, [pc, #128]	@ (8000870 <MX_TIM1_Init+0xfc>)
 80007ee:	f006 fc0f 	bl	8007010 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80007f8:	f000 f9d8 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	@ 0x60
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 8000800:	230a      	movs	r3, #10
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	4619      	mov	r1, r3
 8000820:	4813      	ldr	r0, [pc, #76]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000822:	f006 f88b 	bl	800693c <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800082c:	f000 f9be 	bl	8000bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4807      	ldr	r0, [pc, #28]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000854:	f006 fc58 	bl	8007108 <HAL_TIMEx_ConfigBreakDeadTime>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800085e:	f000 f9a5 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000862:	4803      	ldr	r0, [pc, #12]	@ (8000870 <MX_TIM1_Init+0xfc>)
 8000864:	f000 fdd4 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000868:	bf00      	nop
 800086a:	3748      	adds	r7, #72	@ 0x48
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000017c 	.word	0x2000017c
 8000874:	40010000 	.word	0x40010000

08000878 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM6_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_TIM6_Init+0x64>)
 8000888:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_TIM6_Init+0x68>)
 800088a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_TIM6_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_TIM6_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_TIM6_Init+0x64>)
 800089a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008a8:	f005 fdda 	bl	8006460 <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008b2:	f000 f97b 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_TIM6_Init+0x64>)
 80008c4:	f006 fba4 	bl	8007010 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008ce:	f000 f96d 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001c4 	.word	0x200001c4
 80008e0:	40001000 	.word	0x40001000

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART3_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 800091c:	f006 fc5a 	bl	80071d4 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f941 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000020c 	.word	0x2000020c
 8000934:	40004800 	.word	0x40004800

08000938 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
 void MX_USB_OTG_FS_PCD_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000942:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2206      	movs	r2, #6
 8000948:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2202      	movs	r2, #2
 800094e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2201      	movs	r2, #1
 8000960:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2201      	movs	r2, #1
 8000972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	f004 fb15 	bl	8004faa <HAL_PCD_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 f911 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200002b0 	.word	0x200002b0

08000994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
 void MX_DMA_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_DMA_Init+0x68>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a16      	ldr	r2, [pc, #88]	@ (80009fc <MX_DMA_Init+0x68>)
 80009a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_DMA_Init+0x68>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_DMA_Init+0x68>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <MX_DMA_Init+0x68>)
 80009c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <MX_DMA_Init+0x68>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	200e      	movs	r0, #14
 80009d8:	f001 f8a1 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009dc:	200e      	movs	r0, #14
 80009de:	f001 f8ba 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2039      	movs	r0, #57	@ 0x39
 80009e8:	f001 f899 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009ec:	2039      	movs	r0, #57	@ 0x39
 80009ee:	f001 f8b2 	bl	8001b56 <HAL_NVIC_EnableIRQ>

}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	@ 0x38
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
 8000a1a:	4b60      	ldr	r3, [pc, #384]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a5f      	ldr	r2, [pc, #380]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b5d      	ldr	r3, [pc, #372]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	623b      	str	r3, [r7, #32]
 8000a30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	4b59      	ldr	r3, [pc, #356]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a58      	ldr	r2, [pc, #352]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b56      	ldr	r3, [pc, #344]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	4b52      	ldr	r3, [pc, #328]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a51      	ldr	r2, [pc, #324]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a58:	f043 0320 	orr.w	r3, r3, #32
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0320 	and.w	r3, r3, #32
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a4a      	ldr	r2, [pc, #296]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b48      	ldr	r3, [pc, #288]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b44      	ldr	r3, [pc, #272]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a43      	ldr	r2, [pc, #268]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b41      	ldr	r3, [pc, #260]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a3c      	ldr	r2, [pc, #240]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a35      	ldr	r2, [pc, #212]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <MX_GPIO_Init+0x19c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000afc:	4828      	ldr	r0, [pc, #160]	@ (8000ba0 <MX_GPIO_Init+0x1a0>)
 8000afe:	f003 fa67 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(camera_reset_GPIO_Port, camera_reset_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2101      	movs	r1, #1
 8000b06:	4827      	ldr	r0, [pc, #156]	@ (8000ba4 <MX_GPIO_Init+0x1a4>)
 8000b08:	f003 fa62 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, camera_PWDN_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2142      	movs	r1, #66	@ 0x42
 8000b10:	4824      	ldr	r0, [pc, #144]	@ (8000ba4 <MX_GPIO_Init+0x1a4>)
 8000b12:	f003 fa5d 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481e      	ldr	r0, [pc, #120]	@ (8000ba8 <MX_GPIO_Init+0x1a8>)
 8000b2e:	f003 f8a3 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b32:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4815      	ldr	r0, [pc, #84]	@ (8000ba0 <MX_GPIO_Init+0x1a0>)
 8000b4c:	f003 f894 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_reset_Pin camera_PWDN_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = camera_reset_Pin|camera_PWDN_Pin|USB_PowerSwitchOn_Pin;
 8000b50:	2343      	movs	r3, #67	@ 0x43
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	480f      	ldr	r0, [pc, #60]	@ (8000ba4 <MX_GPIO_Init+0x1a4>)
 8000b68:	f003 f886 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b6c:	2380      	movs	r3, #128	@ 0x80
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <MX_GPIO_Init+0x1a4>)
 8000b80:	f003 f87a 	bl	8003c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2028      	movs	r0, #40	@ 0x28
 8000b8a:	f000 ffc8 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b8e:	2028      	movs	r0, #40	@ 0x28
 8000b90:	f000 ffe1 	bl	8001b56 <HAL_NVIC_EnableIRQ>

}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	@ 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40021800 	.word	0x40021800
 8000ba8:	40020800 	.word	0x40020800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <print_bb>:
uint8_t dma_flag = 0;


void print_buf(void);

void print_bb(uint8_t *byte_ptr){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09e      	sub	sp, #120	@ 0x78
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	char msg[100];
	sprintf(msg, "\n***The following is data for my byte buffer\n");
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4922      	ldr	r1, [pc, #136]	@ (8000c50 <print_bb+0x98>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 fe14 	bl	80087f4 <siprintf>
	print_msg(msg);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fced 	bl	80005b0 <print_msg>
	int ct = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	677b      	str	r3, [r7, #116]	@ 0x74
	for(int i = 0; i < BUFFER_SIZE * 2; i++){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bde:	e02d      	b.n	8000c3c <print_bb+0x84>
		if(i % 174 == 0){
 8000be0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <print_bb+0x9c>)
 8000be4:	fb83 1302 	smull	r1, r3, r3, r2
 8000be8:	1159      	asrs	r1, r3, #5
 8000bea:	17d3      	asrs	r3, r2, #31
 8000bec:	1acb      	subs	r3, r1, r3
 8000bee:	21ae      	movs	r1, #174	@ 0xae
 8000bf0:	fb01 f303 	mul.w	r3, r1, r3
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10d      	bne.n	8000c16 <print_bb+0x5e>
			sprintf(msg, "\n%d***\n", ct++);
 8000bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8000c00:	f107 000c 	add.w	r0, r7, #12
 8000c04:	461a      	mov	r2, r3
 8000c06:	4914      	ldr	r1, [pc, #80]	@ (8000c58 <print_bb+0xa0>)
 8000c08:	f007 fdf4 	bl	80087f4 <siprintf>
			print_msg(msg);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fccd 	bl	80005b0 <print_msg>
		}
		sprintf(msg, "%02X ", byte_ptr[i]);
 8000c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	490d      	ldr	r1, [pc, #52]	@ (8000c5c <print_bb+0xa4>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f007 fde4 	bl	80087f4 <siprintf>
		print_msg(msg);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fcbd 	bl	80005b0 <print_msg>
	for(int i = 0; i < BUFFER_SIZE * 2; i++){
 8000c36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c38:	3301      	adds	r3, #1
 8000c3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8000c3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c3e:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000c42:	dbcd      	blt.n	8000be0 <print_bb+0x28>
	}


}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3778      	adds	r7, #120	@ 0x78
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	0800914c 	.word	0x0800914c
 8000c54:	2f149903 	.word	0x2f149903
 8000c58:	0800917c 	.word	0x0800917c
 8000c5c:	08009184 	.word	0x08009184

08000c60 <print_sb>:
void print_sb(uint8_t *send_ptr){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09e      	sub	sp, #120	@ 0x78
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	char msg[100];
	sprintf(msg, "***The following is data for my sender buffer\n");
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4922      	ldr	r1, [pc, #136]	@ (8000cf8 <print_sb+0x98>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f007 fdc0 	bl	80087f4 <siprintf>
	print_msg(msg);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fc99 	bl	80005b0 <print_msg>
	int ct = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	677b      	str	r3, [r7, #116]	@ 0x74
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	673b      	str	r3, [r7, #112]	@ 0x70
 8000c86:	e02d      	b.n	8000ce4 <print_sb+0x84>
		if(i % 174 == 0){
 8000c88:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <print_sb+0x9c>)
 8000c8c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c90:	1159      	asrs	r1, r3, #5
 8000c92:	17d3      	asrs	r3, r2, #31
 8000c94:	1acb      	subs	r3, r1, r3
 8000c96:	21ae      	movs	r1, #174	@ 0xae
 8000c98:	fb01 f303 	mul.w	r3, r1, r3
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10d      	bne.n	8000cbe <print_sb+0x5e>
			sprintf(msg, "\n%d***\n", ct++);
 8000ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	677a      	str	r2, [r7, #116]	@ 0x74
 8000ca8:	f107 000c 	add.w	r0, r7, #12
 8000cac:	461a      	mov	r2, r3
 8000cae:	4914      	ldr	r1, [pc, #80]	@ (8000d00 <print_sb+0xa0>)
 8000cb0:	f007 fda0 	bl	80087f4 <siprintf>
			print_msg(msg);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc79 	bl	80005b0 <print_msg>
		}
		sprintf(msg, "%02X ", send_ptr[i]);
 8000cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <print_sb+0xa4>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f007 fd90 	bl	80087f4 <siprintf>
		print_msg(msg);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc69 	bl	80005b0 <print_msg>
	for(int i = 0; i < BUFFER_SIZE; i++){
 8000cde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ce4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ce6:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8000cea:	dbcd      	blt.n	8000c88 <print_sb+0x28>
	}
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3778      	adds	r7, #120	@ 0x78
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	0800918c 	.word	0x0800918c
 8000cfc:	2f149903 	.word	0x2f149903
 8000d00:	0800917c 	.word	0x0800917c
 8000d04:	08009184 	.word	0x08009184

08000d08 <send_img>:
		sprintf(msg, "%04X ", snapshot_buff[i]);
		print_msg(msg);
	}
}

void send_img(){
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n";
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <send_img+0xa4>)
 8000d10:	463c      	mov	r4, r7
 8000d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d14:	c407      	stmia	r4!, {r0, r1, r2}
 8000d16:	8023      	strh	r3, [r4, #0]

	uint8_t* byte_ptr = (uint8_t*)snapshot_buff;
 8000d18:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <send_img+0xa8>)
 8000d1a:	613b      	str	r3, [r7, #16]

	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE; i-=2, j++) {
 8000d1c:	f249 53ff 	movw	r3, #38399	@ 0x95ff
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	e00e      	b.n	8000d46 <send_img+0x3e>
    	send_ptr[j] = byte_ptr[i];
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	7819      	ldrb	r1, [r3, #0]
 8000d30:	4a20      	ldr	r2, [pc, #128]	@ (8000db4 <send_img+0xac>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4413      	add	r3, r2
 8000d36:	460a      	mov	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE; i-=2, j++) {
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	3301      	adds	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db03      	blt.n	8000d54 <send_img+0x4c>
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8000d52:	dbe9      	blt.n	8000d28 <send_img+0x20>
		} while (0)
	#else
		#define LOG() do { } while (0)
	#endif

	LOG();
 8000d54:	6938      	ldr	r0, [r7, #16]
 8000d56:	f7ff ff2f 	bl	8000bb8 <print_bb>
 8000d5a:	4816      	ldr	r0, [pc, #88]	@ (8000db4 <send_img+0xac>)
 8000d5c:	f7ff ff80 	bl	8000c60 <print_sb>

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e00b      	b.n	8000d7e <send_img+0x76>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 8000d66:	463a      	mov	r2, r7
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	18d1      	adds	r1, r2, r3
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2201      	movs	r2, #1
 8000d72:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <send_img+0xb0>)
 8000d74:	f006 fa7b 	bl	800726e <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b0c      	cmp	r3, #12
 8000d82:	ddf0      	ble.n	8000d66 <send_img+0x5e>
	}

	// Send image data through serial port.

	HAL_UART_Transmit(&huart3, send_ptr, FRAMESIZE/2, HAL_MAX_DELAY);
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d8c:	4909      	ldr	r1, [pc, #36]	@ (8000db4 <send_img+0xac>)
 8000d8e:	480a      	ldr	r0, [pc, #40]	@ (8000db8 <send_img+0xb0>)
 8000d90:	f006 fa6d 	bl	800726e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &send_ptr[FRAMESIZE/2], FRAMESIZE/2, HAL_MAX_DELAY);
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d9c:	4907      	ldr	r1, [pc, #28]	@ (8000dbc <send_img+0xb4>)
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <send_img+0xb0>)
 8000da0:	f006 fa65 	bl	800726e <HAL_UART_Transmit>

}
 8000da4:	bf00      	nop
 8000da6:	3724      	adds	r7, #36	@ 0x24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	080091f8 	.word	0x080091f8
 8000db0:	200007bc 	.word	0x200007bc
 8000db4:	20009dbc 	.word	0x20009dbc
 8000db8:	2000020c 	.word	0x2000020c
 8000dbc:	2000c33c 	.word	0x2000c33c

08000dc0 <p4>:


void p4(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	while(1){
		HAL_DCMI_Suspend(&hdcmi);
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <p4+0x3c>)
 8000dc6:	f000 ff81 	bl	8001ccc <HAL_DCMI_Suspend>
		ov2640_capture(snapshot_buff);
 8000dca:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <p4+0x40>)
 8000dcc:	f000 f92c 	bl	8001028 <ov2640_capture>
		while(!dma_flag)
 8000dd0:	e002      	b.n	8000dd8 <p4+0x18>
		{
			HAL_Delay(10);
 8000dd2:	200a      	movs	r0, #10
 8000dd4:	f000 fda4 	bl	8001920 <HAL_Delay>
		while(!dma_flag)
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <p4+0x44>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f8      	beq.n	8000dd2 <p4+0x12>
		}
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000de0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000de4:	4808      	ldr	r0, [pc, #32]	@ (8000e08 <p4+0x48>)
 8000de6:	f003 f90c 	bl	8004002 <HAL_GPIO_TogglePin>
		dma_flag = 0;
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <p4+0x44>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
		HAL_DCMI_Resume(&hdcmi);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <p4+0x3c>)
 8000df2:	f000 ffbf 	bl	8001d74 <HAL_DCMI_Resume>
		send_img();
 8000df6:	f7ff ff87 	bl	8000d08 <send_img>
		HAL_DCMI_Suspend(&hdcmi);
 8000dfa:	e7e3      	b.n	8000dc4 <p4+0x4>
 8000dfc:	20000078 	.word	0x20000078
 8000e00:	200007bc 	.word	0x200007bc
 8000e04:	2000e8bc 	.word	0x2000e8bc
 8000e08:	40020400 	.word	0x40020400

08000e0c <main>:
	}
}


int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  
  HAL_Init();
 8000e10:	f000 fd14 	bl	800183c <HAL_Init>
  SystemClock_Config();
 8000e14:	f7ff fbe0 	bl	80005d8 <SystemClock_Config>

 
  MX_GPIO_Init();
 8000e18:	f7ff fdf2 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1c:	f7ff fdba 	bl	8000994 <MX_DMA_Init>
  MX_DCMI_Init();
 8000e20:	f7ff fc46 	bl	80006b0 <MX_DCMI_Init>
  MX_USART3_UART_Init();
 8000e24:	f7ff fd5e 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e28:	f7ff fd86 	bl	8000938 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000e2c:	f7ff fc74 	bl	8000718 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000e30:	f7ff fca0 	bl	8000774 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000e34:	f7ff fd20 	bl	8000878 <MX_TIM6_Init>

  __HAL_DMA_ENABLE_IT(&hdma_dcmi, DMA_IT_TC);
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <main+0x84>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <main+0x84>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0210 	orr.w	r2, r2, #16
 8000e46:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e48:	2039      	movs	r0, #57	@ 0x39
 8000e4a:	f000 fe84 	bl	8001b56 <HAL_NVIC_EnableIRQ>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <main+0x88>)
 8000e52:	f005 fba3 	bl	800659c <HAL_TIM_PWM_Start>
  
  ov2640_init();
 8000e56:	f000 f869 	bl	8000f2c <ov2640_init>
  ov2640_config();
 8000e5a:	f000 f899 	bl	8000f90 <ov2640_config>



  while (1)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <main+0x8c>)
 8000e62:	f003 f8ce 	bl	8004002 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(100);
 8000e66:	2064      	movs	r0, #100	@ 0x64
 8000e68:	f000 fd5a 	bl	8001920 <HAL_Delay>

	  if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 8000e6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e70:	480a      	ldr	r0, [pc, #40]	@ (8000e9c <main+0x90>)
 8000e72:	f003 f895 	bl	8003fa0 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f0      	beq.n	8000e5e <main+0x52>
	  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e7c:	2180      	movs	r1, #128	@ 0x80
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <main+0x8c>)
 8000e80:	f003 f8bf 	bl	8004002 <HAL_GPIO_TogglePin>
	  	HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	@ 0x64
 8000e86:	f000 fd4b 	bl	8001920 <HAL_Delay>
	  	p4();
 8000e8a:	f7ff ff99 	bl	8000dc0 <p4>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e8e:	e7e6      	b.n	8000e5e <main+0x52>
 8000e90:	200000c8 	.word	0x200000c8
 8000e94:	2000017c 	.word	0x2000017c
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020800 	.word	0x40020800

08000ea0 <ov2640_read>:
  {0x99, 0x00},
  {0x00, 0x00},
}; //219 of them


uint8_t ov2640_read(uint8_t reg){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09e      	sub	sp, #120	@ 0x78
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  // Re-use the same code from Lab 5 here.
	uint8_t data;
	char msg[100];
	// Transmit register
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV2640, &reg, 1, 10000);
 8000eaa:	1dfa      	adds	r2, r7, #7
 8000eac:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2160      	movs	r1, #96	@ 0x60
 8000eb6:	481b      	ldr	r0, [pc, #108]	@ (8000f24 <ov2640_read+0x84>)
 8000eb8:	f003 fa26 	bl	8004308 <HAL_I2C_Master_Transmit>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	while(status != HAL_OK) {
 8000ec2:	e01a      	b.n	8000efa <ov2640_read+0x5a>
		 sprintf(msg, "Error\n");
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4917      	ldr	r1, [pc, #92]	@ (8000f28 <ov2640_read+0x88>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f007 fc92 	bl	80087f4 <siprintf>
	print_msg(msg);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fb6b 	bl	80005b0 <print_msg>
	HAL_Delay(1000);
 8000eda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ede:	f000 fd1f 	bl	8001920 <HAL_Delay>
	status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV2640, &reg, 1, 10000);
 8000ee2:	1dfa      	adds	r2, r7, #7
 8000ee4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	2160      	movs	r1, #96	@ 0x60
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <ov2640_read+0x84>)
 8000ef0:	f003 fa0a 	bl	8004308 <HAL_I2C_Master_Transmit>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	while(status != HAL_OK) {
 8000efa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1e0      	bne.n	8000ec4 <ov2640_read+0x24>
	}
	// Read data
	HAL_I2C_Master_Receive(&hi2c2, Read_ADDR_OV2640, &data, 1, 10000);
 8000f02:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 8000f06:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	2161      	movs	r1, #97	@ 0x61
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <ov2640_read+0x84>)
 8000f12:	f003 faf7 	bl	8004504 <HAL_I2C_Master_Receive>
	return data;
 8000f16:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3770      	adds	r7, #112	@ 0x70
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000128 	.word	0x20000128
 8000f28:	08009208 	.word	0x08009208

08000f2c <ov2640_init>:

uint8_t ov2640_init(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b09a      	sub	sp, #104	@ 0x68
 8000f30:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 8000f32:	4814      	ldr	r0, [pc, #80]	@ (8000f84 <ov2640_init+0x58>)
 8000f34:	f7ff fb3c 	bl	80005b0 <print_msg>
  val = ov2640_read(0x0A);
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f7ff ffb1 	bl	8000ea0 <ov2640_read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67



  if (val != 0x26) {
 8000f44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f48:	2b26      	cmp	r3, #38	@ 0x26
 8000f4a:	d00c      	beq.n	8000f66 <ov2640_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8000f4c:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000f50:	463b      	mov	r3, r7
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <ov2640_init+0x5c>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f007 fc4d 	bl	80087f4 <siprintf>
    print_msg(msg);
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fb27 	bl	80005b0 <print_msg>
    return 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e009      	b.n	8000f7a <ov2640_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 8000f66:	463b      	mov	r3, r7
 8000f68:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <ov2640_init+0x60>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f007 fc42 	bl	80087f4 <siprintf>
		print_msg(msg);
 8000f70:	463b      	mov	r3, r7
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fb1c 	bl	80005b0 <print_msg>
  }

  // Re-use the same code from Lab 5 here.
  return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3768      	adds	r7, #104	@ 0x68
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	08009210 	.word	0x08009210
 8000f88:	0800921c 	.word	0x0800921c
 8000f8c:	08009238 	.word	0x08009238

08000f90 <ov2640_config>:
    }
}



void ov2640_config(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af02      	add	r7, sp, #8
    char msg[20];
    uint8_t data[2];
    for(int i = 0; i < OV2640_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e037      	b.n	800100c <ov2640_config+0x7c>
        data[0] = OV2640_QQVGA[i][0]; 
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <ov2640_config+0x8c>)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000fa4:	703b      	strb	r3, [r7, #0]
        data[1] = OV2640_QQVGA[i][1];
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <ov2640_config+0x8c>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	707b      	strb	r3, [r7, #1]
        HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV2640, data, 2, 10000); //send address frame
 8000fb2:	463a      	mov	r2, r7
 8000fb4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	2160      	movs	r1, #96	@ 0x60
 8000fbe:	4818      	ldr	r0, [pc, #96]	@ (8001020 <ov2640_config+0x90>)
 8000fc0:	f003 f9a2 	bl	8004308 <HAL_I2C_Master_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	76fb      	strb	r3, [r7, #27]
        while(status != HAL_OK) {
 8000fc8:	e017      	b.n	8000ffa <ov2640_config+0x6a>
             sprintf(msg, "Error\n");
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4915      	ldr	r1, [pc, #84]	@ (8001024 <ov2640_config+0x94>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fc10 	bl	80087f4 <siprintf>
       print_msg(msg);
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff faea 	bl	80005b0 <print_msg>
       HAL_Delay(1000);
 8000fdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe0:	f000 fc9e 	bl	8001920 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV2640, data, 2, 10000); 
 8000fe4:	463a      	mov	r2, r7
 8000fe6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2302      	movs	r3, #2
 8000fee:	2160      	movs	r1, #96	@ 0x60
 8000ff0:	480b      	ldr	r0, [pc, #44]	@ (8001020 <ov2640_config+0x90>)
 8000ff2:	f003 f989 	bl	8004308 <HAL_I2C_Master_Transmit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	76fb      	strb	r3, [r7, #27]
        while(status != HAL_OK) {
 8000ffa:	7efb      	ldrb	r3, [r7, #27]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1e4      	bne.n	8000fca <ov2640_config+0x3a>
    }
        HAL_Delay(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f000 fc8d 	bl	8001920 <HAL_Delay>
    for(int i = 0; i < OV2640_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2bda      	cmp	r3, #218	@ 0xda
 8001010:	ddc4      	ble.n	8000f9c <ov2640_config+0xc>
    }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	080092c4 	.word	0x080092c4
 8001020:	20000128 	.word	0x20000128
 8001024:	08009208 	.word	0x08009208

08001028 <ov2640_capture>:
       print_msg(msg);
    }
}//goes back to main for waiting for interrupt


void ov2640_capture(uint16_t *buff){
 8001028:	b580      	push	{r7, lr}
 800102a:	b09c      	sub	sp, #112	@ 0x70
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 8001030:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <ov2640_capture+0x44>)
 8001032:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001036:	2100      	movs	r1, #0
 8001038:	480d      	ldr	r0, [pc, #52]	@ (8001070 <ov2640_capture+0x48>)
 800103a:	f000 fda7 	bl	8001b8c <HAL_DCMI_Start_DMA>
 800103e:	4603      	mov	r3, r0
 8001040:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 8001044:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00a      	beq.n	8001062 <ov2640_capture+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4908      	ldr	r1, [pc, #32]	@ (8001074 <ov2640_capture+0x4c>)
 8001052:	4618      	mov	r0, r3
 8001054:	f007 fbce 	bl	80087f4 <siprintf>
       print_msg(msg);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff faa7 	bl	80005b0 <print_msg>
    }
}
 8001062:	bf00      	nop
 8001064:	3770      	adds	r7, #112	@ 0x70
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200007bc 	.word	0x200007bc
 8001070:	20000078 	.word	0x20000078
 8001074:	080092b0 	.word	0x080092b0

08001078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	@ 0x38
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a78      	ldr	r2, [pc, #480]	@ (80012c8 <HAL_DCMI_MspInit+0x200>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f040 80e9 	bne.w	80012be <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
 80010f0:	4b76      	ldr	r3, [pc, #472]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 80010f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f4:	4a75      	ldr	r2, [pc, #468]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6353      	str	r3, [r2, #52]	@ 0x34
 80010fc:	4b73      	ldr	r3, [pc, #460]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 80010fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	4b6f      	ldr	r3, [pc, #444]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	4a6e      	ldr	r2, [pc, #440]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	6313      	str	r3, [r2, #48]	@ 0x30
 8001118:	4b6c      	ldr	r3, [pc, #432]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	4b68      	ldr	r3, [pc, #416]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	4a67      	ldr	r2, [pc, #412]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6313      	str	r3, [r2, #48]	@ 0x30
 8001134:	4b65      	ldr	r3, [pc, #404]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	4b61      	ldr	r3, [pc, #388]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a60      	ldr	r2, [pc, #384]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b5e      	ldr	r3, [pc, #376]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	4b5a      	ldr	r3, [pc, #360]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001164:	4a59      	ldr	r2, [pc, #356]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6313      	str	r3, [r2, #48]	@ 0x30
 800116c:	4b57      	ldr	r3, [pc, #348]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	4a52      	ldr	r2, [pc, #328]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 8001182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001186:	6313      	str	r3, [r2, #48]	@ 0x30
 8001188:	4b50      	ldr	r3, [pc, #320]	@ (80012cc <HAL_DCMI_MspInit+0x204>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001194:	2370      	movs	r3, #112	@ 0x70
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011a4:	230d      	movs	r3, #13
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4848      	ldr	r0, [pc, #288]	@ (80012d0 <HAL_DCMI_MspInit+0x208>)
 80011b0:	f002 fd62 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011b4:	2350      	movs	r3, #80	@ 0x50
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011c4:	230d      	movs	r3, #13
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	4841      	ldr	r0, [pc, #260]	@ (80012d4 <HAL_DCMI_MspInit+0x20c>)
 80011d0:	f002 fd52 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011d4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011e6:	230d      	movs	r3, #13
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4839      	ldr	r0, [pc, #228]	@ (80012d8 <HAL_DCMI_MspInit+0x210>)
 80011f2:	f002 fd41 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011f6:	2308      	movs	r3, #8
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001206:	230d      	movs	r3, #13
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4832      	ldr	r0, [pc, #200]	@ (80012dc <HAL_DCMI_MspInit+0x214>)
 8001212:	f002 fd31 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001228:	230d      	movs	r3, #13
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	482b      	ldr	r0, [pc, #172]	@ (80012e0 <HAL_DCMI_MspInit+0x218>)
 8001234:	f002 fd20 	bl	8003c78 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001238:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 800123a:	4a2b      	ldr	r2, [pc, #172]	@ (80012e8 <HAL_DCMI_MspInit+0x220>)
 800123c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800123e:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 8001240:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001244:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b27      	ldr	r3, [pc, #156]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 8001254:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001258:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800125a:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 800125c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001260:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001262:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 8001264:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001268:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 800126c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001270:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 8001274:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001278:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 800127c:	2204      	movs	r2, #4
 800127e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 8001282:	2203      	movs	r2, #3
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001292:	4814      	ldr	r0, [pc, #80]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 8001294:	f000 ff66 	bl	8002164 <HAL_DMA_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 800129e:	f7ff fc85 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 80012a6:	649a      	str	r2, [r3, #72]	@ 0x48
 80012a8:	4a0e      	ldr	r2, [pc, #56]	@ (80012e4 <HAL_DCMI_MspInit+0x21c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	204e      	movs	r0, #78	@ 0x4e
 80012b4:	f000 fc33 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80012b8:	204e      	movs	r0, #78	@ 0x4e
 80012ba:	f000 fc4c 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	3738      	adds	r7, #56	@ 0x38
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	50050000 	.word	0x50050000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021800 	.word	0x40021800
 80012e4:	200000c8 	.word	0x200000c8
 80012e8:	40026428 	.word	0x40026428

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	@ (8001370 <HAL_I2C_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12b      	bne.n	8001366 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a17      	ldr	r2, [pc, #92]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800132a:	2303      	movs	r3, #3
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132e:	2312      	movs	r3, #18
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	2301      	movs	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800133a:	2304      	movs	r3, #4
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <HAL_I2C_MspInit+0x8c>)
 8001346:	f002 fc97 	bl	8003c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001354:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	@ 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40005800 	.word	0x40005800
 8001374:	40023800 	.word	0x40023800
 8001378:	40021400 	.word	0x40021400

0800137c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10d      	bne.n	80013aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_TIM_PWM_MspInit+0x40>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <HAL_TIM_PWM_MspInit+0x40>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <HAL_TIM_PWM_MspInit+0x40>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <HAL_TIM_Base_MspInit+0x48>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d115      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	4a0c      	ldr	r2, [pc, #48]	@ (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013dc:	f043 0310 	orr.w	r3, r3, #16
 80013e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2036      	movs	r0, #54	@ 0x36
 80013f4:	f000 fb93 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f8:	2036      	movs	r0, #54	@ 0x36
 80013fa:	f000 fbac 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40001000 	.word	0x40001000
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <HAL_TIM_MspPostInit+0x68>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d11e      	bne.n	8001470 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_TIM_MspPostInit+0x6c>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800144e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	@ (8001480 <HAL_TIM_MspPostInit+0x70>)
 800146c:	f002 fc04 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40010000 	.word	0x40010000
 800147c:	40023800 	.word	0x40023800
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a39      	ldr	r2, [pc, #228]	@ (8001588 <HAL_UART_MspInit+0x104>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d16b      	bne.n	800157e <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b38      	ldr	r3, [pc, #224]	@ (800158c <HAL_UART_MspInit+0x108>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a37      	ldr	r2, [pc, #220]	@ (800158c <HAL_UART_MspInit+0x108>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b35      	ldr	r3, [pc, #212]	@ (800158c <HAL_UART_MspInit+0x108>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <HAL_UART_MspInit+0x108>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a30      	ldr	r2, [pc, #192]	@ (800158c <HAL_UART_MspInit+0x108>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <HAL_UART_MspInit+0x108>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f0:	2307      	movs	r3, #7
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4825      	ldr	r0, [pc, #148]	@ (8001590 <HAL_UART_MspInit+0x10c>)
 80014fc:	f002 fbbc 	bl	8003c78 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001500:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001502:	4a25      	ldr	r2, [pc, #148]	@ (8001598 <HAL_UART_MspInit+0x114>)
 8001504:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001508:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800150c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001510:	2240      	movs	r2, #64	@ 0x40
 8001512:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001514:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800151a:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <HAL_UART_MspInit+0x110>)
 800151c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001520:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <HAL_UART_MspInit+0x110>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <HAL_UART_MspInit+0x110>)
 800153c:	2204      	movs	r2, #4
 800153e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001542:	2203      	movs	r2, #3
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001546:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001548:	2200      	movs	r2, #0
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_UART_MspInit+0x110>)
 800154e:	2200      	movs	r2, #0
 8001550:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001552:	4810      	ldr	r0, [pc, #64]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001554:	f000 fe06 	bl	8002164 <HAL_DMA_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800155e:	f7ff fb25 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_UART_MspInit+0x110>)
 8001566:	635a      	str	r2, [r3, #52]	@ 0x34
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_UART_MspInit+0x110>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2027      	movs	r0, #39	@ 0x27
 8001574:	f000 fad3 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001578:	2027      	movs	r0, #39	@ 0x27
 800157a:	f000 faec 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40004800 	.word	0x40004800
 800158c:	40023800 	.word	0x40023800
 8001590:	40020c00 	.word	0x40020c00
 8001594:	20000250 	.word	0x20000250
 8001598:	40026058 	.word	0x40026058

0800159c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0a0      	sub	sp, #128	@ 0x80
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	225c      	movs	r2, #92	@ 0x5c
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f007 f939 	bl	8008834 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015ca:	d14e      	bne.n	800166a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80015d2:	2300      	movs	r3, #0
 80015d4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 ff48 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80015e6:	f7ff fae1 	bl	8000bac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_PCD_MspInit+0xd8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a20      	ldr	r2, [pc, #128]	@ (8001674 <HAL_PCD_MspInit+0xd8>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_PCD_MspInit+0xd8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001606:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800160a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001618:	230a      	movs	r3, #10
 800161a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001620:	4619      	mov	r1, r3
 8001622:	4815      	ldr	r0, [pc, #84]	@ (8001678 <HAL_PCD_MspInit+0xdc>)
 8001624:	f002 fb28 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001628:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800162c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162e:	2300      	movs	r3, #0
 8001630:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800163a:	4619      	mov	r1, r3
 800163c:	480e      	ldr	r0, [pc, #56]	@ (8001678 <HAL_PCD_MspInit+0xdc>)
 800163e:	f002 fb1b 	bl	8003c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <HAL_PCD_MspInit+0xd8>)
 8001644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001646:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_PCD_MspInit+0xd8>)
 8001648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800164c:	6353      	str	r3, [r2, #52]	@ 0x34
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_PCD_MspInit+0xd8>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <HAL_PCD_MspInit+0xd8>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165c:	6453      	str	r3, [r2, #68]	@ 0x44
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_PCD_MspInit+0xd8>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3780      	adds	r7, #128	@ 0x80
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <NMI_Handler+0x4>

08001684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <MemManage_Handler+0x4>

08001694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d2:	f000 f905 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <DMA1_Stream3_IRQHandler+0x10>)
 80016e2:	f000 fed7 	bl	8002494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000250 	.word	0x20000250

080016f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <USART3_IRQHandler+0x10>)
 80016f6:	f005 fe4d 	bl	8007394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000020c 	.word	0x2000020c

08001704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001708:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800170c:	f002 fc94 	bl	8004038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <TIM6_DAC_IRQHandler+0x10>)
 800171a:	f005 f807 	bl	800672c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200001c4 	.word	0x200001c4

08001728 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <DMA2_Stream1_IRQHandler+0x14>)
 800172e:	f000 feb1 	bl	8002494 <HAL_DMA_IRQHandler>
  dma_flag = 1;
 8001732:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <DMA2_Stream1_IRQHandler+0x18>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000c8 	.word	0x200000c8
 8001740:	2000e8bc 	.word	0x2000e8bc

08001744 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <DCMI_IRQHandler+0x10>)
 800174a:	f000 fb3f 	bl	8001dcc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000078 	.word	0x20000078

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	@ (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f007 f85c 	bl	8008844 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20020000 	.word	0x20020000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	2000e8c0 	.word	0x2000e8c0
 80017c0:	2000ea10 	.word	0x2000ea10

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	@ (8001824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	@ (8001828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	@ (8001834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001812:	f7ff ffd7 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f007 f81b 	bl	8008850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff faf7 	bl	8000e0c <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800182c:	080094e0 	.word	0x080094e0
  ldr r2, =_sbss
 8001830:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001834:	2000ea10 	.word	0x2000ea10

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f94f 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fc02 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f967 	bl	8001b72 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f92f 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	2000e8c4 	.word	0x2000e8c4

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000e8c4 	.word	0x2000e8c4

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	@ (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	@ (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	@ (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff29 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff3e 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff31 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_DCMI_Start_DMA+0x20>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e086      	b.n	8001cba <HAL_DCMI_Start_DMA+0x12e>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bca:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0202 	bic.w	r2, r2, #2
 8001bda:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6819      	ldr	r1, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf0:	4a34      	ldr	r2, [pc, #208]	@ (8001cc4 <HAL_DCMI_Start_DMA+0x138>)
 8001bf2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf8:	4a33      	ldr	r2, [pc, #204]	@ (8001cc8 <HAL_DCMI_Start_DMA+0x13c>)
 8001bfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c00:	2200      	movs	r2, #0
 8001c02:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c16:	d20a      	bcs.n	8001c2e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3328      	adds	r3, #40	@ 0x28
 8001c22:	4619      	mov	r1, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	f000 fb4a 	bl	80022c0 <HAL_DMA_Start_IT>
 8001c2c:	e038      	b.n	8001ca0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c32:	4a24      	ldr	r2, [pc, #144]	@ (8001cc4 <HAL_DCMI_Start_DMA+0x138>)
 8001c34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001c48:	e009      	b.n	8001c5e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4e:	085a      	lsrs	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c58:	005a      	lsls	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c66:	d2f0      	bcs.n	8001c4a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6c:	1e9a      	subs	r2, r3, #2
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3328      	adds	r3, #40	@ 0x28
 8001c90:	4619      	mov	r1, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	f000 fe64 	bl	8002968 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08001f19 	.word	0x08001f19
 8001cc8:	08002043 	.word	0x08002043

08001ccc <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_DCMI_Suspend+0xa0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	4a25      	ldr	r2, [pc, #148]	@ (8001d70 <HAL_DCMI_Suspend+0xa4>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_DCMI_Suspend+0x2a>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e033      	b.n	8001d5e <HAL_DCMI_Suspend+0x92>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d124      	bne.n	8001d54 <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      if (count-- == 0U)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	60ba      	str	r2, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <HAL_DCMI_Suspend+0x7a>
      {        
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        status = HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	73fb      	strb	r3, [r7, #15]
        break;
 8001d44:	e006      	b.n	8001d54 <HAL_DCMI_Suspend+0x88>
      }
    }
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e6      	bne.n	8001d22 <HAL_DCMI_Suspend+0x56>
  }    
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Return function status */
  return status;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	92492493 	.word	0x92492493

08001d74 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef* hdcmi)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_DCMI_Resume+0x16>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e01a      	b.n	8001dc0 <HAL_DCMI_Resume+0x4c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d10b      	bne.n	8001db6 <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  } 
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2204      	movs	r2, #4
 8001dec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e06:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec4 <HAL_DCMI_IRQHandler+0xf8>)
 8001e08:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fb1e 	bl	8002450 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d016      	beq.n	8001e4c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2202      	movs	r2, #2
 8001e24:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <HAL_DCMI_IRQHandler+0xf8>)
 8001e40:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fb02 	bl	8002450 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f83c 	bl	8001edc <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2208      	movs	r2, #8
 8001e74:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f83a 	bl	8001ef0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d019      	beq.n	8001eba <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d107      	bne.n	8001ea4 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 021e 	bic.w	r2, r2, #30
 8001ea2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f825 	bl	8001f04 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	08002043 	.word	0x08002043

08001ec8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f28:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d043      	beq.n	8001fba <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f3e:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d118      	bne.n	8001f7e <DCMI_DMAXferCplt+0x66>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d015      	beq.n	8001f7e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f64:	00da      	lsls	r2, r3, #3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f001 fe43 	bl	8003bf8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f7c:	e044      	b.n	8002008 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d13c      	bne.n	8002008 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa0:	00da      	lsls	r2, r3, #3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f001 fe25 	bl	8003bf8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb2:	1e5a      	subs	r2, r3, #1
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fb8:	e026      	b.n	8002008 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	e017      	b.n	8002008 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fec:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	0099      	lsls	r1, r3, #2
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	440a      	add	r2, r1
 8001ffe:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	429a      	cmp	r2, r3
 8002012:	d112      	bne.n	800203a <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d103      	bne.n	800203a <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800204e:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002056:	2b02      	cmp	r3, #2
 8002058:	d003      	beq.n	8002062 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff ff30 	bl	8001ec8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e069      	b.n	8002156 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff f816 	bl	80010c8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff f813 	bl	80010c8 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2202      	movs	r2, #2
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <HAL_DCMI_Init+0xf0>)
 80020b6:	400b      	ands	r3, r1
 80020b8:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80020ce:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80020da:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80020e6:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 80020f2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80020fe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b10      	cmp	r3, #16
 800210e:	d112      	bne.n	8002136 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7f1b      	ldrb	r3, [r3, #28]
 8002114:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7f5b      	ldrb	r3, [r3, #29]
 800211a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800211c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7f9b      	ldrb	r3, [r3, #30]
 8002122:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002124:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7fdb      	ldrb	r3, [r3, #31]
 800212c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002132:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002134:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 021e 	orr.w	r2, r2, #30
 8002144:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	ffe0f007 	.word	0xffe0f007

08002164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fbca 	bl	8001908 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e099      	b.n	80022b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	e00f      	b.n	80021c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7ff fbb1 	bl	8001908 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d908      	bls.n	80021c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e078      	b.n	80022b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e8      	bne.n	80021a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4b38      	ldr	r3, [pc, #224]	@ (80022bc <HAL_DMA_Init+0x158>)
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	2b04      	cmp	r3, #4
 800221a:	d107      	bne.n	800222c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	4313      	orrs	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	2b04      	cmp	r3, #4
 8002254:	d117      	bne.n	8002286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fb01 	bl	8002870 <DMA_CheckFifoParam>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2240      	movs	r2, #64	@ 0x40
 8002278:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002282:	2301      	movs	r3, #1
 8002284:	e016      	b.n	80022b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fab8 	bl	8002804 <DMA_CalcBaseAndBitshift>
 8002294:	4603      	mov	r3, r0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229c:	223f      	movs	r2, #63	@ 0x3f
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	f010803f 	.word	0xf010803f

080022c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Start_IT+0x26>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e040      	b.n	8002368 <HAL_DMA_Start_IT+0xa8>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d12f      	bne.n	800235a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fa4a 	bl	80027a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002318:	223f      	movs	r2, #63	@ 0x3f
 800231a:	409a      	lsls	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0216 	orr.w	r2, r2, #22
 800232e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0208 	orr.w	r2, r2, #8
 8002346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e005      	b.n	8002366 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002362:	2302      	movs	r3, #2
 8002364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800237e:	f7ff fac3 	bl	8001908 <HAL_GetTick>
 8002382:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d008      	beq.n	80023a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2280      	movs	r2, #128	@ 0x80
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e052      	b.n	8002448 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0216 	bic.w	r2, r2, #22
 80023b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_DMA_Abort+0x62>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0208 	bic.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f2:	e013      	b.n	800241c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023f4:	f7ff fa88 	bl	8001908 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d90c      	bls.n	800241c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2203      	movs	r2, #3
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e015      	b.n	8002448 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e4      	bne.n	80023f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	223f      	movs	r2, #63	@ 0x3f
 8002430:	409a      	lsls	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d004      	beq.n	800246e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00c      	b.n	8002488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2205      	movs	r2, #5
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024a0:	4b8e      	ldr	r3, [pc, #568]	@ (80026dc <HAL_DMA_IRQHandler+0x248>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a8e      	ldr	r2, [pc, #568]	@ (80026e0 <HAL_DMA_IRQHandler+0x24c>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0a9b      	lsrs	r3, r3, #10
 80024ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	2208      	movs	r2, #8
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01a      	beq.n	8002500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ec:	2208      	movs	r2, #8
 80024ee:	409a      	lsls	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d012      	beq.n	8002536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002522:	2201      	movs	r2, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	2204      	movs	r2, #4
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d012      	beq.n	800256c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002558:	2204      	movs	r2, #4
 800255a:	409a      	lsls	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	2210      	movs	r2, #16
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d043      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03c      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	2210      	movs	r2, #16
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d018      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d024      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
 80025c2:	e01f      	b.n	8002604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e016      	b.n	8002604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0208 	bic.w	r2, r2, #8
 80025f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002608:	2220      	movs	r2, #32
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 808f 	beq.w	8002734 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8087 	beq.w	8002734 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	2220      	movs	r2, #32
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b05      	cmp	r3, #5
 800263c:	d136      	bne.n	80026ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0216 	bic.w	r2, r2, #22
 800264c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800265c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <HAL_DMA_IRQHandler+0x1da>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0208 	bic.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002682:	223f      	movs	r2, #63	@ 0x3f
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d07e      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
        }
        return;
 80026aa:	e079      	b.n	80027a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01d      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d031      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e02c      	b.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000
 80026e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d023      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e01e      	b.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10f      	bne.n	8002724 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0210 	bic.w	r2, r2, #16
 8002712:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d022      	beq.n	800278e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2205      	movs	r2, #5
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3301      	adds	r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	d307      	bcc.n	800277c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f2      	bne.n	8002760 <HAL_DMA_IRQHandler+0x2cc>
 800277a:	e000      	b.n	800277e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800277c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
 800279e:	e000      	b.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027a0:	bf00      	nop
    }
  }
}
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b40      	cmp	r3, #64	@ 0x40
 80027d4:	d108      	bne.n	80027e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027e6:	e007      	b.n	80027f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	3b10      	subs	r3, #16
 8002814:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <DMA_CalcBaseAndBitshift+0x64>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800281e:	4a13      	ldr	r2, [pc, #76]	@ (800286c <DMA_CalcBaseAndBitshift+0x68>)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d909      	bls.n	8002846 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800283a:	f023 0303 	bic.w	r3, r3, #3
 800283e:	1d1a      	adds	r2, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	659a      	str	r2, [r3, #88]	@ 0x58
 8002844:	e007      	b.n	8002856 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	aaaaaaab 	.word	0xaaaaaaab
 800286c:	08009494 	.word	0x08009494

08002870 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11f      	bne.n	80028ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d856      	bhi.n	800293e <DMA_CheckFifoParam+0xce>
 8002890:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <DMA_CheckFifoParam+0x28>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028a9 	.word	0x080028a9
 800289c:	080028bb 	.word	0x080028bb
 80028a0:	080028a9 	.word	0x080028a9
 80028a4:	0800293f 	.word	0x0800293f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d046      	beq.n	8002942 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e043      	b.n	8002942 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028c2:	d140      	bne.n	8002946 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c8:	e03d      	b.n	8002946 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028d2:	d121      	bne.n	8002918 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d837      	bhi.n	800294a <DMA_CheckFifoParam+0xda>
 80028da:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <DMA_CheckFifoParam+0x70>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	080028f7 	.word	0x080028f7
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002909 	.word	0x08002909
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e030      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d025      	beq.n	800294e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002906:	e022      	b.n	800294e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002910:	d11f      	bne.n	8002952 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002916:	e01c      	b.n	8002952 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d903      	bls.n	8002926 <DMA_CheckFifoParam+0xb6>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d003      	beq.n	800292c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002924:	e018      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      break;
 800292a:	e015      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e00b      	b.n	8002956 <DMA_CheckFifoParam+0xe6>
      break;
 800293e:	bf00      	nop
 8002940:	e00a      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002942:	bf00      	nop
 8002944:	e008      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
 8002948:	e006      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
 800294c:	e004      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 800294e:	bf00      	nop
 8002950:	e002      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;   
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
    }
  } 
  
  return status; 
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b80      	cmp	r3, #128	@ 0x80
 8002980:	d106      	bne.n	8002990 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f001 b911 	b.w	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f001 b8ff 	b.w	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80029be:	2302      	movs	r3, #2
 80029c0:	f001 b8f7 	b.w	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f041 80e5 	bne.w	8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2202      	movs	r2, #2
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80029f6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f001 f910 	bl	8003c2c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b8d      	ldr	r3, [pc, #564]	@ (8002c48 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d960      	bls.n	8002ada <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a8b      	ldr	r2, [pc, #556]	@ (8002c4c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d057      	beq.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a8a      	ldr	r2, [pc, #552]	@ (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d050      	beq.n	8002ace <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a88      	ldr	r2, [pc, #544]	@ (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d049      	beq.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a87      	ldr	r2, [pc, #540]	@ (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d042      	beq.n	8002ac6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a85      	ldr	r2, [pc, #532]	@ (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03a      	beq.n	8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a84      	ldr	r2, [pc, #528]	@ (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d032      	beq.n	8002aba <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a82      	ldr	r2, [pc, #520]	@ (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02a      	beq.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a81      	ldr	r2, [pc, #516]	@ (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01a      	beq.n	8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7e      	ldr	r2, [pc, #504]	@ (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d012      	beq.n	8002aa2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7c      	ldr	r2, [pc, #496]	@ (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00a      	beq.n	8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7b      	ldr	r2, [pc, #492]	@ (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d102      	bne.n	8002a96 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002a90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a94:	e01e      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002a96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002a9a:	e01b      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002a9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002aa0:	e018      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002aa2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002aa6:	e015      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002aa8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002aac:	e012      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002aae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ab2:	e00f      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ab4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ab8:	e00c      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002aba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002abe:	e009      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ac0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ac4:	e006      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e004      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002aca:	2320      	movs	r3, #32
 8002acc:	e002      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e000      	b.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	4a69      	ldr	r2, [pc, #420]	@ (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002ad6:	60d3      	str	r3, [r2, #12]
 8002ad8:	e14f      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b67      	ldr	r3, [pc, #412]	@ (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d960      	bls.n	8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d057      	beq.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a56      	ldr	r2, [pc, #344]	@ (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d050      	beq.n	8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a55      	ldr	r2, [pc, #340]	@ (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d049      	beq.n	8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a53      	ldr	r2, [pc, #332]	@ (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d042      	beq.n	8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a52      	ldr	r2, [pc, #328]	@ (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d03a      	beq.n	8002b8e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a50      	ldr	r2, [pc, #320]	@ (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d032      	beq.n	8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a4f      	ldr	r2, [pc, #316]	@ (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d02a      	beq.n	8002b82 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a4d      	ldr	r2, [pc, #308]	@ (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d022      	beq.n	8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d01a      	beq.n	8002b76 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d012      	beq.n	8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a49      	ldr	r2, [pc, #292]	@ (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00a      	beq.n	8002b6a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a47      	ldr	r2, [pc, #284]	@ (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d102      	bne.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002b5e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b62:	e01e      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002b68:	e01b      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b6a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b6e:	e018      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b74:	e015      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b76:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b7a:	e012      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b80:	e00f      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b86:	e00c      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b8c:	e009      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b92:	e006      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b94:	2320      	movs	r3, #32
 8002b96:	e004      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e002      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e000      	b.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	4a36      	ldr	r2, [pc, #216]	@ (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002ba4:	6093      	str	r3, [r2, #8]
 8002ba6:	e0e8      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	f240 8082 	bls.w	8002cba <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a24      	ldr	r2, [pc, #144]	@ (8002c4c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d078      	beq.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a22      	ldr	r2, [pc, #136]	@ (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d071      	beq.n	8002cae <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a21      	ldr	r2, [pc, #132]	@ (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d06a      	beq.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d063      	beq.n	8002ca6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d05b      	beq.n	8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d053      	beq.n	8002c9a <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04b      	beq.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	@ (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d043      	beq.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a18      	ldr	r2, [pc, #96]	@ (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a16      	ldr	r2, [pc, #88]	@ (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d012      	beq.n	8002c40 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a15      	ldr	r2, [pc, #84]	@ (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00a      	beq.n	8002c3a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a13      	ldr	r2, [pc, #76]	@ (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d102      	bne.n	8002c34 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002c2e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c32:	e03f      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002c34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002c38:	e03c      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002c3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c3e:	e039      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002c40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c44:	e036      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002c46:	bf00      	nop
 8002c48:	40026458 	.word	0x40026458
 8002c4c:	40026010 	.word	0x40026010
 8002c50:	40026410 	.word	0x40026410
 8002c54:	40026070 	.word	0x40026070
 8002c58:	40026470 	.word	0x40026470
 8002c5c:	40026028 	.word	0x40026028
 8002c60:	40026428 	.word	0x40026428
 8002c64:	40026088 	.word	0x40026088
 8002c68:	40026488 	.word	0x40026488
 8002c6c:	40026040 	.word	0x40026040
 8002c70:	40026440 	.word	0x40026440
 8002c74:	400260a0 	.word	0x400260a0
 8002c78:	400264a0 	.word	0x400264a0
 8002c7c:	40026400 	.word	0x40026400
 8002c80:	400260b8 	.word	0x400260b8
 8002c84:	40026058 	.word	0x40026058
 8002c88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c8c:	e012      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002c8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c92:	e00f      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002c94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c98:	e00c      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002c9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c9e:	e009      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ca0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ca4:	e006      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e004      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002caa:	2320      	movs	r3, #32
 8002cac:	e002      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e000      	b.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	4a8c      	ldr	r2, [pc, #560]	@ (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002cb6:	60d3      	str	r3, [r2, #12]
 8002cb8:	e05f      	b.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a8b      	ldr	r2, [pc, #556]	@ (8002eec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d057      	beq.n	8002d74 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a89      	ldr	r2, [pc, #548]	@ (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d050      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a88      	ldr	r2, [pc, #544]	@ (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d049      	beq.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a86      	ldr	r2, [pc, #536]	@ (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d042      	beq.n	8002d68 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a85      	ldr	r2, [pc, #532]	@ (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d03a      	beq.n	8002d62 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a83      	ldr	r2, [pc, #524]	@ (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d032      	beq.n	8002d5c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a82      	ldr	r2, [pc, #520]	@ (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d02a      	beq.n	8002d56 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a80      	ldr	r2, [pc, #512]	@ (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d022      	beq.n	8002d50 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7f      	ldr	r2, [pc, #508]	@ (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d01a      	beq.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a7d      	ldr	r2, [pc, #500]	@ (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d012      	beq.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7c      	ldr	r2, [pc, #496]	@ (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00a      	beq.n	8002d3e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d102      	bne.n	8002d38 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002d32:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d36:	e01e      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d3c:	e01b      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d3e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d42:	e018      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d48:	e015      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d4e:	e012      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d54:	e00f      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d5a:	e00c      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d60:	e009      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d66:	e006      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e004      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e002      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d70:	2320      	movs	r3, #32
 8002d72:	e000      	b.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002d74:	2320      	movs	r3, #32
 8002d76:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002d78:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b66      	ldr	r3, [pc, #408]	@ (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d960      	bls.n	8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a58      	ldr	r2, [pc, #352]	@ (8002eec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d057      	beq.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a56      	ldr	r2, [pc, #344]	@ (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d050      	beq.n	8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a55      	ldr	r2, [pc, #340]	@ (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d049      	beq.n	8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a53      	ldr	r2, [pc, #332]	@ (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d042      	beq.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a52      	ldr	r2, [pc, #328]	@ (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d03a      	beq.n	8002e2e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a50      	ldr	r2, [pc, #320]	@ (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d032      	beq.n	8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a4f      	ldr	r2, [pc, #316]	@ (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d02a      	beq.n	8002e22 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d022      	beq.n	8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d01a      	beq.n	8002e16 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a4a      	ldr	r2, [pc, #296]	@ (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d012      	beq.n	8002e10 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a49      	ldr	r2, [pc, #292]	@ (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00a      	beq.n	8002e0a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a47      	ldr	r2, [pc, #284]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d102      	bne.n	8002e04 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002dfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e02:	e01e      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e04:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e08:	e01b      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e0e:	e018      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e14:	e015      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e16:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e1a:	e012      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e20:	e00f      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e26:	e00c      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e2c:	e009      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e32:	e006      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e34:	2310      	movs	r3, #16
 8002e36:	e004      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	e002      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	e000      	b.n	8002e42 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002e40:	2310      	movs	r3, #16
 8002e42:	4a37      	ldr	r2, [pc, #220]	@ (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002e44:	60d3      	str	r3, [r2, #12]
 8002e46:	e14f      	b.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b35      	ldr	r3, [pc, #212]	@ (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	f240 8082 	bls.w	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a24      	ldr	r2, [pc, #144]	@ (8002eec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d078      	beq.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a22      	ldr	r2, [pc, #136]	@ (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d071      	beq.n	8002f4e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a21      	ldr	r2, [pc, #132]	@ (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d06a      	beq.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d063      	beq.n	8002f46 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1e      	ldr	r2, [pc, #120]	@ (8002efc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d05b      	beq.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d053      	beq.n	8002f3a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1b      	ldr	r2, [pc, #108]	@ (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d04b      	beq.n	8002f34 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a19      	ldr	r2, [pc, #100]	@ (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d043      	beq.n	8002f2e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a18      	ldr	r2, [pc, #96]	@ (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d03b      	beq.n	8002f28 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a16      	ldr	r2, [pc, #88]	@ (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d012      	beq.n	8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a15      	ldr	r2, [pc, #84]	@ (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00a      	beq.n	8002eda <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	@ (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d102      	bne.n	8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002ece:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ed2:	e03f      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002ed4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ed8:	e03c      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002eda:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ede:	e039      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002ee0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ee4:	e036      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002ee6:	bf00      	nop
 8002ee8:	40026000 	.word	0x40026000
 8002eec:	40026010 	.word	0x40026010
 8002ef0:	40026410 	.word	0x40026410
 8002ef4:	40026070 	.word	0x40026070
 8002ef8:	40026470 	.word	0x40026470
 8002efc:	40026028 	.word	0x40026028
 8002f00:	40026428 	.word	0x40026428
 8002f04:	40026088 	.word	0x40026088
 8002f08:	40026488 	.word	0x40026488
 8002f0c:	40026040 	.word	0x40026040
 8002f10:	40026440 	.word	0x40026440
 8002f14:	400260a0 	.word	0x400260a0
 8002f18:	400264a0 	.word	0x400264a0
 8002f1c:	40026458 	.word	0x40026458
 8002f20:	40026400 	.word	0x40026400
 8002f24:	400260b8 	.word	0x400260b8
 8002f28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f2c:	e012      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f32:	e00f      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f38:	e00c      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f3e:	e009      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f44:	e006      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002f46:	2310      	movs	r3, #16
 8002f48:	e004      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	e002      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002f4e:	2310      	movs	r3, #16
 8002f50:	e000      	b.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002f52:	2310      	movs	r3, #16
 8002f54:	4a8c      	ldr	r2, [pc, #560]	@ (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002f56:	6093      	str	r3, [r2, #8]
 8002f58:	e0c6      	b.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b8a      	ldr	r3, [pc, #552]	@ (800318c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d960      	bls.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a89      	ldr	r2, [pc, #548]	@ (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d057      	beq.n	8003020 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a87      	ldr	r2, [pc, #540]	@ (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d050      	beq.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a86      	ldr	r2, [pc, #536]	@ (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d049      	beq.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a84      	ldr	r2, [pc, #528]	@ (800319c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d042      	beq.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a83      	ldr	r2, [pc, #524]	@ (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d03a      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a81      	ldr	r2, [pc, #516]	@ (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d032      	beq.n	8003008 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a80      	ldr	r2, [pc, #512]	@ (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d02a      	beq.n	8003002 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a7e      	ldr	r2, [pc, #504]	@ (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7d      	ldr	r2, [pc, #500]	@ (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01a      	beq.n	8002ff6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a7b      	ldr	r2, [pc, #492]	@ (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d012      	beq.n	8002ff0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7a      	ldr	r2, [pc, #488]	@ (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00a      	beq.n	8002fea <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a78      	ldr	r2, [pc, #480]	@ (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d102      	bne.n	8002fe4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002fde:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002fe2:	e01e      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002fe4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002fe8:	e01b      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002fea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002fee:	e018      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ff0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ff4:	e015      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ff6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ffa:	e012      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003000:	e00f      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003006:	e00c      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800300c:	e009      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800300e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003012:	e006      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003014:	2310      	movs	r3, #16
 8003016:	e004      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003018:	2310      	movs	r3, #16
 800301a:	e002      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800301c:	2310      	movs	r3, #16
 800301e:	e000      	b.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003020:	2310      	movs	r3, #16
 8003022:	4a67      	ldr	r2, [pc, #412]	@ (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003024:	60d3      	str	r3, [r2, #12]
 8003026:	e05f      	b.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a58      	ldr	r2, [pc, #352]	@ (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d057      	beq.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a57      	ldr	r2, [pc, #348]	@ (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d050      	beq.n	80030de <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a55      	ldr	r2, [pc, #340]	@ (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d049      	beq.n	80030da <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a54      	ldr	r2, [pc, #336]	@ (800319c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d042      	beq.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a52      	ldr	r2, [pc, #328]	@ (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03a      	beq.n	80030d0 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a51      	ldr	r2, [pc, #324]	@ (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d032      	beq.n	80030ca <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4f      	ldr	r2, [pc, #316]	@ (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d02a      	beq.n	80030c4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4e      	ldr	r2, [pc, #312]	@ (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a4c      	ldr	r2, [pc, #304]	@ (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01a      	beq.n	80030b8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4b      	ldr	r2, [pc, #300]	@ (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d012      	beq.n	80030b2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a49      	ldr	r2, [pc, #292]	@ (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00a      	beq.n	80030ac <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a48      	ldr	r2, [pc, #288]	@ (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d102      	bne.n	80030a6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80030a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030a4:	e01e      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80030aa:	e01b      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030b0:	e018      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030b6:	e015      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030bc:	e012      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030c2:	e00f      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030c8:	e00c      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030ce:	e009      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030d4:	e006      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030d6:	2310      	movs	r3, #16
 80030d8:	e004      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030da:	2310      	movs	r3, #16
 80030dc:	e002      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030de:	2310      	movs	r3, #16
 80030e0:	e000      	b.n	80030e4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80030e2:	2310      	movs	r3, #16
 80030e4:	4a36      	ldr	r2, [pc, #216]	@ (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80030e6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b35      	ldr	r3, [pc, #212]	@ (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80030f0:	429a      	cmp	r2, r3
 80030f2:	f240 8082 	bls.w	80031fa <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a25      	ldr	r2, [pc, #148]	@ (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d078      	beq.n	80031f2 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a23      	ldr	r2, [pc, #140]	@ (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d071      	beq.n	80031ee <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a22      	ldr	r2, [pc, #136]	@ (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d06a      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a20      	ldr	r2, [pc, #128]	@ (800319c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d063      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1f      	ldr	r2, [pc, #124]	@ (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d05b      	beq.n	80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d053      	beq.n	80031da <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1c      	ldr	r2, [pc, #112]	@ (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d04b      	beq.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1a      	ldr	r2, [pc, #104]	@ (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d043      	beq.n	80031ce <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d03b      	beq.n	80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d012      	beq.n	8003180 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a16      	ldr	r2, [pc, #88]	@ (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00a      	beq.n	800317a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a14      	ldr	r2, [pc, #80]	@ (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d102      	bne.n	8003174 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800316e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003172:	e03f      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003174:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003178:	e03c      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800317a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800317e:	e039      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003180:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003184:	e036      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003186:	bf00      	nop
 8003188:	40026400 	.word	0x40026400
 800318c:	40026058 	.word	0x40026058
 8003190:	40026010 	.word	0x40026010
 8003194:	40026410 	.word	0x40026410
 8003198:	40026070 	.word	0x40026070
 800319c:	40026470 	.word	0x40026470
 80031a0:	40026028 	.word	0x40026028
 80031a4:	40026428 	.word	0x40026428
 80031a8:	40026088 	.word	0x40026088
 80031ac:	40026488 	.word	0x40026488
 80031b0:	40026040 	.word	0x40026040
 80031b4:	40026440 	.word	0x40026440
 80031b8:	400260a0 	.word	0x400260a0
 80031bc:	400264a0 	.word	0x400264a0
 80031c0:	40026000 	.word	0x40026000
 80031c4:	40026458 	.word	0x40026458
 80031c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80031cc:	e012      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80031ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031d2:	e00f      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80031d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031d8:	e00c      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80031da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031de:	e009      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80031e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031e4:	e006      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80031e6:	2308      	movs	r3, #8
 80031e8:	e004      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80031ea:	2308      	movs	r3, #8
 80031ec:	e002      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80031ee:	2308      	movs	r3, #8
 80031f0:	e000      	b.n	80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80031f2:	2308      	movs	r3, #8
 80031f4:	4a8c      	ldr	r2, [pc, #560]	@ (8003428 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80031f6:	60d3      	str	r3, [r2, #12]
 80031f8:	e14e      	b.n	8003498 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	4b8a      	ldr	r3, [pc, #552]	@ (800342c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003202:	429a      	cmp	r2, r3
 8003204:	d960      	bls.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a89      	ldr	r2, [pc, #548]	@ (8003430 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d057      	beq.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a87      	ldr	r2, [pc, #540]	@ (8003434 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d050      	beq.n	80032bc <HAL_DMAEx_MultiBufferStart_IT+0x954>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a86      	ldr	r2, [pc, #536]	@ (8003438 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d049      	beq.n	80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a84      	ldr	r2, [pc, #528]	@ (800343c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d042      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a83      	ldr	r2, [pc, #524]	@ (8003440 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d03a      	beq.n	80032ae <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a81      	ldr	r2, [pc, #516]	@ (8003444 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d032      	beq.n	80032a8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a80      	ldr	r2, [pc, #512]	@ (8003448 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d02a      	beq.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a7e      	ldr	r2, [pc, #504]	@ (800344c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d022      	beq.n	800329c <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7d      	ldr	r2, [pc, #500]	@ (8003450 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d01a      	beq.n	8003296 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7b      	ldr	r2, [pc, #492]	@ (8003454 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d012      	beq.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7a      	ldr	r2, [pc, #488]	@ (8003458 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00a      	beq.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a78      	ldr	r2, [pc, #480]	@ (800345c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d102      	bne.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800327e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003282:	e01e      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003284:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003288:	e01b      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800328a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800328e:	e018      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003290:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003294:	e015      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003296:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800329a:	e012      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800329c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a0:	e00f      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a6:	e00c      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032ac:	e009      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032b2:	e006      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032b4:	2308      	movs	r3, #8
 80032b6:	e004      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032b8:	2308      	movs	r3, #8
 80032ba:	e002      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032bc:	2308      	movs	r3, #8
 80032be:	e000      	b.n	80032c2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80032c0:	2308      	movs	r3, #8
 80032c2:	4a59      	ldr	r2, [pc, #356]	@ (8003428 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80032c4:	6093      	str	r3, [r2, #8]
 80032c6:	e0e7      	b.n	8003498 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b64      	ldr	r3, [pc, #400]	@ (8003460 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d960      	bls.n	8003396 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a55      	ldr	r2, [pc, #340]	@ (8003430 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d057      	beq.n	800338e <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a54      	ldr	r2, [pc, #336]	@ (8003434 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d050      	beq.n	800338a <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a52      	ldr	r2, [pc, #328]	@ (8003438 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d049      	beq.n	8003386 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a51      	ldr	r2, [pc, #324]	@ (800343c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d042      	beq.n	8003382 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4f      	ldr	r2, [pc, #316]	@ (8003440 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03a      	beq.n	800337c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a4e      	ldr	r2, [pc, #312]	@ (8003444 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d032      	beq.n	8003376 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a4c      	ldr	r2, [pc, #304]	@ (8003448 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02a      	beq.n	8003370 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a4b      	ldr	r2, [pc, #300]	@ (800344c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a49      	ldr	r2, [pc, #292]	@ (8003450 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01a      	beq.n	8003364 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a48      	ldr	r2, [pc, #288]	@ (8003454 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d012      	beq.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a46      	ldr	r2, [pc, #280]	@ (8003458 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00a      	beq.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a45      	ldr	r2, [pc, #276]	@ (800345c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d102      	bne.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 800334c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003350:	e01e      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003352:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003356:	e01b      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003358:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800335c:	e018      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800335e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003362:	e015      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003364:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003368:	e012      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800336a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800336e:	e00f      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003374:	e00c      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800337a:	e009      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800337c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003380:	e006      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003382:	2308      	movs	r3, #8
 8003384:	e004      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003386:	2308      	movs	r3, #8
 8003388:	e002      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800338a:	2308      	movs	r3, #8
 800338c:	e000      	b.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800338e:	2308      	movs	r3, #8
 8003390:	4a34      	ldr	r2, [pc, #208]	@ (8003464 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003392:	60d3      	str	r3, [r2, #12]
 8003394:	e080      	b.n	8003498 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a25      	ldr	r2, [pc, #148]	@ (8003430 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d078      	beq.n	8003492 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a23      	ldr	r2, [pc, #140]	@ (8003434 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d071      	beq.n	800348e <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a22      	ldr	r2, [pc, #136]	@ (8003438 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d06a      	beq.n	800348a <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a20      	ldr	r2, [pc, #128]	@ (800343c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d063      	beq.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003440 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d05b      	beq.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003444 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d053      	beq.n	800347a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003448 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d04b      	beq.n	8003474 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1a      	ldr	r2, [pc, #104]	@ (800344c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d043      	beq.n	800346e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a19      	ldr	r2, [pc, #100]	@ (8003450 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d03b      	beq.n	8003468 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d012      	beq.n	8003420 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a16      	ldr	r2, [pc, #88]	@ (8003458 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00a      	beq.n	800341a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a14      	ldr	r2, [pc, #80]	@ (800345c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d102      	bne.n	8003414 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800340e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003412:	e03f      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003414:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003418:	e03c      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800341a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800341e:	e039      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003420:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003424:	e036      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003426:	bf00      	nop
 8003428:	40026400 	.word	0x40026400
 800342c:	400260b8 	.word	0x400260b8
 8003430:	40026010 	.word	0x40026010
 8003434:	40026410 	.word	0x40026410
 8003438:	40026070 	.word	0x40026070
 800343c:	40026470 	.word	0x40026470
 8003440:	40026028 	.word	0x40026028
 8003444:	40026428 	.word	0x40026428
 8003448:	40026088 	.word	0x40026088
 800344c:	40026488 	.word	0x40026488
 8003450:	40026040 	.word	0x40026040
 8003454:	40026440 	.word	0x40026440
 8003458:	400260a0 	.word	0x400260a0
 800345c:	400264a0 	.word	0x400264a0
 8003460:	40026058 	.word	0x40026058
 8003464:	40026000 	.word	0x40026000
 8003468:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800346c:	e012      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800346e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003472:	e00f      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003478:	e00c      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800347a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800347e:	e009      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003484:	e006      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003486:	2308      	movs	r3, #8
 8003488:	e004      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800348a:	2308      	movs	r3, #8
 800348c:	e002      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800348e:	2308      	movs	r3, #8
 8003490:	e000      	b.n	8003494 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003492:	2308      	movs	r3, #8
 8003494:	4a8a      	ldr	r2, [pc, #552]	@ (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003496:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4b89      	ldr	r3, [pc, #548]	@ (80036c4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d960      	bls.n	8003566 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a87      	ldr	r2, [pc, #540]	@ (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d057      	beq.n	800355e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a86      	ldr	r2, [pc, #536]	@ (80036cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d050      	beq.n	800355a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a84      	ldr	r2, [pc, #528]	@ (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d049      	beq.n	8003556 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a83      	ldr	r2, [pc, #524]	@ (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d042      	beq.n	8003552 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a81      	ldr	r2, [pc, #516]	@ (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03a      	beq.n	800354c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a80      	ldr	r2, [pc, #512]	@ (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d032      	beq.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a7e      	ldr	r2, [pc, #504]	@ (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d02a      	beq.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7d      	ldr	r2, [pc, #500]	@ (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a7b      	ldr	r2, [pc, #492]	@ (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01a      	beq.n	8003534 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7a      	ldr	r2, [pc, #488]	@ (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d012      	beq.n	800352e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a78      	ldr	r2, [pc, #480]	@ (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00a      	beq.n	8003528 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a77      	ldr	r2, [pc, #476]	@ (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d102      	bne.n	8003522 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 800351c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003520:	e01e      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003526:	e01b      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003528:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800352c:	e018      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800352e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003532:	e015      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003534:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003538:	e012      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800353a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800353e:	e00f      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003544:	e00c      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003546:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800354a:	e009      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800354c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003550:	e006      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003552:	2304      	movs	r3, #4
 8003554:	e004      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003556:	2304      	movs	r3, #4
 8003558:	e002      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800355a:	2304      	movs	r3, #4
 800355c:	e000      	b.n	8003560 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800355e:	2304      	movs	r3, #4
 8003560:	4a65      	ldr	r2, [pc, #404]	@ (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003562:	60d3      	str	r3, [r2, #12]
 8003564:	e150      	b.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4b63      	ldr	r3, [pc, #396]	@ (80036fc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800356e:	429a      	cmp	r2, r3
 8003570:	d960      	bls.n	8003634 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a54      	ldr	r2, [pc, #336]	@ (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d057      	beq.n	800362c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a52      	ldr	r2, [pc, #328]	@ (80036cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d050      	beq.n	8003628 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a51      	ldr	r2, [pc, #324]	@ (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d049      	beq.n	8003624 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4f      	ldr	r2, [pc, #316]	@ (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d042      	beq.n	8003620 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a4e      	ldr	r2, [pc, #312]	@ (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d03a      	beq.n	800361a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a4c      	ldr	r2, [pc, #304]	@ (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d032      	beq.n	8003614 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a4b      	ldr	r2, [pc, #300]	@ (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d02a      	beq.n	800360e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a49      	ldr	r2, [pc, #292]	@ (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d022      	beq.n	8003608 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a48      	ldr	r2, [pc, #288]	@ (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d01a      	beq.n	8003602 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a46      	ldr	r2, [pc, #280]	@ (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d012      	beq.n	80035fc <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a45      	ldr	r2, [pc, #276]	@ (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00a      	beq.n	80035f6 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a43      	ldr	r2, [pc, #268]	@ (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d102      	bne.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80035ea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80035ee:	e01e      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80035f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035f4:	e01b      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80035f6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80035fa:	e018      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80035fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003600:	e015      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003602:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003606:	e012      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800360c:	e00f      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800360e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003612:	e00c      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003618:	e009      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800361a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800361e:	e006      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003620:	2304      	movs	r3, #4
 8003622:	e004      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003624:	2304      	movs	r3, #4
 8003626:	e002      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003628:	2304      	movs	r3, #4
 800362a:	e000      	b.n	800362e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800362c:	2304      	movs	r3, #4
 800362e:	4a32      	ldr	r2, [pc, #200]	@ (80036f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003630:	6093      	str	r3, [r2, #8]
 8003632:	e0e9      	b.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800363c:	429a      	cmp	r2, r3
 800363e:	f240 8083 	bls.w	8003748 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a20      	ldr	r2, [pc, #128]	@ (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d079      	beq.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1e      	ldr	r2, [pc, #120]	@ (80036cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d072      	beq.n	800373c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1d      	ldr	r2, [pc, #116]	@ (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d06b      	beq.n	8003738 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1b      	ldr	r2, [pc, #108]	@ (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d064      	beq.n	8003734 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1a      	ldr	r2, [pc, #104]	@ (80036d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d05c      	beq.n	800372e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a18      	ldr	r2, [pc, #96]	@ (80036dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d054      	beq.n	8003728 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a17      	ldr	r2, [pc, #92]	@ (80036e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d04c      	beq.n	8003722 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a15      	ldr	r2, [pc, #84]	@ (80036e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d044      	beq.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d03c      	beq.n	8003716 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a12      	ldr	r2, [pc, #72]	@ (80036ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d034      	beq.n	8003710 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a11      	ldr	r2, [pc, #68]	@ (80036f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0f      	ldr	r2, [pc, #60]	@ (80036f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d124      	bne.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80036ba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80036be:	e040      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80036c0:	40026000 	.word	0x40026000
 80036c4:	40026458 	.word	0x40026458
 80036c8:	40026010 	.word	0x40026010
 80036cc:	40026410 	.word	0x40026410
 80036d0:	40026070 	.word	0x40026070
 80036d4:	40026470 	.word	0x40026470
 80036d8:	40026028 	.word	0x40026028
 80036dc:	40026428 	.word	0x40026428
 80036e0:	40026088 	.word	0x40026088
 80036e4:	40026488 	.word	0x40026488
 80036e8:	40026040 	.word	0x40026040
 80036ec:	40026440 	.word	0x40026440
 80036f0:	400260a0 	.word	0x400260a0
 80036f4:	400264a0 	.word	0x400264a0
 80036f8:	40026400 	.word	0x40026400
 80036fc:	400260b8 	.word	0x400260b8
 8003700:	40026058 	.word	0x40026058
 8003704:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003708:	e01b      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800370a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800370e:	e018      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003710:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003714:	e015      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003716:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800371a:	e012      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800371c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003720:	e00f      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003722:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003726:	e00c      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800372c:	e009      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800372e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003732:	e006      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003734:	2304      	movs	r3, #4
 8003736:	e004      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003738:	2304      	movs	r3, #4
 800373a:	e002      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800373c:	2304      	movs	r3, #4
 800373e:	e000      	b.n	8003742 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003740:	2304      	movs	r3, #4
 8003742:	4a8b      	ldr	r2, [pc, #556]	@ (8003970 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003744:	60d3      	str	r3, [r2, #12]
 8003746:	e05f      	b.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a89      	ldr	r2, [pc, #548]	@ (8003974 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d057      	beq.n	8003802 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a88      	ldr	r2, [pc, #544]	@ (8003978 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d050      	beq.n	80037fe <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a86      	ldr	r2, [pc, #536]	@ (800397c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d049      	beq.n	80037fa <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a85      	ldr	r2, [pc, #532]	@ (8003980 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d042      	beq.n	80037f6 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a83      	ldr	r2, [pc, #524]	@ (8003984 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03a      	beq.n	80037f0 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a82      	ldr	r2, [pc, #520]	@ (8003988 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d032      	beq.n	80037ea <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a80      	ldr	r2, [pc, #512]	@ (800398c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02a      	beq.n	80037e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7f      	ldr	r2, [pc, #508]	@ (8003990 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7d      	ldr	r2, [pc, #500]	@ (8003994 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01a      	beq.n	80037d8 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003998 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d012      	beq.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a7a      	ldr	r2, [pc, #488]	@ (800399c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00a      	beq.n	80037cc <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a79      	ldr	r2, [pc, #484]	@ (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d102      	bne.n	80037c6 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80037c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037c4:	e01e      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037ca:	e01b      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037d0:	e018      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037d2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037d6:	e015      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037dc:	e012      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037e2:	e00f      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037e8:	e00c      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037ee:	e009      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037f4:	e006      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037f6:	2304      	movs	r3, #4
 80037f8:	e004      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037fa:	2304      	movs	r3, #4
 80037fc:	e002      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80037fe:	2304      	movs	r3, #4
 8003800:	e000      	b.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003802:	2304      	movs	r3, #4
 8003804:	4a5a      	ldr	r2, [pc, #360]	@ (8003970 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003806:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4b65      	ldr	r3, [pc, #404]	@ (80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003810:	429a      	cmp	r2, r3
 8003812:	d95c      	bls.n	80038ce <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a56      	ldr	r2, [pc, #344]	@ (8003974 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d053      	beq.n	80038c6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a55      	ldr	r2, [pc, #340]	@ (8003978 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04c      	beq.n	80038c2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a53      	ldr	r2, [pc, #332]	@ (800397c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d045      	beq.n	80038be <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a52      	ldr	r2, [pc, #328]	@ (8003980 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d03e      	beq.n	80038ba <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a50      	ldr	r2, [pc, #320]	@ (8003984 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d037      	beq.n	80038b6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a4f      	ldr	r2, [pc, #316]	@ (8003988 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d030      	beq.n	80038b2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a4d      	ldr	r2, [pc, #308]	@ (800398c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d029      	beq.n	80038ae <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a4c      	ldr	r2, [pc, #304]	@ (8003990 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a4a      	ldr	r2, [pc, #296]	@ (8003994 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01a      	beq.n	80038a4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a49      	ldr	r2, [pc, #292]	@ (8003998 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d012      	beq.n	800389e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a47      	ldr	r2, [pc, #284]	@ (800399c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00a      	beq.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a46      	ldr	r2, [pc, #280]	@ (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d102      	bne.n	8003892 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 800388c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003890:	e01a      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003892:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003896:	e017      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800389c:	e014      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800389e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038a2:	e011      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038a8:	e00e      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038aa:	2340      	movs	r3, #64	@ 0x40
 80038ac:	e00c      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038ae:	2340      	movs	r3, #64	@ 0x40
 80038b0:	e00a      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038b2:	2340      	movs	r3, #64	@ 0x40
 80038b4:	e008      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038b6:	2340      	movs	r3, #64	@ 0x40
 80038b8:	e006      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e004      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038be:	2301      	movs	r3, #1
 80038c0:	e002      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80038c6:	2301      	movs	r3, #1
 80038c8:	4a37      	ldr	r2, [pc, #220]	@ (80039a8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80038ca:	60d3      	str	r3, [r2, #12]
 80038cc:	e141      	b.n	8003b52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b35      	ldr	r3, [pc, #212]	@ (80039ac <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d97c      	bls.n	80039d4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a25      	ldr	r2, [pc, #148]	@ (8003974 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d073      	beq.n	80039cc <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a23      	ldr	r2, [pc, #140]	@ (8003978 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d06c      	beq.n	80039c8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a22      	ldr	r2, [pc, #136]	@ (800397c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d065      	beq.n	80039c4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a20      	ldr	r2, [pc, #128]	@ (8003980 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d05e      	beq.n	80039c0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1f      	ldr	r2, [pc, #124]	@ (8003984 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d057      	beq.n	80039bc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1d      	ldr	r2, [pc, #116]	@ (8003988 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d050      	beq.n	80039b8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d049      	beq.n	80039b4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1a      	ldr	r2, [pc, #104]	@ (8003990 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d042      	beq.n	80039b0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a19      	ldr	r2, [pc, #100]	@ (8003994 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01a      	beq.n	800396a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a17      	ldr	r2, [pc, #92]	@ (8003998 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d012      	beq.n	8003964 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a16      	ldr	r2, [pc, #88]	@ (800399c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00a      	beq.n	800395e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d102      	bne.n	8003958 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003956:	e03a      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003958:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800395c:	e037      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800395e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003962:	e034      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003964:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003968:	e031      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800396a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800396e:	e02e      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003970:	40026000 	.word	0x40026000
 8003974:	40026010 	.word	0x40026010
 8003978:	40026410 	.word	0x40026410
 800397c:	40026070 	.word	0x40026070
 8003980:	40026470 	.word	0x40026470
 8003984:	40026028 	.word	0x40026028
 8003988:	40026428 	.word	0x40026428
 800398c:	40026088 	.word	0x40026088
 8003990:	40026488 	.word	0x40026488
 8003994:	40026040 	.word	0x40026040
 8003998:	40026440 	.word	0x40026440
 800399c:	400260a0 	.word	0x400260a0
 80039a0:	400264a0 	.word	0x400264a0
 80039a4:	40026458 	.word	0x40026458
 80039a8:	40026400 	.word	0x40026400
 80039ac:	400260b8 	.word	0x400260b8
 80039b0:	2340      	movs	r3, #64	@ 0x40
 80039b2:	e00c      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80039b4:	2340      	movs	r3, #64	@ 0x40
 80039b6:	e00a      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80039b8:	2340      	movs	r3, #64	@ 0x40
 80039ba:	e008      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80039bc:	2340      	movs	r3, #64	@ 0x40
 80039be:	e006      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e004      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e002      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80039cc:	2301      	movs	r3, #1
 80039ce:	4a7b      	ldr	r2, [pc, #492]	@ (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80039d0:	6093      	str	r3, [r2, #8]
 80039d2:	e0be      	b.n	8003b52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	4b79      	ldr	r3, [pc, #484]	@ (8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80039dc:	429a      	cmp	r2, r3
 80039de:	d95c      	bls.n	8003a9a <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a77      	ldr	r2, [pc, #476]	@ (8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d053      	beq.n	8003a92 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a76      	ldr	r2, [pc, #472]	@ (8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04c      	beq.n	8003a8e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a74      	ldr	r2, [pc, #464]	@ (8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d045      	beq.n	8003a8a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a73      	ldr	r2, [pc, #460]	@ (8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d03e      	beq.n	8003a86 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a71      	ldr	r2, [pc, #452]	@ (8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d037      	beq.n	8003a82 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a70      	ldr	r2, [pc, #448]	@ (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d030      	beq.n	8003a7e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a6e      	ldr	r2, [pc, #440]	@ (8003bdc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d029      	beq.n	8003a7a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6d      	ldr	r2, [pc, #436]	@ (8003be0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6b      	ldr	r2, [pc, #428]	@ (8003be4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01a      	beq.n	8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6a      	ldr	r2, [pc, #424]	@ (8003be8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d012      	beq.n	8003a6a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a68      	ldr	r2, [pc, #416]	@ (8003bec <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00a      	beq.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a67      	ldr	r2, [pc, #412]	@ (8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d102      	bne.n	8003a5e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003a58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a5c:	e01a      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a62:	e017      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a68:	e014      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a6e:	e011      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a74:	e00e      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a76:	2340      	movs	r3, #64	@ 0x40
 8003a78:	e00c      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a7a:	2340      	movs	r3, #64	@ 0x40
 8003a7c:	e00a      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a7e:	2340      	movs	r3, #64	@ 0x40
 8003a80:	e008      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a82:	2340      	movs	r3, #64	@ 0x40
 8003a84:	e006      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e004      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e002      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003a92:	2301      	movs	r3, #1
 8003a94:	4a57      	ldr	r2, [pc, #348]	@ (8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003a96:	60d3      	str	r3, [r2, #12]
 8003a98:	e05b      	b.n	8003b52 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a49      	ldr	r2, [pc, #292]	@ (8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d053      	beq.n	8003b4c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a47      	ldr	r2, [pc, #284]	@ (8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d04c      	beq.n	8003b48 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a46      	ldr	r2, [pc, #280]	@ (8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d045      	beq.n	8003b44 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a44      	ldr	r2, [pc, #272]	@ (8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d03e      	beq.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a43      	ldr	r2, [pc, #268]	@ (8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d037      	beq.n	8003b3c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a41      	ldr	r2, [pc, #260]	@ (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d030      	beq.n	8003b38 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a40      	ldr	r2, [pc, #256]	@ (8003bdc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d029      	beq.n	8003b34 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8003be0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d022      	beq.n	8003b30 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a3d      	ldr	r2, [pc, #244]	@ (8003be4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d01a      	beq.n	8003b2a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3b      	ldr	r2, [pc, #236]	@ (8003be8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d012      	beq.n	8003b24 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3a      	ldr	r2, [pc, #232]	@ (8003bec <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00a      	beq.n	8003b1e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a38      	ldr	r2, [pc, #224]	@ (8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d102      	bne.n	8003b18 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003b12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b16:	e01a      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b1c:	e017      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b22:	e014      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b28:	e011      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b2e:	e00e      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b30:	2340      	movs	r3, #64	@ 0x40
 8003b32:	e00c      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b34:	2340      	movs	r3, #64	@ 0x40
 8003b36:	e00a      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b38:	2340      	movs	r3, #64	@ 0x40
 8003b3a:	e008      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b3c:	2340      	movs	r3, #64	@ 0x40
 8003b3e:	e006      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e004      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e002      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4a29      	ldr	r2, [pc, #164]	@ (8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003b50:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0216 	orr.w	r2, r2, #22
 8003b60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0208 	orr.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e005      	b.n	8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
 8003bae:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40026400 	.word	0x40026400
 8003bc0:	40026058 	.word	0x40026058
 8003bc4:	40026010 	.word	0x40026010
 8003bc8:	40026410 	.word	0x40026410
 8003bcc:	40026070 	.word	0x40026070
 8003bd0:	40026470 	.word	0x40026470
 8003bd4:	40026028 	.word	0x40026028
 8003bd8:	40026428 	.word	0x40026428
 8003bdc:	40026088 	.word	0x40026088
 8003be0:	40026488 	.word	0x40026488
 8003be4:	40026040 	.word	0x40026040
 8003be8:	40026440 	.word	0x40026440
 8003bec:	400260a0 	.word	0x400260a0
 8003bf0:	400264a0 	.word	0x400264a0
 8003bf4:	40026000 	.word	0x40026000

08003bf8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	4613      	mov	r3, r2
 8003c04:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	e003      	b.n	8003c1e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b40      	cmp	r3, #64	@ 0x40
 8003c48:	d108      	bne.n	8003c5c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c5a:	e007      	b.n	8003c6c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	@ 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e165      	b.n	8003f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f040 8154 	bne.w	8003f5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d005      	beq.n	8003cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d130      	bne.n	8003d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0201 	and.w	r2, r3, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d017      	beq.n	8003d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d123      	bne.n	8003dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	08da      	lsrs	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3208      	adds	r2, #8
 8003d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	08da      	lsrs	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3208      	adds	r2, #8
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0203 	and.w	r2, r3, #3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80ae 	beq.w	8003f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b5d      	ldr	r3, [pc, #372]	@ (8003f78 <HAL_GPIO_Init+0x300>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	4a5c      	ldr	r2, [pc, #368]	@ (8003f78 <HAL_GPIO_Init+0x300>)
 8003e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f78 <HAL_GPIO_Init+0x300>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e1a:	4a58      	ldr	r2, [pc, #352]	@ (8003f7c <HAL_GPIO_Init+0x304>)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	3302      	adds	r3, #2
 8003e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	220f      	movs	r2, #15
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4f      	ldr	r2, [pc, #316]	@ (8003f80 <HAL_GPIO_Init+0x308>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d025      	beq.n	8003e92 <HAL_GPIO_Init+0x21a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4e      	ldr	r2, [pc, #312]	@ (8003f84 <HAL_GPIO_Init+0x30c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <HAL_GPIO_Init+0x216>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4d      	ldr	r2, [pc, #308]	@ (8003f88 <HAL_GPIO_Init+0x310>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d019      	beq.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4c      	ldr	r2, [pc, #304]	@ (8003f8c <HAL_GPIO_Init+0x314>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_GPIO_Init+0x20e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4b      	ldr	r2, [pc, #300]	@ (8003f90 <HAL_GPIO_Init+0x318>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00d      	beq.n	8003e82 <HAL_GPIO_Init+0x20a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4a      	ldr	r2, [pc, #296]	@ (8003f94 <HAL_GPIO_Init+0x31c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_GPIO_Init+0x206>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a49      	ldr	r2, [pc, #292]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_GPIO_Init+0x202>
 8003e76:	2306      	movs	r3, #6
 8003e78:	e00c      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e7a:	2307      	movs	r3, #7
 8003e7c:	e00a      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e7e:	2305      	movs	r3, #5
 8003e80:	e008      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e82:	2304      	movs	r3, #4
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e004      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_GPIO_Init+0x21c>
 8003e92:	2300      	movs	r3, #0
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	f002 0203 	and.w	r2, r2, #3
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea4:	4935      	ldr	r1, [pc, #212]	@ (8003f7c <HAL_GPIO_Init+0x304>)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ed6:	4a31      	ldr	r2, [pc, #196]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003edc:	4b2f      	ldr	r3, [pc, #188]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f00:	4a26      	ldr	r2, [pc, #152]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f06:	4b25      	ldr	r3, [pc, #148]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f30:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f54:	4a11      	ldr	r2, [pc, #68]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b0f      	cmp	r3, #15
 8003f64:	f67f ae96 	bls.w	8003c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40020400 	.word	0x40020400
 8003f88:	40020800 	.word	0x40020800
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40021400 	.word	0x40021400
 8003f98:	40021800 	.word	0x40021800
 8003f9c:	40013c00 	.word	0x40013c00

08003fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	887b      	ldrh	r3, [r7, #2]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e001      	b.n	8003fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe0:	787b      	ldrb	r3, [r7, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fec:	e003      	b.n	8003ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	041a      	lsls	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	619a      	str	r2, [r3, #24]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004014:	887a      	ldrh	r2, [r7, #2]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4013      	ands	r3, r2
 800401a:	041a      	lsls	r2, r3, #16
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	43d9      	mvns	r1, r3
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	400b      	ands	r3, r1
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004042:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800404e:	4a05      	ldr	r2, [pc, #20]	@ (8004064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f806 	bl	8004068 <HAL_GPIO_EXTI_Callback>
  }
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40013c00 	.word	0x40013c00

08004068 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e12b      	b.n	80042ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd f920 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	@ 0x24
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040e4:	f001 f99c 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 80040e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4a81      	ldr	r2, [pc, #516]	@ (80042f4 <HAL_I2C_Init+0x274>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d807      	bhi.n	8004104 <HAL_I2C_Init+0x84>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4a80      	ldr	r2, [pc, #512]	@ (80042f8 <HAL_I2C_Init+0x278>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bf94      	ite	ls
 80040fc:	2301      	movls	r3, #1
 80040fe:	2300      	movhi	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e006      	b.n	8004112 <HAL_I2C_Init+0x92>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a7d      	ldr	r2, [pc, #500]	@ (80042fc <HAL_I2C_Init+0x27c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	bf94      	ite	ls
 800410c:	2301      	movls	r3, #1
 800410e:	2300      	movhi	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e0e7      	b.n	80042ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a78      	ldr	r2, [pc, #480]	@ (8004300 <HAL_I2C_Init+0x280>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0c9b      	lsrs	r3, r3, #18
 8004124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4a6a      	ldr	r2, [pc, #424]	@ (80042f4 <HAL_I2C_Init+0x274>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d802      	bhi.n	8004154 <HAL_I2C_Init+0xd4>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	3301      	adds	r3, #1
 8004152:	e009      	b.n	8004168 <HAL_I2C_Init+0xe8>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800415a:	fb02 f303 	mul.w	r3, r2, r3
 800415e:	4a69      	ldr	r2, [pc, #420]	@ (8004304 <HAL_I2C_Init+0x284>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	099b      	lsrs	r3, r3, #6
 8004166:	3301      	adds	r3, #1
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	430b      	orrs	r3, r1
 800416e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800417a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	495c      	ldr	r1, [pc, #368]	@ (80042f4 <HAL_I2C_Init+0x274>)
 8004184:	428b      	cmp	r3, r1
 8004186:	d819      	bhi.n	80041bc <HAL_I2C_Init+0x13c>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1e59      	subs	r1, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fbb1 f3f3 	udiv	r3, r1, r3
 8004196:	1c59      	adds	r1, r3, #1
 8004198:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800419c:	400b      	ands	r3, r1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_I2C_Init+0x138>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1e59      	subs	r1, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b6:	e051      	b.n	800425c <HAL_I2C_Init+0x1dc>
 80041b8:	2304      	movs	r3, #4
 80041ba:	e04f      	b.n	800425c <HAL_I2C_Init+0x1dc>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d111      	bne.n	80041e8 <HAL_I2C_Init+0x168>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	440b      	add	r3, r1
 80041d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d6:	3301      	adds	r3, #1
 80041d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e012      	b.n	800420e <HAL_I2C_Init+0x18e>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1e58      	subs	r0, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6859      	ldr	r1, [r3, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	0099      	lsls	r1, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fe:	3301      	adds	r3, #1
 8004200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Init+0x196>
 8004212:	2301      	movs	r3, #1
 8004214:	e022      	b.n	800425c <HAL_I2C_Init+0x1dc>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10e      	bne.n	800423c <HAL_I2C_Init+0x1bc>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1e58      	subs	r0, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	440b      	add	r3, r1
 800422c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004230:	3301      	adds	r3, #1
 8004232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800423a:	e00f      	b.n	800425c <HAL_I2C_Init+0x1dc>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1e58      	subs	r0, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	0099      	lsls	r1, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004252:	3301      	adds	r3, #1
 8004254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004258:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	6809      	ldr	r1, [r1, #0]
 8004260:	4313      	orrs	r3, r2
 8004262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800428a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6911      	ldr	r1, [r2, #16]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68d2      	ldr	r2, [r2, #12]
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	430b      	orrs	r3, r1
 800429e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	000186a0 	.word	0x000186a0
 80042f8:	001e847f 	.word	0x001e847f
 80042fc:	003d08ff 	.word	0x003d08ff
 8004300:	431bde83 	.word	0x431bde83
 8004304:	10624dd3 	.word	0x10624dd3

08004308 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	461a      	mov	r2, r3
 8004314:	460b      	mov	r3, r1
 8004316:	817b      	strh	r3, [r7, #10]
 8004318:	4613      	mov	r3, r2
 800431a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800431c:	f7fd faf4 	bl	8001908 <HAL_GetTick>
 8004320:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	f040 80e0 	bne.w	80044f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	2319      	movs	r3, #25
 8004336:	2201      	movs	r2, #1
 8004338:	4970      	ldr	r1, [pc, #448]	@ (80044fc <HAL_I2C_Master_Transmit+0x1f4>)
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fc58 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004346:	2302      	movs	r3, #2
 8004348:	e0d3      	b.n	80044f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_I2C_Master_Transmit+0x50>
 8004354:	2302      	movs	r3, #2
 8004356:	e0cc      	b.n	80044f2 <HAL_I2C_Master_Transmit+0x1ea>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d007      	beq.n	800437e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800438c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2221      	movs	r2, #33	@ 0x21
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2210      	movs	r2, #16
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	893a      	ldrh	r2, [r7, #8]
 80043ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a50      	ldr	r2, [pc, #320]	@ (8004500 <HAL_I2C_Master_Transmit+0x1f8>)
 80043be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043c0:	8979      	ldrh	r1, [r7, #10]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fac2 	bl	8004950 <I2C_MasterRequestWrite>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e08d      	b.n	80044f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043ec:	e066      	b.n	80044bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	6a39      	ldr	r1, [r7, #32]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fcd2 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	2b04      	cmp	r3, #4
 8004404:	d107      	bne.n	8004416 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e06b      	b.n	80044f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b04      	cmp	r3, #4
 8004456:	d11b      	bne.n	8004490 <HAL_I2C_Master_Transmit+0x188>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445c:	2b00      	cmp	r3, #0
 800445e:	d017      	beq.n	8004490 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	6a39      	ldr	r1, [r7, #32]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fcc2 	bl	8004e1e <I2C_WaitOnBTFFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00d      	beq.n	80044bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d107      	bne.n	80044b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e01a      	b.n	80044f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d194      	bne.n	80043ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	00100002 	.word	0x00100002
 8004500:	ffff0000 	.word	0xffff0000

08004504 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	@ 0x30
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	461a      	mov	r2, r3
 8004510:	460b      	mov	r3, r1
 8004512:	817b      	strh	r3, [r7, #10]
 8004514:	4613      	mov	r3, r2
 8004516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004518:	f7fd f9f6 	bl	8001908 <HAL_GetTick>
 800451c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b20      	cmp	r3, #32
 8004528:	f040 820b 	bne.w	8004942 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2319      	movs	r3, #25
 8004532:	2201      	movs	r2, #1
 8004534:	497c      	ldr	r1, [pc, #496]	@ (8004728 <HAL_I2C_Master_Receive+0x224>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fb5a 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
 8004544:	e1fe      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_I2C_Master_Receive+0x50>
 8004550:	2302      	movs	r3, #2
 8004552:	e1f7      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d007      	beq.n	800457a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2222      	movs	r2, #34	@ 0x22
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2210      	movs	r2, #16
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	893a      	ldrh	r2, [r7, #8]
 80045aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a5c      	ldr	r2, [pc, #368]	@ (800472c <HAL_I2C_Master_Receive+0x228>)
 80045ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045bc:	8979      	ldrh	r1, [r7, #10]
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa46 	bl	8004a54 <I2C_MasterRequestRead>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e1b8      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d113      	bne.n	8004602 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045da:	2300      	movs	r3, #0
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	623b      	str	r3, [r7, #32]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e18c      	b.n	800491c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004606:	2b01      	cmp	r3, #1
 8004608:	d11b      	bne.n	8004642 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e16c      	b.n	800491c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004646:	2b02      	cmp	r3, #2
 8004648:	d11b      	bne.n	8004682 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004658:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	e14c      	b.n	800491c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046a8:	e138      	b.n	800491c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	f200 80f1 	bhi.w	8004896 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d123      	bne.n	8004704 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fbed 	bl	8004ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e139      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004702:	e10b      	b.n	800491c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004708:	2b02      	cmp	r3, #2
 800470a:	d14e      	bne.n	80047aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	2200      	movs	r2, #0
 8004714:	4906      	ldr	r1, [pc, #24]	@ (8004730 <HAL_I2C_Master_Receive+0x22c>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fa6a 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e10e      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
 8004726:	bf00      	nop
 8004728:	00100002 	.word	0x00100002
 800472c:	ffff0000 	.word	0xffff0000
 8004730:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047a8:	e0b8      	b.n	800491c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	2200      	movs	r2, #0
 80047b2:	4966      	ldr	r1, [pc, #408]	@ (800494c <HAL_I2C_Master_Receive+0x448>)
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fa1b 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0bf      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	2200      	movs	r2, #0
 800480e:	494f      	ldr	r1, [pc, #316]	@ (800494c <HAL_I2C_Master_Receive+0x448>)
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f9ed 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e091      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800482e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004894:	e042      	b.n	800491c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004898:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fb00 	bl	8004ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e04c      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d118      	bne.n	800491c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f aec2 	bne.w	80046aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e000      	b.n	8004944 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
  }
}
 8004944:	4618      	mov	r0, r3
 8004946:	3728      	adds	r7, #40	@ 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	00010004 	.word	0x00010004

08004950 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	460b      	mov	r3, r1
 800495e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d006      	beq.n	800497a <I2C_MasterRequestWrite+0x2a>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d003      	beq.n	800497a <I2C_MasterRequestWrite+0x2a>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004978:	d108      	bne.n	800498c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e00b      	b.n	80049a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004990:	2b12      	cmp	r3, #18
 8004992:	d107      	bne.n	80049a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f91d 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00d      	beq.n	80049d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ca:	d103      	bne.n	80049d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e035      	b.n	8004a44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049e0:	d108      	bne.n	80049f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049e2:	897b      	ldrh	r3, [r7, #10]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049f0:	611a      	str	r2, [r3, #16]
 80049f2:	e01b      	b.n	8004a2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049f4:	897b      	ldrh	r3, [r7, #10]
 80049f6:	11db      	asrs	r3, r3, #7
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0306 	and.w	r3, r3, #6
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f063 030f 	orn	r3, r3, #15
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	490e      	ldr	r1, [pc, #56]	@ (8004a4c <I2C_MasterRequestWrite+0xfc>)
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f943 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e010      	b.n	8004a44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a22:	897b      	ldrh	r3, [r7, #10]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4907      	ldr	r1, [pc, #28]	@ (8004a50 <I2C_MasterRequestWrite+0x100>)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f933 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	00010008 	.word	0x00010008
 8004a50:	00010002 	.word	0x00010002

08004a54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	460b      	mov	r3, r1
 8004a62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d006      	beq.n	8004a8e <I2C_MasterRequestRead+0x3a>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d003      	beq.n	8004a8e <I2C_MasterRequestRead+0x3a>
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a8c:	d108      	bne.n	8004aa0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e00b      	b.n	8004ab8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	2b11      	cmp	r3, #17
 8004aa6:	d107      	bne.n	8004ab8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ab6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f893 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00d      	beq.n	8004aec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ade:	d103      	bne.n	8004ae8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ae6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e079      	b.n	8004be0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004af4:	d108      	bne.n	8004b08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	611a      	str	r2, [r3, #16]
 8004b06:	e05f      	b.n	8004bc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b08:	897b      	ldrh	r3, [r7, #10]
 8004b0a:	11db      	asrs	r3, r3, #7
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 0306 	and.w	r3, r3, #6
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f063 030f 	orn	r3, r3, #15
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4930      	ldr	r1, [pc, #192]	@ (8004be8 <I2C_MasterRequestRead+0x194>)
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 f8b9 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e054      	b.n	8004be0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b36:	897b      	ldrh	r3, [r7, #10]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	4929      	ldr	r1, [pc, #164]	@ (8004bec <I2C_MasterRequestRead+0x198>)
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f8a9 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e044      	b.n	8004be0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f831 	bl	8004bf0 <I2C_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00d      	beq.n	8004bb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba2:	d103      	bne.n	8004bac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004baa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e017      	b.n	8004be0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004bb0:	897b      	ldrh	r3, [r7, #10]
 8004bb2:	11db      	asrs	r3, r3, #7
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f003 0306 	and.w	r3, r3, #6
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f063 030e 	orn	r3, r3, #14
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4907      	ldr	r1, [pc, #28]	@ (8004bec <I2C_MasterRequestRead+0x198>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f865 	bl	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	00010008 	.word	0x00010008
 8004bec:	00010002 	.word	0x00010002

08004bf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c00:	e025      	b.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d021      	beq.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fc fe7d 	bl	8001908 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d116      	bne.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e023      	b.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10d      	bne.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4013      	ands	r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	e00c      	b.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d0b6      	beq.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cac:	e051      	b.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cbc:	d123      	bne.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ccc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	f043 0204 	orr.w	r2, r3, #4
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e046      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d021      	beq.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0e:	f7fc fdfb 	bl	8001908 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d116      	bne.n	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e020      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10c      	bne.n	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	43da      	mvns	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf14      	ite	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	2300      	moveq	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	e00b      	b.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	43da      	mvns	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4013      	ands	r3, r2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d18d      	bne.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da8:	e02d      	b.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f8ce 	bl	8004f4c <I2C_IsAcknowledgeFailed>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e02d      	b.n	8004e16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d021      	beq.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fc fda1 	bl	8001908 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d116      	bne.n	8004e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e007      	b.n	8004e16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	d1ca      	bne.n	8004daa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e2a:	e02d      	b.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f88d 	bl	8004f4c <I2C_IsAcknowledgeFailed>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e02d      	b.n	8004e98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d021      	beq.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e44:	f7fc fd60 	bl	8001908 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d302      	bcc.n	8004e5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d116      	bne.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e007      	b.n	8004e98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d1ca      	bne.n	8004e2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eac:	e042      	b.n	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d119      	bne.n	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0210 	mvn.w	r2, #16
 8004ec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e029      	b.n	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef0:	f7fc fd0a 	bl	8001908 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d302      	bcc.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d116      	bne.n	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e007      	b.n	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3e:	2b40      	cmp	r3, #64	@ 0x40
 8004f40:	d1b5      	bne.n	8004eae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f62:	d11b      	bne.n	8004f9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f88:	f043 0204 	orr.w	r2, r3, #4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fac:	b08f      	sub	sp, #60	@ 0x3c
 8004fae:	af0a      	add	r7, sp, #40	@ 0x28
 8004fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e116      	b.n	80051ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc fae0 	bl	800159c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2203      	movs	r2, #3
 8004fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f003 f95f 	bl	80082be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	687e      	ldr	r6, [r7, #4]
 8005008:	466d      	mov	r5, sp
 800500a:	f106 0410 	add.w	r4, r6, #16
 800500e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800501a:	e885 0003 	stmia.w	r5, {r0, r1}
 800501e:	1d33      	adds	r3, r6, #4
 8005020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005022:	6838      	ldr	r0, [r7, #0]
 8005024:	f003 f8ea 	bl	80081fc <USB_CoreInit>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e0d7      	b.n	80051ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f003 f94d 	bl	80082e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	e04a      	b.n	80050e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800504c:	7bfa      	ldrb	r2, [r7, #15]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	333d      	adds	r3, #61	@ 0x3d
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005060:	7bfa      	ldrb	r2, [r7, #15]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	333c      	adds	r3, #60	@ 0x3c
 8005070:	7bfa      	ldrb	r2, [r7, #15]
 8005072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005074:	7bfa      	ldrb	r2, [r7, #15]
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	b298      	uxth	r0, r3
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3344      	adds	r3, #68	@ 0x44
 8005088:	4602      	mov	r2, r0
 800508a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	3340      	adds	r3, #64	@ 0x40
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	3348      	adds	r3, #72	@ 0x48
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050b4:	7bfa      	ldrb	r2, [r7, #15]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	334c      	adds	r3, #76	@ 0x4c
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050c8:	7bfa      	ldrb	r2, [r7, #15]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	3354      	adds	r3, #84	@ 0x54
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	3301      	adds	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d3af      	bcc.n	800504c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e044      	b.n	800517c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800511e:	7bfa      	ldrb	r2, [r7, #15]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800514a:	7bfa      	ldrb	r2, [r7, #15]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	3301      	adds	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	7bfa      	ldrb	r2, [r7, #15]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d3b5      	bcc.n	80050f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	687e      	ldr	r6, [r7, #4]
 800518e:	466d      	mov	r5, sp
 8005190:	f106 0410 	add.w	r4, r6, #16
 8005194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800519a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800519c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80051a4:	1d33      	adds	r3, r6, #4
 80051a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051a8:	6838      	ldr	r0, [r7, #0]
 80051aa:	f003 f8e5 	bl	8008378 <USB_DevInit>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e014      	b.n	80051ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d102      	bne.n	80051de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f80a 	bl	80051f2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f003 faa3 	bl	800872e <USB_DevDisconnect>

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005224:	f043 0303 	orr.w	r3, r3, #3
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0cc      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005250:	4b68      	ldr	r3, [pc, #416]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d90c      	bls.n	8005278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b65      	ldr	r3, [pc, #404]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b63      	ldr	r3, [pc, #396]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0b8      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d020      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005290:	4b59      	ldr	r3, [pc, #356]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4a58      	ldr	r2, [pc, #352]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800529a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a8:	4b53      	ldr	r3, [pc, #332]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4a52      	ldr	r2, [pc, #328]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b4:	4b50      	ldr	r3, [pc, #320]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	494d      	ldr	r1, [pc, #308]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d044      	beq.n	800535c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052da:	4b47      	ldr	r3, [pc, #284]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d119      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e07f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d003      	beq.n	80052fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fa:	4b3f      	ldr	r3, [pc, #252]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e06f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530a:	4b3b      	ldr	r3, [pc, #236]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e067      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531a:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 0203 	bic.w	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4934      	ldr	r1, [pc, #208]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800532c:	f7fc faec 	bl	8001908 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	e00a      	b.n	800534a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005334:	f7fc fae8 	bl	8001908 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e04f      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	4b2b      	ldr	r3, [pc, #172]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 020c 	and.w	r2, r3, #12
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	429a      	cmp	r2, r3
 800535a:	d1eb      	bne.n	8005334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800535c:	4b25      	ldr	r3, [pc, #148]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d20c      	bcs.n	8005384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b22      	ldr	r3, [pc, #136]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e032      	b.n	80053ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4916      	ldr	r1, [pc, #88]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ae:	4b12      	ldr	r3, [pc, #72]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	490e      	ldr	r1, [pc, #56]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053c2:	f000 fb7f 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	490a      	ldr	r1, [pc, #40]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	5ccb      	ldrb	r3, [r1, r3]
 80053d6:	fa22 f303 	lsr.w	r3, r2, r3
 80053da:	4a09      	ldr	r2, [pc, #36]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053de:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fa4c 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40023c00 	.word	0x40023c00
 80053f8:	40023800 	.word	0x40023800
 80053fc:	0800947c 	.word	0x0800947c
 8005400:	20000000 	.word	0x20000000
 8005404:	20000004 	.word	0x20000004

08005408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800540c:	4b03      	ldr	r3, [pc, #12]	@ (800541c <HAL_RCC_GetHCLKFreq+0x14>)
 800540e:	681b      	ldr	r3, [r3, #0]
}
 8005410:	4618      	mov	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000000 	.word	0x20000000

08005420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005424:	f7ff fff0 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0a9b      	lsrs	r3, r3, #10
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4903      	ldr	r1, [pc, #12]	@ (8005444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40023800 	.word	0x40023800
 8005444:	0800948c 	.word	0x0800948c

08005448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800544c:	f7ff ffdc 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b05      	ldr	r3, [pc, #20]	@ (8005468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	0b5b      	lsrs	r3, r3, #13
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4903      	ldr	r1, [pc, #12]	@ (800546c <HAL_RCC_GetPCLK2Freq+0x24>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005464:	4618      	mov	r0, r3
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40023800 	.word	0x40023800
 800546c:	0800948c 	.word	0x0800948c

08005470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	@ 0x30
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80054a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054ae:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b6:	496c      	ldr	r1, [pc, #432]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80054c6:	2301      	movs	r3, #1
 80054c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80054d6:	4b64      	ldr	r3, [pc, #400]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054dc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e4:	4960      	ldr	r1, [pc, #384]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80054f4:	2301      	movs	r3, #1
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d017      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005504:	4b58      	ldr	r3, [pc, #352]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005506:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800550a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	4955      	ldr	r1, [pc, #340]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005522:	d101      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005524:	2301      	movs	r3, #1
 8005526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005530:	2301      	movs	r3, #1
 8005532:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d017      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005540:	4b49      	ldr	r3, [pc, #292]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005542:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005546:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554e:	4946      	ldr	r1, [pc, #280]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800555e:	d101      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005560:	2301      	movs	r3, #1
 8005562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800556c:	2301      	movs	r3, #1
 800556e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 808a 	beq.w	8005692 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	4b39      	ldr	r3, [pc, #228]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	4a38      	ldr	r2, [pc, #224]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800558c:	6413      	str	r3, [r2, #64]	@ 0x40
 800558e:	4b36      	ldr	r3, [pc, #216]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800559a:	4b34      	ldr	r3, [pc, #208]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a33      	ldr	r2, [pc, #204]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80055a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055a6:	f7fc f9af 	bl	8001908 <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055ae:	f7fc f9ab 	bl	8001908 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e278      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055c0:	4b2a      	ldr	r3, [pc, #168]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055cc:	4b26      	ldr	r3, [pc, #152]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d02f      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e4:	6a3a      	ldr	r2, [r7, #32]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d028      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005600:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005606:	4b18      	ldr	r3, [pc, #96]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b01      	cmp	r3, #1
 8005610:	d114      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005612:	f7fc f979 	bl	8001908 <HAL_GetTick>
 8005616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005618:	e00a      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561a:	f7fc f975 	bl	8001908 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005628:	4293      	cmp	r3, r2
 800562a:	d901      	bls.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e240      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005630:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0ee      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005648:	d114      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800564a:	4b07      	ldr	r3, [pc, #28]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800565a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800565e:	4902      	ldr	r1, [pc, #8]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005660:	4313      	orrs	r3, r2
 8005662:	608b      	str	r3, [r1, #8]
 8005664:	e00c      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005666:	bf00      	nop
 8005668:	40023800 	.word	0x40023800
 800566c:	40007000 	.word	0x40007000
 8005670:	42470e40 	.word	0x42470e40
 8005674:	4b4a      	ldr	r3, [pc, #296]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4a49      	ldr	r2, [pc, #292]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800567a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800567e:	6093      	str	r3, [r2, #8]
 8005680:	4b47      	ldr	r3, [pc, #284]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005682:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568c:	4944      	ldr	r1, [pc, #272]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800568e:	4313      	orrs	r3, r2
 8005690:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80056a4:	4b3f      	ldr	r3, [pc, #252]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80056a6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80056b4:	4b3a      	ldr	r3, [pc, #232]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80056b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c2:	4937      	ldr	r1, [pc, #220]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056d6:	4b32      	ldr	r3, [pc, #200]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80056d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056dc:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e4:	492e      	ldr	r1, [pc, #184]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056f8:	4b29      	ldr	r3, [pc, #164]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80056fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056fe:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005706:	4926      	ldr	r1, [pc, #152]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005716:	d101      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005718:	2301      	movs	r3, #1
 800571a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005728:	4b1d      	ldr	r3, [pc, #116]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800572a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800572e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	491a      	ldr	r1, [pc, #104]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005746:	2b00      	cmp	r3, #0
 8005748:	d011      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800574a:	4b15      	ldr	r3, [pc, #84]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800574c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005750:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005758:	4911      	ldr	r1, [pc, #68]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005768:	d101      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800576a:	2301      	movs	r3, #1
 800576c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d005      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800577c:	f040 80ff 	bne.w	800597e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005780:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005786:	f7fc f8bf 	bl	8001908 <HAL_GetTick>
 800578a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800578c:	e00e      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800578e:	f7fc f8bb 	bl	8001908 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d907      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e188      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80057a0:	40023800 	.word	0x40023800
 80057a4:	424711e0 	.word	0x424711e0
 80057a8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057ac:	4b7e      	ldr	r3, [pc, #504]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ea      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d028      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d124      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80057e0:	4b71      	ldr	r3, [pc, #452]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	3301      	adds	r3, #1
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057f2:	4b6d      	ldr	r3, [pc, #436]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f8:	0e1b      	lsrs	r3, r3, #24
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	019b      	lsls	r3, r3, #6
 800580a:	431a      	orrs	r2, r3
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	3b01      	subs	r3, #1
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	431a      	orrs	r2, r3
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	061b      	lsls	r3, r3, #24
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	071b      	lsls	r3, r3, #28
 8005822:	4961      	ldr	r1, [pc, #388]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800583e:	d00a      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005848:	2b00      	cmp	r3, #0
 800584a:	d035      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005850:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005854:	d130      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005856:	4b54      	ldr	r3, [pc, #336]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	3301      	adds	r3, #1
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005868:	4b4f      	ldr	r3, [pc, #316]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800586a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800586e:	0f1b      	lsrs	r3, r3, #28
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	019b      	lsls	r3, r3, #6
 8005880:	431a      	orrs	r2, r3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	3b01      	subs	r3, #1
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	061b      	lsls	r3, r3, #24
 8005892:	431a      	orrs	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	071b      	lsls	r3, r3, #28
 8005898:	4943      	ldr	r1, [pc, #268]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058a0:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058a6:	f023 021f 	bic.w	r2, r3, #31
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	3b01      	subs	r3, #1
 80058b0:	493d      	ldr	r1, [pc, #244]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d029      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058cc:	d124      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80058ce:	4b36      	ldr	r3, [pc, #216]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	3301      	adds	r3, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058e0:	4b31      	ldr	r3, [pc, #196]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e6:	0f1b      	lsrs	r3, r3, #28
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	019b      	lsls	r3, r3, #6
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	3b01      	subs	r3, #1
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	431a      	orrs	r2, r3
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	061b      	lsls	r3, r3, #24
 800590a:	431a      	orrs	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	071b      	lsls	r3, r3, #28
 8005910:	4925      	ldr	r1, [pc, #148]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005920:	2b00      	cmp	r3, #0
 8005922:	d016      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	019b      	lsls	r3, r3, #6
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	3b01      	subs	r3, #1
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	061b      	lsls	r3, r3, #24
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	071b      	lsls	r3, r3, #28
 800594a:	4917      	ldr	r1, [pc, #92]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005952:	4b16      	ldr	r3, [pc, #88]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005954:	2201      	movs	r2, #1
 8005956:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005958:	f7fb ffd6 	bl	8001908 <HAL_GetTick>
 800595c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005960:	f7fb ffd2 	bl	8001908 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e09f      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005980:	2b01      	cmp	r3, #1
 8005982:	f040 8095 	bne.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005986:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800598c:	f7fb ffbc 	bl	8001908 <HAL_GetTick>
 8005990:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005992:	e00f      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005994:	f7fb ffb8 	bl	8001908 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d908      	bls.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e085      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80059a6:	bf00      	nop
 80059a8:	40023800 	.word	0x40023800
 80059ac:	42470068 	.word	0x42470068
 80059b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059b4:	4b41      	ldr	r3, [pc, #260]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c0:	d0e8      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d02b      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d127      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80059ea:	4b34      	ldr	r3, [pc, #208]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f0:	0c1b      	lsrs	r3, r3, #16
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	3301      	adds	r3, #1
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	431a      	orrs	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	041b      	lsls	r3, r3, #16
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	4928      	ldr	r1, [pc, #160]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a20:	4b26      	ldr	r3, [pc, #152]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a26:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	4922      	ldr	r1, [pc, #136]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01d      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a4e:	d118      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a50:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	0e1b      	lsrs	r3, r3, #24
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	019b      	lsls	r3, r3, #6
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	3b01      	subs	r3, #1
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	431a      	orrs	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	4910      	ldr	r1, [pc, #64]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a82:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a88:	f7fb ff3e 	bl	8001908 <HAL_GetTick>
 8005a8c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a90:	f7fb ff3a 	bl	8001908 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e007      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aa2:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aae:	d1ef      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3730      	adds	r7, #48	@ 0x30
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	42470070 	.word	0x42470070

08005ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac8:	b0ae      	sub	sp, #184	@ 0xb8
 8005aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aea:	4bcb      	ldr	r3, [pc, #812]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	f200 8206 	bhi.w	8005f04 <HAL_RCC_GetSysClockFreq+0x440>
 8005af8:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b35 	.word	0x08005b35
 8005b04:	08005f05 	.word	0x08005f05
 8005b08:	08005f05 	.word	0x08005f05
 8005b0c:	08005f05 	.word	0x08005f05
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005f05 	.word	0x08005f05
 8005b18:	08005f05 	.word	0x08005f05
 8005b1c:	08005f05 	.word	0x08005f05
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005f05 	.word	0x08005f05
 8005b28:	08005f05 	.word	0x08005f05
 8005b2c:	08005f05 	.word	0x08005f05
 8005b30:	08005d35 	.word	0x08005d35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b34:	4bb9      	ldr	r3, [pc, #740]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x358>)
 8005b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8005b3a:	e1e7      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b3c:	4bb8      	ldr	r3, [pc, #736]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b42:	e1e3      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b44:	4bb4      	ldr	r3, [pc, #720]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b50:	4bb1      	ldr	r3, [pc, #708]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d071      	beq.n	8005c40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5c:	4bae      	ldr	r3, [pc, #696]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	099b      	lsrs	r3, r3, #6
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b68:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b82:	4622      	mov	r2, r4
 8005b84:	462b      	mov	r3, r5
 8005b86:	f04f 0000 	mov.w	r0, #0
 8005b8a:	f04f 0100 	mov.w	r1, #0
 8005b8e:	0159      	lsls	r1, r3, #5
 8005b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b94:	0150      	lsls	r0, r2, #5
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	1a51      	subs	r1, r2, r1
 8005b9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	018b      	lsls	r3, r1, #6
 8005bb8:	4641      	mov	r1, r8
 8005bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bbe:	4641      	mov	r1, r8
 8005bc0:	018a      	lsls	r2, r1, #6
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	1a51      	subs	r1, r2, r1
 8005bc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bc8:	4649      	mov	r1, r9
 8005bca:	eb63 0301 	sbc.w	r3, r3, r1
 8005bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005bdc:	4649      	mov	r1, r9
 8005bde:	00cb      	lsls	r3, r1, #3
 8005be0:	4641      	mov	r1, r8
 8005be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be6:	4641      	mov	r1, r8
 8005be8:	00ca      	lsls	r2, r1, #3
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	189b      	adds	r3, r3, r2
 8005bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf6:	462b      	mov	r3, r5
 8005bf8:	460a      	mov	r2, r1
 8005bfa:	eb42 0303 	adc.w	r3, r2, r3
 8005bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	024b      	lsls	r3, r1, #9
 8005c10:	4621      	mov	r1, r4
 8005c12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c16:	4621      	mov	r1, r4
 8005c18:	024a      	lsls	r2, r1, #9
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005c30:	f7fa fb46 	bl	80002c0 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4613      	mov	r3, r2
 8005c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c3e:	e067      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c40:	4b75      	ldr	r3, [pc, #468]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	099b      	lsrs	r3, r3, #6
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c4c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005c62:	4622      	mov	r2, r4
 8005c64:	462b      	mov	r3, r5
 8005c66:	f04f 0000 	mov.w	r0, #0
 8005c6a:	f04f 0100 	mov.w	r1, #0
 8005c6e:	0159      	lsls	r1, r3, #5
 8005c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c74:	0150      	lsls	r0, r2, #5
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	1a51      	subs	r1, r2, r1
 8005c7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005c80:	4629      	mov	r1, r5
 8005c82:	eb63 0301 	sbc.w	r3, r3, r1
 8005c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005c94:	4649      	mov	r1, r9
 8005c96:	018b      	lsls	r3, r1, #6
 8005c98:	4641      	mov	r1, r8
 8005c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	018a      	lsls	r2, r1, #6
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ca8:	4649      	mov	r1, r9
 8005caa:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cc2:	4692      	mov	sl, r2
 8005cc4:	469b      	mov	fp, r3
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	eb1a 0303 	adds.w	r3, sl, r3
 8005ccc:	623b      	str	r3, [r7, #32]
 8005cce:	462b      	mov	r3, r5
 8005cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	028b      	lsls	r3, r1, #10
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cec:	4621      	mov	r1, r4
 8005cee:	028a      	lsls	r2, r1, #10
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cfc:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005d02:	f7fa fadd 	bl	80002c0 <__aeabi_uldivmod>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d10:	4b41      	ldr	r3, [pc, #260]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8005d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d32:	e0eb      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d34:	4b38      	ldr	r3, [pc, #224]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d40:	4b35      	ldr	r3, [pc, #212]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d06b      	beq.n	8005e24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d4c:	4b32      	ldr	r3, [pc, #200]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	099b      	lsrs	r3, r3, #6
 8005d52:	2200      	movs	r2, #0
 8005d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d60:	2300      	movs	r3, #0
 8005d62:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005d68:	4622      	mov	r2, r4
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	f04f 0000 	mov.w	r0, #0
 8005d70:	f04f 0100 	mov.w	r1, #0
 8005d74:	0159      	lsls	r1, r3, #5
 8005d76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d7a:	0150      	lsls	r0, r2, #5
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4621      	mov	r1, r4
 8005d82:	1a51      	subs	r1, r2, r1
 8005d84:	61b9      	str	r1, [r7, #24]
 8005d86:	4629      	mov	r1, r5
 8005d88:	eb63 0301 	sbc.w	r3, r3, r1
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	018b      	lsls	r3, r1, #6
 8005d9e:	4651      	mov	r1, sl
 8005da0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005da4:	4651      	mov	r1, sl
 8005da6:	018a      	lsls	r2, r1, #6
 8005da8:	4651      	mov	r1, sl
 8005daa:	ebb2 0801 	subs.w	r8, r2, r1
 8005dae:	4659      	mov	r1, fp
 8005db0:	eb63 0901 	sbc.w	r9, r3, r1
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dc8:	4690      	mov	r8, r2
 8005dca:	4699      	mov	r9, r3
 8005dcc:	4623      	mov	r3, r4
 8005dce:	eb18 0303 	adds.w	r3, r8, r3
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	462b      	mov	r3, r5
 8005dd6:	eb49 0303 	adc.w	r3, r9, r3
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005de8:	4629      	mov	r1, r5
 8005dea:	024b      	lsls	r3, r1, #9
 8005dec:	4621      	mov	r1, r4
 8005dee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005df2:	4621      	mov	r1, r4
 8005df4:	024a      	lsls	r2, r1, #9
 8005df6:	4610      	mov	r0, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dfe:	2200      	movs	r2, #0
 8005e00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005e04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e08:	f7fa fa5a 	bl	80002c0 <__aeabi_uldivmod>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4613      	mov	r3, r2
 8005e12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e16:	e065      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x420>
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	00f42400 	.word	0x00f42400
 8005e20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e24:	4b3d      	ldr	r3, [pc, #244]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x458>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	099b      	lsrs	r3, r3, #6
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	4611      	mov	r1, r2
 8005e30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e34:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e36:	2300      	movs	r3, #0
 8005e38:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005e3e:	4642      	mov	r2, r8
 8005e40:	464b      	mov	r3, r9
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f04f 0100 	mov.w	r1, #0
 8005e4a:	0159      	lsls	r1, r3, #5
 8005e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e50:	0150      	lsls	r0, r2, #5
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4641      	mov	r1, r8
 8005e58:	1a51      	subs	r1, r2, r1
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005e70:	4659      	mov	r1, fp
 8005e72:	018b      	lsls	r3, r1, #6
 8005e74:	4651      	mov	r1, sl
 8005e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	018a      	lsls	r2, r1, #6
 8005e7e:	4651      	mov	r1, sl
 8005e80:	1a54      	subs	r4, r2, r1
 8005e82:	4659      	mov	r1, fp
 8005e84:	eb63 0501 	sbc.w	r5, r3, r1
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	00eb      	lsls	r3, r5, #3
 8005e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e96:	00e2      	lsls	r2, r4, #3
 8005e98:	4614      	mov	r4, r2
 8005e9a:	461d      	mov	r5, r3
 8005e9c:	4643      	mov	r3, r8
 8005e9e:	18e3      	adds	r3, r4, r3
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	eb45 0303 	adc.w	r3, r5, r3
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	028b      	lsls	r3, r1, #10
 8005eba:	4621      	mov	r1, r4
 8005ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	028a      	lsls	r2, r1, #10
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ecc:	2200      	movs	r2, #0
 8005ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ed0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005ed2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ed6:	f7fa f9f3 	bl	80002c0 <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4613      	mov	r3, r2
 8005ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x458>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	0f1b      	lsrs	r3, r3, #28
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8005ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f02:	e003      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f04:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	37b8      	adds	r7, #184	@ 0xb8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	00f42400 	.word	0x00f42400

08005f24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e28d      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 8083 	beq.w	800604a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f44:	4b94      	ldr	r3, [pc, #592]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 030c 	and.w	r3, r3, #12
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d019      	beq.n	8005f84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f50:	4b91      	ldr	r3, [pc, #580]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d106      	bne.n	8005f6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f5c:	4b8e      	ldr	r3, [pc, #568]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f68:	d00c      	beq.n	8005f84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f72:	2b0c      	cmp	r3, #12
 8005f74:	d112      	bne.n	8005f9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f76:	4b88      	ldr	r3, [pc, #544]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f82:	d10b      	bne.n	8005f9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f84:	4b84      	ldr	r3, [pc, #528]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05b      	beq.n	8006048 <HAL_RCC_OscConfig+0x124>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d157      	bne.n	8006048 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e25a      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa4:	d106      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x90>
 8005fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a7b      	ldr	r2, [pc, #492]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e01d      	b.n	8005ff0 <HAL_RCC_OscConfig+0xcc>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_RCC_OscConfig+0xb4>
 8005fbe:	4b76      	ldr	r3, [pc, #472]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a75      	ldr	r2, [pc, #468]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	4b73      	ldr	r3, [pc, #460]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a72      	ldr	r2, [pc, #456]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e00b      	b.n	8005ff0 <HAL_RCC_OscConfig+0xcc>
 8005fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4b6c      	ldr	r3, [pc, #432]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a6b      	ldr	r2, [pc, #428]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8005fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fb fc86 	bl	8001908 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006000:	f7fb fc82 	bl	8001908 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	@ 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e21f      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	4b61      	ldr	r3, [pc, #388]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0xdc>
 800601e:	e014      	b.n	800604a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fb fc72 	bl	8001908 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006028:	f7fb fc6e 	bl	8001908 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e20b      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603a:	4b57      	ldr	r3, [pc, #348]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0x104>
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d06f      	beq.n	8006136 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006056:	4b50      	ldr	r3, [pc, #320]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
 800605e:	2b00      	cmp	r3, #0
 8006060:	d017      	beq.n	8006092 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006062:	4b4d      	ldr	r3, [pc, #308]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800606a:	2b08      	cmp	r3, #8
 800606c:	d105      	bne.n	800607a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800606e:	4b4a      	ldr	r3, [pc, #296]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800607a:	4b47      	ldr	r3, [pc, #284]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006082:	2b0c      	cmp	r3, #12
 8006084:	d11c      	bne.n	80060c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006086:	4b44      	ldr	r3, [pc, #272]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d116      	bne.n	80060c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006092:	4b41      	ldr	r3, [pc, #260]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_RCC_OscConfig+0x186>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d001      	beq.n	80060aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e1d3      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4937      	ldr	r1, [pc, #220]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060be:	e03a      	b.n	8006136 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d020      	beq.n	800610a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060c8:	4b34      	ldr	r3, [pc, #208]	@ (800619c <HAL_RCC_OscConfig+0x278>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ce:	f7fb fc1b 	bl	8001908 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060d6:	f7fb fc17 	bl	8001908 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e1b4      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f4:	4b28      	ldr	r3, [pc, #160]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4925      	ldr	r1, [pc, #148]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 8006104:	4313      	orrs	r3, r2
 8006106:	600b      	str	r3, [r1, #0]
 8006108:	e015      	b.n	8006136 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610a:	4b24      	ldr	r3, [pc, #144]	@ (800619c <HAL_RCC_OscConfig+0x278>)
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fb fbfa 	bl	8001908 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006118:	f7fb fbf6 	bl	8001908 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e193      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612a:	4b1b      	ldr	r3, [pc, #108]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d036      	beq.n	80061b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d016      	beq.n	8006178 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800614a:	4b15      	ldr	r3, [pc, #84]	@ (80061a0 <HAL_RCC_OscConfig+0x27c>)
 800614c:	2201      	movs	r2, #1
 800614e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fb fbda 	bl	8001908 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006158:	f7fb fbd6 	bl	8001908 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e173      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616a:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <HAL_RCC_OscConfig+0x274>)
 800616c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0x234>
 8006176:	e01b      	b.n	80061b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006178:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <HAL_RCC_OscConfig+0x27c>)
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617e:	f7fb fbc3 	bl	8001908 <HAL_GetTick>
 8006182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006184:	e00e      	b.n	80061a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006186:	f7fb fbbf 	bl	8001908 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d907      	bls.n	80061a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e15c      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
 8006198:	40023800 	.word	0x40023800
 800619c:	42470000 	.word	0x42470000
 80061a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a4:	4b8a      	ldr	r3, [pc, #552]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80061a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ea      	bne.n	8006186 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8097 	beq.w	80062ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061c2:	4b83      	ldr	r3, [pc, #524]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10f      	bne.n	80061ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	4b7f      	ldr	r3, [pc, #508]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	4a7e      	ldr	r2, [pc, #504]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80061d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80061de:	4b7c      	ldr	r3, [pc, #496]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ee:	4b79      	ldr	r3, [pc, #484]	@ (80063d4 <HAL_RCC_OscConfig+0x4b0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d118      	bne.n	800622c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061fa:	4b76      	ldr	r3, [pc, #472]	@ (80063d4 <HAL_RCC_OscConfig+0x4b0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a75      	ldr	r2, [pc, #468]	@ (80063d4 <HAL_RCC_OscConfig+0x4b0>)
 8006200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006206:	f7fb fb7f 	bl	8001908 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800620e:	f7fb fb7b 	bl	8001908 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e118      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006220:	4b6c      	ldr	r3, [pc, #432]	@ (80063d4 <HAL_RCC_OscConfig+0x4b0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d106      	bne.n	8006242 <HAL_RCC_OscConfig+0x31e>
 8006234:	4b66      	ldr	r3, [pc, #408]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006238:	4a65      	ldr	r2, [pc, #404]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006240:	e01c      	b.n	800627c <HAL_RCC_OscConfig+0x358>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b05      	cmp	r3, #5
 8006248:	d10c      	bne.n	8006264 <HAL_RCC_OscConfig+0x340>
 800624a:	4b61      	ldr	r3, [pc, #388]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624e:	4a60      	ldr	r2, [pc, #384]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 8006250:	f043 0304 	orr.w	r3, r3, #4
 8006254:	6713      	str	r3, [r2, #112]	@ 0x70
 8006256:	4b5e      	ldr	r3, [pc, #376]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625a:	4a5d      	ldr	r2, [pc, #372]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	6713      	str	r3, [r2, #112]	@ 0x70
 8006262:	e00b      	b.n	800627c <HAL_RCC_OscConfig+0x358>
 8006264:	4b5a      	ldr	r3, [pc, #360]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 8006266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006268:	4a59      	ldr	r2, [pc, #356]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006270:	4b57      	ldr	r3, [pc, #348]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 8006272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006274:	4a56      	ldr	r2, [pc, #344]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 8006276:	f023 0304 	bic.w	r3, r3, #4
 800627a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d015      	beq.n	80062b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006284:	f7fb fb40 	bl	8001908 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628a:	e00a      	b.n	80062a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800628c:	f7fb fb3c 	bl	8001908 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e0d7      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a2:	4b4b      	ldr	r3, [pc, #300]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80062a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0ee      	beq.n	800628c <HAL_RCC_OscConfig+0x368>
 80062ae:	e014      	b.n	80062da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b0:	f7fb fb2a 	bl	8001908 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b6:	e00a      	b.n	80062ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b8:	f7fb fb26 	bl	8001908 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e0c1      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ce:	4b40      	ldr	r3, [pc, #256]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1ee      	bne.n	80062b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062da:	7dfb      	ldrb	r3, [r7, #23]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d105      	bne.n	80062ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062e0:	4b3b      	ldr	r3, [pc, #236]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80062e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e4:	4a3a      	ldr	r2, [pc, #232]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80062e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80ad 	beq.w	8006450 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062f6:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d060      	beq.n	80063c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d145      	bne.n	8006396 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630a:	4b33      	ldr	r3, [pc, #204]	@ (80063d8 <HAL_RCC_OscConfig+0x4b4>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006310:	f7fb fafa 	bl	8001908 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006318:	f7fb faf6 	bl	8001908 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e093      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632a:	4b29      	ldr	r3, [pc, #164]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f0      	bne.n	8006318 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69da      	ldr	r2, [r3, #28]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	019b      	lsls	r3, r3, #6
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	3b01      	subs	r3, #1
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006358:	061b      	lsls	r3, r3, #24
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006360:	071b      	lsls	r3, r3, #28
 8006362:	491b      	ldr	r1, [pc, #108]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 8006364:	4313      	orrs	r3, r2
 8006366:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006368:	4b1b      	ldr	r3, [pc, #108]	@ (80063d8 <HAL_RCC_OscConfig+0x4b4>)
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636e:	f7fb facb 	bl	8001908 <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006376:	f7fb fac7 	bl	8001908 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e064      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006388:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0f0      	beq.n	8006376 <HAL_RCC_OscConfig+0x452>
 8006394:	e05c      	b.n	8006450 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006396:	4b10      	ldr	r3, [pc, #64]	@ (80063d8 <HAL_RCC_OscConfig+0x4b4>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fb fab4 	bl	8001908 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063a4:	f7fb fab0 	bl	8001908 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e04d      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b6:	4b06      	ldr	r3, [pc, #24]	@ (80063d0 <HAL_RCC_OscConfig+0x4ac>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCC_OscConfig+0x480>
 80063c2:	e045      	b.n	8006450 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d107      	bne.n	80063dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e040      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
 80063d0:	40023800 	.word	0x40023800
 80063d4:	40007000 	.word	0x40007000
 80063d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063dc:	4b1f      	ldr	r3, [pc, #124]	@ (800645c <HAL_RCC_OscConfig+0x538>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d030      	beq.n	800644c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d129      	bne.n	800644c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006402:	429a      	cmp	r2, r3
 8006404:	d122      	bne.n	800644c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800640c:	4013      	ands	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006414:	4293      	cmp	r3, r2
 8006416:	d119      	bne.n	800644c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006422:	085b      	lsrs	r3, r3, #1
 8006424:	3b01      	subs	r3, #1
 8006426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006428:	429a      	cmp	r2, r3
 800642a:	d10f      	bne.n	800644c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d107      	bne.n	800644c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006446:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800

08006460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e041      	b.n	80064f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fa ff9a 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f000 fb40 	bl	8006b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e041      	b.n	8006594 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fa ff29 	bl	800137c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3304      	adds	r3, #4
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f000 faf1 	bl	8006b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <HAL_TIM_PWM_Start+0x24>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	e022      	b.n	8006606 <HAL_TIM_PWM_Start+0x6a>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d109      	bne.n	80065da <HAL_TIM_PWM_Start+0x3e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	bf14      	ite	ne
 80065d2:	2301      	movne	r3, #1
 80065d4:	2300      	moveq	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	e015      	b.n	8006606 <HAL_TIM_PWM_Start+0x6a>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d109      	bne.n	80065f4 <HAL_TIM_PWM_Start+0x58>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	bf14      	ite	ne
 80065ec:	2301      	movne	r3, #1
 80065ee:	2300      	moveq	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	e008      	b.n	8006606 <HAL_TIM_PWM_Start+0x6a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e07c      	b.n	8006708 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <HAL_TIM_PWM_Start+0x82>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800661c:	e013      	b.n	8006646 <HAL_TIM_PWM_Start+0xaa>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d104      	bne.n	800662e <HAL_TIM_PWM_Start+0x92>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800662c:	e00b      	b.n	8006646 <HAL_TIM_PWM_Start+0xaa>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b08      	cmp	r3, #8
 8006632:	d104      	bne.n	800663e <HAL_TIM_PWM_Start+0xa2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800663c:	e003      	b.n	8006646 <HAL_TIM_PWM_Start+0xaa>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2201      	movs	r2, #1
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fcb8 	bl	8006fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a2d      	ldr	r2, [pc, #180]	@ (8006710 <HAL_TIM_PWM_Start+0x174>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIM_PWM_Start+0xcc>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a2c      	ldr	r2, [pc, #176]	@ (8006714 <HAL_TIM_PWM_Start+0x178>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_TIM_PWM_Start+0xd0>
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <HAL_TIM_PWM_Start+0xd2>
 800666c:	2300      	movs	r3, #0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006680:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a22      	ldr	r2, [pc, #136]	@ (8006710 <HAL_TIM_PWM_Start+0x174>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d022      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x136>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006694:	d01d      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x136>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1f      	ldr	r2, [pc, #124]	@ (8006718 <HAL_TIM_PWM_Start+0x17c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d018      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x136>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1d      	ldr	r2, [pc, #116]	@ (800671c <HAL_TIM_PWM_Start+0x180>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x136>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006720 <HAL_TIM_PWM_Start+0x184>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00e      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x136>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a16      	ldr	r2, [pc, #88]	@ (8006714 <HAL_TIM_PWM_Start+0x178>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d009      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x136>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a18      	ldr	r2, [pc, #96]	@ (8006724 <HAL_TIM_PWM_Start+0x188>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d004      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x136>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a16      	ldr	r2, [pc, #88]	@ (8006728 <HAL_TIM_PWM_Start+0x18c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d111      	bne.n	80066f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b06      	cmp	r3, #6
 80066e2:	d010      	beq.n	8006706 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f4:	e007      	b.n	8006706 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0201 	orr.w	r2, r2, #1
 8006704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40010000 	.word	0x40010000
 8006714:	40010400 	.word	0x40010400
 8006718:	40000400 	.word	0x40000400
 800671c:	40000800 	.word	0x40000800
 8006720:	40000c00 	.word	0x40000c00
 8006724:	40014000 	.word	0x40014000
 8006728:	40001800 	.word	0x40001800

0800672c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b02      	cmp	r3, #2
 8006740:	d122      	bne.n	8006788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b02      	cmp	r3, #2
 800674e:	d11b      	bne.n	8006788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0202 	mvn.w	r2, #2
 8006758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9ba 	bl	8006ae8 <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f9ac 	bl	8006ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f9bd 	bl	8006afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b04      	cmp	r3, #4
 8006794:	d122      	bne.n	80067dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d11b      	bne.n	80067dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0204 	mvn.w	r2, #4
 80067ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2202      	movs	r2, #2
 80067b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f990 	bl	8006ae8 <HAL_TIM_IC_CaptureCallback>
 80067c8:	e005      	b.n	80067d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f982 	bl	8006ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f993 	bl	8006afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d122      	bne.n	8006830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0308 	and.w	r3, r3, #8
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d11b      	bne.n	8006830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0208 	mvn.w	r2, #8
 8006800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2204      	movs	r2, #4
 8006806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f966 	bl	8006ae8 <HAL_TIM_IC_CaptureCallback>
 800681c:	e005      	b.n	800682a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f958 	bl	8006ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f969 	bl	8006afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b10      	cmp	r3, #16
 800683c:	d122      	bne.n	8006884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b10      	cmp	r3, #16
 800684a:	d11b      	bne.n	8006884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0210 	mvn.w	r2, #16
 8006854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2208      	movs	r2, #8
 800685a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f93c 	bl	8006ae8 <HAL_TIM_IC_CaptureCallback>
 8006870:	e005      	b.n	800687e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f92e 	bl	8006ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f93f 	bl	8006afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10e      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b01      	cmp	r3, #1
 800689e:	d107      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0201 	mvn.w	r2, #1
 80068a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f908 	bl	8006ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ba:	2b80      	cmp	r3, #128	@ 0x80
 80068bc:	d10e      	bne.n	80068dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c8:	2b80      	cmp	r3, #128	@ 0x80
 80068ca:	d107      	bne.n	80068dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80068d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fc72 	bl	80071c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b40      	cmp	r3, #64	@ 0x40
 80068e8:	d10e      	bne.n	8006908 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f4:	2b40      	cmp	r3, #64	@ 0x40
 80068f6:	d107      	bne.n	8006908 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f904 	bl	8006b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b20      	cmp	r3, #32
 8006914:	d10e      	bne.n	8006934 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b20      	cmp	r3, #32
 8006922:	d107      	bne.n	8006934 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0220 	mvn.w	r2, #32
 800692c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fc3c 	bl	80071ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006956:	2302      	movs	r3, #2
 8006958:	e0ae      	b.n	8006ab8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b0c      	cmp	r3, #12
 8006966:	f200 809f 	bhi.w	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800696a:	a201      	add	r2, pc, #4	@ (adr r2, 8006970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	080069a5 	.word	0x080069a5
 8006974:	08006aa9 	.word	0x08006aa9
 8006978:	08006aa9 	.word	0x08006aa9
 800697c:	08006aa9 	.word	0x08006aa9
 8006980:	080069e5 	.word	0x080069e5
 8006984:	08006aa9 	.word	0x08006aa9
 8006988:	08006aa9 	.word	0x08006aa9
 800698c:	08006aa9 	.word	0x08006aa9
 8006990:	08006a27 	.word	0x08006a27
 8006994:	08006aa9 	.word	0x08006aa9
 8006998:	08006aa9 	.word	0x08006aa9
 800699c:	08006aa9 	.word	0x08006aa9
 80069a0:	08006a67 	.word	0x08006a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 f95a 	bl	8006c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0208 	orr.w	r2, r2, #8
 80069be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0204 	bic.w	r2, r2, #4
 80069ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6999      	ldr	r1, [r3, #24]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	691a      	ldr	r2, [r3, #16]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	619a      	str	r2, [r3, #24]
      break;
 80069e2:	e064      	b.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f9aa 	bl	8006d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6999      	ldr	r1, [r3, #24]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	021a      	lsls	r2, r3, #8
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	619a      	str	r2, [r3, #24]
      break;
 8006a24:	e043      	b.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 f9ff 	bl	8006e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0208 	orr.w	r2, r2, #8
 8006a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0204 	bic.w	r2, r2, #4
 8006a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69d9      	ldr	r1, [r3, #28]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	61da      	str	r2, [r3, #28]
      break;
 8006a64:	e023      	b.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fa53 	bl	8006f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69d9      	ldr	r1, [r3, #28]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	021a      	lsls	r2, r3, #8
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	61da      	str	r2, [r3, #28]
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006aac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a40      	ldr	r2, [pc, #256]	@ (8006c38 <TIM_Base_SetConfig+0x114>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b42:	d00f      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a3d      	ldr	r2, [pc, #244]	@ (8006c3c <TIM_Base_SetConfig+0x118>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8006c40 <TIM_Base_SetConfig+0x11c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a3b      	ldr	r2, [pc, #236]	@ (8006c44 <TIM_Base_SetConfig+0x120>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_Base_SetConfig+0x40>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8006c48 <TIM_Base_SetConfig+0x124>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d108      	bne.n	8006b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2f      	ldr	r2, [pc, #188]	@ (8006c38 <TIM_Base_SetConfig+0x114>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d02b      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b84:	d027      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2c      	ldr	r2, [pc, #176]	@ (8006c3c <TIM_Base_SetConfig+0x118>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d023      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a2b      	ldr	r2, [pc, #172]	@ (8006c40 <TIM_Base_SetConfig+0x11c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01f      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a2a      	ldr	r2, [pc, #168]	@ (8006c44 <TIM_Base_SetConfig+0x120>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d01b      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a29      	ldr	r2, [pc, #164]	@ (8006c48 <TIM_Base_SetConfig+0x124>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d017      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a28      	ldr	r2, [pc, #160]	@ (8006c4c <TIM_Base_SetConfig+0x128>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d013      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a27      	ldr	r2, [pc, #156]	@ (8006c50 <TIM_Base_SetConfig+0x12c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00f      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a26      	ldr	r2, [pc, #152]	@ (8006c54 <TIM_Base_SetConfig+0x130>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00b      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a25      	ldr	r2, [pc, #148]	@ (8006c58 <TIM_Base_SetConfig+0x134>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a24      	ldr	r2, [pc, #144]	@ (8006c5c <TIM_Base_SetConfig+0x138>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	@ (8006c60 <TIM_Base_SetConfig+0x13c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d108      	bne.n	8006be8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c38 <TIM_Base_SetConfig+0x114>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_Base_SetConfig+0xf8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a0c      	ldr	r2, [pc, #48]	@ (8006c48 <TIM_Base_SetConfig+0x124>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d103      	bne.n	8006c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	615a      	str	r2, [r3, #20]
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40000400 	.word	0x40000400
 8006c40:	40000800 	.word	0x40000800
 8006c44:	40000c00 	.word	0x40000c00
 8006c48:	40010400 	.word	0x40010400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014400 	.word	0x40014400
 8006c54:	40014800 	.word	0x40014800
 8006c58:	40001800 	.word	0x40001800
 8006c5c:	40001c00 	.word	0x40001c00
 8006c60:	40002000 	.word	0x40002000

08006c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f023 0201 	bic.w	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0303 	bic.w	r3, r3, #3
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f023 0302 	bic.w	r3, r3, #2
 8006cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a20      	ldr	r2, [pc, #128]	@ (8006d3c <TIM_OC1_SetConfig+0xd8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC1_SetConfig+0x64>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d40 <TIM_OC1_SetConfig+0xdc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d10c      	bne.n	8006ce2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f023 0308 	bic.w	r3, r3, #8
 8006cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f023 0304 	bic.w	r3, r3, #4
 8006ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a15      	ldr	r2, [pc, #84]	@ (8006d3c <TIM_OC1_SetConfig+0xd8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d003      	beq.n	8006cf2 <TIM_OC1_SetConfig+0x8e>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a14      	ldr	r2, [pc, #80]	@ (8006d40 <TIM_OC1_SetConfig+0xdc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d111      	bne.n	8006d16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	621a      	str	r2, [r3, #32]
}
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400

08006d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f023 0210 	bic.w	r2, r3, #16
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f023 0320 	bic.w	r3, r3, #32
 8006d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a22      	ldr	r2, [pc, #136]	@ (8006e28 <TIM_OC2_SetConfig+0xe4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_OC2_SetConfig+0x68>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a21      	ldr	r2, [pc, #132]	@ (8006e2c <TIM_OC2_SetConfig+0xe8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d10d      	bne.n	8006dc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a17      	ldr	r2, [pc, #92]	@ (8006e28 <TIM_OC2_SetConfig+0xe4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_OC2_SetConfig+0x94>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a16      	ldr	r2, [pc, #88]	@ (8006e2c <TIM_OC2_SetConfig+0xe8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d113      	bne.n	8006e00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	621a      	str	r2, [r3, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40010400 	.word	0x40010400

08006e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a21      	ldr	r2, [pc, #132]	@ (8006f10 <TIM_OC3_SetConfig+0xe0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_OC3_SetConfig+0x66>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a20      	ldr	r2, [pc, #128]	@ (8006f14 <TIM_OC3_SetConfig+0xe4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d10d      	bne.n	8006eb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a16      	ldr	r2, [pc, #88]	@ (8006f10 <TIM_OC3_SetConfig+0xe0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_OC3_SetConfig+0x92>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	@ (8006f14 <TIM_OC3_SetConfig+0xe4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d113      	bne.n	8006eea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	621a      	str	r2, [r3, #32]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40010400 	.word	0x40010400

08006f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	031b      	lsls	r3, r3, #12
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a12      	ldr	r2, [pc, #72]	@ (8006fbc <TIM_OC4_SetConfig+0xa4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC4_SetConfig+0x68>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a11      	ldr	r2, [pc, #68]	@ (8006fc0 <TIM_OC4_SetConfig+0xa8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d109      	bne.n	8006f94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	019b      	lsls	r3, r3, #6
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40010000 	.word	0x40010000
 8006fc0:	40010400 	.word	0x40010400

08006fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a1a      	ldr	r2, [r3, #32]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	401a      	ands	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a1a      	ldr	r2, [r3, #32]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	621a      	str	r2, [r3, #32]
}
 8007002:	bf00      	nop
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
	...

08007010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007024:	2302      	movs	r3, #2
 8007026:	e05a      	b.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a21      	ldr	r2, [pc, #132]	@ (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d022      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007074:	d01d      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1d      	ldr	r2, [pc, #116]	@ (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d018      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1b      	ldr	r2, [pc, #108]	@ (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d013      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1a      	ldr	r2, [pc, #104]	@ (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00e      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a18      	ldr	r2, [pc, #96]	@ (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d009      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a17      	ldr	r2, [pc, #92]	@ (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d004      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a15      	ldr	r2, [pc, #84]	@ (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d10c      	bne.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	40000c00 	.word	0x40000c00
 80070fc:	40010400 	.word	0x40010400
 8007100:	40014000 	.word	0x40014000
 8007104:	40001800 	.word	0x40001800

08007108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007120:	2302      	movs	r3, #2
 8007122:	e03d      	b.n	80071a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e03f      	b.n	8007266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fa f942 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2224      	movs	r2, #36	@ 0x24
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fd7b 	bl	8007d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800722c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695a      	ldr	r2, [r3, #20]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800723c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800724c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b08a      	sub	sp, #40	@ 0x28
 8007272:	af02      	add	r7, sp, #8
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	603b      	str	r3, [r7, #0]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b20      	cmp	r3, #32
 800728c:	d17c      	bne.n	8007388 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_UART_Transmit+0x2c>
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e075      	b.n	800738a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_UART_Transmit+0x3e>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e06e      	b.n	800738a <HAL_UART_Transmit+0x11c>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2221      	movs	r2, #33	@ 0x21
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072c2:	f7fa fb21 	bl	8001908 <HAL_GetTick>
 80072c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	88fa      	ldrh	r2, [r7, #6]
 80072d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072dc:	d108      	bne.n	80072f0 <HAL_UART_Transmit+0x82>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	e003      	b.n	80072f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007300:	e02a      	b.n	8007358 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2200      	movs	r2, #0
 800730a:	2180      	movs	r1, #128	@ 0x80
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 faf9 	bl	8007904 <UART_WaitOnFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e036      	b.n	800738a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	3302      	adds	r3, #2
 8007336:	61bb      	str	r3, [r7, #24]
 8007338:	e007      	b.n	800734a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	781a      	ldrb	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	3301      	adds	r3, #1
 8007348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800734e:	b29b      	uxth	r3, r3
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1cf      	bne.n	8007302 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2200      	movs	r2, #0
 800736a:	2140      	movs	r1, #64	@ 0x40
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fac9 	bl	8007904 <UART_WaitOnFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e006      	b.n	800738a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	e000      	b.n	800738a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007388:	2302      	movs	r3, #2
  }
}
 800738a:	4618      	mov	r0, r3
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b0ba      	sub	sp, #232	@ 0xe8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10f      	bne.n	80073fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d009      	beq.n	80073fa <HAL_UART_IRQHandler+0x66>
 80073e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fbd3 	bl	8007b9e <UART_Receive_IT>
      return;
 80073f8:	e256      	b.n	80078a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80de 	beq.w	80075c0 <HAL_UART_IRQHandler+0x22c>
 8007404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007414:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80d1 	beq.w	80075c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800741e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <HAL_UART_IRQHandler+0xae>
 800742a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800742e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743a:	f043 0201 	orr.w	r2, r3, #1
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <HAL_UART_IRQHandler+0xd2>
 800744e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	f043 0202 	orr.w	r2, r3, #2
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_UART_IRQHandler+0xf6>
 8007472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	f043 0204 	orr.w	r2, r3, #4
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d011      	beq.n	80074ba <HAL_UART_IRQHandler+0x126>
 8007496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d105      	bne.n	80074ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	f043 0208 	orr.w	r2, r3, #8
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 81ed 	beq.w	800789e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_UART_IRQHandler+0x14e>
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fb5e 	bl	8007b9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ec:	2b40      	cmp	r3, #64	@ 0x40
 80074ee:	bf0c      	ite	eq
 80074f0:	2301      	moveq	r3, #1
 80074f2:	2300      	movne	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <HAL_UART_IRQHandler+0x17a>
 8007506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d04f      	beq.n	80075ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa66 	bl	80079e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751e:	2b40      	cmp	r3, #64	@ 0x40
 8007520:	d141      	bne.n	80075a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3314      	adds	r3, #20
 8007528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800753c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800754e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800755a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1d9      	bne.n	8007522 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007572:	2b00      	cmp	r3, #0
 8007574:	d013      	beq.n	800759e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757a:	4a7d      	ldr	r2, [pc, #500]	@ (8007770 <HAL_UART_IRQHandler+0x3dc>)
 800757c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007582:	4618      	mov	r0, r3
 8007584:	f7fa ff64 	bl	8002450 <HAL_DMA_Abort_IT>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d016      	beq.n	80075bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759c:	e00e      	b.n	80075bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f99a 	bl	80078d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a4:	e00a      	b.n	80075bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f996 	bl	80078d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ac:	e006      	b.n	80075bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f992 	bl	80078d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80075ba:	e170      	b.n	800789e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	bf00      	nop
    return;
 80075be:	e16e      	b.n	800789e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	f040 814a 	bne.w	800785e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8143 	beq.w	800785e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075dc:	f003 0310 	and.w	r3, r3, #16
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 813c 	beq.w	800785e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075e6:	2300      	movs	r3, #0
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	60bb      	str	r3, [r7, #8]
 80075fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007606:	2b40      	cmp	r3, #64	@ 0x40
 8007608:	f040 80b4 	bne.w	8007774 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8140 	beq.w	80078a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800762a:	429a      	cmp	r2, r3
 800762c:	f080 8139 	bcs.w	80078a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007636:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007642:	f000 8088 	beq.w	8007756 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	330c      	adds	r3, #12
 800764c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800765c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007664:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007672:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800767e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800768a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1d9      	bne.n	8007646 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3314      	adds	r3, #20
 8007698:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3314      	adds	r3, #20
 80076b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e1      	bne.n	8007692 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3314      	adds	r3, #20
 80076d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3314      	adds	r3, #20
 80076ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e3      	bne.n	80076ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007726:	f023 0310 	bic.w	r3, r3, #16
 800772a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007738:	65ba      	str	r2, [r7, #88]	@ 0x58
 800773a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800773e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e3      	bne.n	8007714 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	4618      	mov	r0, r3
 8007752:	f7fa fe0d 	bl	8002370 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800775e:	b29b      	uxth	r3, r3
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	b29b      	uxth	r3, r3
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f8c0 	bl	80078ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800776c:	e099      	b.n	80078a2 <HAL_UART_IRQHandler+0x50e>
 800776e:	bf00      	nop
 8007770:	08007aa7 	.word	0x08007aa7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800777c:	b29b      	uxth	r3, r3
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 808b 	beq.w	80078a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8086 	beq.w	80078a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	330c      	adds	r3, #12
 80077a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077be:	647a      	str	r2, [r7, #68]	@ 0x44
 80077c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e3      	bne.n	800779a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3314      	adds	r3, #20
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	623b      	str	r3, [r7, #32]
   return(result);
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3314      	adds	r3, #20
 80077f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80077f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e3      	bne.n	80077d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	330c      	adds	r3, #12
 800781e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	60fb      	str	r3, [r7, #12]
   return(result);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0310 	bic.w	r3, r3, #16
 800782e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	330c      	adds	r3, #12
 8007838:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800783c:	61fa      	str	r2, [r7, #28]
 800783e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	69b9      	ldr	r1, [r7, #24]
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	617b      	str	r3, [r7, #20]
   return(result);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e3      	bne.n	8007818 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f848 	bl	80078ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800785c:	e023      	b.n	80078a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800785e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <HAL_UART_IRQHandler+0x4ea>
 800786a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800786e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f929 	bl	8007ace <UART_Transmit_IT>
    return;
 800787c:	e014      	b.n	80078a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00e      	beq.n	80078a8 <HAL_UART_IRQHandler+0x514>
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d008      	beq.n	80078a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f969 	bl	8007b6e <UART_EndTransmit_IT>
    return;
 800789c:	e004      	b.n	80078a8 <HAL_UART_IRQHandler+0x514>
    return;
 800789e:	bf00      	nop
 80078a0:	e002      	b.n	80078a8 <HAL_UART_IRQHandler+0x514>
      return;
 80078a2:	bf00      	nop
 80078a4:	e000      	b.n	80078a8 <HAL_UART_IRQHandler+0x514>
      return;
 80078a6:	bf00      	nop
  }
}
 80078a8:	37e8      	adds	r7, #232	@ 0xe8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop

080078b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b090      	sub	sp, #64	@ 0x40
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007914:	e050      	b.n	80079b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d04c      	beq.n	80079b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800791e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <UART_WaitOnFlagUntilTimeout+0x30>
 8007924:	f7f9 fff0 	bl	8001908 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007930:	429a      	cmp	r2, r3
 8007932:	d241      	bcs.n	80079b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	330c      	adds	r3, #12
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007954:	637a      	str	r2, [r7, #52]	@ 0x34
 8007956:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800795a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e5      	bne.n	8007934 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3314      	adds	r3, #20
 800796e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	613b      	str	r3, [r7, #16]
   return(result);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3314      	adds	r3, #20
 8007986:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007988:	623a      	str	r2, [r7, #32]
 800798a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	69f9      	ldr	r1, [r7, #28]
 800798e:	6a3a      	ldr	r2, [r7, #32]
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	61bb      	str	r3, [r7, #24]
   return(result);
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e5      	bne.n	8007968 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e00f      	b.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4013      	ands	r3, r2
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	bf0c      	ite	eq
 80079c8:	2301      	moveq	r3, #1
 80079ca:	2300      	movne	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d09f      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3740      	adds	r7, #64	@ 0x40
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b095      	sub	sp, #84	@ 0x54
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	330c      	adds	r3, #12
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a08:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e5      	bne.n	80079e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3314      	adds	r3, #20
 8007a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3314      	adds	r3, #20
 8007a3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e5      	bne.n	8007a1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d119      	bne.n	8007a8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	330c      	adds	r3, #12
 8007a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f023 0310 	bic.w	r3, r3, #16
 8007a6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a78:	61ba      	str	r2, [r7, #24]
 8007a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6979      	ldr	r1, [r7, #20]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	613b      	str	r3, [r7, #16]
   return(result);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e5      	bne.n	8007a58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a9a:	bf00      	nop
 8007a9c:	3754      	adds	r7, #84	@ 0x54
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff ff09 	bl	80078d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b21      	cmp	r3, #33	@ 0x21
 8007ae0:	d13e      	bne.n	8007b60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aea:	d114      	bne.n	8007b16 <UART_Transmit_IT+0x48>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d110      	bne.n	8007b16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	1c9a      	adds	r2, r3, #2
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	621a      	str	r2, [r3, #32]
 8007b14:	e008      	b.n	8007b28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	1c59      	adds	r1, r3, #1
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6211      	str	r1, [r2, #32]
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	4619      	mov	r1, r3
 8007b36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10f      	bne.n	8007b5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e000      	b.n	8007b62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b60:	2302      	movs	r3, #2
  }
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff fe8e 	bl	80078b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b08c      	sub	sp, #48	@ 0x30
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b22      	cmp	r3, #34	@ 0x22
 8007bb0:	f040 80ab 	bne.w	8007d0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bbc:	d117      	bne.n	8007bee <UART_Receive_IT+0x50>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d113      	bne.n	8007bee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	1c9a      	adds	r2, r3, #2
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bec:	e026      	b.n	8007c3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c00:	d007      	beq.n	8007c12 <UART_Receive_IT+0x74>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <UART_Receive_IT+0x82>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	e008      	b.n	8007c32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d15a      	bne.n	8007d06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0220 	bic.w	r2, r2, #32
 8007c5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695a      	ldr	r2, [r3, #20]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d135      	bne.n	8007cfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	330c      	adds	r3, #12
 8007c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f023 0310 	bic.w	r3, r3, #16
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	330c      	adds	r3, #12
 8007cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb6:	623a      	str	r2, [r7, #32]
 8007cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	69f9      	ldr	r1, [r7, #28]
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e5      	bne.n	8007c96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d10a      	bne.n	8007cee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fdf9 	bl	80078ec <HAL_UARTEx_RxEventCallback>
 8007cfa:	e002      	b.n	8007d02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff fde1 	bl	80078c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	e002      	b.n	8007d0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e000      	b.n	8007d0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d0a:	2302      	movs	r3, #2
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3730      	adds	r7, #48	@ 0x30
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d18:	b0c0      	sub	sp, #256	@ 0x100
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d30:	68d9      	ldr	r1, [r3, #12]
 8007d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	ea40 0301 	orr.w	r3, r0, r1
 8007d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d6c:	f021 010c 	bic.w	r1, r1, #12
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d7a:	430b      	orrs	r3, r1
 8007d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d8e:	6999      	ldr	r1, [r3, #24]
 8007d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	ea40 0301 	orr.w	r3, r0, r1
 8007d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4b8f      	ldr	r3, [pc, #572]	@ (8007fe0 <UART_SetConfig+0x2cc>)
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d005      	beq.n	8007db4 <UART_SetConfig+0xa0>
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	4b8d      	ldr	r3, [pc, #564]	@ (8007fe4 <UART_SetConfig+0x2d0>)
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d104      	bne.n	8007dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007db4:	f7fd fb48 	bl	8005448 <HAL_RCC_GetPCLK2Freq>
 8007db8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007dbc:	e003      	b.n	8007dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dbe:	f7fd fb2f 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8007dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dd0:	f040 810c 	bne.w	8007fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007de6:	4622      	mov	r2, r4
 8007de8:	462b      	mov	r3, r5
 8007dea:	1891      	adds	r1, r2, r2
 8007dec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007dee:	415b      	adcs	r3, r3
 8007df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007df6:	4621      	mov	r1, r4
 8007df8:	eb12 0801 	adds.w	r8, r2, r1
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	eb43 0901 	adc.w	r9, r3, r1
 8007e02:	f04f 0200 	mov.w	r2, #0
 8007e06:	f04f 0300 	mov.w	r3, #0
 8007e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e16:	4690      	mov	r8, r2
 8007e18:	4699      	mov	r9, r3
 8007e1a:	4623      	mov	r3, r4
 8007e1c:	eb18 0303 	adds.w	r3, r8, r3
 8007e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e24:	462b      	mov	r3, r5
 8007e26:	eb49 0303 	adc.w	r3, r9, r3
 8007e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e42:	460b      	mov	r3, r1
 8007e44:	18db      	adds	r3, r3, r3
 8007e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e48:	4613      	mov	r3, r2
 8007e4a:	eb42 0303 	adc.w	r3, r2, r3
 8007e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e58:	f7f8 fa32 	bl	80002c0 <__aeabi_uldivmod>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4b61      	ldr	r3, [pc, #388]	@ (8007fe8 <UART_SetConfig+0x2d4>)
 8007e62:	fba3 2302 	umull	r2, r3, r3, r2
 8007e66:	095b      	lsrs	r3, r3, #5
 8007e68:	011c      	lsls	r4, r3, #4
 8007e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	1891      	adds	r1, r2, r2
 8007e82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e84:	415b      	adcs	r3, r3
 8007e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e92:	4649      	mov	r1, r9
 8007e94:	eb43 0b01 	adc.w	fp, r3, r1
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eac:	4692      	mov	sl, r2
 8007eae:	469b      	mov	fp, r3
 8007eb0:	4643      	mov	r3, r8
 8007eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8007eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	18db      	adds	r3, r3, r3
 8007edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ede:	4613      	mov	r3, r2
 8007ee0:	eb42 0303 	adc.w	r3, r2, r3
 8007ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007eee:	f7f8 f9e7 	bl	80002c0 <__aeabi_uldivmod>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8007fe8 <UART_SetConfig+0x2d4>)
 8007efa:	fba3 2301 	umull	r2, r3, r3, r1
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	2264      	movs	r2, #100	@ 0x64
 8007f02:	fb02 f303 	mul.w	r3, r2, r3
 8007f06:	1acb      	subs	r3, r1, r3
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f0e:	4b36      	ldr	r3, [pc, #216]	@ (8007fe8 <UART_SetConfig+0x2d4>)
 8007f10:	fba3 2302 	umull	r2, r3, r3, r2
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f1c:	441c      	add	r4, r3
 8007f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f30:	4642      	mov	r2, r8
 8007f32:	464b      	mov	r3, r9
 8007f34:	1891      	adds	r1, r2, r2
 8007f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f38:	415b      	adcs	r3, r3
 8007f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f40:	4641      	mov	r1, r8
 8007f42:	1851      	adds	r1, r2, r1
 8007f44:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f46:	4649      	mov	r1, r9
 8007f48:	414b      	adcs	r3, r1
 8007f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f58:	4659      	mov	r1, fp
 8007f5a:	00cb      	lsls	r3, r1, #3
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f62:	4651      	mov	r1, sl
 8007f64:	00ca      	lsls	r2, r1, #3
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	189b      	adds	r3, r3, r2
 8007f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f74:	464b      	mov	r3, r9
 8007f76:	460a      	mov	r2, r1
 8007f78:	eb42 0303 	adc.w	r3, r2, r3
 8007f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f94:	460b      	mov	r3, r1
 8007f96:	18db      	adds	r3, r3, r3
 8007f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	eb42 0303 	adc.w	r3, r2, r3
 8007fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007faa:	f7f8 f989 	bl	80002c0 <__aeabi_uldivmod>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe8 <UART_SetConfig+0x2d4>)
 8007fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb8:	095b      	lsrs	r3, r3, #5
 8007fba:	2164      	movs	r1, #100	@ 0x64
 8007fbc:	fb01 f303 	mul.w	r3, r1, r3
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	3332      	adds	r3, #50	@ 0x32
 8007fc6:	4a08      	ldr	r2, [pc, #32]	@ (8007fe8 <UART_SetConfig+0x2d4>)
 8007fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	f003 0207 	and.w	r2, r3, #7
 8007fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4422      	add	r2, r4
 8007fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fdc:	e106      	b.n	80081ec <UART_SetConfig+0x4d8>
 8007fde:	bf00      	nop
 8007fe0:	40011000 	.word	0x40011000
 8007fe4:	40011400 	.word	0x40011400
 8007fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007ffe:	4642      	mov	r2, r8
 8008000:	464b      	mov	r3, r9
 8008002:	1891      	adds	r1, r2, r2
 8008004:	6239      	str	r1, [r7, #32]
 8008006:	415b      	adcs	r3, r3
 8008008:	627b      	str	r3, [r7, #36]	@ 0x24
 800800a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800800e:	4641      	mov	r1, r8
 8008010:	1854      	adds	r4, r2, r1
 8008012:	4649      	mov	r1, r9
 8008014:	eb43 0501 	adc.w	r5, r3, r1
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	f04f 0300 	mov.w	r3, #0
 8008020:	00eb      	lsls	r3, r5, #3
 8008022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008026:	00e2      	lsls	r2, r4, #3
 8008028:	4614      	mov	r4, r2
 800802a:	461d      	mov	r5, r3
 800802c:	4643      	mov	r3, r8
 800802e:	18e3      	adds	r3, r4, r3
 8008030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008034:	464b      	mov	r3, r9
 8008036:	eb45 0303 	adc.w	r3, r5, r3
 800803a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800803e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800804a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800805a:	4629      	mov	r1, r5
 800805c:	008b      	lsls	r3, r1, #2
 800805e:	4621      	mov	r1, r4
 8008060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008064:	4621      	mov	r1, r4
 8008066:	008a      	lsls	r2, r1, #2
 8008068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800806c:	f7f8 f928 	bl	80002c0 <__aeabi_uldivmod>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4b60      	ldr	r3, [pc, #384]	@ (80081f8 <UART_SetConfig+0x4e4>)
 8008076:	fba3 2302 	umull	r2, r3, r3, r2
 800807a:	095b      	lsrs	r3, r3, #5
 800807c:	011c      	lsls	r4, r3, #4
 800807e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008082:	2200      	movs	r2, #0
 8008084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800808c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008090:	4642      	mov	r2, r8
 8008092:	464b      	mov	r3, r9
 8008094:	1891      	adds	r1, r2, r2
 8008096:	61b9      	str	r1, [r7, #24]
 8008098:	415b      	adcs	r3, r3
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080a0:	4641      	mov	r1, r8
 80080a2:	1851      	adds	r1, r2, r1
 80080a4:	6139      	str	r1, [r7, #16]
 80080a6:	4649      	mov	r1, r9
 80080a8:	414b      	adcs	r3, r1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080b8:	4659      	mov	r1, fp
 80080ba:	00cb      	lsls	r3, r1, #3
 80080bc:	4651      	mov	r1, sl
 80080be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080c2:	4651      	mov	r1, sl
 80080c4:	00ca      	lsls	r2, r1, #3
 80080c6:	4610      	mov	r0, r2
 80080c8:	4619      	mov	r1, r3
 80080ca:	4603      	mov	r3, r0
 80080cc:	4642      	mov	r2, r8
 80080ce:	189b      	adds	r3, r3, r2
 80080d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080d4:	464b      	mov	r3, r9
 80080d6:	460a      	mov	r2, r1
 80080d8:	eb42 0303 	adc.w	r3, r2, r3
 80080dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080ec:	f04f 0200 	mov.w	r2, #0
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080f8:	4649      	mov	r1, r9
 80080fa:	008b      	lsls	r3, r1, #2
 80080fc:	4641      	mov	r1, r8
 80080fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008102:	4641      	mov	r1, r8
 8008104:	008a      	lsls	r2, r1, #2
 8008106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800810a:	f7f8 f8d9 	bl	80002c0 <__aeabi_uldivmod>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4611      	mov	r1, r2
 8008114:	4b38      	ldr	r3, [pc, #224]	@ (80081f8 <UART_SetConfig+0x4e4>)
 8008116:	fba3 2301 	umull	r2, r3, r3, r1
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	2264      	movs	r2, #100	@ 0x64
 800811e:	fb02 f303 	mul.w	r3, r2, r3
 8008122:	1acb      	subs	r3, r1, r3
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	3332      	adds	r3, #50	@ 0x32
 8008128:	4a33      	ldr	r2, [pc, #204]	@ (80081f8 <UART_SetConfig+0x4e4>)
 800812a:	fba2 2303 	umull	r2, r3, r2, r3
 800812e:	095b      	lsrs	r3, r3, #5
 8008130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008134:	441c      	add	r4, r3
 8008136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800813a:	2200      	movs	r2, #0
 800813c:	673b      	str	r3, [r7, #112]	@ 0x70
 800813e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008140:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008144:	4642      	mov	r2, r8
 8008146:	464b      	mov	r3, r9
 8008148:	1891      	adds	r1, r2, r2
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	415b      	adcs	r3, r3
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008154:	4641      	mov	r1, r8
 8008156:	1851      	adds	r1, r2, r1
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	4649      	mov	r1, r9
 800815c:	414b      	adcs	r3, r1
 800815e:	607b      	str	r3, [r7, #4]
 8008160:	f04f 0200 	mov.w	r2, #0
 8008164:	f04f 0300 	mov.w	r3, #0
 8008168:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800816c:	4659      	mov	r1, fp
 800816e:	00cb      	lsls	r3, r1, #3
 8008170:	4651      	mov	r1, sl
 8008172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008176:	4651      	mov	r1, sl
 8008178:	00ca      	lsls	r2, r1, #3
 800817a:	4610      	mov	r0, r2
 800817c:	4619      	mov	r1, r3
 800817e:	4603      	mov	r3, r0
 8008180:	4642      	mov	r2, r8
 8008182:	189b      	adds	r3, r3, r2
 8008184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008186:	464b      	mov	r3, r9
 8008188:	460a      	mov	r2, r1
 800818a:	eb42 0303 	adc.w	r3, r2, r3
 800818e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	663b      	str	r3, [r7, #96]	@ 0x60
 800819a:	667a      	str	r2, [r7, #100]	@ 0x64
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80081a8:	4649      	mov	r1, r9
 80081aa:	008b      	lsls	r3, r1, #2
 80081ac:	4641      	mov	r1, r8
 80081ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081b2:	4641      	mov	r1, r8
 80081b4:	008a      	lsls	r2, r1, #2
 80081b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80081ba:	f7f8 f881 	bl	80002c0 <__aeabi_uldivmod>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <UART_SetConfig+0x4e4>)
 80081c4:	fba3 1302 	umull	r1, r3, r3, r2
 80081c8:	095b      	lsrs	r3, r3, #5
 80081ca:	2164      	movs	r1, #100	@ 0x64
 80081cc:	fb01 f303 	mul.w	r3, r1, r3
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	3332      	adds	r3, #50	@ 0x32
 80081d6:	4a08      	ldr	r2, [pc, #32]	@ (80081f8 <UART_SetConfig+0x4e4>)
 80081d8:	fba2 2303 	umull	r2, r3, r2, r3
 80081dc:	095b      	lsrs	r3, r3, #5
 80081de:	f003 020f 	and.w	r2, r3, #15
 80081e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4422      	add	r2, r4
 80081ea:	609a      	str	r2, [r3, #8]
}
 80081ec:	bf00      	nop
 80081ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80081f2:	46bd      	mov	sp, r7
 80081f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081f8:	51eb851f 	.word	0x51eb851f

080081fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081fc:	b084      	sub	sp, #16
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	f107 001c 	add.w	r0, r7, #28
 800820a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	2b01      	cmp	r3, #1
 8008212:	d122      	bne.n	800825a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008218:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800823c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800823e:	2b01      	cmp	r3, #1
 8008240:	d105      	bne.n	800824e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa9c 	bl	800878c <USB_CoreReset>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
 8008258:	e01a      	b.n	8008290 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa90 	bl	800878c <USB_CoreReset>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d106      	bne.n	8008284 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	639a      	str	r2, [r3, #56]	@ 0x38
 8008282:	e005      	b.n	8008290 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008288:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	2b01      	cmp	r3, #1
 8008294:	d10b      	bne.n	80082ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f043 0206 	orr.w	r2, r3, #6
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f043 0220 	orr.w	r2, r3, #32
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082ba:	b004      	add	sp, #16
 80082bc:	4770      	bx	lr

080082be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f023 0201 	bic.w	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082fc:	78fb      	ldrb	r3, [r7, #3]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d115      	bne.n	800832e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800830e:	2001      	movs	r0, #1
 8008310:	f7f9 fb06 	bl	8001920 <HAL_Delay>
      ms++;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa28 	bl	8008770 <USB_GetMode>
 8008320:	4603      	mov	r3, r0
 8008322:	2b01      	cmp	r3, #1
 8008324:	d01e      	beq.n	8008364 <USB_SetCurrentMode+0x84>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b31      	cmp	r3, #49	@ 0x31
 800832a:	d9f0      	bls.n	800830e <USB_SetCurrentMode+0x2e>
 800832c:	e01a      	b.n	8008364 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d115      	bne.n	8008360 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008340:	2001      	movs	r0, #1
 8008342:	f7f9 faed 	bl	8001920 <HAL_Delay>
      ms++;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3301      	adds	r3, #1
 800834a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa0f 	bl	8008770 <USB_GetMode>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <USB_SetCurrentMode+0x84>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b31      	cmp	r3, #49	@ 0x31
 800835c:	d9f0      	bls.n	8008340 <USB_SetCurrentMode+0x60>
 800835e:	e001      	b.n	8008364 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e005      	b.n	8008370 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b32      	cmp	r3, #50	@ 0x32
 8008368:	d101      	bne.n	800836e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e000      	b.n	8008370 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008378:	b084      	sub	sp, #16
 800837a:	b580      	push	{r7, lr}
 800837c:	b086      	sub	sp, #24
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	e009      	b.n	80083ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	3340      	adds	r3, #64	@ 0x40
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	2200      	movs	r2, #0
 80083a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	3301      	adds	r3, #1
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b0e      	cmp	r3, #14
 80083b0:	d9f2      	bls.n	8008398 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d11c      	bne.n	80083f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083c6:	f043 0302 	orr.w	r3, r3, #2
 80083ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	e005      	b.n	80083fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008404:	461a      	mov	r2, r3
 8008406:	2300      	movs	r3, #0
 8008408:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008410:	4619      	mov	r1, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008418:	461a      	mov	r2, r3
 800841a:	680b      	ldr	r3, [r1, #0]
 800841c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800841e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008420:	2b01      	cmp	r3, #1
 8008422:	d10c      	bne.n	800843e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d104      	bne.n	8008434 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800842a:	2100      	movs	r1, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f965 	bl	80086fc <USB_SetDevSpeed>
 8008432:	e008      	b.n	8008446 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008434:	2101      	movs	r1, #1
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f960 	bl	80086fc <USB_SetDevSpeed>
 800843c:	e003      	b.n	8008446 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800843e:	2103      	movs	r1, #3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f95b 	bl	80086fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008446:	2110      	movs	r1, #16
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f8f3 	bl	8008634 <USB_FlushTxFifo>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f91f 	bl	800869c <USB_FlushRxFifo>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800846e:	461a      	mov	r2, r3
 8008470:	2300      	movs	r3, #0
 8008472:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847a:	461a      	mov	r2, r3
 800847c:	2300      	movs	r3, #0
 800847e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008486:	461a      	mov	r2, r3
 8008488:	2300      	movs	r3, #0
 800848a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800848c:	2300      	movs	r3, #0
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	e043      	b.n	800851a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084a8:	d118      	bne.n	80084dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084bc:	461a      	mov	r2, r3
 80084be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	e013      	b.n	80084ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d2:	461a      	mov	r2, r3
 80084d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	e008      	b.n	80084ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e8:	461a      	mov	r2, r3
 80084ea:	2300      	movs	r3, #0
 80084ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084fa:	461a      	mov	r2, r3
 80084fc:	2300      	movs	r3, #0
 80084fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800850c:	461a      	mov	r2, r3
 800850e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008512:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	3301      	adds	r3, #1
 8008518:	613b      	str	r3, [r7, #16]
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	429a      	cmp	r2, r3
 8008520:	d3b7      	bcc.n	8008492 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	e043      	b.n	80085b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800853a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800853e:	d118      	bne.n	8008572 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10a      	bne.n	800855c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008552:	461a      	mov	r2, r3
 8008554:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	e013      	b.n	8008584 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008568:	461a      	mov	r2, r3
 800856a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	e008      	b.n	8008584 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857e:	461a      	mov	r2, r3
 8008580:	2300      	movs	r3, #0
 8008582:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008590:	461a      	mov	r2, r3
 8008592:	2300      	movs	r3, #0
 8008594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a2:	461a      	mov	r2, r3
 80085a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80085a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	3301      	adds	r3, #1
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d3b7      	bcc.n	8008528 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80085d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	f043 0210 	orr.w	r2, r3, #16
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008630 <USB_DevInit+0x2b8>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f043 0208 	orr.w	r2, r3, #8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800860a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800860c:	2b01      	cmp	r3, #1
 800860e:	d107      	bne.n	8008620 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008618:	f043 0304 	orr.w	r3, r3, #4
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008620:	7dfb      	ldrb	r3, [r7, #23]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800862c:	b004      	add	sp, #16
 800862e:	4770      	bx	lr
 8008630:	803c3800 	.word	0x803c3800

08008634 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3301      	adds	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4a13      	ldr	r2, [pc, #76]	@ (8008698 <USB_FlushTxFifo+0x64>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d901      	bls.n	8008654 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e01b      	b.n	800868c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	daf2      	bge.n	8008642 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	019b      	lsls	r3, r3, #6
 8008664:	f043 0220 	orr.w	r2, r3, #32
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4a08      	ldr	r2, [pc, #32]	@ (8008698 <USB_FlushTxFifo+0x64>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d901      	bls.n	800867e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e006      	b.n	800868c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b20      	cmp	r3, #32
 8008688:	d0f0      	beq.n	800866c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	00030d40 	.word	0x00030d40

0800869c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4a11      	ldr	r2, [pc, #68]	@ (80086f8 <USB_FlushRxFifo+0x5c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d901      	bls.n	80086ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e018      	b.n	80086ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	daf2      	bge.n	80086a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2210      	movs	r2, #16
 80086ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a08      	ldr	r2, [pc, #32]	@ (80086f8 <USB_FlushRxFifo+0x5c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d901      	bls.n	80086de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e006      	b.n	80086ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	f003 0310 	and.w	r3, r3, #16
 80086e6:	2b10      	cmp	r3, #16
 80086e8:	d0f0      	beq.n	80086cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	00030d40 	.word	0x00030d40

080086fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800871c:	4313      	orrs	r3, r2
 800871e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008748:	f023 0303 	bic.w	r3, r3, #3
 800874c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	f003 0301 	and.w	r3, r3, #1
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3301      	adds	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4a13      	ldr	r2, [pc, #76]	@ (80087f0 <USB_CoreReset+0x64>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d901      	bls.n	80087aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e01b      	b.n	80087e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	daf2      	bge.n	8008798 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f043 0201 	orr.w	r2, r3, #1
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4a09      	ldr	r2, [pc, #36]	@ (80087f0 <USB_CoreReset+0x64>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d901      	bls.n	80087d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e006      	b.n	80087e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d0f0      	beq.n	80087c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	00030d40 	.word	0x00030d40

080087f4 <siprintf>:
 80087f4:	b40e      	push	{r1, r2, r3}
 80087f6:	b500      	push	{lr}
 80087f8:	b09c      	sub	sp, #112	@ 0x70
 80087fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80087fc:	9002      	str	r0, [sp, #8]
 80087fe:	9006      	str	r0, [sp, #24]
 8008800:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008804:	4809      	ldr	r0, [pc, #36]	@ (800882c <siprintf+0x38>)
 8008806:	9107      	str	r1, [sp, #28]
 8008808:	9104      	str	r1, [sp, #16]
 800880a:	4909      	ldr	r1, [pc, #36]	@ (8008830 <siprintf+0x3c>)
 800880c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008810:	9105      	str	r1, [sp, #20]
 8008812:	6800      	ldr	r0, [r0, #0]
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	a902      	add	r1, sp, #8
 8008818:	f000 f994 	bl	8008b44 <_svfiprintf_r>
 800881c:	9b02      	ldr	r3, [sp, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	701a      	strb	r2, [r3, #0]
 8008822:	b01c      	add	sp, #112	@ 0x70
 8008824:	f85d eb04 	ldr.w	lr, [sp], #4
 8008828:	b003      	add	sp, #12
 800882a:	4770      	bx	lr
 800882c:	2000000c 	.word	0x2000000c
 8008830:	ffff0208 	.word	0xffff0208

08008834 <memset>:
 8008834:	4402      	add	r2, r0
 8008836:	4603      	mov	r3, r0
 8008838:	4293      	cmp	r3, r2
 800883a:	d100      	bne.n	800883e <memset+0xa>
 800883c:	4770      	bx	lr
 800883e:	f803 1b01 	strb.w	r1, [r3], #1
 8008842:	e7f9      	b.n	8008838 <memset+0x4>

08008844 <__errno>:
 8008844:	4b01      	ldr	r3, [pc, #4]	@ (800884c <__errno+0x8>)
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	2000000c 	.word	0x2000000c

08008850 <__libc_init_array>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	4d0d      	ldr	r5, [pc, #52]	@ (8008888 <__libc_init_array+0x38>)
 8008854:	4c0d      	ldr	r4, [pc, #52]	@ (800888c <__libc_init_array+0x3c>)
 8008856:	1b64      	subs	r4, r4, r5
 8008858:	10a4      	asrs	r4, r4, #2
 800885a:	2600      	movs	r6, #0
 800885c:	42a6      	cmp	r6, r4
 800885e:	d109      	bne.n	8008874 <__libc_init_array+0x24>
 8008860:	4d0b      	ldr	r5, [pc, #44]	@ (8008890 <__libc_init_array+0x40>)
 8008862:	4c0c      	ldr	r4, [pc, #48]	@ (8008894 <__libc_init_array+0x44>)
 8008864:	f000 fc66 	bl	8009134 <_init>
 8008868:	1b64      	subs	r4, r4, r5
 800886a:	10a4      	asrs	r4, r4, #2
 800886c:	2600      	movs	r6, #0
 800886e:	42a6      	cmp	r6, r4
 8008870:	d105      	bne.n	800887e <__libc_init_array+0x2e>
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	f855 3b04 	ldr.w	r3, [r5], #4
 8008878:	4798      	blx	r3
 800887a:	3601      	adds	r6, #1
 800887c:	e7ee      	b.n	800885c <__libc_init_array+0xc>
 800887e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008882:	4798      	blx	r3
 8008884:	3601      	adds	r6, #1
 8008886:	e7f2      	b.n	800886e <__libc_init_array+0x1e>
 8008888:	080094d8 	.word	0x080094d8
 800888c:	080094d8 	.word	0x080094d8
 8008890:	080094d8 	.word	0x080094d8
 8008894:	080094dc 	.word	0x080094dc

08008898 <__retarget_lock_acquire_recursive>:
 8008898:	4770      	bx	lr

0800889a <__retarget_lock_release_recursive>:
 800889a:	4770      	bx	lr

0800889c <_free_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4605      	mov	r5, r0
 80088a0:	2900      	cmp	r1, #0
 80088a2:	d041      	beq.n	8008928 <_free_r+0x8c>
 80088a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a8:	1f0c      	subs	r4, r1, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bfb8      	it	lt
 80088ae:	18e4      	addlt	r4, r4, r3
 80088b0:	f000 f8e0 	bl	8008a74 <__malloc_lock>
 80088b4:	4a1d      	ldr	r2, [pc, #116]	@ (800892c <_free_r+0x90>)
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	b933      	cbnz	r3, 80088c8 <_free_r+0x2c>
 80088ba:	6063      	str	r3, [r4, #4]
 80088bc:	6014      	str	r4, [r2, #0]
 80088be:	4628      	mov	r0, r5
 80088c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c4:	f000 b8dc 	b.w	8008a80 <__malloc_unlock>
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	d908      	bls.n	80088de <_free_r+0x42>
 80088cc:	6820      	ldr	r0, [r4, #0]
 80088ce:	1821      	adds	r1, r4, r0
 80088d0:	428b      	cmp	r3, r1
 80088d2:	bf01      	itttt	eq
 80088d4:	6819      	ldreq	r1, [r3, #0]
 80088d6:	685b      	ldreq	r3, [r3, #4]
 80088d8:	1809      	addeq	r1, r1, r0
 80088da:	6021      	streq	r1, [r4, #0]
 80088dc:	e7ed      	b.n	80088ba <_free_r+0x1e>
 80088de:	461a      	mov	r2, r3
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	b10b      	cbz	r3, 80088e8 <_free_r+0x4c>
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	d9fa      	bls.n	80088de <_free_r+0x42>
 80088e8:	6811      	ldr	r1, [r2, #0]
 80088ea:	1850      	adds	r0, r2, r1
 80088ec:	42a0      	cmp	r0, r4
 80088ee:	d10b      	bne.n	8008908 <_free_r+0x6c>
 80088f0:	6820      	ldr	r0, [r4, #0]
 80088f2:	4401      	add	r1, r0
 80088f4:	1850      	adds	r0, r2, r1
 80088f6:	4283      	cmp	r3, r0
 80088f8:	6011      	str	r1, [r2, #0]
 80088fa:	d1e0      	bne.n	80088be <_free_r+0x22>
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	6053      	str	r3, [r2, #4]
 8008902:	4408      	add	r0, r1
 8008904:	6010      	str	r0, [r2, #0]
 8008906:	e7da      	b.n	80088be <_free_r+0x22>
 8008908:	d902      	bls.n	8008910 <_free_r+0x74>
 800890a:	230c      	movs	r3, #12
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	e7d6      	b.n	80088be <_free_r+0x22>
 8008910:	6820      	ldr	r0, [r4, #0]
 8008912:	1821      	adds	r1, r4, r0
 8008914:	428b      	cmp	r3, r1
 8008916:	bf04      	itt	eq
 8008918:	6819      	ldreq	r1, [r3, #0]
 800891a:	685b      	ldreq	r3, [r3, #4]
 800891c:	6063      	str	r3, [r4, #4]
 800891e:	bf04      	itt	eq
 8008920:	1809      	addeq	r1, r1, r0
 8008922:	6021      	streq	r1, [r4, #0]
 8008924:	6054      	str	r4, [r2, #4]
 8008926:	e7ca      	b.n	80088be <_free_r+0x22>
 8008928:	bd38      	pop	{r3, r4, r5, pc}
 800892a:	bf00      	nop
 800892c:	2000ea0c 	.word	0x2000ea0c

08008930 <sbrk_aligned>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	4e0f      	ldr	r6, [pc, #60]	@ (8008970 <sbrk_aligned+0x40>)
 8008934:	460c      	mov	r4, r1
 8008936:	6831      	ldr	r1, [r6, #0]
 8008938:	4605      	mov	r5, r0
 800893a:	b911      	cbnz	r1, 8008942 <sbrk_aligned+0x12>
 800893c:	f000 fba6 	bl	800908c <_sbrk_r>
 8008940:	6030      	str	r0, [r6, #0]
 8008942:	4621      	mov	r1, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f000 fba1 	bl	800908c <_sbrk_r>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d103      	bne.n	8008956 <sbrk_aligned+0x26>
 800894e:	f04f 34ff 	mov.w	r4, #4294967295
 8008952:	4620      	mov	r0, r4
 8008954:	bd70      	pop	{r4, r5, r6, pc}
 8008956:	1cc4      	adds	r4, r0, #3
 8008958:	f024 0403 	bic.w	r4, r4, #3
 800895c:	42a0      	cmp	r0, r4
 800895e:	d0f8      	beq.n	8008952 <sbrk_aligned+0x22>
 8008960:	1a21      	subs	r1, r4, r0
 8008962:	4628      	mov	r0, r5
 8008964:	f000 fb92 	bl	800908c <_sbrk_r>
 8008968:	3001      	adds	r0, #1
 800896a:	d1f2      	bne.n	8008952 <sbrk_aligned+0x22>
 800896c:	e7ef      	b.n	800894e <sbrk_aligned+0x1e>
 800896e:	bf00      	nop
 8008970:	2000ea08 	.word	0x2000ea08

08008974 <_malloc_r>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	1ccd      	adds	r5, r1, #3
 800897a:	f025 0503 	bic.w	r5, r5, #3
 800897e:	3508      	adds	r5, #8
 8008980:	2d0c      	cmp	r5, #12
 8008982:	bf38      	it	cc
 8008984:	250c      	movcc	r5, #12
 8008986:	2d00      	cmp	r5, #0
 8008988:	4606      	mov	r6, r0
 800898a:	db01      	blt.n	8008990 <_malloc_r+0x1c>
 800898c:	42a9      	cmp	r1, r5
 800898e:	d904      	bls.n	800899a <_malloc_r+0x26>
 8008990:	230c      	movs	r3, #12
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	2000      	movs	r0, #0
 8008996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a70 <_malloc_r+0xfc>
 800899e:	f000 f869 	bl	8008a74 <__malloc_lock>
 80089a2:	f8d8 3000 	ldr.w	r3, [r8]
 80089a6:	461c      	mov	r4, r3
 80089a8:	bb44      	cbnz	r4, 80089fc <_malloc_r+0x88>
 80089aa:	4629      	mov	r1, r5
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff ffbf 	bl	8008930 <sbrk_aligned>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	4604      	mov	r4, r0
 80089b6:	d158      	bne.n	8008a6a <_malloc_r+0xf6>
 80089b8:	f8d8 4000 	ldr.w	r4, [r8]
 80089bc:	4627      	mov	r7, r4
 80089be:	2f00      	cmp	r7, #0
 80089c0:	d143      	bne.n	8008a4a <_malloc_r+0xd6>
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	d04b      	beq.n	8008a5e <_malloc_r+0xea>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	4639      	mov	r1, r7
 80089ca:	4630      	mov	r0, r6
 80089cc:	eb04 0903 	add.w	r9, r4, r3
 80089d0:	f000 fb5c 	bl	800908c <_sbrk_r>
 80089d4:	4581      	cmp	r9, r0
 80089d6:	d142      	bne.n	8008a5e <_malloc_r+0xea>
 80089d8:	6821      	ldr	r1, [r4, #0]
 80089da:	1a6d      	subs	r5, r5, r1
 80089dc:	4629      	mov	r1, r5
 80089de:	4630      	mov	r0, r6
 80089e0:	f7ff ffa6 	bl	8008930 <sbrk_aligned>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d03a      	beq.n	8008a5e <_malloc_r+0xea>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	442b      	add	r3, r5
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	f8d8 3000 	ldr.w	r3, [r8]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	bb62      	cbnz	r2, 8008a50 <_malloc_r+0xdc>
 80089f6:	f8c8 7000 	str.w	r7, [r8]
 80089fa:	e00f      	b.n	8008a1c <_malloc_r+0xa8>
 80089fc:	6822      	ldr	r2, [r4, #0]
 80089fe:	1b52      	subs	r2, r2, r5
 8008a00:	d420      	bmi.n	8008a44 <_malloc_r+0xd0>
 8008a02:	2a0b      	cmp	r2, #11
 8008a04:	d917      	bls.n	8008a36 <_malloc_r+0xc2>
 8008a06:	1961      	adds	r1, r4, r5
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	6025      	str	r5, [r4, #0]
 8008a0c:	bf18      	it	ne
 8008a0e:	6059      	strne	r1, [r3, #4]
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	bf08      	it	eq
 8008a14:	f8c8 1000 	streq.w	r1, [r8]
 8008a18:	5162      	str	r2, [r4, r5]
 8008a1a:	604b      	str	r3, [r1, #4]
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f000 f82f 	bl	8008a80 <__malloc_unlock>
 8008a22:	f104 000b 	add.w	r0, r4, #11
 8008a26:	1d23      	adds	r3, r4, #4
 8008a28:	f020 0007 	bic.w	r0, r0, #7
 8008a2c:	1ac2      	subs	r2, r0, r3
 8008a2e:	bf1c      	itt	ne
 8008a30:	1a1b      	subne	r3, r3, r0
 8008a32:	50a3      	strne	r3, [r4, r2]
 8008a34:	e7af      	b.n	8008996 <_malloc_r+0x22>
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	bf0c      	ite	eq
 8008a3c:	f8c8 2000 	streq.w	r2, [r8]
 8008a40:	605a      	strne	r2, [r3, #4]
 8008a42:	e7eb      	b.n	8008a1c <_malloc_r+0xa8>
 8008a44:	4623      	mov	r3, r4
 8008a46:	6864      	ldr	r4, [r4, #4]
 8008a48:	e7ae      	b.n	80089a8 <_malloc_r+0x34>
 8008a4a:	463c      	mov	r4, r7
 8008a4c:	687f      	ldr	r7, [r7, #4]
 8008a4e:	e7b6      	b.n	80089be <_malloc_r+0x4a>
 8008a50:	461a      	mov	r2, r3
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d1fb      	bne.n	8008a50 <_malloc_r+0xdc>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	6053      	str	r3, [r2, #4]
 8008a5c:	e7de      	b.n	8008a1c <_malloc_r+0xa8>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	6033      	str	r3, [r6, #0]
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 f80c 	bl	8008a80 <__malloc_unlock>
 8008a68:	e794      	b.n	8008994 <_malloc_r+0x20>
 8008a6a:	6005      	str	r5, [r0, #0]
 8008a6c:	e7d6      	b.n	8008a1c <_malloc_r+0xa8>
 8008a6e:	bf00      	nop
 8008a70:	2000ea0c 	.word	0x2000ea0c

08008a74 <__malloc_lock>:
 8008a74:	4801      	ldr	r0, [pc, #4]	@ (8008a7c <__malloc_lock+0x8>)
 8008a76:	f7ff bf0f 	b.w	8008898 <__retarget_lock_acquire_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	2000ea04 	.word	0x2000ea04

08008a80 <__malloc_unlock>:
 8008a80:	4801      	ldr	r0, [pc, #4]	@ (8008a88 <__malloc_unlock+0x8>)
 8008a82:	f7ff bf0a 	b.w	800889a <__retarget_lock_release_recursive>
 8008a86:	bf00      	nop
 8008a88:	2000ea04 	.word	0x2000ea04

08008a8c <__ssputs_r>:
 8008a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	688e      	ldr	r6, [r1, #8]
 8008a92:	461f      	mov	r7, r3
 8008a94:	42be      	cmp	r6, r7
 8008a96:	680b      	ldr	r3, [r1, #0]
 8008a98:	4682      	mov	sl, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	4690      	mov	r8, r2
 8008a9e:	d82d      	bhi.n	8008afc <__ssputs_r+0x70>
 8008aa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008aa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008aa8:	d026      	beq.n	8008af8 <__ssputs_r+0x6c>
 8008aaa:	6965      	ldr	r5, [r4, #20]
 8008aac:	6909      	ldr	r1, [r1, #16]
 8008aae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ab2:	eba3 0901 	sub.w	r9, r3, r1
 8008ab6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008aba:	1c7b      	adds	r3, r7, #1
 8008abc:	444b      	add	r3, r9
 8008abe:	106d      	asrs	r5, r5, #1
 8008ac0:	429d      	cmp	r5, r3
 8008ac2:	bf38      	it	cc
 8008ac4:	461d      	movcc	r5, r3
 8008ac6:	0553      	lsls	r3, r2, #21
 8008ac8:	d527      	bpl.n	8008b1a <__ssputs_r+0x8e>
 8008aca:	4629      	mov	r1, r5
 8008acc:	f7ff ff52 	bl	8008974 <_malloc_r>
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	b360      	cbz	r0, 8008b2e <__ssputs_r+0xa2>
 8008ad4:	6921      	ldr	r1, [r4, #16]
 8008ad6:	464a      	mov	r2, r9
 8008ad8:	f000 fae8 	bl	80090ac <memcpy>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	6126      	str	r6, [r4, #16]
 8008aea:	6165      	str	r5, [r4, #20]
 8008aec:	444e      	add	r6, r9
 8008aee:	eba5 0509 	sub.w	r5, r5, r9
 8008af2:	6026      	str	r6, [r4, #0]
 8008af4:	60a5      	str	r5, [r4, #8]
 8008af6:	463e      	mov	r6, r7
 8008af8:	42be      	cmp	r6, r7
 8008afa:	d900      	bls.n	8008afe <__ssputs_r+0x72>
 8008afc:	463e      	mov	r6, r7
 8008afe:	6820      	ldr	r0, [r4, #0]
 8008b00:	4632      	mov	r2, r6
 8008b02:	4641      	mov	r1, r8
 8008b04:	f000 faa8 	bl	8009058 <memmove>
 8008b08:	68a3      	ldr	r3, [r4, #8]
 8008b0a:	1b9b      	subs	r3, r3, r6
 8008b0c:	60a3      	str	r3, [r4, #8]
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	4433      	add	r3, r6
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	2000      	movs	r0, #0
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	462a      	mov	r2, r5
 8008b1c:	f000 fad4 	bl	80090c8 <_realloc_r>
 8008b20:	4606      	mov	r6, r0
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d1e0      	bne.n	8008ae8 <__ssputs_r+0x5c>
 8008b26:	6921      	ldr	r1, [r4, #16]
 8008b28:	4650      	mov	r0, sl
 8008b2a:	f7ff feb7 	bl	800889c <_free_r>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	f8ca 3000 	str.w	r3, [sl]
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	e7e9      	b.n	8008b16 <__ssputs_r+0x8a>
	...

08008b44 <_svfiprintf_r>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	4698      	mov	r8, r3
 8008b4a:	898b      	ldrh	r3, [r1, #12]
 8008b4c:	061b      	lsls	r3, r3, #24
 8008b4e:	b09d      	sub	sp, #116	@ 0x74
 8008b50:	4607      	mov	r7, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	4614      	mov	r4, r2
 8008b56:	d510      	bpl.n	8008b7a <_svfiprintf_r+0x36>
 8008b58:	690b      	ldr	r3, [r1, #16]
 8008b5a:	b973      	cbnz	r3, 8008b7a <_svfiprintf_r+0x36>
 8008b5c:	2140      	movs	r1, #64	@ 0x40
 8008b5e:	f7ff ff09 	bl	8008974 <_malloc_r>
 8008b62:	6028      	str	r0, [r5, #0]
 8008b64:	6128      	str	r0, [r5, #16]
 8008b66:	b930      	cbnz	r0, 8008b76 <_svfiprintf_r+0x32>
 8008b68:	230c      	movs	r3, #12
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	b01d      	add	sp, #116	@ 0x74
 8008b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b76:	2340      	movs	r3, #64	@ 0x40
 8008b78:	616b      	str	r3, [r5, #20]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7e:	2320      	movs	r3, #32
 8008b80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b88:	2330      	movs	r3, #48	@ 0x30
 8008b8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d28 <_svfiprintf_r+0x1e4>
 8008b8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b92:	f04f 0901 	mov.w	r9, #1
 8008b96:	4623      	mov	r3, r4
 8008b98:	469a      	mov	sl, r3
 8008b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b9e:	b10a      	cbz	r2, 8008ba4 <_svfiprintf_r+0x60>
 8008ba0:	2a25      	cmp	r2, #37	@ 0x25
 8008ba2:	d1f9      	bne.n	8008b98 <_svfiprintf_r+0x54>
 8008ba4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba8:	d00b      	beq.n	8008bc2 <_svfiprintf_r+0x7e>
 8008baa:	465b      	mov	r3, fp
 8008bac:	4622      	mov	r2, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ff6b 	bl	8008a8c <__ssputs_r>
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	f000 80a7 	beq.w	8008d0a <_svfiprintf_r+0x1c6>
 8008bbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bbe:	445a      	add	r2, fp
 8008bc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 809f 	beq.w	8008d0a <_svfiprintf_r+0x1c6>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bd6:	f10a 0a01 	add.w	sl, sl, #1
 8008bda:	9304      	str	r3, [sp, #16]
 8008bdc:	9307      	str	r3, [sp, #28]
 8008bde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008be2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008be4:	4654      	mov	r4, sl
 8008be6:	2205      	movs	r2, #5
 8008be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bec:	484e      	ldr	r0, [pc, #312]	@ (8008d28 <_svfiprintf_r+0x1e4>)
 8008bee:	f7f7 fb17 	bl	8000220 <memchr>
 8008bf2:	9a04      	ldr	r2, [sp, #16]
 8008bf4:	b9d8      	cbnz	r0, 8008c2e <_svfiprintf_r+0xea>
 8008bf6:	06d0      	lsls	r0, r2, #27
 8008bf8:	bf44      	itt	mi
 8008bfa:	2320      	movmi	r3, #32
 8008bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c00:	0711      	lsls	r1, r2, #28
 8008c02:	bf44      	itt	mi
 8008c04:	232b      	movmi	r3, #43	@ 0x2b
 8008c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c10:	d015      	beq.n	8008c3e <_svfiprintf_r+0xfa>
 8008c12:	9a07      	ldr	r2, [sp, #28]
 8008c14:	4654      	mov	r4, sl
 8008c16:	2000      	movs	r0, #0
 8008c18:	f04f 0c0a 	mov.w	ip, #10
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c22:	3b30      	subs	r3, #48	@ 0x30
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d94b      	bls.n	8008cc0 <_svfiprintf_r+0x17c>
 8008c28:	b1b0      	cbz	r0, 8008c58 <_svfiprintf_r+0x114>
 8008c2a:	9207      	str	r2, [sp, #28]
 8008c2c:	e014      	b.n	8008c58 <_svfiprintf_r+0x114>
 8008c2e:	eba0 0308 	sub.w	r3, r0, r8
 8008c32:	fa09 f303 	lsl.w	r3, r9, r3
 8008c36:	4313      	orrs	r3, r2
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	46a2      	mov	sl, r4
 8008c3c:	e7d2      	b.n	8008be4 <_svfiprintf_r+0xa0>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	1d19      	adds	r1, r3, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	9103      	str	r1, [sp, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfbb      	ittet	lt
 8008c4a:	425b      	neglt	r3, r3
 8008c4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c50:	9307      	strge	r3, [sp, #28]
 8008c52:	9307      	strlt	r3, [sp, #28]
 8008c54:	bfb8      	it	lt
 8008c56:	9204      	strlt	r2, [sp, #16]
 8008c58:	7823      	ldrb	r3, [r4, #0]
 8008c5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c5c:	d10a      	bne.n	8008c74 <_svfiprintf_r+0x130>
 8008c5e:	7863      	ldrb	r3, [r4, #1]
 8008c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c62:	d132      	bne.n	8008cca <_svfiprintf_r+0x186>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	1d1a      	adds	r2, r3, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	9203      	str	r2, [sp, #12]
 8008c6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c70:	3402      	adds	r4, #2
 8008c72:	9305      	str	r3, [sp, #20]
 8008c74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d38 <_svfiprintf_r+0x1f4>
 8008c78:	7821      	ldrb	r1, [r4, #0]
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	4650      	mov	r0, sl
 8008c7e:	f7f7 facf 	bl	8000220 <memchr>
 8008c82:	b138      	cbz	r0, 8008c94 <_svfiprintf_r+0x150>
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	eba0 000a 	sub.w	r0, r0, sl
 8008c8a:	2240      	movs	r2, #64	@ 0x40
 8008c8c:	4082      	lsls	r2, r0
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	3401      	adds	r4, #1
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c98:	4824      	ldr	r0, [pc, #144]	@ (8008d2c <_svfiprintf_r+0x1e8>)
 8008c9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c9e:	2206      	movs	r2, #6
 8008ca0:	f7f7 fabe 	bl	8000220 <memchr>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d036      	beq.n	8008d16 <_svfiprintf_r+0x1d2>
 8008ca8:	4b21      	ldr	r3, [pc, #132]	@ (8008d30 <_svfiprintf_r+0x1ec>)
 8008caa:	bb1b      	cbnz	r3, 8008cf4 <_svfiprintf_r+0x1b0>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	3307      	adds	r3, #7
 8008cb0:	f023 0307 	bic.w	r3, r3, #7
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cba:	4433      	add	r3, r6
 8008cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cbe:	e76a      	b.n	8008b96 <_svfiprintf_r+0x52>
 8008cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	e7a8      	b.n	8008c1c <_svfiprintf_r+0xd8>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	3401      	adds	r4, #1
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	f04f 0c0a 	mov.w	ip, #10
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cdc:	3a30      	subs	r2, #48	@ 0x30
 8008cde:	2a09      	cmp	r2, #9
 8008ce0:	d903      	bls.n	8008cea <_svfiprintf_r+0x1a6>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0c6      	beq.n	8008c74 <_svfiprintf_r+0x130>
 8008ce6:	9105      	str	r1, [sp, #20]
 8008ce8:	e7c4      	b.n	8008c74 <_svfiprintf_r+0x130>
 8008cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cee:	4604      	mov	r4, r0
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e7f0      	b.n	8008cd6 <_svfiprintf_r+0x192>
 8008cf4:	ab03      	add	r3, sp, #12
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8008d34 <_svfiprintf_r+0x1f0>)
 8008cfc:	a904      	add	r1, sp, #16
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f3af 8000 	nop.w
 8008d04:	1c42      	adds	r2, r0, #1
 8008d06:	4606      	mov	r6, r0
 8008d08:	d1d6      	bne.n	8008cb8 <_svfiprintf_r+0x174>
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	065b      	lsls	r3, r3, #25
 8008d0e:	f53f af2d 	bmi.w	8008b6c <_svfiprintf_r+0x28>
 8008d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d14:	e72c      	b.n	8008b70 <_svfiprintf_r+0x2c>
 8008d16:	ab03      	add	r3, sp, #12
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	462a      	mov	r2, r5
 8008d1c:	4b05      	ldr	r3, [pc, #20]	@ (8008d34 <_svfiprintf_r+0x1f0>)
 8008d1e:	a904      	add	r1, sp, #16
 8008d20:	4638      	mov	r0, r7
 8008d22:	f000 f879 	bl	8008e18 <_printf_i>
 8008d26:	e7ed      	b.n	8008d04 <_svfiprintf_r+0x1c0>
 8008d28:	0800949c 	.word	0x0800949c
 8008d2c:	080094a6 	.word	0x080094a6
 8008d30:	00000000 	.word	0x00000000
 8008d34:	08008a8d 	.word	0x08008a8d
 8008d38:	080094a2 	.word	0x080094a2

08008d3c <_printf_common>:
 8008d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	4616      	mov	r6, r2
 8008d42:	4698      	mov	r8, r3
 8008d44:	688a      	ldr	r2, [r1, #8]
 8008d46:	690b      	ldr	r3, [r1, #16]
 8008d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	bfb8      	it	lt
 8008d50:	4613      	movlt	r3, r2
 8008d52:	6033      	str	r3, [r6, #0]
 8008d54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d58:	4607      	mov	r7, r0
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	b10a      	cbz	r2, 8008d62 <_printf_common+0x26>
 8008d5e:	3301      	adds	r3, #1
 8008d60:	6033      	str	r3, [r6, #0]
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	0699      	lsls	r1, r3, #26
 8008d66:	bf42      	ittt	mi
 8008d68:	6833      	ldrmi	r3, [r6, #0]
 8008d6a:	3302      	addmi	r3, #2
 8008d6c:	6033      	strmi	r3, [r6, #0]
 8008d6e:	6825      	ldr	r5, [r4, #0]
 8008d70:	f015 0506 	ands.w	r5, r5, #6
 8008d74:	d106      	bne.n	8008d84 <_printf_common+0x48>
 8008d76:	f104 0a19 	add.w	sl, r4, #25
 8008d7a:	68e3      	ldr	r3, [r4, #12]
 8008d7c:	6832      	ldr	r2, [r6, #0]
 8008d7e:	1a9b      	subs	r3, r3, r2
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	dc26      	bgt.n	8008dd2 <_printf_common+0x96>
 8008d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d88:	6822      	ldr	r2, [r4, #0]
 8008d8a:	3b00      	subs	r3, #0
 8008d8c:	bf18      	it	ne
 8008d8e:	2301      	movne	r3, #1
 8008d90:	0692      	lsls	r2, r2, #26
 8008d92:	d42b      	bmi.n	8008dec <_printf_common+0xb0>
 8008d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d98:	4641      	mov	r1, r8
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	47c8      	blx	r9
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d01e      	beq.n	8008de0 <_printf_common+0xa4>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	6922      	ldr	r2, [r4, #16]
 8008da6:	f003 0306 	and.w	r3, r3, #6
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	bf02      	ittt	eq
 8008dae:	68e5      	ldreq	r5, [r4, #12]
 8008db0:	6833      	ldreq	r3, [r6, #0]
 8008db2:	1aed      	subeq	r5, r5, r3
 8008db4:	68a3      	ldr	r3, [r4, #8]
 8008db6:	bf0c      	ite	eq
 8008db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dbc:	2500      	movne	r5, #0
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	bfc4      	itt	gt
 8008dc2:	1a9b      	subgt	r3, r3, r2
 8008dc4:	18ed      	addgt	r5, r5, r3
 8008dc6:	2600      	movs	r6, #0
 8008dc8:	341a      	adds	r4, #26
 8008dca:	42b5      	cmp	r5, r6
 8008dcc:	d11a      	bne.n	8008e04 <_printf_common+0xc8>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	e008      	b.n	8008de4 <_printf_common+0xa8>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4652      	mov	r2, sl
 8008dd6:	4641      	mov	r1, r8
 8008dd8:	4638      	mov	r0, r7
 8008dda:	47c8      	blx	r9
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d103      	bne.n	8008de8 <_printf_common+0xac>
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de8:	3501      	adds	r5, #1
 8008dea:	e7c6      	b.n	8008d7a <_printf_common+0x3e>
 8008dec:	18e1      	adds	r1, r4, r3
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	2030      	movs	r0, #48	@ 0x30
 8008df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008df6:	4422      	add	r2, r4
 8008df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e00:	3302      	adds	r3, #2
 8008e02:	e7c7      	b.n	8008d94 <_printf_common+0x58>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4622      	mov	r2, r4
 8008e08:	4641      	mov	r1, r8
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	47c8      	blx	r9
 8008e0e:	3001      	adds	r0, #1
 8008e10:	d0e6      	beq.n	8008de0 <_printf_common+0xa4>
 8008e12:	3601      	adds	r6, #1
 8008e14:	e7d9      	b.n	8008dca <_printf_common+0x8e>
	...

08008e18 <_printf_i>:
 8008e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1c:	7e0f      	ldrb	r7, [r1, #24]
 8008e1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e20:	2f78      	cmp	r7, #120	@ 0x78
 8008e22:	4691      	mov	r9, r2
 8008e24:	4680      	mov	r8, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	469a      	mov	sl, r3
 8008e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e2e:	d807      	bhi.n	8008e40 <_printf_i+0x28>
 8008e30:	2f62      	cmp	r7, #98	@ 0x62
 8008e32:	d80a      	bhi.n	8008e4a <_printf_i+0x32>
 8008e34:	2f00      	cmp	r7, #0
 8008e36:	f000 80d2 	beq.w	8008fde <_printf_i+0x1c6>
 8008e3a:	2f58      	cmp	r7, #88	@ 0x58
 8008e3c:	f000 80b9 	beq.w	8008fb2 <_printf_i+0x19a>
 8008e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e48:	e03a      	b.n	8008ec0 <_printf_i+0xa8>
 8008e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e4e:	2b15      	cmp	r3, #21
 8008e50:	d8f6      	bhi.n	8008e40 <_printf_i+0x28>
 8008e52:	a101      	add	r1, pc, #4	@ (adr r1, 8008e58 <_printf_i+0x40>)
 8008e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e58:	08008eb1 	.word	0x08008eb1
 8008e5c:	08008ec5 	.word	0x08008ec5
 8008e60:	08008e41 	.word	0x08008e41
 8008e64:	08008e41 	.word	0x08008e41
 8008e68:	08008e41 	.word	0x08008e41
 8008e6c:	08008e41 	.word	0x08008e41
 8008e70:	08008ec5 	.word	0x08008ec5
 8008e74:	08008e41 	.word	0x08008e41
 8008e78:	08008e41 	.word	0x08008e41
 8008e7c:	08008e41 	.word	0x08008e41
 8008e80:	08008e41 	.word	0x08008e41
 8008e84:	08008fc5 	.word	0x08008fc5
 8008e88:	08008eef 	.word	0x08008eef
 8008e8c:	08008f7f 	.word	0x08008f7f
 8008e90:	08008e41 	.word	0x08008e41
 8008e94:	08008e41 	.word	0x08008e41
 8008e98:	08008fe7 	.word	0x08008fe7
 8008e9c:	08008e41 	.word	0x08008e41
 8008ea0:	08008eef 	.word	0x08008eef
 8008ea4:	08008e41 	.word	0x08008e41
 8008ea8:	08008e41 	.word	0x08008e41
 8008eac:	08008f87 	.word	0x08008f87
 8008eb0:	6833      	ldr	r3, [r6, #0]
 8008eb2:	1d1a      	adds	r2, r3, #4
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6032      	str	r2, [r6, #0]
 8008eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e09d      	b.n	8009000 <_printf_i+0x1e8>
 8008ec4:	6833      	ldr	r3, [r6, #0]
 8008ec6:	6820      	ldr	r0, [r4, #0]
 8008ec8:	1d19      	adds	r1, r3, #4
 8008eca:	6031      	str	r1, [r6, #0]
 8008ecc:	0606      	lsls	r6, r0, #24
 8008ece:	d501      	bpl.n	8008ed4 <_printf_i+0xbc>
 8008ed0:	681d      	ldr	r5, [r3, #0]
 8008ed2:	e003      	b.n	8008edc <_printf_i+0xc4>
 8008ed4:	0645      	lsls	r5, r0, #25
 8008ed6:	d5fb      	bpl.n	8008ed0 <_printf_i+0xb8>
 8008ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008edc:	2d00      	cmp	r5, #0
 8008ede:	da03      	bge.n	8008ee8 <_printf_i+0xd0>
 8008ee0:	232d      	movs	r3, #45	@ 0x2d
 8008ee2:	426d      	negs	r5, r5
 8008ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee8:	4859      	ldr	r0, [pc, #356]	@ (8009050 <_printf_i+0x238>)
 8008eea:	230a      	movs	r3, #10
 8008eec:	e011      	b.n	8008f12 <_printf_i+0xfa>
 8008eee:	6821      	ldr	r1, [r4, #0]
 8008ef0:	6833      	ldr	r3, [r6, #0]
 8008ef2:	0608      	lsls	r0, r1, #24
 8008ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ef8:	d402      	bmi.n	8008f00 <_printf_i+0xe8>
 8008efa:	0649      	lsls	r1, r1, #25
 8008efc:	bf48      	it	mi
 8008efe:	b2ad      	uxthmi	r5, r5
 8008f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f02:	4853      	ldr	r0, [pc, #332]	@ (8009050 <_printf_i+0x238>)
 8008f04:	6033      	str	r3, [r6, #0]
 8008f06:	bf14      	ite	ne
 8008f08:	230a      	movne	r3, #10
 8008f0a:	2308      	moveq	r3, #8
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f12:	6866      	ldr	r6, [r4, #4]
 8008f14:	60a6      	str	r6, [r4, #8]
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	bfa2      	ittt	ge
 8008f1a:	6821      	ldrge	r1, [r4, #0]
 8008f1c:	f021 0104 	bicge.w	r1, r1, #4
 8008f20:	6021      	strge	r1, [r4, #0]
 8008f22:	b90d      	cbnz	r5, 8008f28 <_printf_i+0x110>
 8008f24:	2e00      	cmp	r6, #0
 8008f26:	d04b      	beq.n	8008fc0 <_printf_i+0x1a8>
 8008f28:	4616      	mov	r6, r2
 8008f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8008f32:	5dc7      	ldrb	r7, [r0, r7]
 8008f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f38:	462f      	mov	r7, r5
 8008f3a:	42bb      	cmp	r3, r7
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	d9f4      	bls.n	8008f2a <_printf_i+0x112>
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d10b      	bne.n	8008f5c <_printf_i+0x144>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	07df      	lsls	r7, r3, #31
 8008f48:	d508      	bpl.n	8008f5c <_printf_i+0x144>
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	6861      	ldr	r1, [r4, #4]
 8008f4e:	4299      	cmp	r1, r3
 8008f50:	bfde      	ittt	le
 8008f52:	2330      	movle	r3, #48	@ 0x30
 8008f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f5c:	1b92      	subs	r2, r2, r6
 8008f5e:	6122      	str	r2, [r4, #16]
 8008f60:	f8cd a000 	str.w	sl, [sp]
 8008f64:	464b      	mov	r3, r9
 8008f66:	aa03      	add	r2, sp, #12
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7ff fee6 	bl	8008d3c <_printf_common>
 8008f70:	3001      	adds	r0, #1
 8008f72:	d14a      	bne.n	800900a <_printf_i+0x1f2>
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	b004      	add	sp, #16
 8008f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	f043 0320 	orr.w	r3, r3, #32
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	4833      	ldr	r0, [pc, #204]	@ (8009054 <_printf_i+0x23c>)
 8008f88:	2778      	movs	r7, #120	@ 0x78
 8008f8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	6831      	ldr	r1, [r6, #0]
 8008f92:	061f      	lsls	r7, r3, #24
 8008f94:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f98:	d402      	bmi.n	8008fa0 <_printf_i+0x188>
 8008f9a:	065f      	lsls	r7, r3, #25
 8008f9c:	bf48      	it	mi
 8008f9e:	b2ad      	uxthmi	r5, r5
 8008fa0:	6031      	str	r1, [r6, #0]
 8008fa2:	07d9      	lsls	r1, r3, #31
 8008fa4:	bf44      	itt	mi
 8008fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8008faa:	6023      	strmi	r3, [r4, #0]
 8008fac:	b11d      	cbz	r5, 8008fb6 <_printf_i+0x19e>
 8008fae:	2310      	movs	r3, #16
 8008fb0:	e7ac      	b.n	8008f0c <_printf_i+0xf4>
 8008fb2:	4827      	ldr	r0, [pc, #156]	@ (8009050 <_printf_i+0x238>)
 8008fb4:	e7e9      	b.n	8008f8a <_printf_i+0x172>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	f023 0320 	bic.w	r3, r3, #32
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	e7f6      	b.n	8008fae <_printf_i+0x196>
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	e7bd      	b.n	8008f40 <_printf_i+0x128>
 8008fc4:	6833      	ldr	r3, [r6, #0]
 8008fc6:	6825      	ldr	r5, [r4, #0]
 8008fc8:	6961      	ldr	r1, [r4, #20]
 8008fca:	1d18      	adds	r0, r3, #4
 8008fcc:	6030      	str	r0, [r6, #0]
 8008fce:	062e      	lsls	r6, r5, #24
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	d501      	bpl.n	8008fd8 <_printf_i+0x1c0>
 8008fd4:	6019      	str	r1, [r3, #0]
 8008fd6:	e002      	b.n	8008fde <_printf_i+0x1c6>
 8008fd8:	0668      	lsls	r0, r5, #25
 8008fda:	d5fb      	bpl.n	8008fd4 <_printf_i+0x1bc>
 8008fdc:	8019      	strh	r1, [r3, #0]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	4616      	mov	r6, r2
 8008fe4:	e7bc      	b.n	8008f60 <_printf_i+0x148>
 8008fe6:	6833      	ldr	r3, [r6, #0]
 8008fe8:	1d1a      	adds	r2, r3, #4
 8008fea:	6032      	str	r2, [r6, #0]
 8008fec:	681e      	ldr	r6, [r3, #0]
 8008fee:	6862      	ldr	r2, [r4, #4]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7f7 f914 	bl	8000220 <memchr>
 8008ff8:	b108      	cbz	r0, 8008ffe <_printf_i+0x1e6>
 8008ffa:	1b80      	subs	r0, r0, r6
 8008ffc:	6060      	str	r0, [r4, #4]
 8008ffe:	6863      	ldr	r3, [r4, #4]
 8009000:	6123      	str	r3, [r4, #16]
 8009002:	2300      	movs	r3, #0
 8009004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009008:	e7aa      	b.n	8008f60 <_printf_i+0x148>
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	4632      	mov	r2, r6
 800900e:	4649      	mov	r1, r9
 8009010:	4640      	mov	r0, r8
 8009012:	47d0      	blx	sl
 8009014:	3001      	adds	r0, #1
 8009016:	d0ad      	beq.n	8008f74 <_printf_i+0x15c>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	079b      	lsls	r3, r3, #30
 800901c:	d413      	bmi.n	8009046 <_printf_i+0x22e>
 800901e:	68e0      	ldr	r0, [r4, #12]
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	4298      	cmp	r0, r3
 8009024:	bfb8      	it	lt
 8009026:	4618      	movlt	r0, r3
 8009028:	e7a6      	b.n	8008f78 <_printf_i+0x160>
 800902a:	2301      	movs	r3, #1
 800902c:	4632      	mov	r2, r6
 800902e:	4649      	mov	r1, r9
 8009030:	4640      	mov	r0, r8
 8009032:	47d0      	blx	sl
 8009034:	3001      	adds	r0, #1
 8009036:	d09d      	beq.n	8008f74 <_printf_i+0x15c>
 8009038:	3501      	adds	r5, #1
 800903a:	68e3      	ldr	r3, [r4, #12]
 800903c:	9903      	ldr	r1, [sp, #12]
 800903e:	1a5b      	subs	r3, r3, r1
 8009040:	42ab      	cmp	r3, r5
 8009042:	dcf2      	bgt.n	800902a <_printf_i+0x212>
 8009044:	e7eb      	b.n	800901e <_printf_i+0x206>
 8009046:	2500      	movs	r5, #0
 8009048:	f104 0619 	add.w	r6, r4, #25
 800904c:	e7f5      	b.n	800903a <_printf_i+0x222>
 800904e:	bf00      	nop
 8009050:	080094ad 	.word	0x080094ad
 8009054:	080094be 	.word	0x080094be

08009058 <memmove>:
 8009058:	4288      	cmp	r0, r1
 800905a:	b510      	push	{r4, lr}
 800905c:	eb01 0402 	add.w	r4, r1, r2
 8009060:	d902      	bls.n	8009068 <memmove+0x10>
 8009062:	4284      	cmp	r4, r0
 8009064:	4623      	mov	r3, r4
 8009066:	d807      	bhi.n	8009078 <memmove+0x20>
 8009068:	1e43      	subs	r3, r0, #1
 800906a:	42a1      	cmp	r1, r4
 800906c:	d008      	beq.n	8009080 <memmove+0x28>
 800906e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009076:	e7f8      	b.n	800906a <memmove+0x12>
 8009078:	4402      	add	r2, r0
 800907a:	4601      	mov	r1, r0
 800907c:	428a      	cmp	r2, r1
 800907e:	d100      	bne.n	8009082 <memmove+0x2a>
 8009080:	bd10      	pop	{r4, pc}
 8009082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800908a:	e7f7      	b.n	800907c <memmove+0x24>

0800908c <_sbrk_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d06      	ldr	r5, [pc, #24]	@ (80090a8 <_sbrk_r+0x1c>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	f7f8 fb5e 	bl	8001758 <_sbrk>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_sbrk_r+0x1a>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_sbrk_r+0x1a>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	2000ea00 	.word	0x2000ea00

080090ac <memcpy>:
 80090ac:	440a      	add	r2, r1
 80090ae:	4291      	cmp	r1, r2
 80090b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b4:	d100      	bne.n	80090b8 <memcpy+0xc>
 80090b6:	4770      	bx	lr
 80090b8:	b510      	push	{r4, lr}
 80090ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c2:	4291      	cmp	r1, r2
 80090c4:	d1f9      	bne.n	80090ba <memcpy+0xe>
 80090c6:	bd10      	pop	{r4, pc}

080090c8 <_realloc_r>:
 80090c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090cc:	4680      	mov	r8, r0
 80090ce:	4615      	mov	r5, r2
 80090d0:	460c      	mov	r4, r1
 80090d2:	b921      	cbnz	r1, 80090de <_realloc_r+0x16>
 80090d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d8:	4611      	mov	r1, r2
 80090da:	f7ff bc4b 	b.w	8008974 <_malloc_r>
 80090de:	b92a      	cbnz	r2, 80090ec <_realloc_r+0x24>
 80090e0:	f7ff fbdc 	bl	800889c <_free_r>
 80090e4:	2400      	movs	r4, #0
 80090e6:	4620      	mov	r0, r4
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ec:	f000 f81a 	bl	8009124 <_malloc_usable_size_r>
 80090f0:	4285      	cmp	r5, r0
 80090f2:	4606      	mov	r6, r0
 80090f4:	d802      	bhi.n	80090fc <_realloc_r+0x34>
 80090f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80090fa:	d8f4      	bhi.n	80090e6 <_realloc_r+0x1e>
 80090fc:	4629      	mov	r1, r5
 80090fe:	4640      	mov	r0, r8
 8009100:	f7ff fc38 	bl	8008974 <_malloc_r>
 8009104:	4607      	mov	r7, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	d0ec      	beq.n	80090e4 <_realloc_r+0x1c>
 800910a:	42b5      	cmp	r5, r6
 800910c:	462a      	mov	r2, r5
 800910e:	4621      	mov	r1, r4
 8009110:	bf28      	it	cs
 8009112:	4632      	movcs	r2, r6
 8009114:	f7ff ffca 	bl	80090ac <memcpy>
 8009118:	4621      	mov	r1, r4
 800911a:	4640      	mov	r0, r8
 800911c:	f7ff fbbe 	bl	800889c <_free_r>
 8009120:	463c      	mov	r4, r7
 8009122:	e7e0      	b.n	80090e6 <_realloc_r+0x1e>

08009124 <_malloc_usable_size_r>:
 8009124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009128:	1f18      	subs	r0, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	bfbc      	itt	lt
 800912e:	580b      	ldrlt	r3, [r1, r0]
 8009130:	18c0      	addlt	r0, r0, r3
 8009132:	4770      	bx	lr

08009134 <_init>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	bf00      	nop
 8009138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913a:	bc08      	pop	{r3}
 800913c:	469e      	mov	lr, r3
 800913e:	4770      	bx	lr

08009140 <_fini>:
 8009140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009142:	bf00      	nop
 8009144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009146:	bc08      	pop	{r3}
 8009148:	469e      	mov	lr, r3
 800914a:	4770      	bx	lr
