
ADC_Testing3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009904  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013820  08009ad8  08009ad8  0000aad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d2f8  0801d2f8  0001f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d2f8  0801d2f8  0001e2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d300  0801d300  0001f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d300  0801d300  0001e300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d304  0801d304  0001e304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801d308  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097f4  200001d4  0801d4dc  0001f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200099c8  0801d4dc  0001f9c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166fb  00000000  00000000  0001f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003285  00000000  00000000  000358ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00038b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ded  00000000  00000000  00039e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025395  00000000  00000000  0003ac35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178b9  00000000  00000000  0005ffca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3683  00000000  00000000  00077883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0015af06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000601c  00000000  00000000  0015afbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00160fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a79  00000000  00000000  0016104f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  00163ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009abc 	.word	0x08009abc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009abc 	.word	0x08009abc

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <print_msg>:
#include "config.h"
#include <string.h>
#include "main.h"

void print_msg(char * msg) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff f9e5 	bl	8000370 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	2364      	movs	r3, #100	@ 0x64
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <print_msg+0x24>)
 8000fb0:	f004 f890 	bl	80050d4 <HAL_UART_Transmit>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200002e0 	.word	0x200002e0

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	@ 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2234      	movs	r2, #52	@ 0x34
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 fc87 	bl	80078e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <SystemClock_Config+0xd0>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	4a28      	ldr	r2, [pc, #160]	@ (8001090 <SystemClock_Config+0xd0>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <SystemClock_Config+0xd0>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <SystemClock_Config+0xd4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <SystemClock_Config+0xd4>)
 800100a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <SystemClock_Config+0xd4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001020:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001024:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001026:	2302      	movs	r3, #2
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800102e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001030:	2304      	movs	r3, #4
 8001032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001034:	23a8      	movs	r3, #168	@ 0xa8
 8001036:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800103c:	2307      	movs	r3, #7
 800103e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f9ed 	bl	8004428 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001054:	f000 fa20 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001064:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001068:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	2105      	movs	r1, #5
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fb62 	bl	8003740 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001082:	f000 fa09 	bl	8001498 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	@ 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010aa:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010ac:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <MX_ADC1_Init+0xa0>)
 80010ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b0:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010dc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fc:	480d      	ldr	r0, [pc, #52]	@ (8001134 <MX_ADC1_Init+0x9c>)
 80010fe:	f000 fe7d 	bl	8001dfc <HAL_ADC_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001108:	f000 f9c6 	bl	8001498 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0; // PA0 = ADC1_IN0
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_ADC1_Init+0x9c>)
 800111e:	f001 f82f 	bl	8002180 <HAL_ADC_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001128:	f000 f9b6 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200001f0 	.word	0x200001f0
 8001138:	40012000 	.word	0x40012000

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001158:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <MX_TIM2_Init+0x94>)
 800115a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800115e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <MX_TIM2_Init+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_TIM2_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83; //1 MHz -> Sample rate = 84 MHz / (0 + 1) / (83 + 1) = 1 MHz
 800116c:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_TIM2_Init+0x94>)
 800116e:	2253      	movs	r2, #83	@ 0x53
 8001170:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <MX_TIM2_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <MX_TIM2_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800117e:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <MX_TIM2_Init+0x94>)
 8001180:	f003 fbf0 	bl	8004964 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800118a:	f000 f985 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001192:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <MX_TIM2_Init+0x94>)
 800119c:	f003 fcc1 	bl	8004b22 <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 f977 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011aa:	2320      	movs	r3, #32
 80011ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <MX_TIM2_Init+0x94>)
 80011b8:	f003 fec0 	bl	8004f3c <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80011c2:	f000 f969 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000298 	.word	0x20000298

080011d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_USART3_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_USART3_UART_Init+0x4c>)
 800120c:	f003 ff12 	bl	8005034 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f93f 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200002e0 	.word	0x200002e0
 8001224:	40004800 	.word	0x40004800

08001228 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001232:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001236:	2206      	movs	r2, #6
 8001238:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123c:	2202      	movs	r2, #2
 800123e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001248:	2202      	movs	r2, #2
 800124a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124e:	2201      	movs	r2, #1
 8001250:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001260:	2201      	movs	r2, #1
 8001262:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126c:	f002 f92d 	bl	80034ca <HAL_PCD_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001276:	f000 f90f 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000328 	.word	0x20000328

08001284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_DMA_Init+0x3c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <MX_DMA_Init+0x3c>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_DMA_Init+0x3c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2038      	movs	r0, #56	@ 0x38
 80012ac:	f001 faf3 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012b0:	2038      	movs	r0, #56	@ 0x38
 80012b2:	f001 fb0c 	bl	80028ce <HAL_NVIC_EnableIRQ>

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	@ 0x30
 80012c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	4b69      	ldr	r3, [pc, #420]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a68      	ldr	r2, [pc, #416]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b66      	ldr	r3, [pc, #408]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4b62      	ldr	r3, [pc, #392]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a61      	ldr	r2, [pc, #388]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b5f      	ldr	r3, [pc, #380]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b5b      	ldr	r3, [pc, #364]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a5a      	ldr	r2, [pc, #360]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b58      	ldr	r3, [pc, #352]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b54      	ldr	r3, [pc, #336]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a53      	ldr	r2, [pc, #332]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b51      	ldr	r3, [pc, #324]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b4d      	ldr	r3, [pc, #308]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a4c      	ldr	r2, [pc, #304]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b4a      	ldr	r3, [pc, #296]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a45      	ldr	r2, [pc, #276]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b43      	ldr	r3, [pc, #268]	@ (8001484 <MX_GPIO_Init+0x1c0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001388:	483f      	ldr	r0, [pc, #252]	@ (8001488 <MX_GPIO_Init+0x1c4>)
 800138a:	f002 f847 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2140      	movs	r1, #64	@ 0x40
 8001392:	483e      	ldr	r0, [pc, #248]	@ (800148c <MX_GPIO_Init+0x1c8>)
 8001394:	f002 f842 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800139e:	483c      	ldr	r0, [pc, #240]	@ (8001490 <MX_GPIO_Init+0x1cc>)
 80013a0:	f002 f83c 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4835      	ldr	r0, [pc, #212]	@ (8001490 <MX_GPIO_Init+0x1cc>)
 80013bc:	f001 fe82 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013c0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	482b      	ldr	r0, [pc, #172]	@ (8001488 <MX_GPIO_Init+0x1c4>)
 80013da:	f001 fe73 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013de:	2340      	movs	r3, #64	@ 0x40
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4825      	ldr	r0, [pc, #148]	@ (800148c <MX_GPIO_Init+0x1c8>)
 80013f6:	f001 fe65 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	481f      	ldr	r0, [pc, #124]	@ (800148c <MX_GPIO_Init+0x1c8>)
 800140e:	f001 fe59 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8001412:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4819      	ldr	r0, [pc, #100]	@ (8001490 <MX_GPIO_Init+0x1cc>)
 800142c:	f001 fe4a 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8001430:	23f0      	movs	r3, #240	@ 0xf0
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001434:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800143a:	2302      	movs	r3, #2
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4813      	ldr	r0, [pc, #76]	@ (8001494 <MX_GPIO_Init+0x1d0>)
 8001446:	f001 fe3d 	bl	80030c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	200a      	movs	r0, #10
 8001450:	f001 fa21 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001454:	200a      	movs	r0, #10
 8001456:	f001 fa3a 	bl	80028ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2017      	movs	r0, #23
 8001460:	f001 fa19 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001464:	2017      	movs	r0, #23
 8001466:	f001 fa32 	bl	80028ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2028      	movs	r0, #40	@ 0x28
 8001470:	f001 fa11 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001474:	2028      	movs	r0, #40	@ 0x28
 8001476:	f001 fa2a 	bl	80028ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147a:	bf00      	nop
 800147c:	3730      	adds	r7, #48	@ 0x30
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40020400 	.word	0x40020400
 800148c:	40021800 	.word	0x40021800
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <Error_Handler+0x8>

080014a4 <computeCoeffs>:




//get the frequency components
void computeCoeffs(float output_FFT[FFT_BUFFER_SIZE]){
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
	int fIndex = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < FFT_BUFFER_SIZE; i += 2){
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	e044      	b.n	8001540 <computeCoeffs+0x9c>
		float mag = sqrtf((output_FFT[i] * output_FFT[i]) + (output_FFT[i+1] * output_FFT[i+1]));
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	3301      	adds	r3, #1
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	edd3 6a00 	vldr	s13, [r3]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	3301      	adds	r3, #1
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	f008 fabd 	bl	8009a78 <sqrtf>
 80014fe:	ed87 0a02 	vstr	s0, [r7, #8]
		freq_plot[fIndex].frequency = (float) (fIndex * SAMPLE_RATE_HZ / ((float) FFT_BUFFER_SIZE)); //FREQ TO FREQUENCY BIN MAPPING 2048 bins 
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	4a28      	ldr	r2, [pc, #160]	@ (80015a8 <computeCoeffs+0x104>)
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001512:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80015ac <computeCoeffs+0x108>
 8001516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151a:	4a25      	ldr	r2, [pc, #148]	@ (80015b0 <computeCoeffs+0x10c>)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	edc3 7a00 	vstr	s15, [r3]
		freq_plot[fIndex].magnitude = mag;
 8001526:	4a22      	ldr	r2, [pc, #136]	@ (80015b0 <computeCoeffs+0x10c>)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	3304      	adds	r3, #4
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	601a      	str	r2, [r3, #0]
		fIndex++;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < FFT_BUFFER_SIZE; i += 2){
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	3302      	adds	r3, #2
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001546:	dbb6      	blt.n	80014b6 <computeCoeffs+0x12>
	}
	// Print first 20 bins
    for (int i = 0; i < 20; i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e023      	b.n	8001596 <computeCoeffs+0xf2>
        sprintf(msg, "Freq[%d] = %.2f Hz, Mag = %.2f\r\n", i, freq_plot[i].frequency, freq_plot[i].magnitude);
 800154e:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <computeCoeffs+0x10c>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f875 	bl	8000648 <__aeabi_f2d>
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <computeCoeffs+0x10c>)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	3304      	adds	r3, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f86a 	bl	8000648 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800157c:	e9cd 4500 	strd	r4, r5, [sp]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	490c      	ldr	r1, [pc, #48]	@ (80015b4 <computeCoeffs+0x110>)
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <computeCoeffs+0x114>)
 8001586:	f006 f949 	bl	800781c <siprintf>
        print_msg(msg);
 800158a:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <computeCoeffs+0x114>)
 800158c:	f7ff fd04 	bl	8000f98 <print_msg>
    for (int i = 0; i < 20; i++) {
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b13      	cmp	r3, #19
 800159a:	ddd8      	ble.n	800154e <computeCoeffs+0xaa>
    }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	000f4240 	.word	0x000f4240
 80015ac:	45000000 	.word	0x45000000
 80015b0:	20005874 	.word	0x20005874
 80015b4:	08009ad8 	.word	0x08009ad8
 80015b8:	2000080c 	.word	0x2000080c

080015bc <main>:
//FFT CODE INITS END



int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0


  HAL_Init();
 80015c2:	f000 fb85 	bl	8001cd0 <HAL_Init>
  SystemClock_Config();
 80015c6:	f7ff fcfb 	bl	8000fc0 <SystemClock_Config>

  MX_GPIO_Init();
 80015ca:	f7ff fe7b 	bl	80012c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ce:	f7ff fe59 	bl	8001284 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015d2:	f7ff fdff 	bl	80011d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015d6:	f7ff fe27 	bl	8001228 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80015da:	f7ff fd5d 	bl	8001098 <MX_ADC1_Init>
  MX_TIM2_Init();
 80015de:	f7ff fdad 	bl	800113c <MX_TIM2_Init>

  //init FFT
  arm_rfft_fast_instance_f32 fftHandler;
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 80015e2:	463b      	mov	r3, r7
 80015e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 fc29 	bl	8005e40 <arm_rfft_fast_init_f32>


  while (1)
  {

		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015f2:	4831      	ldr	r0, [pc, #196]	@ (80016b8 <main+0xfc>)
 80015f4:	f001 ff2b 	bl	800344e <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80015f8:	2064      	movs	r0, #100	@ 0x64
 80015fa:	f000 fbdb 	bl	8001db4 <HAL_Delay>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 80015fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001602:	482e      	ldr	r0, [pc, #184]	@ (80016bc <main+0x100>)
 8001604:	f001 fef2 	bl	80033ec <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00f      	beq.n	800162e <main+0x72>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800160e:	2180      	movs	r1, #128	@ 0x80
 8001610:	4829      	ldr	r0, [pc, #164]	@ (80016b8 <main+0xfc>)
 8001612:	f001 ff1c 	bl	800344e <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001616:	2064      	movs	r0, #100	@ 0x64
 8001618:	f000 fbcc 	bl	8001db4 <HAL_Delay>

			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_LEN); //start DMA and ADC
 800161c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001620:	4927      	ldr	r1, [pc, #156]	@ (80016c0 <main+0x104>)
 8001622:	4828      	ldr	r0, [pc, #160]	@ (80016c4 <main+0x108>)
 8001624:	f000 fc2e 	bl	8001e84 <HAL_ADC_Start_DMA>
			HAL_TIM_Base_Start(&htim2);  // Start the timer that triggers ADC
 8001628:	4827      	ldr	r0, [pc, #156]	@ (80016c8 <main+0x10c>)
 800162a:	f003 f9eb 	bl	8004a04 <HAL_TIM_Base_Start>
			//data is ready for FFT

		}

		if(ADC_full == 1){
 800162e:	4b27      	ldr	r3, [pc, #156]	@ (80016cc <main+0x110>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d1db      	bne.n	80015ee <main+0x32>
			ADC_full = 0;
 8001636:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <main+0x110>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 800163c:	4821      	ldr	r0, [pc, #132]	@ (80016c4 <main+0x108>)
 800163e:	f000 fd31 	bl	80020a4 <HAL_ADC_Stop_DMA>
			HAL_TIM_Base_Stop(&htim2); // stop the adc and timer
 8001642:	4821      	ldr	r0, [pc, #132]	@ (80016c8 <main+0x10c>)
 8001644:	f003 fa46 	bl	8004ad4 <HAL_TIM_Base_Stop>

			for (int i = 0; i < 50; i++) {
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	e00e      	b.n	800166c <main+0xb0>
				sprintf(msg, "ADC[%d] = %u\r\n", i, adc_buffer[i]);
 800164e:	4a1c      	ldr	r2, [pc, #112]	@ (80016c0 <main+0x104>)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	491d      	ldr	r1, [pc, #116]	@ (80016d0 <main+0x114>)
 800165a:	481e      	ldr	r0, [pc, #120]	@ (80016d4 <main+0x118>)
 800165c:	f006 f8de 	bl	800781c <siprintf>
				print_msg(msg);
 8001660:	481c      	ldr	r0, [pc, #112]	@ (80016d4 <main+0x118>)
 8001662:	f7ff fc99 	bl	8000f98 <print_msg>
			for (int i = 0; i < 50; i++) {
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3301      	adds	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b31      	cmp	r3, #49	@ 0x31
 8001670:	dded      	ble.n	800164e <main+0x92>
			}

			for(int i = 0; i < ADC_BUF_LEN; i++){ //since DMA is faster than code, we should be able to immediately load values
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	e010      	b.n	800169a <main+0xde>
				input_FFT[i] = (float)adc_buffer[i]; //note the usage of float here - should consider optimization reasons and configurations
 8001678:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <main+0x104>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001688:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <main+0x11c>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < ADC_BUF_LEN; i++){ //since DMA is faster than code, we should be able to immediately load values
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	3301      	adds	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016a0:	dbea      	blt.n	8001678 <main+0xbc>
			}

			//FFT
			arm_rfft_fast_f32(&fftHandler, input_FFT, output_FFT, 0);
 80016a2:	4638      	mov	r0, r7
 80016a4:	2300      	movs	r3, #0
 80016a6:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <main+0x120>)
 80016a8:	490b      	ldr	r1, [pc, #44]	@ (80016d8 <main+0x11c>)
 80016aa:	f004 fc4d 	bl	8005f48 <arm_rfft_fast_f32>
			computeCoeffs(output_FFT);
 80016ae:	480b      	ldr	r0, [pc, #44]	@ (80016dc <main+0x120>)
 80016b0:	f7ff fef8 	bl	80014a4 <computeCoeffs>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80016b4:	e79b      	b.n	80015ee <main+0x32>
 80016b6:	bf00      	nop
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	20000870 	.word	0x20000870
 80016c4:	200001f0 	.word	0x200001f0
 80016c8:	20000298 	.word	0x20000298
 80016cc:	20001870 	.word	0x20001870
 80016d0:	08009afc 	.word	0x08009afc
 80016d4:	2000080c 	.word	0x2000080c
 80016d8:	20001874 	.word	0x20001874
 80016dc:	20003874 	.word	0x20003874

080016e0 <HAL_ADC_ConvCpltCallback>:
  }
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
   if (hadc->Instance == ADC1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a06      	ldr	r2, [pc, #24]	@ (8001708 <HAL_ADC_ConvCpltCallback+0x28>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d106      	bne.n	8001700 <HAL_ADC_ConvCpltCallback+0x20>
    {
      // adc_buffer is now full
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80016f2:	2101      	movs	r1, #1
 80016f4:	4805      	ldr	r0, [pc, #20]	@ (800170c <HAL_ADC_ConvCpltCallback+0x2c>)
 80016f6:	f001 feaa 	bl	800344e <HAL_GPIO_TogglePin>
			ADC_full = 1;
 80016fa:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <HAL_ADC_ConvCpltCallback+0x30>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
    }

   


}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40012000 	.word	0x40012000
 800170c:	40020400 	.word	0x40020400
 8001710:	20001870 	.word	0x20001870

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <HAL_MspInit+0x4c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	4a0f      	ldr	r2, [pc, #60]	@ (8001760 <HAL_MspInit+0x4c>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001728:	6453      	str	r3, [r2, #68]	@ 0x44
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <HAL_MspInit+0x4c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_MspInit+0x4c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a08      	ldr	r2, [pc, #32]	@ (8001760 <HAL_MspInit+0x4c>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_MspInit+0x4c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a36      	ldr	r2, [pc, #216]	@ (800185c <HAL_ADC_MspInit+0xf8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d166      	bne.n	8001854 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a34      	ldr	r2, [pc, #208]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b32      	ldr	r3, [pc, #200]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
		
		
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a26      	ldr	r2, [pc, #152]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_ADC_MspInit+0xfc>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017da:	2301      	movs	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017de:	2303      	movs	r3, #3
 80017e0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	481d      	ldr	r0, [pc, #116]	@ (8001864 <HAL_ADC_MspInit+0x100>)
 80017ee:	f001 fc69 	bl	80030c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 80017f4:	4a1d      	ldr	r2, [pc, #116]	@ (800186c <HAL_ADC_MspInit+0x108>)
 80017f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001804:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 800180c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001810:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 8001814:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001818:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 800181c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001820:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001822:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 8001824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001828:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 800182c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001830:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001838:	480b      	ldr	r0, [pc, #44]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 800183a:	f001 f863 	bl	8002904 <HAL_DMA_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001844:	f7ff fe28 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 800184c:	639a      	str	r2, [r3, #56]	@ 0x38
 800184e:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_ADC_MspInit+0x104>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	@ 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40012000 	.word	0x40012000
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000
 8001868:	20000238 	.word	0x20000238
 800186c:	40026410 	.word	0x40026410

08001870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001880:	d10d      	bne.n	800189e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_TIM_Base_MspInit+0x3c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <HAL_TIM_Base_MspInit+0x3c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_TIM_Base_MspInit+0x3c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a19      	ldr	r2, [pc, #100]	@ (8001934 <HAL_UART_MspInit+0x84>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d12c      	bne.n	800192c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <HAL_UART_MspInit+0x88>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	4a17      	ldr	r2, [pc, #92]	@ (8001938 <HAL_UART_MspInit+0x88>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_UART_MspInit+0x88>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_UART_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a10      	ldr	r2, [pc, #64]	@ (8001938 <HAL_UART_MspInit+0x88>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_UART_MspInit+0x88>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800190a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800191c:	2307      	movs	r3, #7
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <HAL_UART_MspInit+0x8c>)
 8001928:	f001 fbcc 	bl	80030c4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800192c:	bf00      	nop
 800192e:	3728      	adds	r7, #40	@ 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40004800 	.word	0x40004800
 8001938:	40023800 	.word	0x40023800
 800193c:	40020c00 	.word	0x40020c00

08001940 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0a0      	sub	sp, #128	@ 0x80
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	225c      	movs	r2, #92	@ 0x5c
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f005 ffbe 	bl	80078e2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800196e:	d14e      	bne.n	8001a0e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001974:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001976:	2300      	movs	r3, #0
 8001978:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fff8 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800198a:	f7ff fd85 	bl	8001498 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_PCD_MspInit+0xd8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a20      	ldr	r2, [pc, #128]	@ (8001a18 <HAL_PCD_MspInit+0xd8>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <HAL_PCD_MspInit+0xd8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019aa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80019ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019bc:	230a      	movs	r3, #10
 80019be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019c4:	4619      	mov	r1, r3
 80019c6:	4815      	ldr	r0, [pc, #84]	@ (8001a1c <HAL_PCD_MspInit+0xdc>)
 80019c8:	f001 fb7c 	bl	80030c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019de:	4619      	mov	r1, r3
 80019e0:	480e      	ldr	r0, [pc, #56]	@ (8001a1c <HAL_PCD_MspInit+0xdc>)
 80019e2:	f001 fb6f 	bl	80030c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <HAL_PCD_MspInit+0xd8>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <HAL_PCD_MspInit+0xd8>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_PCD_MspInit+0xd8>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_PCD_MspInit+0xd8>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_PCD_MspInit+0xd8>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001a0e:	bf00      	nop
 8001a10:	3780      	adds	r7, #128	@ 0x80
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <NMI_Handler+0x4>

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f000 f97d 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8001a82:	2010      	movs	r0, #16
 8001a84:	f001 fcfe 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 8001a90:	2020      	movs	r0, #32
 8001a92:	f001 fcf7 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 8001a96:	2040      	movs	r0, #64	@ 0x40
 8001a98:	f001 fcf4 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 8001a9c:	2080      	movs	r0, #128	@ 0x80
 8001a9e:	f001 fcf1 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001aaa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001aae:	f001 fce9 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <DMA2_Stream0_IRQHandler+0x10>)
 8001abe:	f001 f897 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000238 	.word	0x20000238

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_kill>:

int _kill(int pid, int sig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae6:	f005 ff4f 	bl	8007988 <__errno>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2216      	movs	r2, #22
 8001aee:	601a      	str	r2, [r3, #0]
  return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_exit>:

void _exit (int status)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffe7 	bl	8001adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0e:	bf00      	nop
 8001b10:	e7fd      	b.n	8001b0e <_exit+0x12>

08001b12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e00a      	b.n	8001b3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b24:	f3af 8000 	nop.w
 8001b28:	4601      	mov	r1, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	60ba      	str	r2, [r7, #8]
 8001b30:	b2ca      	uxtb	r2, r1
 8001b32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dbf0      	blt.n	8001b24 <_read+0x12>
  }

  return len;
 8001b42:	687b      	ldr	r3, [r7, #4]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e009      	b.n	8001b72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	60ba      	str	r2, [r7, #8]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dbf1      	blt.n	8001b5e <_write+0x12>
  }
  return len;
 8001b7a:	687b      	ldr	r3, [r7, #4]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_close>:

int _close(int file)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bac:	605a      	str	r2, [r3, #4]
  return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_isatty>:

int _isatty(int file)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	@ (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f005 feb4 	bl	8007988 <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	@ (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20020000 	.word	0x20020000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	20009874 	.word	0x20009874
 8001c54:	200099c8 	.word	0x200099c8

08001c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c80:	f7ff ffea 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	@ (8001cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f005 fe73 	bl	8007994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7ff fc85 	bl	80015bc <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cc0:	0801d308 	.word	0x0801d308
  ldr r2, =_sbss
 8001cc4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cc8:	200099c8 	.word	0x200099c8

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>
	...

08001cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <HAL_Init+0x40>)
 8001cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <HAL_Init+0x40>)
 8001ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <HAL_Init+0x40>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f000 fdc1 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f000 f808 	bl	8001d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d04:	f7ff fd06 	bl	8001714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <HAL_InitTick+0x54>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_InitTick+0x58>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fdd9 	bl	80028ea <HAL_SYSTICK_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00e      	b.n	8001d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d80a      	bhi.n	8001d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f000 fda1 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d54:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <HAL_InitTick+0x5c>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_IncTick+0x20>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_IncTick+0x24>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <HAL_IncTick+0x24>)
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000008 	.word	0x20000008
 8001d98:	20009878 	.word	0x20009878

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_GetTick+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20009878 	.word	0x20009878

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff ffee 	bl	8001d9c <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d005      	beq.n	8001dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <HAL_Delay+0x44>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dda:	bf00      	nop
 8001ddc:	f7ff ffde 	bl	8001d9c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d8f7      	bhi.n	8001ddc <HAL_Delay+0x28>
  {
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008

08001dfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e033      	b.n	8001e7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fca2 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d118      	bne.n	8001e6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e42:	f023 0302 	bic.w	r3, r3, #2
 8001e46:	f043 0202 	orr.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fac8 	bl	80023e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e6a:	e001      	b.n	8001e70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Start_DMA+0x1e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e0e9      	b.n	8002076 <HAL_ADC_Start_DMA+0x1f2>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d018      	beq.n	8001eea <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec8:	4b6d      	ldr	r3, [pc, #436]	@ (8002080 <HAL_ADC_Start_DMA+0x1fc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8002084 <HAL_ADC_Start_DMA+0x200>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0c9a      	lsrs	r2, r3, #18
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f9      	bne.n	8001ede <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef8:	d107      	bne.n	8001f0a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f08:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f040 80a1 	bne.w	800205c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f58:	d106      	bne.n	8001f68 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f023 0206 	bic.w	r2, r3, #6
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f66:	e002      	b.n	8001f6e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f76:	4b44      	ldr	r3, [pc, #272]	@ (8002088 <HAL_ADC_Start_DMA+0x204>)
 8001f78:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7e:	4a43      	ldr	r2, [pc, #268]	@ (800208c <HAL_ADC_Start_DMA+0x208>)
 8001f80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f86:	4a42      	ldr	r2, [pc, #264]	@ (8002090 <HAL_ADC_Start_DMA+0x20c>)
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8e:	4a41      	ldr	r2, [pc, #260]	@ (8002094 <HAL_ADC_Start_DMA+0x210>)
 8001f90:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001faa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	334c      	adds	r3, #76	@ 0x4c
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f000 fd48 	bl	8002a60 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d12a      	bne.n	8002032 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <HAL_ADC_Start_DMA+0x214>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d015      	beq.n	8002012 <HAL_ADC_Start_DMA+0x18e>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2c      	ldr	r2, [pc, #176]	@ (800209c <HAL_ADC_Start_DMA+0x218>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_Start_DMA+0x178>
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <HAL_ADC_Start_DMA+0x204>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a27      	ldr	r2, [pc, #156]	@ (80020a0 <HAL_ADC_Start_DMA+0x21c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d136      	bne.n	8002074 <HAL_ADC_Start_DMA+0x1f0>
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_ADC_Start_DMA+0x204>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d130      	bne.n	8002074 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d129      	bne.n	8002074 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	e020      	b.n	8002074 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <HAL_ADC_Start_DMA+0x214>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d11b      	bne.n	8002074 <HAL_ADC_Start_DMA+0x1f0>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d114      	bne.n	8002074 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	e00b      	b.n	8002074 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	f043 0210 	orr.w	r2, r3, #16
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000
 8002084:	431bde83 	.word	0x431bde83
 8002088:	40012300 	.word	0x40012300
 800208c:	080025dd 	.word	0x080025dd
 8002090:	08002697 	.word	0x08002697
 8002094:	080026b3 	.word	0x080026b3
 8002098:	40012000 	.word	0x40012000
 800209c:	40012100 	.word	0x40012100
 80020a0:	40012200 	.word	0x40012200

080020a4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_ADC_Stop_DMA+0x1a>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e048      	b.n	8002150 <HAL_ADC_Stop_DMA+0xac>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d130      	bne.n	8002146 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020f2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d10f      	bne.n	8002122 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fd02 	bl	8002b10 <HAL_DMA_Abort>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002130:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1c>
 8002198:	2302      	movs	r3, #2
 800219a:	e113      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x244>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	d925      	bls.n	80021f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68d9      	ldr	r1, [r3, #12]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	3b1e      	subs	r3, #30
 80021c2:	2207      	movs	r2, #7
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68d9      	ldr	r1, [r3, #12]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	4603      	mov	r3, r0
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4403      	add	r3, r0
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	409a      	lsls	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	e022      	b.n	800223e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	2207      	movs	r2, #7
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	400a      	ands	r2, r1
 800221a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6919      	ldr	r1, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	4603      	mov	r3, r0
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4403      	add	r3, r0
 8002234:	409a      	lsls	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b06      	cmp	r3, #6
 8002244:	d824      	bhi.n	8002290 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	3b05      	subs	r3, #5
 8002258:	221f      	movs	r2, #31
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	400a      	ands	r2, r1
 8002266:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3b05      	subs	r3, #5
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	635a      	str	r2, [r3, #52]	@ 0x34
 800228e:	e04c      	b.n	800232a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b0c      	cmp	r3, #12
 8002296:	d824      	bhi.n	80022e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3b23      	subs	r3, #35	@ 0x23
 80022aa:	221f      	movs	r2, #31
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43da      	mvns	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	400a      	ands	r2, r1
 80022b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b23      	subs	r3, #35	@ 0x23
 80022d4:	fa00 f203 	lsl.w	r2, r0, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e0:	e023      	b.n	800232a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b41      	subs	r3, #65	@ 0x41
 80022f4:	221f      	movs	r2, #31
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	400a      	ands	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b41      	subs	r3, #65	@ 0x41
 800231e:	fa00 f203 	lsl.w	r2, r0, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800232a:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <HAL_ADC_ConfigChannel+0x250>)
 800232c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a28      	ldr	r2, [pc, #160]	@ (80023d4 <HAL_ADC_ConfigChannel+0x254>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d10f      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1d8>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b12      	cmp	r3, #18
 800233e:	d10b      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1d      	ldr	r2, [pc, #116]	@ (80023d4 <HAL_ADC_ConfigChannel+0x254>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d12b      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x23a>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <HAL_ADC_ConfigChannel+0x258>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <HAL_ADC_ConfigChannel+0x1f4>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b11      	cmp	r3, #17
 8002372:	d122      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a11      	ldr	r2, [pc, #68]	@ (80023d8 <HAL_ADC_ConfigChannel+0x258>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d111      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002396:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_ADC_ConfigChannel+0x25c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a11      	ldr	r2, [pc, #68]	@ (80023e0 <HAL_ADC_ConfigChannel+0x260>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	0c9a      	lsrs	r2, r3, #18
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023ac:	e002      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f9      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40012300 	.word	0x40012300
 80023d4:	40012000 	.word	0x40012000
 80023d8:	10000012 	.word	0x10000012
 80023dc:	20000000 	.word	0x20000000
 80023e0:	431bde83 	.word	0x431bde83

080023e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ec:	4b79      	ldr	r3, [pc, #484]	@ (80025d4 <ADC_Init+0x1f0>)
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	021a      	lsls	r2, r3, #8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800243c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800245e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	4a58      	ldr	r2, [pc, #352]	@ (80025d8 <ADC_Init+0x1f4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d022      	beq.n	80024c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800248a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	e00f      	b.n	80024e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0202 	bic.w	r2, r2, #2
 80024f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7e1b      	ldrb	r3, [r3, #24]
 80024fc:	005a      	lsls	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800251e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800252e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	3b01      	subs	r3, #1
 800253c:	035a      	lsls	r2, r3, #13
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e007      	b.n	8002558 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002556:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	3b01      	subs	r3, #1
 8002574:	051a      	lsls	r2, r3, #20
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800258c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800259a:	025a      	lsls	r2, r3, #9
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	029a      	lsls	r2, r3, #10
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40012300 	.word	0x40012300
 80025d8:	0f000001 	.word	0x0f000001

080025dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d13c      	bne.n	8002670 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d12b      	bne.n	8002668 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d127      	bne.n	8002668 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002630:	2b00      	cmp	r3, #0
 8002632:	d119      	bne.n	8002668 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0220 	bic.w	r2, r2, #32
 8002642:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff f839 	bl	80016e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800266e:	e00e      	b.n	800268e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fd75 	bl	800216c <HAL_ADC_ErrorCallback>
}
 8002682:	e004      	b.n	800268e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fd57 	bl	8002158 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff fd4a 	bl	800216c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4907      	ldr	r1, [pc, #28]	@ (800277c <__NVIC_EnableIRQ+0x38>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	@ (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	@ (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	@ 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	@ 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff8e 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	@ (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff29 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff3e 	bl	8002728 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff8e 	bl	80027d4 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5d 	bl	8002780 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff31 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffa2 	bl	800283c <SysTick_Config>
 80028f8:	4603      	mov	r3, r0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff fa44 	bl	8001d9c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e099      	b.n	8002a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002940:	e00f      	b.n	8002962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002942:	f7ff fa2b 	bl	8001d9c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b05      	cmp	r3, #5
 800294e:	d908      	bls.n	8002962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e078      	b.n	8002a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e8      	bne.n	8002942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4b38      	ldr	r3, [pc, #224]	@ (8002a5c <HAL_DMA_Init+0x158>)
 800297c:	4013      	ands	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d107      	bne.n	80029cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	4313      	orrs	r3, r2
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0307 	bic.w	r3, r3, #7
 80029e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d117      	bne.n	8002a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fadf 	bl	8002fcc <DMA_CheckFifoParam>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2240      	movs	r2, #64	@ 0x40
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a22:	2301      	movs	r3, #1
 8002a24:	e016      	b.n	8002a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa96 	bl	8002f60 <DMA_CalcBaseAndBitshift>
 8002a34:	4603      	mov	r3, r0
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	223f      	movs	r2, #63	@ 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	f010803f 	.word	0xf010803f

08002a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_DMA_Start_IT+0x26>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e040      	b.n	8002b08 <HAL_DMA_Start_IT+0xa8>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d12f      	bne.n	8002afa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fa28 	bl	8002f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	223f      	movs	r2, #63	@ 0x3f
 8002aba:	409a      	lsls	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0216 	orr.w	r2, r2, #22
 8002ace:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0208 	orr.w	r2, r2, #8
 8002ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e005      	b.n	8002b06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
 8002b04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b1e:	f7ff f93d 	bl	8001d9c <HAL_GetTick>
 8002b22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d008      	beq.n	8002b42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2280      	movs	r2, #128	@ 0x80
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e052      	b.n	8002be8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0216 	bic.w	r2, r2, #22
 8002b50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d103      	bne.n	8002b72 <HAL_DMA_Abort+0x62>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0208 	bic.w	r2, r2, #8
 8002b80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b92:	e013      	b.n	8002bbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b94:	f7ff f902 	bl	8001d9c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d90c      	bls.n	8002bbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2203      	movs	r2, #3
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e015      	b.n	8002be8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e4      	bne.n	8002b94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bce:	223f      	movs	r2, #63	@ 0x3f
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8002e38 <HAL_DMA_IRQHandler+0x248>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a8e      	ldr	r2, [pc, #568]	@ (8002e3c <HAL_DMA_IRQHandler+0x24c>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0a9b      	lsrs	r3, r3, #10
 8002c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01a      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	2208      	movs	r2, #8
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	2201      	movs	r2, #1
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7e:	2201      	movs	r2, #1
 8002c80:	409a      	lsls	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	2204      	movs	r2, #4
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00b      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	f043 0204 	orr.w	r2, r3, #4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	2210      	movs	r2, #16
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d043      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d03c      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	2210      	movs	r2, #16
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d018      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d108      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d024      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
 8002d1e:	e01f      	b.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01b      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
 8002d30:	e016      	b.n	8002d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0208 	bic.w	r2, r2, #8
 8002d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	2220      	movs	r2, #32
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 808f 	beq.w	8002e90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8087 	beq.w	8002e90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	2220      	movs	r2, #32
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d136      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0216 	bic.w	r2, r2, #22
 8002da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <HAL_DMA_IRQHandler+0x1da>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0208 	bic.w	r2, r2, #8
 8002dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	223f      	movs	r2, #63	@ 0x3f
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d07e      	beq.n	8002efc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
        }
        return;
 8002e06:	e079      	b.n	8002efc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01d      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d031      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
 8002e34:	e02c      	b.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d023      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
 8002e50:	e01e      	b.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10f      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0210 	bic.w	r2, r2, #16
 8002e6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d032      	beq.n	8002efe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d022      	beq.n	8002eea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2205      	movs	r2, #5
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d307      	bcc.n	8002ed8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f2      	bne.n	8002ebc <HAL_DMA_IRQHandler+0x2cc>
 8002ed6:	e000      	b.n	8002eda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ed8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
 8002efa:	e000      	b.n	8002efe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002efc:	bf00      	nop
    }
  }
}
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b40      	cmp	r3, #64	@ 0x40
 8002f30:	d108      	bne.n	8002f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f42:	e007      	b.n	8002f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3b10      	subs	r3, #16
 8002f70:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f7a:	4a13      	ldr	r2, [pc, #76]	@ (8002fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d909      	bls.n	8002fa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f96:	f023 0303 	bic.w	r3, r3, #3
 8002f9a:	1d1a      	adds	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fa0:	e007      	b.n	8002fb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	aaaaaaab 	.word	0xaaaaaaab
 8002fc8:	08009b24 	.word	0x08009b24

08002fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11f      	bne.n	8003026 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d856      	bhi.n	800309a <DMA_CheckFifoParam+0xce>
 8002fec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <DMA_CheckFifoParam+0x28>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003017 	.word	0x08003017
 8002ffc:	08003005 	.word	0x08003005
 8003000:	0800309b 	.word	0x0800309b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d046      	beq.n	800309e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e043      	b.n	800309e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800301e:	d140      	bne.n	80030a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e03d      	b.n	80030a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800302e:	d121      	bne.n	8003074 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d837      	bhi.n	80030a6 <DMA_CheckFifoParam+0xda>
 8003036:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <DMA_CheckFifoParam+0x70>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	0800304d 	.word	0x0800304d
 8003040:	08003053 	.word	0x08003053
 8003044:	0800304d 	.word	0x0800304d
 8003048:	08003065 	.word	0x08003065
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e030      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003056:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d025      	beq.n	80030aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003062:	e022      	b.n	80030aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800306c:	d11f      	bne.n	80030ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003072:	e01c      	b.n	80030ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d903      	bls.n	8003082 <DMA_CheckFifoParam+0xb6>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d003      	beq.n	8003088 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003080:	e018      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      break;
 8003086:	e015      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00e      	beq.n	80030b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e00b      	b.n	80030b2 <DMA_CheckFifoParam+0xe6>
      break;
 800309a:	bf00      	nop
 800309c:	e00a      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 800309e:	bf00      	nop
 80030a0:	e008      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030a2:	bf00      	nop
 80030a4:	e006      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
 80030a8:	e004      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e002      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
    }
  } 
  
  return status; 
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	@ 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e165      	b.n	80033ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f040 8154 	bne.w	80033a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d005      	beq.n	8003116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003112:	2b02      	cmp	r3, #2
 8003114:	d130      	bne.n	8003178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 0201 	and.w	r2, r3, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b03      	cmp	r3, #3
 8003182:	d017      	beq.n	80031b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d123      	bne.n	8003208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	08da      	lsrs	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3208      	adds	r2, #8
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0203 	and.w	r2, r3, #3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80ae 	beq.w	80033a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b5d      	ldr	r3, [pc, #372]	@ (80033c4 <HAL_GPIO_Init+0x300>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	4a5c      	ldr	r2, [pc, #368]	@ (80033c4 <HAL_GPIO_Init+0x300>)
 8003254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003258:	6453      	str	r3, [r2, #68]	@ 0x44
 800325a:	4b5a      	ldr	r3, [pc, #360]	@ (80033c4 <HAL_GPIO_Init+0x300>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003266:	4a58      	ldr	r2, [pc, #352]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	220f      	movs	r2, #15
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4f      	ldr	r2, [pc, #316]	@ (80033cc <HAL_GPIO_Init+0x308>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d025      	beq.n	80032de <HAL_GPIO_Init+0x21a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4e      	ldr	r2, [pc, #312]	@ (80033d0 <HAL_GPIO_Init+0x30c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <HAL_GPIO_Init+0x216>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4d      	ldr	r2, [pc, #308]	@ (80033d4 <HAL_GPIO_Init+0x310>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d019      	beq.n	80032d6 <HAL_GPIO_Init+0x212>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4c      	ldr	r2, [pc, #304]	@ (80033d8 <HAL_GPIO_Init+0x314>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x20e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4b      	ldr	r2, [pc, #300]	@ (80033dc <HAL_GPIO_Init+0x318>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x20a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4a      	ldr	r2, [pc, #296]	@ (80033e0 <HAL_GPIO_Init+0x31c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x206>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a49      	ldr	r2, [pc, #292]	@ (80033e4 <HAL_GPIO_Init+0x320>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x202>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e00c      	b.n	80032e0 <HAL_GPIO_Init+0x21c>
 80032c6:	2307      	movs	r3, #7
 80032c8:	e00a      	b.n	80032e0 <HAL_GPIO_Init+0x21c>
 80032ca:	2305      	movs	r3, #5
 80032cc:	e008      	b.n	80032e0 <HAL_GPIO_Init+0x21c>
 80032ce:	2304      	movs	r3, #4
 80032d0:	e006      	b.n	80032e0 <HAL_GPIO_Init+0x21c>
 80032d2:	2303      	movs	r3, #3
 80032d4:	e004      	b.n	80032e0 <HAL_GPIO_Init+0x21c>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e002      	b.n	80032e0 <HAL_GPIO_Init+0x21c>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_GPIO_Init+0x21c>
 80032de:	2300      	movs	r3, #0
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	f002 0203 	and.w	r2, r2, #3
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	4093      	lsls	r3, r2
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f0:	4935      	ldr	r1, [pc, #212]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	3302      	adds	r3, #2
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fe:	4b3a      	ldr	r3, [pc, #232]	@ (80033e8 <HAL_GPIO_Init+0x324>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003322:	4a31      	ldr	r2, [pc, #196]	@ (80033e8 <HAL_GPIO_Init+0x324>)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003328:	4b2f      	ldr	r3, [pc, #188]	@ (80033e8 <HAL_GPIO_Init+0x324>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800334c:	4a26      	ldr	r2, [pc, #152]	@ (80033e8 <HAL_GPIO_Init+0x324>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003352:	4b25      	ldr	r3, [pc, #148]	@ (80033e8 <HAL_GPIO_Init+0x324>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003376:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <HAL_GPIO_Init+0x324>)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800337c:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <HAL_GPIO_Init+0x324>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033a0:	4a11      	ldr	r2, [pc, #68]	@ (80033e8 <HAL_GPIO_Init+0x324>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f67f ae96 	bls.w	80030e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3724      	adds	r7, #36	@ 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40013800 	.word	0x40013800
 80033cc:	40020000 	.word	0x40020000
 80033d0:	40020400 	.word	0x40020400
 80033d4:	40020800 	.word	0x40020800
 80033d8:	40020c00 	.word	0x40020c00
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40021400 	.word	0x40021400
 80033e4:	40021800 	.word	0x40021800
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	4613      	mov	r3, r2
 800342a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003438:	e003      	b.n	8003442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	041a      	lsls	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	041a      	lsls	r2, r3, #16
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43d9      	mvns	r1, r3
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	400b      	ands	r3, r1
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	619a      	str	r2, [r3, #24]
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800348e:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349a:	4a05      	ldr	r2, [pc, #20]	@ (80034b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f806 	bl	80034b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40013c00 	.word	0x40013c00

080034b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af02      	add	r7, sp, #8
 80034d0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e108      	b.n	80036ee <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fa22 	bl	8001940 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2203      	movs	r2, #3
 8003500:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350a:	d102      	bne.n	8003512 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 f9fc 	bl	8005914 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	7c1a      	ldrb	r2, [r3, #16]
 8003524:	f88d 2000 	strb.w	r2, [sp]
 8003528:	3304      	adds	r3, #4
 800352a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800352c:	f002 f98e 	bl	800584c <USB_CoreInit>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0d5      	b.n	80036ee <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f002 f9f4 	bl	8005936 <USB_SetCurrentMode>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0c6      	b.n	80036ee <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e04a      	b.n	80035fc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3315      	adds	r3, #21
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3314      	adds	r3, #20
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	b298      	uxth	r0, r3
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	332e      	adds	r3, #46	@ 0x2e
 80035a2:	4602      	mov	r2, r0
 80035a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3318      	adds	r3, #24
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	331c      	adds	r3, #28
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3320      	adds	r3, #32
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3324      	adds	r3, #36	@ 0x24
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	3301      	adds	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	791b      	ldrb	r3, [r3, #4]
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	429a      	cmp	r2, r3
 8003604:	d3af      	bcc.n	8003566 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e044      	b.n	8003696 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	3301      	adds	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	791b      	ldrb	r3, [r3, #4]
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	429a      	cmp	r2, r3
 800369e:	d3b5      	bcc.n	800360c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7c1a      	ldrb	r2, [r3, #16]
 80036a8:	f88d 2000 	strb.w	r2, [sp]
 80036ac:	3304      	adds	r3, #4
 80036ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b0:	f002 f98e 	bl	80059d0 <USB_DevInit>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e013      	b.n	80036ee <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7b1b      	ldrb	r3, [r3, #12]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d102      	bne.n	80036e2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f80a 	bl	80036f6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 fb49 	bl	8005d7e <USB_DevDisconnect>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003728:	f043 0303 	orr.w	r3, r3, #3
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0cc      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003754:	4b68      	ldr	r3, [pc, #416]	@ (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d90c      	bls.n	800377c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b65      	ldr	r3, [pc, #404]	@ (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	@ (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a58      	ldr	r2, [pc, #352]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800379e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a52      	ldr	r2, [pc, #328]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d044      	beq.n	8003860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d119      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d003      	beq.n	80037fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fe:	4b3f      	ldr	r3, [pc, #252]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380e:	4b3b      	ldr	r3, [pc, #236]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e067      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800381e:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 0203 	bic.w	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4934      	ldr	r1, [pc, #208]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003830:	f7fe fab4 	bl	8001d9c <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	e00a      	b.n	800384e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003838:	f7fe fab0 	bl	8001d9c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e04f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384e:	4b2b      	ldr	r3, [pc, #172]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 020c 	and.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	429a      	cmp	r2, r3
 800385e:	d1eb      	bne.n	8003838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003860:	4b25      	ldr	r3, [pc, #148]	@ (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d20c      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b22      	ldr	r3, [pc, #136]	@ (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	@ (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b2:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 fb7f 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	@ (8003900 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	@ (8003904 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_RCC_ClockConfig+0x1c8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fa14 	bl	8001d14 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	08009b0c 	.word	0x08009b0c
 8003904:	20000000 	.word	0x20000000
 8003908:	20000004 	.word	0x20000004

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003910:	4b03      	ldr	r3, [pc, #12]	@ (8003920 <HAL_RCC_GetHCLKFreq+0x14>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000000 	.word	0x20000000

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003928:	f7ff fff0 	bl	800390c <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	0a9b      	lsrs	r3, r3, #10
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	@ (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	08009b1c 	.word	0x08009b1c

0800394c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003950:	f7ff ffdc 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0b5b      	lsrs	r3, r3, #13
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	@ (8003970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	08009b1c 	.word	0x08009b1c

08003974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	@ 0x30
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d010      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80039ac:	4b6f      	ldr	r3, [pc, #444]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039b2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	496c      	ldr	r1, [pc, #432]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80039ca:	2301      	movs	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d010      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80039da:	4b64      	ldr	r3, [pc, #400]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	4960      	ldr	r1, [pc, #384]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80039f8:	2301      	movs	r3, #1
 80039fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d017      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a08:	4b58      	ldr	r3, [pc, #352]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	4955      	ldr	r1, [pc, #340]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a26:	d101      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003a34:	2301      	movs	r3, #1
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d017      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a44:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a52:	4946      	ldr	r1, [pc, #280]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a62:	d101      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003a64:	2301      	movs	r3, #1
 8003a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003a70:	2301      	movs	r3, #1
 8003a72:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 808a 	beq.w	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b39      	ldr	r3, [pc, #228]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a38      	ldr	r2, [pc, #224]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b36      	ldr	r3, [pc, #216]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a9e:	4b34      	ldr	r3, [pc, #208]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a33      	ldr	r2, [pc, #204]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003aaa:	f7fe f977 	bl	8001d9c <HAL_GetTick>
 8003aae:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fe f973 	bl	8001d9c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e278      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ad0:	4b26      	ldr	r3, [pc, #152]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02f      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d028      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aee:	4b1f      	ldr	r3, [pc, #124]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b04:	4a19      	ldr	r2, [pc, #100]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b0a:	4b18      	ldr	r3, [pc, #96]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d114      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fe f941 	bl	8001d9c <HAL_GetTick>
 8003b1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fe f93d 	bl	8001d9c <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e240      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ee      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b4c:	d114      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b62:	4902      	ldr	r1, [pc, #8]	@ (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]
 8003b68:	e00c      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40007000 	.word	0x40007000
 8003b74:	42470e40 	.word	0x42470e40
 8003b78:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a49      	ldr	r2, [pc, #292]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b7e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b82:	6093      	str	r3, [r2, #8]
 8003b84:	4b47      	ldr	r3, [pc, #284]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	4944      	ldr	r1, [pc, #272]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003baa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	4937      	ldr	r1, [pc, #220]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bda:	4b32      	ldr	r3, [pc, #200]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be8:	492e      	ldr	r1, [pc, #184]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d011      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c02:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0a:	4926      	ldr	r1, [pc, #152]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c32:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	491a      	ldr	r1, [pc, #104]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d011      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003c4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c54:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5c:	4911      	ldr	r1, [pc, #68]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d005      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c80:	f040 80ff 	bne.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c84:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c8a:	f7fe f887 	bl	8001d9c <HAL_GetTick>
 8003c8e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c90:	e00e      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c92:	f7fe f883 	bl	8001d9c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d907      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e188      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	424711e0 	.word	0x424711e0
 8003cac:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ea      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d009      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d028      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d124      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ce4:	4b71      	ldr	r3, [pc, #452]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cfc:	0e1b      	lsrs	r3, r3, #24
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	019b      	lsls	r3, r3, #6
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	3b01      	subs	r3, #1
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	071b      	lsls	r3, r3, #28
 8003d26:	4961      	ldr	r1, [pc, #388]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d035      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d58:	d130      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d5a:	4b54      	ldr	r3, [pc, #336]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	3301      	adds	r3, #1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d72:	0f1b      	lsrs	r3, r3, #28
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	019b      	lsls	r3, r3, #6
 8003d84:	431a      	orrs	r2, r3
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	071b      	lsls	r3, r3, #28
 8003d9c:	4943      	ldr	r1, [pc, #268]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003da4:	4b41      	ldr	r3, [pc, #260]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003daa:	f023 021f 	bic.w	r2, r3, #31
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	493d      	ldr	r1, [pc, #244]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d029      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd0:	d124      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003dd2:	4b36      	ldr	r3, [pc, #216]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003de4:	4b31      	ldr	r3, [pc, #196]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dea:	0f1b      	lsrs	r3, r3, #28
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	019b      	lsls	r3, r3, #6
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	3b01      	subs	r3, #1
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	071b      	lsls	r3, r3, #28
 8003e14:	4925      	ldr	r1, [pc, #148]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	4917      	ldr	r1, [pc, #92]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e56:	4b16      	ldr	r3, [pc, #88]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5c:	f7fd ff9e 	bl	8001d9c <HAL_GetTick>
 8003e60:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e64:	f7fd ff9a 	bl	8001d9c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e09f      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e76:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	f040 8095 	bne.w	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e90:	f7fd ff84 	bl	8001d9c <HAL_GetTick>
 8003e94:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e96:	e00f      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e98:	f7fd ff80 	bl	8001d9c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d908      	bls.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e085      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	42470068 	.word	0x42470068
 8003eb4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eb8:	4b41      	ldr	r3, [pc, #260]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ec4:	d0e8      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d02b      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d127      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003eee:	4b34      	ldr	r3, [pc, #208]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699a      	ldr	r2, [r3, #24]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	019b      	lsls	r3, r3, #6
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	061b      	lsls	r3, r3, #24
 8003f1c:	4928      	ldr	r1, [pc, #160]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f24:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f2a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	3b01      	subs	r3, #1
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	4922      	ldr	r1, [pc, #136]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01d      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f52:	d118      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	0e1b      	lsrs	r3, r3, #24
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	019b      	lsls	r3, r3, #6
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	3b01      	subs	r3, #1
 8003f76:	041b      	lsls	r3, r3, #16
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	4910      	ldr	r1, [pc, #64]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f86:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f8c:	f7fd ff06 	bl	8001d9c <HAL_GetTick>
 8003f90:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f94:	f7fd ff02 	bl	8001d9c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e007      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fa6:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fb2:	d1ef      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3730      	adds	r7, #48	@ 0x30
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	42470070 	.word	0x42470070

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b0ae      	sub	sp, #184	@ 0xb8
 8003fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fee:	4bcb      	ldr	r3, [pc, #812]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	f200 8206 	bhi.w	8004408 <HAL_RCC_GetSysClockFreq+0x440>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004039 	.word	0x08004039
 8004008:	08004409 	.word	0x08004409
 800400c:	08004409 	.word	0x08004409
 8004010:	08004409 	.word	0x08004409
 8004014:	08004041 	.word	0x08004041
 8004018:	08004409 	.word	0x08004409
 800401c:	08004409 	.word	0x08004409
 8004020:	08004409 	.word	0x08004409
 8004024:	08004049 	.word	0x08004049
 8004028:	08004409 	.word	0x08004409
 800402c:	08004409 	.word	0x08004409
 8004030:	08004409 	.word	0x08004409
 8004034:	08004239 	.word	0x08004239
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004038:	4bb9      	ldr	r3, [pc, #740]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x358>)
 800403a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800403e:	e1e7      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004040:	4bb8      	ldr	r3, [pc, #736]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004042:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004046:	e1e3      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004048:	4bb4      	ldr	r3, [pc, #720]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004050:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004054:	4bb1      	ldr	r3, [pc, #708]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d071      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004060:	4bae      	ldr	r3, [pc, #696]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	099b      	lsrs	r3, r3, #6
 8004066:	2200      	movs	r2, #0
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800406c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004086:	4622      	mov	r2, r4
 8004088:	462b      	mov	r3, r5
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4621      	mov	r1, r4
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	6439      	str	r1, [r7, #64]	@ 0x40
 80040a4:	4629      	mov	r1, r5
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80040b8:	4649      	mov	r1, r9
 80040ba:	018b      	lsls	r3, r1, #6
 80040bc:	4641      	mov	r1, r8
 80040be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c2:	4641      	mov	r1, r8
 80040c4:	018a      	lsls	r2, r1, #6
 80040c6:	4641      	mov	r1, r8
 80040c8:	1a51      	subs	r1, r2, r1
 80040ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040cc:	4649      	mov	r1, r9
 80040ce:	eb63 0301 	sbc.w	r3, r3, r1
 80040d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80040e0:	4649      	mov	r1, r9
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4641      	mov	r1, r8
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4641      	mov	r1, r8
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4622      	mov	r2, r4
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040fa:	462b      	mov	r3, r5
 80040fc:	460a      	mov	r2, r1
 80040fe:	eb42 0303 	adc.w	r3, r2, r3
 8004102:	637b      	str	r3, [r7, #52]	@ 0x34
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004110:	4629      	mov	r1, r5
 8004112:	024b      	lsls	r3, r1, #9
 8004114:	4621      	mov	r1, r4
 8004116:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800411a:	4621      	mov	r1, r4
 800411c:	024a      	lsls	r2, r1, #9
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800412c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004130:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004134:	f7fc fdb8 	bl	8000ca8 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4613      	mov	r3, r2
 800413e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004142:	e067      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004144:	4b75      	ldr	r3, [pc, #468]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004150:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800415e:	2300      	movs	r3, #0
 8004160:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004162:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	f04f 0000 	mov.w	r0, #0
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	0159      	lsls	r1, r3, #5
 8004174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004178:	0150      	lsls	r0, r2, #5
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4621      	mov	r1, r4
 8004180:	1a51      	subs	r1, r2, r1
 8004182:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004184:	4629      	mov	r1, r5
 8004186:	eb63 0301 	sbc.w	r3, r3, r1
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004198:	4649      	mov	r1, r9
 800419a:	018b      	lsls	r3, r1, #6
 800419c:	4641      	mov	r1, r8
 800419e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041a2:	4641      	mov	r1, r8
 80041a4:	018a      	lsls	r2, r1, #6
 80041a6:	4641      	mov	r1, r8
 80041a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ac:	4649      	mov	r1, r9
 80041ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c6:	4692      	mov	sl, r2
 80041c8:	469b      	mov	fp, r3
 80041ca:	4623      	mov	r3, r4
 80041cc:	eb1a 0303 	adds.w	r3, sl, r3
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	462b      	mov	r3, r5
 80041d4:	eb4b 0303 	adc.w	r3, fp, r3
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041e6:	4629      	mov	r1, r5
 80041e8:	028b      	lsls	r3, r1, #10
 80041ea:	4621      	mov	r1, r4
 80041ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f0:	4621      	mov	r1, r4
 80041f2:	028a      	lsls	r2, r1, #10
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041fc:	2200      	movs	r2, #0
 80041fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004200:	677a      	str	r2, [r7, #116]	@ 0x74
 8004202:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004206:	f7fc fd4f 	bl	8000ca8 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4613      	mov	r3, r2
 8004210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004214:	4b41      	ldr	r3, [pc, #260]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	3301      	adds	r3, #1
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800422a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004236:	e0eb      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4b38      	ldr	r3, [pc, #224]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004240:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004244:	4b35      	ldr	r3, [pc, #212]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d06b      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004250:	4b32      	ldr	r3, [pc, #200]	@ (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	2200      	movs	r2, #0
 8004258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800425a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800425c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800425e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004262:	663b      	str	r3, [r7, #96]	@ 0x60
 8004264:	2300      	movs	r3, #0
 8004266:	667b      	str	r3, [r7, #100]	@ 0x64
 8004268:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800426c:	4622      	mov	r2, r4
 800426e:	462b      	mov	r3, r5
 8004270:	f04f 0000 	mov.w	r0, #0
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	0159      	lsls	r1, r3, #5
 800427a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800427e:	0150      	lsls	r0, r2, #5
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4621      	mov	r1, r4
 8004286:	1a51      	subs	r1, r2, r1
 8004288:	61b9      	str	r1, [r7, #24]
 800428a:	4629      	mov	r1, r5
 800428c:	eb63 0301 	sbc.w	r3, r3, r1
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800429e:	4659      	mov	r1, fp
 80042a0:	018b      	lsls	r3, r1, #6
 80042a2:	4651      	mov	r1, sl
 80042a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a8:	4651      	mov	r1, sl
 80042aa:	018a      	lsls	r2, r1, #6
 80042ac:	4651      	mov	r1, sl
 80042ae:	ebb2 0801 	subs.w	r8, r2, r1
 80042b2:	4659      	mov	r1, fp
 80042b4:	eb63 0901 	sbc.w	r9, r3, r1
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042cc:	4690      	mov	r8, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	4623      	mov	r3, r4
 80042d2:	eb18 0303 	adds.w	r3, r8, r3
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	462b      	mov	r3, r5
 80042da:	eb49 0303 	adc.w	r3, r9, r3
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042ec:	4629      	mov	r1, r5
 80042ee:	024b      	lsls	r3, r1, #9
 80042f0:	4621      	mov	r1, r4
 80042f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f6:	4621      	mov	r1, r4
 80042f8:	024a      	lsls	r2, r1, #9
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004302:	2200      	movs	r2, #0
 8004304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004306:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004308:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800430c:	f7fc fccc 	bl	8000ca8 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800431a:	e065      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x420>
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400
 8004324:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004328:	4b3d      	ldr	r3, [pc, #244]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x458>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	2200      	movs	r2, #0
 8004330:	4618      	mov	r0, r3
 8004332:	4611      	mov	r1, r2
 8004334:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004338:	653b      	str	r3, [r7, #80]	@ 0x50
 800433a:	2300      	movs	r3, #0
 800433c:	657b      	str	r3, [r7, #84]	@ 0x54
 800433e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004342:	4642      	mov	r2, r8
 8004344:	464b      	mov	r3, r9
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	0159      	lsls	r1, r3, #5
 8004350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004354:	0150      	lsls	r0, r2, #5
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4641      	mov	r1, r8
 800435c:	1a51      	subs	r1, r2, r1
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	4649      	mov	r1, r9
 8004362:	eb63 0301 	sbc.w	r3, r3, r1
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004374:	4659      	mov	r1, fp
 8004376:	018b      	lsls	r3, r1, #6
 8004378:	4651      	mov	r1, sl
 800437a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437e:	4651      	mov	r1, sl
 8004380:	018a      	lsls	r2, r1, #6
 8004382:	4651      	mov	r1, sl
 8004384:	1a54      	subs	r4, r2, r1
 8004386:	4659      	mov	r1, fp
 8004388:	eb63 0501 	sbc.w	r5, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	00eb      	lsls	r3, r5, #3
 8004396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800439a:	00e2      	lsls	r2, r4, #3
 800439c:	4614      	mov	r4, r2
 800439e:	461d      	mov	r5, r3
 80043a0:	4643      	mov	r3, r8
 80043a2:	18e3      	adds	r3, r4, r3
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	464b      	mov	r3, r9
 80043a8:	eb45 0303 	adc.w	r3, r5, r3
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ba:	4629      	mov	r1, r5
 80043bc:	028b      	lsls	r3, r1, #10
 80043be:	4621      	mov	r1, r4
 80043c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c4:	4621      	mov	r1, r4
 80043c6:	028a      	lsls	r2, r1, #10
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043d0:	2200      	movs	r2, #0
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80043d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043da:	f7fc fc65 	bl	8000ca8 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4613      	mov	r3, r2
 80043e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x458>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0f1b      	lsrs	r3, r3, #28
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80043f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004406:	e003      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x45c>)
 800440a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800440e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004414:	4618      	mov	r0, r3
 8004416:	37b8      	adds	r7, #184	@ 0xb8
 8004418:	46bd      	mov	sp, r7
 800441a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	00f42400 	.word	0x00f42400

08004428 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e28d      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8083 	beq.w	800454e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004448:	4b94      	ldr	r3, [pc, #592]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b04      	cmp	r3, #4
 8004452:	d019      	beq.n	8004488 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004454:	4b91      	ldr	r3, [pc, #580]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 030c 	and.w	r3, r3, #12
        || \
 800445c:	2b08      	cmp	r3, #8
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004460:	4b8e      	ldr	r3, [pc, #568]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800446c:	d00c      	beq.n	8004488 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446e:	4b8b      	ldr	r3, [pc, #556]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d112      	bne.n	80044a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447a:	4b88      	ldr	r3, [pc, #544]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004486:	d10b      	bne.n	80044a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	4b84      	ldr	r3, [pc, #528]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d05b      	beq.n	800454c <HAL_RCC_OscConfig+0x124>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d157      	bne.n	800454c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e25a      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCC_OscConfig+0x90>
 80044aa:	4b7c      	ldr	r3, [pc, #496]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7b      	ldr	r2, [pc, #492]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e01d      	b.n	80044f4 <HAL_RCC_OscConfig+0xcc>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0xb4>
 80044c2:	4b76      	ldr	r3, [pc, #472]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a75      	ldr	r2, [pc, #468]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b73      	ldr	r3, [pc, #460]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a72      	ldr	r2, [pc, #456]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e00b      	b.n	80044f4 <HAL_RCC_OscConfig+0xcc>
 80044dc:	4b6f      	ldr	r3, [pc, #444]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a6e      	ldr	r2, [pc, #440]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b6c      	ldr	r3, [pc, #432]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a6b      	ldr	r2, [pc, #428]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80044ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d013      	beq.n	8004524 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd fc4e 	bl	8001d9c <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004504:	f7fd fc4a 	bl	8001d9c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	@ 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e21f      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004516:	4b61      	ldr	r3, [pc, #388]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0xdc>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd fc3a 	bl	8001d9c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fd fc36 	bl	8001d9c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	@ 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e20b      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453e:	4b57      	ldr	r3, [pc, #348]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x104>
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d06f      	beq.n	800463a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800455a:	4b50      	ldr	r3, [pc, #320]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b00      	cmp	r3, #0
 8004564:	d017      	beq.n	8004596 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004566:	4b4d      	ldr	r3, [pc, #308]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
        || \
 800456e:	2b08      	cmp	r3, #8
 8004570:	d105      	bne.n	800457e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004572:	4b4a      	ldr	r3, [pc, #296]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457e:	4b47      	ldr	r3, [pc, #284]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d11c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458a:	4b44      	ldr	r3, [pc, #272]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d116      	bne.n	80045c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	4b41      	ldr	r3, [pc, #260]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_RCC_OscConfig+0x186>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d001      	beq.n	80045ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e1d3      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4937      	ldr	r1, [pc, #220]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	e03a      	b.n	800463a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045cc:	4b34      	ldr	r3, [pc, #208]	@ (80046a0 <HAL_RCC_OscConfig+0x278>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fd fbe3 	bl	8001d9c <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045da:	f7fd fbdf 	bl	8001d9c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e1b4      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	4b2b      	ldr	r3, [pc, #172]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	4b28      	ldr	r3, [pc, #160]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4925      	ldr	r1, [pc, #148]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
 800460c:	e015      	b.n	800463a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460e:	4b24      	ldr	r3, [pc, #144]	@ (80046a0 <HAL_RCC_OscConfig+0x278>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd fbc2 	bl	8001d9c <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461c:	f7fd fbbe 	bl	8001d9c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e193      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d036      	beq.n	80046b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464e:	4b15      	ldr	r3, [pc, #84]	@ (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fd fba2 	bl	8001d9c <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465c:	f7fd fb9e 	bl	8001d9c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e173      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_RCC_OscConfig+0x274>)
 8004670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x234>
 800467a:	e01b      	b.n	80046b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467c:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fd fb8b 	bl	8001d9c <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	e00e      	b.n	80046a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468a:	f7fd fb87 	bl	8001d9c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d907      	bls.n	80046a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e15c      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
 800469c:	40023800 	.word	0x40023800
 80046a0:	42470000 	.word	0x42470000
 80046a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b8a      	ldr	r3, [pc, #552]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ea      	bne.n	800468a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8097 	beq.w	80047f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b83      	ldr	r3, [pc, #524]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	4b7f      	ldr	r3, [pc, #508]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	4a7e      	ldr	r2, [pc, #504]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046e2:	4b7c      	ldr	r3, [pc, #496]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	4b79      	ldr	r3, [pc, #484]	@ (80048d8 <HAL_RCC_OscConfig+0x4b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d118      	bne.n	8004730 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fe:	4b76      	ldr	r3, [pc, #472]	@ (80048d8 <HAL_RCC_OscConfig+0x4b0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a75      	ldr	r2, [pc, #468]	@ (80048d8 <HAL_RCC_OscConfig+0x4b0>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470a:	f7fd fb47 	bl	8001d9c <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fd fb43 	bl	8001d9c <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e118      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	4b6c      	ldr	r3, [pc, #432]	@ (80048d8 <HAL_RCC_OscConfig+0x4b0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x31e>
 8004738:	4b66      	ldr	r3, [pc, #408]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	4a65      	ldr	r2, [pc, #404]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	@ 0x70
 8004744:	e01c      	b.n	8004780 <HAL_RCC_OscConfig+0x358>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b05      	cmp	r3, #5
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x340>
 800474e:	4b61      	ldr	r3, [pc, #388]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004752:	4a60      	ldr	r2, [pc, #384]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	6713      	str	r3, [r2, #112]	@ 0x70
 800475a:	4b5e      	ldr	r3, [pc, #376]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475e:	4a5d      	ldr	r2, [pc, #372]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	6713      	str	r3, [r2, #112]	@ 0x70
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0x358>
 8004768:	4b5a      	ldr	r3, [pc, #360]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	4a59      	ldr	r2, [pc, #356]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	@ 0x70
 8004774:	4b57      	ldr	r3, [pc, #348]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004778:	4a56      	ldr	r2, [pc, #344]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800477a:	f023 0304 	bic.w	r3, r3, #4
 800477e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd fb08 	bl	8001d9c <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fd fb04 	bl	8001d9c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e0d7      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	4b4b      	ldr	r3, [pc, #300]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ee      	beq.n	8004790 <HAL_RCC_OscConfig+0x368>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fd faf2 	bl	8001d9c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fd faee 	bl	8001d9c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0c1      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	4b40      	ldr	r3, [pc, #256]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ee      	bne.n	80047bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e4:	4b3b      	ldr	r3, [pc, #236]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	4a3a      	ldr	r2, [pc, #232]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80ad 	beq.w	8004954 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047fa:	4b36      	ldr	r3, [pc, #216]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b08      	cmp	r3, #8
 8004804:	d060      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d145      	bne.n	800489a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	4b33      	ldr	r3, [pc, #204]	@ (80048dc <HAL_RCC_OscConfig+0x4b4>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fd fac2 	bl	8001d9c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fd fabe 	bl	8001d9c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e093      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	4b29      	ldr	r3, [pc, #164]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	491b      	ldr	r1, [pc, #108]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x4b4>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fa93 	bl	8001d9c <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7fd fa8f 	bl	8001d9c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e064      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488c:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x452>
 8004898:	e05c      	b.n	8004954 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <HAL_RCC_OscConfig+0x4b4>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd fa7c 	bl	8001d9c <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fd fa78 	bl	8001d9c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04d      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x480>
 80048c6:	e045      	b.n	8004954 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e040      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
 80048dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004960 <HAL_RCC_OscConfig+0x538>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d030      	beq.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d129      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d122      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004910:	4013      	ands	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004918:	4293      	cmp	r3, r2
 800491a:	d119      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	3b01      	subs	r3, #1
 800492a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d10f      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800

08004964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e041      	b.n	80049fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc ff70 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f000 f984 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d001      	beq.n	8004a1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e046      	b.n	8004aaa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a23      	ldr	r2, [pc, #140]	@ (8004ab8 <HAL_TIM_Base_Start+0xb4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d022      	beq.n	8004a74 <HAL_TIM_Base_Start+0x70>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a36:	d01d      	beq.n	8004a74 <HAL_TIM_Base_Start+0x70>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004abc <HAL_TIM_Base_Start+0xb8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d018      	beq.n	8004a74 <HAL_TIM_Base_Start+0x70>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <HAL_TIM_Base_Start+0xbc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d013      	beq.n	8004a74 <HAL_TIM_Base_Start+0x70>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <HAL_TIM_Base_Start+0xc0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_TIM_Base_Start+0x70>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_TIM_Base_Start+0xc4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_TIM_Base_Start+0x70>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a19      	ldr	r2, [pc, #100]	@ (8004acc <HAL_TIM_Base_Start+0xc8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_Base_Start+0x70>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <HAL_TIM_Base_Start+0xcc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d111      	bne.n	8004a98 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d010      	beq.n	8004aa8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	e007      	b.n	8004aa8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40001800 	.word	0x40001800

08004ad4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a1a      	ldr	r2, [r3, #32]
 8004ae2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10f      	bne.n	8004b0c <HAL_TIM_Base_Stop+0x38>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6a1a      	ldr	r2, [r3, #32]
 8004af2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_Base_Stop+0x38>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_ConfigClockSource+0x1c>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0b4      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x186>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b64:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b76:	d03e      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0xd4>
 8004b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b7c:	f200 8087 	bhi.w	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b84:	f000 8086 	beq.w	8004c94 <HAL_TIM_ConfigClockSource+0x172>
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8c:	d87f      	bhi.n	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
 8004b8e:	2b70      	cmp	r3, #112	@ 0x70
 8004b90:	d01a      	beq.n	8004bc8 <HAL_TIM_ConfigClockSource+0xa6>
 8004b92:	2b70      	cmp	r3, #112	@ 0x70
 8004b94:	d87b      	bhi.n	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
 8004b96:	2b60      	cmp	r3, #96	@ 0x60
 8004b98:	d050      	beq.n	8004c3c <HAL_TIM_ConfigClockSource+0x11a>
 8004b9a:	2b60      	cmp	r3, #96	@ 0x60
 8004b9c:	d877      	bhi.n	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
 8004b9e:	2b50      	cmp	r3, #80	@ 0x50
 8004ba0:	d03c      	beq.n	8004c1c <HAL_TIM_ConfigClockSource+0xfa>
 8004ba2:	2b50      	cmp	r3, #80	@ 0x50
 8004ba4:	d873      	bhi.n	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
 8004ba6:	2b40      	cmp	r3, #64	@ 0x40
 8004ba8:	d058      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x13a>
 8004baa:	2b40      	cmp	r3, #64	@ 0x40
 8004bac:	d86f      	bhi.n	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
 8004bae:	2b30      	cmp	r3, #48	@ 0x30
 8004bb0:	d064      	beq.n	8004c7c <HAL_TIM_ConfigClockSource+0x15a>
 8004bb2:	2b30      	cmp	r3, #48	@ 0x30
 8004bb4:	d86b      	bhi.n	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d060      	beq.n	8004c7c <HAL_TIM_ConfigClockSource+0x15a>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d867      	bhi.n	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d05c      	beq.n	8004c7c <HAL_TIM_ConfigClockSource+0x15a>
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d05a      	beq.n	8004c7c <HAL_TIM_ConfigClockSource+0x15a>
 8004bc6:	e062      	b.n	8004c8e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bd8:	f000 f990 	bl	8004efc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]
      break;
 8004bf4:	e04f      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c06:	f000 f979 	bl	8004efc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c18:	609a      	str	r2, [r3, #8]
      break;
 8004c1a:	e03c      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f000 f8ed 	bl	8004e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2150      	movs	r1, #80	@ 0x50
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f946 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c3a:	e02c      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f000 f90c 	bl	8004e66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2160      	movs	r1, #96	@ 0x60
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f936 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c5a:	e01c      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f000 f8cd 	bl	8004e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2140      	movs	r1, #64	@ 0x40
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f926 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c7a:	e00c      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 f91d 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e003      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
      break;
 8004c92:	e000      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a46      	ldr	r2, [pc, #280]	@ (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cce:	d00f      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a43      	ldr	r2, [pc, #268]	@ (8004de0 <TIM_Base_SetConfig+0x130>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a42      	ldr	r2, [pc, #264]	@ (8004de4 <TIM_Base_SetConfig+0x134>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	@ (8004de8 <TIM_Base_SetConfig+0x138>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a40      	ldr	r2, [pc, #256]	@ (8004dec <TIM_Base_SetConfig+0x13c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d108      	bne.n	8004d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a35      	ldr	r2, [pc, #212]	@ (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d10:	d027      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a32      	ldr	r2, [pc, #200]	@ (8004de0 <TIM_Base_SetConfig+0x130>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d023      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a31      	ldr	r2, [pc, #196]	@ (8004de4 <TIM_Base_SetConfig+0x134>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01f      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a30      	ldr	r2, [pc, #192]	@ (8004de8 <TIM_Base_SetConfig+0x138>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004dec <TIM_Base_SetConfig+0x13c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d017      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2e      	ldr	r2, [pc, #184]	@ (8004df0 <TIM_Base_SetConfig+0x140>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004df4 <TIM_Base_SetConfig+0x144>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2c      	ldr	r2, [pc, #176]	@ (8004df8 <TIM_Base_SetConfig+0x148>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004dfc <TIM_Base_SetConfig+0x14c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2a      	ldr	r2, [pc, #168]	@ (8004e00 <TIM_Base_SetConfig+0x150>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a29      	ldr	r2, [pc, #164]	@ (8004e04 <TIM_Base_SetConfig+0x154>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d108      	bne.n	8004d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a10      	ldr	r2, [pc, #64]	@ (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_Base_SetConfig+0xf8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a12      	ldr	r2, [pc, #72]	@ (8004dec <TIM_Base_SetConfig+0x13c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d103      	bne.n	8004db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d105      	bne.n	8004dce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f023 0201 	bic.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	611a      	str	r2, [r3, #16]
  }
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800
 8004dfc:	40001800 	.word	0x40001800
 8004e00:	40001c00 	.word	0x40001c00
 8004e04:	40002000 	.word	0x40002000

08004e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f023 0201 	bic.w	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f023 030a 	bic.w	r3, r3, #10
 8004e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f023 0210 	bic.w	r2, r3, #16
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	031b      	lsls	r3, r3, #12
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f043 0307 	orr.w	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e05a      	b.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a21      	ldr	r2, [pc, #132]	@ (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d022      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa0:	d01d      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800501c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d018      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	@ (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a18      	ldr	r2, [pc, #96]	@ (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a17      	ldr	r2, [pc, #92]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40010000 	.word	0x40010000
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40010400 	.word	0x40010400
 800502c:	40014000 	.word	0x40014000
 8005030:	40001800 	.word	0x40001800

08005034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e042      	b.n	80050cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc fc28 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	@ 0x24
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f973 	bl	8005364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800508c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800509c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	@ 0x28
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d175      	bne.n	80051e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_UART_Transmit+0x2c>
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e06e      	b.n	80051e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2221      	movs	r2, #33	@ 0x21
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005112:	f7fc fe43 	bl	8001d9c <HAL_GetTick>
 8005116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512c:	d108      	bne.n	8005140 <HAL_UART_Transmit+0x6c>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	e003      	b.n	8005148 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005148:	e02e      	b.n	80051a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2180      	movs	r1, #128	@ 0x80
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f848 	bl	80051ea <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e03a      	b.n	80051e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005180:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	3302      	adds	r3, #2
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e007      	b.n	800519a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	781a      	ldrb	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1cb      	bne.n	800514a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2140      	movs	r1, #64	@ 0x40
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f814 	bl	80051ea <UART_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e006      	b.n	80051e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	e000      	b.n	80051e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
  }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fa:	e03b      	b.n	8005274 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d037      	beq.n	8005274 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005204:	f7fc fdca 	bl	8001d9c <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <UART_WaitOnFlagUntilTimeout+0x30>
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e03a      	b.n	8005294 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d023      	beq.n	8005274 <UART_WaitOnFlagUntilTimeout+0x8a>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b80      	cmp	r3, #128	@ 0x80
 8005230:	d020      	beq.n	8005274 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b40      	cmp	r3, #64	@ 0x40
 8005236:	d01d      	beq.n	8005274 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b08      	cmp	r3, #8
 8005244:	d116      	bne.n	8005274 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f81d 	bl	800529c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2208      	movs	r2, #8
 8005266:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e00f      	b.n	8005294 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4013      	ands	r3, r2
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	429a      	cmp	r2, r3
 8005290:	d0b4      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800529c:	b480      	push	{r7}
 800529e:	b095      	sub	sp, #84	@ 0x54
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80052c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e5      	bne.n	80052a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3314      	adds	r3, #20
 80052de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3314      	adds	r3, #20
 80052f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	2b01      	cmp	r3, #1
 8005312:	d119      	bne.n	8005348 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	60bb      	str	r3, [r7, #8]
   return(result);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f023 0310 	bic.w	r3, r3, #16
 800532a:	647b      	str	r3, [r7, #68]	@ 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005334:	61ba      	str	r2, [r7, #24]
 8005336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	613b      	str	r3, [r7, #16]
   return(result);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e5      	bne.n	8005314 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005356:	bf00      	nop
 8005358:	3754      	adds	r7, #84	@ 0x54
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b0c0      	sub	sp, #256	@ 0x100
 800536a:	af00      	add	r7, sp, #0
 800536c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	68d9      	ldr	r1, [r3, #12]
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	ea40 0301 	orr.w	r3, r0, r1
 800538c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	431a      	orrs	r2, r3
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053bc:	f021 010c 	bic.w	r1, r1, #12
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053ca:	430b      	orrs	r3, r1
 80053cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	6999      	ldr	r1, [r3, #24]
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	ea40 0301 	orr.w	r3, r0, r1
 80053ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005630 <UART_SetConfig+0x2cc>)
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d005      	beq.n	8005404 <UART_SetConfig+0xa0>
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005634 <UART_SetConfig+0x2d0>)
 8005400:	429a      	cmp	r2, r3
 8005402:	d104      	bne.n	800540e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7fe faa2 	bl	800394c <HAL_RCC_GetPCLK2Freq>
 8005408:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800540c:	e003      	b.n	8005416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800540e:	f7fe fa89 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8005412:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005420:	f040 810c 	bne.w	800563c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005428:	2200      	movs	r2, #0
 800542a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800542e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005436:	4622      	mov	r2, r4
 8005438:	462b      	mov	r3, r5
 800543a:	1891      	adds	r1, r2, r2
 800543c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800543e:	415b      	adcs	r3, r3
 8005440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005446:	4621      	mov	r1, r4
 8005448:	eb12 0801 	adds.w	r8, r2, r1
 800544c:	4629      	mov	r1, r5
 800544e:	eb43 0901 	adc.w	r9, r3, r1
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800545e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005466:	4690      	mov	r8, r2
 8005468:	4699      	mov	r9, r3
 800546a:	4623      	mov	r3, r4
 800546c:	eb18 0303 	adds.w	r3, r8, r3
 8005470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005474:	462b      	mov	r3, r5
 8005476:	eb49 0303 	adc.w	r3, r9, r3
 800547a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800548a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800548e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005492:	460b      	mov	r3, r1
 8005494:	18db      	adds	r3, r3, r3
 8005496:	653b      	str	r3, [r7, #80]	@ 0x50
 8005498:	4613      	mov	r3, r2
 800549a:	eb42 0303 	adc.w	r3, r2, r3
 800549e:	657b      	str	r3, [r7, #84]	@ 0x54
 80054a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054a8:	f7fb fbfe 	bl	8000ca8 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b61      	ldr	r3, [pc, #388]	@ (8005638 <UART_SetConfig+0x2d4>)
 80054b2:	fba3 2302 	umull	r2, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	011c      	lsls	r4, r3, #4
 80054ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	1891      	adds	r1, r2, r2
 80054d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054d4:	415b      	adcs	r3, r3
 80054d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054dc:	4641      	mov	r1, r8
 80054de:	eb12 0a01 	adds.w	sl, r2, r1
 80054e2:	4649      	mov	r1, r9
 80054e4:	eb43 0b01 	adc.w	fp, r3, r1
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054fc:	4692      	mov	sl, r2
 80054fe:	469b      	mov	fp, r3
 8005500:	4643      	mov	r3, r8
 8005502:	eb1a 0303 	adds.w	r3, sl, r3
 8005506:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800550a:	464b      	mov	r3, r9
 800550c:	eb4b 0303 	adc.w	r3, fp, r3
 8005510:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005520:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005528:	460b      	mov	r3, r1
 800552a:	18db      	adds	r3, r3, r3
 800552c:	643b      	str	r3, [r7, #64]	@ 0x40
 800552e:	4613      	mov	r3, r2
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	647b      	str	r3, [r7, #68]	@ 0x44
 8005536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800553a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800553e:	f7fb fbb3 	bl	8000ca8 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4611      	mov	r1, r2
 8005548:	4b3b      	ldr	r3, [pc, #236]	@ (8005638 <UART_SetConfig+0x2d4>)
 800554a:	fba3 2301 	umull	r2, r3, r3, r1
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2264      	movs	r2, #100	@ 0x64
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	1acb      	subs	r3, r1, r3
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800555e:	4b36      	ldr	r3, [pc, #216]	@ (8005638 <UART_SetConfig+0x2d4>)
 8005560:	fba3 2302 	umull	r2, r3, r3, r2
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800556c:	441c      	add	r4, r3
 800556e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005572:	2200      	movs	r2, #0
 8005574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005578:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800557c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	1891      	adds	r1, r2, r2
 8005586:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005588:	415b      	adcs	r3, r3
 800558a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800558c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005590:	4641      	mov	r1, r8
 8005592:	1851      	adds	r1, r2, r1
 8005594:	6339      	str	r1, [r7, #48]	@ 0x30
 8005596:	4649      	mov	r1, r9
 8005598:	414b      	adcs	r3, r1
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055a8:	4659      	mov	r1, fp
 80055aa:	00cb      	lsls	r3, r1, #3
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b2:	4651      	mov	r1, sl
 80055b4:	00ca      	lsls	r2, r1, #3
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	4642      	mov	r2, r8
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055c4:	464b      	mov	r3, r9
 80055c6:	460a      	mov	r2, r1
 80055c8:	eb42 0303 	adc.w	r3, r2, r3
 80055cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055e4:	460b      	mov	r3, r1
 80055e6:	18db      	adds	r3, r3, r3
 80055e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ea:	4613      	mov	r3, r2
 80055ec:	eb42 0303 	adc.w	r3, r2, r3
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055fa:	f7fb fb55 	bl	8000ca8 <__aeabi_uldivmod>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4b0d      	ldr	r3, [pc, #52]	@ (8005638 <UART_SetConfig+0x2d4>)
 8005604:	fba3 1302 	umull	r1, r3, r3, r2
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	2164      	movs	r1, #100	@ 0x64
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	3332      	adds	r3, #50	@ 0x32
 8005616:	4a08      	ldr	r2, [pc, #32]	@ (8005638 <UART_SetConfig+0x2d4>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	f003 0207 	and.w	r2, r3, #7
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4422      	add	r2, r4
 800562a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800562c:	e106      	b.n	800583c <UART_SetConfig+0x4d8>
 800562e:	bf00      	nop
 8005630:	40011000 	.word	0x40011000
 8005634:	40011400 	.word	0x40011400
 8005638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005646:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800564a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800564e:	4642      	mov	r2, r8
 8005650:	464b      	mov	r3, r9
 8005652:	1891      	adds	r1, r2, r2
 8005654:	6239      	str	r1, [r7, #32]
 8005656:	415b      	adcs	r3, r3
 8005658:	627b      	str	r3, [r7, #36]	@ 0x24
 800565a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800565e:	4641      	mov	r1, r8
 8005660:	1854      	adds	r4, r2, r1
 8005662:	4649      	mov	r1, r9
 8005664:	eb43 0501 	adc.w	r5, r3, r1
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	00eb      	lsls	r3, r5, #3
 8005672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005676:	00e2      	lsls	r2, r4, #3
 8005678:	4614      	mov	r4, r2
 800567a:	461d      	mov	r5, r3
 800567c:	4643      	mov	r3, r8
 800567e:	18e3      	adds	r3, r4, r3
 8005680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005684:	464b      	mov	r3, r9
 8005686:	eb45 0303 	adc.w	r3, r5, r3
 800568a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800569a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056aa:	4629      	mov	r1, r5
 80056ac:	008b      	lsls	r3, r1, #2
 80056ae:	4621      	mov	r1, r4
 80056b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b4:	4621      	mov	r1, r4
 80056b6:	008a      	lsls	r2, r1, #2
 80056b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056bc:	f7fb faf4 	bl	8000ca8 <__aeabi_uldivmod>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4b60      	ldr	r3, [pc, #384]	@ (8005848 <UART_SetConfig+0x4e4>)
 80056c6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	011c      	lsls	r4, r3, #4
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056e0:	4642      	mov	r2, r8
 80056e2:	464b      	mov	r3, r9
 80056e4:	1891      	adds	r1, r2, r2
 80056e6:	61b9      	str	r1, [r7, #24]
 80056e8:	415b      	adcs	r3, r3
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056f0:	4641      	mov	r1, r8
 80056f2:	1851      	adds	r1, r2, r1
 80056f4:	6139      	str	r1, [r7, #16]
 80056f6:	4649      	mov	r1, r9
 80056f8:	414b      	adcs	r3, r1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005708:	4659      	mov	r1, fp
 800570a:	00cb      	lsls	r3, r1, #3
 800570c:	4651      	mov	r1, sl
 800570e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005712:	4651      	mov	r1, sl
 8005714:	00ca      	lsls	r2, r1, #3
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	4603      	mov	r3, r0
 800571c:	4642      	mov	r2, r8
 800571e:	189b      	adds	r3, r3, r2
 8005720:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005724:	464b      	mov	r3, r9
 8005726:	460a      	mov	r2, r1
 8005728:	eb42 0303 	adc.w	r3, r2, r3
 800572c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	67bb      	str	r3, [r7, #120]	@ 0x78
 800573a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005748:	4649      	mov	r1, r9
 800574a:	008b      	lsls	r3, r1, #2
 800574c:	4641      	mov	r1, r8
 800574e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005752:	4641      	mov	r1, r8
 8005754:	008a      	lsls	r2, r1, #2
 8005756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800575a:	f7fb faa5 	bl	8000ca8 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4611      	mov	r1, r2
 8005764:	4b38      	ldr	r3, [pc, #224]	@ (8005848 <UART_SetConfig+0x4e4>)
 8005766:	fba3 2301 	umull	r2, r3, r3, r1
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	2264      	movs	r2, #100	@ 0x64
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	1acb      	subs	r3, r1, r3
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	3332      	adds	r3, #50	@ 0x32
 8005778:	4a33      	ldr	r2, [pc, #204]	@ (8005848 <UART_SetConfig+0x4e4>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005784:	441c      	add	r4, r3
 8005786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800578a:	2200      	movs	r2, #0
 800578c:	673b      	str	r3, [r7, #112]	@ 0x70
 800578e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005790:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005794:	4642      	mov	r2, r8
 8005796:	464b      	mov	r3, r9
 8005798:	1891      	adds	r1, r2, r2
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	415b      	adcs	r3, r3
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057a4:	4641      	mov	r1, r8
 80057a6:	1851      	adds	r1, r2, r1
 80057a8:	6039      	str	r1, [r7, #0]
 80057aa:	4649      	mov	r1, r9
 80057ac:	414b      	adcs	r3, r1
 80057ae:	607b      	str	r3, [r7, #4]
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057bc:	4659      	mov	r1, fp
 80057be:	00cb      	lsls	r3, r1, #3
 80057c0:	4651      	mov	r1, sl
 80057c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057c6:	4651      	mov	r1, sl
 80057c8:	00ca      	lsls	r2, r1, #3
 80057ca:	4610      	mov	r0, r2
 80057cc:	4619      	mov	r1, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	4642      	mov	r2, r8
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057d6:	464b      	mov	r3, r9
 80057d8:	460a      	mov	r2, r1
 80057da:	eb42 0303 	adc.w	r3, r2, r3
 80057de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80057ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057f8:	4649      	mov	r1, r9
 80057fa:	008b      	lsls	r3, r1, #2
 80057fc:	4641      	mov	r1, r8
 80057fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005802:	4641      	mov	r1, r8
 8005804:	008a      	lsls	r2, r1, #2
 8005806:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800580a:	f7fb fa4d 	bl	8000ca8 <__aeabi_uldivmod>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <UART_SetConfig+0x4e4>)
 8005814:	fba3 1302 	umull	r1, r3, r3, r2
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	2164      	movs	r1, #100	@ 0x64
 800581c:	fb01 f303 	mul.w	r3, r1, r3
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	3332      	adds	r3, #50	@ 0x32
 8005826:	4a08      	ldr	r2, [pc, #32]	@ (8005848 <UART_SetConfig+0x4e4>)
 8005828:	fba2 2303 	umull	r2, r3, r2, r3
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4422      	add	r2, r4
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	bf00      	nop
 800583e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005842:	46bd      	mov	sp, r7
 8005844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005848:	51eb851f 	.word	0x51eb851f

0800584c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800584c:	b084      	sub	sp, #16
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	f107 001c 	add.w	r0, r7, #28
 800585a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800585e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005862:	2b01      	cmp	r3, #1
 8005864:	d123      	bne.n	80058ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800587a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800588e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005892:	2b01      	cmp	r3, #1
 8005894:	d105      	bne.n	80058a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa9a 	bl	8005ddc <USB_CoreReset>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	e01b      	b.n	80058e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fa8e 	bl	8005ddc <USB_CoreReset>
 80058c0:	4603      	mov	r3, r0
 80058c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80058d8:	e005      	b.n	80058e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058e6:	7fbb      	ldrb	r3, [r7, #30]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d10b      	bne.n	8005904 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f043 0206 	orr.w	r2, r3, #6
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005910:	b004      	add	sp, #16
 8005912:	4770      	bx	lr

08005914 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f023 0201 	bic.w	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d115      	bne.n	8005984 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005964:	200a      	movs	r0, #10
 8005966:	f7fc fa25 	bl	8001db4 <HAL_Delay>
      ms += 10U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	330a      	adds	r3, #10
 800596e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fa25 	bl	8005dc0 <USB_GetMode>
 8005976:	4603      	mov	r3, r0
 8005978:	2b01      	cmp	r3, #1
 800597a:	d01e      	beq.n	80059ba <USB_SetCurrentMode+0x84>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005980:	d9f0      	bls.n	8005964 <USB_SetCurrentMode+0x2e>
 8005982:	e01a      	b.n	80059ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d115      	bne.n	80059b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005996:	200a      	movs	r0, #10
 8005998:	f7fc fa0c 	bl	8001db4 <HAL_Delay>
      ms += 10U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	330a      	adds	r3, #10
 80059a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa0c 	bl	8005dc0 <USB_GetMode>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <USB_SetCurrentMode+0x84>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80059b2:	d9f0      	bls.n	8005996 <USB_SetCurrentMode+0x60>
 80059b4:	e001      	b.n	80059ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e005      	b.n	80059c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80059be:	d101      	bne.n	80059c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059d0:	b084      	sub	sp, #16
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e009      	b.n	8005a04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3340      	adds	r3, #64	@ 0x40
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3301      	adds	r3, #1
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b0e      	cmp	r3, #14
 8005a08:	d9f2      	bls.n	80059f0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11c      	bne.n	8005a4c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e005      	b.n	8005a58 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2300      	movs	r3, #0
 8005a62:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10d      	bne.n	8005a88 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a74:	2100      	movs	r1, #0
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f968 	bl	8005d4c <USB_SetDevSpeed>
 8005a7c:	e008      	b.n	8005a90 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a7e:	2101      	movs	r1, #1
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f963 	bl	8005d4c <USB_SetDevSpeed>
 8005a86:	e003      	b.n	8005a90 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a88:	2103      	movs	r1, #3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f95e 	bl	8005d4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a90:	2110      	movs	r1, #16
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8fa 	bl	8005c8c <USB_FlushTxFifo>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f924 	bl	8005cf0 <USB_FlushRxFifo>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	e043      	b.n	8005b64 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005af2:	d118      	bne.n	8005b26 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b06:	461a      	mov	r2, r3
 8005b08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e013      	b.n	8005b38 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e008      	b.n	8005b38 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b32:	461a      	mov	r2, r3
 8005b34:	2300      	movs	r3, #0
 8005b36:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b44:	461a      	mov	r2, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b56:	461a      	mov	r2, r3
 8005b58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3301      	adds	r3, #1
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b68:	461a      	mov	r2, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d3b5      	bcc.n	8005adc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	e043      	b.n	8005bfe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b8c:	d118      	bne.n	8005bc0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e013      	b.n	8005bd2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e008      	b.n	8005bd2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bde:	461a      	mov	r2, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c02:	461a      	mov	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d3b5      	bcc.n	8005b76 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	f043 0210 	orr.w	r2, r3, #16
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699a      	ldr	r2, [r3, #24]
 8005c44:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <USB_DevInit+0x2b8>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f043 0208 	orr.w	r2, r3, #8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c70:	f043 0304 	orr.w	r3, r3, #4
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c84:	b004      	add	sp, #16
 8005c86:	4770      	bx	lr
 8005c88:	803c3800 	.word	0x803c3800

08005c8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ca6:	d901      	bls.n	8005cac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e01b      	b.n	8005ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	daf2      	bge.n	8005c9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	019b      	lsls	r3, r3, #6
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cd0:	d901      	bls.n	8005cd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e006      	b.n	8005ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d0f0      	beq.n	8005cc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d08:	d901      	bls.n	8005d0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e018      	b.n	8005d40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	daf2      	bge.n	8005cfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d2c:	d901      	bls.n	8005d32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e006      	b.n	8005d40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d0f0      	beq.n	8005d20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d98:	f023 0303 	bic.w	r3, r3, #3
 8005d9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dac:	f043 0302 	orr.w	r3, r3, #2
 8005db0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005df4:	d901      	bls.n	8005dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e01b      	b.n	8005e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	daf2      	bge.n	8005de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f043 0201 	orr.w	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3301      	adds	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e1e:	d901      	bls.n	8005e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e006      	b.n	8005e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d0f0      	beq.n	8005e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <arm_rfft_fast_init_f32>:
 8005e40:	084b      	lsrs	r3, r1, #1
 8005e42:	2b80      	cmp	r3, #128	@ 0x80
 8005e44:	b410      	push	{r4}
 8005e46:	8201      	strh	r1, [r0, #16]
 8005e48:	8003      	strh	r3, [r0, #0]
 8005e4a:	d047      	beq.n	8005edc <arm_rfft_fast_init_f32+0x9c>
 8005e4c:	d917      	bls.n	8005e7e <arm_rfft_fast_init_f32+0x3e>
 8005e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e52:	d03d      	beq.n	8005ed0 <arm_rfft_fast_init_f32+0x90>
 8005e54:	d929      	bls.n	8005eaa <arm_rfft_fast_init_f32+0x6a>
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5a:	d020      	beq.n	8005e9e <arm_rfft_fast_init_f32+0x5e>
 8005e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e60:	d113      	bne.n	8005e8a <arm_rfft_fast_init_f32+0x4a>
 8005e62:	4921      	ldr	r1, [pc, #132]	@ (8005ee8 <arm_rfft_fast_init_f32+0xa8>)
 8005e64:	4a21      	ldr	r2, [pc, #132]	@ (8005eec <arm_rfft_fast_init_f32+0xac>)
 8005e66:	4b22      	ldr	r3, [pc, #136]	@ (8005ef0 <arm_rfft_fast_init_f32+0xb0>)
 8005e68:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8005e6c:	8184      	strh	r4, [r0, #12]
 8005e6e:	6081      	str	r1, [r0, #8]
 8005e70:	6042      	str	r2, [r0, #4]
 8005e72:	6143      	str	r3, [r0, #20]
 8005e74:	2000      	movs	r0, #0
 8005e76:	b240      	sxtb	r0, r0
 8005e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d01c      	beq.n	8005ebc <arm_rfft_fast_init_f32+0x7c>
 8005e82:	2b40      	cmp	r3, #64	@ 0x40
 8005e84:	d006      	beq.n	8005e94 <arm_rfft_fast_init_f32+0x54>
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d01d      	beq.n	8005ec6 <arm_rfft_fast_init_f32+0x86>
 8005e8a:	20ff      	movs	r0, #255	@ 0xff
 8005e8c:	b240      	sxtb	r0, r0
 8005e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	2438      	movs	r4, #56	@ 0x38
 8005e96:	4917      	ldr	r1, [pc, #92]	@ (8005ef4 <arm_rfft_fast_init_f32+0xb4>)
 8005e98:	4a17      	ldr	r2, [pc, #92]	@ (8005ef8 <arm_rfft_fast_init_f32+0xb8>)
 8005e9a:	4b18      	ldr	r3, [pc, #96]	@ (8005efc <arm_rfft_fast_init_f32+0xbc>)
 8005e9c:	e7e6      	b.n	8005e6c <arm_rfft_fast_init_f32+0x2c>
 8005e9e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8005ea2:	4917      	ldr	r1, [pc, #92]	@ (8005f00 <arm_rfft_fast_init_f32+0xc0>)
 8005ea4:	4a17      	ldr	r2, [pc, #92]	@ (8005f04 <arm_rfft_fast_init_f32+0xc4>)
 8005ea6:	4b18      	ldr	r3, [pc, #96]	@ (8005f08 <arm_rfft_fast_init_f32+0xc8>)
 8005ea8:	e7e0      	b.n	8005e6c <arm_rfft_fast_init_f32+0x2c>
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eae:	d1ec      	bne.n	8005e8a <arm_rfft_fast_init_f32+0x4a>
 8005eb0:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8005eb4:	4915      	ldr	r1, [pc, #84]	@ (8005f0c <arm_rfft_fast_init_f32+0xcc>)
 8005eb6:	4a16      	ldr	r2, [pc, #88]	@ (8005f10 <arm_rfft_fast_init_f32+0xd0>)
 8005eb8:	4b16      	ldr	r3, [pc, #88]	@ (8005f14 <arm_rfft_fast_init_f32+0xd4>)
 8005eba:	e7d7      	b.n	8005e6c <arm_rfft_fast_init_f32+0x2c>
 8005ebc:	2430      	movs	r4, #48	@ 0x30
 8005ebe:	4916      	ldr	r1, [pc, #88]	@ (8005f18 <arm_rfft_fast_init_f32+0xd8>)
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <arm_rfft_fast_init_f32+0xdc>)
 8005ec2:	4b17      	ldr	r3, [pc, #92]	@ (8005f20 <arm_rfft_fast_init_f32+0xe0>)
 8005ec4:	e7d2      	b.n	8005e6c <arm_rfft_fast_init_f32+0x2c>
 8005ec6:	2414      	movs	r4, #20
 8005ec8:	4916      	ldr	r1, [pc, #88]	@ (8005f24 <arm_rfft_fast_init_f32+0xe4>)
 8005eca:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <arm_rfft_fast_init_f32+0xe8>)
 8005ecc:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <arm_rfft_fast_init_f32+0xec>)
 8005ece:	e7cd      	b.n	8005e6c <arm_rfft_fast_init_f32+0x2c>
 8005ed0:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8005ed4:	4916      	ldr	r1, [pc, #88]	@ (8005f30 <arm_rfft_fast_init_f32+0xf0>)
 8005ed6:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <arm_rfft_fast_init_f32+0xf4>)
 8005ed8:	4b17      	ldr	r3, [pc, #92]	@ (8005f38 <arm_rfft_fast_init_f32+0xf8>)
 8005eda:	e7c7      	b.n	8005e6c <arm_rfft_fast_init_f32+0x2c>
 8005edc:	24d0      	movs	r4, #208	@ 0xd0
 8005ede:	4917      	ldr	r1, [pc, #92]	@ (8005f3c <arm_rfft_fast_init_f32+0xfc>)
 8005ee0:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <arm_rfft_fast_init_f32+0x100>)
 8005ee2:	4b18      	ldr	r3, [pc, #96]	@ (8005f44 <arm_rfft_fast_init_f32+0x104>)
 8005ee4:	e7c2      	b.n	8005e6c <arm_rfft_fast_init_f32+0x2c>
 8005ee6:	bf00      	nop
 8005ee8:	08018934 	.word	0x08018934
 8005eec:	08009b2c 	.word	0x08009b2c
 8005ef0:	0800fc9c 	.word	0x0800fc9c
 8005ef4:	0800dc2c 	.word	0x0800dc2c
 8005ef8:	0801a6f4 	.word	0x0801a6f4
 8005efc:	0801cbe4 	.word	0x0801cbe4
 8005f00:	0801661c 	.word	0x0801661c
 8005f04:	0801451c 	.word	0x0801451c
 8005f08:	0800dc9c 	.word	0x0800dc9c
 8005f0c:	0801c874 	.word	0x0801c874
 8005f10:	08013c9c 	.word	0x08013c9c
 8005f14:	0801a8f4 	.word	0x0801a8f4
 8005f18:	080174d4 	.word	0x080174d4
 8005f1c:	0801651c 	.word	0x0801651c
 8005f20:	0800db2c 	.word	0x0800db2c
 8005f24:	0801742c 	.word	0x0801742c
 8005f28:	0801449c 	.word	0x0801449c
 8005f2c:	08017454 	.word	0x08017454
 8005f30:	0801b0f4 	.word	0x0801b0f4
 8005f34:	08017934 	.word	0x08017934
 8005f38:	0801b474 	.word	0x0801b474
 8005f3c:	0801cde4 	.word	0x0801cde4
 8005f40:	08017534 	.word	0x08017534
 8005f44:	0801c474 	.word	0x0801c474

08005f48 <arm_rfft_fast_f32>:
 8005f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4c:	8a06      	ldrh	r6, [r0, #16]
 8005f4e:	0876      	lsrs	r6, r6, #1
 8005f50:	4607      	mov	r7, r0
 8005f52:	4615      	mov	r5, r2
 8005f54:	8006      	strh	r6, [r0, #0]
 8005f56:	460c      	mov	r4, r1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d15c      	bne.n	8006016 <arm_rfft_fast_f32+0xce>
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f000 fbe6 	bl	8006730 <arm_cfft_f32>
 8005f64:	edd4 7a00 	vldr	s15, [r4]
 8005f68:	ed94 7a01 	vldr	s14, [r4, #4]
 8005f6c:	883e      	ldrh	r6, [r7, #0]
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005f74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f78:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8005f7c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005f80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f84:	3e01      	subs	r6, #1
 8005f86:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8005f8a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005f8e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005f92:	ed85 7a00 	vstr	s14, [r5]
 8005f96:	edc5 7a01 	vstr	s15, [r5, #4]
 8005f9a:	3010      	adds	r0, #16
 8005f9c:	f105 0210 	add.w	r2, r5, #16
 8005fa0:	3b08      	subs	r3, #8
 8005fa2:	f104 0110 	add.w	r1, r4, #16
 8005fa6:	ed51 4a02 	vldr	s9, [r1, #-8]
 8005faa:	ed93 5a02 	vldr	s10, [r3, #8]
 8005fae:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005fb2:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005fb6:	edd3 5a03 	vldr	s11, [r3, #12]
 8005fba:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005fbe:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005fc2:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005fc6:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005fca:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005fce:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005fd2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005fd6:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005fda:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005fde:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005fe2:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005fe6:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005fea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005fee:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005ff2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005ff6:	3e01      	subs	r6, #1
 8005ff8:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005ffc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006000:	f1a3 0308 	sub.w	r3, r3, #8
 8006004:	f101 0108 	add.w	r1, r1, #8
 8006008:	f100 0008 	add.w	r0, r0, #8
 800600c:	f102 0208 	add.w	r2, r2, #8
 8006010:	d1c9      	bne.n	8005fa6 <arm_rfft_fast_f32+0x5e>
 8006012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006016:	edd1 7a00 	vldr	s15, [r1]
 800601a:	edd1 6a01 	vldr	s13, [r1, #4]
 800601e:	6941      	ldr	r1, [r0, #20]
 8006020:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006024:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006028:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800602c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006030:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006034:	3e01      	subs	r6, #1
 8006036:	ed82 7a00 	vstr	s14, [r2]
 800603a:	edc2 7a01 	vstr	s15, [r2, #4]
 800603e:	00f0      	lsls	r0, r6, #3
 8006040:	b3ee      	cbz	r6, 80060be <arm_rfft_fast_f32+0x176>
 8006042:	3808      	subs	r0, #8
 8006044:	f101 0e10 	add.w	lr, r1, #16
 8006048:	4420      	add	r0, r4
 800604a:	f104 0110 	add.w	r1, r4, #16
 800604e:	f102 0c10 	add.w	ip, r2, #16
 8006052:	ed90 7a02 	vldr	s14, [r0, #8]
 8006056:	ed51 6a02 	vldr	s13, [r1, #-8]
 800605a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800605e:	ed90 4a03 	vldr	s8, [r0, #12]
 8006062:	ed11 5a01 	vldr	s10, [r1, #-4]
 8006066:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800606a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800606e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006072:	ee26 3a27 	vmul.f32	s6, s12, s15
 8006076:	ee77 6a26 	vadd.f32	s13, s14, s13
 800607a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800607e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006082:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006086:	ee77 7a05 	vadd.f32	s15, s14, s10
 800608a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800608e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006092:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006096:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800609a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800609e:	ee27 7a23 	vmul.f32	s14, s14, s7
 80060a2:	3e01      	subs	r6, #1
 80060a4:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80060a8:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80060ac:	f1a0 0008 	sub.w	r0, r0, #8
 80060b0:	f101 0108 	add.w	r1, r1, #8
 80060b4:	f10e 0e08 	add.w	lr, lr, #8
 80060b8:	f10c 0c08 	add.w	ip, ip, #8
 80060bc:	d1c9      	bne.n	8006052 <arm_rfft_fast_f32+0x10a>
 80060be:	4638      	mov	r0, r7
 80060c0:	4629      	mov	r1, r5
 80060c2:	461a      	mov	r2, r3
 80060c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	2301      	movs	r3, #1
 80060ca:	f000 bb31 	b.w	8006730 <arm_cfft_f32>
 80060ce:	bf00      	nop

080060d0 <arm_cfft_radix8by2_f32>:
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	ed2d 8b08 	vpush	{d8-d11}
 80060d8:	f8b0 e000 	ldrh.w	lr, [r0]
 80060dc:	6842      	ldr	r2, [r0, #4]
 80060de:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80060e2:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80060e6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80060ea:	4607      	mov	r7, r0
 80060ec:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80060f0:	f000 80af 	beq.w	8006252 <arm_cfft_radix8by2_f32+0x182>
 80060f4:	3310      	adds	r3, #16
 80060f6:	18ce      	adds	r6, r1, r3
 80060f8:	3210      	adds	r2, #16
 80060fa:	4443      	add	r3, r8
 80060fc:	f101 0510 	add.w	r5, r1, #16
 8006100:	f108 0410 	add.w	r4, r8, #16
 8006104:	ed54 1a04 	vldr	s3, [r4, #-16]
 8006108:	ed13 4a04 	vldr	s8, [r3, #-16]
 800610c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8006110:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006114:	ed13 5a01 	vldr	s10, [r3, #-4]
 8006118:	ed54 6a03 	vldr	s13, [r4, #-12]
 800611c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006120:	ed16 2a04 	vldr	s4, [r6, #-16]
 8006124:	ed56 2a03 	vldr	s5, [r6, #-12]
 8006128:	ed15 6a03 	vldr	s12, [r5, #-12]
 800612c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8006130:	ed15 3a04 	vldr	s6, [r5, #-16]
 8006134:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006138:	ed56 0a02 	vldr	s1, [r6, #-8]
 800613c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006140:	ed55 4a02 	vldr	s9, [r5, #-8]
 8006144:	ee73 ba21 	vadd.f32	s23, s6, s3
 8006148:	ee36 ba26 	vadd.f32	s22, s12, s13
 800614c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8006150:	ee72 9a04 	vadd.f32	s19, s4, s8
 8006154:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8006158:	ee31 8a05 	vadd.f32	s16, s2, s10
 800615c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8006160:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8006164:	ed45 ba04 	vstr	s23, [r5, #-16]
 8006168:	ed05 ba03 	vstr	s22, [r5, #-12]
 800616c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8006170:	ed05 aa01 	vstr	s20, [r5, #-4]
 8006174:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006178:	ed46 9a04 	vstr	s19, [r6, #-16]
 800617c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006180:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006184:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006188:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800618c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006190:	ed52 2a04 	vldr	s5, [r2, #-16]
 8006194:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006198:	ee34 4a42 	vsub.f32	s8, s8, s4
 800619c:	ee26 8a86 	vmul.f32	s16, s13, s12
 80061a0:	ee24 2a06 	vmul.f32	s4, s8, s12
 80061a4:	ee63 1a22 	vmul.f32	s3, s6, s5
 80061a8:	ee24 4a22 	vmul.f32	s8, s8, s5
 80061ac:	ee23 3a06 	vmul.f32	s6, s6, s12
 80061b0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80061b4:	ee23 6a86 	vmul.f32	s12, s7, s12
 80061b8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80061bc:	ee36 6a04 	vadd.f32	s12, s12, s8
 80061c0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80061c4:	ee72 3a63 	vsub.f32	s7, s4, s7
 80061c8:	ee71 2a88 	vadd.f32	s5, s3, s16
 80061cc:	ed44 6a03 	vstr	s13, [r4, #-12]
 80061d0:	ed44 2a04 	vstr	s5, [r4, #-16]
 80061d4:	ed43 3a04 	vstr	s7, [r3, #-16]
 80061d8:	ed03 6a03 	vstr	s12, [r3, #-12]
 80061dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061e0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80061e4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80061e8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80061ec:	ee35 6a41 	vsub.f32	s12, s10, s2
 80061f0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80061f4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80061f8:	ee26 5a87 	vmul.f32	s10, s13, s14
 80061fc:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8006200:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006204:	ee64 4a87 	vmul.f32	s9, s9, s14
 8006208:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800620c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006210:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006214:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006218:	ee74 5a23 	vadd.f32	s11, s8, s7
 800621c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006220:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006224:	f1be 0e01 	subs.w	lr, lr, #1
 8006228:	ed44 5a02 	vstr	s11, [r4, #-8]
 800622c:	f105 0510 	add.w	r5, r5, #16
 8006230:	ed44 7a01 	vstr	s15, [r4, #-4]
 8006234:	f106 0610 	add.w	r6, r6, #16
 8006238:	ed03 6a02 	vstr	s12, [r3, #-8]
 800623c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8006240:	f102 0210 	add.w	r2, r2, #16
 8006244:	f104 0410 	add.w	r4, r4, #16
 8006248:	f103 0310 	add.w	r3, r3, #16
 800624c:	f47f af5a 	bne.w	8006104 <arm_cfft_radix8by2_f32+0x34>
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	fa1f f48c 	uxth.w	r4, ip
 8006256:	4608      	mov	r0, r1
 8006258:	2302      	movs	r3, #2
 800625a:	4621      	mov	r1, r4
 800625c:	f000 fae2 	bl	8006824 <arm_radix8_butterfly_f32>
 8006260:	ecbd 8b08 	vpop	{d8-d11}
 8006264:	4640      	mov	r0, r8
 8006266:	4621      	mov	r1, r4
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	2302      	movs	r3, #2
 800626c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006270:	f000 bad8 	b.w	8006824 <arm_radix8_butterfly_f32>

08006274 <arm_cfft_radix8by4_f32>:
 8006274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006278:	ed2d 8b0a 	vpush	{d8-d12}
 800627c:	8802      	ldrh	r2, [r0, #0]
 800627e:	ed91 6a00 	vldr	s12, [r1]
 8006282:	b08f      	sub	sp, #60	@ 0x3c
 8006284:	460f      	mov	r7, r1
 8006286:	0852      	lsrs	r2, r2, #1
 8006288:	0093      	lsls	r3, r2, #2
 800628a:	900c      	str	r0, [sp, #48]	@ 0x30
 800628c:	9103      	str	r1, [sp, #12]
 800628e:	6841      	ldr	r1, [r0, #4]
 8006290:	ed97 7a01 	vldr	s14, [r7, #4]
 8006294:	4638      	mov	r0, r7
 8006296:	4418      	add	r0, r3
 8006298:	4606      	mov	r6, r0
 800629a:	9009      	str	r0, [sp, #36]	@ 0x24
 800629c:	4418      	add	r0, r3
 800629e:	edd0 6a00 	vldr	s13, [r0]
 80062a2:	edd6 3a00 	vldr	s7, [r6]
 80062a6:	edd6 2a01 	vldr	s5, [r6, #4]
 80062aa:	edd0 7a01 	vldr	s15, [r0, #4]
 80062ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80062b0:	ee76 5a26 	vadd.f32	s11, s12, s13
 80062b4:	4604      	mov	r4, r0
 80062b6:	4625      	mov	r5, r4
 80062b8:	441c      	add	r4, r3
 80062ba:	ed94 4a00 	vldr	s8, [r4]
 80062be:	ed94 5a01 	vldr	s10, [r4, #4]
 80062c2:	9401      	str	r4, [sp, #4]
 80062c4:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80062c8:	4630      	mov	r0, r6
 80062ca:	ee74 4a24 	vadd.f32	s9, s8, s9
 80062ce:	463e      	mov	r6, r7
 80062d0:	ee14 ea90 	vmov	lr, s9
 80062d4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80062d8:	f846 eb08 	str.w	lr, [r6], #8
 80062dc:	ee37 6a27 	vadd.f32	s12, s14, s15
 80062e0:	edd0 4a01 	vldr	s9, [r0, #4]
 80062e4:	9604      	str	r6, [sp, #16]
 80062e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ea:	9e01      	ldr	r6, [sp, #4]
 80062ec:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80062f0:	ed96 2a01 	vldr	s4, [r6, #4]
 80062f4:	ee36 7a24 	vadd.f32	s14, s12, s9
 80062f8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80062fc:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8006300:	ee36 6a62 	vsub.f32	s12, s12, s5
 8006304:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006308:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800630c:	ee73 3a45 	vsub.f32	s7, s6, s10
 8006310:	4604      	mov	r4, r0
 8006312:	ee36 6a45 	vsub.f32	s12, s12, s10
 8006316:	ee75 6a26 	vadd.f32	s13, s10, s13
 800631a:	46a3      	mov	fp, r4
 800631c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006320:	ee34 5a84 	vadd.f32	s10, s9, s8
 8006324:	ee13 8a90 	vmov	r8, s7
 8006328:	46a4      	mov	ip, r4
 800632a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800632e:	ed87 7a01 	vstr	s14, [r7, #4]
 8006332:	f84b 8b08 	str.w	r8, [fp], #8
 8006336:	f1ac 0704 	sub.w	r7, ip, #4
 800633a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800633e:	f101 0c08 	add.w	ip, r1, #8
 8006342:	462c      	mov	r4, r5
 8006344:	f8cd c014 	str.w	ip, [sp, #20]
 8006348:	ee15 ca90 	vmov	ip, s11
 800634c:	f844 cb08 	str.w	ip, [r4], #8
 8006350:	9407      	str	r4, [sp, #28]
 8006352:	f101 0410 	add.w	r4, r1, #16
 8006356:	ed85 6a01 	vstr	s12, [r5, #4]
 800635a:	0852      	lsrs	r2, r2, #1
 800635c:	9402      	str	r4, [sp, #8]
 800635e:	462c      	mov	r4, r5
 8006360:	f101 0518 	add.w	r5, r1, #24
 8006364:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006366:	46b2      	mov	sl, r6
 8006368:	9506      	str	r5, [sp, #24]
 800636a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800636e:	3a02      	subs	r2, #2
 8006370:	ee16 5a90 	vmov	r5, s13
 8006374:	46b6      	mov	lr, r6
 8006376:	4630      	mov	r0, r6
 8006378:	0852      	lsrs	r2, r2, #1
 800637a:	f84a 5b08 	str.w	r5, [sl], #8
 800637e:	f1a0 0604 	sub.w	r6, r0, #4
 8006382:	edce 7a01 	vstr	s15, [lr, #4]
 8006386:	9208      	str	r2, [sp, #32]
 8006388:	f000 8130 	beq.w	80065ec <arm_cfft_radix8by4_f32+0x378>
 800638c:	4691      	mov	r9, r2
 800638e:	9a03      	ldr	r2, [sp, #12]
 8006390:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006394:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8006398:	3b08      	subs	r3, #8
 800639a:	f102 0510 	add.w	r5, r2, #16
 800639e:	f101 0c20 	add.w	ip, r1, #32
 80063a2:	f1a4 020c 	sub.w	r2, r4, #12
 80063a6:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 80063aa:	4433      	add	r3, r6
 80063ac:	3410      	adds	r4, #16
 80063ae:	4650      	mov	r0, sl
 80063b0:	4659      	mov	r1, fp
 80063b2:	ed55 3a02 	vldr	s7, [r5, #-8]
 80063b6:	ed14 5a02 	vldr	s10, [r4, #-8]
 80063ba:	ed91 7a00 	vldr	s14, [r1]
 80063be:	edd0 7a00 	vldr	s15, [r0]
 80063c2:	ed15 4a01 	vldr	s8, [r5, #-4]
 80063c6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80063ca:	edd0 6a01 	vldr	s13, [r0, #4]
 80063ce:	ed91 6a01 	vldr	s12, [r1, #4]
 80063d2:	ee33 8a85 	vadd.f32	s16, s7, s10
 80063d6:	ee34 0a25 	vadd.f32	s0, s8, s11
 80063da:	ee78 4a07 	vadd.f32	s9, s16, s14
 80063de:	ee74 5a65 	vsub.f32	s11, s8, s11
 80063e2:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80063e6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80063ea:	ed45 4a02 	vstr	s9, [r5, #-8]
 80063ee:	edd1 4a01 	vldr	s9, [r1, #4]
 80063f2:	ed90 4a01 	vldr	s8, [r0, #4]
 80063f6:	ee70 4a24 	vadd.f32	s9, s0, s9
 80063fa:	ee76 aa05 	vadd.f32	s21, s12, s10
 80063fe:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006402:	ee35 aac7 	vsub.f32	s20, s11, s14
 8006406:	ed45 4a01 	vstr	s9, [r5, #-4]
 800640a:	edd6 1a00 	vldr	s3, [r6]
 800640e:	edd7 0a00 	vldr	s1, [r7]
 8006412:	ed92 4a02 	vldr	s8, [r2, #8]
 8006416:	edd3 3a02 	vldr	s7, [r3, #8]
 800641a:	ed93 2a01 	vldr	s4, [r3, #4]
 800641e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006422:	edd2 2a01 	vldr	s5, [r2, #4]
 8006426:	ed57 9a01 	vldr	s19, [r7, #-4]
 800642a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800642e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8006432:	ee74 8a84 	vadd.f32	s17, s9, s8
 8006436:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800643a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800643e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8006442:	ee18 aa90 	vmov	sl, s17
 8006446:	f847 a908 	str.w	sl, [r7], #-8
 800644a:	edd2 8a01 	vldr	s17, [r2, #4]
 800644e:	ed93 9a01 	vldr	s18, [r3, #4]
 8006452:	ee73 8a28 	vadd.f32	s17, s6, s17
 8006456:	ee3a aa27 	vadd.f32	s20, s20, s15
 800645a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800645e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8006462:	edc7 8a01 	vstr	s17, [r7, #4]
 8006466:	ed18 ba02 	vldr	s22, [r8, #-8]
 800646a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800646e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8006472:	ee6a ba28 	vmul.f32	s23, s20, s17
 8006476:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800647a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800647e:	ee30 9a81 	vadd.f32	s18, s1, s2
 8006482:	ee79 9a82 	vadd.f32	s19, s19, s4
 8006486:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800648a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800648e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8006492:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8006496:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800649a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800649e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80064a2:	ee1c aa10 	vmov	sl, s24
 80064a6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80064aa:	f841 ab08 	str.w	sl, [r1], #8
 80064ae:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80064b2:	ee3b bacb 	vsub.f32	s22, s23, s22
 80064b6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80064ba:	ee33 3a62 	vsub.f32	s6, s6, s5
 80064be:	ed01 aa01 	vstr	s20, [r1, #-4]
 80064c2:	edc2 8a01 	vstr	s17, [r2, #4]
 80064c6:	ed82 ba02 	vstr	s22, [r2, #8]
 80064ca:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80064ce:	ee74 3a63 	vsub.f32	s7, s8, s7
 80064d2:	ee38 8a47 	vsub.f32	s16, s16, s14
 80064d6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80064da:	ee30 0a46 	vsub.f32	s0, s0, s12
 80064de:	ee33 3a42 	vsub.f32	s6, s6, s4
 80064e2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80064e6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80064ea:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80064ee:	ee63 8a04 	vmul.f32	s17, s6, s8
 80064f2:	ee28 aa24 	vmul.f32	s20, s16, s9
 80064f6:	ee60 9a04 	vmul.f32	s19, s0, s8
 80064fa:	ee28 8a04 	vmul.f32	s16, s16, s8
 80064fe:	ee20 0a24 	vmul.f32	s0, s0, s9
 8006502:	ee63 3a84 	vmul.f32	s7, s7, s8
 8006506:	ee39 4a68 	vsub.f32	s8, s18, s17
 800650a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800650e:	ee14 aa10 	vmov	sl, s8
 8006512:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006516:	ee63 4a24 	vmul.f32	s9, s6, s9
 800651a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800651e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006522:	ed04 0a01 	vstr	s0, [r4, #-4]
 8006526:	f846 a908 	str.w	sl, [r6], #-8
 800652a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800652e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8006532:	edc6 3a01 	vstr	s7, [r6, #4]
 8006536:	ee76 6a86 	vadd.f32	s13, s13, s12
 800653a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800653e:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8006542:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8006546:	ee67 5a86 	vmul.f32	s11, s15, s12
 800654a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800654e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8006552:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006556:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800655a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800655e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8006562:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800656a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800656e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8006572:	ee21 1a07 	vmul.f32	s2, s2, s14
 8006576:	ee15 aa90 	vmov	sl, s11
 800657a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800657e:	f840 ab08 	str.w	sl, [r0], #8
 8006582:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006586:	ee76 2a22 	vadd.f32	s5, s12, s5
 800658a:	f1b9 0901 	subs.w	r9, r9, #1
 800658e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006592:	f105 0508 	add.w	r5, r5, #8
 8006596:	ed83 1a02 	vstr	s2, [r3, #8]
 800659a:	edc3 2a01 	vstr	s5, [r3, #4]
 800659e:	f108 0808 	add.w	r8, r8, #8
 80065a2:	f1a2 0208 	sub.w	r2, r2, #8
 80065a6:	f10c 0c10 	add.w	ip, ip, #16
 80065aa:	f104 0408 	add.w	r4, r4, #8
 80065ae:	f10e 0e18 	add.w	lr, lr, #24
 80065b2:	f1a3 0308 	sub.w	r3, r3, #8
 80065b6:	f47f aefc 	bne.w	80063b2 <arm_cfft_radix8by4_f32+0x13e>
 80065ba:	9908      	ldr	r1, [sp, #32]
 80065bc:	9802      	ldr	r0, [sp, #8]
 80065be:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80065c2:	00cb      	lsls	r3, r1, #3
 80065c4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80065c8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80065cc:	9102      	str	r1, [sp, #8]
 80065ce:	9904      	ldr	r1, [sp, #16]
 80065d0:	4419      	add	r1, r3
 80065d2:	9104      	str	r1, [sp, #16]
 80065d4:	9905      	ldr	r1, [sp, #20]
 80065d6:	4419      	add	r1, r3
 80065d8:	9105      	str	r1, [sp, #20]
 80065da:	9907      	ldr	r1, [sp, #28]
 80065dc:	449b      	add	fp, r3
 80065de:	4419      	add	r1, r3
 80065e0:	449a      	add	sl, r3
 80065e2:	9b06      	ldr	r3, [sp, #24]
 80065e4:	9107      	str	r1, [sp, #28]
 80065e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ea:	9306      	str	r3, [sp, #24]
 80065ec:	9a04      	ldr	r2, [sp, #16]
 80065ee:	9807      	ldr	r0, [sp, #28]
 80065f0:	edd2 3a00 	vldr	s7, [r2]
 80065f4:	ed90 4a00 	vldr	s8, [r0]
 80065f8:	eddb 7a00 	vldr	s15, [fp]
 80065fc:	ed9a 3a00 	vldr	s6, [sl]
 8006600:	edd2 4a01 	vldr	s9, [r2, #4]
 8006604:	ed90 7a01 	vldr	s14, [r0, #4]
 8006608:	ed9b 2a01 	vldr	s4, [fp, #4]
 800660c:	edda 5a01 	vldr	s11, [sl, #4]
 8006610:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8006614:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006616:	ee73 6a84 	vadd.f32	s13, s7, s8
 800661a:	ee34 6a87 	vadd.f32	s12, s9, s14
 800661e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8006622:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8006626:	ee33 5a05 	vadd.f32	s10, s6, s10
 800662a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800662e:	ed82 5a00 	vstr	s10, [r2]
 8006632:	ed9b 5a01 	vldr	s10, [fp, #4]
 8006636:	edda 4a01 	vldr	s9, [sl, #4]
 800663a:	ee36 5a05 	vadd.f32	s10, s12, s10
 800663e:	ee72 3a04 	vadd.f32	s7, s4, s8
 8006642:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006646:	ee77 4a67 	vsub.f32	s9, s14, s15
 800664a:	ed82 5a01 	vstr	s10, [r2, #4]
 800664e:	9a05      	ldr	r2, [sp, #20]
 8006650:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006654:	edd2 1a00 	vldr	s3, [r2]
 8006658:	edd2 2a01 	vldr	s5, [r2, #4]
 800665c:	9a02      	ldr	r2, [sp, #8]
 800665e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8006662:	ee36 6a42 	vsub.f32	s12, s12, s4
 8006666:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800666a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800666e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006672:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006676:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800667a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800667e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006682:	edcb 2a00 	vstr	s5, [fp]
 8006686:	ed8b 5a01 	vstr	s10, [fp, #4]
 800668a:	edd2 3a01 	vldr	s7, [r2, #4]
 800668e:	ed92 5a00 	vldr	s10, [r2]
 8006692:	9a06      	ldr	r2, [sp, #24]
 8006694:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006698:	ee36 6a65 	vsub.f32	s12, s12, s11
 800669c:	ee66 4a85 	vmul.f32	s9, s13, s10
 80066a0:	ee26 5a05 	vmul.f32	s10, s12, s10
 80066a4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80066a8:	ee26 6a23 	vmul.f32	s12, s12, s7
 80066ac:	ee75 6a66 	vsub.f32	s13, s10, s13
 80066b0:	ee34 6a86 	vadd.f32	s12, s9, s12
 80066b4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80066b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066bc:	edc0 6a01 	vstr	s13, [r0, #4]
 80066c0:	ed80 6a00 	vstr	s12, [r0]
 80066c4:	ed92 6a01 	vldr	s12, [r2, #4]
 80066c8:	9803      	ldr	r0, [sp, #12]
 80066ca:	ee77 7a43 	vsub.f32	s15, s14, s6
 80066ce:	ee75 5a84 	vadd.f32	s11, s11, s8
 80066d2:	ed92 7a00 	vldr	s14, [r2]
 80066d6:	ee65 6a87 	vmul.f32	s13, s11, s14
 80066da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066de:	ee65 5a86 	vmul.f32	s11, s11, s12
 80066e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80066e6:	ee77 5a65 	vsub.f32	s11, s14, s11
 80066ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ee:	edca 5a01 	vstr	s11, [sl, #4]
 80066f2:	edca 7a00 	vstr	s15, [sl]
 80066f6:	6872      	ldr	r2, [r6, #4]
 80066f8:	4621      	mov	r1, r4
 80066fa:	2304      	movs	r3, #4
 80066fc:	f000 f892 	bl	8006824 <arm_radix8_butterfly_f32>
 8006700:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006702:	6872      	ldr	r2, [r6, #4]
 8006704:	4621      	mov	r1, r4
 8006706:	2304      	movs	r3, #4
 8006708:	f000 f88c 	bl	8006824 <arm_radix8_butterfly_f32>
 800670c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800670e:	6872      	ldr	r2, [r6, #4]
 8006710:	4621      	mov	r1, r4
 8006712:	2304      	movs	r3, #4
 8006714:	f000 f886 	bl	8006824 <arm_radix8_butterfly_f32>
 8006718:	9801      	ldr	r0, [sp, #4]
 800671a:	6872      	ldr	r2, [r6, #4]
 800671c:	4621      	mov	r1, r4
 800671e:	2304      	movs	r3, #4
 8006720:	b00f      	add	sp, #60	@ 0x3c
 8006722:	ecbd 8b0a 	vpop	{d8-d12}
 8006726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	f000 b87b 	b.w	8006824 <arm_radix8_butterfly_f32>
 800672e:	bf00      	nop

08006730 <arm_cfft_f32>:
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	2a01      	cmp	r2, #1
 8006736:	4606      	mov	r6, r0
 8006738:	4617      	mov	r7, r2
 800673a:	460c      	mov	r4, r1
 800673c:	4698      	mov	r8, r3
 800673e:	8805      	ldrh	r5, [r0, #0]
 8006740:	d054      	beq.n	80067ec <arm_cfft_f32+0xbc>
 8006742:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006746:	d04c      	beq.n	80067e2 <arm_cfft_f32+0xb2>
 8006748:	d916      	bls.n	8006778 <arm_cfft_f32+0x48>
 800674a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800674e:	d01a      	beq.n	8006786 <arm_cfft_f32+0x56>
 8006750:	d95c      	bls.n	800680c <arm_cfft_f32+0xdc>
 8006752:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006756:	d044      	beq.n	80067e2 <arm_cfft_f32+0xb2>
 8006758:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800675c:	d105      	bne.n	800676a <arm_cfft_f32+0x3a>
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	6872      	ldr	r2, [r6, #4]
 8006764:	2301      	movs	r3, #1
 8006766:	f000 f85d 	bl	8006824 <arm_radix8_butterfly_f32>
 800676a:	f1b8 0f00 	cmp.w	r8, #0
 800676e:	d111      	bne.n	8006794 <arm_cfft_f32+0x64>
 8006770:	2f01      	cmp	r7, #1
 8006772:	d016      	beq.n	80067a2 <arm_cfft_f32+0x72>
 8006774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006778:	2d20      	cmp	r5, #32
 800677a:	d032      	beq.n	80067e2 <arm_cfft_f32+0xb2>
 800677c:	d94a      	bls.n	8006814 <arm_cfft_f32+0xe4>
 800677e:	2d40      	cmp	r5, #64	@ 0x40
 8006780:	d0ed      	beq.n	800675e <arm_cfft_f32+0x2e>
 8006782:	2d80      	cmp	r5, #128	@ 0x80
 8006784:	d1f1      	bne.n	800676a <arm_cfft_f32+0x3a>
 8006786:	4630      	mov	r0, r6
 8006788:	4621      	mov	r1, r4
 800678a:	f7ff fca1 	bl	80060d0 <arm_cfft_radix8by2_f32>
 800678e:	f1b8 0f00 	cmp.w	r8, #0
 8006792:	d0ed      	beq.n	8006770 <arm_cfft_f32+0x40>
 8006794:	4620      	mov	r0, r4
 8006796:	89b1      	ldrh	r1, [r6, #12]
 8006798:	68b2      	ldr	r2, [r6, #8]
 800679a:	f7f9 fd39 	bl	8000210 <arm_bitreversal_32>
 800679e:	2f01      	cmp	r7, #1
 80067a0:	d1e8      	bne.n	8006774 <arm_cfft_f32+0x44>
 80067a2:	ee07 5a90 	vmov	s15, r5
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067aa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80067ae:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80067b2:	2d00      	cmp	r5, #0
 80067b4:	d0de      	beq.n	8006774 <arm_cfft_f32+0x44>
 80067b6:	f104 0108 	add.w	r1, r4, #8
 80067ba:	2300      	movs	r3, #0
 80067bc:	3301      	adds	r3, #1
 80067be:	429d      	cmp	r5, r3
 80067c0:	f101 0108 	add.w	r1, r1, #8
 80067c4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80067c8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80067cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80067d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80067d4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80067d8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80067dc:	d1ee      	bne.n	80067bc <arm_cfft_f32+0x8c>
 80067de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e2:	4630      	mov	r0, r6
 80067e4:	4621      	mov	r1, r4
 80067e6:	f7ff fd45 	bl	8006274 <arm_cfft_radix8by4_f32>
 80067ea:	e7be      	b.n	800676a <arm_cfft_f32+0x3a>
 80067ec:	b1ad      	cbz	r5, 800681a <arm_cfft_f32+0xea>
 80067ee:	f101 030c 	add.w	r3, r1, #12
 80067f2:	2200      	movs	r2, #0
 80067f4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80067f8:	3201      	adds	r2, #1
 80067fa:	eef1 7a67 	vneg.f32	s15, s15
 80067fe:	4295      	cmp	r5, r2
 8006800:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006804:	f103 0308 	add.w	r3, r3, #8
 8006808:	d1f4      	bne.n	80067f4 <arm_cfft_f32+0xc4>
 800680a:	e79a      	b.n	8006742 <arm_cfft_f32+0x12>
 800680c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006810:	d0a5      	beq.n	800675e <arm_cfft_f32+0x2e>
 8006812:	e7aa      	b.n	800676a <arm_cfft_f32+0x3a>
 8006814:	2d10      	cmp	r5, #16
 8006816:	d0b6      	beq.n	8006786 <arm_cfft_f32+0x56>
 8006818:	e7a7      	b.n	800676a <arm_cfft_f32+0x3a>
 800681a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800681e:	d894      	bhi.n	800674a <arm_cfft_f32+0x1a>
 8006820:	e7aa      	b.n	8006778 <arm_cfft_f32+0x48>
 8006822:	bf00      	nop

08006824 <arm_radix8_butterfly_f32>:
 8006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	ed2d 8b10 	vpush	{d8-d15}
 800682c:	b09d      	sub	sp, #116	@ 0x74
 800682e:	461c      	mov	r4, r3
 8006830:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8006b54 <arm_radix8_butterfly_f32+0x330>
 8006834:	921a      	str	r2, [sp, #104]	@ 0x68
 8006836:	1d03      	adds	r3, r0, #4
 8006838:	4682      	mov	sl, r0
 800683a:	4689      	mov	r9, r1
 800683c:	468b      	mov	fp, r1
 800683e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006840:	9400      	str	r4, [sp, #0]
 8006842:	469e      	mov	lr, r3
 8006844:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8006848:	005a      	lsls	r2, r3, #1
 800684a:	18d6      	adds	r6, r2, r3
 800684c:	18f5      	adds	r5, r6, r3
 800684e:	9203      	str	r2, [sp, #12]
 8006850:	195a      	adds	r2, r3, r5
 8006852:	18d0      	adds	r0, r2, r3
 8006854:	00df      	lsls	r7, r3, #3
 8006856:	1819      	adds	r1, r3, r0
 8006858:	463c      	mov	r4, r7
 800685a:	9701      	str	r7, [sp, #4]
 800685c:	4457      	add	r7, sl
 800685e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006860:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800686a:	eb07 0c04 	add.w	ip, r7, r4
 800686e:	9c00      	ldr	r4, [sp, #0]
 8006870:	9302      	str	r3, [sp, #8]
 8006872:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8006876:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800687a:	3204      	adds	r2, #4
 800687c:	3104      	adds	r1, #4
 800687e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8006882:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006886:	f04f 0800 	mov.w	r8, #0
 800688a:	eddc 7a00 	vldr	s15, [ip]
 800688e:	edd7 6a00 	vldr	s13, [r7]
 8006892:	edd6 3a00 	vldr	s7, [r6]
 8006896:	ed5e aa01 	vldr	s21, [lr, #-4]
 800689a:	edd5 4a00 	vldr	s9, [r5]
 800689e:	ed90 2a00 	vldr	s4, [r0]
 80068a2:	ed12 7a01 	vldr	s14, [r2, #-4]
 80068a6:	ed51 0a01 	vldr	s1, [r1, #-4]
 80068aa:	ee77 8a82 	vadd.f32	s17, s15, s4
 80068ae:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80068b2:	ee76 1a87 	vadd.f32	s3, s13, s14
 80068b6:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80068ba:	ee31 6a84 	vadd.f32	s12, s3, s8
 80068be:	ee33 5a28 	vadd.f32	s10, s6, s17
 80068c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80068c6:	ee75 6a06 	vadd.f32	s13, s10, s12
 80068ca:	ee35 5a46 	vsub.f32	s10, s10, s12
 80068ce:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80068d2:	ed85 5a00 	vstr	s10, [r5]
 80068d6:	ed96 1a01 	vldr	s2, [r6, #4]
 80068da:	edd7 5a01 	vldr	s11, [r7, #4]
 80068de:	ed92 aa00 	vldr	s20, [r2]
 80068e2:	ed91 6a00 	vldr	s12, [r1]
 80068e6:	ed9e 9a00 	vldr	s18, [lr]
 80068ea:	ed95 5a01 	vldr	s10, [r5, #4]
 80068ee:	eddc 6a01 	vldr	s13, [ip, #4]
 80068f2:	edd0 9a01 	vldr	s19, [r0, #4]
 80068f6:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80068fa:	ee71 2a46 	vsub.f32	s5, s2, s12
 80068fe:	ee75 3aca 	vsub.f32	s7, s11, s20
 8006902:	ee37 0a60 	vsub.f32	s0, s14, s1
 8006906:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800690a:	ee37 7a20 	vadd.f32	s14, s14, s1
 800690e:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8006912:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8006916:	ee79 3a05 	vadd.f32	s7, s18, s10
 800691a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800691e:	ee39 5a45 	vsub.f32	s10, s18, s10
 8006922:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8006926:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800692a:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800692e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8006932:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8006936:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800693a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800693e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8006942:	ee33 3a68 	vsub.f32	s6, s6, s17
 8006946:	ee36 0a88 	vadd.f32	s0, s13, s16
 800694a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800694e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8006952:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8006956:	ee75 6a62 	vsub.f32	s13, s10, s5
 800695a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800695e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006962:	ee33 1a89 	vadd.f32	s2, s7, s18
 8006966:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800696a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800696e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8006972:	ee32 5a27 	vadd.f32	s10, s4, s15
 8006976:	ee72 7a67 	vsub.f32	s15, s4, s15
 800697a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800697e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8006982:	ee31 9a28 	vadd.f32	s18, s2, s17
 8006986:	ee33 6a46 	vsub.f32	s12, s6, s12
 800698a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800698e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8006992:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006996:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800699a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800699e:	ee31 1a68 	vsub.f32	s2, s2, s17
 80069a2:	ee34 4a21 	vadd.f32	s8, s8, s3
 80069a6:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80069aa:	ee74 4a85 	vadd.f32	s9, s9, s10
 80069ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80069b2:	44d8      	add	r8, fp
 80069b4:	45c1      	cmp	r9, r8
 80069b6:	ed8e 9a00 	vstr	s18, [lr]
 80069ba:	ed85 1a01 	vstr	s2, [r5, #4]
 80069be:	449e      	add	lr, r3
 80069c0:	ed8c 8a00 	vstr	s16, [ip]
 80069c4:	441d      	add	r5, r3
 80069c6:	ed80 6a00 	vstr	s12, [r0]
 80069ca:	edcc 0a01 	vstr	s1, [ip, #4]
 80069ce:	ed80 4a01 	vstr	s8, [r0, #4]
 80069d2:	449c      	add	ip, r3
 80069d4:	ed87 2a00 	vstr	s4, [r7]
 80069d8:	4418      	add	r0, r3
 80069da:	ed41 3a01 	vstr	s7, [r1, #-4]
 80069de:	ed42 2a01 	vstr	s5, [r2, #-4]
 80069e2:	ed86 7a00 	vstr	s14, [r6]
 80069e6:	ed87 3a01 	vstr	s6, [r7, #4]
 80069ea:	edc1 4a00 	vstr	s9, [r1]
 80069ee:	441f      	add	r7, r3
 80069f0:	edc2 5a00 	vstr	s11, [r2]
 80069f4:	4419      	add	r1, r3
 80069f6:	edc6 6a01 	vstr	s13, [r6, #4]
 80069fa:	441a      	add	r2, r3
 80069fc:	441e      	add	r6, r3
 80069fe:	f63f af44 	bhi.w	800688a <arm_radix8_butterfly_f32+0x66>
 8006a02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006a04:	2907      	cmp	r1, #7
 8006a06:	4620      	mov	r0, r4
 8006a08:	f240 81e9 	bls.w	8006dde <arm_radix8_butterfly_f32+0x5ba>
 8006a0c:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8006a10:	193e      	adds	r6, r7, r4
 8006a12:	1935      	adds	r5, r6, r4
 8006a14:	9c03      	ldr	r4, [sp, #12]
 8006a16:	9000      	str	r0, [sp, #0]
 8006a18:	4622      	mov	r2, r4
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006a20:	9900      	ldr	r1, [sp, #0]
 8006a22:	1828      	adds	r0, r5, r0
 8006a24:	eb00 0e01 	add.w	lr, r0, r1
 8006a28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006a2a:	440a      	add	r2, r1
 8006a2c:	eb04 0c01 	add.w	ip, r4, r1
 8006a30:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8006a34:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8006a38:	9a00      	ldr	r2, [sp, #0]
 8006a3a:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006a3c:	00ed      	lsls	r5, r5, #3
 8006a3e:	9511      	str	r5, [sp, #68]	@ 0x44
 8006a40:	00d5      	lsls	r5, r2, #3
 8006a42:	950d      	str	r5, [sp, #52]	@ 0x34
 8006a44:	9d01      	ldr	r5, [sp, #4]
 8006a46:	3508      	adds	r5, #8
 8006a48:	9516      	str	r5, [sp, #88]	@ 0x58
 8006a4a:	9d02      	ldr	r5, [sp, #8]
 8006a4c:	3508      	adds	r5, #8
 8006a4e:	0114      	lsls	r4, r2, #4
 8006a50:	9517      	str	r5, [sp, #92]	@ 0x5c
 8006a52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006a54:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8006a56:	940e      	str	r4, [sp, #56]	@ 0x38
 8006a58:	00c0      	lsls	r0, r0, #3
 8006a5a:	9010      	str	r0, [sp, #64]	@ 0x40
 8006a5c:	18aa      	adds	r2, r5, r2
 8006a5e:	9207      	str	r2, [sp, #28]
 8006a60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006a62:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006a64:	18aa      	adds	r2, r5, r2
 8006a66:	9208      	str	r2, [sp, #32]
 8006a68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a6a:	18aa      	adds	r2, r5, r2
 8006a6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006a72:	f10e 0204 	add.w	r2, lr, #4
 8006a76:	920a      	str	r2, [sp, #40]	@ 0x28
 8006a78:	00c9      	lsls	r1, r1, #3
 8006a7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a7c:	310c      	adds	r1, #12
 8006a7e:	00f6      	lsls	r6, r6, #3
 8006a80:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8006a84:	9114      	str	r1, [sp, #80]	@ 0x50
 8006a86:	18a9      	adds	r1, r5, r2
 8006a88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a8a:	9612      	str	r6, [sp, #72]	@ 0x48
 8006a8c:	00ff      	lsls	r7, r7, #3
 8006a8e:	19ae      	adds	r6, r5, r6
 8006a90:	3008      	adds	r0, #8
 8006a92:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8006a96:	9606      	str	r6, [sp, #24]
 8006a98:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a9a:	18aa      	adds	r2, r5, r2
 8006a9c:	0164      	lsls	r4, r4, #5
 8006a9e:	19ee      	adds	r6, r5, r7
 8006aa0:	f10c 000c 	add.w	r0, ip, #12
 8006aa4:	9713      	str	r7, [sp, #76]	@ 0x4c
 8006aa6:	9604      	str	r6, [sp, #16]
 8006aa8:	9015      	str	r0, [sp, #84]	@ 0x54
 8006aaa:	9103      	str	r1, [sp, #12]
 8006aac:	9205      	str	r2, [sp, #20]
 8006aae:	f104 0208 	add.w	r2, r4, #8
 8006ab2:	9218      	str	r2, [sp, #96]	@ 0x60
 8006ab4:	f04f 0801 	mov.w	r8, #1
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f102 0108 	add.w	r1, r2, #8
 8006abe:	460f      	mov	r7, r1
 8006ac0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ac2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8006ac4:	188e      	adds	r6, r1, r2
 8006ac6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8006ac8:	188d      	adds	r5, r1, r2
 8006aca:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006acc:	188c      	adds	r4, r1, r2
 8006ace:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8006ad0:	1888      	adds	r0, r1, r2
 8006ad2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8006ad4:	eb01 0c02 	add.w	ip, r1, r2
 8006ad8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8006ada:	440a      	add	r2, r1
 8006adc:	9903      	ldr	r1, [sp, #12]
 8006ade:	edd1 fa00 	vldr	s31, [r1]
 8006ae2:	9905      	ldr	r1, [sp, #20]
 8006ae4:	ed91 fa00 	vldr	s30, [r1]
 8006ae8:	9904      	ldr	r1, [sp, #16]
 8006aea:	edd1 ea00 	vldr	s29, [r1]
 8006aee:	9906      	ldr	r1, [sp, #24]
 8006af0:	ed91 ea00 	vldr	s28, [r1]
 8006af4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006af6:	edd1 da00 	vldr	s27, [r1]
 8006afa:	9908      	ldr	r1, [sp, #32]
 8006afc:	ed91 da00 	vldr	s26, [r1]
 8006b00:	9907      	ldr	r1, [sp, #28]
 8006b02:	edd1 ca00 	vldr	s25, [r1]
 8006b06:	9903      	ldr	r1, [sp, #12]
 8006b08:	ed91 ca01 	vldr	s24, [r1, #4]
 8006b0c:	9905      	ldr	r1, [sp, #20]
 8006b0e:	edd1 ba01 	vldr	s23, [r1, #4]
 8006b12:	9904      	ldr	r1, [sp, #16]
 8006b14:	edd1 aa01 	vldr	s21, [r1, #4]
 8006b18:	9906      	ldr	r1, [sp, #24]
 8006b1a:	ed91 aa01 	vldr	s20, [r1, #4]
 8006b1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b20:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b24:	9908      	ldr	r1, [sp, #32]
 8006b26:	edcd 7a00 	vstr	s15, [sp]
 8006b2a:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b2e:	9907      	ldr	r1, [sp, #28]
 8006b30:	edcd 7a01 	vstr	s15, [sp, #4]
 8006b34:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b38:	eb0a 0e07 	add.w	lr, sl, r7
 8006b3c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8006b3e:	edcd 7a02 	vstr	s15, [sp, #8]
 8006b42:	eb0c 010a 	add.w	r1, ip, sl
 8006b46:	4456      	add	r6, sl
 8006b48:	4455      	add	r5, sl
 8006b4a:	4454      	add	r4, sl
 8006b4c:	4450      	add	r0, sl
 8006b4e:	4452      	add	r2, sl
 8006b50:	46c4      	mov	ip, r8
 8006b52:	e001      	b.n	8006b58 <arm_radix8_butterfly_f32+0x334>
 8006b54:	3f3504f3 	.word	0x3f3504f3
 8006b58:	ed96 5a00 	vldr	s10, [r6]
 8006b5c:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006b60:	ed11 6a01 	vldr	s12, [r1, #-4]
 8006b64:	edd0 7a00 	vldr	s15, [r0]
 8006b68:	ed17 7a01 	vldr	s14, [r7, #-4]
 8006b6c:	edde 3a00 	vldr	s7, [lr]
 8006b70:	ed94 3a00 	vldr	s6, [r4]
 8006b74:	ed95 2a00 	vldr	s4, [r5]
 8006b78:	ed9e 0a01 	vldr	s0, [lr, #4]
 8006b7c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006b80:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006b84:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006b88:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006b8c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006b90:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006b94:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006b98:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ba0:	ed8e 6a00 	vstr	s12, [lr]
 8006ba4:	edd0 8a01 	vldr	s17, [r0, #4]
 8006ba8:	ed95 9a01 	vldr	s18, [r5, #4]
 8006bac:	edd1 2a00 	vldr	s5, [r1]
 8006bb0:	ed97 7a00 	vldr	s14, [r7]
 8006bb4:	edd4 0a01 	vldr	s1, [r4, #4]
 8006bb8:	ed96 6a01 	vldr	s12, [r6, #4]
 8006bbc:	edd2 5a00 	vldr	s11, [r2]
 8006bc0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006bc4:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006bc8:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006bcc:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006bd0:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006bd4:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006bd8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006bdc:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006be0:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006be4:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006be8:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006bec:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006bf0:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006bf4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006bf8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006bfc:	ee32 9a08 	vadd.f32	s18, s4, s16
 8006c00:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006c04:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006c08:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006c0c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006c10:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006c14:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006c18:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006c1c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006c20:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006c24:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006c28:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006c2c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006c30:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006c34:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006c38:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006c3c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006c40:	ee74 3a22 	vadd.f32	s7, s8, s5
 8006c44:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006c48:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006c4c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006c50:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006c54:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006c58:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006c5c:	ee72 4a24 	vadd.f32	s9, s4, s9
 8006c60:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006c64:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006c68:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006c6c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006c70:	ee36 6a03 	vadd.f32	s12, s12, s6
 8006c74:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006c78:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8006c7c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006c80:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8006c84:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006c88:	ee39 1a01 	vadd.f32	s2, s18, s2
 8006c8c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006c90:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8006c94:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006c98:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8006c9c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006ca0:	ee35 3a03 	vadd.f32	s6, s10, s6
 8006ca4:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006ca8:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8006cac:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8006cb0:	ed9d 4a02 	vldr	s8, [sp, #8]
 8006cb4:	ed8e 1a01 	vstr	s2, [lr, #4]
 8006cb8:	ee77 3a63 	vsub.f32	s7, s14, s7
 8006cbc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006cc0:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006cc4:	ed86 3a00 	vstr	s6, [r6]
 8006cc8:	ee30 9a89 	vadd.f32	s18, s1, s18
 8006ccc:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006cd0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006cd4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006cd8:	ee67 2a22 	vmul.f32	s5, s14, s5
 8006cdc:	ee64 1a00 	vmul.f32	s3, s8, s0
 8006ce0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006ce4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006ce8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006cec:	ee64 8a28 	vmul.f32	s17, s8, s17
 8006cf0:	ed9d 4a00 	vldr	s8, [sp]
 8006cf4:	edc6 6a01 	vstr	s13, [r6, #4]
 8006cf8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006cfc:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8006d00:	ee64 9a29 	vmul.f32	s19, s8, s19
 8006d04:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006d08:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006d0c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006d10:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8006d14:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006d18:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006d1c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8006d20:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8006d24:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006d28:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006d2c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8006d30:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8006d34:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006d38:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006d3c:	44dc      	add	ip, fp
 8006d3e:	45e1      	cmp	r9, ip
 8006d40:	ed84 9a00 	vstr	s18, [r4]
 8006d44:	edc4 3a01 	vstr	s7, [r4, #4]
 8006d48:	449e      	add	lr, r3
 8006d4a:	ed02 7a01 	vstr	s14, [r2, #-4]
 8006d4e:	edc2 2a00 	vstr	s5, [r2]
 8006d52:	441e      	add	r6, r3
 8006d54:	ed85 2a00 	vstr	s4, [r5]
 8006d58:	ed85 8a01 	vstr	s16, [r5, #4]
 8006d5c:	441c      	add	r4, r3
 8006d5e:	ed47 1a01 	vstr	s3, [r7, #-4]
 8006d62:	ed87 0a00 	vstr	s0, [r7]
 8006d66:	441a      	add	r2, r3
 8006d68:	ed41 4a01 	vstr	s9, [r1, #-4]
 8006d6c:	edc1 9a00 	vstr	s19, [r1]
 8006d70:	441d      	add	r5, r3
 8006d72:	edc0 0a00 	vstr	s1, [r0]
 8006d76:	441f      	add	r7, r3
 8006d78:	ed80 6a01 	vstr	s12, [r0, #4]
 8006d7c:	4419      	add	r1, r3
 8006d7e:	4418      	add	r0, r3
 8006d80:	f63f aeea 	bhi.w	8006b58 <arm_radix8_butterfly_f32+0x334>
 8006d84:	9a03      	ldr	r2, [sp, #12]
 8006d86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006d88:	440a      	add	r2, r1
 8006d8a:	9203      	str	r2, [sp, #12]
 8006d8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006d8e:	9a05      	ldr	r2, [sp, #20]
 8006d90:	440a      	add	r2, r1
 8006d92:	9205      	str	r2, [sp, #20]
 8006d94:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d96:	9a04      	ldr	r2, [sp, #16]
 8006d98:	440a      	add	r2, r1
 8006d9a:	9204      	str	r2, [sp, #16]
 8006d9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8006d9e:	9a06      	ldr	r2, [sp, #24]
 8006da0:	440a      	add	r2, r1
 8006da2:	9206      	str	r2, [sp, #24]
 8006da4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006da8:	440a      	add	r2, r1
 8006daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006dae:	9a08      	ldr	r2, [sp, #32]
 8006db0:	440a      	add	r2, r1
 8006db2:	9208      	str	r2, [sp, #32]
 8006db4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006db6:	9a07      	ldr	r2, [sp, #28]
 8006db8:	440a      	add	r2, r1
 8006dba:	9207      	str	r2, [sp, #28]
 8006dbc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006dbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dc0:	f108 0801 	add.w	r8, r8, #1
 8006dc4:	3208      	adds	r2, #8
 8006dc6:	4588      	cmp	r8, r1
 8006dc8:	920a      	str	r2, [sp, #40]	@ 0x28
 8006dca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006dcc:	f47f ae75 	bne.w	8006aba <arm_radix8_butterfly_f32+0x296>
 8006dd0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	46c3      	mov	fp, r8
 8006dd8:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8006ddc:	e532      	b.n	8006844 <arm_radix8_butterfly_f32+0x20>
 8006dde:	b01d      	add	sp, #116	@ 0x74
 8006de0:	ecbd 8b10 	vpop	{d8-d15}
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006de8 <__cvt>:
 8006de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	ec57 6b10 	vmov	r6, r7, d0
 8006df0:	2f00      	cmp	r7, #0
 8006df2:	460c      	mov	r4, r1
 8006df4:	4619      	mov	r1, r3
 8006df6:	463b      	mov	r3, r7
 8006df8:	bfbb      	ittet	lt
 8006dfa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006dfe:	461f      	movlt	r7, r3
 8006e00:	2300      	movge	r3, #0
 8006e02:	232d      	movlt	r3, #45	@ 0x2d
 8006e04:	700b      	strb	r3, [r1, #0]
 8006e06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e0c:	4691      	mov	r9, r2
 8006e0e:	f023 0820 	bic.w	r8, r3, #32
 8006e12:	bfbc      	itt	lt
 8006e14:	4632      	movlt	r2, r6
 8006e16:	4616      	movlt	r6, r2
 8006e18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e1c:	d005      	beq.n	8006e2a <__cvt+0x42>
 8006e1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e22:	d100      	bne.n	8006e26 <__cvt+0x3e>
 8006e24:	3401      	adds	r4, #1
 8006e26:	2102      	movs	r1, #2
 8006e28:	e000      	b.n	8006e2c <__cvt+0x44>
 8006e2a:	2103      	movs	r1, #3
 8006e2c:	ab03      	add	r3, sp, #12
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	ab02      	add	r3, sp, #8
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	ec47 6b10 	vmov	d0, r6, r7
 8006e38:	4653      	mov	r3, sl
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	f000 fe5c 	bl	8007af8 <_dtoa_r>
 8006e40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e44:	4605      	mov	r5, r0
 8006e46:	d119      	bne.n	8006e7c <__cvt+0x94>
 8006e48:	f019 0f01 	tst.w	r9, #1
 8006e4c:	d00e      	beq.n	8006e6c <__cvt+0x84>
 8006e4e:	eb00 0904 	add.w	r9, r0, r4
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	4630      	mov	r0, r6
 8006e58:	4639      	mov	r1, r7
 8006e5a:	f7f9 feb5 	bl	8000bc8 <__aeabi_dcmpeq>
 8006e5e:	b108      	cbz	r0, 8006e64 <__cvt+0x7c>
 8006e60:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e64:	2230      	movs	r2, #48	@ 0x30
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	454b      	cmp	r3, r9
 8006e6a:	d31e      	bcc.n	8006eaa <__cvt+0xc2>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e70:	1b5b      	subs	r3, r3, r5
 8006e72:	4628      	mov	r0, r5
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	b004      	add	sp, #16
 8006e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e80:	eb00 0904 	add.w	r9, r0, r4
 8006e84:	d1e5      	bne.n	8006e52 <__cvt+0x6a>
 8006e86:	7803      	ldrb	r3, [r0, #0]
 8006e88:	2b30      	cmp	r3, #48	@ 0x30
 8006e8a:	d10a      	bne.n	8006ea2 <__cvt+0xba>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4630      	mov	r0, r6
 8006e92:	4639      	mov	r1, r7
 8006e94:	f7f9 fe98 	bl	8000bc8 <__aeabi_dcmpeq>
 8006e98:	b918      	cbnz	r0, 8006ea2 <__cvt+0xba>
 8006e9a:	f1c4 0401 	rsb	r4, r4, #1
 8006e9e:	f8ca 4000 	str.w	r4, [sl]
 8006ea2:	f8da 3000 	ldr.w	r3, [sl]
 8006ea6:	4499      	add	r9, r3
 8006ea8:	e7d3      	b.n	8006e52 <__cvt+0x6a>
 8006eaa:	1c59      	adds	r1, r3, #1
 8006eac:	9103      	str	r1, [sp, #12]
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e7d9      	b.n	8006e66 <__cvt+0x7e>

08006eb2 <__exponent>:
 8006eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	bfba      	itte	lt
 8006eb8:	4249      	neglt	r1, r1
 8006eba:	232d      	movlt	r3, #45	@ 0x2d
 8006ebc:	232b      	movge	r3, #43	@ 0x2b
 8006ebe:	2909      	cmp	r1, #9
 8006ec0:	7002      	strb	r2, [r0, #0]
 8006ec2:	7043      	strb	r3, [r0, #1]
 8006ec4:	dd29      	ble.n	8006f1a <__exponent+0x68>
 8006ec6:	f10d 0307 	add.w	r3, sp, #7
 8006eca:	461d      	mov	r5, r3
 8006ecc:	270a      	movs	r7, #10
 8006ece:	461a      	mov	r2, r3
 8006ed0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ed4:	fb07 1416 	mls	r4, r7, r6, r1
 8006ed8:	3430      	adds	r4, #48	@ 0x30
 8006eda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ede:	460c      	mov	r4, r1
 8006ee0:	2c63      	cmp	r4, #99	@ 0x63
 8006ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	dcf1      	bgt.n	8006ece <__exponent+0x1c>
 8006eea:	3130      	adds	r1, #48	@ 0x30
 8006eec:	1e94      	subs	r4, r2, #2
 8006eee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ef2:	1c41      	adds	r1, r0, #1
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	42ab      	cmp	r3, r5
 8006ef8:	d30a      	bcc.n	8006f10 <__exponent+0x5e>
 8006efa:	f10d 0309 	add.w	r3, sp, #9
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	42ac      	cmp	r4, r5
 8006f02:	bf88      	it	hi
 8006f04:	2300      	movhi	r3, #0
 8006f06:	3302      	adds	r3, #2
 8006f08:	4403      	add	r3, r0
 8006f0a:	1a18      	subs	r0, r3, r0
 8006f0c:	b003      	add	sp, #12
 8006f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f18:	e7ed      	b.n	8006ef6 <__exponent+0x44>
 8006f1a:	2330      	movs	r3, #48	@ 0x30
 8006f1c:	3130      	adds	r1, #48	@ 0x30
 8006f1e:	7083      	strb	r3, [r0, #2]
 8006f20:	70c1      	strb	r1, [r0, #3]
 8006f22:	1d03      	adds	r3, r0, #4
 8006f24:	e7f1      	b.n	8006f0a <__exponent+0x58>
	...

08006f28 <_printf_float>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	b08d      	sub	sp, #52	@ 0x34
 8006f2e:	460c      	mov	r4, r1
 8006f30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f34:	4616      	mov	r6, r2
 8006f36:	461f      	mov	r7, r3
 8006f38:	4605      	mov	r5, r0
 8006f3a:	f000 fcdb 	bl	80078f4 <_localeconv_r>
 8006f3e:	6803      	ldr	r3, [r0, #0]
 8006f40:	9304      	str	r3, [sp, #16]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7f9 fa14 	bl	8000370 <strlen>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f50:	9005      	str	r0, [sp, #20]
 8006f52:	3307      	adds	r3, #7
 8006f54:	f023 0307 	bic.w	r3, r3, #7
 8006f58:	f103 0208 	add.w	r2, r3, #8
 8006f5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f60:	f8d4 b000 	ldr.w	fp, [r4]
 8006f64:	f8c8 2000 	str.w	r2, [r8]
 8006f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f70:	9307      	str	r3, [sp, #28]
 8006f72:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f7e:	4b9c      	ldr	r3, [pc, #624]	@ (80071f0 <_printf_float+0x2c8>)
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	f7f9 fe52 	bl	8000c2c <__aeabi_dcmpun>
 8006f88:	bb70      	cbnz	r0, 8006fe8 <_printf_float+0xc0>
 8006f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f8e:	4b98      	ldr	r3, [pc, #608]	@ (80071f0 <_printf_float+0x2c8>)
 8006f90:	f04f 32ff 	mov.w	r2, #4294967295
 8006f94:	f7f9 fe2c 	bl	8000bf0 <__aeabi_dcmple>
 8006f98:	bb30      	cbnz	r0, 8006fe8 <_printf_float+0xc0>
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 fe1b 	bl	8000bdc <__aeabi_dcmplt>
 8006fa6:	b110      	cbz	r0, 8006fae <_printf_float+0x86>
 8006fa8:	232d      	movs	r3, #45	@ 0x2d
 8006faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fae:	4a91      	ldr	r2, [pc, #580]	@ (80071f4 <_printf_float+0x2cc>)
 8006fb0:	4b91      	ldr	r3, [pc, #580]	@ (80071f8 <_printf_float+0x2d0>)
 8006fb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006fb6:	bf94      	ite	ls
 8006fb8:	4690      	movls	r8, r2
 8006fba:	4698      	movhi	r8, r3
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	f02b 0304 	bic.w	r3, fp, #4
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	f04f 0900 	mov.w	r9, #0
 8006fca:	9700      	str	r7, [sp, #0]
 8006fcc:	4633      	mov	r3, r6
 8006fce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 f9d2 	bl	800737c <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f040 808d 	bne.w	80070f8 <_printf_float+0x1d0>
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	b00d      	add	sp, #52	@ 0x34
 8006fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	4640      	mov	r0, r8
 8006fee:	4649      	mov	r1, r9
 8006ff0:	f7f9 fe1c 	bl	8000c2c <__aeabi_dcmpun>
 8006ff4:	b140      	cbz	r0, 8007008 <_printf_float+0xe0>
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bfbc      	itt	lt
 8006ffc:	232d      	movlt	r3, #45	@ 0x2d
 8006ffe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007002:	4a7e      	ldr	r2, [pc, #504]	@ (80071fc <_printf_float+0x2d4>)
 8007004:	4b7e      	ldr	r3, [pc, #504]	@ (8007200 <_printf_float+0x2d8>)
 8007006:	e7d4      	b.n	8006fb2 <_printf_float+0x8a>
 8007008:	6863      	ldr	r3, [r4, #4]
 800700a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800700e:	9206      	str	r2, [sp, #24]
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	d13b      	bne.n	800708c <_printf_float+0x164>
 8007014:	2306      	movs	r3, #6
 8007016:	6063      	str	r3, [r4, #4]
 8007018:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800701c:	2300      	movs	r3, #0
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	9303      	str	r3, [sp, #12]
 8007022:	ab0a      	add	r3, sp, #40	@ 0x28
 8007024:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007028:	ab09      	add	r3, sp, #36	@ 0x24
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	6861      	ldr	r1, [r4, #4]
 800702e:	ec49 8b10 	vmov	d0, r8, r9
 8007032:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007036:	4628      	mov	r0, r5
 8007038:	f7ff fed6 	bl	8006de8 <__cvt>
 800703c:	9b06      	ldr	r3, [sp, #24]
 800703e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007040:	2b47      	cmp	r3, #71	@ 0x47
 8007042:	4680      	mov	r8, r0
 8007044:	d129      	bne.n	800709a <_printf_float+0x172>
 8007046:	1cc8      	adds	r0, r1, #3
 8007048:	db02      	blt.n	8007050 <_printf_float+0x128>
 800704a:	6863      	ldr	r3, [r4, #4]
 800704c:	4299      	cmp	r1, r3
 800704e:	dd41      	ble.n	80070d4 <_printf_float+0x1ac>
 8007050:	f1aa 0a02 	sub.w	sl, sl, #2
 8007054:	fa5f fa8a 	uxtb.w	sl, sl
 8007058:	3901      	subs	r1, #1
 800705a:	4652      	mov	r2, sl
 800705c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007060:	9109      	str	r1, [sp, #36]	@ 0x24
 8007062:	f7ff ff26 	bl	8006eb2 <__exponent>
 8007066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007068:	1813      	adds	r3, r2, r0
 800706a:	2a01      	cmp	r2, #1
 800706c:	4681      	mov	r9, r0
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	dc02      	bgt.n	8007078 <_printf_float+0x150>
 8007072:	6822      	ldr	r2, [r4, #0]
 8007074:	07d2      	lsls	r2, r2, #31
 8007076:	d501      	bpl.n	800707c <_printf_float+0x154>
 8007078:	3301      	adds	r3, #1
 800707a:	6123      	str	r3, [r4, #16]
 800707c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0a2      	beq.n	8006fca <_printf_float+0xa2>
 8007084:	232d      	movs	r3, #45	@ 0x2d
 8007086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800708a:	e79e      	b.n	8006fca <_printf_float+0xa2>
 800708c:	9a06      	ldr	r2, [sp, #24]
 800708e:	2a47      	cmp	r2, #71	@ 0x47
 8007090:	d1c2      	bne.n	8007018 <_printf_float+0xf0>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1c0      	bne.n	8007018 <_printf_float+0xf0>
 8007096:	2301      	movs	r3, #1
 8007098:	e7bd      	b.n	8007016 <_printf_float+0xee>
 800709a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800709e:	d9db      	bls.n	8007058 <_printf_float+0x130>
 80070a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80070a4:	d118      	bne.n	80070d8 <_printf_float+0x1b0>
 80070a6:	2900      	cmp	r1, #0
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	dd0b      	ble.n	80070c4 <_printf_float+0x19c>
 80070ac:	6121      	str	r1, [r4, #16]
 80070ae:	b913      	cbnz	r3, 80070b6 <_printf_float+0x18e>
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	07d0      	lsls	r0, r2, #31
 80070b4:	d502      	bpl.n	80070bc <_printf_float+0x194>
 80070b6:	3301      	adds	r3, #1
 80070b8:	440b      	add	r3, r1
 80070ba:	6123      	str	r3, [r4, #16]
 80070bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070be:	f04f 0900 	mov.w	r9, #0
 80070c2:	e7db      	b.n	800707c <_printf_float+0x154>
 80070c4:	b913      	cbnz	r3, 80070cc <_printf_float+0x1a4>
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	07d2      	lsls	r2, r2, #31
 80070ca:	d501      	bpl.n	80070d0 <_printf_float+0x1a8>
 80070cc:	3302      	adds	r3, #2
 80070ce:	e7f4      	b.n	80070ba <_printf_float+0x192>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e7f2      	b.n	80070ba <_printf_float+0x192>
 80070d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070da:	4299      	cmp	r1, r3
 80070dc:	db05      	blt.n	80070ea <_printf_float+0x1c2>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	6121      	str	r1, [r4, #16]
 80070e2:	07d8      	lsls	r0, r3, #31
 80070e4:	d5ea      	bpl.n	80070bc <_printf_float+0x194>
 80070e6:	1c4b      	adds	r3, r1, #1
 80070e8:	e7e7      	b.n	80070ba <_printf_float+0x192>
 80070ea:	2900      	cmp	r1, #0
 80070ec:	bfd4      	ite	le
 80070ee:	f1c1 0202 	rsble	r2, r1, #2
 80070f2:	2201      	movgt	r2, #1
 80070f4:	4413      	add	r3, r2
 80070f6:	e7e0      	b.n	80070ba <_printf_float+0x192>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	055a      	lsls	r2, r3, #21
 80070fc:	d407      	bmi.n	800710e <_printf_float+0x1e6>
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	4642      	mov	r2, r8
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	d12b      	bne.n	8007164 <_printf_float+0x23c>
 800710c:	e767      	b.n	8006fde <_printf_float+0xb6>
 800710e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007112:	f240 80dd 	bls.w	80072d0 <_printf_float+0x3a8>
 8007116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800711a:	2200      	movs	r2, #0
 800711c:	2300      	movs	r3, #0
 800711e:	f7f9 fd53 	bl	8000bc8 <__aeabi_dcmpeq>
 8007122:	2800      	cmp	r0, #0
 8007124:	d033      	beq.n	800718e <_printf_float+0x266>
 8007126:	4a37      	ldr	r2, [pc, #220]	@ (8007204 <_printf_float+0x2dc>)
 8007128:	2301      	movs	r3, #1
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f af54 	beq.w	8006fde <_printf_float+0xb6>
 8007136:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800713a:	4543      	cmp	r3, r8
 800713c:	db02      	blt.n	8007144 <_printf_float+0x21c>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	07d8      	lsls	r0, r3, #31
 8007142:	d50f      	bpl.n	8007164 <_printf_float+0x23c>
 8007144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007148:	4631      	mov	r1, r6
 800714a:	4628      	mov	r0, r5
 800714c:	47b8      	blx	r7
 800714e:	3001      	adds	r0, #1
 8007150:	f43f af45 	beq.w	8006fde <_printf_float+0xb6>
 8007154:	f04f 0900 	mov.w	r9, #0
 8007158:	f108 38ff 	add.w	r8, r8, #4294967295
 800715c:	f104 0a1a 	add.w	sl, r4, #26
 8007160:	45c8      	cmp	r8, r9
 8007162:	dc09      	bgt.n	8007178 <_printf_float+0x250>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	079b      	lsls	r3, r3, #30
 8007168:	f100 8103 	bmi.w	8007372 <_printf_float+0x44a>
 800716c:	68e0      	ldr	r0, [r4, #12]
 800716e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007170:	4298      	cmp	r0, r3
 8007172:	bfb8      	it	lt
 8007174:	4618      	movlt	r0, r3
 8007176:	e734      	b.n	8006fe2 <_printf_float+0xba>
 8007178:	2301      	movs	r3, #1
 800717a:	4652      	mov	r2, sl
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f af2b 	beq.w	8006fde <_printf_float+0xb6>
 8007188:	f109 0901 	add.w	r9, r9, #1
 800718c:	e7e8      	b.n	8007160 <_printf_float+0x238>
 800718e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	dc39      	bgt.n	8007208 <_printf_float+0x2e0>
 8007194:	4a1b      	ldr	r2, [pc, #108]	@ (8007204 <_printf_float+0x2dc>)
 8007196:	2301      	movs	r3, #1
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	f43f af1d 	beq.w	8006fde <_printf_float+0xb6>
 80071a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071a8:	ea59 0303 	orrs.w	r3, r9, r3
 80071ac:	d102      	bne.n	80071b4 <_printf_float+0x28c>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	07d9      	lsls	r1, r3, #31
 80071b2:	d5d7      	bpl.n	8007164 <_printf_float+0x23c>
 80071b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b8:	4631      	mov	r1, r6
 80071ba:	4628      	mov	r0, r5
 80071bc:	47b8      	blx	r7
 80071be:	3001      	adds	r0, #1
 80071c0:	f43f af0d 	beq.w	8006fde <_printf_float+0xb6>
 80071c4:	f04f 0a00 	mov.w	sl, #0
 80071c8:	f104 0b1a 	add.w	fp, r4, #26
 80071cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ce:	425b      	negs	r3, r3
 80071d0:	4553      	cmp	r3, sl
 80071d2:	dc01      	bgt.n	80071d8 <_printf_float+0x2b0>
 80071d4:	464b      	mov	r3, r9
 80071d6:	e793      	b.n	8007100 <_printf_float+0x1d8>
 80071d8:	2301      	movs	r3, #1
 80071da:	465a      	mov	r2, fp
 80071dc:	4631      	mov	r1, r6
 80071de:	4628      	mov	r0, r5
 80071e0:	47b8      	blx	r7
 80071e2:	3001      	adds	r0, #1
 80071e4:	f43f aefb 	beq.w	8006fde <_printf_float+0xb6>
 80071e8:	f10a 0a01 	add.w	sl, sl, #1
 80071ec:	e7ee      	b.n	80071cc <_printf_float+0x2a4>
 80071ee:	bf00      	nop
 80071f0:	7fefffff 	.word	0x7fefffff
 80071f4:	0801cf84 	.word	0x0801cf84
 80071f8:	0801cf88 	.word	0x0801cf88
 80071fc:	0801cf8c 	.word	0x0801cf8c
 8007200:	0801cf90 	.word	0x0801cf90
 8007204:	0801cf94 	.word	0x0801cf94
 8007208:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800720a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800720e:	4553      	cmp	r3, sl
 8007210:	bfa8      	it	ge
 8007212:	4653      	movge	r3, sl
 8007214:	2b00      	cmp	r3, #0
 8007216:	4699      	mov	r9, r3
 8007218:	dc36      	bgt.n	8007288 <_printf_float+0x360>
 800721a:	f04f 0b00 	mov.w	fp, #0
 800721e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007222:	f104 021a 	add.w	r2, r4, #26
 8007226:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007228:	9306      	str	r3, [sp, #24]
 800722a:	eba3 0309 	sub.w	r3, r3, r9
 800722e:	455b      	cmp	r3, fp
 8007230:	dc31      	bgt.n	8007296 <_printf_float+0x36e>
 8007232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007234:	459a      	cmp	sl, r3
 8007236:	dc3a      	bgt.n	80072ae <_printf_float+0x386>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	07da      	lsls	r2, r3, #31
 800723c:	d437      	bmi.n	80072ae <_printf_float+0x386>
 800723e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007240:	ebaa 0903 	sub.w	r9, sl, r3
 8007244:	9b06      	ldr	r3, [sp, #24]
 8007246:	ebaa 0303 	sub.w	r3, sl, r3
 800724a:	4599      	cmp	r9, r3
 800724c:	bfa8      	it	ge
 800724e:	4699      	movge	r9, r3
 8007250:	f1b9 0f00 	cmp.w	r9, #0
 8007254:	dc33      	bgt.n	80072be <_printf_float+0x396>
 8007256:	f04f 0800 	mov.w	r8, #0
 800725a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800725e:	f104 0b1a 	add.w	fp, r4, #26
 8007262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007264:	ebaa 0303 	sub.w	r3, sl, r3
 8007268:	eba3 0309 	sub.w	r3, r3, r9
 800726c:	4543      	cmp	r3, r8
 800726e:	f77f af79 	ble.w	8007164 <_printf_float+0x23c>
 8007272:	2301      	movs	r3, #1
 8007274:	465a      	mov	r2, fp
 8007276:	4631      	mov	r1, r6
 8007278:	4628      	mov	r0, r5
 800727a:	47b8      	blx	r7
 800727c:	3001      	adds	r0, #1
 800727e:	f43f aeae 	beq.w	8006fde <_printf_float+0xb6>
 8007282:	f108 0801 	add.w	r8, r8, #1
 8007286:	e7ec      	b.n	8007262 <_printf_float+0x33a>
 8007288:	4642      	mov	r2, r8
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	d1c2      	bne.n	800721a <_printf_float+0x2f2>
 8007294:	e6a3      	b.n	8006fde <_printf_float+0xb6>
 8007296:	2301      	movs	r3, #1
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	9206      	str	r2, [sp, #24]
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	f43f ae9c 	beq.w	8006fde <_printf_float+0xb6>
 80072a6:	9a06      	ldr	r2, [sp, #24]
 80072a8:	f10b 0b01 	add.w	fp, fp, #1
 80072ac:	e7bb      	b.n	8007226 <_printf_float+0x2fe>
 80072ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	d1c0      	bne.n	800723e <_printf_float+0x316>
 80072bc:	e68f      	b.n	8006fde <_printf_float+0xb6>
 80072be:	9a06      	ldr	r2, [sp, #24]
 80072c0:	464b      	mov	r3, r9
 80072c2:	4442      	add	r2, r8
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	d1c3      	bne.n	8007256 <_printf_float+0x32e>
 80072ce:	e686      	b.n	8006fde <_printf_float+0xb6>
 80072d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072d4:	f1ba 0f01 	cmp.w	sl, #1
 80072d8:	dc01      	bgt.n	80072de <_printf_float+0x3b6>
 80072da:	07db      	lsls	r3, r3, #31
 80072dc:	d536      	bpl.n	800734c <_printf_float+0x424>
 80072de:	2301      	movs	r3, #1
 80072e0:	4642      	mov	r2, r8
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f ae78 	beq.w	8006fde <_printf_float+0xb6>
 80072ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f ae70 	beq.w	8006fde <_printf_float+0xb6>
 80072fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007302:	2200      	movs	r2, #0
 8007304:	2300      	movs	r3, #0
 8007306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800730a:	f7f9 fc5d 	bl	8000bc8 <__aeabi_dcmpeq>
 800730e:	b9c0      	cbnz	r0, 8007342 <_printf_float+0x41a>
 8007310:	4653      	mov	r3, sl
 8007312:	f108 0201 	add.w	r2, r8, #1
 8007316:	4631      	mov	r1, r6
 8007318:	4628      	mov	r0, r5
 800731a:	47b8      	blx	r7
 800731c:	3001      	adds	r0, #1
 800731e:	d10c      	bne.n	800733a <_printf_float+0x412>
 8007320:	e65d      	b.n	8006fde <_printf_float+0xb6>
 8007322:	2301      	movs	r3, #1
 8007324:	465a      	mov	r2, fp
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	f43f ae56 	beq.w	8006fde <_printf_float+0xb6>
 8007332:	f108 0801 	add.w	r8, r8, #1
 8007336:	45d0      	cmp	r8, sl
 8007338:	dbf3      	blt.n	8007322 <_printf_float+0x3fa>
 800733a:	464b      	mov	r3, r9
 800733c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007340:	e6df      	b.n	8007102 <_printf_float+0x1da>
 8007342:	f04f 0800 	mov.w	r8, #0
 8007346:	f104 0b1a 	add.w	fp, r4, #26
 800734a:	e7f4      	b.n	8007336 <_printf_float+0x40e>
 800734c:	2301      	movs	r3, #1
 800734e:	4642      	mov	r2, r8
 8007350:	e7e1      	b.n	8007316 <_printf_float+0x3ee>
 8007352:	2301      	movs	r3, #1
 8007354:	464a      	mov	r2, r9
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	f43f ae3e 	beq.w	8006fde <_printf_float+0xb6>
 8007362:	f108 0801 	add.w	r8, r8, #1
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800736a:	1a5b      	subs	r3, r3, r1
 800736c:	4543      	cmp	r3, r8
 800736e:	dcf0      	bgt.n	8007352 <_printf_float+0x42a>
 8007370:	e6fc      	b.n	800716c <_printf_float+0x244>
 8007372:	f04f 0800 	mov.w	r8, #0
 8007376:	f104 0919 	add.w	r9, r4, #25
 800737a:	e7f4      	b.n	8007366 <_printf_float+0x43e>

0800737c <_printf_common>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	4616      	mov	r6, r2
 8007382:	4698      	mov	r8, r3
 8007384:	688a      	ldr	r2, [r1, #8]
 8007386:	690b      	ldr	r3, [r1, #16]
 8007388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800738c:	4293      	cmp	r3, r2
 800738e:	bfb8      	it	lt
 8007390:	4613      	movlt	r3, r2
 8007392:	6033      	str	r3, [r6, #0]
 8007394:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007398:	4607      	mov	r7, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b10a      	cbz	r2, 80073a2 <_printf_common+0x26>
 800739e:	3301      	adds	r3, #1
 80073a0:	6033      	str	r3, [r6, #0]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	0699      	lsls	r1, r3, #26
 80073a6:	bf42      	ittt	mi
 80073a8:	6833      	ldrmi	r3, [r6, #0]
 80073aa:	3302      	addmi	r3, #2
 80073ac:	6033      	strmi	r3, [r6, #0]
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	f015 0506 	ands.w	r5, r5, #6
 80073b4:	d106      	bne.n	80073c4 <_printf_common+0x48>
 80073b6:	f104 0a19 	add.w	sl, r4, #25
 80073ba:	68e3      	ldr	r3, [r4, #12]
 80073bc:	6832      	ldr	r2, [r6, #0]
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	42ab      	cmp	r3, r5
 80073c2:	dc26      	bgt.n	8007412 <_printf_common+0x96>
 80073c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	3b00      	subs	r3, #0
 80073cc:	bf18      	it	ne
 80073ce:	2301      	movne	r3, #1
 80073d0:	0692      	lsls	r2, r2, #26
 80073d2:	d42b      	bmi.n	800742c <_printf_common+0xb0>
 80073d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073d8:	4641      	mov	r1, r8
 80073da:	4638      	mov	r0, r7
 80073dc:	47c8      	blx	r9
 80073de:	3001      	adds	r0, #1
 80073e0:	d01e      	beq.n	8007420 <_printf_common+0xa4>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	6922      	ldr	r2, [r4, #16]
 80073e6:	f003 0306 	and.w	r3, r3, #6
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	bf02      	ittt	eq
 80073ee:	68e5      	ldreq	r5, [r4, #12]
 80073f0:	6833      	ldreq	r3, [r6, #0]
 80073f2:	1aed      	subeq	r5, r5, r3
 80073f4:	68a3      	ldr	r3, [r4, #8]
 80073f6:	bf0c      	ite	eq
 80073f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073fc:	2500      	movne	r5, #0
 80073fe:	4293      	cmp	r3, r2
 8007400:	bfc4      	itt	gt
 8007402:	1a9b      	subgt	r3, r3, r2
 8007404:	18ed      	addgt	r5, r5, r3
 8007406:	2600      	movs	r6, #0
 8007408:	341a      	adds	r4, #26
 800740a:	42b5      	cmp	r5, r6
 800740c:	d11a      	bne.n	8007444 <_printf_common+0xc8>
 800740e:	2000      	movs	r0, #0
 8007410:	e008      	b.n	8007424 <_printf_common+0xa8>
 8007412:	2301      	movs	r3, #1
 8007414:	4652      	mov	r2, sl
 8007416:	4641      	mov	r1, r8
 8007418:	4638      	mov	r0, r7
 800741a:	47c8      	blx	r9
 800741c:	3001      	adds	r0, #1
 800741e:	d103      	bne.n	8007428 <_printf_common+0xac>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007428:	3501      	adds	r5, #1
 800742a:	e7c6      	b.n	80073ba <_printf_common+0x3e>
 800742c:	18e1      	adds	r1, r4, r3
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	2030      	movs	r0, #48	@ 0x30
 8007432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007436:	4422      	add	r2, r4
 8007438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800743c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007440:	3302      	adds	r3, #2
 8007442:	e7c7      	b.n	80073d4 <_printf_common+0x58>
 8007444:	2301      	movs	r3, #1
 8007446:	4622      	mov	r2, r4
 8007448:	4641      	mov	r1, r8
 800744a:	4638      	mov	r0, r7
 800744c:	47c8      	blx	r9
 800744e:	3001      	adds	r0, #1
 8007450:	d0e6      	beq.n	8007420 <_printf_common+0xa4>
 8007452:	3601      	adds	r6, #1
 8007454:	e7d9      	b.n	800740a <_printf_common+0x8e>
	...

08007458 <_printf_i>:
 8007458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	7e0f      	ldrb	r7, [r1, #24]
 800745e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007460:	2f78      	cmp	r7, #120	@ 0x78
 8007462:	4691      	mov	r9, r2
 8007464:	4680      	mov	r8, r0
 8007466:	460c      	mov	r4, r1
 8007468:	469a      	mov	sl, r3
 800746a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800746e:	d807      	bhi.n	8007480 <_printf_i+0x28>
 8007470:	2f62      	cmp	r7, #98	@ 0x62
 8007472:	d80a      	bhi.n	800748a <_printf_i+0x32>
 8007474:	2f00      	cmp	r7, #0
 8007476:	f000 80d2 	beq.w	800761e <_printf_i+0x1c6>
 800747a:	2f58      	cmp	r7, #88	@ 0x58
 800747c:	f000 80b9 	beq.w	80075f2 <_printf_i+0x19a>
 8007480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007488:	e03a      	b.n	8007500 <_printf_i+0xa8>
 800748a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800748e:	2b15      	cmp	r3, #21
 8007490:	d8f6      	bhi.n	8007480 <_printf_i+0x28>
 8007492:	a101      	add	r1, pc, #4	@ (adr r1, 8007498 <_printf_i+0x40>)
 8007494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007498:	080074f1 	.word	0x080074f1
 800749c:	08007505 	.word	0x08007505
 80074a0:	08007481 	.word	0x08007481
 80074a4:	08007481 	.word	0x08007481
 80074a8:	08007481 	.word	0x08007481
 80074ac:	08007481 	.word	0x08007481
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007481 	.word	0x08007481
 80074b8:	08007481 	.word	0x08007481
 80074bc:	08007481 	.word	0x08007481
 80074c0:	08007481 	.word	0x08007481
 80074c4:	08007605 	.word	0x08007605
 80074c8:	0800752f 	.word	0x0800752f
 80074cc:	080075bf 	.word	0x080075bf
 80074d0:	08007481 	.word	0x08007481
 80074d4:	08007481 	.word	0x08007481
 80074d8:	08007627 	.word	0x08007627
 80074dc:	08007481 	.word	0x08007481
 80074e0:	0800752f 	.word	0x0800752f
 80074e4:	08007481 	.word	0x08007481
 80074e8:	08007481 	.word	0x08007481
 80074ec:	080075c7 	.word	0x080075c7
 80074f0:	6833      	ldr	r3, [r6, #0]
 80074f2:	1d1a      	adds	r2, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6032      	str	r2, [r6, #0]
 80074f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007500:	2301      	movs	r3, #1
 8007502:	e09d      	b.n	8007640 <_printf_i+0x1e8>
 8007504:	6833      	ldr	r3, [r6, #0]
 8007506:	6820      	ldr	r0, [r4, #0]
 8007508:	1d19      	adds	r1, r3, #4
 800750a:	6031      	str	r1, [r6, #0]
 800750c:	0606      	lsls	r6, r0, #24
 800750e:	d501      	bpl.n	8007514 <_printf_i+0xbc>
 8007510:	681d      	ldr	r5, [r3, #0]
 8007512:	e003      	b.n	800751c <_printf_i+0xc4>
 8007514:	0645      	lsls	r5, r0, #25
 8007516:	d5fb      	bpl.n	8007510 <_printf_i+0xb8>
 8007518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800751c:	2d00      	cmp	r5, #0
 800751e:	da03      	bge.n	8007528 <_printf_i+0xd0>
 8007520:	232d      	movs	r3, #45	@ 0x2d
 8007522:	426d      	negs	r5, r5
 8007524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007528:	4859      	ldr	r0, [pc, #356]	@ (8007690 <_printf_i+0x238>)
 800752a:	230a      	movs	r3, #10
 800752c:	e011      	b.n	8007552 <_printf_i+0xfa>
 800752e:	6821      	ldr	r1, [r4, #0]
 8007530:	6833      	ldr	r3, [r6, #0]
 8007532:	0608      	lsls	r0, r1, #24
 8007534:	f853 5b04 	ldr.w	r5, [r3], #4
 8007538:	d402      	bmi.n	8007540 <_printf_i+0xe8>
 800753a:	0649      	lsls	r1, r1, #25
 800753c:	bf48      	it	mi
 800753e:	b2ad      	uxthmi	r5, r5
 8007540:	2f6f      	cmp	r7, #111	@ 0x6f
 8007542:	4853      	ldr	r0, [pc, #332]	@ (8007690 <_printf_i+0x238>)
 8007544:	6033      	str	r3, [r6, #0]
 8007546:	bf14      	ite	ne
 8007548:	230a      	movne	r3, #10
 800754a:	2308      	moveq	r3, #8
 800754c:	2100      	movs	r1, #0
 800754e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007552:	6866      	ldr	r6, [r4, #4]
 8007554:	60a6      	str	r6, [r4, #8]
 8007556:	2e00      	cmp	r6, #0
 8007558:	bfa2      	ittt	ge
 800755a:	6821      	ldrge	r1, [r4, #0]
 800755c:	f021 0104 	bicge.w	r1, r1, #4
 8007560:	6021      	strge	r1, [r4, #0]
 8007562:	b90d      	cbnz	r5, 8007568 <_printf_i+0x110>
 8007564:	2e00      	cmp	r6, #0
 8007566:	d04b      	beq.n	8007600 <_printf_i+0x1a8>
 8007568:	4616      	mov	r6, r2
 800756a:	fbb5 f1f3 	udiv	r1, r5, r3
 800756e:	fb03 5711 	mls	r7, r3, r1, r5
 8007572:	5dc7      	ldrb	r7, [r0, r7]
 8007574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007578:	462f      	mov	r7, r5
 800757a:	42bb      	cmp	r3, r7
 800757c:	460d      	mov	r5, r1
 800757e:	d9f4      	bls.n	800756a <_printf_i+0x112>
 8007580:	2b08      	cmp	r3, #8
 8007582:	d10b      	bne.n	800759c <_printf_i+0x144>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	07df      	lsls	r7, r3, #31
 8007588:	d508      	bpl.n	800759c <_printf_i+0x144>
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	6861      	ldr	r1, [r4, #4]
 800758e:	4299      	cmp	r1, r3
 8007590:	bfde      	ittt	le
 8007592:	2330      	movle	r3, #48	@ 0x30
 8007594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800759c:	1b92      	subs	r2, r2, r6
 800759e:	6122      	str	r2, [r4, #16]
 80075a0:	f8cd a000 	str.w	sl, [sp]
 80075a4:	464b      	mov	r3, r9
 80075a6:	aa03      	add	r2, sp, #12
 80075a8:	4621      	mov	r1, r4
 80075aa:	4640      	mov	r0, r8
 80075ac:	f7ff fee6 	bl	800737c <_printf_common>
 80075b0:	3001      	adds	r0, #1
 80075b2:	d14a      	bne.n	800764a <_printf_i+0x1f2>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	b004      	add	sp, #16
 80075ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	4833      	ldr	r0, [pc, #204]	@ (8007694 <_printf_i+0x23c>)
 80075c8:	2778      	movs	r7, #120	@ 0x78
 80075ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	6831      	ldr	r1, [r6, #0]
 80075d2:	061f      	lsls	r7, r3, #24
 80075d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80075d8:	d402      	bmi.n	80075e0 <_printf_i+0x188>
 80075da:	065f      	lsls	r7, r3, #25
 80075dc:	bf48      	it	mi
 80075de:	b2ad      	uxthmi	r5, r5
 80075e0:	6031      	str	r1, [r6, #0]
 80075e2:	07d9      	lsls	r1, r3, #31
 80075e4:	bf44      	itt	mi
 80075e6:	f043 0320 	orrmi.w	r3, r3, #32
 80075ea:	6023      	strmi	r3, [r4, #0]
 80075ec:	b11d      	cbz	r5, 80075f6 <_printf_i+0x19e>
 80075ee:	2310      	movs	r3, #16
 80075f0:	e7ac      	b.n	800754c <_printf_i+0xf4>
 80075f2:	4827      	ldr	r0, [pc, #156]	@ (8007690 <_printf_i+0x238>)
 80075f4:	e7e9      	b.n	80075ca <_printf_i+0x172>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	f023 0320 	bic.w	r3, r3, #32
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	e7f6      	b.n	80075ee <_printf_i+0x196>
 8007600:	4616      	mov	r6, r2
 8007602:	e7bd      	b.n	8007580 <_printf_i+0x128>
 8007604:	6833      	ldr	r3, [r6, #0]
 8007606:	6825      	ldr	r5, [r4, #0]
 8007608:	6961      	ldr	r1, [r4, #20]
 800760a:	1d18      	adds	r0, r3, #4
 800760c:	6030      	str	r0, [r6, #0]
 800760e:	062e      	lsls	r6, r5, #24
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	d501      	bpl.n	8007618 <_printf_i+0x1c0>
 8007614:	6019      	str	r1, [r3, #0]
 8007616:	e002      	b.n	800761e <_printf_i+0x1c6>
 8007618:	0668      	lsls	r0, r5, #25
 800761a:	d5fb      	bpl.n	8007614 <_printf_i+0x1bc>
 800761c:	8019      	strh	r1, [r3, #0]
 800761e:	2300      	movs	r3, #0
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	4616      	mov	r6, r2
 8007624:	e7bc      	b.n	80075a0 <_printf_i+0x148>
 8007626:	6833      	ldr	r3, [r6, #0]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	6032      	str	r2, [r6, #0]
 800762c:	681e      	ldr	r6, [r3, #0]
 800762e:	6862      	ldr	r2, [r4, #4]
 8007630:	2100      	movs	r1, #0
 8007632:	4630      	mov	r0, r6
 8007634:	f7f8 fe4c 	bl	80002d0 <memchr>
 8007638:	b108      	cbz	r0, 800763e <_printf_i+0x1e6>
 800763a:	1b80      	subs	r0, r0, r6
 800763c:	6060      	str	r0, [r4, #4]
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	2300      	movs	r3, #0
 8007644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007648:	e7aa      	b.n	80075a0 <_printf_i+0x148>
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	4632      	mov	r2, r6
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	47d0      	blx	sl
 8007654:	3001      	adds	r0, #1
 8007656:	d0ad      	beq.n	80075b4 <_printf_i+0x15c>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	079b      	lsls	r3, r3, #30
 800765c:	d413      	bmi.n	8007686 <_printf_i+0x22e>
 800765e:	68e0      	ldr	r0, [r4, #12]
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	4298      	cmp	r0, r3
 8007664:	bfb8      	it	lt
 8007666:	4618      	movlt	r0, r3
 8007668:	e7a6      	b.n	80075b8 <_printf_i+0x160>
 800766a:	2301      	movs	r3, #1
 800766c:	4632      	mov	r2, r6
 800766e:	4649      	mov	r1, r9
 8007670:	4640      	mov	r0, r8
 8007672:	47d0      	blx	sl
 8007674:	3001      	adds	r0, #1
 8007676:	d09d      	beq.n	80075b4 <_printf_i+0x15c>
 8007678:	3501      	adds	r5, #1
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	9903      	ldr	r1, [sp, #12]
 800767e:	1a5b      	subs	r3, r3, r1
 8007680:	42ab      	cmp	r3, r5
 8007682:	dcf2      	bgt.n	800766a <_printf_i+0x212>
 8007684:	e7eb      	b.n	800765e <_printf_i+0x206>
 8007686:	2500      	movs	r5, #0
 8007688:	f104 0619 	add.w	r6, r4, #25
 800768c:	e7f5      	b.n	800767a <_printf_i+0x222>
 800768e:	bf00      	nop
 8007690:	0801cf96 	.word	0x0801cf96
 8007694:	0801cfa7 	.word	0x0801cfa7

08007698 <std>:
 8007698:	2300      	movs	r3, #0
 800769a:	b510      	push	{r4, lr}
 800769c:	4604      	mov	r4, r0
 800769e:	e9c0 3300 	strd	r3, r3, [r0]
 80076a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076a6:	6083      	str	r3, [r0, #8]
 80076a8:	8181      	strh	r1, [r0, #12]
 80076aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80076ac:	81c2      	strh	r2, [r0, #14]
 80076ae:	6183      	str	r3, [r0, #24]
 80076b0:	4619      	mov	r1, r3
 80076b2:	2208      	movs	r2, #8
 80076b4:	305c      	adds	r0, #92	@ 0x5c
 80076b6:	f000 f914 	bl	80078e2 <memset>
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <std+0x58>)
 80076bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x5c>)
 80076c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x60>)
 80076c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <std+0x64>)
 80076c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <std+0x68>)
 80076cc:	6224      	str	r4, [r4, #32]
 80076ce:	429c      	cmp	r4, r3
 80076d0:	d006      	beq.n	80076e0 <std+0x48>
 80076d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076d6:	4294      	cmp	r4, r2
 80076d8:	d002      	beq.n	80076e0 <std+0x48>
 80076da:	33d0      	adds	r3, #208	@ 0xd0
 80076dc:	429c      	cmp	r4, r3
 80076de:	d105      	bne.n	80076ec <std+0x54>
 80076e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e8:	f000 b978 	b.w	80079dc <__retarget_lock_init_recursive>
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	bf00      	nop
 80076f0:	0800785d 	.word	0x0800785d
 80076f4:	0800787f 	.word	0x0800787f
 80076f8:	080078b7 	.word	0x080078b7
 80076fc:	080078db 	.word	0x080078db
 8007700:	2000987c 	.word	0x2000987c

08007704 <stdio_exit_handler>:
 8007704:	4a02      	ldr	r2, [pc, #8]	@ (8007710 <stdio_exit_handler+0xc>)
 8007706:	4903      	ldr	r1, [pc, #12]	@ (8007714 <stdio_exit_handler+0x10>)
 8007708:	4803      	ldr	r0, [pc, #12]	@ (8007718 <stdio_exit_handler+0x14>)
 800770a:	f000 b869 	b.w	80077e0 <_fwalk_sglue>
 800770e:	bf00      	nop
 8007710:	2000000c 	.word	0x2000000c
 8007714:	0800933d 	.word	0x0800933d
 8007718:	2000001c 	.word	0x2000001c

0800771c <cleanup_stdio>:
 800771c:	6841      	ldr	r1, [r0, #4]
 800771e:	4b0c      	ldr	r3, [pc, #48]	@ (8007750 <cleanup_stdio+0x34>)
 8007720:	4299      	cmp	r1, r3
 8007722:	b510      	push	{r4, lr}
 8007724:	4604      	mov	r4, r0
 8007726:	d001      	beq.n	800772c <cleanup_stdio+0x10>
 8007728:	f001 fe08 	bl	800933c <_fflush_r>
 800772c:	68a1      	ldr	r1, [r4, #8]
 800772e:	4b09      	ldr	r3, [pc, #36]	@ (8007754 <cleanup_stdio+0x38>)
 8007730:	4299      	cmp	r1, r3
 8007732:	d002      	beq.n	800773a <cleanup_stdio+0x1e>
 8007734:	4620      	mov	r0, r4
 8007736:	f001 fe01 	bl	800933c <_fflush_r>
 800773a:	68e1      	ldr	r1, [r4, #12]
 800773c:	4b06      	ldr	r3, [pc, #24]	@ (8007758 <cleanup_stdio+0x3c>)
 800773e:	4299      	cmp	r1, r3
 8007740:	d004      	beq.n	800774c <cleanup_stdio+0x30>
 8007742:	4620      	mov	r0, r4
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007748:	f001 bdf8 	b.w	800933c <_fflush_r>
 800774c:	bd10      	pop	{r4, pc}
 800774e:	bf00      	nop
 8007750:	2000987c 	.word	0x2000987c
 8007754:	200098e4 	.word	0x200098e4
 8007758:	2000994c 	.word	0x2000994c

0800775c <global_stdio_init.part.0>:
 800775c:	b510      	push	{r4, lr}
 800775e:	4b0b      	ldr	r3, [pc, #44]	@ (800778c <global_stdio_init.part.0+0x30>)
 8007760:	4c0b      	ldr	r4, [pc, #44]	@ (8007790 <global_stdio_init.part.0+0x34>)
 8007762:	4a0c      	ldr	r2, [pc, #48]	@ (8007794 <global_stdio_init.part.0+0x38>)
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	4620      	mov	r0, r4
 8007768:	2200      	movs	r2, #0
 800776a:	2104      	movs	r1, #4
 800776c:	f7ff ff94 	bl	8007698 <std>
 8007770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007774:	2201      	movs	r2, #1
 8007776:	2109      	movs	r1, #9
 8007778:	f7ff ff8e 	bl	8007698 <std>
 800777c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007780:	2202      	movs	r2, #2
 8007782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007786:	2112      	movs	r1, #18
 8007788:	f7ff bf86 	b.w	8007698 <std>
 800778c:	200099b4 	.word	0x200099b4
 8007790:	2000987c 	.word	0x2000987c
 8007794:	08007705 	.word	0x08007705

08007798 <__sfp_lock_acquire>:
 8007798:	4801      	ldr	r0, [pc, #4]	@ (80077a0 <__sfp_lock_acquire+0x8>)
 800779a:	f000 b920 	b.w	80079de <__retarget_lock_acquire_recursive>
 800779e:	bf00      	nop
 80077a0:	200099bd 	.word	0x200099bd

080077a4 <__sfp_lock_release>:
 80077a4:	4801      	ldr	r0, [pc, #4]	@ (80077ac <__sfp_lock_release+0x8>)
 80077a6:	f000 b91b 	b.w	80079e0 <__retarget_lock_release_recursive>
 80077aa:	bf00      	nop
 80077ac:	200099bd 	.word	0x200099bd

080077b0 <__sinit>:
 80077b0:	b510      	push	{r4, lr}
 80077b2:	4604      	mov	r4, r0
 80077b4:	f7ff fff0 	bl	8007798 <__sfp_lock_acquire>
 80077b8:	6a23      	ldr	r3, [r4, #32]
 80077ba:	b11b      	cbz	r3, 80077c4 <__sinit+0x14>
 80077bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c0:	f7ff bff0 	b.w	80077a4 <__sfp_lock_release>
 80077c4:	4b04      	ldr	r3, [pc, #16]	@ (80077d8 <__sinit+0x28>)
 80077c6:	6223      	str	r3, [r4, #32]
 80077c8:	4b04      	ldr	r3, [pc, #16]	@ (80077dc <__sinit+0x2c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1f5      	bne.n	80077bc <__sinit+0xc>
 80077d0:	f7ff ffc4 	bl	800775c <global_stdio_init.part.0>
 80077d4:	e7f2      	b.n	80077bc <__sinit+0xc>
 80077d6:	bf00      	nop
 80077d8:	0800771d 	.word	0x0800771d
 80077dc:	200099b4 	.word	0x200099b4

080077e0 <_fwalk_sglue>:
 80077e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e4:	4607      	mov	r7, r0
 80077e6:	4688      	mov	r8, r1
 80077e8:	4614      	mov	r4, r2
 80077ea:	2600      	movs	r6, #0
 80077ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077f0:	f1b9 0901 	subs.w	r9, r9, #1
 80077f4:	d505      	bpl.n	8007802 <_fwalk_sglue+0x22>
 80077f6:	6824      	ldr	r4, [r4, #0]
 80077f8:	2c00      	cmp	r4, #0
 80077fa:	d1f7      	bne.n	80077ec <_fwalk_sglue+0xc>
 80077fc:	4630      	mov	r0, r6
 80077fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007802:	89ab      	ldrh	r3, [r5, #12]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d907      	bls.n	8007818 <_fwalk_sglue+0x38>
 8007808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800780c:	3301      	adds	r3, #1
 800780e:	d003      	beq.n	8007818 <_fwalk_sglue+0x38>
 8007810:	4629      	mov	r1, r5
 8007812:	4638      	mov	r0, r7
 8007814:	47c0      	blx	r8
 8007816:	4306      	orrs	r6, r0
 8007818:	3568      	adds	r5, #104	@ 0x68
 800781a:	e7e9      	b.n	80077f0 <_fwalk_sglue+0x10>

0800781c <siprintf>:
 800781c:	b40e      	push	{r1, r2, r3}
 800781e:	b500      	push	{lr}
 8007820:	b09c      	sub	sp, #112	@ 0x70
 8007822:	ab1d      	add	r3, sp, #116	@ 0x74
 8007824:	9002      	str	r0, [sp, #8]
 8007826:	9006      	str	r0, [sp, #24]
 8007828:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800782c:	4809      	ldr	r0, [pc, #36]	@ (8007854 <siprintf+0x38>)
 800782e:	9107      	str	r1, [sp, #28]
 8007830:	9104      	str	r1, [sp, #16]
 8007832:	4909      	ldr	r1, [pc, #36]	@ (8007858 <siprintf+0x3c>)
 8007834:	f853 2b04 	ldr.w	r2, [r3], #4
 8007838:	9105      	str	r1, [sp, #20]
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	a902      	add	r1, sp, #8
 8007840:	f001 fbfc 	bl	800903c <_svfiprintf_r>
 8007844:	9b02      	ldr	r3, [sp, #8]
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	b01c      	add	sp, #112	@ 0x70
 800784c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007850:	b003      	add	sp, #12
 8007852:	4770      	bx	lr
 8007854:	20000018 	.word	0x20000018
 8007858:	ffff0208 	.word	0xffff0208

0800785c <__sread>:
 800785c:	b510      	push	{r4, lr}
 800785e:	460c      	mov	r4, r1
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	f000 f86c 	bl	8007940 <_read_r>
 8007868:	2800      	cmp	r0, #0
 800786a:	bfab      	itete	ge
 800786c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800786e:	89a3      	ldrhlt	r3, [r4, #12]
 8007870:	181b      	addge	r3, r3, r0
 8007872:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007876:	bfac      	ite	ge
 8007878:	6563      	strge	r3, [r4, #84]	@ 0x54
 800787a:	81a3      	strhlt	r3, [r4, #12]
 800787c:	bd10      	pop	{r4, pc}

0800787e <__swrite>:
 800787e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	461f      	mov	r7, r3
 8007884:	898b      	ldrh	r3, [r1, #12]
 8007886:	05db      	lsls	r3, r3, #23
 8007888:	4605      	mov	r5, r0
 800788a:	460c      	mov	r4, r1
 800788c:	4616      	mov	r6, r2
 800788e:	d505      	bpl.n	800789c <__swrite+0x1e>
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	2302      	movs	r3, #2
 8007896:	2200      	movs	r2, #0
 8007898:	f000 f840 	bl	800791c <_lseek_r>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	4628      	mov	r0, r5
 80078ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b2:	f000 b857 	b.w	8007964 <_write_r>

080078b6 <__sseek>:
 80078b6:	b510      	push	{r4, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078be:	f000 f82d 	bl	800791c <_lseek_r>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	bf15      	itete	ne
 80078c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078d2:	81a3      	strheq	r3, [r4, #12]
 80078d4:	bf18      	it	ne
 80078d6:	81a3      	strhne	r3, [r4, #12]
 80078d8:	bd10      	pop	{r4, pc}

080078da <__sclose>:
 80078da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078de:	f000 b80d 	b.w	80078fc <_close_r>

080078e2 <memset>:
 80078e2:	4402      	add	r2, r0
 80078e4:	4603      	mov	r3, r0
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d100      	bne.n	80078ec <memset+0xa>
 80078ea:	4770      	bx	lr
 80078ec:	f803 1b01 	strb.w	r1, [r3], #1
 80078f0:	e7f9      	b.n	80078e6 <memset+0x4>
	...

080078f4 <_localeconv_r>:
 80078f4:	4800      	ldr	r0, [pc, #0]	@ (80078f8 <_localeconv_r+0x4>)
 80078f6:	4770      	bx	lr
 80078f8:	20000158 	.word	0x20000158

080078fc <_close_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d06      	ldr	r5, [pc, #24]	@ (8007918 <_close_r+0x1c>)
 8007900:	2300      	movs	r3, #0
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7fa f93c 	bl	8001b84 <_close>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_close_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_close_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	200099b8 	.word	0x200099b8

0800791c <_lseek_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d07      	ldr	r5, [pc, #28]	@ (800793c <_lseek_r+0x20>)
 8007920:	4604      	mov	r4, r0
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	2200      	movs	r2, #0
 8007928:	602a      	str	r2, [r5, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	f7fa f951 	bl	8001bd2 <_lseek>
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	d102      	bne.n	800793a <_lseek_r+0x1e>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	b103      	cbz	r3, 800793a <_lseek_r+0x1e>
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	200099b8 	.word	0x200099b8

08007940 <_read_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d07      	ldr	r5, [pc, #28]	@ (8007960 <_read_r+0x20>)
 8007944:	4604      	mov	r4, r0
 8007946:	4608      	mov	r0, r1
 8007948:	4611      	mov	r1, r2
 800794a:	2200      	movs	r2, #0
 800794c:	602a      	str	r2, [r5, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f7fa f8df 	bl	8001b12 <_read>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_read_r+0x1e>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_read_r+0x1e>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	200099b8 	.word	0x200099b8

08007964 <_write_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d07      	ldr	r5, [pc, #28]	@ (8007984 <_write_r+0x20>)
 8007968:	4604      	mov	r4, r0
 800796a:	4608      	mov	r0, r1
 800796c:	4611      	mov	r1, r2
 800796e:	2200      	movs	r2, #0
 8007970:	602a      	str	r2, [r5, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	f7fa f8ea 	bl	8001b4c <_write>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_write_r+0x1e>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_write_r+0x1e>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	200099b8 	.word	0x200099b8

08007988 <__errno>:
 8007988:	4b01      	ldr	r3, [pc, #4]	@ (8007990 <__errno+0x8>)
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20000018 	.word	0x20000018

08007994 <__libc_init_array>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	4d0d      	ldr	r5, [pc, #52]	@ (80079cc <__libc_init_array+0x38>)
 8007998:	4c0d      	ldr	r4, [pc, #52]	@ (80079d0 <__libc_init_array+0x3c>)
 800799a:	1b64      	subs	r4, r4, r5
 800799c:	10a4      	asrs	r4, r4, #2
 800799e:	2600      	movs	r6, #0
 80079a0:	42a6      	cmp	r6, r4
 80079a2:	d109      	bne.n	80079b8 <__libc_init_array+0x24>
 80079a4:	4d0b      	ldr	r5, [pc, #44]	@ (80079d4 <__libc_init_array+0x40>)
 80079a6:	4c0c      	ldr	r4, [pc, #48]	@ (80079d8 <__libc_init_array+0x44>)
 80079a8:	f002 f888 	bl	8009abc <_init>
 80079ac:	1b64      	subs	r4, r4, r5
 80079ae:	10a4      	asrs	r4, r4, #2
 80079b0:	2600      	movs	r6, #0
 80079b2:	42a6      	cmp	r6, r4
 80079b4:	d105      	bne.n	80079c2 <__libc_init_array+0x2e>
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079bc:	4798      	blx	r3
 80079be:	3601      	adds	r6, #1
 80079c0:	e7ee      	b.n	80079a0 <__libc_init_array+0xc>
 80079c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c6:	4798      	blx	r3
 80079c8:	3601      	adds	r6, #1
 80079ca:	e7f2      	b.n	80079b2 <__libc_init_array+0x1e>
 80079cc:	0801d300 	.word	0x0801d300
 80079d0:	0801d300 	.word	0x0801d300
 80079d4:	0801d300 	.word	0x0801d300
 80079d8:	0801d304 	.word	0x0801d304

080079dc <__retarget_lock_init_recursive>:
 80079dc:	4770      	bx	lr

080079de <__retarget_lock_acquire_recursive>:
 80079de:	4770      	bx	lr

080079e0 <__retarget_lock_release_recursive>:
 80079e0:	4770      	bx	lr

080079e2 <quorem>:
 80079e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e6:	6903      	ldr	r3, [r0, #16]
 80079e8:	690c      	ldr	r4, [r1, #16]
 80079ea:	42a3      	cmp	r3, r4
 80079ec:	4607      	mov	r7, r0
 80079ee:	db7e      	blt.n	8007aee <quorem+0x10c>
 80079f0:	3c01      	subs	r4, #1
 80079f2:	f101 0814 	add.w	r8, r1, #20
 80079f6:	00a3      	lsls	r3, r4, #2
 80079f8:	f100 0514 	add.w	r5, r0, #20
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a14:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a18:	d32e      	bcc.n	8007a78 <quorem+0x96>
 8007a1a:	f04f 0a00 	mov.w	sl, #0
 8007a1e:	46c4      	mov	ip, r8
 8007a20:	46ae      	mov	lr, r5
 8007a22:	46d3      	mov	fp, sl
 8007a24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a28:	b298      	uxth	r0, r3
 8007a2a:	fb06 a000 	mla	r0, r6, r0, sl
 8007a2e:	0c02      	lsrs	r2, r0, #16
 8007a30:	0c1b      	lsrs	r3, r3, #16
 8007a32:	fb06 2303 	mla	r3, r6, r3, r2
 8007a36:	f8de 2000 	ldr.w	r2, [lr]
 8007a3a:	b280      	uxth	r0, r0
 8007a3c:	b292      	uxth	r2, r2
 8007a3e:	1a12      	subs	r2, r2, r0
 8007a40:	445a      	add	r2, fp
 8007a42:	f8de 0000 	ldr.w	r0, [lr]
 8007a46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a54:	b292      	uxth	r2, r2
 8007a56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a5a:	45e1      	cmp	r9, ip
 8007a5c:	f84e 2b04 	str.w	r2, [lr], #4
 8007a60:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a64:	d2de      	bcs.n	8007a24 <quorem+0x42>
 8007a66:	9b00      	ldr	r3, [sp, #0]
 8007a68:	58eb      	ldr	r3, [r5, r3]
 8007a6a:	b92b      	cbnz	r3, 8007a78 <quorem+0x96>
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	3b04      	subs	r3, #4
 8007a70:	429d      	cmp	r5, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	d32f      	bcc.n	8007ad6 <quorem+0xf4>
 8007a76:	613c      	str	r4, [r7, #16]
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f001 f97b 	bl	8008d74 <__mcmp>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	db25      	blt.n	8007ace <quorem+0xec>
 8007a82:	4629      	mov	r1, r5
 8007a84:	2000      	movs	r0, #0
 8007a86:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a8a:	f8d1 c000 	ldr.w	ip, [r1]
 8007a8e:	fa1f fe82 	uxth.w	lr, r2
 8007a92:	fa1f f38c 	uxth.w	r3, ip
 8007a96:	eba3 030e 	sub.w	r3, r3, lr
 8007a9a:	4403      	add	r3, r0
 8007a9c:	0c12      	lsrs	r2, r2, #16
 8007a9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007aa2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aac:	45c1      	cmp	r9, r8
 8007aae:	f841 3b04 	str.w	r3, [r1], #4
 8007ab2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ab6:	d2e6      	bcs.n	8007a86 <quorem+0xa4>
 8007ab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007abc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ac0:	b922      	cbnz	r2, 8007acc <quorem+0xea>
 8007ac2:	3b04      	subs	r3, #4
 8007ac4:	429d      	cmp	r5, r3
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	d30b      	bcc.n	8007ae2 <quorem+0x100>
 8007aca:	613c      	str	r4, [r7, #16]
 8007acc:	3601      	adds	r6, #1
 8007ace:	4630      	mov	r0, r6
 8007ad0:	b003      	add	sp, #12
 8007ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad6:	6812      	ldr	r2, [r2, #0]
 8007ad8:	3b04      	subs	r3, #4
 8007ada:	2a00      	cmp	r2, #0
 8007adc:	d1cb      	bne.n	8007a76 <quorem+0x94>
 8007ade:	3c01      	subs	r4, #1
 8007ae0:	e7c6      	b.n	8007a70 <quorem+0x8e>
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	3b04      	subs	r3, #4
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	d1ef      	bne.n	8007aca <quorem+0xe8>
 8007aea:	3c01      	subs	r4, #1
 8007aec:	e7ea      	b.n	8007ac4 <quorem+0xe2>
 8007aee:	2000      	movs	r0, #0
 8007af0:	e7ee      	b.n	8007ad0 <quorem+0xee>
 8007af2:	0000      	movs	r0, r0
 8007af4:	0000      	movs	r0, r0
	...

08007af8 <_dtoa_r>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	69c7      	ldr	r7, [r0, #28]
 8007afe:	b099      	sub	sp, #100	@ 0x64
 8007b00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b04:	ec55 4b10 	vmov	r4, r5, d0
 8007b08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007b0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b0c:	4683      	mov	fp, r0
 8007b0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b12:	b97f      	cbnz	r7, 8007b34 <_dtoa_r+0x3c>
 8007b14:	2010      	movs	r0, #16
 8007b16:	f000 fdfd 	bl	8008714 <malloc>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b20:	b920      	cbnz	r0, 8007b2c <_dtoa_r+0x34>
 8007b22:	4ba7      	ldr	r3, [pc, #668]	@ (8007dc0 <_dtoa_r+0x2c8>)
 8007b24:	21ef      	movs	r1, #239	@ 0xef
 8007b26:	48a7      	ldr	r0, [pc, #668]	@ (8007dc4 <_dtoa_r+0x2cc>)
 8007b28:	f001 fc68 	bl	80093fc <__assert_func>
 8007b2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b30:	6007      	str	r7, [r0, #0]
 8007b32:	60c7      	str	r7, [r0, #12]
 8007b34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b38:	6819      	ldr	r1, [r3, #0]
 8007b3a:	b159      	cbz	r1, 8007b54 <_dtoa_r+0x5c>
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	604a      	str	r2, [r1, #4]
 8007b40:	2301      	movs	r3, #1
 8007b42:	4093      	lsls	r3, r2
 8007b44:	608b      	str	r3, [r1, #8]
 8007b46:	4658      	mov	r0, fp
 8007b48:	f000 feda 	bl	8008900 <_Bfree>
 8007b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	1e2b      	subs	r3, r5, #0
 8007b56:	bfb9      	ittee	lt
 8007b58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b5c:	9303      	strlt	r3, [sp, #12]
 8007b5e:	2300      	movge	r3, #0
 8007b60:	6033      	strge	r3, [r6, #0]
 8007b62:	9f03      	ldr	r7, [sp, #12]
 8007b64:	4b98      	ldr	r3, [pc, #608]	@ (8007dc8 <_dtoa_r+0x2d0>)
 8007b66:	bfbc      	itt	lt
 8007b68:	2201      	movlt	r2, #1
 8007b6a:	6032      	strlt	r2, [r6, #0]
 8007b6c:	43bb      	bics	r3, r7
 8007b6e:	d112      	bne.n	8007b96 <_dtoa_r+0x9e>
 8007b70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b7c:	4323      	orrs	r3, r4
 8007b7e:	f000 854d 	beq.w	800861c <_dtoa_r+0xb24>
 8007b82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007ddc <_dtoa_r+0x2e4>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 854f 	beq.w	800862c <_dtoa_r+0xb34>
 8007b8e:	f10a 0303 	add.w	r3, sl, #3
 8007b92:	f000 bd49 	b.w	8008628 <_dtoa_r+0xb30>
 8007b96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	ec51 0b17 	vmov	r0, r1, d7
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007ba6:	f7f9 f80f 	bl	8000bc8 <__aeabi_dcmpeq>
 8007baa:	4680      	mov	r8, r0
 8007bac:	b158      	cbz	r0, 8007bc6 <_dtoa_r+0xce>
 8007bae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bb6:	b113      	cbz	r3, 8007bbe <_dtoa_r+0xc6>
 8007bb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007bba:	4b84      	ldr	r3, [pc, #528]	@ (8007dcc <_dtoa_r+0x2d4>)
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007de0 <_dtoa_r+0x2e8>
 8007bc2:	f000 bd33 	b.w	800862c <_dtoa_r+0xb34>
 8007bc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007bca:	aa16      	add	r2, sp, #88	@ 0x58
 8007bcc:	a917      	add	r1, sp, #92	@ 0x5c
 8007bce:	4658      	mov	r0, fp
 8007bd0:	f001 f980 	bl	8008ed4 <__d2b>
 8007bd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007bd8:	4681      	mov	r9, r0
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	d077      	beq.n	8007cce <_dtoa_r+0x1d6>
 8007bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007be0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007bf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007bf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	4b74      	ldr	r3, [pc, #464]	@ (8007dd0 <_dtoa_r+0x2d8>)
 8007bfe:	f7f8 fbc3 	bl	8000388 <__aeabi_dsub>
 8007c02:	a369      	add	r3, pc, #420	@ (adr r3, 8007da8 <_dtoa_r+0x2b0>)
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f7f8 fd76 	bl	80006f8 <__aeabi_dmul>
 8007c0c:	a368      	add	r3, pc, #416	@ (adr r3, 8007db0 <_dtoa_r+0x2b8>)
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f7f8 fbbb 	bl	800038c <__adddf3>
 8007c16:	4604      	mov	r4, r0
 8007c18:	4630      	mov	r0, r6
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	f7f8 fd02 	bl	8000624 <__aeabi_i2d>
 8007c20:	a365      	add	r3, pc, #404	@ (adr r3, 8007db8 <_dtoa_r+0x2c0>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fd67 	bl	80006f8 <__aeabi_dmul>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	f7f8 fbab 	bl	800038c <__adddf3>
 8007c36:	4604      	mov	r4, r0
 8007c38:	460d      	mov	r5, r1
 8007c3a:	f7f9 f80d 	bl	8000c58 <__aeabi_d2iz>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4607      	mov	r7, r0
 8007c42:	2300      	movs	r3, #0
 8007c44:	4620      	mov	r0, r4
 8007c46:	4629      	mov	r1, r5
 8007c48:	f7f8 ffc8 	bl	8000bdc <__aeabi_dcmplt>
 8007c4c:	b140      	cbz	r0, 8007c60 <_dtoa_r+0x168>
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f7f8 fce8 	bl	8000624 <__aeabi_i2d>
 8007c54:	4622      	mov	r2, r4
 8007c56:	462b      	mov	r3, r5
 8007c58:	f7f8 ffb6 	bl	8000bc8 <__aeabi_dcmpeq>
 8007c5c:	b900      	cbnz	r0, 8007c60 <_dtoa_r+0x168>
 8007c5e:	3f01      	subs	r7, #1
 8007c60:	2f16      	cmp	r7, #22
 8007c62:	d851      	bhi.n	8007d08 <_dtoa_r+0x210>
 8007c64:	4b5b      	ldr	r3, [pc, #364]	@ (8007dd4 <_dtoa_r+0x2dc>)
 8007c66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c72:	f7f8 ffb3 	bl	8000bdc <__aeabi_dcmplt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d048      	beq.n	8007d0c <_dtoa_r+0x214>
 8007c7a:	3f01      	subs	r7, #1
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c82:	1b9b      	subs	r3, r3, r6
 8007c84:	1e5a      	subs	r2, r3, #1
 8007c86:	bf44      	itt	mi
 8007c88:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c8c:	2300      	movmi	r3, #0
 8007c8e:	9208      	str	r2, [sp, #32]
 8007c90:	bf54      	ite	pl
 8007c92:	f04f 0800 	movpl.w	r8, #0
 8007c96:	9308      	strmi	r3, [sp, #32]
 8007c98:	2f00      	cmp	r7, #0
 8007c9a:	db39      	blt.n	8007d10 <_dtoa_r+0x218>
 8007c9c:	9b08      	ldr	r3, [sp, #32]
 8007c9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ca0:	443b      	add	r3, r7
 8007ca2:	9308      	str	r3, [sp, #32]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007caa:	2b09      	cmp	r3, #9
 8007cac:	d864      	bhi.n	8007d78 <_dtoa_r+0x280>
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	bfc4      	itt	gt
 8007cb2:	3b04      	subgt	r3, #4
 8007cb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb8:	f1a3 0302 	sub.w	r3, r3, #2
 8007cbc:	bfcc      	ite	gt
 8007cbe:	2400      	movgt	r4, #0
 8007cc0:	2401      	movle	r4, #1
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d863      	bhi.n	8007d8e <_dtoa_r+0x296>
 8007cc6:	e8df f003 	tbb	[pc, r3]
 8007cca:	372a      	.short	0x372a
 8007ccc:	5535      	.short	0x5535
 8007cce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007cd2:	441e      	add	r6, r3
 8007cd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	bfc1      	itttt	gt
 8007cdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ce0:	409f      	lslgt	r7, r3
 8007ce2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ce6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007cea:	bfd6      	itet	le
 8007cec:	f1c3 0320 	rsble	r3, r3, #32
 8007cf0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007cf4:	fa04 f003 	lslle.w	r0, r4, r3
 8007cf8:	f7f8 fc84 	bl	8000604 <__aeabi_ui2d>
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d02:	3e01      	subs	r6, #1
 8007d04:	9214      	str	r2, [sp, #80]	@ 0x50
 8007d06:	e777      	b.n	8007bf8 <_dtoa_r+0x100>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e7b8      	b.n	8007c7e <_dtoa_r+0x186>
 8007d0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007d0e:	e7b7      	b.n	8007c80 <_dtoa_r+0x188>
 8007d10:	427b      	negs	r3, r7
 8007d12:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d14:	2300      	movs	r3, #0
 8007d16:	eba8 0807 	sub.w	r8, r8, r7
 8007d1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d1c:	e7c4      	b.n	8007ca8 <_dtoa_r+0x1b0>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	dc35      	bgt.n	8007d94 <_dtoa_r+0x29c>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	9307      	str	r3, [sp, #28]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d32:	e00b      	b.n	8007d4c <_dtoa_r+0x254>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e7f3      	b.n	8007d20 <_dtoa_r+0x228>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d3e:	18fb      	adds	r3, r7, r3
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	9307      	str	r3, [sp, #28]
 8007d48:	bfb8      	it	lt
 8007d4a:	2301      	movlt	r3, #1
 8007d4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d50:	2100      	movs	r1, #0
 8007d52:	2204      	movs	r2, #4
 8007d54:	f102 0514 	add.w	r5, r2, #20
 8007d58:	429d      	cmp	r5, r3
 8007d5a:	d91f      	bls.n	8007d9c <_dtoa_r+0x2a4>
 8007d5c:	6041      	str	r1, [r0, #4]
 8007d5e:	4658      	mov	r0, fp
 8007d60:	f000 fd8e 	bl	8008880 <_Balloc>
 8007d64:	4682      	mov	sl, r0
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d13c      	bne.n	8007de4 <_dtoa_r+0x2ec>
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd8 <_dtoa_r+0x2e0>)
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d72:	e6d8      	b.n	8007b26 <_dtoa_r+0x2e>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e7e0      	b.n	8007d3a <_dtoa_r+0x242>
 8007d78:	2401      	movs	r4, #1
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2312      	movs	r3, #18
 8007d8c:	e7d0      	b.n	8007d30 <_dtoa_r+0x238>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d92:	e7f5      	b.n	8007d80 <_dtoa_r+0x288>
 8007d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	e7d7      	b.n	8007d4c <_dtoa_r+0x254>
 8007d9c:	3101      	adds	r1, #1
 8007d9e:	0052      	lsls	r2, r2, #1
 8007da0:	e7d8      	b.n	8007d54 <_dtoa_r+0x25c>
 8007da2:	bf00      	nop
 8007da4:	f3af 8000 	nop.w
 8007da8:	636f4361 	.word	0x636f4361
 8007dac:	3fd287a7 	.word	0x3fd287a7
 8007db0:	8b60c8b3 	.word	0x8b60c8b3
 8007db4:	3fc68a28 	.word	0x3fc68a28
 8007db8:	509f79fb 	.word	0x509f79fb
 8007dbc:	3fd34413 	.word	0x3fd34413
 8007dc0:	0801cfc5 	.word	0x0801cfc5
 8007dc4:	0801cfdc 	.word	0x0801cfdc
 8007dc8:	7ff00000 	.word	0x7ff00000
 8007dcc:	0801cf95 	.word	0x0801cf95
 8007dd0:	3ff80000 	.word	0x3ff80000
 8007dd4:	0801d0d8 	.word	0x0801d0d8
 8007dd8:	0801d034 	.word	0x0801d034
 8007ddc:	0801cfc1 	.word	0x0801cfc1
 8007de0:	0801cf94 	.word	0x0801cf94
 8007de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007de8:	6018      	str	r0, [r3, #0]
 8007dea:	9b07      	ldr	r3, [sp, #28]
 8007dec:	2b0e      	cmp	r3, #14
 8007dee:	f200 80a4 	bhi.w	8007f3a <_dtoa_r+0x442>
 8007df2:	2c00      	cmp	r4, #0
 8007df4:	f000 80a1 	beq.w	8007f3a <_dtoa_r+0x442>
 8007df8:	2f00      	cmp	r7, #0
 8007dfa:	dd33      	ble.n	8007e64 <_dtoa_r+0x36c>
 8007dfc:	4bad      	ldr	r3, [pc, #692]	@ (80080b4 <_dtoa_r+0x5bc>)
 8007dfe:	f007 020f 	and.w	r2, r7, #15
 8007e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e06:	ed93 7b00 	vldr	d7, [r3]
 8007e0a:	05f8      	lsls	r0, r7, #23
 8007e0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e14:	d516      	bpl.n	8007e44 <_dtoa_r+0x34c>
 8007e16:	4ba8      	ldr	r3, [pc, #672]	@ (80080b8 <_dtoa_r+0x5c0>)
 8007e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e20:	f7f8 fd94 	bl	800094c <__aeabi_ddiv>
 8007e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e28:	f004 040f 	and.w	r4, r4, #15
 8007e2c:	2603      	movs	r6, #3
 8007e2e:	4da2      	ldr	r5, [pc, #648]	@ (80080b8 <_dtoa_r+0x5c0>)
 8007e30:	b954      	cbnz	r4, 8007e48 <_dtoa_r+0x350>
 8007e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e3a:	f7f8 fd87 	bl	800094c <__aeabi_ddiv>
 8007e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e42:	e028      	b.n	8007e96 <_dtoa_r+0x39e>
 8007e44:	2602      	movs	r6, #2
 8007e46:	e7f2      	b.n	8007e2e <_dtoa_r+0x336>
 8007e48:	07e1      	lsls	r1, r4, #31
 8007e4a:	d508      	bpl.n	8007e5e <_dtoa_r+0x366>
 8007e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e54:	f7f8 fc50 	bl	80006f8 <__aeabi_dmul>
 8007e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e5c:	3601      	adds	r6, #1
 8007e5e:	1064      	asrs	r4, r4, #1
 8007e60:	3508      	adds	r5, #8
 8007e62:	e7e5      	b.n	8007e30 <_dtoa_r+0x338>
 8007e64:	f000 80d2 	beq.w	800800c <_dtoa_r+0x514>
 8007e68:	427c      	negs	r4, r7
 8007e6a:	4b92      	ldr	r3, [pc, #584]	@ (80080b4 <_dtoa_r+0x5bc>)
 8007e6c:	4d92      	ldr	r5, [pc, #584]	@ (80080b8 <_dtoa_r+0x5c0>)
 8007e6e:	f004 020f 	and.w	r2, r4, #15
 8007e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e7e:	f7f8 fc3b 	bl	80006f8 <__aeabi_dmul>
 8007e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e86:	1124      	asrs	r4, r4, #4
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2602      	movs	r6, #2
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	f040 80b2 	bne.w	8007ff6 <_dtoa_r+0x4fe>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d3      	bne.n	8007e3e <_dtoa_r+0x346>
 8007e96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 80b7 	beq.w	8008010 <_dtoa_r+0x518>
 8007ea2:	4b86      	ldr	r3, [pc, #536]	@ (80080bc <_dtoa_r+0x5c4>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7f8 fe97 	bl	8000bdc <__aeabi_dcmplt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f000 80ae 	beq.w	8008010 <_dtoa_r+0x518>
 8007eb4:	9b07      	ldr	r3, [sp, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80aa 	beq.w	8008010 <_dtoa_r+0x518>
 8007ebc:	9b00      	ldr	r3, [sp, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd37      	ble.n	8007f32 <_dtoa_r+0x43a>
 8007ec2:	1e7b      	subs	r3, r7, #1
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	4b7d      	ldr	r3, [pc, #500]	@ (80080c0 <_dtoa_r+0x5c8>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4629      	mov	r1, r5
 8007ece:	f7f8 fc13 	bl	80006f8 <__aeabi_dmul>
 8007ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed6:	9c00      	ldr	r4, [sp, #0]
 8007ed8:	3601      	adds	r6, #1
 8007eda:	4630      	mov	r0, r6
 8007edc:	f7f8 fba2 	bl	8000624 <__aeabi_i2d>
 8007ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ee4:	f7f8 fc08 	bl	80006f8 <__aeabi_dmul>
 8007ee8:	4b76      	ldr	r3, [pc, #472]	@ (80080c4 <_dtoa_r+0x5cc>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	f7f8 fa4e 	bl	800038c <__adddf3>
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ef6:	2c00      	cmp	r4, #0
 8007ef8:	f040 808d 	bne.w	8008016 <_dtoa_r+0x51e>
 8007efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f00:	4b71      	ldr	r3, [pc, #452]	@ (80080c8 <_dtoa_r+0x5d0>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	f7f8 fa40 	bl	8000388 <__aeabi_dsub>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f10:	462a      	mov	r2, r5
 8007f12:	4633      	mov	r3, r6
 8007f14:	f7f8 fe80 	bl	8000c18 <__aeabi_dcmpgt>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	f040 828b 	bne.w	8008434 <_dtoa_r+0x93c>
 8007f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f22:	462a      	mov	r2, r5
 8007f24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f28:	f7f8 fe58 	bl	8000bdc <__aeabi_dcmplt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f040 8128 	bne.w	8008182 <_dtoa_r+0x68a>
 8007f32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f2c0 815a 	blt.w	80081f6 <_dtoa_r+0x6fe>
 8007f42:	2f0e      	cmp	r7, #14
 8007f44:	f300 8157 	bgt.w	80081f6 <_dtoa_r+0x6fe>
 8007f48:	4b5a      	ldr	r3, [pc, #360]	@ (80080b4 <_dtoa_r+0x5bc>)
 8007f4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f4e:	ed93 7b00 	vldr	d7, [r3]
 8007f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	ed8d 7b00 	vstr	d7, [sp]
 8007f5a:	da03      	bge.n	8007f64 <_dtoa_r+0x46c>
 8007f5c:	9b07      	ldr	r3, [sp, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f340 8101 	ble.w	8008166 <_dtoa_r+0x66e>
 8007f64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f68:	4656      	mov	r6, sl
 8007f6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 fceb 	bl	800094c <__aeabi_ddiv>
 8007f76:	f7f8 fe6f 	bl	8000c58 <__aeabi_d2iz>
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	f7f8 fb52 	bl	8000624 <__aeabi_i2d>
 8007f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f84:	f7f8 fbb8 	bl	80006f8 <__aeabi_dmul>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f94:	f7f8 f9f8 	bl	8000388 <__aeabi_dsub>
 8007f98:	f806 4b01 	strb.w	r4, [r6], #1
 8007f9c:	9d07      	ldr	r5, [sp, #28]
 8007f9e:	eba6 040a 	sub.w	r4, r6, sl
 8007fa2:	42a5      	cmp	r5, r4
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	f040 8117 	bne.w	80081da <_dtoa_r+0x6e2>
 8007fac:	f7f8 f9ee 	bl	800038c <__adddf3>
 8007fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	460d      	mov	r5, r1
 8007fb8:	f7f8 fe2e 	bl	8000c18 <__aeabi_dcmpgt>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	f040 80f9 	bne.w	80081b4 <_dtoa_r+0x6bc>
 8007fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	4629      	mov	r1, r5
 8007fca:	f7f8 fdfd 	bl	8000bc8 <__aeabi_dcmpeq>
 8007fce:	b118      	cbz	r0, 8007fd8 <_dtoa_r+0x4e0>
 8007fd0:	f018 0f01 	tst.w	r8, #1
 8007fd4:	f040 80ee 	bne.w	80081b4 <_dtoa_r+0x6bc>
 8007fd8:	4649      	mov	r1, r9
 8007fda:	4658      	mov	r0, fp
 8007fdc:	f000 fc90 	bl	8008900 <_Bfree>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	7033      	strb	r3, [r6, #0]
 8007fe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fe6:	3701      	adds	r7, #1
 8007fe8:	601f      	str	r7, [r3, #0]
 8007fea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 831d 	beq.w	800862c <_dtoa_r+0xb34>
 8007ff2:	601e      	str	r6, [r3, #0]
 8007ff4:	e31a      	b.n	800862c <_dtoa_r+0xb34>
 8007ff6:	07e2      	lsls	r2, r4, #31
 8007ff8:	d505      	bpl.n	8008006 <_dtoa_r+0x50e>
 8007ffa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ffe:	f7f8 fb7b 	bl	80006f8 <__aeabi_dmul>
 8008002:	3601      	adds	r6, #1
 8008004:	2301      	movs	r3, #1
 8008006:	1064      	asrs	r4, r4, #1
 8008008:	3508      	adds	r5, #8
 800800a:	e73f      	b.n	8007e8c <_dtoa_r+0x394>
 800800c:	2602      	movs	r6, #2
 800800e:	e742      	b.n	8007e96 <_dtoa_r+0x39e>
 8008010:	9c07      	ldr	r4, [sp, #28]
 8008012:	9704      	str	r7, [sp, #16]
 8008014:	e761      	b.n	8007eda <_dtoa_r+0x3e2>
 8008016:	4b27      	ldr	r3, [pc, #156]	@ (80080b4 <_dtoa_r+0x5bc>)
 8008018:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800801a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800801e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008022:	4454      	add	r4, sl
 8008024:	2900      	cmp	r1, #0
 8008026:	d053      	beq.n	80080d0 <_dtoa_r+0x5d8>
 8008028:	4928      	ldr	r1, [pc, #160]	@ (80080cc <_dtoa_r+0x5d4>)
 800802a:	2000      	movs	r0, #0
 800802c:	f7f8 fc8e 	bl	800094c <__aeabi_ddiv>
 8008030:	4633      	mov	r3, r6
 8008032:	462a      	mov	r2, r5
 8008034:	f7f8 f9a8 	bl	8000388 <__aeabi_dsub>
 8008038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800803c:	4656      	mov	r6, sl
 800803e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008042:	f7f8 fe09 	bl	8000c58 <__aeabi_d2iz>
 8008046:	4605      	mov	r5, r0
 8008048:	f7f8 faec 	bl	8000624 <__aeabi_i2d>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008054:	f7f8 f998 	bl	8000388 <__aeabi_dsub>
 8008058:	3530      	adds	r5, #48	@ 0x30
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008062:	f806 5b01 	strb.w	r5, [r6], #1
 8008066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800806a:	f7f8 fdb7 	bl	8000bdc <__aeabi_dcmplt>
 800806e:	2800      	cmp	r0, #0
 8008070:	d171      	bne.n	8008156 <_dtoa_r+0x65e>
 8008072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008076:	4911      	ldr	r1, [pc, #68]	@ (80080bc <_dtoa_r+0x5c4>)
 8008078:	2000      	movs	r0, #0
 800807a:	f7f8 f985 	bl	8000388 <__aeabi_dsub>
 800807e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008082:	f7f8 fdab 	bl	8000bdc <__aeabi_dcmplt>
 8008086:	2800      	cmp	r0, #0
 8008088:	f040 8095 	bne.w	80081b6 <_dtoa_r+0x6be>
 800808c:	42a6      	cmp	r6, r4
 800808e:	f43f af50 	beq.w	8007f32 <_dtoa_r+0x43a>
 8008092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008096:	4b0a      	ldr	r3, [pc, #40]	@ (80080c0 <_dtoa_r+0x5c8>)
 8008098:	2200      	movs	r2, #0
 800809a:	f7f8 fb2d 	bl	80006f8 <__aeabi_dmul>
 800809e:	4b08      	ldr	r3, [pc, #32]	@ (80080c0 <_dtoa_r+0x5c8>)
 80080a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080a4:	2200      	movs	r2, #0
 80080a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080aa:	f7f8 fb25 	bl	80006f8 <__aeabi_dmul>
 80080ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b2:	e7c4      	b.n	800803e <_dtoa_r+0x546>
 80080b4:	0801d0d8 	.word	0x0801d0d8
 80080b8:	0801d0b0 	.word	0x0801d0b0
 80080bc:	3ff00000 	.word	0x3ff00000
 80080c0:	40240000 	.word	0x40240000
 80080c4:	401c0000 	.word	0x401c0000
 80080c8:	40140000 	.word	0x40140000
 80080cc:	3fe00000 	.word	0x3fe00000
 80080d0:	4631      	mov	r1, r6
 80080d2:	4628      	mov	r0, r5
 80080d4:	f7f8 fb10 	bl	80006f8 <__aeabi_dmul>
 80080d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80080de:	4656      	mov	r6, sl
 80080e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e4:	f7f8 fdb8 	bl	8000c58 <__aeabi_d2iz>
 80080e8:	4605      	mov	r5, r0
 80080ea:	f7f8 fa9b 	bl	8000624 <__aeabi_i2d>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f6:	f7f8 f947 	bl	8000388 <__aeabi_dsub>
 80080fa:	3530      	adds	r5, #48	@ 0x30
 80080fc:	f806 5b01 	strb.w	r5, [r6], #1
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	42a6      	cmp	r6, r4
 8008106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800810a:	f04f 0200 	mov.w	r2, #0
 800810e:	d124      	bne.n	800815a <_dtoa_r+0x662>
 8008110:	4bac      	ldr	r3, [pc, #688]	@ (80083c4 <_dtoa_r+0x8cc>)
 8008112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008116:	f7f8 f939 	bl	800038c <__adddf3>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008122:	f7f8 fd79 	bl	8000c18 <__aeabi_dcmpgt>
 8008126:	2800      	cmp	r0, #0
 8008128:	d145      	bne.n	80081b6 <_dtoa_r+0x6be>
 800812a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800812e:	49a5      	ldr	r1, [pc, #660]	@ (80083c4 <_dtoa_r+0x8cc>)
 8008130:	2000      	movs	r0, #0
 8008132:	f7f8 f929 	bl	8000388 <__aeabi_dsub>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800813e:	f7f8 fd4d 	bl	8000bdc <__aeabi_dcmplt>
 8008142:	2800      	cmp	r0, #0
 8008144:	f43f aef5 	beq.w	8007f32 <_dtoa_r+0x43a>
 8008148:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800814a:	1e73      	subs	r3, r6, #1
 800814c:	9315      	str	r3, [sp, #84]	@ 0x54
 800814e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008152:	2b30      	cmp	r3, #48	@ 0x30
 8008154:	d0f8      	beq.n	8008148 <_dtoa_r+0x650>
 8008156:	9f04      	ldr	r7, [sp, #16]
 8008158:	e73e      	b.n	8007fd8 <_dtoa_r+0x4e0>
 800815a:	4b9b      	ldr	r3, [pc, #620]	@ (80083c8 <_dtoa_r+0x8d0>)
 800815c:	f7f8 facc 	bl	80006f8 <__aeabi_dmul>
 8008160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008164:	e7bc      	b.n	80080e0 <_dtoa_r+0x5e8>
 8008166:	d10c      	bne.n	8008182 <_dtoa_r+0x68a>
 8008168:	4b98      	ldr	r3, [pc, #608]	@ (80083cc <_dtoa_r+0x8d4>)
 800816a:	2200      	movs	r2, #0
 800816c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008170:	f7f8 fac2 	bl	80006f8 <__aeabi_dmul>
 8008174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008178:	f7f8 fd44 	bl	8000c04 <__aeabi_dcmpge>
 800817c:	2800      	cmp	r0, #0
 800817e:	f000 8157 	beq.w	8008430 <_dtoa_r+0x938>
 8008182:	2400      	movs	r4, #0
 8008184:	4625      	mov	r5, r4
 8008186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008188:	43db      	mvns	r3, r3
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	4656      	mov	r6, sl
 800818e:	2700      	movs	r7, #0
 8008190:	4621      	mov	r1, r4
 8008192:	4658      	mov	r0, fp
 8008194:	f000 fbb4 	bl	8008900 <_Bfree>
 8008198:	2d00      	cmp	r5, #0
 800819a:	d0dc      	beq.n	8008156 <_dtoa_r+0x65e>
 800819c:	b12f      	cbz	r7, 80081aa <_dtoa_r+0x6b2>
 800819e:	42af      	cmp	r7, r5
 80081a0:	d003      	beq.n	80081aa <_dtoa_r+0x6b2>
 80081a2:	4639      	mov	r1, r7
 80081a4:	4658      	mov	r0, fp
 80081a6:	f000 fbab 	bl	8008900 <_Bfree>
 80081aa:	4629      	mov	r1, r5
 80081ac:	4658      	mov	r0, fp
 80081ae:	f000 fba7 	bl	8008900 <_Bfree>
 80081b2:	e7d0      	b.n	8008156 <_dtoa_r+0x65e>
 80081b4:	9704      	str	r7, [sp, #16]
 80081b6:	4633      	mov	r3, r6
 80081b8:	461e      	mov	r6, r3
 80081ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081be:	2a39      	cmp	r2, #57	@ 0x39
 80081c0:	d107      	bne.n	80081d2 <_dtoa_r+0x6da>
 80081c2:	459a      	cmp	sl, r3
 80081c4:	d1f8      	bne.n	80081b8 <_dtoa_r+0x6c0>
 80081c6:	9a04      	ldr	r2, [sp, #16]
 80081c8:	3201      	adds	r2, #1
 80081ca:	9204      	str	r2, [sp, #16]
 80081cc:	2230      	movs	r2, #48	@ 0x30
 80081ce:	f88a 2000 	strb.w	r2, [sl]
 80081d2:	781a      	ldrb	r2, [r3, #0]
 80081d4:	3201      	adds	r2, #1
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	e7bd      	b.n	8008156 <_dtoa_r+0x65e>
 80081da:	4b7b      	ldr	r3, [pc, #492]	@ (80083c8 <_dtoa_r+0x8d0>)
 80081dc:	2200      	movs	r2, #0
 80081de:	f7f8 fa8b 	bl	80006f8 <__aeabi_dmul>
 80081e2:	2200      	movs	r2, #0
 80081e4:	2300      	movs	r3, #0
 80081e6:	4604      	mov	r4, r0
 80081e8:	460d      	mov	r5, r1
 80081ea:	f7f8 fced 	bl	8000bc8 <__aeabi_dcmpeq>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f43f aebb 	beq.w	8007f6a <_dtoa_r+0x472>
 80081f4:	e6f0      	b.n	8007fd8 <_dtoa_r+0x4e0>
 80081f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	f000 80db 	beq.w	80083b4 <_dtoa_r+0x8bc>
 80081fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008200:	2a01      	cmp	r2, #1
 8008202:	f300 80bf 	bgt.w	8008384 <_dtoa_r+0x88c>
 8008206:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008208:	2a00      	cmp	r2, #0
 800820a:	f000 80b7 	beq.w	800837c <_dtoa_r+0x884>
 800820e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008212:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008214:	4646      	mov	r6, r8
 8008216:	9a08      	ldr	r2, [sp, #32]
 8008218:	2101      	movs	r1, #1
 800821a:	441a      	add	r2, r3
 800821c:	4658      	mov	r0, fp
 800821e:	4498      	add	r8, r3
 8008220:	9208      	str	r2, [sp, #32]
 8008222:	f000 fc21 	bl	8008a68 <__i2b>
 8008226:	4605      	mov	r5, r0
 8008228:	b15e      	cbz	r6, 8008242 <_dtoa_r+0x74a>
 800822a:	9b08      	ldr	r3, [sp, #32]
 800822c:	2b00      	cmp	r3, #0
 800822e:	dd08      	ble.n	8008242 <_dtoa_r+0x74a>
 8008230:	42b3      	cmp	r3, r6
 8008232:	9a08      	ldr	r2, [sp, #32]
 8008234:	bfa8      	it	ge
 8008236:	4633      	movge	r3, r6
 8008238:	eba8 0803 	sub.w	r8, r8, r3
 800823c:	1af6      	subs	r6, r6, r3
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	9308      	str	r3, [sp, #32]
 8008242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008244:	b1f3      	cbz	r3, 8008284 <_dtoa_r+0x78c>
 8008246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 80b7 	beq.w	80083bc <_dtoa_r+0x8c4>
 800824e:	b18c      	cbz	r4, 8008274 <_dtoa_r+0x77c>
 8008250:	4629      	mov	r1, r5
 8008252:	4622      	mov	r2, r4
 8008254:	4658      	mov	r0, fp
 8008256:	f000 fcc7 	bl	8008be8 <__pow5mult>
 800825a:	464a      	mov	r2, r9
 800825c:	4601      	mov	r1, r0
 800825e:	4605      	mov	r5, r0
 8008260:	4658      	mov	r0, fp
 8008262:	f000 fc17 	bl	8008a94 <__multiply>
 8008266:	4649      	mov	r1, r9
 8008268:	9004      	str	r0, [sp, #16]
 800826a:	4658      	mov	r0, fp
 800826c:	f000 fb48 	bl	8008900 <_Bfree>
 8008270:	9b04      	ldr	r3, [sp, #16]
 8008272:	4699      	mov	r9, r3
 8008274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008276:	1b1a      	subs	r2, r3, r4
 8008278:	d004      	beq.n	8008284 <_dtoa_r+0x78c>
 800827a:	4649      	mov	r1, r9
 800827c:	4658      	mov	r0, fp
 800827e:	f000 fcb3 	bl	8008be8 <__pow5mult>
 8008282:	4681      	mov	r9, r0
 8008284:	2101      	movs	r1, #1
 8008286:	4658      	mov	r0, fp
 8008288:	f000 fbee 	bl	8008a68 <__i2b>
 800828c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800828e:	4604      	mov	r4, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 81cf 	beq.w	8008634 <_dtoa_r+0xb3c>
 8008296:	461a      	mov	r2, r3
 8008298:	4601      	mov	r1, r0
 800829a:	4658      	mov	r0, fp
 800829c:	f000 fca4 	bl	8008be8 <__pow5mult>
 80082a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	4604      	mov	r4, r0
 80082a6:	f300 8095 	bgt.w	80083d4 <_dtoa_r+0x8dc>
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f040 8087 	bne.w	80083c0 <_dtoa_r+0x8c8>
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f040 8089 	bne.w	80083d0 <_dtoa_r+0x8d8>
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082c4:	0d1b      	lsrs	r3, r3, #20
 80082c6:	051b      	lsls	r3, r3, #20
 80082c8:	b12b      	cbz	r3, 80082d6 <_dtoa_r+0x7de>
 80082ca:	9b08      	ldr	r3, [sp, #32]
 80082cc:	3301      	adds	r3, #1
 80082ce:	9308      	str	r3, [sp, #32]
 80082d0:	f108 0801 	add.w	r8, r8, #1
 80082d4:	2301      	movs	r3, #1
 80082d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 81b0 	beq.w	8008640 <_dtoa_r+0xb48>
 80082e0:	6923      	ldr	r3, [r4, #16]
 80082e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082e6:	6918      	ldr	r0, [r3, #16]
 80082e8:	f000 fb72 	bl	80089d0 <__hi0bits>
 80082ec:	f1c0 0020 	rsb	r0, r0, #32
 80082f0:	9b08      	ldr	r3, [sp, #32]
 80082f2:	4418      	add	r0, r3
 80082f4:	f010 001f 	ands.w	r0, r0, #31
 80082f8:	d077      	beq.n	80083ea <_dtoa_r+0x8f2>
 80082fa:	f1c0 0320 	rsb	r3, r0, #32
 80082fe:	2b04      	cmp	r3, #4
 8008300:	dd6b      	ble.n	80083da <_dtoa_r+0x8e2>
 8008302:	9b08      	ldr	r3, [sp, #32]
 8008304:	f1c0 001c 	rsb	r0, r0, #28
 8008308:	4403      	add	r3, r0
 800830a:	4480      	add	r8, r0
 800830c:	4406      	add	r6, r0
 800830e:	9308      	str	r3, [sp, #32]
 8008310:	f1b8 0f00 	cmp.w	r8, #0
 8008314:	dd05      	ble.n	8008322 <_dtoa_r+0x82a>
 8008316:	4649      	mov	r1, r9
 8008318:	4642      	mov	r2, r8
 800831a:	4658      	mov	r0, fp
 800831c:	f000 fcbe 	bl	8008c9c <__lshift>
 8008320:	4681      	mov	r9, r0
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	2b00      	cmp	r3, #0
 8008326:	dd05      	ble.n	8008334 <_dtoa_r+0x83c>
 8008328:	4621      	mov	r1, r4
 800832a:	461a      	mov	r2, r3
 800832c:	4658      	mov	r0, fp
 800832e:	f000 fcb5 	bl	8008c9c <__lshift>
 8008332:	4604      	mov	r4, r0
 8008334:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008336:	2b00      	cmp	r3, #0
 8008338:	d059      	beq.n	80083ee <_dtoa_r+0x8f6>
 800833a:	4621      	mov	r1, r4
 800833c:	4648      	mov	r0, r9
 800833e:	f000 fd19 	bl	8008d74 <__mcmp>
 8008342:	2800      	cmp	r0, #0
 8008344:	da53      	bge.n	80083ee <_dtoa_r+0x8f6>
 8008346:	1e7b      	subs	r3, r7, #1
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	4649      	mov	r1, r9
 800834c:	2300      	movs	r3, #0
 800834e:	220a      	movs	r2, #10
 8008350:	4658      	mov	r0, fp
 8008352:	f000 faf7 	bl	8008944 <__multadd>
 8008356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008358:	4681      	mov	r9, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 8172 	beq.w	8008644 <_dtoa_r+0xb4c>
 8008360:	2300      	movs	r3, #0
 8008362:	4629      	mov	r1, r5
 8008364:	220a      	movs	r2, #10
 8008366:	4658      	mov	r0, fp
 8008368:	f000 faec 	bl	8008944 <__multadd>
 800836c:	9b00      	ldr	r3, [sp, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	4605      	mov	r5, r0
 8008372:	dc67      	bgt.n	8008444 <_dtoa_r+0x94c>
 8008374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008376:	2b02      	cmp	r3, #2
 8008378:	dc41      	bgt.n	80083fe <_dtoa_r+0x906>
 800837a:	e063      	b.n	8008444 <_dtoa_r+0x94c>
 800837c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800837e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008382:	e746      	b.n	8008212 <_dtoa_r+0x71a>
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	1e5c      	subs	r4, r3, #1
 8008388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800838a:	42a3      	cmp	r3, r4
 800838c:	bfbf      	itttt	lt
 800838e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008390:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008392:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008394:	1ae3      	sublt	r3, r4, r3
 8008396:	bfb4      	ite	lt
 8008398:	18d2      	addlt	r2, r2, r3
 800839a:	1b1c      	subge	r4, r3, r4
 800839c:	9b07      	ldr	r3, [sp, #28]
 800839e:	bfbc      	itt	lt
 80083a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80083a2:	2400      	movlt	r4, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bfb5      	itete	lt
 80083a8:	eba8 0603 	sublt.w	r6, r8, r3
 80083ac:	9b07      	ldrge	r3, [sp, #28]
 80083ae:	2300      	movlt	r3, #0
 80083b0:	4646      	movge	r6, r8
 80083b2:	e730      	b.n	8008216 <_dtoa_r+0x71e>
 80083b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083b8:	4646      	mov	r6, r8
 80083ba:	e735      	b.n	8008228 <_dtoa_r+0x730>
 80083bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083be:	e75c      	b.n	800827a <_dtoa_r+0x782>
 80083c0:	2300      	movs	r3, #0
 80083c2:	e788      	b.n	80082d6 <_dtoa_r+0x7de>
 80083c4:	3fe00000 	.word	0x3fe00000
 80083c8:	40240000 	.word	0x40240000
 80083cc:	40140000 	.word	0x40140000
 80083d0:	9b02      	ldr	r3, [sp, #8]
 80083d2:	e780      	b.n	80082d6 <_dtoa_r+0x7de>
 80083d4:	2300      	movs	r3, #0
 80083d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d8:	e782      	b.n	80082e0 <_dtoa_r+0x7e8>
 80083da:	d099      	beq.n	8008310 <_dtoa_r+0x818>
 80083dc:	9a08      	ldr	r2, [sp, #32]
 80083de:	331c      	adds	r3, #28
 80083e0:	441a      	add	r2, r3
 80083e2:	4498      	add	r8, r3
 80083e4:	441e      	add	r6, r3
 80083e6:	9208      	str	r2, [sp, #32]
 80083e8:	e792      	b.n	8008310 <_dtoa_r+0x818>
 80083ea:	4603      	mov	r3, r0
 80083ec:	e7f6      	b.n	80083dc <_dtoa_r+0x8e4>
 80083ee:	9b07      	ldr	r3, [sp, #28]
 80083f0:	9704      	str	r7, [sp, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dc20      	bgt.n	8008438 <_dtoa_r+0x940>
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	dd1e      	ble.n	800843c <_dtoa_r+0x944>
 80083fe:	9b00      	ldr	r3, [sp, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f47f aec0 	bne.w	8008186 <_dtoa_r+0x68e>
 8008406:	4621      	mov	r1, r4
 8008408:	2205      	movs	r2, #5
 800840a:	4658      	mov	r0, fp
 800840c:	f000 fa9a 	bl	8008944 <__multadd>
 8008410:	4601      	mov	r1, r0
 8008412:	4604      	mov	r4, r0
 8008414:	4648      	mov	r0, r9
 8008416:	f000 fcad 	bl	8008d74 <__mcmp>
 800841a:	2800      	cmp	r0, #0
 800841c:	f77f aeb3 	ble.w	8008186 <_dtoa_r+0x68e>
 8008420:	4656      	mov	r6, sl
 8008422:	2331      	movs	r3, #49	@ 0x31
 8008424:	f806 3b01 	strb.w	r3, [r6], #1
 8008428:	9b04      	ldr	r3, [sp, #16]
 800842a:	3301      	adds	r3, #1
 800842c:	9304      	str	r3, [sp, #16]
 800842e:	e6ae      	b.n	800818e <_dtoa_r+0x696>
 8008430:	9c07      	ldr	r4, [sp, #28]
 8008432:	9704      	str	r7, [sp, #16]
 8008434:	4625      	mov	r5, r4
 8008436:	e7f3      	b.n	8008420 <_dtoa_r+0x928>
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 8104 	beq.w	800864c <_dtoa_r+0xb54>
 8008444:	2e00      	cmp	r6, #0
 8008446:	dd05      	ble.n	8008454 <_dtoa_r+0x95c>
 8008448:	4629      	mov	r1, r5
 800844a:	4632      	mov	r2, r6
 800844c:	4658      	mov	r0, fp
 800844e:	f000 fc25 	bl	8008c9c <__lshift>
 8008452:	4605      	mov	r5, r0
 8008454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d05a      	beq.n	8008510 <_dtoa_r+0xa18>
 800845a:	6869      	ldr	r1, [r5, #4]
 800845c:	4658      	mov	r0, fp
 800845e:	f000 fa0f 	bl	8008880 <_Balloc>
 8008462:	4606      	mov	r6, r0
 8008464:	b928      	cbnz	r0, 8008472 <_dtoa_r+0x97a>
 8008466:	4b84      	ldr	r3, [pc, #528]	@ (8008678 <_dtoa_r+0xb80>)
 8008468:	4602      	mov	r2, r0
 800846a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800846e:	f7ff bb5a 	b.w	8007b26 <_dtoa_r+0x2e>
 8008472:	692a      	ldr	r2, [r5, #16]
 8008474:	3202      	adds	r2, #2
 8008476:	0092      	lsls	r2, r2, #2
 8008478:	f105 010c 	add.w	r1, r5, #12
 800847c:	300c      	adds	r0, #12
 800847e:	f000 ffaf 	bl	80093e0 <memcpy>
 8008482:	2201      	movs	r2, #1
 8008484:	4631      	mov	r1, r6
 8008486:	4658      	mov	r0, fp
 8008488:	f000 fc08 	bl	8008c9c <__lshift>
 800848c:	f10a 0301 	add.w	r3, sl, #1
 8008490:	9307      	str	r3, [sp, #28]
 8008492:	9b00      	ldr	r3, [sp, #0]
 8008494:	4453      	add	r3, sl
 8008496:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008498:	9b02      	ldr	r3, [sp, #8]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	462f      	mov	r7, r5
 80084a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80084a2:	4605      	mov	r5, r0
 80084a4:	9b07      	ldr	r3, [sp, #28]
 80084a6:	4621      	mov	r1, r4
 80084a8:	3b01      	subs	r3, #1
 80084aa:	4648      	mov	r0, r9
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	f7ff fa98 	bl	80079e2 <quorem>
 80084b2:	4639      	mov	r1, r7
 80084b4:	9002      	str	r0, [sp, #8]
 80084b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084ba:	4648      	mov	r0, r9
 80084bc:	f000 fc5a 	bl	8008d74 <__mcmp>
 80084c0:	462a      	mov	r2, r5
 80084c2:	9008      	str	r0, [sp, #32]
 80084c4:	4621      	mov	r1, r4
 80084c6:	4658      	mov	r0, fp
 80084c8:	f000 fc70 	bl	8008dac <__mdiff>
 80084cc:	68c2      	ldr	r2, [r0, #12]
 80084ce:	4606      	mov	r6, r0
 80084d0:	bb02      	cbnz	r2, 8008514 <_dtoa_r+0xa1c>
 80084d2:	4601      	mov	r1, r0
 80084d4:	4648      	mov	r0, r9
 80084d6:	f000 fc4d 	bl	8008d74 <__mcmp>
 80084da:	4602      	mov	r2, r0
 80084dc:	4631      	mov	r1, r6
 80084de:	4658      	mov	r0, fp
 80084e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80084e2:	f000 fa0d 	bl	8008900 <_Bfree>
 80084e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084ea:	9e07      	ldr	r6, [sp, #28]
 80084ec:	ea43 0102 	orr.w	r1, r3, r2
 80084f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f2:	4319      	orrs	r1, r3
 80084f4:	d110      	bne.n	8008518 <_dtoa_r+0xa20>
 80084f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084fa:	d029      	beq.n	8008550 <_dtoa_r+0xa58>
 80084fc:	9b08      	ldr	r3, [sp, #32]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dd02      	ble.n	8008508 <_dtoa_r+0xa10>
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008508:	9b00      	ldr	r3, [sp, #0]
 800850a:	f883 8000 	strb.w	r8, [r3]
 800850e:	e63f      	b.n	8008190 <_dtoa_r+0x698>
 8008510:	4628      	mov	r0, r5
 8008512:	e7bb      	b.n	800848c <_dtoa_r+0x994>
 8008514:	2201      	movs	r2, #1
 8008516:	e7e1      	b.n	80084dc <_dtoa_r+0x9e4>
 8008518:	9b08      	ldr	r3, [sp, #32]
 800851a:	2b00      	cmp	r3, #0
 800851c:	db04      	blt.n	8008528 <_dtoa_r+0xa30>
 800851e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008520:	430b      	orrs	r3, r1
 8008522:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008524:	430b      	orrs	r3, r1
 8008526:	d120      	bne.n	800856a <_dtoa_r+0xa72>
 8008528:	2a00      	cmp	r2, #0
 800852a:	dded      	ble.n	8008508 <_dtoa_r+0xa10>
 800852c:	4649      	mov	r1, r9
 800852e:	2201      	movs	r2, #1
 8008530:	4658      	mov	r0, fp
 8008532:	f000 fbb3 	bl	8008c9c <__lshift>
 8008536:	4621      	mov	r1, r4
 8008538:	4681      	mov	r9, r0
 800853a:	f000 fc1b 	bl	8008d74 <__mcmp>
 800853e:	2800      	cmp	r0, #0
 8008540:	dc03      	bgt.n	800854a <_dtoa_r+0xa52>
 8008542:	d1e1      	bne.n	8008508 <_dtoa_r+0xa10>
 8008544:	f018 0f01 	tst.w	r8, #1
 8008548:	d0de      	beq.n	8008508 <_dtoa_r+0xa10>
 800854a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800854e:	d1d8      	bne.n	8008502 <_dtoa_r+0xa0a>
 8008550:	9a00      	ldr	r2, [sp, #0]
 8008552:	2339      	movs	r3, #57	@ 0x39
 8008554:	7013      	strb	r3, [r2, #0]
 8008556:	4633      	mov	r3, r6
 8008558:	461e      	mov	r6, r3
 800855a:	3b01      	subs	r3, #1
 800855c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008560:	2a39      	cmp	r2, #57	@ 0x39
 8008562:	d052      	beq.n	800860a <_dtoa_r+0xb12>
 8008564:	3201      	adds	r2, #1
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	e612      	b.n	8008190 <_dtoa_r+0x698>
 800856a:	2a00      	cmp	r2, #0
 800856c:	dd07      	ble.n	800857e <_dtoa_r+0xa86>
 800856e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008572:	d0ed      	beq.n	8008550 <_dtoa_r+0xa58>
 8008574:	9a00      	ldr	r2, [sp, #0]
 8008576:	f108 0301 	add.w	r3, r8, #1
 800857a:	7013      	strb	r3, [r2, #0]
 800857c:	e608      	b.n	8008190 <_dtoa_r+0x698>
 800857e:	9b07      	ldr	r3, [sp, #28]
 8008580:	9a07      	ldr	r2, [sp, #28]
 8008582:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008588:	4293      	cmp	r3, r2
 800858a:	d028      	beq.n	80085de <_dtoa_r+0xae6>
 800858c:	4649      	mov	r1, r9
 800858e:	2300      	movs	r3, #0
 8008590:	220a      	movs	r2, #10
 8008592:	4658      	mov	r0, fp
 8008594:	f000 f9d6 	bl	8008944 <__multadd>
 8008598:	42af      	cmp	r7, r5
 800859a:	4681      	mov	r9, r0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	f04f 020a 	mov.w	r2, #10
 80085a4:	4639      	mov	r1, r7
 80085a6:	4658      	mov	r0, fp
 80085a8:	d107      	bne.n	80085ba <_dtoa_r+0xac2>
 80085aa:	f000 f9cb 	bl	8008944 <__multadd>
 80085ae:	4607      	mov	r7, r0
 80085b0:	4605      	mov	r5, r0
 80085b2:	9b07      	ldr	r3, [sp, #28]
 80085b4:	3301      	adds	r3, #1
 80085b6:	9307      	str	r3, [sp, #28]
 80085b8:	e774      	b.n	80084a4 <_dtoa_r+0x9ac>
 80085ba:	f000 f9c3 	bl	8008944 <__multadd>
 80085be:	4629      	mov	r1, r5
 80085c0:	4607      	mov	r7, r0
 80085c2:	2300      	movs	r3, #0
 80085c4:	220a      	movs	r2, #10
 80085c6:	4658      	mov	r0, fp
 80085c8:	f000 f9bc 	bl	8008944 <__multadd>
 80085cc:	4605      	mov	r5, r0
 80085ce:	e7f0      	b.n	80085b2 <_dtoa_r+0xaba>
 80085d0:	9b00      	ldr	r3, [sp, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bfcc      	ite	gt
 80085d6:	461e      	movgt	r6, r3
 80085d8:	2601      	movle	r6, #1
 80085da:	4456      	add	r6, sl
 80085dc:	2700      	movs	r7, #0
 80085de:	4649      	mov	r1, r9
 80085e0:	2201      	movs	r2, #1
 80085e2:	4658      	mov	r0, fp
 80085e4:	f000 fb5a 	bl	8008c9c <__lshift>
 80085e8:	4621      	mov	r1, r4
 80085ea:	4681      	mov	r9, r0
 80085ec:	f000 fbc2 	bl	8008d74 <__mcmp>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	dcb0      	bgt.n	8008556 <_dtoa_r+0xa5e>
 80085f4:	d102      	bne.n	80085fc <_dtoa_r+0xb04>
 80085f6:	f018 0f01 	tst.w	r8, #1
 80085fa:	d1ac      	bne.n	8008556 <_dtoa_r+0xa5e>
 80085fc:	4633      	mov	r3, r6
 80085fe:	461e      	mov	r6, r3
 8008600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008604:	2a30      	cmp	r2, #48	@ 0x30
 8008606:	d0fa      	beq.n	80085fe <_dtoa_r+0xb06>
 8008608:	e5c2      	b.n	8008190 <_dtoa_r+0x698>
 800860a:	459a      	cmp	sl, r3
 800860c:	d1a4      	bne.n	8008558 <_dtoa_r+0xa60>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	3301      	adds	r3, #1
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	2331      	movs	r3, #49	@ 0x31
 8008616:	f88a 3000 	strb.w	r3, [sl]
 800861a:	e5b9      	b.n	8008190 <_dtoa_r+0x698>
 800861c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800861e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800867c <_dtoa_r+0xb84>
 8008622:	b11b      	cbz	r3, 800862c <_dtoa_r+0xb34>
 8008624:	f10a 0308 	add.w	r3, sl, #8
 8008628:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	4650      	mov	r0, sl
 800862e:	b019      	add	sp, #100	@ 0x64
 8008630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008636:	2b01      	cmp	r3, #1
 8008638:	f77f ae37 	ble.w	80082aa <_dtoa_r+0x7b2>
 800863c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800863e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008640:	2001      	movs	r0, #1
 8008642:	e655      	b.n	80082f0 <_dtoa_r+0x7f8>
 8008644:	9b00      	ldr	r3, [sp, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f77f aed6 	ble.w	80083f8 <_dtoa_r+0x900>
 800864c:	4656      	mov	r6, sl
 800864e:	4621      	mov	r1, r4
 8008650:	4648      	mov	r0, r9
 8008652:	f7ff f9c6 	bl	80079e2 <quorem>
 8008656:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800865a:	f806 8b01 	strb.w	r8, [r6], #1
 800865e:	9b00      	ldr	r3, [sp, #0]
 8008660:	eba6 020a 	sub.w	r2, r6, sl
 8008664:	4293      	cmp	r3, r2
 8008666:	ddb3      	ble.n	80085d0 <_dtoa_r+0xad8>
 8008668:	4649      	mov	r1, r9
 800866a:	2300      	movs	r3, #0
 800866c:	220a      	movs	r2, #10
 800866e:	4658      	mov	r0, fp
 8008670:	f000 f968 	bl	8008944 <__multadd>
 8008674:	4681      	mov	r9, r0
 8008676:	e7ea      	b.n	800864e <_dtoa_r+0xb56>
 8008678:	0801d034 	.word	0x0801d034
 800867c:	0801cfb8 	.word	0x0801cfb8

08008680 <_free_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4605      	mov	r5, r0
 8008684:	2900      	cmp	r1, #0
 8008686:	d041      	beq.n	800870c <_free_r+0x8c>
 8008688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800868c:	1f0c      	subs	r4, r1, #4
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfb8      	it	lt
 8008692:	18e4      	addlt	r4, r4, r3
 8008694:	f000 f8e8 	bl	8008868 <__malloc_lock>
 8008698:	4a1d      	ldr	r2, [pc, #116]	@ (8008710 <_free_r+0x90>)
 800869a:	6813      	ldr	r3, [r2, #0]
 800869c:	b933      	cbnz	r3, 80086ac <_free_r+0x2c>
 800869e:	6063      	str	r3, [r4, #4]
 80086a0:	6014      	str	r4, [r2, #0]
 80086a2:	4628      	mov	r0, r5
 80086a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a8:	f000 b8e4 	b.w	8008874 <__malloc_unlock>
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d908      	bls.n	80086c2 <_free_r+0x42>
 80086b0:	6820      	ldr	r0, [r4, #0]
 80086b2:	1821      	adds	r1, r4, r0
 80086b4:	428b      	cmp	r3, r1
 80086b6:	bf01      	itttt	eq
 80086b8:	6819      	ldreq	r1, [r3, #0]
 80086ba:	685b      	ldreq	r3, [r3, #4]
 80086bc:	1809      	addeq	r1, r1, r0
 80086be:	6021      	streq	r1, [r4, #0]
 80086c0:	e7ed      	b.n	800869e <_free_r+0x1e>
 80086c2:	461a      	mov	r2, r3
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	b10b      	cbz	r3, 80086cc <_free_r+0x4c>
 80086c8:	42a3      	cmp	r3, r4
 80086ca:	d9fa      	bls.n	80086c2 <_free_r+0x42>
 80086cc:	6811      	ldr	r1, [r2, #0]
 80086ce:	1850      	adds	r0, r2, r1
 80086d0:	42a0      	cmp	r0, r4
 80086d2:	d10b      	bne.n	80086ec <_free_r+0x6c>
 80086d4:	6820      	ldr	r0, [r4, #0]
 80086d6:	4401      	add	r1, r0
 80086d8:	1850      	adds	r0, r2, r1
 80086da:	4283      	cmp	r3, r0
 80086dc:	6011      	str	r1, [r2, #0]
 80086de:	d1e0      	bne.n	80086a2 <_free_r+0x22>
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	6053      	str	r3, [r2, #4]
 80086e6:	4408      	add	r0, r1
 80086e8:	6010      	str	r0, [r2, #0]
 80086ea:	e7da      	b.n	80086a2 <_free_r+0x22>
 80086ec:	d902      	bls.n	80086f4 <_free_r+0x74>
 80086ee:	230c      	movs	r3, #12
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	e7d6      	b.n	80086a2 <_free_r+0x22>
 80086f4:	6820      	ldr	r0, [r4, #0]
 80086f6:	1821      	adds	r1, r4, r0
 80086f8:	428b      	cmp	r3, r1
 80086fa:	bf04      	itt	eq
 80086fc:	6819      	ldreq	r1, [r3, #0]
 80086fe:	685b      	ldreq	r3, [r3, #4]
 8008700:	6063      	str	r3, [r4, #4]
 8008702:	bf04      	itt	eq
 8008704:	1809      	addeq	r1, r1, r0
 8008706:	6021      	streq	r1, [r4, #0]
 8008708:	6054      	str	r4, [r2, #4]
 800870a:	e7ca      	b.n	80086a2 <_free_r+0x22>
 800870c:	bd38      	pop	{r3, r4, r5, pc}
 800870e:	bf00      	nop
 8008710:	200099c4 	.word	0x200099c4

08008714 <malloc>:
 8008714:	4b02      	ldr	r3, [pc, #8]	@ (8008720 <malloc+0xc>)
 8008716:	4601      	mov	r1, r0
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	f000 b825 	b.w	8008768 <_malloc_r>
 800871e:	bf00      	nop
 8008720:	20000018 	.word	0x20000018

08008724 <sbrk_aligned>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	4e0f      	ldr	r6, [pc, #60]	@ (8008764 <sbrk_aligned+0x40>)
 8008728:	460c      	mov	r4, r1
 800872a:	6831      	ldr	r1, [r6, #0]
 800872c:	4605      	mov	r5, r0
 800872e:	b911      	cbnz	r1, 8008736 <sbrk_aligned+0x12>
 8008730:	f000 fe46 	bl	80093c0 <_sbrk_r>
 8008734:	6030      	str	r0, [r6, #0]
 8008736:	4621      	mov	r1, r4
 8008738:	4628      	mov	r0, r5
 800873a:	f000 fe41 	bl	80093c0 <_sbrk_r>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	d103      	bne.n	800874a <sbrk_aligned+0x26>
 8008742:	f04f 34ff 	mov.w	r4, #4294967295
 8008746:	4620      	mov	r0, r4
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	1cc4      	adds	r4, r0, #3
 800874c:	f024 0403 	bic.w	r4, r4, #3
 8008750:	42a0      	cmp	r0, r4
 8008752:	d0f8      	beq.n	8008746 <sbrk_aligned+0x22>
 8008754:	1a21      	subs	r1, r4, r0
 8008756:	4628      	mov	r0, r5
 8008758:	f000 fe32 	bl	80093c0 <_sbrk_r>
 800875c:	3001      	adds	r0, #1
 800875e:	d1f2      	bne.n	8008746 <sbrk_aligned+0x22>
 8008760:	e7ef      	b.n	8008742 <sbrk_aligned+0x1e>
 8008762:	bf00      	nop
 8008764:	200099c0 	.word	0x200099c0

08008768 <_malloc_r>:
 8008768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800876c:	1ccd      	adds	r5, r1, #3
 800876e:	f025 0503 	bic.w	r5, r5, #3
 8008772:	3508      	adds	r5, #8
 8008774:	2d0c      	cmp	r5, #12
 8008776:	bf38      	it	cc
 8008778:	250c      	movcc	r5, #12
 800877a:	2d00      	cmp	r5, #0
 800877c:	4606      	mov	r6, r0
 800877e:	db01      	blt.n	8008784 <_malloc_r+0x1c>
 8008780:	42a9      	cmp	r1, r5
 8008782:	d904      	bls.n	800878e <_malloc_r+0x26>
 8008784:	230c      	movs	r3, #12
 8008786:	6033      	str	r3, [r6, #0]
 8008788:	2000      	movs	r0, #0
 800878a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008864 <_malloc_r+0xfc>
 8008792:	f000 f869 	bl	8008868 <__malloc_lock>
 8008796:	f8d8 3000 	ldr.w	r3, [r8]
 800879a:	461c      	mov	r4, r3
 800879c:	bb44      	cbnz	r4, 80087f0 <_malloc_r+0x88>
 800879e:	4629      	mov	r1, r5
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7ff ffbf 	bl	8008724 <sbrk_aligned>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	4604      	mov	r4, r0
 80087aa:	d158      	bne.n	800885e <_malloc_r+0xf6>
 80087ac:	f8d8 4000 	ldr.w	r4, [r8]
 80087b0:	4627      	mov	r7, r4
 80087b2:	2f00      	cmp	r7, #0
 80087b4:	d143      	bne.n	800883e <_malloc_r+0xd6>
 80087b6:	2c00      	cmp	r4, #0
 80087b8:	d04b      	beq.n	8008852 <_malloc_r+0xea>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	4639      	mov	r1, r7
 80087be:	4630      	mov	r0, r6
 80087c0:	eb04 0903 	add.w	r9, r4, r3
 80087c4:	f000 fdfc 	bl	80093c0 <_sbrk_r>
 80087c8:	4581      	cmp	r9, r0
 80087ca:	d142      	bne.n	8008852 <_malloc_r+0xea>
 80087cc:	6821      	ldr	r1, [r4, #0]
 80087ce:	1a6d      	subs	r5, r5, r1
 80087d0:	4629      	mov	r1, r5
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7ff ffa6 	bl	8008724 <sbrk_aligned>
 80087d8:	3001      	adds	r0, #1
 80087da:	d03a      	beq.n	8008852 <_malloc_r+0xea>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	442b      	add	r3, r5
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	f8d8 3000 	ldr.w	r3, [r8]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	bb62      	cbnz	r2, 8008844 <_malloc_r+0xdc>
 80087ea:	f8c8 7000 	str.w	r7, [r8]
 80087ee:	e00f      	b.n	8008810 <_malloc_r+0xa8>
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	1b52      	subs	r2, r2, r5
 80087f4:	d420      	bmi.n	8008838 <_malloc_r+0xd0>
 80087f6:	2a0b      	cmp	r2, #11
 80087f8:	d917      	bls.n	800882a <_malloc_r+0xc2>
 80087fa:	1961      	adds	r1, r4, r5
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	6025      	str	r5, [r4, #0]
 8008800:	bf18      	it	ne
 8008802:	6059      	strne	r1, [r3, #4]
 8008804:	6863      	ldr	r3, [r4, #4]
 8008806:	bf08      	it	eq
 8008808:	f8c8 1000 	streq.w	r1, [r8]
 800880c:	5162      	str	r2, [r4, r5]
 800880e:	604b      	str	r3, [r1, #4]
 8008810:	4630      	mov	r0, r6
 8008812:	f000 f82f 	bl	8008874 <__malloc_unlock>
 8008816:	f104 000b 	add.w	r0, r4, #11
 800881a:	1d23      	adds	r3, r4, #4
 800881c:	f020 0007 	bic.w	r0, r0, #7
 8008820:	1ac2      	subs	r2, r0, r3
 8008822:	bf1c      	itt	ne
 8008824:	1a1b      	subne	r3, r3, r0
 8008826:	50a3      	strne	r3, [r4, r2]
 8008828:	e7af      	b.n	800878a <_malloc_r+0x22>
 800882a:	6862      	ldr	r2, [r4, #4]
 800882c:	42a3      	cmp	r3, r4
 800882e:	bf0c      	ite	eq
 8008830:	f8c8 2000 	streq.w	r2, [r8]
 8008834:	605a      	strne	r2, [r3, #4]
 8008836:	e7eb      	b.n	8008810 <_malloc_r+0xa8>
 8008838:	4623      	mov	r3, r4
 800883a:	6864      	ldr	r4, [r4, #4]
 800883c:	e7ae      	b.n	800879c <_malloc_r+0x34>
 800883e:	463c      	mov	r4, r7
 8008840:	687f      	ldr	r7, [r7, #4]
 8008842:	e7b6      	b.n	80087b2 <_malloc_r+0x4a>
 8008844:	461a      	mov	r2, r3
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	42a3      	cmp	r3, r4
 800884a:	d1fb      	bne.n	8008844 <_malloc_r+0xdc>
 800884c:	2300      	movs	r3, #0
 800884e:	6053      	str	r3, [r2, #4]
 8008850:	e7de      	b.n	8008810 <_malloc_r+0xa8>
 8008852:	230c      	movs	r3, #12
 8008854:	6033      	str	r3, [r6, #0]
 8008856:	4630      	mov	r0, r6
 8008858:	f000 f80c 	bl	8008874 <__malloc_unlock>
 800885c:	e794      	b.n	8008788 <_malloc_r+0x20>
 800885e:	6005      	str	r5, [r0, #0]
 8008860:	e7d6      	b.n	8008810 <_malloc_r+0xa8>
 8008862:	bf00      	nop
 8008864:	200099c4 	.word	0x200099c4

08008868 <__malloc_lock>:
 8008868:	4801      	ldr	r0, [pc, #4]	@ (8008870 <__malloc_lock+0x8>)
 800886a:	f7ff b8b8 	b.w	80079de <__retarget_lock_acquire_recursive>
 800886e:	bf00      	nop
 8008870:	200099bc 	.word	0x200099bc

08008874 <__malloc_unlock>:
 8008874:	4801      	ldr	r0, [pc, #4]	@ (800887c <__malloc_unlock+0x8>)
 8008876:	f7ff b8b3 	b.w	80079e0 <__retarget_lock_release_recursive>
 800887a:	bf00      	nop
 800887c:	200099bc 	.word	0x200099bc

08008880 <_Balloc>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	69c6      	ldr	r6, [r0, #28]
 8008884:	4604      	mov	r4, r0
 8008886:	460d      	mov	r5, r1
 8008888:	b976      	cbnz	r6, 80088a8 <_Balloc+0x28>
 800888a:	2010      	movs	r0, #16
 800888c:	f7ff ff42 	bl	8008714 <malloc>
 8008890:	4602      	mov	r2, r0
 8008892:	61e0      	str	r0, [r4, #28]
 8008894:	b920      	cbnz	r0, 80088a0 <_Balloc+0x20>
 8008896:	4b18      	ldr	r3, [pc, #96]	@ (80088f8 <_Balloc+0x78>)
 8008898:	4818      	ldr	r0, [pc, #96]	@ (80088fc <_Balloc+0x7c>)
 800889a:	216b      	movs	r1, #107	@ 0x6b
 800889c:	f000 fdae 	bl	80093fc <__assert_func>
 80088a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088a4:	6006      	str	r6, [r0, #0]
 80088a6:	60c6      	str	r6, [r0, #12]
 80088a8:	69e6      	ldr	r6, [r4, #28]
 80088aa:	68f3      	ldr	r3, [r6, #12]
 80088ac:	b183      	cbz	r3, 80088d0 <_Balloc+0x50>
 80088ae:	69e3      	ldr	r3, [r4, #28]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088b6:	b9b8      	cbnz	r0, 80088e8 <_Balloc+0x68>
 80088b8:	2101      	movs	r1, #1
 80088ba:	fa01 f605 	lsl.w	r6, r1, r5
 80088be:	1d72      	adds	r2, r6, #5
 80088c0:	0092      	lsls	r2, r2, #2
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 fdb8 	bl	8009438 <_calloc_r>
 80088c8:	b160      	cbz	r0, 80088e4 <_Balloc+0x64>
 80088ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088ce:	e00e      	b.n	80088ee <_Balloc+0x6e>
 80088d0:	2221      	movs	r2, #33	@ 0x21
 80088d2:	2104      	movs	r1, #4
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fdaf 	bl	8009438 <_calloc_r>
 80088da:	69e3      	ldr	r3, [r4, #28]
 80088dc:	60f0      	str	r0, [r6, #12]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e4      	bne.n	80088ae <_Balloc+0x2e>
 80088e4:	2000      	movs	r0, #0
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
 80088e8:	6802      	ldr	r2, [r0, #0]
 80088ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088ee:	2300      	movs	r3, #0
 80088f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088f4:	e7f7      	b.n	80088e6 <_Balloc+0x66>
 80088f6:	bf00      	nop
 80088f8:	0801cfc5 	.word	0x0801cfc5
 80088fc:	0801d045 	.word	0x0801d045

08008900 <_Bfree>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	69c6      	ldr	r6, [r0, #28]
 8008904:	4605      	mov	r5, r0
 8008906:	460c      	mov	r4, r1
 8008908:	b976      	cbnz	r6, 8008928 <_Bfree+0x28>
 800890a:	2010      	movs	r0, #16
 800890c:	f7ff ff02 	bl	8008714 <malloc>
 8008910:	4602      	mov	r2, r0
 8008912:	61e8      	str	r0, [r5, #28]
 8008914:	b920      	cbnz	r0, 8008920 <_Bfree+0x20>
 8008916:	4b09      	ldr	r3, [pc, #36]	@ (800893c <_Bfree+0x3c>)
 8008918:	4809      	ldr	r0, [pc, #36]	@ (8008940 <_Bfree+0x40>)
 800891a:	218f      	movs	r1, #143	@ 0x8f
 800891c:	f000 fd6e 	bl	80093fc <__assert_func>
 8008920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008924:	6006      	str	r6, [r0, #0]
 8008926:	60c6      	str	r6, [r0, #12]
 8008928:	b13c      	cbz	r4, 800893a <_Bfree+0x3a>
 800892a:	69eb      	ldr	r3, [r5, #28]
 800892c:	6862      	ldr	r2, [r4, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008934:	6021      	str	r1, [r4, #0]
 8008936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	0801cfc5 	.word	0x0801cfc5
 8008940:	0801d045 	.word	0x0801d045

08008944 <__multadd>:
 8008944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	690d      	ldr	r5, [r1, #16]
 800894a:	4607      	mov	r7, r0
 800894c:	460c      	mov	r4, r1
 800894e:	461e      	mov	r6, r3
 8008950:	f101 0c14 	add.w	ip, r1, #20
 8008954:	2000      	movs	r0, #0
 8008956:	f8dc 3000 	ldr.w	r3, [ip]
 800895a:	b299      	uxth	r1, r3
 800895c:	fb02 6101 	mla	r1, r2, r1, r6
 8008960:	0c1e      	lsrs	r6, r3, #16
 8008962:	0c0b      	lsrs	r3, r1, #16
 8008964:	fb02 3306 	mla	r3, r2, r6, r3
 8008968:	b289      	uxth	r1, r1
 800896a:	3001      	adds	r0, #1
 800896c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008970:	4285      	cmp	r5, r0
 8008972:	f84c 1b04 	str.w	r1, [ip], #4
 8008976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800897a:	dcec      	bgt.n	8008956 <__multadd+0x12>
 800897c:	b30e      	cbz	r6, 80089c2 <__multadd+0x7e>
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	42ab      	cmp	r3, r5
 8008982:	dc19      	bgt.n	80089b8 <__multadd+0x74>
 8008984:	6861      	ldr	r1, [r4, #4]
 8008986:	4638      	mov	r0, r7
 8008988:	3101      	adds	r1, #1
 800898a:	f7ff ff79 	bl	8008880 <_Balloc>
 800898e:	4680      	mov	r8, r0
 8008990:	b928      	cbnz	r0, 800899e <__multadd+0x5a>
 8008992:	4602      	mov	r2, r0
 8008994:	4b0c      	ldr	r3, [pc, #48]	@ (80089c8 <__multadd+0x84>)
 8008996:	480d      	ldr	r0, [pc, #52]	@ (80089cc <__multadd+0x88>)
 8008998:	21ba      	movs	r1, #186	@ 0xba
 800899a:	f000 fd2f 	bl	80093fc <__assert_func>
 800899e:	6922      	ldr	r2, [r4, #16]
 80089a0:	3202      	adds	r2, #2
 80089a2:	f104 010c 	add.w	r1, r4, #12
 80089a6:	0092      	lsls	r2, r2, #2
 80089a8:	300c      	adds	r0, #12
 80089aa:	f000 fd19 	bl	80093e0 <memcpy>
 80089ae:	4621      	mov	r1, r4
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff ffa5 	bl	8008900 <_Bfree>
 80089b6:	4644      	mov	r4, r8
 80089b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089bc:	3501      	adds	r5, #1
 80089be:	615e      	str	r6, [r3, #20]
 80089c0:	6125      	str	r5, [r4, #16]
 80089c2:	4620      	mov	r0, r4
 80089c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c8:	0801d034 	.word	0x0801d034
 80089cc:	0801d045 	.word	0x0801d045

080089d0 <__hi0bits>:
 80089d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089d4:	4603      	mov	r3, r0
 80089d6:	bf36      	itet	cc
 80089d8:	0403      	lslcc	r3, r0, #16
 80089da:	2000      	movcs	r0, #0
 80089dc:	2010      	movcc	r0, #16
 80089de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089e2:	bf3c      	itt	cc
 80089e4:	021b      	lslcc	r3, r3, #8
 80089e6:	3008      	addcc	r0, #8
 80089e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ec:	bf3c      	itt	cc
 80089ee:	011b      	lslcc	r3, r3, #4
 80089f0:	3004      	addcc	r0, #4
 80089f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f6:	bf3c      	itt	cc
 80089f8:	009b      	lslcc	r3, r3, #2
 80089fa:	3002      	addcc	r0, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	db05      	blt.n	8008a0c <__hi0bits+0x3c>
 8008a00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a04:	f100 0001 	add.w	r0, r0, #1
 8008a08:	bf08      	it	eq
 8008a0a:	2020      	moveq	r0, #32
 8008a0c:	4770      	bx	lr

08008a0e <__lo0bits>:
 8008a0e:	6803      	ldr	r3, [r0, #0]
 8008a10:	4602      	mov	r2, r0
 8008a12:	f013 0007 	ands.w	r0, r3, #7
 8008a16:	d00b      	beq.n	8008a30 <__lo0bits+0x22>
 8008a18:	07d9      	lsls	r1, r3, #31
 8008a1a:	d421      	bmi.n	8008a60 <__lo0bits+0x52>
 8008a1c:	0798      	lsls	r0, r3, #30
 8008a1e:	bf49      	itett	mi
 8008a20:	085b      	lsrmi	r3, r3, #1
 8008a22:	089b      	lsrpl	r3, r3, #2
 8008a24:	2001      	movmi	r0, #1
 8008a26:	6013      	strmi	r3, [r2, #0]
 8008a28:	bf5c      	itt	pl
 8008a2a:	6013      	strpl	r3, [r2, #0]
 8008a2c:	2002      	movpl	r0, #2
 8008a2e:	4770      	bx	lr
 8008a30:	b299      	uxth	r1, r3
 8008a32:	b909      	cbnz	r1, 8008a38 <__lo0bits+0x2a>
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	2010      	movs	r0, #16
 8008a38:	b2d9      	uxtb	r1, r3
 8008a3a:	b909      	cbnz	r1, 8008a40 <__lo0bits+0x32>
 8008a3c:	3008      	adds	r0, #8
 8008a3e:	0a1b      	lsrs	r3, r3, #8
 8008a40:	0719      	lsls	r1, r3, #28
 8008a42:	bf04      	itt	eq
 8008a44:	091b      	lsreq	r3, r3, #4
 8008a46:	3004      	addeq	r0, #4
 8008a48:	0799      	lsls	r1, r3, #30
 8008a4a:	bf04      	itt	eq
 8008a4c:	089b      	lsreq	r3, r3, #2
 8008a4e:	3002      	addeq	r0, #2
 8008a50:	07d9      	lsls	r1, r3, #31
 8008a52:	d403      	bmi.n	8008a5c <__lo0bits+0x4e>
 8008a54:	085b      	lsrs	r3, r3, #1
 8008a56:	f100 0001 	add.w	r0, r0, #1
 8008a5a:	d003      	beq.n	8008a64 <__lo0bits+0x56>
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	4770      	bx	lr
 8008a60:	2000      	movs	r0, #0
 8008a62:	4770      	bx	lr
 8008a64:	2020      	movs	r0, #32
 8008a66:	4770      	bx	lr

08008a68 <__i2b>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	f7ff ff07 	bl	8008880 <_Balloc>
 8008a72:	4602      	mov	r2, r0
 8008a74:	b928      	cbnz	r0, 8008a82 <__i2b+0x1a>
 8008a76:	4b05      	ldr	r3, [pc, #20]	@ (8008a8c <__i2b+0x24>)
 8008a78:	4805      	ldr	r0, [pc, #20]	@ (8008a90 <__i2b+0x28>)
 8008a7a:	f240 1145 	movw	r1, #325	@ 0x145
 8008a7e:	f000 fcbd 	bl	80093fc <__assert_func>
 8008a82:	2301      	movs	r3, #1
 8008a84:	6144      	str	r4, [r0, #20]
 8008a86:	6103      	str	r3, [r0, #16]
 8008a88:	bd10      	pop	{r4, pc}
 8008a8a:	bf00      	nop
 8008a8c:	0801d034 	.word	0x0801d034
 8008a90:	0801d045 	.word	0x0801d045

08008a94 <__multiply>:
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	4614      	mov	r4, r2
 8008a9a:	690a      	ldr	r2, [r1, #16]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	bfa8      	it	ge
 8008aa2:	4623      	movge	r3, r4
 8008aa4:	460f      	mov	r7, r1
 8008aa6:	bfa4      	itt	ge
 8008aa8:	460c      	movge	r4, r1
 8008aaa:	461f      	movge	r7, r3
 8008aac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008ab0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008ab4:	68a3      	ldr	r3, [r4, #8]
 8008ab6:	6861      	ldr	r1, [r4, #4]
 8008ab8:	eb0a 0609 	add.w	r6, sl, r9
 8008abc:	42b3      	cmp	r3, r6
 8008abe:	b085      	sub	sp, #20
 8008ac0:	bfb8      	it	lt
 8008ac2:	3101      	addlt	r1, #1
 8008ac4:	f7ff fedc 	bl	8008880 <_Balloc>
 8008ac8:	b930      	cbnz	r0, 8008ad8 <__multiply+0x44>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4b44      	ldr	r3, [pc, #272]	@ (8008be0 <__multiply+0x14c>)
 8008ace:	4845      	ldr	r0, [pc, #276]	@ (8008be4 <__multiply+0x150>)
 8008ad0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ad4:	f000 fc92 	bl	80093fc <__assert_func>
 8008ad8:	f100 0514 	add.w	r5, r0, #20
 8008adc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ae0:	462b      	mov	r3, r5
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	4543      	cmp	r3, r8
 8008ae6:	d321      	bcc.n	8008b2c <__multiply+0x98>
 8008ae8:	f107 0114 	add.w	r1, r7, #20
 8008aec:	f104 0214 	add.w	r2, r4, #20
 8008af0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008af4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	1b13      	subs	r3, r2, r4
 8008afc:	3b15      	subs	r3, #21
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	3304      	adds	r3, #4
 8008b04:	f104 0715 	add.w	r7, r4, #21
 8008b08:	42ba      	cmp	r2, r7
 8008b0a:	bf38      	it	cc
 8008b0c:	2304      	movcc	r3, #4
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	9103      	str	r1, [sp, #12]
 8008b14:	428b      	cmp	r3, r1
 8008b16:	d80c      	bhi.n	8008b32 <__multiply+0x9e>
 8008b18:	2e00      	cmp	r6, #0
 8008b1a:	dd03      	ble.n	8008b24 <__multiply+0x90>
 8008b1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d05b      	beq.n	8008bdc <__multiply+0x148>
 8008b24:	6106      	str	r6, [r0, #16]
 8008b26:	b005      	add	sp, #20
 8008b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2c:	f843 2b04 	str.w	r2, [r3], #4
 8008b30:	e7d8      	b.n	8008ae4 <__multiply+0x50>
 8008b32:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b36:	f1ba 0f00 	cmp.w	sl, #0
 8008b3a:	d024      	beq.n	8008b86 <__multiply+0xf2>
 8008b3c:	f104 0e14 	add.w	lr, r4, #20
 8008b40:	46a9      	mov	r9, r5
 8008b42:	f04f 0c00 	mov.w	ip, #0
 8008b46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b4a:	f8d9 3000 	ldr.w	r3, [r9]
 8008b4e:	fa1f fb87 	uxth.w	fp, r7
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b5c:	f8d9 7000 	ldr.w	r7, [r9]
 8008b60:	4463      	add	r3, ip
 8008b62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b66:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b74:	4572      	cmp	r2, lr
 8008b76:	f849 3b04 	str.w	r3, [r9], #4
 8008b7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b7e:	d8e2      	bhi.n	8008b46 <__multiply+0xb2>
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	f845 c003 	str.w	ip, [r5, r3]
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b8c:	3104      	adds	r1, #4
 8008b8e:	f1b9 0f00 	cmp.w	r9, #0
 8008b92:	d021      	beq.n	8008bd8 <__multiply+0x144>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	f104 0c14 	add.w	ip, r4, #20
 8008b9a:	46ae      	mov	lr, r5
 8008b9c:	f04f 0a00 	mov.w	sl, #0
 8008ba0:	f8bc b000 	ldrh.w	fp, [ip]
 8008ba4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008ba8:	fb09 770b 	mla	r7, r9, fp, r7
 8008bac:	4457      	add	r7, sl
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bb4:	f84e 3b04 	str.w	r3, [lr], #4
 8008bb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bc0:	f8be 3000 	ldrh.w	r3, [lr]
 8008bc4:	fb09 330a 	mla	r3, r9, sl, r3
 8008bc8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008bcc:	4562      	cmp	r2, ip
 8008bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bd2:	d8e5      	bhi.n	8008ba0 <__multiply+0x10c>
 8008bd4:	9f01      	ldr	r7, [sp, #4]
 8008bd6:	51eb      	str	r3, [r5, r7]
 8008bd8:	3504      	adds	r5, #4
 8008bda:	e799      	b.n	8008b10 <__multiply+0x7c>
 8008bdc:	3e01      	subs	r6, #1
 8008bde:	e79b      	b.n	8008b18 <__multiply+0x84>
 8008be0:	0801d034 	.word	0x0801d034
 8008be4:	0801d045 	.word	0x0801d045

08008be8 <__pow5mult>:
 8008be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bec:	4615      	mov	r5, r2
 8008bee:	f012 0203 	ands.w	r2, r2, #3
 8008bf2:	4607      	mov	r7, r0
 8008bf4:	460e      	mov	r6, r1
 8008bf6:	d007      	beq.n	8008c08 <__pow5mult+0x20>
 8008bf8:	4c25      	ldr	r4, [pc, #148]	@ (8008c90 <__pow5mult+0xa8>)
 8008bfa:	3a01      	subs	r2, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c02:	f7ff fe9f 	bl	8008944 <__multadd>
 8008c06:	4606      	mov	r6, r0
 8008c08:	10ad      	asrs	r5, r5, #2
 8008c0a:	d03d      	beq.n	8008c88 <__pow5mult+0xa0>
 8008c0c:	69fc      	ldr	r4, [r7, #28]
 8008c0e:	b97c      	cbnz	r4, 8008c30 <__pow5mult+0x48>
 8008c10:	2010      	movs	r0, #16
 8008c12:	f7ff fd7f 	bl	8008714 <malloc>
 8008c16:	4602      	mov	r2, r0
 8008c18:	61f8      	str	r0, [r7, #28]
 8008c1a:	b928      	cbnz	r0, 8008c28 <__pow5mult+0x40>
 8008c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c94 <__pow5mult+0xac>)
 8008c1e:	481e      	ldr	r0, [pc, #120]	@ (8008c98 <__pow5mult+0xb0>)
 8008c20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c24:	f000 fbea 	bl	80093fc <__assert_func>
 8008c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c2c:	6004      	str	r4, [r0, #0]
 8008c2e:	60c4      	str	r4, [r0, #12]
 8008c30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c38:	b94c      	cbnz	r4, 8008c4e <__pow5mult+0x66>
 8008c3a:	f240 2171 	movw	r1, #625	@ 0x271
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f7ff ff12 	bl	8008a68 <__i2b>
 8008c44:	2300      	movs	r3, #0
 8008c46:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	6003      	str	r3, [r0, #0]
 8008c4e:	f04f 0900 	mov.w	r9, #0
 8008c52:	07eb      	lsls	r3, r5, #31
 8008c54:	d50a      	bpl.n	8008c6c <__pow5mult+0x84>
 8008c56:	4631      	mov	r1, r6
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f7ff ff1a 	bl	8008a94 <__multiply>
 8008c60:	4631      	mov	r1, r6
 8008c62:	4680      	mov	r8, r0
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff fe4b 	bl	8008900 <_Bfree>
 8008c6a:	4646      	mov	r6, r8
 8008c6c:	106d      	asrs	r5, r5, #1
 8008c6e:	d00b      	beq.n	8008c88 <__pow5mult+0xa0>
 8008c70:	6820      	ldr	r0, [r4, #0]
 8008c72:	b938      	cbnz	r0, 8008c84 <__pow5mult+0x9c>
 8008c74:	4622      	mov	r2, r4
 8008c76:	4621      	mov	r1, r4
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7ff ff0b 	bl	8008a94 <__multiply>
 8008c7e:	6020      	str	r0, [r4, #0]
 8008c80:	f8c0 9000 	str.w	r9, [r0]
 8008c84:	4604      	mov	r4, r0
 8008c86:	e7e4      	b.n	8008c52 <__pow5mult+0x6a>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8e:	bf00      	nop
 8008c90:	0801d0a0 	.word	0x0801d0a0
 8008c94:	0801cfc5 	.word	0x0801cfc5
 8008c98:	0801d045 	.word	0x0801d045

08008c9c <__lshift>:
 8008c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	6849      	ldr	r1, [r1, #4]
 8008ca4:	6923      	ldr	r3, [r4, #16]
 8008ca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	4607      	mov	r7, r0
 8008cae:	4691      	mov	r9, r2
 8008cb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cb4:	f108 0601 	add.w	r6, r8, #1
 8008cb8:	42b3      	cmp	r3, r6
 8008cba:	db0b      	blt.n	8008cd4 <__lshift+0x38>
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f7ff fddf 	bl	8008880 <_Balloc>
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	b948      	cbnz	r0, 8008cda <__lshift+0x3e>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	4b28      	ldr	r3, [pc, #160]	@ (8008d6c <__lshift+0xd0>)
 8008cca:	4829      	ldr	r0, [pc, #164]	@ (8008d70 <__lshift+0xd4>)
 8008ccc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cd0:	f000 fb94 	bl	80093fc <__assert_func>
 8008cd4:	3101      	adds	r1, #1
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	e7ee      	b.n	8008cb8 <__lshift+0x1c>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f100 0114 	add.w	r1, r0, #20
 8008ce0:	f100 0210 	add.w	r2, r0, #16
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	4553      	cmp	r3, sl
 8008ce8:	db33      	blt.n	8008d52 <__lshift+0xb6>
 8008cea:	6920      	ldr	r0, [r4, #16]
 8008cec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cf0:	f104 0314 	add.w	r3, r4, #20
 8008cf4:	f019 091f 	ands.w	r9, r9, #31
 8008cf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d00:	d02b      	beq.n	8008d5a <__lshift+0xbe>
 8008d02:	f1c9 0e20 	rsb	lr, r9, #32
 8008d06:	468a      	mov	sl, r1
 8008d08:	2200      	movs	r2, #0
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	fa00 f009 	lsl.w	r0, r0, r9
 8008d10:	4310      	orrs	r0, r2
 8008d12:	f84a 0b04 	str.w	r0, [sl], #4
 8008d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1a:	459c      	cmp	ip, r3
 8008d1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d20:	d8f3      	bhi.n	8008d0a <__lshift+0x6e>
 8008d22:	ebac 0304 	sub.w	r3, ip, r4
 8008d26:	3b15      	subs	r3, #21
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	f104 0015 	add.w	r0, r4, #21
 8008d32:	4584      	cmp	ip, r0
 8008d34:	bf38      	it	cc
 8008d36:	2304      	movcc	r3, #4
 8008d38:	50ca      	str	r2, [r1, r3]
 8008d3a:	b10a      	cbz	r2, 8008d40 <__lshift+0xa4>
 8008d3c:	f108 0602 	add.w	r6, r8, #2
 8008d40:	3e01      	subs	r6, #1
 8008d42:	4638      	mov	r0, r7
 8008d44:	612e      	str	r6, [r5, #16]
 8008d46:	4621      	mov	r1, r4
 8008d48:	f7ff fdda 	bl	8008900 <_Bfree>
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d52:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d56:	3301      	adds	r3, #1
 8008d58:	e7c5      	b.n	8008ce6 <__lshift+0x4a>
 8008d5a:	3904      	subs	r1, #4
 8008d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d60:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d64:	459c      	cmp	ip, r3
 8008d66:	d8f9      	bhi.n	8008d5c <__lshift+0xc0>
 8008d68:	e7ea      	b.n	8008d40 <__lshift+0xa4>
 8008d6a:	bf00      	nop
 8008d6c:	0801d034 	.word	0x0801d034
 8008d70:	0801d045 	.word	0x0801d045

08008d74 <__mcmp>:
 8008d74:	690a      	ldr	r2, [r1, #16]
 8008d76:	4603      	mov	r3, r0
 8008d78:	6900      	ldr	r0, [r0, #16]
 8008d7a:	1a80      	subs	r0, r0, r2
 8008d7c:	b530      	push	{r4, r5, lr}
 8008d7e:	d10e      	bne.n	8008d9e <__mcmp+0x2a>
 8008d80:	3314      	adds	r3, #20
 8008d82:	3114      	adds	r1, #20
 8008d84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d94:	4295      	cmp	r5, r2
 8008d96:	d003      	beq.n	8008da0 <__mcmp+0x2c>
 8008d98:	d205      	bcs.n	8008da6 <__mcmp+0x32>
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	bd30      	pop	{r4, r5, pc}
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	d3f3      	bcc.n	8008d8c <__mcmp+0x18>
 8008da4:	e7fb      	b.n	8008d9e <__mcmp+0x2a>
 8008da6:	2001      	movs	r0, #1
 8008da8:	e7f9      	b.n	8008d9e <__mcmp+0x2a>
	...

08008dac <__mdiff>:
 8008dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	4689      	mov	r9, r1
 8008db2:	4606      	mov	r6, r0
 8008db4:	4611      	mov	r1, r2
 8008db6:	4648      	mov	r0, r9
 8008db8:	4614      	mov	r4, r2
 8008dba:	f7ff ffdb 	bl	8008d74 <__mcmp>
 8008dbe:	1e05      	subs	r5, r0, #0
 8008dc0:	d112      	bne.n	8008de8 <__mdiff+0x3c>
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f7ff fd5b 	bl	8008880 <_Balloc>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	b928      	cbnz	r0, 8008dda <__mdiff+0x2e>
 8008dce:	4b3f      	ldr	r3, [pc, #252]	@ (8008ecc <__mdiff+0x120>)
 8008dd0:	f240 2137 	movw	r1, #567	@ 0x237
 8008dd4:	483e      	ldr	r0, [pc, #248]	@ (8008ed0 <__mdiff+0x124>)
 8008dd6:	f000 fb11 	bl	80093fc <__assert_func>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008de0:	4610      	mov	r0, r2
 8008de2:	b003      	add	sp, #12
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de8:	bfbc      	itt	lt
 8008dea:	464b      	movlt	r3, r9
 8008dec:	46a1      	movlt	r9, r4
 8008dee:	4630      	mov	r0, r6
 8008df0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008df4:	bfba      	itte	lt
 8008df6:	461c      	movlt	r4, r3
 8008df8:	2501      	movlt	r5, #1
 8008dfa:	2500      	movge	r5, #0
 8008dfc:	f7ff fd40 	bl	8008880 <_Balloc>
 8008e00:	4602      	mov	r2, r0
 8008e02:	b918      	cbnz	r0, 8008e0c <__mdiff+0x60>
 8008e04:	4b31      	ldr	r3, [pc, #196]	@ (8008ecc <__mdiff+0x120>)
 8008e06:	f240 2145 	movw	r1, #581	@ 0x245
 8008e0a:	e7e3      	b.n	8008dd4 <__mdiff+0x28>
 8008e0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e10:	6926      	ldr	r6, [r4, #16]
 8008e12:	60c5      	str	r5, [r0, #12]
 8008e14:	f109 0310 	add.w	r3, r9, #16
 8008e18:	f109 0514 	add.w	r5, r9, #20
 8008e1c:	f104 0e14 	add.w	lr, r4, #20
 8008e20:	f100 0b14 	add.w	fp, r0, #20
 8008e24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	46d9      	mov	r9, fp
 8008e30:	f04f 0c00 	mov.w	ip, #0
 8008e34:	9b01      	ldr	r3, [sp, #4]
 8008e36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	fa1f f38a 	uxth.w	r3, sl
 8008e44:	4619      	mov	r1, r3
 8008e46:	b283      	uxth	r3, r0
 8008e48:	1acb      	subs	r3, r1, r3
 8008e4a:	0c00      	lsrs	r0, r0, #16
 8008e4c:	4463      	add	r3, ip
 8008e4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e5c:	4576      	cmp	r6, lr
 8008e5e:	f849 3b04 	str.w	r3, [r9], #4
 8008e62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e66:	d8e5      	bhi.n	8008e34 <__mdiff+0x88>
 8008e68:	1b33      	subs	r3, r6, r4
 8008e6a:	3b15      	subs	r3, #21
 8008e6c:	f023 0303 	bic.w	r3, r3, #3
 8008e70:	3415      	adds	r4, #21
 8008e72:	3304      	adds	r3, #4
 8008e74:	42a6      	cmp	r6, r4
 8008e76:	bf38      	it	cc
 8008e78:	2304      	movcc	r3, #4
 8008e7a:	441d      	add	r5, r3
 8008e7c:	445b      	add	r3, fp
 8008e7e:	461e      	mov	r6, r3
 8008e80:	462c      	mov	r4, r5
 8008e82:	4544      	cmp	r4, r8
 8008e84:	d30e      	bcc.n	8008ea4 <__mdiff+0xf8>
 8008e86:	f108 0103 	add.w	r1, r8, #3
 8008e8a:	1b49      	subs	r1, r1, r5
 8008e8c:	f021 0103 	bic.w	r1, r1, #3
 8008e90:	3d03      	subs	r5, #3
 8008e92:	45a8      	cmp	r8, r5
 8008e94:	bf38      	it	cc
 8008e96:	2100      	movcc	r1, #0
 8008e98:	440b      	add	r3, r1
 8008e9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e9e:	b191      	cbz	r1, 8008ec6 <__mdiff+0x11a>
 8008ea0:	6117      	str	r7, [r2, #16]
 8008ea2:	e79d      	b.n	8008de0 <__mdiff+0x34>
 8008ea4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ea8:	46e6      	mov	lr, ip
 8008eaa:	0c08      	lsrs	r0, r1, #16
 8008eac:	fa1c fc81 	uxtah	ip, ip, r1
 8008eb0:	4471      	add	r1, lr
 8008eb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008eb6:	b289      	uxth	r1, r1
 8008eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ebc:	f846 1b04 	str.w	r1, [r6], #4
 8008ec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ec4:	e7dd      	b.n	8008e82 <__mdiff+0xd6>
 8008ec6:	3f01      	subs	r7, #1
 8008ec8:	e7e7      	b.n	8008e9a <__mdiff+0xee>
 8008eca:	bf00      	nop
 8008ecc:	0801d034 	.word	0x0801d034
 8008ed0:	0801d045 	.word	0x0801d045

08008ed4 <__d2b>:
 8008ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ed8:	460f      	mov	r7, r1
 8008eda:	2101      	movs	r1, #1
 8008edc:	ec59 8b10 	vmov	r8, r9, d0
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	f7ff fccd 	bl	8008880 <_Balloc>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	b930      	cbnz	r0, 8008ef8 <__d2b+0x24>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b23      	ldr	r3, [pc, #140]	@ (8008f7c <__d2b+0xa8>)
 8008eee:	4824      	ldr	r0, [pc, #144]	@ (8008f80 <__d2b+0xac>)
 8008ef0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ef4:	f000 fa82 	bl	80093fc <__assert_func>
 8008ef8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008efc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f00:	b10d      	cbz	r5, 8008f06 <__d2b+0x32>
 8008f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	f1b8 0300 	subs.w	r3, r8, #0
 8008f0c:	d023      	beq.n	8008f56 <__d2b+0x82>
 8008f0e:	4668      	mov	r0, sp
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	f7ff fd7c 	bl	8008a0e <__lo0bits>
 8008f16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f1a:	b1d0      	cbz	r0, 8008f52 <__d2b+0x7e>
 8008f1c:	f1c0 0320 	rsb	r3, r0, #32
 8008f20:	fa02 f303 	lsl.w	r3, r2, r3
 8008f24:	430b      	orrs	r3, r1
 8008f26:	40c2      	lsrs	r2, r0
 8008f28:	6163      	str	r3, [r4, #20]
 8008f2a:	9201      	str	r2, [sp, #4]
 8008f2c:	9b01      	ldr	r3, [sp, #4]
 8008f2e:	61a3      	str	r3, [r4, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bf0c      	ite	eq
 8008f34:	2201      	moveq	r2, #1
 8008f36:	2202      	movne	r2, #2
 8008f38:	6122      	str	r2, [r4, #16]
 8008f3a:	b1a5      	cbz	r5, 8008f66 <__d2b+0x92>
 8008f3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f40:	4405      	add	r5, r0
 8008f42:	603d      	str	r5, [r7, #0]
 8008f44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f48:	6030      	str	r0, [r6, #0]
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	b003      	add	sp, #12
 8008f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f52:	6161      	str	r1, [r4, #20]
 8008f54:	e7ea      	b.n	8008f2c <__d2b+0x58>
 8008f56:	a801      	add	r0, sp, #4
 8008f58:	f7ff fd59 	bl	8008a0e <__lo0bits>
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	6163      	str	r3, [r4, #20]
 8008f60:	3020      	adds	r0, #32
 8008f62:	2201      	movs	r2, #1
 8008f64:	e7e8      	b.n	8008f38 <__d2b+0x64>
 8008f66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f6e:	6038      	str	r0, [r7, #0]
 8008f70:	6918      	ldr	r0, [r3, #16]
 8008f72:	f7ff fd2d 	bl	80089d0 <__hi0bits>
 8008f76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f7a:	e7e5      	b.n	8008f48 <__d2b+0x74>
 8008f7c:	0801d034 	.word	0x0801d034
 8008f80:	0801d045 	.word	0x0801d045

08008f84 <__ssputs_r>:
 8008f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	688e      	ldr	r6, [r1, #8]
 8008f8a:	461f      	mov	r7, r3
 8008f8c:	42be      	cmp	r6, r7
 8008f8e:	680b      	ldr	r3, [r1, #0]
 8008f90:	4682      	mov	sl, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	4690      	mov	r8, r2
 8008f96:	d82d      	bhi.n	8008ff4 <__ssputs_r+0x70>
 8008f98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fa0:	d026      	beq.n	8008ff0 <__ssputs_r+0x6c>
 8008fa2:	6965      	ldr	r5, [r4, #20]
 8008fa4:	6909      	ldr	r1, [r1, #16]
 8008fa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008faa:	eba3 0901 	sub.w	r9, r3, r1
 8008fae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb2:	1c7b      	adds	r3, r7, #1
 8008fb4:	444b      	add	r3, r9
 8008fb6:	106d      	asrs	r5, r5, #1
 8008fb8:	429d      	cmp	r5, r3
 8008fba:	bf38      	it	cc
 8008fbc:	461d      	movcc	r5, r3
 8008fbe:	0553      	lsls	r3, r2, #21
 8008fc0:	d527      	bpl.n	8009012 <__ssputs_r+0x8e>
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	f7ff fbd0 	bl	8008768 <_malloc_r>
 8008fc8:	4606      	mov	r6, r0
 8008fca:	b360      	cbz	r0, 8009026 <__ssputs_r+0xa2>
 8008fcc:	6921      	ldr	r1, [r4, #16]
 8008fce:	464a      	mov	r2, r9
 8008fd0:	f000 fa06 	bl	80093e0 <memcpy>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	6126      	str	r6, [r4, #16]
 8008fe2:	6165      	str	r5, [r4, #20]
 8008fe4:	444e      	add	r6, r9
 8008fe6:	eba5 0509 	sub.w	r5, r5, r9
 8008fea:	6026      	str	r6, [r4, #0]
 8008fec:	60a5      	str	r5, [r4, #8]
 8008fee:	463e      	mov	r6, r7
 8008ff0:	42be      	cmp	r6, r7
 8008ff2:	d900      	bls.n	8008ff6 <__ssputs_r+0x72>
 8008ff4:	463e      	mov	r6, r7
 8008ff6:	6820      	ldr	r0, [r4, #0]
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	f000 f9c6 	bl	800938c <memmove>
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	1b9b      	subs	r3, r3, r6
 8009004:	60a3      	str	r3, [r4, #8]
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	4433      	add	r3, r6
 800900a:	6023      	str	r3, [r4, #0]
 800900c:	2000      	movs	r0, #0
 800900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009012:	462a      	mov	r2, r5
 8009014:	f000 fa36 	bl	8009484 <_realloc_r>
 8009018:	4606      	mov	r6, r0
 800901a:	2800      	cmp	r0, #0
 800901c:	d1e0      	bne.n	8008fe0 <__ssputs_r+0x5c>
 800901e:	6921      	ldr	r1, [r4, #16]
 8009020:	4650      	mov	r0, sl
 8009022:	f7ff fb2d 	bl	8008680 <_free_r>
 8009026:	230c      	movs	r3, #12
 8009028:	f8ca 3000 	str.w	r3, [sl]
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	e7e9      	b.n	800900e <__ssputs_r+0x8a>
	...

0800903c <_svfiprintf_r>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	4698      	mov	r8, r3
 8009042:	898b      	ldrh	r3, [r1, #12]
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	b09d      	sub	sp, #116	@ 0x74
 8009048:	4607      	mov	r7, r0
 800904a:	460d      	mov	r5, r1
 800904c:	4614      	mov	r4, r2
 800904e:	d510      	bpl.n	8009072 <_svfiprintf_r+0x36>
 8009050:	690b      	ldr	r3, [r1, #16]
 8009052:	b973      	cbnz	r3, 8009072 <_svfiprintf_r+0x36>
 8009054:	2140      	movs	r1, #64	@ 0x40
 8009056:	f7ff fb87 	bl	8008768 <_malloc_r>
 800905a:	6028      	str	r0, [r5, #0]
 800905c:	6128      	str	r0, [r5, #16]
 800905e:	b930      	cbnz	r0, 800906e <_svfiprintf_r+0x32>
 8009060:	230c      	movs	r3, #12
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	b01d      	add	sp, #116	@ 0x74
 800906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	2340      	movs	r3, #64	@ 0x40
 8009070:	616b      	str	r3, [r5, #20]
 8009072:	2300      	movs	r3, #0
 8009074:	9309      	str	r3, [sp, #36]	@ 0x24
 8009076:	2320      	movs	r3, #32
 8009078:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800907c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009080:	2330      	movs	r3, #48	@ 0x30
 8009082:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009220 <_svfiprintf_r+0x1e4>
 8009086:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800908a:	f04f 0901 	mov.w	r9, #1
 800908e:	4623      	mov	r3, r4
 8009090:	469a      	mov	sl, r3
 8009092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009096:	b10a      	cbz	r2, 800909c <_svfiprintf_r+0x60>
 8009098:	2a25      	cmp	r2, #37	@ 0x25
 800909a:	d1f9      	bne.n	8009090 <_svfiprintf_r+0x54>
 800909c:	ebba 0b04 	subs.w	fp, sl, r4
 80090a0:	d00b      	beq.n	80090ba <_svfiprintf_r+0x7e>
 80090a2:	465b      	mov	r3, fp
 80090a4:	4622      	mov	r2, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ff6b 	bl	8008f84 <__ssputs_r>
 80090ae:	3001      	adds	r0, #1
 80090b0:	f000 80a7 	beq.w	8009202 <_svfiprintf_r+0x1c6>
 80090b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090b6:	445a      	add	r2, fp
 80090b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ba:	f89a 3000 	ldrb.w	r3, [sl]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 809f 	beq.w	8009202 <_svfiprintf_r+0x1c6>
 80090c4:	2300      	movs	r3, #0
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ce:	f10a 0a01 	add.w	sl, sl, #1
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	9307      	str	r3, [sp, #28]
 80090d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090da:	931a      	str	r3, [sp, #104]	@ 0x68
 80090dc:	4654      	mov	r4, sl
 80090de:	2205      	movs	r2, #5
 80090e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e4:	484e      	ldr	r0, [pc, #312]	@ (8009220 <_svfiprintf_r+0x1e4>)
 80090e6:	f7f7 f8f3 	bl	80002d0 <memchr>
 80090ea:	9a04      	ldr	r2, [sp, #16]
 80090ec:	b9d8      	cbnz	r0, 8009126 <_svfiprintf_r+0xea>
 80090ee:	06d0      	lsls	r0, r2, #27
 80090f0:	bf44      	itt	mi
 80090f2:	2320      	movmi	r3, #32
 80090f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090f8:	0711      	lsls	r1, r2, #28
 80090fa:	bf44      	itt	mi
 80090fc:	232b      	movmi	r3, #43	@ 0x2b
 80090fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009102:	f89a 3000 	ldrb.w	r3, [sl]
 8009106:	2b2a      	cmp	r3, #42	@ 0x2a
 8009108:	d015      	beq.n	8009136 <_svfiprintf_r+0xfa>
 800910a:	9a07      	ldr	r2, [sp, #28]
 800910c:	4654      	mov	r4, sl
 800910e:	2000      	movs	r0, #0
 8009110:	f04f 0c0a 	mov.w	ip, #10
 8009114:	4621      	mov	r1, r4
 8009116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800911a:	3b30      	subs	r3, #48	@ 0x30
 800911c:	2b09      	cmp	r3, #9
 800911e:	d94b      	bls.n	80091b8 <_svfiprintf_r+0x17c>
 8009120:	b1b0      	cbz	r0, 8009150 <_svfiprintf_r+0x114>
 8009122:	9207      	str	r2, [sp, #28]
 8009124:	e014      	b.n	8009150 <_svfiprintf_r+0x114>
 8009126:	eba0 0308 	sub.w	r3, r0, r8
 800912a:	fa09 f303 	lsl.w	r3, r9, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	46a2      	mov	sl, r4
 8009134:	e7d2      	b.n	80090dc <_svfiprintf_r+0xa0>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	1d19      	adds	r1, r3, #4
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	9103      	str	r1, [sp, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfbb      	ittet	lt
 8009142:	425b      	neglt	r3, r3
 8009144:	f042 0202 	orrlt.w	r2, r2, #2
 8009148:	9307      	strge	r3, [sp, #28]
 800914a:	9307      	strlt	r3, [sp, #28]
 800914c:	bfb8      	it	lt
 800914e:	9204      	strlt	r2, [sp, #16]
 8009150:	7823      	ldrb	r3, [r4, #0]
 8009152:	2b2e      	cmp	r3, #46	@ 0x2e
 8009154:	d10a      	bne.n	800916c <_svfiprintf_r+0x130>
 8009156:	7863      	ldrb	r3, [r4, #1]
 8009158:	2b2a      	cmp	r3, #42	@ 0x2a
 800915a:	d132      	bne.n	80091c2 <_svfiprintf_r+0x186>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	1d1a      	adds	r2, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	9203      	str	r2, [sp, #12]
 8009164:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009168:	3402      	adds	r4, #2
 800916a:	9305      	str	r3, [sp, #20]
 800916c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009230 <_svfiprintf_r+0x1f4>
 8009170:	7821      	ldrb	r1, [r4, #0]
 8009172:	2203      	movs	r2, #3
 8009174:	4650      	mov	r0, sl
 8009176:	f7f7 f8ab 	bl	80002d0 <memchr>
 800917a:	b138      	cbz	r0, 800918c <_svfiprintf_r+0x150>
 800917c:	9b04      	ldr	r3, [sp, #16]
 800917e:	eba0 000a 	sub.w	r0, r0, sl
 8009182:	2240      	movs	r2, #64	@ 0x40
 8009184:	4082      	lsls	r2, r0
 8009186:	4313      	orrs	r3, r2
 8009188:	3401      	adds	r4, #1
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009190:	4824      	ldr	r0, [pc, #144]	@ (8009224 <_svfiprintf_r+0x1e8>)
 8009192:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009196:	2206      	movs	r2, #6
 8009198:	f7f7 f89a 	bl	80002d0 <memchr>
 800919c:	2800      	cmp	r0, #0
 800919e:	d036      	beq.n	800920e <_svfiprintf_r+0x1d2>
 80091a0:	4b21      	ldr	r3, [pc, #132]	@ (8009228 <_svfiprintf_r+0x1ec>)
 80091a2:	bb1b      	cbnz	r3, 80091ec <_svfiprintf_r+0x1b0>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	3307      	adds	r3, #7
 80091a8:	f023 0307 	bic.w	r3, r3, #7
 80091ac:	3308      	adds	r3, #8
 80091ae:	9303      	str	r3, [sp, #12]
 80091b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b2:	4433      	add	r3, r6
 80091b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b6:	e76a      	b.n	800908e <_svfiprintf_r+0x52>
 80091b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091bc:	460c      	mov	r4, r1
 80091be:	2001      	movs	r0, #1
 80091c0:	e7a8      	b.n	8009114 <_svfiprintf_r+0xd8>
 80091c2:	2300      	movs	r3, #0
 80091c4:	3401      	adds	r4, #1
 80091c6:	9305      	str	r3, [sp, #20]
 80091c8:	4619      	mov	r1, r3
 80091ca:	f04f 0c0a 	mov.w	ip, #10
 80091ce:	4620      	mov	r0, r4
 80091d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d4:	3a30      	subs	r2, #48	@ 0x30
 80091d6:	2a09      	cmp	r2, #9
 80091d8:	d903      	bls.n	80091e2 <_svfiprintf_r+0x1a6>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0c6      	beq.n	800916c <_svfiprintf_r+0x130>
 80091de:	9105      	str	r1, [sp, #20]
 80091e0:	e7c4      	b.n	800916c <_svfiprintf_r+0x130>
 80091e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e6:	4604      	mov	r4, r0
 80091e8:	2301      	movs	r3, #1
 80091ea:	e7f0      	b.n	80091ce <_svfiprintf_r+0x192>
 80091ec:	ab03      	add	r3, sp, #12
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	462a      	mov	r2, r5
 80091f2:	4b0e      	ldr	r3, [pc, #56]	@ (800922c <_svfiprintf_r+0x1f0>)
 80091f4:	a904      	add	r1, sp, #16
 80091f6:	4638      	mov	r0, r7
 80091f8:	f7fd fe96 	bl	8006f28 <_printf_float>
 80091fc:	1c42      	adds	r2, r0, #1
 80091fe:	4606      	mov	r6, r0
 8009200:	d1d6      	bne.n	80091b0 <_svfiprintf_r+0x174>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	065b      	lsls	r3, r3, #25
 8009206:	f53f af2d 	bmi.w	8009064 <_svfiprintf_r+0x28>
 800920a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800920c:	e72c      	b.n	8009068 <_svfiprintf_r+0x2c>
 800920e:	ab03      	add	r3, sp, #12
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	462a      	mov	r2, r5
 8009214:	4b05      	ldr	r3, [pc, #20]	@ (800922c <_svfiprintf_r+0x1f0>)
 8009216:	a904      	add	r1, sp, #16
 8009218:	4638      	mov	r0, r7
 800921a:	f7fe f91d 	bl	8007458 <_printf_i>
 800921e:	e7ed      	b.n	80091fc <_svfiprintf_r+0x1c0>
 8009220:	0801d1a0 	.word	0x0801d1a0
 8009224:	0801d1aa 	.word	0x0801d1aa
 8009228:	08006f29 	.word	0x08006f29
 800922c:	08008f85 	.word	0x08008f85
 8009230:	0801d1a6 	.word	0x0801d1a6

08009234 <__sflush_r>:
 8009234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800923c:	0716      	lsls	r6, r2, #28
 800923e:	4605      	mov	r5, r0
 8009240:	460c      	mov	r4, r1
 8009242:	d454      	bmi.n	80092ee <__sflush_r+0xba>
 8009244:	684b      	ldr	r3, [r1, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	dc02      	bgt.n	8009250 <__sflush_r+0x1c>
 800924a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd48      	ble.n	80092e2 <__sflush_r+0xae>
 8009250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009252:	2e00      	cmp	r6, #0
 8009254:	d045      	beq.n	80092e2 <__sflush_r+0xae>
 8009256:	2300      	movs	r3, #0
 8009258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800925c:	682f      	ldr	r7, [r5, #0]
 800925e:	6a21      	ldr	r1, [r4, #32]
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	d030      	beq.n	80092c6 <__sflush_r+0x92>
 8009264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009266:	89a3      	ldrh	r3, [r4, #12]
 8009268:	0759      	lsls	r1, r3, #29
 800926a:	d505      	bpl.n	8009278 <__sflush_r+0x44>
 800926c:	6863      	ldr	r3, [r4, #4]
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009272:	b10b      	cbz	r3, 8009278 <__sflush_r+0x44>
 8009274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009276:	1ad2      	subs	r2, r2, r3
 8009278:	2300      	movs	r3, #0
 800927a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800927c:	6a21      	ldr	r1, [r4, #32]
 800927e:	4628      	mov	r0, r5
 8009280:	47b0      	blx	r6
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	d106      	bne.n	8009296 <__sflush_r+0x62>
 8009288:	6829      	ldr	r1, [r5, #0]
 800928a:	291d      	cmp	r1, #29
 800928c:	d82b      	bhi.n	80092e6 <__sflush_r+0xb2>
 800928e:	4a2a      	ldr	r2, [pc, #168]	@ (8009338 <__sflush_r+0x104>)
 8009290:	410a      	asrs	r2, r1
 8009292:	07d6      	lsls	r6, r2, #31
 8009294:	d427      	bmi.n	80092e6 <__sflush_r+0xb2>
 8009296:	2200      	movs	r2, #0
 8009298:	6062      	str	r2, [r4, #4]
 800929a:	04d9      	lsls	r1, r3, #19
 800929c:	6922      	ldr	r2, [r4, #16]
 800929e:	6022      	str	r2, [r4, #0]
 80092a0:	d504      	bpl.n	80092ac <__sflush_r+0x78>
 80092a2:	1c42      	adds	r2, r0, #1
 80092a4:	d101      	bne.n	80092aa <__sflush_r+0x76>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	b903      	cbnz	r3, 80092ac <__sflush_r+0x78>
 80092aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80092ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092ae:	602f      	str	r7, [r5, #0]
 80092b0:	b1b9      	cbz	r1, 80092e2 <__sflush_r+0xae>
 80092b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092b6:	4299      	cmp	r1, r3
 80092b8:	d002      	beq.n	80092c0 <__sflush_r+0x8c>
 80092ba:	4628      	mov	r0, r5
 80092bc:	f7ff f9e0 	bl	8008680 <_free_r>
 80092c0:	2300      	movs	r3, #0
 80092c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80092c4:	e00d      	b.n	80092e2 <__sflush_r+0xae>
 80092c6:	2301      	movs	r3, #1
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b0      	blx	r6
 80092cc:	4602      	mov	r2, r0
 80092ce:	1c50      	adds	r0, r2, #1
 80092d0:	d1c9      	bne.n	8009266 <__sflush_r+0x32>
 80092d2:	682b      	ldr	r3, [r5, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0c6      	beq.n	8009266 <__sflush_r+0x32>
 80092d8:	2b1d      	cmp	r3, #29
 80092da:	d001      	beq.n	80092e0 <__sflush_r+0xac>
 80092dc:	2b16      	cmp	r3, #22
 80092de:	d11e      	bne.n	800931e <__sflush_r+0xea>
 80092e0:	602f      	str	r7, [r5, #0]
 80092e2:	2000      	movs	r0, #0
 80092e4:	e022      	b.n	800932c <__sflush_r+0xf8>
 80092e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ea:	b21b      	sxth	r3, r3
 80092ec:	e01b      	b.n	8009326 <__sflush_r+0xf2>
 80092ee:	690f      	ldr	r7, [r1, #16]
 80092f0:	2f00      	cmp	r7, #0
 80092f2:	d0f6      	beq.n	80092e2 <__sflush_r+0xae>
 80092f4:	0793      	lsls	r3, r2, #30
 80092f6:	680e      	ldr	r6, [r1, #0]
 80092f8:	bf08      	it	eq
 80092fa:	694b      	ldreq	r3, [r1, #20]
 80092fc:	600f      	str	r7, [r1, #0]
 80092fe:	bf18      	it	ne
 8009300:	2300      	movne	r3, #0
 8009302:	eba6 0807 	sub.w	r8, r6, r7
 8009306:	608b      	str	r3, [r1, #8]
 8009308:	f1b8 0f00 	cmp.w	r8, #0
 800930c:	dde9      	ble.n	80092e2 <__sflush_r+0xae>
 800930e:	6a21      	ldr	r1, [r4, #32]
 8009310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009312:	4643      	mov	r3, r8
 8009314:	463a      	mov	r2, r7
 8009316:	4628      	mov	r0, r5
 8009318:	47b0      	blx	r6
 800931a:	2800      	cmp	r0, #0
 800931c:	dc08      	bgt.n	8009330 <__sflush_r+0xfc>
 800931e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	f04f 30ff 	mov.w	r0, #4294967295
 800932c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009330:	4407      	add	r7, r0
 8009332:	eba8 0800 	sub.w	r8, r8, r0
 8009336:	e7e7      	b.n	8009308 <__sflush_r+0xd4>
 8009338:	dfbffffe 	.word	0xdfbffffe

0800933c <_fflush_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	690b      	ldr	r3, [r1, #16]
 8009340:	4605      	mov	r5, r0
 8009342:	460c      	mov	r4, r1
 8009344:	b913      	cbnz	r3, 800934c <_fflush_r+0x10>
 8009346:	2500      	movs	r5, #0
 8009348:	4628      	mov	r0, r5
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	b118      	cbz	r0, 8009356 <_fflush_r+0x1a>
 800934e:	6a03      	ldr	r3, [r0, #32]
 8009350:	b90b      	cbnz	r3, 8009356 <_fflush_r+0x1a>
 8009352:	f7fe fa2d 	bl	80077b0 <__sinit>
 8009356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0f3      	beq.n	8009346 <_fflush_r+0xa>
 800935e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009360:	07d0      	lsls	r0, r2, #31
 8009362:	d404      	bmi.n	800936e <_fflush_r+0x32>
 8009364:	0599      	lsls	r1, r3, #22
 8009366:	d402      	bmi.n	800936e <_fflush_r+0x32>
 8009368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800936a:	f7fe fb38 	bl	80079de <__retarget_lock_acquire_recursive>
 800936e:	4628      	mov	r0, r5
 8009370:	4621      	mov	r1, r4
 8009372:	f7ff ff5f 	bl	8009234 <__sflush_r>
 8009376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009378:	07da      	lsls	r2, r3, #31
 800937a:	4605      	mov	r5, r0
 800937c:	d4e4      	bmi.n	8009348 <_fflush_r+0xc>
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	059b      	lsls	r3, r3, #22
 8009382:	d4e1      	bmi.n	8009348 <_fflush_r+0xc>
 8009384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009386:	f7fe fb2b 	bl	80079e0 <__retarget_lock_release_recursive>
 800938a:	e7dd      	b.n	8009348 <_fflush_r+0xc>

0800938c <memmove>:
 800938c:	4288      	cmp	r0, r1
 800938e:	b510      	push	{r4, lr}
 8009390:	eb01 0402 	add.w	r4, r1, r2
 8009394:	d902      	bls.n	800939c <memmove+0x10>
 8009396:	4284      	cmp	r4, r0
 8009398:	4623      	mov	r3, r4
 800939a:	d807      	bhi.n	80093ac <memmove+0x20>
 800939c:	1e43      	subs	r3, r0, #1
 800939e:	42a1      	cmp	r1, r4
 80093a0:	d008      	beq.n	80093b4 <memmove+0x28>
 80093a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093aa:	e7f8      	b.n	800939e <memmove+0x12>
 80093ac:	4402      	add	r2, r0
 80093ae:	4601      	mov	r1, r0
 80093b0:	428a      	cmp	r2, r1
 80093b2:	d100      	bne.n	80093b6 <memmove+0x2a>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093be:	e7f7      	b.n	80093b0 <memmove+0x24>

080093c0 <_sbrk_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d06      	ldr	r5, [pc, #24]	@ (80093dc <_sbrk_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7f8 fc0e 	bl	8001bec <_sbrk>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_sbrk_r+0x1a>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_sbrk_r+0x1a>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	200099b8 	.word	0x200099b8

080093e0 <memcpy>:
 80093e0:	440a      	add	r2, r1
 80093e2:	4291      	cmp	r1, r2
 80093e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093e8:	d100      	bne.n	80093ec <memcpy+0xc>
 80093ea:	4770      	bx	lr
 80093ec:	b510      	push	{r4, lr}
 80093ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f6:	4291      	cmp	r1, r2
 80093f8:	d1f9      	bne.n	80093ee <memcpy+0xe>
 80093fa:	bd10      	pop	{r4, pc}

080093fc <__assert_func>:
 80093fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093fe:	4614      	mov	r4, r2
 8009400:	461a      	mov	r2, r3
 8009402:	4b09      	ldr	r3, [pc, #36]	@ (8009428 <__assert_func+0x2c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4605      	mov	r5, r0
 8009408:	68d8      	ldr	r0, [r3, #12]
 800940a:	b954      	cbnz	r4, 8009422 <__assert_func+0x26>
 800940c:	4b07      	ldr	r3, [pc, #28]	@ (800942c <__assert_func+0x30>)
 800940e:	461c      	mov	r4, r3
 8009410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009414:	9100      	str	r1, [sp, #0]
 8009416:	462b      	mov	r3, r5
 8009418:	4905      	ldr	r1, [pc, #20]	@ (8009430 <__assert_func+0x34>)
 800941a:	f000 f86f 	bl	80094fc <fiprintf>
 800941e:	f000 f87f 	bl	8009520 <abort>
 8009422:	4b04      	ldr	r3, [pc, #16]	@ (8009434 <__assert_func+0x38>)
 8009424:	e7f4      	b.n	8009410 <__assert_func+0x14>
 8009426:	bf00      	nop
 8009428:	20000018 	.word	0x20000018
 800942c:	0801d1f6 	.word	0x0801d1f6
 8009430:	0801d1c8 	.word	0x0801d1c8
 8009434:	0801d1bb 	.word	0x0801d1bb

08009438 <_calloc_r>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	fba1 5402 	umull	r5, r4, r1, r2
 800943e:	b93c      	cbnz	r4, 8009450 <_calloc_r+0x18>
 8009440:	4629      	mov	r1, r5
 8009442:	f7ff f991 	bl	8008768 <_malloc_r>
 8009446:	4606      	mov	r6, r0
 8009448:	b928      	cbnz	r0, 8009456 <_calloc_r+0x1e>
 800944a:	2600      	movs	r6, #0
 800944c:	4630      	mov	r0, r6
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	220c      	movs	r2, #12
 8009452:	6002      	str	r2, [r0, #0]
 8009454:	e7f9      	b.n	800944a <_calloc_r+0x12>
 8009456:	462a      	mov	r2, r5
 8009458:	4621      	mov	r1, r4
 800945a:	f7fe fa42 	bl	80078e2 <memset>
 800945e:	e7f5      	b.n	800944c <_calloc_r+0x14>

08009460 <__ascii_mbtowc>:
 8009460:	b082      	sub	sp, #8
 8009462:	b901      	cbnz	r1, 8009466 <__ascii_mbtowc+0x6>
 8009464:	a901      	add	r1, sp, #4
 8009466:	b142      	cbz	r2, 800947a <__ascii_mbtowc+0x1a>
 8009468:	b14b      	cbz	r3, 800947e <__ascii_mbtowc+0x1e>
 800946a:	7813      	ldrb	r3, [r2, #0]
 800946c:	600b      	str	r3, [r1, #0]
 800946e:	7812      	ldrb	r2, [r2, #0]
 8009470:	1e10      	subs	r0, r2, #0
 8009472:	bf18      	it	ne
 8009474:	2001      	movne	r0, #1
 8009476:	b002      	add	sp, #8
 8009478:	4770      	bx	lr
 800947a:	4610      	mov	r0, r2
 800947c:	e7fb      	b.n	8009476 <__ascii_mbtowc+0x16>
 800947e:	f06f 0001 	mvn.w	r0, #1
 8009482:	e7f8      	b.n	8009476 <__ascii_mbtowc+0x16>

08009484 <_realloc_r>:
 8009484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009488:	4680      	mov	r8, r0
 800948a:	4615      	mov	r5, r2
 800948c:	460c      	mov	r4, r1
 800948e:	b921      	cbnz	r1, 800949a <_realloc_r+0x16>
 8009490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	4611      	mov	r1, r2
 8009496:	f7ff b967 	b.w	8008768 <_malloc_r>
 800949a:	b92a      	cbnz	r2, 80094a8 <_realloc_r+0x24>
 800949c:	f7ff f8f0 	bl	8008680 <_free_r>
 80094a0:	2400      	movs	r4, #0
 80094a2:	4620      	mov	r0, r4
 80094a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a8:	f000 f841 	bl	800952e <_malloc_usable_size_r>
 80094ac:	4285      	cmp	r5, r0
 80094ae:	4606      	mov	r6, r0
 80094b0:	d802      	bhi.n	80094b8 <_realloc_r+0x34>
 80094b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80094b6:	d8f4      	bhi.n	80094a2 <_realloc_r+0x1e>
 80094b8:	4629      	mov	r1, r5
 80094ba:	4640      	mov	r0, r8
 80094bc:	f7ff f954 	bl	8008768 <_malloc_r>
 80094c0:	4607      	mov	r7, r0
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d0ec      	beq.n	80094a0 <_realloc_r+0x1c>
 80094c6:	42b5      	cmp	r5, r6
 80094c8:	462a      	mov	r2, r5
 80094ca:	4621      	mov	r1, r4
 80094cc:	bf28      	it	cs
 80094ce:	4632      	movcs	r2, r6
 80094d0:	f7ff ff86 	bl	80093e0 <memcpy>
 80094d4:	4621      	mov	r1, r4
 80094d6:	4640      	mov	r0, r8
 80094d8:	f7ff f8d2 	bl	8008680 <_free_r>
 80094dc:	463c      	mov	r4, r7
 80094de:	e7e0      	b.n	80094a2 <_realloc_r+0x1e>

080094e0 <__ascii_wctomb>:
 80094e0:	4603      	mov	r3, r0
 80094e2:	4608      	mov	r0, r1
 80094e4:	b141      	cbz	r1, 80094f8 <__ascii_wctomb+0x18>
 80094e6:	2aff      	cmp	r2, #255	@ 0xff
 80094e8:	d904      	bls.n	80094f4 <__ascii_wctomb+0x14>
 80094ea:	228a      	movs	r2, #138	@ 0x8a
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	f04f 30ff 	mov.w	r0, #4294967295
 80094f2:	4770      	bx	lr
 80094f4:	700a      	strb	r2, [r1, #0]
 80094f6:	2001      	movs	r0, #1
 80094f8:	4770      	bx	lr
	...

080094fc <fiprintf>:
 80094fc:	b40e      	push	{r1, r2, r3}
 80094fe:	b503      	push	{r0, r1, lr}
 8009500:	4601      	mov	r1, r0
 8009502:	ab03      	add	r3, sp, #12
 8009504:	4805      	ldr	r0, [pc, #20]	@ (800951c <fiprintf+0x20>)
 8009506:	f853 2b04 	ldr.w	r2, [r3], #4
 800950a:	6800      	ldr	r0, [r0, #0]
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	f000 f83f 	bl	8009590 <_vfiprintf_r>
 8009512:	b002      	add	sp, #8
 8009514:	f85d eb04 	ldr.w	lr, [sp], #4
 8009518:	b003      	add	sp, #12
 800951a:	4770      	bx	lr
 800951c:	20000018 	.word	0x20000018

08009520 <abort>:
 8009520:	b508      	push	{r3, lr}
 8009522:	2006      	movs	r0, #6
 8009524:	f000 fa08 	bl	8009938 <raise>
 8009528:	2001      	movs	r0, #1
 800952a:	f7f8 fae7 	bl	8001afc <_exit>

0800952e <_malloc_usable_size_r>:
 800952e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009532:	1f18      	subs	r0, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfbc      	itt	lt
 8009538:	580b      	ldrlt	r3, [r1, r0]
 800953a:	18c0      	addlt	r0, r0, r3
 800953c:	4770      	bx	lr

0800953e <__sfputc_r>:
 800953e:	6893      	ldr	r3, [r2, #8]
 8009540:	3b01      	subs	r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	b410      	push	{r4}
 8009546:	6093      	str	r3, [r2, #8]
 8009548:	da08      	bge.n	800955c <__sfputc_r+0x1e>
 800954a:	6994      	ldr	r4, [r2, #24]
 800954c:	42a3      	cmp	r3, r4
 800954e:	db01      	blt.n	8009554 <__sfputc_r+0x16>
 8009550:	290a      	cmp	r1, #10
 8009552:	d103      	bne.n	800955c <__sfputc_r+0x1e>
 8009554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009558:	f000 b932 	b.w	80097c0 <__swbuf_r>
 800955c:	6813      	ldr	r3, [r2, #0]
 800955e:	1c58      	adds	r0, r3, #1
 8009560:	6010      	str	r0, [r2, #0]
 8009562:	7019      	strb	r1, [r3, #0]
 8009564:	4608      	mov	r0, r1
 8009566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800956a:	4770      	bx	lr

0800956c <__sfputs_r>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	4606      	mov	r6, r0
 8009570:	460f      	mov	r7, r1
 8009572:	4614      	mov	r4, r2
 8009574:	18d5      	adds	r5, r2, r3
 8009576:	42ac      	cmp	r4, r5
 8009578:	d101      	bne.n	800957e <__sfputs_r+0x12>
 800957a:	2000      	movs	r0, #0
 800957c:	e007      	b.n	800958e <__sfputs_r+0x22>
 800957e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009582:	463a      	mov	r2, r7
 8009584:	4630      	mov	r0, r6
 8009586:	f7ff ffda 	bl	800953e <__sfputc_r>
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	d1f3      	bne.n	8009576 <__sfputs_r+0xa>
 800958e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009590 <_vfiprintf_r>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	460d      	mov	r5, r1
 8009596:	b09d      	sub	sp, #116	@ 0x74
 8009598:	4614      	mov	r4, r2
 800959a:	4698      	mov	r8, r3
 800959c:	4606      	mov	r6, r0
 800959e:	b118      	cbz	r0, 80095a8 <_vfiprintf_r+0x18>
 80095a0:	6a03      	ldr	r3, [r0, #32]
 80095a2:	b90b      	cbnz	r3, 80095a8 <_vfiprintf_r+0x18>
 80095a4:	f7fe f904 	bl	80077b0 <__sinit>
 80095a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095aa:	07d9      	lsls	r1, r3, #31
 80095ac:	d405      	bmi.n	80095ba <_vfiprintf_r+0x2a>
 80095ae:	89ab      	ldrh	r3, [r5, #12]
 80095b0:	059a      	lsls	r2, r3, #22
 80095b2:	d402      	bmi.n	80095ba <_vfiprintf_r+0x2a>
 80095b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095b6:	f7fe fa12 	bl	80079de <__retarget_lock_acquire_recursive>
 80095ba:	89ab      	ldrh	r3, [r5, #12]
 80095bc:	071b      	lsls	r3, r3, #28
 80095be:	d501      	bpl.n	80095c4 <_vfiprintf_r+0x34>
 80095c0:	692b      	ldr	r3, [r5, #16]
 80095c2:	b99b      	cbnz	r3, 80095ec <_vfiprintf_r+0x5c>
 80095c4:	4629      	mov	r1, r5
 80095c6:	4630      	mov	r0, r6
 80095c8:	f000 f938 	bl	800983c <__swsetup_r>
 80095cc:	b170      	cbz	r0, 80095ec <_vfiprintf_r+0x5c>
 80095ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095d0:	07dc      	lsls	r4, r3, #31
 80095d2:	d504      	bpl.n	80095de <_vfiprintf_r+0x4e>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	b01d      	add	sp, #116	@ 0x74
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095de:	89ab      	ldrh	r3, [r5, #12]
 80095e0:	0598      	lsls	r0, r3, #22
 80095e2:	d4f7      	bmi.n	80095d4 <_vfiprintf_r+0x44>
 80095e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095e6:	f7fe f9fb 	bl	80079e0 <__retarget_lock_release_recursive>
 80095ea:	e7f3      	b.n	80095d4 <_vfiprintf_r+0x44>
 80095ec:	2300      	movs	r3, #0
 80095ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f0:	2320      	movs	r3, #32
 80095f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095fa:	2330      	movs	r3, #48	@ 0x30
 80095fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80097ac <_vfiprintf_r+0x21c>
 8009600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009604:	f04f 0901 	mov.w	r9, #1
 8009608:	4623      	mov	r3, r4
 800960a:	469a      	mov	sl, r3
 800960c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009610:	b10a      	cbz	r2, 8009616 <_vfiprintf_r+0x86>
 8009612:	2a25      	cmp	r2, #37	@ 0x25
 8009614:	d1f9      	bne.n	800960a <_vfiprintf_r+0x7a>
 8009616:	ebba 0b04 	subs.w	fp, sl, r4
 800961a:	d00b      	beq.n	8009634 <_vfiprintf_r+0xa4>
 800961c:	465b      	mov	r3, fp
 800961e:	4622      	mov	r2, r4
 8009620:	4629      	mov	r1, r5
 8009622:	4630      	mov	r0, r6
 8009624:	f7ff ffa2 	bl	800956c <__sfputs_r>
 8009628:	3001      	adds	r0, #1
 800962a:	f000 80a7 	beq.w	800977c <_vfiprintf_r+0x1ec>
 800962e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009630:	445a      	add	r2, fp
 8009632:	9209      	str	r2, [sp, #36]	@ 0x24
 8009634:	f89a 3000 	ldrb.w	r3, [sl]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 809f 	beq.w	800977c <_vfiprintf_r+0x1ec>
 800963e:	2300      	movs	r3, #0
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009648:	f10a 0a01 	add.w	sl, sl, #1
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	9307      	str	r3, [sp, #28]
 8009650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009654:	931a      	str	r3, [sp, #104]	@ 0x68
 8009656:	4654      	mov	r4, sl
 8009658:	2205      	movs	r2, #5
 800965a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965e:	4853      	ldr	r0, [pc, #332]	@ (80097ac <_vfiprintf_r+0x21c>)
 8009660:	f7f6 fe36 	bl	80002d0 <memchr>
 8009664:	9a04      	ldr	r2, [sp, #16]
 8009666:	b9d8      	cbnz	r0, 80096a0 <_vfiprintf_r+0x110>
 8009668:	06d1      	lsls	r1, r2, #27
 800966a:	bf44      	itt	mi
 800966c:	2320      	movmi	r3, #32
 800966e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009672:	0713      	lsls	r3, r2, #28
 8009674:	bf44      	itt	mi
 8009676:	232b      	movmi	r3, #43	@ 0x2b
 8009678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800967c:	f89a 3000 	ldrb.w	r3, [sl]
 8009680:	2b2a      	cmp	r3, #42	@ 0x2a
 8009682:	d015      	beq.n	80096b0 <_vfiprintf_r+0x120>
 8009684:	9a07      	ldr	r2, [sp, #28]
 8009686:	4654      	mov	r4, sl
 8009688:	2000      	movs	r0, #0
 800968a:	f04f 0c0a 	mov.w	ip, #10
 800968e:	4621      	mov	r1, r4
 8009690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009694:	3b30      	subs	r3, #48	@ 0x30
 8009696:	2b09      	cmp	r3, #9
 8009698:	d94b      	bls.n	8009732 <_vfiprintf_r+0x1a2>
 800969a:	b1b0      	cbz	r0, 80096ca <_vfiprintf_r+0x13a>
 800969c:	9207      	str	r2, [sp, #28]
 800969e:	e014      	b.n	80096ca <_vfiprintf_r+0x13a>
 80096a0:	eba0 0308 	sub.w	r3, r0, r8
 80096a4:	fa09 f303 	lsl.w	r3, r9, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	9304      	str	r3, [sp, #16]
 80096ac:	46a2      	mov	sl, r4
 80096ae:	e7d2      	b.n	8009656 <_vfiprintf_r+0xc6>
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	1d19      	adds	r1, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	9103      	str	r1, [sp, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfbb      	ittet	lt
 80096bc:	425b      	neglt	r3, r3
 80096be:	f042 0202 	orrlt.w	r2, r2, #2
 80096c2:	9307      	strge	r3, [sp, #28]
 80096c4:	9307      	strlt	r3, [sp, #28]
 80096c6:	bfb8      	it	lt
 80096c8:	9204      	strlt	r2, [sp, #16]
 80096ca:	7823      	ldrb	r3, [r4, #0]
 80096cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80096ce:	d10a      	bne.n	80096e6 <_vfiprintf_r+0x156>
 80096d0:	7863      	ldrb	r3, [r4, #1]
 80096d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096d4:	d132      	bne.n	800973c <_vfiprintf_r+0x1ac>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	9203      	str	r2, [sp, #12]
 80096de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096e2:	3402      	adds	r4, #2
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097bc <_vfiprintf_r+0x22c>
 80096ea:	7821      	ldrb	r1, [r4, #0]
 80096ec:	2203      	movs	r2, #3
 80096ee:	4650      	mov	r0, sl
 80096f0:	f7f6 fdee 	bl	80002d0 <memchr>
 80096f4:	b138      	cbz	r0, 8009706 <_vfiprintf_r+0x176>
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	eba0 000a 	sub.w	r0, r0, sl
 80096fc:	2240      	movs	r2, #64	@ 0x40
 80096fe:	4082      	lsls	r2, r0
 8009700:	4313      	orrs	r3, r2
 8009702:	3401      	adds	r4, #1
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970a:	4829      	ldr	r0, [pc, #164]	@ (80097b0 <_vfiprintf_r+0x220>)
 800970c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009710:	2206      	movs	r2, #6
 8009712:	f7f6 fddd 	bl	80002d0 <memchr>
 8009716:	2800      	cmp	r0, #0
 8009718:	d03f      	beq.n	800979a <_vfiprintf_r+0x20a>
 800971a:	4b26      	ldr	r3, [pc, #152]	@ (80097b4 <_vfiprintf_r+0x224>)
 800971c:	bb1b      	cbnz	r3, 8009766 <_vfiprintf_r+0x1d6>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	3307      	adds	r3, #7
 8009722:	f023 0307 	bic.w	r3, r3, #7
 8009726:	3308      	adds	r3, #8
 8009728:	9303      	str	r3, [sp, #12]
 800972a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800972c:	443b      	add	r3, r7
 800972e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009730:	e76a      	b.n	8009608 <_vfiprintf_r+0x78>
 8009732:	fb0c 3202 	mla	r2, ip, r2, r3
 8009736:	460c      	mov	r4, r1
 8009738:	2001      	movs	r0, #1
 800973a:	e7a8      	b.n	800968e <_vfiprintf_r+0xfe>
 800973c:	2300      	movs	r3, #0
 800973e:	3401      	adds	r4, #1
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	4619      	mov	r1, r3
 8009744:	f04f 0c0a 	mov.w	ip, #10
 8009748:	4620      	mov	r0, r4
 800974a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974e:	3a30      	subs	r2, #48	@ 0x30
 8009750:	2a09      	cmp	r2, #9
 8009752:	d903      	bls.n	800975c <_vfiprintf_r+0x1cc>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0c6      	beq.n	80096e6 <_vfiprintf_r+0x156>
 8009758:	9105      	str	r1, [sp, #20]
 800975a:	e7c4      	b.n	80096e6 <_vfiprintf_r+0x156>
 800975c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009760:	4604      	mov	r4, r0
 8009762:	2301      	movs	r3, #1
 8009764:	e7f0      	b.n	8009748 <_vfiprintf_r+0x1b8>
 8009766:	ab03      	add	r3, sp, #12
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	462a      	mov	r2, r5
 800976c:	4b12      	ldr	r3, [pc, #72]	@ (80097b8 <_vfiprintf_r+0x228>)
 800976e:	a904      	add	r1, sp, #16
 8009770:	4630      	mov	r0, r6
 8009772:	f7fd fbd9 	bl	8006f28 <_printf_float>
 8009776:	4607      	mov	r7, r0
 8009778:	1c78      	adds	r0, r7, #1
 800977a:	d1d6      	bne.n	800972a <_vfiprintf_r+0x19a>
 800977c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800977e:	07d9      	lsls	r1, r3, #31
 8009780:	d405      	bmi.n	800978e <_vfiprintf_r+0x1fe>
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	059a      	lsls	r2, r3, #22
 8009786:	d402      	bmi.n	800978e <_vfiprintf_r+0x1fe>
 8009788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800978a:	f7fe f929 	bl	80079e0 <__retarget_lock_release_recursive>
 800978e:	89ab      	ldrh	r3, [r5, #12]
 8009790:	065b      	lsls	r3, r3, #25
 8009792:	f53f af1f 	bmi.w	80095d4 <_vfiprintf_r+0x44>
 8009796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009798:	e71e      	b.n	80095d8 <_vfiprintf_r+0x48>
 800979a:	ab03      	add	r3, sp, #12
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	462a      	mov	r2, r5
 80097a0:	4b05      	ldr	r3, [pc, #20]	@ (80097b8 <_vfiprintf_r+0x228>)
 80097a2:	a904      	add	r1, sp, #16
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7fd fe57 	bl	8007458 <_printf_i>
 80097aa:	e7e4      	b.n	8009776 <_vfiprintf_r+0x1e6>
 80097ac:	0801d1a0 	.word	0x0801d1a0
 80097b0:	0801d1aa 	.word	0x0801d1aa
 80097b4:	08006f29 	.word	0x08006f29
 80097b8:	0800956d 	.word	0x0800956d
 80097bc:	0801d1a6 	.word	0x0801d1a6

080097c0 <__swbuf_r>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	460e      	mov	r6, r1
 80097c4:	4614      	mov	r4, r2
 80097c6:	4605      	mov	r5, r0
 80097c8:	b118      	cbz	r0, 80097d2 <__swbuf_r+0x12>
 80097ca:	6a03      	ldr	r3, [r0, #32]
 80097cc:	b90b      	cbnz	r3, 80097d2 <__swbuf_r+0x12>
 80097ce:	f7fd ffef 	bl	80077b0 <__sinit>
 80097d2:	69a3      	ldr	r3, [r4, #24]
 80097d4:	60a3      	str	r3, [r4, #8]
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	071a      	lsls	r2, r3, #28
 80097da:	d501      	bpl.n	80097e0 <__swbuf_r+0x20>
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	b943      	cbnz	r3, 80097f2 <__swbuf_r+0x32>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	f000 f82a 	bl	800983c <__swsetup_r>
 80097e8:	b118      	cbz	r0, 80097f2 <__swbuf_r+0x32>
 80097ea:	f04f 37ff 	mov.w	r7, #4294967295
 80097ee:	4638      	mov	r0, r7
 80097f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	1a98      	subs	r0, r3, r2
 80097f8:	6963      	ldr	r3, [r4, #20]
 80097fa:	b2f6      	uxtb	r6, r6
 80097fc:	4283      	cmp	r3, r0
 80097fe:	4637      	mov	r7, r6
 8009800:	dc05      	bgt.n	800980e <__swbuf_r+0x4e>
 8009802:	4621      	mov	r1, r4
 8009804:	4628      	mov	r0, r5
 8009806:	f7ff fd99 	bl	800933c <_fflush_r>
 800980a:	2800      	cmp	r0, #0
 800980c:	d1ed      	bne.n	80097ea <__swbuf_r+0x2a>
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	3b01      	subs	r3, #1
 8009812:	60a3      	str	r3, [r4, #8]
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	6022      	str	r2, [r4, #0]
 800981a:	701e      	strb	r6, [r3, #0]
 800981c:	6962      	ldr	r2, [r4, #20]
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	429a      	cmp	r2, r3
 8009822:	d004      	beq.n	800982e <__swbuf_r+0x6e>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	07db      	lsls	r3, r3, #31
 8009828:	d5e1      	bpl.n	80097ee <__swbuf_r+0x2e>
 800982a:	2e0a      	cmp	r6, #10
 800982c:	d1df      	bne.n	80097ee <__swbuf_r+0x2e>
 800982e:	4621      	mov	r1, r4
 8009830:	4628      	mov	r0, r5
 8009832:	f7ff fd83 	bl	800933c <_fflush_r>
 8009836:	2800      	cmp	r0, #0
 8009838:	d0d9      	beq.n	80097ee <__swbuf_r+0x2e>
 800983a:	e7d6      	b.n	80097ea <__swbuf_r+0x2a>

0800983c <__swsetup_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4b29      	ldr	r3, [pc, #164]	@ (80098e4 <__swsetup_r+0xa8>)
 8009840:	4605      	mov	r5, r0
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	460c      	mov	r4, r1
 8009846:	b118      	cbz	r0, 8009850 <__swsetup_r+0x14>
 8009848:	6a03      	ldr	r3, [r0, #32]
 800984a:	b90b      	cbnz	r3, 8009850 <__swsetup_r+0x14>
 800984c:	f7fd ffb0 	bl	80077b0 <__sinit>
 8009850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009854:	0719      	lsls	r1, r3, #28
 8009856:	d422      	bmi.n	800989e <__swsetup_r+0x62>
 8009858:	06da      	lsls	r2, r3, #27
 800985a:	d407      	bmi.n	800986c <__swsetup_r+0x30>
 800985c:	2209      	movs	r2, #9
 800985e:	602a      	str	r2, [r5, #0]
 8009860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	f04f 30ff 	mov.w	r0, #4294967295
 800986a:	e033      	b.n	80098d4 <__swsetup_r+0x98>
 800986c:	0758      	lsls	r0, r3, #29
 800986e:	d512      	bpl.n	8009896 <__swsetup_r+0x5a>
 8009870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009872:	b141      	cbz	r1, 8009886 <__swsetup_r+0x4a>
 8009874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009878:	4299      	cmp	r1, r3
 800987a:	d002      	beq.n	8009882 <__swsetup_r+0x46>
 800987c:	4628      	mov	r0, r5
 800987e:	f7fe feff 	bl	8008680 <_free_r>
 8009882:	2300      	movs	r3, #0
 8009884:	6363      	str	r3, [r4, #52]	@ 0x34
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	2300      	movs	r3, #0
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f043 0308 	orr.w	r3, r3, #8
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	b94b      	cbnz	r3, 80098b6 <__swsetup_r+0x7a>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ac:	d003      	beq.n	80098b6 <__swsetup_r+0x7a>
 80098ae:	4621      	mov	r1, r4
 80098b0:	4628      	mov	r0, r5
 80098b2:	f000 f883 	bl	80099bc <__smakebuf_r>
 80098b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ba:	f013 0201 	ands.w	r2, r3, #1
 80098be:	d00a      	beq.n	80098d6 <__swsetup_r+0x9a>
 80098c0:	2200      	movs	r2, #0
 80098c2:	60a2      	str	r2, [r4, #8]
 80098c4:	6962      	ldr	r2, [r4, #20]
 80098c6:	4252      	negs	r2, r2
 80098c8:	61a2      	str	r2, [r4, #24]
 80098ca:	6922      	ldr	r2, [r4, #16]
 80098cc:	b942      	cbnz	r2, 80098e0 <__swsetup_r+0xa4>
 80098ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098d2:	d1c5      	bne.n	8009860 <__swsetup_r+0x24>
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	0799      	lsls	r1, r3, #30
 80098d8:	bf58      	it	pl
 80098da:	6962      	ldrpl	r2, [r4, #20]
 80098dc:	60a2      	str	r2, [r4, #8]
 80098de:	e7f4      	b.n	80098ca <__swsetup_r+0x8e>
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7f7      	b.n	80098d4 <__swsetup_r+0x98>
 80098e4:	20000018 	.word	0x20000018

080098e8 <_raise_r>:
 80098e8:	291f      	cmp	r1, #31
 80098ea:	b538      	push	{r3, r4, r5, lr}
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	d904      	bls.n	80098fc <_raise_r+0x14>
 80098f2:	2316      	movs	r3, #22
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098fe:	b112      	cbz	r2, 8009906 <_raise_r+0x1e>
 8009900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009904:	b94b      	cbnz	r3, 800991a <_raise_r+0x32>
 8009906:	4628      	mov	r0, r5
 8009908:	f000 f830 	bl	800996c <_getpid_r>
 800990c:	4622      	mov	r2, r4
 800990e:	4601      	mov	r1, r0
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009916:	f000 b817 	b.w	8009948 <_kill_r>
 800991a:	2b01      	cmp	r3, #1
 800991c:	d00a      	beq.n	8009934 <_raise_r+0x4c>
 800991e:	1c59      	adds	r1, r3, #1
 8009920:	d103      	bne.n	800992a <_raise_r+0x42>
 8009922:	2316      	movs	r3, #22
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	2001      	movs	r0, #1
 8009928:	e7e7      	b.n	80098fa <_raise_r+0x12>
 800992a:	2100      	movs	r1, #0
 800992c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009930:	4620      	mov	r0, r4
 8009932:	4798      	blx	r3
 8009934:	2000      	movs	r0, #0
 8009936:	e7e0      	b.n	80098fa <_raise_r+0x12>

08009938 <raise>:
 8009938:	4b02      	ldr	r3, [pc, #8]	@ (8009944 <raise+0xc>)
 800993a:	4601      	mov	r1, r0
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	f7ff bfd3 	b.w	80098e8 <_raise_r>
 8009942:	bf00      	nop
 8009944:	20000018 	.word	0x20000018

08009948 <_kill_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	@ (8009968 <_kill_r+0x20>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	4611      	mov	r1, r2
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	f7f8 f8c1 	bl	8001adc <_kill>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d102      	bne.n	8009964 <_kill_r+0x1c>
 800995e:	682b      	ldr	r3, [r5, #0]
 8009960:	b103      	cbz	r3, 8009964 <_kill_r+0x1c>
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	bf00      	nop
 8009968:	200099b8 	.word	0x200099b8

0800996c <_getpid_r>:
 800996c:	f7f8 b8ae 	b.w	8001acc <_getpid>

08009970 <__swhatbuf_r>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	460c      	mov	r4, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	2900      	cmp	r1, #0
 800997a:	b096      	sub	sp, #88	@ 0x58
 800997c:	4615      	mov	r5, r2
 800997e:	461e      	mov	r6, r3
 8009980:	da0d      	bge.n	800999e <__swhatbuf_r+0x2e>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009988:	f04f 0100 	mov.w	r1, #0
 800998c:	bf14      	ite	ne
 800998e:	2340      	movne	r3, #64	@ 0x40
 8009990:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009994:	2000      	movs	r0, #0
 8009996:	6031      	str	r1, [r6, #0]
 8009998:	602b      	str	r3, [r5, #0]
 800999a:	b016      	add	sp, #88	@ 0x58
 800999c:	bd70      	pop	{r4, r5, r6, pc}
 800999e:	466a      	mov	r2, sp
 80099a0:	f000 f848 	bl	8009a34 <_fstat_r>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	dbec      	blt.n	8009982 <__swhatbuf_r+0x12>
 80099a8:	9901      	ldr	r1, [sp, #4]
 80099aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099b2:	4259      	negs	r1, r3
 80099b4:	4159      	adcs	r1, r3
 80099b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099ba:	e7eb      	b.n	8009994 <__swhatbuf_r+0x24>

080099bc <__smakebuf_r>:
 80099bc:	898b      	ldrh	r3, [r1, #12]
 80099be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c0:	079d      	lsls	r5, r3, #30
 80099c2:	4606      	mov	r6, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	d507      	bpl.n	80099d8 <__smakebuf_r+0x1c>
 80099c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	2301      	movs	r3, #1
 80099d2:	6163      	str	r3, [r4, #20]
 80099d4:	b003      	add	sp, #12
 80099d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d8:	ab01      	add	r3, sp, #4
 80099da:	466a      	mov	r2, sp
 80099dc:	f7ff ffc8 	bl	8009970 <__swhatbuf_r>
 80099e0:	9f00      	ldr	r7, [sp, #0]
 80099e2:	4605      	mov	r5, r0
 80099e4:	4639      	mov	r1, r7
 80099e6:	4630      	mov	r0, r6
 80099e8:	f7fe febe 	bl	8008768 <_malloc_r>
 80099ec:	b948      	cbnz	r0, 8009a02 <__smakebuf_r+0x46>
 80099ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f2:	059a      	lsls	r2, r3, #22
 80099f4:	d4ee      	bmi.n	80099d4 <__smakebuf_r+0x18>
 80099f6:	f023 0303 	bic.w	r3, r3, #3
 80099fa:	f043 0302 	orr.w	r3, r3, #2
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	e7e2      	b.n	80099c8 <__smakebuf_r+0xc>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	6020      	str	r0, [r4, #0]
 8009a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	9b01      	ldr	r3, [sp, #4]
 8009a0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a12:	b15b      	cbz	r3, 8009a2c <__smakebuf_r+0x70>
 8009a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f000 f81d 	bl	8009a58 <_isatty_r>
 8009a1e:	b128      	cbz	r0, 8009a2c <__smakebuf_r+0x70>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f023 0303 	bic.w	r3, r3, #3
 8009a26:	f043 0301 	orr.w	r3, r3, #1
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	431d      	orrs	r5, r3
 8009a30:	81a5      	strh	r5, [r4, #12]
 8009a32:	e7cf      	b.n	80099d4 <__smakebuf_r+0x18>

08009a34 <_fstat_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d07      	ldr	r5, [pc, #28]	@ (8009a54 <_fstat_r+0x20>)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f7f8 f8ab 	bl	8001b9c <_fstat>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d102      	bne.n	8009a50 <_fstat_r+0x1c>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	b103      	cbz	r3, 8009a50 <_fstat_r+0x1c>
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	bf00      	nop
 8009a54:	200099b8 	.word	0x200099b8

08009a58 <_isatty_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	@ (8009a74 <_isatty_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f8 f8aa 	bl	8001bbc <_isatty>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_isatty_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_isatty_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	200099b8 	.word	0x200099b8

08009a78 <sqrtf>:
 8009a78:	b508      	push	{r3, lr}
 8009a7a:	ed2d 8b02 	vpush	{d8}
 8009a7e:	eeb0 8a40 	vmov.f32	s16, s0
 8009a82:	f000 f817 	bl	8009ab4 <__ieee754_sqrtf>
 8009a86:	eeb4 8a48 	vcmp.f32	s16, s16
 8009a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8e:	d60c      	bvs.n	8009aaa <sqrtf+0x32>
 8009a90:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009ab0 <sqrtf+0x38>
 8009a94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a9c:	d505      	bpl.n	8009aaa <sqrtf+0x32>
 8009a9e:	f7fd ff73 	bl	8007988 <__errno>
 8009aa2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009aa6:	2321      	movs	r3, #33	@ 0x21
 8009aa8:	6003      	str	r3, [r0, #0]
 8009aaa:	ecbd 8b02 	vpop	{d8}
 8009aae:	bd08      	pop	{r3, pc}
 8009ab0:	00000000 	.word	0x00000000

08009ab4 <__ieee754_sqrtf>:
 8009ab4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009ab8:	4770      	bx	lr
	...

08009abc <_init>:
 8009abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abe:	bf00      	nop
 8009ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac2:	bc08      	pop	{r3}
 8009ac4:	469e      	mov	lr, r3
 8009ac6:	4770      	bx	lr

08009ac8 <_fini>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	bf00      	nop
 8009acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ace:	bc08      	pop	{r3}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4770      	bx	lr
