
ADC_Testing3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009564  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000137f8  08009738  08009738  0000a738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cf30  0801cf30  0001e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801cf30  0801cf30  0001df30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cf38  0801cf38  0001e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cf38  0801cf38  0001df38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cf3c  0801cf3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801cf40  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005790  200001d4  0801d114  0001e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005964  0801d114  0001e964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001675f  00000000  00000000  0001e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003290  00000000  00000000  00034963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00037bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df9  00000000  00000000  00038ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025395  00000000  00000000  00039cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178bd  00000000  00000000  0005f056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e36b6  00000000  00000000  00076913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00159fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005edc  00000000  00000000  0015a07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0015ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a79  00000000  00000000  0015ffcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  00162a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800971c 	.word	0x0800971c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800971c 	.word	0x0800971c

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	@ 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2234      	movs	r2, #52	@ 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 fc75 	bl	8007896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	4a28      	ldr	r2, [pc, #160]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a22      	ldr	r2, [pc, #136]	@ (800106c <SystemClock_Config+0xd4>)
 8000fe2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b20      	ldr	r3, [pc, #128]	@ (800106c <SystemClock_Config+0xd4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ffc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001006:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800100c:	23a8      	movs	r3, #168	@ 0xa8
 800100e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001014:	2307      	movs	r3, #7
 8001016:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4618      	mov	r0, r3
 8001022:	f003 f9fb 	bl	800441c <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800102c:	f000 fa20 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001040:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2105      	movs	r1, #5
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fb70 	bl	8003734 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800105a:	f000 fa09 	bl	8001470 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	@ 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001082:	4b22      	ldr	r3, [pc, #136]	@ (800110c <MX_ADC1_Init+0x9c>)
 8001084:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <MX_ADC1_Init+0xa0>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001088:	4b20      	ldr	r3, [pc, #128]	@ (800110c <MX_ADC1_Init+0x9c>)
 800108a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800108e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001090:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <MX_ADC1_Init+0x9c>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <MX_ADC1_Init+0x9c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <MX_ADC1_Init+0x9c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80010b2:	4b16      	ldr	r3, [pc, #88]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010b4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d4:	480d      	ldr	r0, [pc, #52]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010d6:	f000 fe8b 	bl	8001df0 <HAL_ADC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80010e0:	f000 f9c6 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0; // PA0 = ADC1_IN0
 80010e4:	2300      	movs	r3, #0
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_ADC1_Init+0x9c>)
 80010f6:	f001 f83d 	bl	8002174 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001100:	f000 f9b6 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001f0 	.word	0x200001f0
 8001110:	40012000 	.word	0x40012000

08001114 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <MX_TIM2_Init+0x94>)
 8001132:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001136:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_TIM2_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_TIM2_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83; //1 MHz -> Sample rate = 84 MHz / (0 + 1) / (83 + 1) = 1 MHz
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_TIM2_Init+0x94>)
 8001146:	2253      	movs	r2, #83	@ 0x53
 8001148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_TIM2_Init+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_TIM2_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001156:	4814      	ldr	r0, [pc, #80]	@ (80011a8 <MX_TIM2_Init+0x94>)
 8001158:	f003 fbfe 	bl	8004958 <HAL_TIM_Base_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001162:	f000 f985 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <MX_TIM2_Init+0x94>)
 8001174:	f003 fccf 	bl	8004b16 <HAL_TIM_ConfigClockSource>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800117e:	f000 f977 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001182:	2320      	movs	r3, #32
 8001184:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <MX_TIM2_Init+0x94>)
 8001190:	f003 fece 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800119a:	f000 f969 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000298 	.word	0x20000298

080011ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <MX_USART3_UART_Init+0x50>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_USART3_UART_Init+0x4c>)
 80011e4:	f003 ff20 	bl	8005028 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011ee:	f000 f93f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002e0 	.word	0x200002e0
 80011fc:	40004800 	.word	0x40004800

08001200 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001206:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800120a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800120e:	2206      	movs	r2, #6
 8001210:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001214:	2202      	movs	r2, #2
 8001216:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001220:	2202      	movs	r2, #2
 8001222:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001226:	2201      	movs	r2, #1
 8001228:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001232:	2200      	movs	r2, #0
 8001234:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001238:	2201      	movs	r2, #1
 800123a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001244:	f002 f93b 	bl	80034be <HAL_PCD_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800124e:	f000 f90f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000328 	.word	0x20000328

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_DMA_Init+0x3c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <MX_DMA_Init+0x3c>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2038      	movs	r0, #56	@ 0x38
 8001284:	f001 fb01 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001288:	2038      	movs	r0, #56	@ 0x38
 800128a:	f001 fb1a 	bl	80028c2 <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	@ 0x30
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4b69      	ldr	r3, [pc, #420]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a68      	ldr	r2, [pc, #416]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b66      	ldr	r3, [pc, #408]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b62      	ldr	r3, [pc, #392]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a61      	ldr	r2, [pc, #388]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b5f      	ldr	r3, [pc, #380]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b5b      	ldr	r3, [pc, #364]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a5a      	ldr	r2, [pc, #360]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b58      	ldr	r3, [pc, #352]	@ (800145c <MX_GPIO_Init+0x1c0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b54      	ldr	r3, [pc, #336]	@ (800145c <MX_GPIO_Init+0x1c0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a53      	ldr	r2, [pc, #332]	@ (800145c <MX_GPIO_Init+0x1c0>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b51      	ldr	r3, [pc, #324]	@ (800145c <MX_GPIO_Init+0x1c0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b4d      	ldr	r3, [pc, #308]	@ (800145c <MX_GPIO_Init+0x1c0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a4c      	ldr	r2, [pc, #304]	@ (800145c <MX_GPIO_Init+0x1c0>)
 800132c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b4a      	ldr	r3, [pc, #296]	@ (800145c <MX_GPIO_Init+0x1c0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b46      	ldr	r3, [pc, #280]	@ (800145c <MX_GPIO_Init+0x1c0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a45      	ldr	r2, [pc, #276]	@ (800145c <MX_GPIO_Init+0x1c0>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b43      	ldr	r3, [pc, #268]	@ (800145c <MX_GPIO_Init+0x1c0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001360:	483f      	ldr	r0, [pc, #252]	@ (8001460 <MX_GPIO_Init+0x1c4>)
 8001362:	f002 f855 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2140      	movs	r1, #64	@ 0x40
 800136a:	483e      	ldr	r0, [pc, #248]	@ (8001464 <MX_GPIO_Init+0x1c8>)
 800136c:	f002 f850 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8001376:	483c      	ldr	r0, [pc, #240]	@ (8001468 <MX_GPIO_Init+0x1cc>)
 8001378:	f002 f84a 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800137c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001382:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4835      	ldr	r0, [pc, #212]	@ (8001468 <MX_GPIO_Init+0x1cc>)
 8001394:	f001 fe90 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001398:	f244 0381 	movw	r3, #16513	@ 0x4081
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	482b      	ldr	r0, [pc, #172]	@ (8001460 <MX_GPIO_Init+0x1c4>)
 80013b2:	f001 fe81 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013b6:	2340      	movs	r3, #64	@ 0x40
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4825      	ldr	r0, [pc, #148]	@ (8001464 <MX_GPIO_Init+0x1c8>)
 80013ce:	f001 fe73 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	481f      	ldr	r0, [pc, #124]	@ (8001464 <MX_GPIO_Init+0x1c8>)
 80013e6:	f001 fe67 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 80013ea:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4819      	ldr	r0, [pc, #100]	@ (8001468 <MX_GPIO_Init+0x1cc>)
 8001404:	f001 fe58 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8001408:	23f0      	movs	r3, #240	@ 0xf0
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001412:	2302      	movs	r3, #2
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	4813      	ldr	r0, [pc, #76]	@ (800146c <MX_GPIO_Init+0x1d0>)
 800141e:	f001 fe4b 	bl	80030b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	200a      	movs	r0, #10
 8001428:	f001 fa2f 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800142c:	200a      	movs	r0, #10
 800142e:	f001 fa48 	bl	80028c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2017      	movs	r0, #23
 8001438:	f001 fa27 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800143c:	2017      	movs	r0, #23
 800143e:	f001 fa40 	bl	80028c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2028      	movs	r0, #40	@ 0x28
 8001448:	f001 fa1f 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800144c:	2028      	movs	r0, #40	@ 0x28
 800144e:	f001 fa38 	bl	80028c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	@ 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40020400 	.word	0x40020400
 8001464:	40021800 	.word	0x40021800
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <Error_Handler+0x8>

0800147c <computeCoeffs>:




//get the frequency components and store them to reuse in the globals input_FFT (freq) and output_FFT (mag)
void computeCoeffs(float output_FFT[FFT_BUFFER_SIZE]) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    for (int i = 0, fIndex = 0; i < FFT_BUFFER_SIZE; i += 2, fIndex++) {
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	e03b      	b.n	8001506 <computeCoeffs+0x8a>
        float real = output_FFT[i];
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	617b      	str	r3, [r7, #20]
        float imag = output_FFT[i + 1];
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
        float mag = fabs(sqrtf(real * real + imag * imag));
 80014a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	f008 f90a 	bl	80096d8 <sqrtf>
 80014c4:	ed87 0a03 	vstr	s0, [r7, #12]

        // Overwrite input/output FFT arrays with freq/mag
        input_FFT[fIndex] = ((float) fIndex * SAMPLE_RATE_HZ / (float) FFT_BUFFER_SIZE);
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800151c <computeCoeffs+0xa0>
 80014d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014da:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001520 <computeCoeffs+0xa4>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <computeCoeffs+0xa8>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	edc3 7a00 	vstr	s15, [r3]
        output_FFT[fIndex] = mag;
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	601a      	str	r2, [r3, #0]
    for (int i = 0, fIndex = 0; i < FFT_BUFFER_SIZE; i += 2, fIndex++) {
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3302      	adds	r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	3301      	adds	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800150c:	dbbf      	blt.n	800148e <computeCoeffs+0x12>
    }
		
		sendFFT_ready = 1;
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <computeCoeffs+0xac>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	49742400 	.word	0x49742400
 8001520:	45000000 	.word	0x45000000
 8001524:	20001810 	.word	0x20001810
 8001528:	2000180d 	.word	0x2000180d

0800152c <sendADC_UART>:


void sendADC_UART() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
    const char *preamble = "ADC\r\n";
 8001532:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <sendADC_UART+0x38>)
 8001534:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)preamble, strlen(preamble), HAL_MAX_DELAY);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7fe ff1a 	bl	8000370 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4808      	ldr	r0, [pc, #32]	@ (8001568 <sendADC_UART+0x3c>)
 8001548:	f003 fdbe 	bl	80050c8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t *)adc_buffer, sizeof(adc_buffer), HAL_MAX_DELAY);
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001554:	4905      	ldr	r1, [pc, #20]	@ (800156c <sendADC_UART+0x40>)
 8001556:	4804      	ldr	r0, [pc, #16]	@ (8001568 <sendADC_UART+0x3c>)
 8001558:	f003 fdb6 	bl	80050c8 <HAL_UART_Transmit>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	08009738 	.word	0x08009738
 8001568:	200002e0 	.word	0x200002e0
 800156c:	2000080c 	.word	0x2000080c

08001570 <sendFFT_UART>:


void sendFFT_UART() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
		if(sendFFT_ready == 1){
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <sendFFT_UART+0x58>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d11f      	bne.n	80015be <sendFFT_UART+0x4e>
			//note that this ensures that the input and output buffers are Hz/Mag after compute coeffs. 
			sendFFT_ready = 0;
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <sendFFT_UART+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
			const char *preamble = "FFT\r\n";
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <sendFFT_UART+0x5c>)
 8001586:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3, (uint8_t *)preamble, strlen(preamble), HAL_MAX_DELAY);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7fe fef1 	bl	8000370 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <sendFFT_UART+0x60>)
 800159a:	f003 fd95 	bl	80050c8 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart3, (uint8_t *)input_FFT, (FFT_BUFFER_SIZE / 2) * sizeof(float), HAL_MAX_DELAY);
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015a6:	490b      	ldr	r1, [pc, #44]	@ (80015d4 <sendFFT_UART+0x64>)
 80015a8:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <sendFFT_UART+0x60>)
 80015aa:	f003 fd8d 	bl	80050c8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)output_FFT, (FFT_BUFFER_SIZE / 2) * sizeof(float), HAL_MAX_DELAY);
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <sendFFT_UART+0x68>)
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <sendFFT_UART+0x60>)
 80015ba:	f003 fd85 	bl	80050c8 <HAL_UART_Transmit>
		}
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000180d 	.word	0x2000180d
 80015cc:	08009740 	.word	0x08009740
 80015d0:	200002e0 	.word	0x200002e0
 80015d4:	20001810 	.word	0x20001810
 80015d8:	20003810 	.word	0x20003810

080015dc <main>:
//FFT CODE INITS END



int main(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0


  HAL_Init();
 80015e2:	f000 fb6f 	bl	8001cc4 <HAL_Init>
  SystemClock_Config();
 80015e6:	f7ff fcd7 	bl	8000f98 <SystemClock_Config>

  MX_GPIO_Init();
 80015ea:	f7ff fe57 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 80015ee:	f7ff fe35 	bl	800125c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015f2:	f7ff fddb 	bl	80011ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015f6:	f7ff fe03 	bl	8001200 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80015fa:	f7ff fd39 	bl	8001070 <MX_ADC1_Init>
  MX_TIM2_Init();
 80015fe:	f7ff fd89 	bl	8001114 <MX_TIM2_Init>

  //init FFT
  arm_rfft_fast_instance_f32 fftHandler;
  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fc13 	bl	8005e34 <arm_rfft_fast_init_f32>


  while (1)
  {

		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800160e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001612:	4828      	ldr	r0, [pc, #160]	@ (80016b4 <main+0xd8>)
 8001614:	f001 ff15 	bl	8003442 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001618:	2064      	movs	r0, #100	@ 0x64
 800161a:	f000 fbc5 	bl	8001da8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)) {
 800161e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001622:	4825      	ldr	r0, [pc, #148]	@ (80016b8 <main+0xdc>)
 8001624:	f001 fedc 	bl	80033e0 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00f      	beq.n	800164e <main+0x72>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800162e:	2180      	movs	r1, #128	@ 0x80
 8001630:	4820      	ldr	r0, [pc, #128]	@ (80016b4 <main+0xd8>)
 8001632:	f001 ff06 	bl	8003442 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001636:	2064      	movs	r0, #100	@ 0x64
 8001638:	f000 fbb6 	bl	8001da8 <HAL_Delay>

			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_LEN); //start DMA and ADC
 800163c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001640:	491e      	ldr	r1, [pc, #120]	@ (80016bc <main+0xe0>)
 8001642:	481f      	ldr	r0, [pc, #124]	@ (80016c0 <main+0xe4>)
 8001644:	f000 fc18 	bl	8001e78 <HAL_ADC_Start_DMA>
			HAL_TIM_Base_Start(&htim2);  // Start the timer that triggers ADC
 8001648:	481e      	ldr	r0, [pc, #120]	@ (80016c4 <main+0xe8>)
 800164a:	f003 f9d5 	bl	80049f8 <HAL_TIM_Base_Start>
			//data is ready for FFT

		}

		if(ADC_full == 1){
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <main+0xec>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d1db      	bne.n	800160e <main+0x32>
			ADC_full = 0;
 8001656:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <main+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop_DMA(&hadc1);
 800165c:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <main+0xe4>)
 800165e:	f000 fd1b 	bl	8002098 <HAL_ADC_Stop_DMA>
			HAL_TIM_Base_Stop(&htim2); // stop the adc and timer
 8001662:	4818      	ldr	r0, [pc, #96]	@ (80016c4 <main+0xe8>)
 8001664:	f003 fa30 	bl	8004ac8 <HAL_TIM_Base_Stop>

			

			for(int i = 0; i < ADC_BUF_LEN; i++){ //since DMA is faster than code, we should be able to immediately load values
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	e010      	b.n	8001690 <main+0xb4>
				input_FFT[i] = (float)(adc_buffer[i]); //note the usage of float here - should consider optimization reasons and configurations
 800166e:	4a13      	ldr	r2, [pc, #76]	@ (80016bc <main+0xe0>)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167e:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <main+0xf0>)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < ADC_BUF_LEN; i++){ //since DMA is faster than code, we should be able to immediately load values
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001696:	dbea      	blt.n	800166e <main+0x92>
			}

			//FFT
			arm_rfft_fast_f32(&fftHandler, input_FFT, output_FFT, 0);
 8001698:	1d38      	adds	r0, r7, #4
 800169a:	2300      	movs	r3, #0
 800169c:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <main+0xf4>)
 800169e:	490b      	ldr	r1, [pc, #44]	@ (80016cc <main+0xf0>)
 80016a0:	f004 fc4c 	bl	8005f3c <arm_rfft_fast_f32>
			computeCoeffs(output_FFT);
 80016a4:	480a      	ldr	r0, [pc, #40]	@ (80016d0 <main+0xf4>)
 80016a6:	f7ff fee9 	bl	800147c <computeCoeffs>
			
			sendADC_UART();
 80016aa:	f7ff ff3f 	bl	800152c <sendADC_UART>
			sendFFT_UART();
 80016ae:	f7ff ff5f 	bl	8001570 <sendFFT_UART>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80016b2:	e7ac      	b.n	800160e <main+0x32>
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	2000080c 	.word	0x2000080c
 80016c0:	200001f0 	.word	0x200001f0
 80016c4:	20000298 	.word	0x20000298
 80016c8:	2000180c 	.word	0x2000180c
 80016cc:	20001810 	.word	0x20001810
 80016d0:	20003810 	.word	0x20003810

080016d4 <HAL_ADC_ConvCpltCallback>:
  }
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
   if (hadc->Instance == ADC1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_ADC_ConvCpltCallback+0x28>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d106      	bne.n	80016f4 <HAL_ADC_ConvCpltCallback+0x20>
    {
      // adc_buffer is now full
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80016e6:	2101      	movs	r1, #1
 80016e8:	4805      	ldr	r0, [pc, #20]	@ (8001700 <HAL_ADC_ConvCpltCallback+0x2c>)
 80016ea:	f001 feaa 	bl	8003442 <HAL_GPIO_TogglePin>
			ADC_full = 1;
 80016ee:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_ADC_ConvCpltCallback+0x30>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
    }

   


}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40012000 	.word	0x40012000
 8001700:	40020400 	.word	0x40020400
 8001704:	2000180c 	.word	0x2000180c

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <HAL_MspInit+0x4c>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800171c:	6453      	str	r3, [r2, #68]	@ 0x44
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <HAL_MspInit+0x4c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_MspInit+0x4c>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <HAL_MspInit+0x4c>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_MspInit+0x4c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a36      	ldr	r2, [pc, #216]	@ (8001850 <HAL_ADC_MspInit+0xf8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d166      	bne.n	8001848 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a34      	ldr	r2, [pc, #208]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b32      	ldr	r3, [pc, #200]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a2d      	ldr	r2, [pc, #180]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
		
		
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a26      	ldr	r2, [pc, #152]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_ADC_MspInit+0xfc>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ce:	2301      	movs	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	481d      	ldr	r0, [pc, #116]	@ (8001858 <HAL_ADC_MspInit+0x100>)
 80017e2:	f001 fc69 	bl	80030b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_ADC_MspInit+0x104>)
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_ADC_MspInit+0x108>)
 80017ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <HAL_ADC_MspInit+0x104>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <HAL_ADC_MspInit+0x104>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_ADC_MspInit+0x104>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <HAL_ADC_MspInit+0x104>)
 8001800:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001804:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_ADC_MspInit+0x104>)
 8001808:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800180c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <HAL_ADC_MspInit+0x104>)
 8001810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001814:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <HAL_ADC_MspInit+0x104>)
 8001818:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800181c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_ADC_MspInit+0x104>)
 8001820:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001824:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_ADC_MspInit+0x104>)
 8001828:	2200      	movs	r2, #0
 800182a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800182c:	480b      	ldr	r0, [pc, #44]	@ (800185c <HAL_ADC_MspInit+0x104>)
 800182e:	f001 f863 	bl	80028f8 <HAL_DMA_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001838:	f7ff fe1a 	bl	8001470 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a07      	ldr	r2, [pc, #28]	@ (800185c <HAL_ADC_MspInit+0x104>)
 8001840:	639a      	str	r2, [r3, #56]	@ 0x38
 8001842:	4a06      	ldr	r2, [pc, #24]	@ (800185c <HAL_ADC_MspInit+0x104>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40012000 	.word	0x40012000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	20000238 	.word	0x20000238
 8001860:	40026410 	.word	0x40026410

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001874:	d10d      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_TIM_Base_MspInit+0x3c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6413      	str	r3, [r2, #64]	@ 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	@ (8001928 <HAL_UART_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12c      	bne.n	8001920 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a17      	ldr	r2, [pc, #92]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001910:	2307      	movs	r3, #7
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4805      	ldr	r0, [pc, #20]	@ (8001930 <HAL_UART_MspInit+0x8c>)
 800191c:	f001 fbcc 	bl	80030b8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	@ 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40004800 	.word	0x40004800
 800192c:	40023800 	.word	0x40023800
 8001930:	40020c00 	.word	0x40020c00

08001934 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0a0      	sub	sp, #128	@ 0x80
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	225c      	movs	r2, #92	@ 0x5c
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f005 ff9e 	bl	8007896 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001962:	d14e      	bne.n	8001a02 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001964:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001968:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800196a:	2300      	movs	r3, #0
 800196c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fff8 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800197e:	f7ff fd77 	bl	8001470 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <HAL_PCD_MspInit+0xd8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a20      	ldr	r2, [pc, #128]	@ (8001a0c <HAL_PCD_MspInit+0xd8>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <HAL_PCD_MspInit+0xd8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800199e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80019a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019b0:	230a      	movs	r3, #10
 80019b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019b8:	4619      	mov	r1, r3
 80019ba:	4815      	ldr	r0, [pc, #84]	@ (8001a10 <HAL_PCD_MspInit+0xdc>)
 80019bc:	f001 fb7c 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019d2:	4619      	mov	r1, r3
 80019d4:	480e      	ldr	r0, [pc, #56]	@ (8001a10 <HAL_PCD_MspInit+0xdc>)
 80019d6:	f001 fb6f 	bl	80030b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <HAL_PCD_MspInit+0xd8>)
 80019dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019de:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <HAL_PCD_MspInit+0xd8>)
 80019e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <HAL_PCD_MspInit+0xd8>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	4a07      	ldr	r2, [pc, #28]	@ (8001a0c <HAL_PCD_MspInit+0xd8>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_PCD_MspInit+0xd8>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001a02:	bf00      	nop
 8001a04:	3780      	adds	r7, #128	@ 0x80
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <NMI_Handler+0x4>

08001a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f000 f97d 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 8001a76:	2010      	movs	r0, #16
 8001a78:	f001 fcfe 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 8001a84:	2020      	movs	r0, #32
 8001a86:	f001 fcf7 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 8001a8a:	2040      	movs	r0, #64	@ 0x40
 8001a8c:	f001 fcf4 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 8001a90:	2080      	movs	r0, #128	@ 0x80
 8001a92:	f001 fcf1 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001a9e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001aa2:	f001 fce9 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <DMA2_Stream0_IRQHandler+0x10>)
 8001ab2:	f001 f897 	bl	8002be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000238 	.word	0x20000238

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ada:	f005 ff2f 	bl	800793c <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b02:	bf00      	nop
 8001b04:	e7fd      	b.n	8001b02 <_exit+0x12>

08001b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e00a      	b.n	8001b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b18:	f3af 8000 	nop.w
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbf0      	blt.n	8001b18 <_read+0x12>
  }

  return len;
 8001b36:	687b      	ldr	r3, [r7, #4]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e009      	b.n	8001b66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf1      	blt.n	8001b52 <_write+0x12>
  }
  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_close>:

int _close(int file)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_isatty>:

int _isatty(int file)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f005 fe94 	bl	800793c <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20020000 	.word	0x20020000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	20005810 	.word	0x20005810
 8001c48:	20005968 	.word	0x20005968

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c74:	f7ff ffea 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7a:	490d      	ldr	r1, [pc, #52]	@ (8001cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c90:	4c0a      	ldr	r4, [pc, #40]	@ (8001cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f005 fe53 	bl	8007948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7ff fc9b 	bl	80015dc <main>
  bx  lr    
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cb4:	0801cf40 	.word	0x0801cf40
  ldr r2, =_sbss
 8001cb8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cbc:	20005964 	.word	0x20005964

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d04 <HAL_Init+0x40>)
 8001cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <HAL_Init+0x40>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <HAL_Init+0x40>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 fdc1 	bl	8002874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f808 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fd06 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fdd9 	bl	80028de <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f000 fda1 	bl	800288a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x20>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_IncTick+0x24>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	@ (8001d8c <HAL_IncTick+0x24>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20005814 	.word	0x20005814

08001d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <HAL_GetTick+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20005814 	.word	0x20005814

08001da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff ffee 	bl	8001d90 <HAL_GetTick>
 8001db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d005      	beq.n	8001dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <HAL_Delay+0x44>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dce:	bf00      	nop
 8001dd0:	f7ff ffde 	bl	8001d90 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8f7      	bhi.n	8001dd0 <HAL_Delay+0x28>
  {
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e033      	b.n	8001e6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fca2 	bl	8001758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e36:	f023 0302 	bic.w	r3, r3, #2
 8001e3a:	f043 0202 	orr.w	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fac8 	bl	80023d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e5e:	e001      	b.n	8001e64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Start_DMA+0x1e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0e9      	b.n	800206a <HAL_ADC_Start_DMA+0x1f2>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d018      	beq.n	8001ede <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ebc:	4b6d      	ldr	r3, [pc, #436]	@ (8002074 <HAL_ADC_Start_DMA+0x1fc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8002078 <HAL_ADC_Start_DMA+0x200>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9a      	lsrs	r2, r3, #18
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eec:	d107      	bne.n	8001efe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001efc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f040 80a1 	bne.w	8002050 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4c:	d106      	bne.n	8001f5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f023 0206 	bic.w	r2, r3, #6
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f5a:	e002      	b.n	8001f62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <HAL_ADC_Start_DMA+0x204>)
 8001f6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f72:	4a43      	ldr	r2, [pc, #268]	@ (8002080 <HAL_ADC_Start_DMA+0x208>)
 8001f74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7a:	4a42      	ldr	r2, [pc, #264]	@ (8002084 <HAL_ADC_Start_DMA+0x20c>)
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	4a41      	ldr	r2, [pc, #260]	@ (8002088 <HAL_ADC_Start_DMA+0x210>)
 8001f84:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001f9e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	334c      	adds	r3, #76	@ 0x4c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f000 fd48 	bl	8002a54 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d12a      	bne.n	8002026 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800208c <HAL_ADC_Start_DMA+0x214>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d015      	beq.n	8002006 <HAL_ADC_Start_DMA+0x18e>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2c      	ldr	r2, [pc, #176]	@ (8002090 <HAL_ADC_Start_DMA+0x218>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x178>
 8001fe4:	4b25      	ldr	r3, [pc, #148]	@ (800207c <HAL_ADC_Start_DMA+0x204>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a27      	ldr	r2, [pc, #156]	@ (8002094 <HAL_ADC_Start_DMA+0x21c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d136      	bne.n	8002068 <HAL_ADC_Start_DMA+0x1f0>
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_ADC_Start_DMA+0x204>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d130      	bne.n	8002068 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d129      	bne.n	8002068 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e020      	b.n	8002068 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a18      	ldr	r2, [pc, #96]	@ (800208c <HAL_ADC_Start_DMA+0x214>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d11b      	bne.n	8002068 <HAL_ADC_Start_DMA+0x1f0>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d114      	bne.n	8002068 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	e00b      	b.n	8002068 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	f043 0210 	orr.w	r2, r3, #16
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000
 8002078:	431bde83 	.word	0x431bde83
 800207c:	40012300 	.word	0x40012300
 8002080:	080025d1 	.word	0x080025d1
 8002084:	0800268b 	.word	0x0800268b
 8002088:	080026a7 	.word	0x080026a7
 800208c:	40012000 	.word	0x40012000
 8002090:	40012100 	.word	0x40012100
 8002094:	40012200 	.word	0x40012200

08002098 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Stop_DMA+0x1a>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e048      	b.n	8002144 <HAL_ADC_Stop_DMA+0xac>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d130      	bne.n	800213a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020e6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d10f      	bne.n	8002116 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fd02 	bl	8002b04 <HAL_DMA_Abort>
 8002100:	4603      	mov	r3, r0
 8002102:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002124:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1c>
 800218c:	2302      	movs	r3, #2
 800218e:	e113      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x244>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b09      	cmp	r3, #9
 800219e:	d925      	bls.n	80021ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	3b1e      	subs	r3, #30
 80021b6:	2207      	movs	r2, #7
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43da      	mvns	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	400a      	ands	r2, r1
 80021c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68d9      	ldr	r1, [r3, #12]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	4603      	mov	r3, r0
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4403      	add	r3, r0
 80021de:	3b1e      	subs	r3, #30
 80021e0:	409a      	lsls	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	e022      	b.n	8002232 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6919      	ldr	r1, [r3, #16]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	2207      	movs	r2, #7
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6919      	ldr	r1, [r3, #16]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	4603      	mov	r3, r0
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4403      	add	r3, r0
 8002228:	409a      	lsls	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d824      	bhi.n	8002284 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b05      	subs	r3, #5
 800224c:	221f      	movs	r2, #31
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	400a      	ands	r2, r1
 800225a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b05      	subs	r3, #5
 8002276:	fa00 f203 	lsl.w	r2, r0, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	635a      	str	r2, [r3, #52]	@ 0x34
 8002282:	e04c      	b.n	800231e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b0c      	cmp	r3, #12
 800228a:	d824      	bhi.n	80022d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3b23      	subs	r3, #35	@ 0x23
 800229e:	221f      	movs	r2, #31
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43da      	mvns	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	400a      	ands	r2, r1
 80022ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b23      	subs	r3, #35	@ 0x23
 80022c8:	fa00 f203 	lsl.w	r2, r0, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d4:	e023      	b.n	800231e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b41      	subs	r3, #65	@ 0x41
 80022e8:	221f      	movs	r2, #31
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	400a      	ands	r2, r1
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	3b41      	subs	r3, #65	@ 0x41
 8002312:	fa00 f203 	lsl.w	r2, r0, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231e:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_ADC_ConfigChannel+0x250>)
 8002320:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <HAL_ADC_ConfigChannel+0x254>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d10f      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1d8>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b12      	cmp	r3, #18
 8002332:	d10b      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <HAL_ADC_ConfigChannel+0x254>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12b      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x23a>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <HAL_ADC_ConfigChannel+0x258>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <HAL_ADC_ConfigChannel+0x1f4>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b11      	cmp	r3, #17
 8002366:	d122      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a11      	ldr	r2, [pc, #68]	@ (80023cc <HAL_ADC_ConfigChannel+0x258>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d111      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_ADC_ConfigChannel+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a11      	ldr	r2, [pc, #68]	@ (80023d4 <HAL_ADC_ConfigChannel+0x260>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9a      	lsrs	r2, r3, #18
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f9      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40012300 	.word	0x40012300
 80023c8:	40012000 	.word	0x40012000
 80023cc:	10000012 	.word	0x10000012
 80023d0:	20000000 	.word	0x20000000
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e0:	4b79      	ldr	r3, [pc, #484]	@ (80025c8 <ADC_Init+0x1f0>)
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	4a58      	ldr	r2, [pc, #352]	@ (80025cc <ADC_Init+0x1f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800247e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e00f      	b.n	80024d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0202 	bic.w	r2, r2, #2
 80024e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
 80024f0:	005a      	lsls	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002512:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	3b01      	subs	r3, #1
 8002530:	035a      	lsls	r2, r3, #13
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	e007      	b.n	800254c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800254a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	3b01      	subs	r3, #1
 8002568:	051a      	lsls	r2, r3, #20
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800258e:	025a      	lsls	r2, r3, #9
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	029a      	lsls	r2, r3, #10
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012300 	.word	0x40012300
 80025cc:	0f000001 	.word	0x0f000001

080025d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d13c      	bne.n	8002664 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d12b      	bne.n	800265c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002608:	2b00      	cmp	r3, #0
 800260a:	d127      	bne.n	800265c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002616:	2b00      	cmp	r3, #0
 8002618:	d006      	beq.n	8002628 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002624:	2b00      	cmp	r3, #0
 8002626:	d119      	bne.n	800265c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0220 	bic.w	r2, r2, #32
 8002636:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff f839 	bl	80016d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002662:	e00e      	b.n	8002682 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff fd75 	bl	8002160 <HAL_ADC_ErrorCallback>
}
 8002676:	e004      	b.n	8002682 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002696:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff fd57 	bl	800214c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2240      	movs	r2, #64	@ 0x40
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	f043 0204 	orr.w	r2, r3, #4
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f7ff fd4a 	bl	8002160 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002706:	4a04      	ldr	r2, [pc, #16]	@ (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	60d3      	str	r3, [r2, #12]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002720:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <__NVIC_GetPriorityGrouping+0x18>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f003 0307 	and.w	r3, r3, #7
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db0b      	blt.n	8002762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4907      	ldr	r1, [pc, #28]	@ (8002770 <__NVIC_EnableIRQ+0x38>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2001      	movs	r0, #1
 800275a:	fa00 f202 	lsl.w	r2, r0, r2
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000e100 	.word	0xe000e100

08002774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	2b00      	cmp	r3, #0
 8002786:	db0a      	blt.n	800279e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	490c      	ldr	r1, [pc, #48]	@ (80027c0 <__NVIC_SetPriority+0x4c>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	440b      	add	r3, r1
 8002798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800279c:	e00a      	b.n	80027b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4908      	ldr	r1, [pc, #32]	@ (80027c4 <__NVIC_SetPriority+0x50>)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	3b04      	subs	r3, #4
 80027ac:	0112      	lsls	r2, r2, #4
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	440b      	add	r3, r1
 80027b2:	761a      	strb	r2, [r3, #24]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000e100 	.word	0xe000e100
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f1c3 0307 	rsb	r3, r3, #7
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	bf28      	it	cs
 80027e6:	2304      	movcs	r3, #4
 80027e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d902      	bls.n	80027f8 <NVIC_EncodePriority+0x30>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3b03      	subs	r3, #3
 80027f6:	e000      	b.n	80027fa <NVIC_EncodePriority+0x32>
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	401a      	ands	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002810:	f04f 31ff 	mov.w	r1, #4294967295
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	43d9      	mvns	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	4313      	orrs	r3, r2
         );
}
 8002822:	4618      	mov	r0, r3
 8002824:	3724      	adds	r7, #36	@ 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002840:	d301      	bcc.n	8002846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002842:	2301      	movs	r3, #1
 8002844:	e00f      	b.n	8002866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002846:	4a0a      	ldr	r2, [pc, #40]	@ (8002870 <SysTick_Config+0x40>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284e:	210f      	movs	r1, #15
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f7ff ff8e 	bl	8002774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <SysTick_Config+0x40>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285e:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <SysTick_Config+0x40>)
 8002860:	2207      	movs	r2, #7
 8002862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	e000e010 	.word	0xe000e010

08002874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff29 	bl	80026d4 <__NVIC_SetPriorityGrouping>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800289c:	f7ff ff3e 	bl	800271c <__NVIC_GetPriorityGrouping>
 80028a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	6978      	ldr	r0, [r7, #20]
 80028a8:	f7ff ff8e 	bl	80027c8 <NVIC_EncodePriority>
 80028ac:	4602      	mov	r2, r0
 80028ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff5d 	bl	8002774 <__NVIC_SetPriority>
}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff31 	bl	8002738 <__NVIC_EnableIRQ>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ffa2 	bl	8002830 <SysTick_Config>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fa44 	bl	8001d90 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e099      	b.n	8002a48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002934:	e00f      	b.n	8002956 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002936:	f7ff fa2b 	bl	8001d90 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b05      	cmp	r3, #5
 8002942:	d908      	bls.n	8002956 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2203      	movs	r2, #3
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e078      	b.n	8002a48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e8      	bne.n	8002936 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4b38      	ldr	r3, [pc, #224]	@ (8002a50 <HAL_DMA_Init+0x158>)
 8002970:	4013      	ands	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002982:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d107      	bne.n	80029c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	4313      	orrs	r3, r2
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f023 0307 	bic.w	r3, r3, #7
 80029d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d117      	bne.n	8002a1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fadf 	bl	8002fc0 <DMA_CheckFifoParam>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2240      	movs	r2, #64	@ 0x40
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a16:	2301      	movs	r3, #1
 8002a18:	e016      	b.n	8002a48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa96 	bl	8002f54 <DMA_CalcBaseAndBitshift>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	223f      	movs	r2, #63	@ 0x3f
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	f010803f 	.word	0xf010803f

08002a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_DMA_Start_IT+0x26>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e040      	b.n	8002afc <HAL_DMA_Start_IT+0xa8>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d12f      	bne.n	8002aee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2202      	movs	r2, #2
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa28 	bl	8002ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aac:	223f      	movs	r2, #63	@ 0x3f
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0216 	orr.w	r2, r2, #22
 8002ac2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0208 	orr.w	r2, r2, #8
 8002ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e005      	b.n	8002afa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b12:	f7ff f93d 	bl	8001d90 <HAL_GetTick>
 8002b16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d008      	beq.n	8002b36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2280      	movs	r2, #128	@ 0x80
 8002b28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e052      	b.n	8002bdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0216 	bic.w	r2, r2, #22
 8002b44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <HAL_DMA_Abort+0x62>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0208 	bic.w	r2, r2, #8
 8002b74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b86:	e013      	b.n	8002bb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b88:	f7ff f902 	bl	8001d90 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d90c      	bls.n	8002bb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e015      	b.n	8002bdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e4      	bne.n	8002b88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc2:	223f      	movs	r2, #63	@ 0x3f
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8002e2c <HAL_DMA_IRQHandler+0x248>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a8e      	ldr	r2, [pc, #568]	@ (8002e30 <HAL_DMA_IRQHandler+0x24c>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0a9b      	lsrs	r3, r3, #10
 8002bfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	2208      	movs	r2, #8
 8002c10:	409a      	lsls	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01a      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0204 	bic.w	r2, r2, #4
 8002c36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	2201      	movs	r2, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	2201      	movs	r2, #1
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7e:	f043 0202 	orr.w	r2, r3, #2
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	2204      	movs	r2, #4
 8002caa:	409a      	lsls	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d043      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03c      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	2210      	movs	r2, #16
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d108      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d024      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
 8002d12:	e01f      	b.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
 8002d24:	e016      	b.n	8002d54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0208 	bic.w	r2, r2, #8
 8002d42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	2220      	movs	r2, #32
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 808f 	beq.w	8002e84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8087 	beq.w	8002e84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d136      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0216 	bic.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_DMA_IRQHandler+0x1da>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	223f      	movs	r2, #63	@ 0x3f
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d07e      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
        }
        return;
 8002dfa:	e079      	b.n	8002ef0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01d      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d031      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
 8002e28:	e02c      	b.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d023      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
 8002e44:	e01e      	b.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10f      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0210 	bic.w	r2, r2, #16
 8002e62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d032      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d022      	beq.n	8002ede <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d307      	bcc.n	8002ecc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f2      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x2cc>
 8002eca:	e000      	b.n	8002ece <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ecc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
 8002eee:	e000      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ef0:	bf00      	nop
    }
  }
}
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b40      	cmp	r3, #64	@ 0x40
 8002f24:	d108      	bne.n	8002f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f36:	e007      	b.n	8002f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3b10      	subs	r3, #16
 8002f64:	4a14      	ldr	r2, [pc, #80]	@ (8002fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f6e:	4a13      	ldr	r2, [pc, #76]	@ (8002fbc <DMA_CalcBaseAndBitshift+0x68>)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d909      	bls.n	8002f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f94:	e007      	b.n	8002fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	aaaaaaab 	.word	0xaaaaaaab
 8002fbc:	08009760 	.word	0x08009760

08002fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11f      	bne.n	800301a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d856      	bhi.n	800308e <DMA_CheckFifoParam+0xce>
 8002fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <DMA_CheckFifoParam+0x28>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	0800300b 	.word	0x0800300b
 8002ff0:	08002ff9 	.word	0x08002ff9
 8002ff4:	0800308f 	.word	0x0800308f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d046      	beq.n	8003092 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e043      	b.n	8003092 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003012:	d140      	bne.n	8003096 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003018:	e03d      	b.n	8003096 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003022:	d121      	bne.n	8003068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d837      	bhi.n	800309a <DMA_CheckFifoParam+0xda>
 800302a:	a201      	add	r2, pc, #4	@ (adr r2, 8003030 <DMA_CheckFifoParam+0x70>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003041 	.word	0x08003041
 8003034:	08003047 	.word	0x08003047
 8003038:	08003041 	.word	0x08003041
 800303c:	08003059 	.word	0x08003059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e030      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d025      	beq.n	800309e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003056:	e022      	b.n	800309e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003060:	d11f      	bne.n	80030a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003066:	e01c      	b.n	80030a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d903      	bls.n	8003076 <DMA_CheckFifoParam+0xb6>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d003      	beq.n	800307c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003074:	e018      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      break;
 800307a:	e015      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      break;
 800308c:	e00b      	b.n	80030a6 <DMA_CheckFifoParam+0xe6>
      break;
 800308e:	bf00      	nop
 8003090:	e00a      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003092:	bf00      	nop
 8003094:	e008      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003096:	bf00      	nop
 8003098:	e006      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 800309a:	bf00      	nop
 800309c:	e004      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 800309e:	bf00      	nop
 80030a0:	e002      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
    }
  } 
  
  return status; 
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	@ 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e165      	b.n	80033a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8154 	bne.w	800339a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d005      	beq.n	800310a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	2b02      	cmp	r3, #2
 8003108:	d130      	bne.n	800316c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 0201 	and.w	r2, r3, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b03      	cmp	r3, #3
 8003176:	d017      	beq.n	80031a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d123      	bne.n	80031fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80ae 	beq.w	800339a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b5d      	ldr	r3, [pc, #372]	@ (80033b8 <HAL_GPIO_Init+0x300>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	4a5c      	ldr	r2, [pc, #368]	@ (80033b8 <HAL_GPIO_Init+0x300>)
 8003248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800324c:	6453      	str	r3, [r2, #68]	@ 0x44
 800324e:	4b5a      	ldr	r3, [pc, #360]	@ (80033b8 <HAL_GPIO_Init+0x300>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800325a:	4a58      	ldr	r2, [pc, #352]	@ (80033bc <HAL_GPIO_Init+0x304>)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	3302      	adds	r3, #2
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4f      	ldr	r2, [pc, #316]	@ (80033c0 <HAL_GPIO_Init+0x308>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d025      	beq.n	80032d2 <HAL_GPIO_Init+0x21a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4e      	ldr	r2, [pc, #312]	@ (80033c4 <HAL_GPIO_Init+0x30c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01f      	beq.n	80032ce <HAL_GPIO_Init+0x216>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4d      	ldr	r2, [pc, #308]	@ (80033c8 <HAL_GPIO_Init+0x310>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d019      	beq.n	80032ca <HAL_GPIO_Init+0x212>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4c      	ldr	r2, [pc, #304]	@ (80033cc <HAL_GPIO_Init+0x314>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_GPIO_Init+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4b      	ldr	r2, [pc, #300]	@ (80033d0 <HAL_GPIO_Init+0x318>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00d      	beq.n	80032c2 <HAL_GPIO_Init+0x20a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4a      	ldr	r2, [pc, #296]	@ (80033d4 <HAL_GPIO_Init+0x31c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <HAL_GPIO_Init+0x206>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a49      	ldr	r2, [pc, #292]	@ (80033d8 <HAL_GPIO_Init+0x320>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_GPIO_Init+0x202>
 80032b6:	2306      	movs	r3, #6
 80032b8:	e00c      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ba:	2307      	movs	r3, #7
 80032bc:	e00a      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032be:	2305      	movs	r3, #5
 80032c0:	e008      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032c2:	2304      	movs	r3, #4
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x21c>
 80032d2:	2300      	movs	r3, #0
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e4:	4935      	ldr	r1, [pc, #212]	@ (80033bc <HAL_GPIO_Init+0x304>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f2:	4b3a      	ldr	r3, [pc, #232]	@ (80033dc <HAL_GPIO_Init+0x324>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003316:	4a31      	ldr	r2, [pc, #196]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800331c:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <HAL_GPIO_Init+0x324>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003340:	4a26      	ldr	r2, [pc, #152]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003346:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336a:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <HAL_GPIO_Init+0x324>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003370:	4b1a      	ldr	r3, [pc, #104]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003394:	4a11      	ldr	r2, [pc, #68]	@ (80033dc <HAL_GPIO_Init+0x324>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	f67f ae96 	bls.w	80030d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3724      	adds	r7, #36	@ 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40021400 	.word	0x40021400
 80033d8:	40021800 	.word	0x40021800
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	e001      	b.n	8003402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
 800341c:	4613      	mov	r3, r2
 800341e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003420:	787b      	ldrb	r3, [r7, #1]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800342c:	e003      	b.n	8003436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800342e:	887b      	ldrh	r3, [r7, #2]
 8003430:	041a      	lsls	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	619a      	str	r2, [r3, #24]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003454:	887a      	ldrh	r2, [r7, #2]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4013      	ands	r3, r2
 800345a:	041a      	lsls	r2, r3, #16
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43d9      	mvns	r1, r3
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	400b      	ands	r3, r1
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	619a      	str	r2, [r3, #24]
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348e:	4a05      	ldr	r2, [pc, #20]	@ (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f806 	bl	80034a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af02      	add	r7, sp, #8
 80034c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e108      	b.n	80036e2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe fa22 	bl	8001934 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2203      	movs	r2, #3
 80034f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034fe:	d102      	bne.n	8003506 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f002 f9fc 	bl	8005908 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7c1a      	ldrb	r2, [r3, #16]
 8003518:	f88d 2000 	strb.w	r2, [sp]
 800351c:	3304      	adds	r3, #4
 800351e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003520:	f002 f98e 	bl	8005840 <USB_CoreInit>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0d5      	b.n	80036e2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f002 f9f4 	bl	800592a <USB_SetCurrentMode>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0c6      	b.n	80036e2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e04a      	b.n	80035f0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3315      	adds	r3, #21
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3314      	adds	r3, #20
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	b298      	uxth	r0, r3
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	332e      	adds	r3, #46	@ 0x2e
 8003596:	4602      	mov	r2, r0
 8003598:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3318      	adds	r3, #24
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	331c      	adds	r3, #28
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3320      	adds	r3, #32
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3324      	adds	r3, #36	@ 0x24
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	3301      	adds	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	791b      	ldrb	r3, [r3, #4]
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d3af      	bcc.n	800355a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e044      	b.n	800368a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	3301      	adds	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	791b      	ldrb	r3, [r3, #4]
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	429a      	cmp	r2, r3
 8003692:	d3b5      	bcc.n	8003600 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7c1a      	ldrb	r2, [r3, #16]
 800369c:	f88d 2000 	strb.w	r2, [sp]
 80036a0:	3304      	adds	r3, #4
 80036a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036a4:	f002 f98e 	bl	80059c4 <USB_DevInit>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e013      	b.n	80036e2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7b1b      	ldrb	r3, [r3, #12]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d102      	bne.n	80036d6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f80a 	bl	80036ea <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 fb49 	bl	8005d72 <USB_DevDisconnect>

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800371c:	f043 0303 	orr.w	r3, r3, #3
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0cc      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b68      	ldr	r3, [pc, #416]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d90c      	bls.n	8003770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b65      	ldr	r3, [pc, #404]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b63      	ldr	r3, [pc, #396]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b8      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003788:	4b59      	ldr	r3, [pc, #356]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a58      	ldr	r2, [pc, #352]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a0:	4b53      	ldr	r3, [pc, #332]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a52      	ldr	r2, [pc, #328]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ac:	4b50      	ldr	r3, [pc, #320]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	494d      	ldr	r1, [pc, #308]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d044      	beq.n	8003854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b47      	ldr	r3, [pc, #284]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d119      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e07f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	4b3f      	ldr	r3, [pc, #252]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e06f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e067      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b37      	ldr	r3, [pc, #220]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4934      	ldr	r1, [pc, #208]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003824:	f7fe fab4 	bl	8001d90 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fe fab0 	bl	8001d90 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e04f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b2b      	ldr	r3, [pc, #172]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b25      	ldr	r3, [pc, #148]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d20c      	bcs.n	800387c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b22      	ldr	r3, [pc, #136]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b20      	ldr	r3, [pc, #128]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e032      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003888:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4916      	ldr	r1, [pc, #88]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a6:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	490e      	ldr	r1, [pc, #56]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ba:	f000 fb7f 	bl	8003fbc <HAL_RCC_GetSysClockFreq>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	490a      	ldr	r1, [pc, #40]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	5ccb      	ldrb	r3, [r1, r3]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a09      	ldr	r2, [pc, #36]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038d6:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fa14 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023c00 	.word	0x40023c00
 80038f0:	40023800 	.word	0x40023800
 80038f4:	08009748 	.word	0x08009748
 80038f8:	20000000 	.word	0x20000000
 80038fc:	20000004 	.word	0x20000004

08003900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003904:	4b03      	ldr	r3, [pc, #12]	@ (8003914 <HAL_RCC_GetHCLKFreq+0x14>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000

08003918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800391c:	f7ff fff0 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	0a9b      	lsrs	r3, r3, #10
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4903      	ldr	r1, [pc, #12]	@ (800393c <HAL_RCC_GetPCLK1Freq+0x24>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	08009758 	.word	0x08009758

08003940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003944:	f7ff ffdc 	bl	8003900 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0b5b      	lsrs	r3, r3, #13
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	@ (8003964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	08009758 	.word	0x08009758

08003968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08c      	sub	sp, #48	@ 0x30
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d010      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80039a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039a6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	496c      	ldr	r1, [pc, #432]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80039be:	2301      	movs	r3, #1
 80039c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d010      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80039ce:	4b64      	ldr	r3, [pc, #400]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039d4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	4960      	ldr	r1, [pc, #384]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80039ec:	2301      	movs	r3, #1
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d017      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039fc:	4b58      	ldr	r3, [pc, #352]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	4955      	ldr	r1, [pc, #340]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a38:	4b49      	ldr	r3, [pc, #292]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a46:	4946      	ldr	r1, [pc, #280]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a56:	d101      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003a64:	2301      	movs	r3, #1
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 808a 	beq.w	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	4b39      	ldr	r3, [pc, #228]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	4a38      	ldr	r2, [pc, #224]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a86:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a92:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a33      	ldr	r2, [pc, #204]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a9e:	f7fe f977 	bl	8001d90 <HAL_GetTick>
 8003aa2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fe f973 	bl	8001d90 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e278      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ac4:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003acc:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02f      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003adc:	6a3a      	ldr	r2, [r7, #32]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aea:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aec:	4b1e      	ldr	r3, [pc, #120]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003af8:	4a19      	ldr	r2, [pc, #100]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003afe:	4b18      	ldr	r3, [pc, #96]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d114      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe f941 	bl	8001d90 <HAL_GetTick>
 8003b0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fe f93d 	bl	8001d90 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e240      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ee      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b40:	d114      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b56:	4902      	ldr	r1, [pc, #8]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]
 8003b5c:	e00c      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40007000 	.word	0x40007000
 8003b68:	42470e40 	.word	0x42470e40
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a49      	ldr	r2, [pc, #292]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b76:	6093      	str	r3, [r2, #8]
 8003b78:	4b47      	ldr	r3, [pc, #284]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b84:	4944      	ldr	r1, [pc, #272]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b9e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003bac:	4b3a      	ldr	r3, [pc, #232]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	4937      	ldr	r1, [pc, #220]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bce:	4b32      	ldr	r3, [pc, #200]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bdc:	492e      	ldr	r1, [pc, #184]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d011      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bf0:	4b29      	ldr	r3, [pc, #164]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	4926      	ldr	r1, [pc, #152]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003c10:	2301      	movs	r3, #1
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003c20:	4b1d      	ldr	r3, [pc, #116]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	491a      	ldr	r1, [pc, #104]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d011      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003c42:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c48:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c50:	4911      	ldr	r1, [pc, #68]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c60:	d101      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003c62:	2301      	movs	r3, #1
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c74:	f040 80ff 	bne.w	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c78:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c7e:	f7fe f887 	bl	8001d90 <HAL_GetTick>
 8003c82:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c84:	e00e      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c86:	f7fe f883 	bl	8001d90 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d907      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e188      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	424711e0 	.word	0x424711e0
 8003ca0:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ea      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d028      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d124      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cd8:	4b71      	ldr	r3, [pc, #452]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cea:	4b6d      	ldr	r3, [pc, #436]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cf0:	0e1b      	lsrs	r3, r3, #24
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	431a      	orrs	r2, r3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	4961      	ldr	r1, [pc, #388]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d035      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4c:	d130      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d4e:	4b54      	ldr	r3, [pc, #336]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d60:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d66:	0f1b      	lsrs	r3, r3, #28
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	019b      	lsls	r3, r3, #6
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	071b      	lsls	r3, r3, #28
 8003d90:	4943      	ldr	r1, [pc, #268]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d98:	4b41      	ldr	r3, [pc, #260]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d9e:	f023 021f 	bic.w	r2, r3, #31
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da6:	3b01      	subs	r3, #1
 8003da8:	493d      	ldr	r1, [pc, #244]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d029      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dc4:	d124      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003dc6:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd8:	4b31      	ldr	r3, [pc, #196]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dde:	0f1b      	lsrs	r3, r3, #28
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	019b      	lsls	r3, r3, #6
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	431a      	orrs	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	071b      	lsls	r3, r3, #28
 8003e08:	4925      	ldr	r1, [pc, #148]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d016      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	071b      	lsls	r3, r3, #28
 8003e42:	4917      	ldr	r1, [pc, #92]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e50:	f7fd ff9e 	bl	8001d90 <HAL_GetTick>
 8003e54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e58:	f7fd ff9a 	bl	8001d90 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e09f      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 8095 	bne.w	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fd ff84 	bl	8001d90 <HAL_GetTick>
 8003e88:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e8a:	e00f      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e8c:	f7fd ff80 	bl	8001d90 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d908      	bls.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e085      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	42470068 	.word	0x42470068
 8003ea8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003eac:	4b41      	ldr	r3, [pc, #260]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb8:	d0e8      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02b      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d127      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003ee2:	4b34      	ldr	r3, [pc, #208]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	431a      	orrs	r2, r3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	3b01      	subs	r3, #1
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	061b      	lsls	r3, r3, #24
 8003f10:	4928      	ldr	r1, [pc, #160]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f18:	4b26      	ldr	r3, [pc, #152]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f1e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	3b01      	subs	r3, #1
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	4922      	ldr	r1, [pc, #136]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01d      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f46:	d118      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	0e1b      	lsrs	r3, r3, #24
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	019b      	lsls	r3, r3, #6
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	4910      	ldr	r1, [pc, #64]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fd ff06 	bl	8001d90 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f88:	f7fd ff02 	bl	8001d90 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e007      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fa6:	d1ef      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3730      	adds	r7, #48	@ 0x30
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	42470070 	.word	0x42470070

08003fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc0:	b0ae      	sub	sp, #184	@ 0xb8
 8003fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe2:	4bcb      	ldr	r3, [pc, #812]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	f200 8206 	bhi.w	80043fc <HAL_RCC_GetSysClockFreq+0x440>
 8003ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	080043fd 	.word	0x080043fd
 8004000:	080043fd 	.word	0x080043fd
 8004004:	080043fd 	.word	0x080043fd
 8004008:	08004035 	.word	0x08004035
 800400c:	080043fd 	.word	0x080043fd
 8004010:	080043fd 	.word	0x080043fd
 8004014:	080043fd 	.word	0x080043fd
 8004018:	0800403d 	.word	0x0800403d
 800401c:	080043fd 	.word	0x080043fd
 8004020:	080043fd 	.word	0x080043fd
 8004024:	080043fd 	.word	0x080043fd
 8004028:	0800422d 	.word	0x0800422d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4bb9      	ldr	r3, [pc, #740]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x358>)
 800402e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004032:	e1e7      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004034:	4bb8      	ldr	r3, [pc, #736]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004036:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800403a:	e1e3      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800403c:	4bb4      	ldr	r3, [pc, #720]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004048:	4bb1      	ldr	r3, [pc, #708]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d071      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004054:	4bae      	ldr	r3, [pc, #696]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004060:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800407a:	4622      	mov	r2, r4
 800407c:	462b      	mov	r3, r5
 800407e:	f04f 0000 	mov.w	r0, #0
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	0159      	lsls	r1, r3, #5
 8004088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800408c:	0150      	lsls	r0, r2, #5
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4621      	mov	r1, r4
 8004094:	1a51      	subs	r1, r2, r1
 8004096:	6439      	str	r1, [r7, #64]	@ 0x40
 8004098:	4629      	mov	r1, r5
 800409a:	eb63 0301 	sbc.w	r3, r3, r1
 800409e:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80040ac:	4649      	mov	r1, r9
 80040ae:	018b      	lsls	r3, r1, #6
 80040b0:	4641      	mov	r1, r8
 80040b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040b6:	4641      	mov	r1, r8
 80040b8:	018a      	lsls	r2, r1, #6
 80040ba:	4641      	mov	r1, r8
 80040bc:	1a51      	subs	r1, r2, r1
 80040be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040c0:	4649      	mov	r1, r9
 80040c2:	eb63 0301 	sbc.w	r3, r3, r1
 80040c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80040d4:	4649      	mov	r1, r9
 80040d6:	00cb      	lsls	r3, r1, #3
 80040d8:	4641      	mov	r1, r8
 80040da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040de:	4641      	mov	r1, r8
 80040e0:	00ca      	lsls	r2, r1, #3
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	4622      	mov	r2, r4
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ee:	462b      	mov	r3, r5
 80040f0:	460a      	mov	r2, r1
 80040f2:	eb42 0303 	adc.w	r3, r2, r3
 80040f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004104:	4629      	mov	r1, r5
 8004106:	024b      	lsls	r3, r1, #9
 8004108:	4621      	mov	r1, r4
 800410a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800410e:	4621      	mov	r1, r4
 8004110:	024a      	lsls	r2, r1, #9
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004120:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004124:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004128:	f7fc fdbe 	bl	8000ca8 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4613      	mov	r3, r2
 8004132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004136:	e067      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004138:	4b75      	ldr	r3, [pc, #468]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004144:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004148:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800414c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004150:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004152:	2300      	movs	r3, #0
 8004154:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004156:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4621      	mov	r1, r4
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004178:	4629      	mov	r1, r5
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800418c:	4649      	mov	r1, r9
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4641      	mov	r1, r8
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4641      	mov	r1, r8
 800419c:	ebb2 0a01 	subs.w	sl, r2, r1
 80041a0:	4649      	mov	r1, r9
 80041a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ba:	4692      	mov	sl, r2
 80041bc:	469b      	mov	fp, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb1a 0303 	adds.w	r3, sl, r3
 80041c4:	623b      	str	r3, [r7, #32]
 80041c6:	462b      	mov	r3, r5
 80041c8:	eb4b 0303 	adc.w	r3, fp, r3
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041da:	4629      	mov	r1, r5
 80041dc:	028b      	lsls	r3, r1, #10
 80041de:	4621      	mov	r1, r4
 80041e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041e4:	4621      	mov	r1, r4
 80041e6:	028a      	lsls	r2, r1, #10
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041f0:	2200      	movs	r2, #0
 80041f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80041f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80041f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80041fa:	f7fc fd55 	bl	8000ca8 <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4613      	mov	r3, r2
 8004204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004208:	4b41      	ldr	r3, [pc, #260]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	3301      	adds	r3, #1
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800421a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800421e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800422a:	e0eb      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800422c:	4b38      	ldr	r3, [pc, #224]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004234:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004238:	4b35      	ldr	r3, [pc, #212]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d06b      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004244:	4b32      	ldr	r3, [pc, #200]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x354>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	099b      	lsrs	r3, r3, #6
 800424a:	2200      	movs	r2, #0
 800424c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800424e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004256:	663b      	str	r3, [r7, #96]	@ 0x60
 8004258:	2300      	movs	r3, #0
 800425a:	667b      	str	r3, [r7, #100]	@ 0x64
 800425c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004260:	4622      	mov	r2, r4
 8004262:	462b      	mov	r3, r5
 8004264:	f04f 0000 	mov.w	r0, #0
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	0159      	lsls	r1, r3, #5
 800426e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004272:	0150      	lsls	r0, r2, #5
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4621      	mov	r1, r4
 800427a:	1a51      	subs	r1, r2, r1
 800427c:	61b9      	str	r1, [r7, #24]
 800427e:	4629      	mov	r1, r5
 8004280:	eb63 0301 	sbc.w	r3, r3, r1
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004292:	4659      	mov	r1, fp
 8004294:	018b      	lsls	r3, r1, #6
 8004296:	4651      	mov	r1, sl
 8004298:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800429c:	4651      	mov	r1, sl
 800429e:	018a      	lsls	r2, r1, #6
 80042a0:	4651      	mov	r1, sl
 80042a2:	ebb2 0801 	subs.w	r8, r2, r1
 80042a6:	4659      	mov	r1, fp
 80042a8:	eb63 0901 	sbc.w	r9, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042c0:	4690      	mov	r8, r2
 80042c2:	4699      	mov	r9, r3
 80042c4:	4623      	mov	r3, r4
 80042c6:	eb18 0303 	adds.w	r3, r8, r3
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	462b      	mov	r3, r5
 80042ce:	eb49 0303 	adc.w	r3, r9, r3
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042e0:	4629      	mov	r1, r5
 80042e2:	024b      	lsls	r3, r1, #9
 80042e4:	4621      	mov	r1, r4
 80042e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042ea:	4621      	mov	r1, r4
 80042ec:	024a      	lsls	r2, r1, #9
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042f6:	2200      	movs	r2, #0
 80042f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80042fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004300:	f7fc fcd2 	bl	8000ca8 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4613      	mov	r3, r2
 800430a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800430e:	e065      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x420>
 8004310:	40023800 	.word	0x40023800
 8004314:	00f42400 	.word	0x00f42400
 8004318:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431c:	4b3d      	ldr	r3, [pc, #244]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x458>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	2200      	movs	r2, #0
 8004324:	4618      	mov	r0, r3
 8004326:	4611      	mov	r1, r2
 8004328:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800432c:	653b      	str	r3, [r7, #80]	@ 0x50
 800432e:	2300      	movs	r3, #0
 8004330:	657b      	str	r3, [r7, #84]	@ 0x54
 8004332:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004336:	4642      	mov	r2, r8
 8004338:	464b      	mov	r3, r9
 800433a:	f04f 0000 	mov.w	r0, #0
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	0159      	lsls	r1, r3, #5
 8004344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004348:	0150      	lsls	r0, r2, #5
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4641      	mov	r1, r8
 8004350:	1a51      	subs	r1, r2, r1
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	4649      	mov	r1, r9
 8004356:	eb63 0301 	sbc.w	r3, r3, r1
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004368:	4659      	mov	r1, fp
 800436a:	018b      	lsls	r3, r1, #6
 800436c:	4651      	mov	r1, sl
 800436e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004372:	4651      	mov	r1, sl
 8004374:	018a      	lsls	r2, r1, #6
 8004376:	4651      	mov	r1, sl
 8004378:	1a54      	subs	r4, r2, r1
 800437a:	4659      	mov	r1, fp
 800437c:	eb63 0501 	sbc.w	r5, r3, r1
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	00eb      	lsls	r3, r5, #3
 800438a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800438e:	00e2      	lsls	r2, r4, #3
 8004390:	4614      	mov	r4, r2
 8004392:	461d      	mov	r5, r3
 8004394:	4643      	mov	r3, r8
 8004396:	18e3      	adds	r3, r4, r3
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	464b      	mov	r3, r9
 800439c:	eb45 0303 	adc.w	r3, r5, r3
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ae:	4629      	mov	r1, r5
 80043b0:	028b      	lsls	r3, r1, #10
 80043b2:	4621      	mov	r1, r4
 80043b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b8:	4621      	mov	r1, r4
 80043ba:	028a      	lsls	r2, r1, #10
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043c4:	2200      	movs	r2, #0
 80043c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80043ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043ce:	f7fc fc6b 	bl	8000ca8 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4613      	mov	r3, r2
 80043d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x458>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	0f1b      	lsrs	r3, r3, #28
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80043ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80043fa:	e003      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x45c>)
 80043fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004402:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004408:	4618      	mov	r0, r3
 800440a:	37b8      	adds	r7, #184	@ 0xb8
 800440c:	46bd      	mov	sp, r7
 800440e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	00f42400 	.word	0x00f42400

0800441c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e28d      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8083 	beq.w	8004542 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800443c:	4b94      	ldr	r3, [pc, #592]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b04      	cmp	r3, #4
 8004446:	d019      	beq.n	800447c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004448:	4b91      	ldr	r3, [pc, #580]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004450:	2b08      	cmp	r3, #8
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004454:	4b8e      	ldr	r3, [pc, #568]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004460:	d00c      	beq.n	800447c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b8b      	ldr	r3, [pc, #556]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d112      	bne.n	8004494 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446e:	4b88      	ldr	r3, [pc, #544]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800447a:	d10b      	bne.n	8004494 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	4b84      	ldr	r3, [pc, #528]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d05b      	beq.n	8004540 <HAL_RCC_OscConfig+0x124>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d157      	bne.n	8004540 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e25a      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449c:	d106      	bne.n	80044ac <HAL_RCC_OscConfig+0x90>
 800449e:	4b7c      	ldr	r3, [pc, #496]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7b      	ldr	r2, [pc, #492]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e01d      	b.n	80044e8 <HAL_RCC_OscConfig+0xcc>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0xb4>
 80044b6:	4b76      	ldr	r3, [pc, #472]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a75      	ldr	r2, [pc, #468]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b73      	ldr	r3, [pc, #460]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a72      	ldr	r2, [pc, #456]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0xcc>
 80044d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a6b      	ldr	r2, [pc, #428]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80044e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fc4e 	bl	8001d90 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fd fc4a 	bl	8001d90 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	@ 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e21f      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	4b61      	ldr	r3, [pc, #388]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0xdc>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd fc3a 	bl	8001d90 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7fd fc36 	bl	8001d90 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	@ 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e20b      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	4b57      	ldr	r3, [pc, #348]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x104>
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d06f      	beq.n	800462e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800454e:	4b50      	ldr	r3, [pc, #320]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b00      	cmp	r3, #0
 8004558:	d017      	beq.n	800458a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800455a:	4b4d      	ldr	r3, [pc, #308]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004562:	2b08      	cmp	r3, #8
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004566:	4b4a      	ldr	r3, [pc, #296]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004572:	4b47      	ldr	r3, [pc, #284]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d11c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457e:	4b44      	ldr	r3, [pc, #272]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d116      	bne.n	80045b8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458a:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x186>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e1d3      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4937      	ldr	r1, [pc, #220]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	e03a      	b.n	800462e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d020      	beq.n	8004602 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c0:	4b34      	ldr	r3, [pc, #208]	@ (8004694 <HAL_RCC_OscConfig+0x278>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fd fbe3 	bl	8001d90 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ce:	f7fd fbdf 	bl	8001d90 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e1b4      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ec:	4b28      	ldr	r3, [pc, #160]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4925      	ldr	r1, [pc, #148]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
 8004600:	e015      	b.n	800462e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004602:	4b24      	ldr	r3, [pc, #144]	@ (8004694 <HAL_RCC_OscConfig+0x278>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd fbc2 	bl	8001d90 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004610:	f7fd fbbe 	bl	8001d90 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e193      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	4b1b      	ldr	r3, [pc, #108]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d036      	beq.n	80046a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d016      	beq.n	8004670 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004642:	4b15      	ldr	r3, [pc, #84]	@ (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fd fba2 	bl	8001d90 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004650:	f7fd fb9e 	bl	8001d90 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e173      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <HAL_RCC_OscConfig+0x274>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x234>
 800466e:	e01b      	b.n	80046a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004670:	4b09      	ldr	r3, [pc, #36]	@ (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fd fb8b 	bl	8001d90 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	e00e      	b.n	800469c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467e:	f7fd fb87 	bl	8001d90 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d907      	bls.n	800469c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e15c      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
 8004690:	40023800 	.word	0x40023800
 8004694:	42470000 	.word	0x42470000
 8004698:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469c:	4b8a      	ldr	r3, [pc, #552]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800469e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ea      	bne.n	800467e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8097 	beq.w	80047e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ba:	4b83      	ldr	r3, [pc, #524]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	4b7f      	ldr	r3, [pc, #508]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	4a7e      	ldr	r2, [pc, #504]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046d6:	4b7c      	ldr	r3, [pc, #496]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e6:	4b79      	ldr	r3, [pc, #484]	@ (80048cc <HAL_RCC_OscConfig+0x4b0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f2:	4b76      	ldr	r3, [pc, #472]	@ (80048cc <HAL_RCC_OscConfig+0x4b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a75      	ldr	r2, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x4b0>)
 80046f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fe:	f7fd fb47 	bl	8001d90 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004706:	f7fd fb43 	bl	8001d90 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e118      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	4b6c      	ldr	r3, [pc, #432]	@ (80048cc <HAL_RCC_OscConfig+0x4b0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x31e>
 800472c:	4b66      	ldr	r3, [pc, #408]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004730:	4a65      	ldr	r2, [pc, #404]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6713      	str	r3, [r2, #112]	@ 0x70
 8004738:	e01c      	b.n	8004774 <HAL_RCC_OscConfig+0x358>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b05      	cmp	r3, #5
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x340>
 8004742:	4b61      	ldr	r3, [pc, #388]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	4a60      	ldr	r2, [pc, #384]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	6713      	str	r3, [r2, #112]	@ 0x70
 800474e:	4b5e      	ldr	r3, [pc, #376]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004752:	4a5d      	ldr	r2, [pc, #372]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6713      	str	r3, [r2, #112]	@ 0x70
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0x358>
 800475c:	4b5a      	ldr	r3, [pc, #360]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004760:	4a59      	ldr	r2, [pc, #356]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	6713      	str	r3, [r2, #112]	@ 0x70
 8004768:	4b57      	ldr	r3, [pc, #348]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	4a56      	ldr	r2, [pc, #344]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800476e:	f023 0304 	bic.w	r3, r3, #4
 8004772:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fd fb08 	bl	8001d90 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fd fb04 	bl	8001d90 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e0d7      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479a:	4b4b      	ldr	r3, [pc, #300]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ee      	beq.n	8004784 <HAL_RCC_OscConfig+0x368>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fd faf2 	bl	8001d90 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd faee 	bl	8001d90 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e0c1      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c6:	4b40      	ldr	r3, [pc, #256]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1ee      	bne.n	80047b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d8:	4b3b      	ldr	r3, [pc, #236]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047dc:	4a3a      	ldr	r2, [pc, #232]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80047de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80ad 	beq.w	8004948 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ee:	4b36      	ldr	r3, [pc, #216]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d060      	beq.n	80048bc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d145      	bne.n	800488e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	4b33      	ldr	r3, [pc, #204]	@ (80048d0 <HAL_RCC_OscConfig+0x4b4>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd fac2 	bl	8001d90 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fd fabe 	bl	8001d90 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e093      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	491b      	ldr	r1, [pc, #108]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004860:	4b1b      	ldr	r3, [pc, #108]	@ (80048d0 <HAL_RCC_OscConfig+0x4b4>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fd fa93 	bl	8001d90 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486e:	f7fd fa8f 	bl	8001d90 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e064      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x452>
 800488c:	e05c      	b.n	8004948 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b10      	ldr	r3, [pc, #64]	@ (80048d0 <HAL_RCC_OscConfig+0x4b4>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd fa7c 	bl	8001d90 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fd fa78 	bl	8001d90 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e04d      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x480>
 80048ba:	e045      	b.n	8004948 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e040      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40007000 	.word	0x40007000
 80048d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004954 <HAL_RCC_OscConfig+0x538>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d030      	beq.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d129      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d122      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800490a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800490c:	4293      	cmp	r3, r2
 800490e:	d119      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	3b01      	subs	r3, #1
 800491e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d10f      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d107      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800

08004958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e041      	b.n	80049ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc ff70 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f000 f984 	bl	8004ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d001      	beq.n	8004a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e046      	b.n	8004a9e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	@ (8004aac <HAL_TIM_Base_Start+0xb4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2a:	d01d      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab0 <HAL_TIM_Base_Start+0xb8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d018      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab4 <HAL_TIM_Base_Start+0xbc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <HAL_TIM_Base_Start+0xc0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004abc <HAL_TIM_Base_Start+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	@ (8004ac0 <HAL_TIM_Base_Start+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <HAL_TIM_Base_Start+0xcc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d010      	beq.n	8004a9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	e007      	b.n	8004a9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40010400 	.word	0x40010400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40001800 	.word	0x40001800

08004ac8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6a1a      	ldr	r2, [r3, #32]
 8004ad6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10f      	bne.n	8004b00 <HAL_TIM_Base_Stop+0x38>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d107      	bne.n	8004b00 <HAL_TIM_Base_Stop+0x38>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0201 	bic.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_ConfigClockSource+0x1c>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e0b4      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x186>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b58:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6a:	d03e      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0xd4>
 8004b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b70:	f200 8087 	bhi.w	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b78:	f000 8086 	beq.w	8004c88 <HAL_TIM_ConfigClockSource+0x172>
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b80:	d87f      	bhi.n	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
 8004b82:	2b70      	cmp	r3, #112	@ 0x70
 8004b84:	d01a      	beq.n	8004bbc <HAL_TIM_ConfigClockSource+0xa6>
 8004b86:	2b70      	cmp	r3, #112	@ 0x70
 8004b88:	d87b      	bhi.n	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
 8004b8a:	2b60      	cmp	r3, #96	@ 0x60
 8004b8c:	d050      	beq.n	8004c30 <HAL_TIM_ConfigClockSource+0x11a>
 8004b8e:	2b60      	cmp	r3, #96	@ 0x60
 8004b90:	d877      	bhi.n	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
 8004b92:	2b50      	cmp	r3, #80	@ 0x50
 8004b94:	d03c      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0xfa>
 8004b96:	2b50      	cmp	r3, #80	@ 0x50
 8004b98:	d873      	bhi.n	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
 8004b9a:	2b40      	cmp	r3, #64	@ 0x40
 8004b9c:	d058      	beq.n	8004c50 <HAL_TIM_ConfigClockSource+0x13a>
 8004b9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ba0:	d86f      	bhi.n	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba2:	2b30      	cmp	r3, #48	@ 0x30
 8004ba4:	d064      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0x15a>
 8004ba6:	2b30      	cmp	r3, #48	@ 0x30
 8004ba8:	d86b      	bhi.n	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d060      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0x15a>
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d867      	bhi.n	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d05c      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d05a      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0x15a>
 8004bba:	e062      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bcc:	f000 f990 	bl	8004ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]
      break;
 8004be8:	e04f      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bfa:	f000 f979 	bl	8004ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c0c:	609a      	str	r2, [r3, #8]
      break;
 8004c0e:	e03c      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f000 f8ed 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2150      	movs	r1, #80	@ 0x50
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 f946 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c2e:	e02c      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f000 f90c 	bl	8004e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2160      	movs	r1, #96	@ 0x60
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 f936 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c4e:	e01c      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f000 f8cd 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2140      	movs	r1, #64	@ 0x40
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f926 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c6e:	e00c      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f000 f91d 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c80:	e003      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
      break;
 8004c86:	e000      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a46      	ldr	r2, [pc, #280]	@ (8004dd0 <TIM_Base_SetConfig+0x12c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a43      	ldr	r2, [pc, #268]	@ (8004dd4 <TIM_Base_SetConfig+0x130>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a42      	ldr	r2, [pc, #264]	@ (8004dd8 <TIM_Base_SetConfig+0x134>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a41      	ldr	r2, [pc, #260]	@ (8004ddc <TIM_Base_SetConfig+0x138>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a40      	ldr	r2, [pc, #256]	@ (8004de0 <TIM_Base_SetConfig+0x13c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	@ (8004dd0 <TIM_Base_SetConfig+0x12c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d027      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a32      	ldr	r2, [pc, #200]	@ (8004dd4 <TIM_Base_SetConfig+0x130>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d023      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a31      	ldr	r2, [pc, #196]	@ (8004dd8 <TIM_Base_SetConfig+0x134>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01f      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a30      	ldr	r2, [pc, #192]	@ (8004ddc <TIM_Base_SetConfig+0x138>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	@ (8004de0 <TIM_Base_SetConfig+0x13c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d017      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2e      	ldr	r2, [pc, #184]	@ (8004de4 <TIM_Base_SetConfig+0x140>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2d      	ldr	r2, [pc, #180]	@ (8004de8 <TIM_Base_SetConfig+0x144>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2c      	ldr	r2, [pc, #176]	@ (8004dec <TIM_Base_SetConfig+0x148>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2b      	ldr	r2, [pc, #172]	@ (8004df0 <TIM_Base_SetConfig+0x14c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2a      	ldr	r2, [pc, #168]	@ (8004df4 <TIM_Base_SetConfig+0x150>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a29      	ldr	r2, [pc, #164]	@ (8004df8 <TIM_Base_SetConfig+0x154>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d108      	bne.n	8004d68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a10      	ldr	r2, [pc, #64]	@ (8004dd0 <TIM_Base_SetConfig+0x12c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_Base_SetConfig+0xf8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a12      	ldr	r2, [pc, #72]	@ (8004de0 <TIM_Base_SetConfig+0x13c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d103      	bne.n	8004da4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d105      	bne.n	8004dc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f023 0201 	bic.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800
 8004df0:	40001800 	.word	0x40001800
 8004df4:	40001c00 	.word	0x40001c00
 8004df8:	40002000 	.word	0x40002000

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f043 0307 	orr.w	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e05a      	b.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a21      	ldr	r2, [pc, #132]	@ (800500c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d01d      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1a      	ldr	r2, [pc, #104]	@ (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	@ (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a15      	ldr	r2, [pc, #84]	@ (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10c      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40010400 	.word	0x40010400
 8005020:	40014000 	.word	0x40014000
 8005024:	40001800 	.word	0x40001800

08005028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e042      	b.n	80050c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fc fc28 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2224      	movs	r2, #36	@ 0x24
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800506a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f973 	bl	8005358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	@ 0x28
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d175      	bne.n	80051d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_UART_Transmit+0x2c>
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e06e      	b.n	80051d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2221      	movs	r2, #33	@ 0x21
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005106:	f7fc fe43 	bl	8001d90 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005120:	d108      	bne.n	8005134 <HAL_UART_Transmit+0x6c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e003      	b.n	800513c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800513c:	e02e      	b.n	800519c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f848 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e03a      	b.n	80051d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	3302      	adds	r3, #2
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e007      	b.n	800518e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	3301      	adds	r3, #1
 800518c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1cb      	bne.n	800513e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2140      	movs	r1, #64	@ 0x40
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f814 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e006      	b.n	80051d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ee:	e03b      	b.n	8005268 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d037      	beq.n	8005268 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f8:	f7fc fdca 	bl	8001d90 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <UART_WaitOnFlagUntilTimeout+0x30>
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e03a      	b.n	8005288 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d023      	beq.n	8005268 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b80      	cmp	r3, #128	@ 0x80
 8005224:	d020      	beq.n	8005268 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b40      	cmp	r3, #64	@ 0x40
 800522a:	d01d      	beq.n	8005268 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b08      	cmp	r3, #8
 8005238:	d116      	bne.n	8005268 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f81d 	bl	8005290 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2208      	movs	r2, #8
 800525a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e00f      	b.n	8005288 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4013      	ands	r3, r2
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	429a      	cmp	r2, r3
 8005276:	bf0c      	ite	eq
 8005278:	2301      	moveq	r3, #1
 800527a:	2300      	movne	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	429a      	cmp	r2, r3
 8005284:	d0b4      	beq.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b095      	sub	sp, #84	@ 0x54
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80052ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3314      	adds	r3, #20
 80052d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	61fb      	str	r3, [r7, #28]
   return(result);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d119      	bne.n	800533c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60bb      	str	r3, [r7, #8]
   return(result);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0310 	bic.w	r3, r3, #16
 800531e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005328:	61ba      	str	r2, [r7, #24]
 800532a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	613b      	str	r3, [r7, #16]
   return(result);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800534a:	bf00      	nop
 800534c:	3754      	adds	r7, #84	@ 0x54
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800535c:	b0c0      	sub	sp, #256	@ 0x100
 800535e:	af00      	add	r7, sp, #0
 8005360:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005374:	68d9      	ldr	r1, [r3, #12]
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	ea40 0301 	orr.w	r3, r0, r1
 8005380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	431a      	orrs	r2, r3
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	431a      	orrs	r2, r3
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053b0:	f021 010c 	bic.w	r1, r1, #12
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053be:	430b      	orrs	r3, r1
 80053c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d2:	6999      	ldr	r1, [r3, #24]
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	ea40 0301 	orr.w	r3, r0, r1
 80053de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4b8f      	ldr	r3, [pc, #572]	@ (8005624 <UART_SetConfig+0x2cc>)
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d005      	beq.n	80053f8 <UART_SetConfig+0xa0>
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b8d      	ldr	r3, [pc, #564]	@ (8005628 <UART_SetConfig+0x2d0>)
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d104      	bne.n	8005402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053f8:	f7fe faa2 	bl	8003940 <HAL_RCC_GetPCLK2Freq>
 80053fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005400:	e003      	b.n	800540a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005402:	f7fe fa89 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8005406:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005414:	f040 810c 	bne.w	8005630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541c:	2200      	movs	r2, #0
 800541e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005422:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800542a:	4622      	mov	r2, r4
 800542c:	462b      	mov	r3, r5
 800542e:	1891      	adds	r1, r2, r2
 8005430:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005432:	415b      	adcs	r3, r3
 8005434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800543a:	4621      	mov	r1, r4
 800543c:	eb12 0801 	adds.w	r8, r2, r1
 8005440:	4629      	mov	r1, r5
 8005442:	eb43 0901 	adc.w	r9, r3, r1
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800545a:	4690      	mov	r8, r2
 800545c:	4699      	mov	r9, r3
 800545e:	4623      	mov	r3, r4
 8005460:	eb18 0303 	adds.w	r3, r8, r3
 8005464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005468:	462b      	mov	r3, r5
 800546a:	eb49 0303 	adc.w	r3, r9, r3
 800546e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800547e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005486:	460b      	mov	r3, r1
 8005488:	18db      	adds	r3, r3, r3
 800548a:	653b      	str	r3, [r7, #80]	@ 0x50
 800548c:	4613      	mov	r3, r2
 800548e:	eb42 0303 	adc.w	r3, r2, r3
 8005492:	657b      	str	r3, [r7, #84]	@ 0x54
 8005494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800549c:	f7fb fc04 	bl	8000ca8 <__aeabi_uldivmod>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4b61      	ldr	r3, [pc, #388]	@ (800562c <UART_SetConfig+0x2d4>)
 80054a6:	fba3 2302 	umull	r2, r3, r3, r2
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	011c      	lsls	r4, r3, #4
 80054ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054c0:	4642      	mov	r2, r8
 80054c2:	464b      	mov	r3, r9
 80054c4:	1891      	adds	r1, r2, r2
 80054c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054c8:	415b      	adcs	r3, r3
 80054ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054d0:	4641      	mov	r1, r8
 80054d2:	eb12 0a01 	adds.w	sl, r2, r1
 80054d6:	4649      	mov	r1, r9
 80054d8:	eb43 0b01 	adc.w	fp, r3, r1
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054f0:	4692      	mov	sl, r2
 80054f2:	469b      	mov	fp, r3
 80054f4:	4643      	mov	r3, r8
 80054f6:	eb1a 0303 	adds.w	r3, sl, r3
 80054fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054fe:	464b      	mov	r3, r9
 8005500:	eb4b 0303 	adc.w	r3, fp, r3
 8005504:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005514:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800551c:	460b      	mov	r3, r1
 800551e:	18db      	adds	r3, r3, r3
 8005520:	643b      	str	r3, [r7, #64]	@ 0x40
 8005522:	4613      	mov	r3, r2
 8005524:	eb42 0303 	adc.w	r3, r2, r3
 8005528:	647b      	str	r3, [r7, #68]	@ 0x44
 800552a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800552e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005532:	f7fb fbb9 	bl	8000ca8 <__aeabi_uldivmod>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4611      	mov	r1, r2
 800553c:	4b3b      	ldr	r3, [pc, #236]	@ (800562c <UART_SetConfig+0x2d4>)
 800553e:	fba3 2301 	umull	r2, r3, r3, r1
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	2264      	movs	r2, #100	@ 0x64
 8005546:	fb02 f303 	mul.w	r3, r2, r3
 800554a:	1acb      	subs	r3, r1, r3
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005552:	4b36      	ldr	r3, [pc, #216]	@ (800562c <UART_SetConfig+0x2d4>)
 8005554:	fba3 2302 	umull	r2, r3, r3, r2
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005560:	441c      	add	r4, r3
 8005562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005566:	2200      	movs	r2, #0
 8005568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800556c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005574:	4642      	mov	r2, r8
 8005576:	464b      	mov	r3, r9
 8005578:	1891      	adds	r1, r2, r2
 800557a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800557c:	415b      	adcs	r3, r3
 800557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005584:	4641      	mov	r1, r8
 8005586:	1851      	adds	r1, r2, r1
 8005588:	6339      	str	r1, [r7, #48]	@ 0x30
 800558a:	4649      	mov	r1, r9
 800558c:	414b      	adcs	r3, r1
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800559c:	4659      	mov	r1, fp
 800559e:	00cb      	lsls	r3, r1, #3
 80055a0:	4651      	mov	r1, sl
 80055a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a6:	4651      	mov	r1, sl
 80055a8:	00ca      	lsls	r2, r1, #3
 80055aa:	4610      	mov	r0, r2
 80055ac:	4619      	mov	r1, r3
 80055ae:	4603      	mov	r3, r0
 80055b0:	4642      	mov	r2, r8
 80055b2:	189b      	adds	r3, r3, r2
 80055b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055b8:	464b      	mov	r3, r9
 80055ba:	460a      	mov	r2, r1
 80055bc:	eb42 0303 	adc.w	r3, r2, r3
 80055c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055d8:	460b      	mov	r3, r1
 80055da:	18db      	adds	r3, r3, r3
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055de:	4613      	mov	r3, r2
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055ee:	f7fb fb5b 	bl	8000ca8 <__aeabi_uldivmod>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4b0d      	ldr	r3, [pc, #52]	@ (800562c <UART_SetConfig+0x2d4>)
 80055f8:	fba3 1302 	umull	r1, r3, r3, r2
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	2164      	movs	r1, #100	@ 0x64
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	3332      	adds	r3, #50	@ 0x32
 800560a:	4a08      	ldr	r2, [pc, #32]	@ (800562c <UART_SetConfig+0x2d4>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	f003 0207 	and.w	r2, r3, #7
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4422      	add	r2, r4
 800561e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005620:	e106      	b.n	8005830 <UART_SetConfig+0x4d8>
 8005622:	bf00      	nop
 8005624:	40011000 	.word	0x40011000
 8005628:	40011400 	.word	0x40011400
 800562c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005634:	2200      	movs	r2, #0
 8005636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800563a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800563e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005642:	4642      	mov	r2, r8
 8005644:	464b      	mov	r3, r9
 8005646:	1891      	adds	r1, r2, r2
 8005648:	6239      	str	r1, [r7, #32]
 800564a:	415b      	adcs	r3, r3
 800564c:	627b      	str	r3, [r7, #36]	@ 0x24
 800564e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005652:	4641      	mov	r1, r8
 8005654:	1854      	adds	r4, r2, r1
 8005656:	4649      	mov	r1, r9
 8005658:	eb43 0501 	adc.w	r5, r3, r1
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	00eb      	lsls	r3, r5, #3
 8005666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800566a:	00e2      	lsls	r2, r4, #3
 800566c:	4614      	mov	r4, r2
 800566e:	461d      	mov	r5, r3
 8005670:	4643      	mov	r3, r8
 8005672:	18e3      	adds	r3, r4, r3
 8005674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005678:	464b      	mov	r3, r9
 800567a:	eb45 0303 	adc.w	r3, r5, r3
 800567e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800568e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800569e:	4629      	mov	r1, r5
 80056a0:	008b      	lsls	r3, r1, #2
 80056a2:	4621      	mov	r1, r4
 80056a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a8:	4621      	mov	r1, r4
 80056aa:	008a      	lsls	r2, r1, #2
 80056ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056b0:	f7fb fafa 	bl	8000ca8 <__aeabi_uldivmod>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4b60      	ldr	r3, [pc, #384]	@ (800583c <UART_SetConfig+0x4e4>)
 80056ba:	fba3 2302 	umull	r2, r3, r3, r2
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	011c      	lsls	r4, r3, #4
 80056c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056d4:	4642      	mov	r2, r8
 80056d6:	464b      	mov	r3, r9
 80056d8:	1891      	adds	r1, r2, r2
 80056da:	61b9      	str	r1, [r7, #24]
 80056dc:	415b      	adcs	r3, r3
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056e4:	4641      	mov	r1, r8
 80056e6:	1851      	adds	r1, r2, r1
 80056e8:	6139      	str	r1, [r7, #16]
 80056ea:	4649      	mov	r1, r9
 80056ec:	414b      	adcs	r3, r1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056fc:	4659      	mov	r1, fp
 80056fe:	00cb      	lsls	r3, r1, #3
 8005700:	4651      	mov	r1, sl
 8005702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005706:	4651      	mov	r1, sl
 8005708:	00ca      	lsls	r2, r1, #3
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	4603      	mov	r3, r0
 8005710:	4642      	mov	r2, r8
 8005712:	189b      	adds	r3, r3, r2
 8005714:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005718:	464b      	mov	r3, r9
 800571a:	460a      	mov	r2, r1
 800571c:	eb42 0303 	adc.w	r3, r2, r3
 8005720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800572e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800573c:	4649      	mov	r1, r9
 800573e:	008b      	lsls	r3, r1, #2
 8005740:	4641      	mov	r1, r8
 8005742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005746:	4641      	mov	r1, r8
 8005748:	008a      	lsls	r2, r1, #2
 800574a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800574e:	f7fb faab 	bl	8000ca8 <__aeabi_uldivmod>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4611      	mov	r1, r2
 8005758:	4b38      	ldr	r3, [pc, #224]	@ (800583c <UART_SetConfig+0x4e4>)
 800575a:	fba3 2301 	umull	r2, r3, r3, r1
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	2264      	movs	r2, #100	@ 0x64
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	1acb      	subs	r3, r1, r3
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	3332      	adds	r3, #50	@ 0x32
 800576c:	4a33      	ldr	r2, [pc, #204]	@ (800583c <UART_SetConfig+0x4e4>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005778:	441c      	add	r4, r3
 800577a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800577e:	2200      	movs	r2, #0
 8005780:	673b      	str	r3, [r7, #112]	@ 0x70
 8005782:	677a      	str	r2, [r7, #116]	@ 0x74
 8005784:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005788:	4642      	mov	r2, r8
 800578a:	464b      	mov	r3, r9
 800578c:	1891      	adds	r1, r2, r2
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	415b      	adcs	r3, r3
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005798:	4641      	mov	r1, r8
 800579a:	1851      	adds	r1, r2, r1
 800579c:	6039      	str	r1, [r7, #0]
 800579e:	4649      	mov	r1, r9
 80057a0:	414b      	adcs	r3, r1
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057b0:	4659      	mov	r1, fp
 80057b2:	00cb      	lsls	r3, r1, #3
 80057b4:	4651      	mov	r1, sl
 80057b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ba:	4651      	mov	r1, sl
 80057bc:	00ca      	lsls	r2, r1, #3
 80057be:	4610      	mov	r0, r2
 80057c0:	4619      	mov	r1, r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	4642      	mov	r2, r8
 80057c6:	189b      	adds	r3, r3, r2
 80057c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ca:	464b      	mov	r3, r9
 80057cc:	460a      	mov	r2, r1
 80057ce:	eb42 0303 	adc.w	r3, r2, r3
 80057d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80057de:	667a      	str	r2, [r7, #100]	@ 0x64
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057ec:	4649      	mov	r1, r9
 80057ee:	008b      	lsls	r3, r1, #2
 80057f0:	4641      	mov	r1, r8
 80057f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f6:	4641      	mov	r1, r8
 80057f8:	008a      	lsls	r2, r1, #2
 80057fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057fe:	f7fb fa53 	bl	8000ca8 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <UART_SetConfig+0x4e4>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	@ 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	3332      	adds	r3, #50	@ 0x32
 800581a:	4a08      	ldr	r2, [pc, #32]	@ (800583c <UART_SetConfig+0x4e4>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f003 020f 	and.w	r2, r3, #15
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4422      	add	r2, r4
 800582e:	609a      	str	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005836:	46bd      	mov	sp, r7
 8005838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800583c:	51eb851f 	.word	0x51eb851f

08005840 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005840:	b084      	sub	sp, #16
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	f107 001c 	add.w	r0, r7, #28
 800584e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005852:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005856:	2b01      	cmp	r3, #1
 8005858:	d123      	bne.n	80058a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800586e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005882:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa9a 	bl	8005dd0 <USB_CoreReset>
 800589c:	4603      	mov	r3, r0
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	e01b      	b.n	80058da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa8e 	bl	8005dd0 <USB_CoreReset>
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80058cc:	e005      	b.n	80058da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058da:	7fbb      	ldrb	r3, [r7, #30]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10b      	bne.n	80058f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f043 0206 	orr.w	r2, r3, #6
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f043 0220 	orr.w	r2, r3, #32
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005904:	b004      	add	sp, #16
 8005906:	4770      	bx	lr

08005908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 0201 	bic.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d115      	bne.n	8005978 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005958:	200a      	movs	r0, #10
 800595a:	f7fc fa25 	bl	8001da8 <HAL_Delay>
      ms += 10U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	330a      	adds	r3, #10
 8005962:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fa25 	bl	8005db4 <USB_GetMode>
 800596a:	4603      	mov	r3, r0
 800596c:	2b01      	cmp	r3, #1
 800596e:	d01e      	beq.n	80059ae <USB_SetCurrentMode+0x84>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2bc7      	cmp	r3, #199	@ 0xc7
 8005974:	d9f0      	bls.n	8005958 <USB_SetCurrentMode+0x2e>
 8005976:	e01a      	b.n	80059ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d115      	bne.n	80059aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800598a:	200a      	movs	r0, #10
 800598c:	f7fc fa0c 	bl	8001da8 <HAL_Delay>
      ms += 10U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	330a      	adds	r3, #10
 8005994:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa0c 	bl	8005db4 <USB_GetMode>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <USB_SetCurrentMode+0x84>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80059a6:	d9f0      	bls.n	800598a <USB_SetCurrentMode+0x60>
 80059a8:	e001      	b.n	80059ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e005      	b.n	80059ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80059b2:	d101      	bne.n	80059b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c4:	b084      	sub	sp, #16
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	e009      	b.n	80059f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	3340      	adds	r3, #64	@ 0x40
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	2200      	movs	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3301      	adds	r3, #1
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b0e      	cmp	r3, #14
 80059fc:	d9f2      	bls.n	80059e4 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11c      	bne.n	8005a40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e005      	b.n	8005a4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a52:	461a      	mov	r2, r3
 8005a54:	2300      	movs	r3, #0
 8005a56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d10d      	bne.n	8005a7c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a68:	2100      	movs	r1, #0
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f968 	bl	8005d40 <USB_SetDevSpeed>
 8005a70:	e008      	b.n	8005a84 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a72:	2101      	movs	r1, #1
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f963 	bl	8005d40 <USB_SetDevSpeed>
 8005a7a:	e003      	b.n	8005a84 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a7c:	2103      	movs	r1, #3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f95e 	bl	8005d40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a84:	2110      	movs	r1, #16
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8fa 	bl	8005c80 <USB_FlushTxFifo>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f924 	bl	8005ce4 <USB_FlushRxFifo>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e043      	b.n	8005b58 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ae6:	d118      	bne.n	8005b1a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005afa:	461a      	mov	r2, r3
 8005afc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e013      	b.n	8005b2c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b10:	461a      	mov	r2, r3
 8005b12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	e008      	b.n	8005b2c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b26:	461a      	mov	r2, r3
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	3301      	adds	r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d3b5      	bcc.n	8005ad0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b64:	2300      	movs	r3, #0
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	e043      	b.n	8005bf2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b80:	d118      	bne.n	8005bb4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b94:	461a      	mov	r2, r3
 8005b96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	e013      	b.n	8005bc6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005baa:	461a      	mov	r2, r3
 8005bac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	e008      	b.n	8005bc6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be4:	461a      	mov	r2, r3
 8005be6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d3b5      	bcc.n	8005b6a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	f043 0210 	orr.w	r2, r3, #16
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699a      	ldr	r2, [r3, #24]
 8005c38:	4b10      	ldr	r3, [pc, #64]	@ (8005c7c <USB_DevInit+0x2b8>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f043 0208 	orr.w	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d107      	bne.n	8005c6c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c64:	f043 0304 	orr.w	r3, r3, #4
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c78:	b004      	add	sp, #16
 8005c7a:	4770      	bx	lr
 8005c7c:	803c3800 	.word	0x803c3800

08005c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c9a:	d901      	bls.n	8005ca0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e01b      	b.n	8005cd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	daf2      	bge.n	8005c8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	019b      	lsls	r3, r3, #6
 8005cb0:	f043 0220 	orr.w	r2, r3, #32
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cc4:	d901      	bls.n	8005cca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e006      	b.n	8005cd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d0f0      	beq.n	8005cb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cfc:	d901      	bls.n	8005d02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e018      	b.n	8005d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	daf2      	bge.n	8005cf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2210      	movs	r2, #16
 8005d12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d20:	d901      	bls.n	8005d26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e006      	b.n	8005d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	2b10      	cmp	r3, #16
 8005d30:	d0f0      	beq.n	8005d14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d60:	4313      	orrs	r3, r2
 8005d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d8c:	f023 0303 	bic.w	r3, r3, #3
 8005d90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005da0:	f043 0302 	orr.w	r3, r3, #2
 8005da4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de8:	d901      	bls.n	8005dee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e01b      	b.n	8005e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	daf2      	bge.n	8005ddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f043 0201 	orr.w	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e12:	d901      	bls.n	8005e18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e006      	b.n	8005e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d0f0      	beq.n	8005e06 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <arm_rfft_fast_init_f32>:
 8005e34:	084b      	lsrs	r3, r1, #1
 8005e36:	2b80      	cmp	r3, #128	@ 0x80
 8005e38:	b410      	push	{r4}
 8005e3a:	8201      	strh	r1, [r0, #16]
 8005e3c:	8003      	strh	r3, [r0, #0]
 8005e3e:	d047      	beq.n	8005ed0 <arm_rfft_fast_init_f32+0x9c>
 8005e40:	d917      	bls.n	8005e72 <arm_rfft_fast_init_f32+0x3e>
 8005e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e46:	d03d      	beq.n	8005ec4 <arm_rfft_fast_init_f32+0x90>
 8005e48:	d929      	bls.n	8005e9e <arm_rfft_fast_init_f32+0x6a>
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4e:	d020      	beq.n	8005e92 <arm_rfft_fast_init_f32+0x5e>
 8005e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e54:	d113      	bne.n	8005e7e <arm_rfft_fast_init_f32+0x4a>
 8005e56:	4921      	ldr	r1, [pc, #132]	@ (8005edc <arm_rfft_fast_init_f32+0xa8>)
 8005e58:	4a21      	ldr	r2, [pc, #132]	@ (8005ee0 <arm_rfft_fast_init_f32+0xac>)
 8005e5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ee4 <arm_rfft_fast_init_f32+0xb0>)
 8005e5c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8005e60:	8184      	strh	r4, [r0, #12]
 8005e62:	6081      	str	r1, [r0, #8]
 8005e64:	6042      	str	r2, [r0, #4]
 8005e66:	6143      	str	r3, [r0, #20]
 8005e68:	2000      	movs	r0, #0
 8005e6a:	b240      	sxtb	r0, r0
 8005e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d01c      	beq.n	8005eb0 <arm_rfft_fast_init_f32+0x7c>
 8005e76:	2b40      	cmp	r3, #64	@ 0x40
 8005e78:	d006      	beq.n	8005e88 <arm_rfft_fast_init_f32+0x54>
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d01d      	beq.n	8005eba <arm_rfft_fast_init_f32+0x86>
 8005e7e:	20ff      	movs	r0, #255	@ 0xff
 8005e80:	b240      	sxtb	r0, r0
 8005e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	2438      	movs	r4, #56	@ 0x38
 8005e8a:	4917      	ldr	r1, [pc, #92]	@ (8005ee8 <arm_rfft_fast_init_f32+0xb4>)
 8005e8c:	4a17      	ldr	r2, [pc, #92]	@ (8005eec <arm_rfft_fast_init_f32+0xb8>)
 8005e8e:	4b18      	ldr	r3, [pc, #96]	@ (8005ef0 <arm_rfft_fast_init_f32+0xbc>)
 8005e90:	e7e6      	b.n	8005e60 <arm_rfft_fast_init_f32+0x2c>
 8005e92:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8005e96:	4917      	ldr	r1, [pc, #92]	@ (8005ef4 <arm_rfft_fast_init_f32+0xc0>)
 8005e98:	4a17      	ldr	r2, [pc, #92]	@ (8005ef8 <arm_rfft_fast_init_f32+0xc4>)
 8005e9a:	4b18      	ldr	r3, [pc, #96]	@ (8005efc <arm_rfft_fast_init_f32+0xc8>)
 8005e9c:	e7e0      	b.n	8005e60 <arm_rfft_fast_init_f32+0x2c>
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea2:	d1ec      	bne.n	8005e7e <arm_rfft_fast_init_f32+0x4a>
 8005ea4:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8005ea8:	4915      	ldr	r1, [pc, #84]	@ (8005f00 <arm_rfft_fast_init_f32+0xcc>)
 8005eaa:	4a16      	ldr	r2, [pc, #88]	@ (8005f04 <arm_rfft_fast_init_f32+0xd0>)
 8005eac:	4b16      	ldr	r3, [pc, #88]	@ (8005f08 <arm_rfft_fast_init_f32+0xd4>)
 8005eae:	e7d7      	b.n	8005e60 <arm_rfft_fast_init_f32+0x2c>
 8005eb0:	2430      	movs	r4, #48	@ 0x30
 8005eb2:	4916      	ldr	r1, [pc, #88]	@ (8005f0c <arm_rfft_fast_init_f32+0xd8>)
 8005eb4:	4a16      	ldr	r2, [pc, #88]	@ (8005f10 <arm_rfft_fast_init_f32+0xdc>)
 8005eb6:	4b17      	ldr	r3, [pc, #92]	@ (8005f14 <arm_rfft_fast_init_f32+0xe0>)
 8005eb8:	e7d2      	b.n	8005e60 <arm_rfft_fast_init_f32+0x2c>
 8005eba:	2414      	movs	r4, #20
 8005ebc:	4916      	ldr	r1, [pc, #88]	@ (8005f18 <arm_rfft_fast_init_f32+0xe4>)
 8005ebe:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <arm_rfft_fast_init_f32+0xe8>)
 8005ec0:	4b17      	ldr	r3, [pc, #92]	@ (8005f20 <arm_rfft_fast_init_f32+0xec>)
 8005ec2:	e7cd      	b.n	8005e60 <arm_rfft_fast_init_f32+0x2c>
 8005ec4:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8005ec8:	4916      	ldr	r1, [pc, #88]	@ (8005f24 <arm_rfft_fast_init_f32+0xf0>)
 8005eca:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <arm_rfft_fast_init_f32+0xf4>)
 8005ecc:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <arm_rfft_fast_init_f32+0xf8>)
 8005ece:	e7c7      	b.n	8005e60 <arm_rfft_fast_init_f32+0x2c>
 8005ed0:	24d0      	movs	r4, #208	@ 0xd0
 8005ed2:	4917      	ldr	r1, [pc, #92]	@ (8005f30 <arm_rfft_fast_init_f32+0xfc>)
 8005ed4:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <arm_rfft_fast_init_f32+0x100>)
 8005ed6:	4b18      	ldr	r3, [pc, #96]	@ (8005f38 <arm_rfft_fast_init_f32+0x104>)
 8005ed8:	e7c2      	b.n	8005e60 <arm_rfft_fast_init_f32+0x2c>
 8005eda:	bf00      	nop
 8005edc:	08018570 	.word	0x08018570
 8005ee0:	08009768 	.word	0x08009768
 8005ee4:	0800f8d8 	.word	0x0800f8d8
 8005ee8:	0800d868 	.word	0x0800d868
 8005eec:	0801a330 	.word	0x0801a330
 8005ef0:	0801c820 	.word	0x0801c820
 8005ef4:	08016258 	.word	0x08016258
 8005ef8:	08014158 	.word	0x08014158
 8005efc:	0800d8d8 	.word	0x0800d8d8
 8005f00:	0801c4b0 	.word	0x0801c4b0
 8005f04:	080138d8 	.word	0x080138d8
 8005f08:	0801a530 	.word	0x0801a530
 8005f0c:	08017110 	.word	0x08017110
 8005f10:	08016158 	.word	0x08016158
 8005f14:	0800d768 	.word	0x0800d768
 8005f18:	08017068 	.word	0x08017068
 8005f1c:	080140d8 	.word	0x080140d8
 8005f20:	08017090 	.word	0x08017090
 8005f24:	0801ad30 	.word	0x0801ad30
 8005f28:	08017570 	.word	0x08017570
 8005f2c:	0801b0b0 	.word	0x0801b0b0
 8005f30:	0801ca20 	.word	0x0801ca20
 8005f34:	08017170 	.word	0x08017170
 8005f38:	0801c0b0 	.word	0x0801c0b0

08005f3c <arm_rfft_fast_f32>:
 8005f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f40:	8a06      	ldrh	r6, [r0, #16]
 8005f42:	0876      	lsrs	r6, r6, #1
 8005f44:	4607      	mov	r7, r0
 8005f46:	4615      	mov	r5, r2
 8005f48:	8006      	strh	r6, [r0, #0]
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d15c      	bne.n	800600a <arm_rfft_fast_f32+0xce>
 8005f50:	461a      	mov	r2, r3
 8005f52:	2301      	movs	r3, #1
 8005f54:	f000 fbe6 	bl	8006724 <arm_cfft_f32>
 8005f58:	edd4 7a00 	vldr	s15, [r4]
 8005f5c:	ed94 7a01 	vldr	s14, [r4, #4]
 8005f60:	883e      	ldrh	r6, [r7, #0]
 8005f62:	6978      	ldr	r0, [r7, #20]
 8005f64:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005f68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f6c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8005f70:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005f74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f78:	3e01      	subs	r6, #1
 8005f7a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8005f7e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005f82:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005f86:	ed85 7a00 	vstr	s14, [r5]
 8005f8a:	edc5 7a01 	vstr	s15, [r5, #4]
 8005f8e:	3010      	adds	r0, #16
 8005f90:	f105 0210 	add.w	r2, r5, #16
 8005f94:	3b08      	subs	r3, #8
 8005f96:	f104 0110 	add.w	r1, r4, #16
 8005f9a:	ed51 4a02 	vldr	s9, [r1, #-8]
 8005f9e:	ed93 5a02 	vldr	s10, [r3, #8]
 8005fa2:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005fa6:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005faa:	edd3 5a03 	vldr	s11, [r3, #12]
 8005fae:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005fb2:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005fb6:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005fba:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005fbe:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005fc2:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005fc6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005fca:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005fce:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005fd2:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005fd6:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005fda:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005fde:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005fe2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005fe6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005fea:	3e01      	subs	r6, #1
 8005fec:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005ff0:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005ff4:	f1a3 0308 	sub.w	r3, r3, #8
 8005ff8:	f101 0108 	add.w	r1, r1, #8
 8005ffc:	f100 0008 	add.w	r0, r0, #8
 8006000:	f102 0208 	add.w	r2, r2, #8
 8006004:	d1c9      	bne.n	8005f9a <arm_rfft_fast_f32+0x5e>
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600a:	edd1 7a00 	vldr	s15, [r1]
 800600e:	edd1 6a01 	vldr	s13, [r1, #4]
 8006012:	6941      	ldr	r1, [r0, #20]
 8006014:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006018:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800601c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8006020:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006024:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006028:	3e01      	subs	r6, #1
 800602a:	ed82 7a00 	vstr	s14, [r2]
 800602e:	edc2 7a01 	vstr	s15, [r2, #4]
 8006032:	00f0      	lsls	r0, r6, #3
 8006034:	b3ee      	cbz	r6, 80060b2 <arm_rfft_fast_f32+0x176>
 8006036:	3808      	subs	r0, #8
 8006038:	f101 0e10 	add.w	lr, r1, #16
 800603c:	4420      	add	r0, r4
 800603e:	f104 0110 	add.w	r1, r4, #16
 8006042:	f102 0c10 	add.w	ip, r2, #16
 8006046:	ed90 7a02 	vldr	s14, [r0, #8]
 800604a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800604e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8006052:	ed90 4a03 	vldr	s8, [r0, #12]
 8006056:	ed11 5a01 	vldr	s10, [r1, #-4]
 800605a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800605e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8006062:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006066:	ee26 3a27 	vmul.f32	s6, s12, s15
 800606a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800606e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006072:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006076:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800607a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800607e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006082:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006086:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800608a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800608e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006092:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006096:	3e01      	subs	r6, #1
 8006098:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800609c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80060a0:	f1a0 0008 	sub.w	r0, r0, #8
 80060a4:	f101 0108 	add.w	r1, r1, #8
 80060a8:	f10e 0e08 	add.w	lr, lr, #8
 80060ac:	f10c 0c08 	add.w	ip, ip, #8
 80060b0:	d1c9      	bne.n	8006046 <arm_rfft_fast_f32+0x10a>
 80060b2:	4638      	mov	r0, r7
 80060b4:	4629      	mov	r1, r5
 80060b6:	461a      	mov	r2, r3
 80060b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060bc:	2301      	movs	r3, #1
 80060be:	f000 bb31 	b.w	8006724 <arm_cfft_f32>
 80060c2:	bf00      	nop

080060c4 <arm_cfft_radix8by2_f32>:
 80060c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	ed2d 8b08 	vpush	{d8-d11}
 80060cc:	f8b0 e000 	ldrh.w	lr, [r0]
 80060d0:	6842      	ldr	r2, [r0, #4]
 80060d2:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80060d6:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80060da:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80060de:	4607      	mov	r7, r0
 80060e0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80060e4:	f000 80af 	beq.w	8006246 <arm_cfft_radix8by2_f32+0x182>
 80060e8:	3310      	adds	r3, #16
 80060ea:	18ce      	adds	r6, r1, r3
 80060ec:	3210      	adds	r2, #16
 80060ee:	4443      	add	r3, r8
 80060f0:	f101 0510 	add.w	r5, r1, #16
 80060f4:	f108 0410 	add.w	r4, r8, #16
 80060f8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80060fc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8006100:	ed53 3a03 	vldr	s7, [r3, #-12]
 8006104:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006108:	ed13 5a01 	vldr	s10, [r3, #-4]
 800610c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8006110:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006114:	ed16 2a04 	vldr	s4, [r6, #-16]
 8006118:	ed56 2a03 	vldr	s5, [r6, #-12]
 800611c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8006120:	ed15 7a01 	vldr	s14, [r5, #-4]
 8006124:	ed15 3a04 	vldr	s6, [r5, #-16]
 8006128:	ed54 7a01 	vldr	s15, [r4, #-4]
 800612c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8006130:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006134:	ed55 4a02 	vldr	s9, [r5, #-8]
 8006138:	ee73 ba21 	vadd.f32	s23, s6, s3
 800613c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8006140:	ee37 aa27 	vadd.f32	s20, s14, s15
 8006144:	ee72 9a04 	vadd.f32	s19, s4, s8
 8006148:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800614c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8006150:	ee74 aa80 	vadd.f32	s21, s9, s0
 8006154:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8006158:	ed45 ba04 	vstr	s23, [r5, #-16]
 800615c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8006160:	ed45 aa02 	vstr	s21, [r5, #-8]
 8006164:	ed05 aa01 	vstr	s20, [r5, #-4]
 8006168:	ed06 8a01 	vstr	s16, [r6, #-4]
 800616c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006170:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006174:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006178:	ee76 6a66 	vsub.f32	s13, s12, s13
 800617c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8006180:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006184:	ed52 2a04 	vldr	s5, [r2, #-16]
 8006188:	ee33 3a61 	vsub.f32	s6, s6, s3
 800618c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006190:	ee26 8a86 	vmul.f32	s16, s13, s12
 8006194:	ee24 2a06 	vmul.f32	s4, s8, s12
 8006198:	ee63 1a22 	vmul.f32	s3, s6, s5
 800619c:	ee24 4a22 	vmul.f32	s8, s8, s5
 80061a0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80061a4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80061a8:	ee23 6a86 	vmul.f32	s12, s7, s12
 80061ac:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80061b0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80061b4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80061b8:	ee72 3a63 	vsub.f32	s7, s4, s7
 80061bc:	ee71 2a88 	vadd.f32	s5, s3, s16
 80061c0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80061c4:	ed44 2a04 	vstr	s5, [r4, #-16]
 80061c8:	ed43 3a04 	vstr	s7, [r3, #-16]
 80061cc:	ed03 6a03 	vstr	s12, [r3, #-12]
 80061d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061d4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80061d8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80061dc:	ed52 5a02 	vldr	s11, [r2, #-8]
 80061e0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80061e4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80061e8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80061ec:	ee26 5a87 	vmul.f32	s10, s13, s14
 80061f0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80061f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80061f8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80061fc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006200:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006204:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006208:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800620c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006210:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006214:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006218:	f1be 0e01 	subs.w	lr, lr, #1
 800621c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8006220:	f105 0510 	add.w	r5, r5, #16
 8006224:	ed44 7a01 	vstr	s15, [r4, #-4]
 8006228:	f106 0610 	add.w	r6, r6, #16
 800622c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8006230:	ed03 7a01 	vstr	s14, [r3, #-4]
 8006234:	f102 0210 	add.w	r2, r2, #16
 8006238:	f104 0410 	add.w	r4, r4, #16
 800623c:	f103 0310 	add.w	r3, r3, #16
 8006240:	f47f af5a 	bne.w	80060f8 <arm_cfft_radix8by2_f32+0x34>
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	fa1f f48c 	uxth.w	r4, ip
 800624a:	4608      	mov	r0, r1
 800624c:	2302      	movs	r3, #2
 800624e:	4621      	mov	r1, r4
 8006250:	f000 fae2 	bl	8006818 <arm_radix8_butterfly_f32>
 8006254:	ecbd 8b08 	vpop	{d8-d11}
 8006258:	4640      	mov	r0, r8
 800625a:	4621      	mov	r1, r4
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	2302      	movs	r3, #2
 8006260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006264:	f000 bad8 	b.w	8006818 <arm_radix8_butterfly_f32>

08006268 <arm_cfft_radix8by4_f32>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	ed2d 8b0a 	vpush	{d8-d12}
 8006270:	8802      	ldrh	r2, [r0, #0]
 8006272:	ed91 6a00 	vldr	s12, [r1]
 8006276:	b08f      	sub	sp, #60	@ 0x3c
 8006278:	460f      	mov	r7, r1
 800627a:	0852      	lsrs	r2, r2, #1
 800627c:	0093      	lsls	r3, r2, #2
 800627e:	900c      	str	r0, [sp, #48]	@ 0x30
 8006280:	9103      	str	r1, [sp, #12]
 8006282:	6841      	ldr	r1, [r0, #4]
 8006284:	ed97 7a01 	vldr	s14, [r7, #4]
 8006288:	4638      	mov	r0, r7
 800628a:	4418      	add	r0, r3
 800628c:	4606      	mov	r6, r0
 800628e:	9009      	str	r0, [sp, #36]	@ 0x24
 8006290:	4418      	add	r0, r3
 8006292:	edd0 6a00 	vldr	s13, [r0]
 8006296:	edd6 3a00 	vldr	s7, [r6]
 800629a:	edd6 2a01 	vldr	s5, [r6, #4]
 800629e:	edd0 7a01 	vldr	s15, [r0, #4]
 80062a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80062a4:	ee76 5a26 	vadd.f32	s11, s12, s13
 80062a8:	4604      	mov	r4, r0
 80062aa:	4625      	mov	r5, r4
 80062ac:	441c      	add	r4, r3
 80062ae:	ed94 4a00 	vldr	s8, [r4]
 80062b2:	ed94 5a01 	vldr	s10, [r4, #4]
 80062b6:	9401      	str	r4, [sp, #4]
 80062b8:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80062bc:	4630      	mov	r0, r6
 80062be:	ee74 4a24 	vadd.f32	s9, s8, s9
 80062c2:	463e      	mov	r6, r7
 80062c4:	ee14 ea90 	vmov	lr, s9
 80062c8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80062cc:	f846 eb08 	str.w	lr, [r6], #8
 80062d0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80062d4:	edd0 4a01 	vldr	s9, [r0, #4]
 80062d8:	9604      	str	r6, [sp, #16]
 80062da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062de:	9e01      	ldr	r6, [sp, #4]
 80062e0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80062e4:	ed96 2a01 	vldr	s4, [r6, #4]
 80062e8:	ee36 7a24 	vadd.f32	s14, s12, s9
 80062ec:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80062f0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80062f4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80062f8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80062fc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006300:	ee73 3a45 	vsub.f32	s7, s6, s10
 8006304:	4604      	mov	r4, r0
 8006306:	ee36 6a45 	vsub.f32	s12, s12, s10
 800630a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800630e:	46a3      	mov	fp, r4
 8006310:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006314:	ee34 5a84 	vadd.f32	s10, s9, s8
 8006318:	ee13 8a90 	vmov	r8, s7
 800631c:	46a4      	mov	ip, r4
 800631e:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8006322:	ed87 7a01 	vstr	s14, [r7, #4]
 8006326:	f84b 8b08 	str.w	r8, [fp], #8
 800632a:	f1ac 0704 	sub.w	r7, ip, #4
 800632e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8006332:	f101 0c08 	add.w	ip, r1, #8
 8006336:	462c      	mov	r4, r5
 8006338:	f8cd c014 	str.w	ip, [sp, #20]
 800633c:	ee15 ca90 	vmov	ip, s11
 8006340:	f844 cb08 	str.w	ip, [r4], #8
 8006344:	9407      	str	r4, [sp, #28]
 8006346:	f101 0410 	add.w	r4, r1, #16
 800634a:	ed85 6a01 	vstr	s12, [r5, #4]
 800634e:	0852      	lsrs	r2, r2, #1
 8006350:	9402      	str	r4, [sp, #8]
 8006352:	462c      	mov	r4, r5
 8006354:	f101 0518 	add.w	r5, r1, #24
 8006358:	920b      	str	r2, [sp, #44]	@ 0x2c
 800635a:	46b2      	mov	sl, r6
 800635c:	9506      	str	r5, [sp, #24]
 800635e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006362:	3a02      	subs	r2, #2
 8006364:	ee16 5a90 	vmov	r5, s13
 8006368:	46b6      	mov	lr, r6
 800636a:	4630      	mov	r0, r6
 800636c:	0852      	lsrs	r2, r2, #1
 800636e:	f84a 5b08 	str.w	r5, [sl], #8
 8006372:	f1a0 0604 	sub.w	r6, r0, #4
 8006376:	edce 7a01 	vstr	s15, [lr, #4]
 800637a:	9208      	str	r2, [sp, #32]
 800637c:	f000 8130 	beq.w	80065e0 <arm_cfft_radix8by4_f32+0x378>
 8006380:	4691      	mov	r9, r2
 8006382:	9a03      	ldr	r2, [sp, #12]
 8006384:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006388:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800638c:	3b08      	subs	r3, #8
 800638e:	f102 0510 	add.w	r5, r2, #16
 8006392:	f101 0c20 	add.w	ip, r1, #32
 8006396:	f1a4 020c 	sub.w	r2, r4, #12
 800639a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800639e:	4433      	add	r3, r6
 80063a0:	3410      	adds	r4, #16
 80063a2:	4650      	mov	r0, sl
 80063a4:	4659      	mov	r1, fp
 80063a6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80063aa:	ed14 5a02 	vldr	s10, [r4, #-8]
 80063ae:	ed91 7a00 	vldr	s14, [r1]
 80063b2:	edd0 7a00 	vldr	s15, [r0]
 80063b6:	ed15 4a01 	vldr	s8, [r5, #-4]
 80063ba:	ed54 5a01 	vldr	s11, [r4, #-4]
 80063be:	edd0 6a01 	vldr	s13, [r0, #4]
 80063c2:	ed91 6a01 	vldr	s12, [r1, #4]
 80063c6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80063ca:	ee34 0a25 	vadd.f32	s0, s8, s11
 80063ce:	ee78 4a07 	vadd.f32	s9, s16, s14
 80063d2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80063d6:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80063da:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80063de:	ed45 4a02 	vstr	s9, [r5, #-8]
 80063e2:	edd1 4a01 	vldr	s9, [r1, #4]
 80063e6:	ed90 4a01 	vldr	s8, [r0, #4]
 80063ea:	ee70 4a24 	vadd.f32	s9, s0, s9
 80063ee:	ee76 aa05 	vadd.f32	s21, s12, s10
 80063f2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80063f6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80063fa:	ed45 4a01 	vstr	s9, [r5, #-4]
 80063fe:	edd6 1a00 	vldr	s3, [r6]
 8006402:	edd7 0a00 	vldr	s1, [r7]
 8006406:	ed92 4a02 	vldr	s8, [r2, #8]
 800640a:	edd3 3a02 	vldr	s7, [r3, #8]
 800640e:	ed93 2a01 	vldr	s4, [r3, #4]
 8006412:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006416:	edd2 2a01 	vldr	s5, [r2, #4]
 800641a:	ed57 9a01 	vldr	s19, [r7, #-4]
 800641e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8006422:	ee39 3a81 	vadd.f32	s6, s19, s2
 8006426:	ee74 8a84 	vadd.f32	s17, s9, s8
 800642a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800642e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8006432:	ee7a aae6 	vsub.f32	s21, s21, s13
 8006436:	ee18 aa90 	vmov	sl, s17
 800643a:	f847 a908 	str.w	sl, [r7], #-8
 800643e:	edd2 8a01 	vldr	s17, [r2, #4]
 8006442:	ed93 9a01 	vldr	s18, [r3, #4]
 8006446:	ee73 8a28 	vadd.f32	s17, s6, s17
 800644a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800644e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006452:	ee74 0a63 	vsub.f32	s1, s8, s7
 8006456:	edc7 8a01 	vstr	s17, [r7, #4]
 800645a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800645e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8006462:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8006466:	ee6a ba28 	vmul.f32	s23, s20, s17
 800646a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800646e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8006472:	ee30 9a81 	vadd.f32	s18, s1, s2
 8006476:	ee79 9a82 	vadd.f32	s19, s19, s4
 800647a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800647e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8006482:	ee69 baa8 	vmul.f32	s23, s19, s17
 8006486:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800648a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800648e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8006492:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8006496:	ee1c aa10 	vmov	sl, s24
 800649a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800649e:	f841 ab08 	str.w	sl, [r1], #8
 80064a2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80064a6:	ee3b bacb 	vsub.f32	s22, s23, s22
 80064aa:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80064ae:	ee33 3a62 	vsub.f32	s6, s6, s5
 80064b2:	ed01 aa01 	vstr	s20, [r1, #-4]
 80064b6:	edc2 8a01 	vstr	s17, [r2, #4]
 80064ba:	ed82 ba02 	vstr	s22, [r2, #8]
 80064be:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80064c2:	ee74 3a63 	vsub.f32	s7, s8, s7
 80064c6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80064ca:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80064ce:	ee30 0a46 	vsub.f32	s0, s0, s12
 80064d2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80064d6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80064da:	ee30 0a66 	vsub.f32	s0, s0, s13
 80064de:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80064e2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80064e6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80064ea:	ee60 9a04 	vmul.f32	s19, s0, s8
 80064ee:	ee28 8a04 	vmul.f32	s16, s16, s8
 80064f2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80064f6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80064fa:	ee39 4a68 	vsub.f32	s8, s18, s17
 80064fe:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8006502:	ee14 aa10 	vmov	sl, s8
 8006506:	ee30 0a48 	vsub.f32	s0, s0, s16
 800650a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800650e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8006512:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006516:	ed04 0a01 	vstr	s0, [r4, #-4]
 800651a:	f846 a908 	str.w	sl, [r6], #-8
 800651e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006522:	ee35 7a87 	vadd.f32	s14, s11, s14
 8006526:	edc6 3a01 	vstr	s7, [r6, #4]
 800652a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800652e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006532:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8006536:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800653a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800653e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8006542:	ee72 2a62 	vsub.f32	s5, s4, s5
 8006546:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800654a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800654e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8006552:	ee62 0a86 	vmul.f32	s1, s5, s12
 8006556:	ee66 6a86 	vmul.f32	s13, s13, s12
 800655a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800655e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8006562:	ee62 2a87 	vmul.f32	s5, s5, s14
 8006566:	ee21 1a07 	vmul.f32	s2, s2, s14
 800656a:	ee15 aa90 	vmov	sl, s11
 800656e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006572:	f840 ab08 	str.w	sl, [r0], #8
 8006576:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800657a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800657e:	f1b9 0901 	subs.w	r9, r9, #1
 8006582:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006586:	f105 0508 	add.w	r5, r5, #8
 800658a:	ed83 1a02 	vstr	s2, [r3, #8]
 800658e:	edc3 2a01 	vstr	s5, [r3, #4]
 8006592:	f108 0808 	add.w	r8, r8, #8
 8006596:	f1a2 0208 	sub.w	r2, r2, #8
 800659a:	f10c 0c10 	add.w	ip, ip, #16
 800659e:	f104 0408 	add.w	r4, r4, #8
 80065a2:	f10e 0e18 	add.w	lr, lr, #24
 80065a6:	f1a3 0308 	sub.w	r3, r3, #8
 80065aa:	f47f aefc 	bne.w	80063a6 <arm_cfft_radix8by4_f32+0x13e>
 80065ae:	9908      	ldr	r1, [sp, #32]
 80065b0:	9802      	ldr	r0, [sp, #8]
 80065b2:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80065b6:	00cb      	lsls	r3, r1, #3
 80065b8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80065bc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80065c0:	9102      	str	r1, [sp, #8]
 80065c2:	9904      	ldr	r1, [sp, #16]
 80065c4:	4419      	add	r1, r3
 80065c6:	9104      	str	r1, [sp, #16]
 80065c8:	9905      	ldr	r1, [sp, #20]
 80065ca:	4419      	add	r1, r3
 80065cc:	9105      	str	r1, [sp, #20]
 80065ce:	9907      	ldr	r1, [sp, #28]
 80065d0:	449b      	add	fp, r3
 80065d2:	4419      	add	r1, r3
 80065d4:	449a      	add	sl, r3
 80065d6:	9b06      	ldr	r3, [sp, #24]
 80065d8:	9107      	str	r1, [sp, #28]
 80065da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065de:	9306      	str	r3, [sp, #24]
 80065e0:	9a04      	ldr	r2, [sp, #16]
 80065e2:	9807      	ldr	r0, [sp, #28]
 80065e4:	edd2 3a00 	vldr	s7, [r2]
 80065e8:	ed90 4a00 	vldr	s8, [r0]
 80065ec:	eddb 7a00 	vldr	s15, [fp]
 80065f0:	ed9a 3a00 	vldr	s6, [sl]
 80065f4:	edd2 4a01 	vldr	s9, [r2, #4]
 80065f8:	ed90 7a01 	vldr	s14, [r0, #4]
 80065fc:	ed9b 2a01 	vldr	s4, [fp, #4]
 8006600:	edda 5a01 	vldr	s11, [sl, #4]
 8006604:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8006608:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800660a:	ee73 6a84 	vadd.f32	s13, s7, s8
 800660e:	ee34 6a87 	vadd.f32	s12, s9, s14
 8006612:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8006616:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800661a:	ee33 5a05 	vadd.f32	s10, s6, s10
 800661e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006622:	ed82 5a00 	vstr	s10, [r2]
 8006626:	ed9b 5a01 	vldr	s10, [fp, #4]
 800662a:	edda 4a01 	vldr	s9, [sl, #4]
 800662e:	ee36 5a05 	vadd.f32	s10, s12, s10
 8006632:	ee72 3a04 	vadd.f32	s7, s4, s8
 8006636:	ee35 5a24 	vadd.f32	s10, s10, s9
 800663a:	ee77 4a67 	vsub.f32	s9, s14, s15
 800663e:	ed82 5a01 	vstr	s10, [r2, #4]
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006648:	edd2 1a00 	vldr	s3, [r2]
 800664c:	edd2 2a01 	vldr	s5, [r2, #4]
 8006650:	9a02      	ldr	r2, [sp, #8]
 8006652:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8006656:	ee36 6a42 	vsub.f32	s12, s12, s4
 800665a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800665e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8006662:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006666:	ee25 5a21 	vmul.f32	s10, s10, s3
 800666a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800666e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006672:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006676:	edcb 2a00 	vstr	s5, [fp]
 800667a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800667e:	edd2 3a01 	vldr	s7, [r2, #4]
 8006682:	ed92 5a00 	vldr	s10, [r2]
 8006686:	9a06      	ldr	r2, [sp, #24]
 8006688:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800668c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8006690:	ee66 4a85 	vmul.f32	s9, s13, s10
 8006694:	ee26 5a05 	vmul.f32	s10, s12, s10
 8006698:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800669c:	ee26 6a23 	vmul.f32	s12, s12, s7
 80066a0:	ee75 6a66 	vsub.f32	s13, s10, s13
 80066a4:	ee34 6a86 	vadd.f32	s12, s9, s12
 80066a8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80066ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066b0:	edc0 6a01 	vstr	s13, [r0, #4]
 80066b4:	ed80 6a00 	vstr	s12, [r0]
 80066b8:	ed92 6a01 	vldr	s12, [r2, #4]
 80066bc:	9803      	ldr	r0, [sp, #12]
 80066be:	ee77 7a43 	vsub.f32	s15, s14, s6
 80066c2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80066c6:	ed92 7a00 	vldr	s14, [r2]
 80066ca:	ee65 6a87 	vmul.f32	s13, s11, s14
 80066ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066d2:	ee65 5a86 	vmul.f32	s11, s11, s12
 80066d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80066da:	ee77 5a65 	vsub.f32	s11, s14, s11
 80066de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e2:	edca 5a01 	vstr	s11, [sl, #4]
 80066e6:	edca 7a00 	vstr	s15, [sl]
 80066ea:	6872      	ldr	r2, [r6, #4]
 80066ec:	4621      	mov	r1, r4
 80066ee:	2304      	movs	r3, #4
 80066f0:	f000 f892 	bl	8006818 <arm_radix8_butterfly_f32>
 80066f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066f6:	6872      	ldr	r2, [r6, #4]
 80066f8:	4621      	mov	r1, r4
 80066fa:	2304      	movs	r3, #4
 80066fc:	f000 f88c 	bl	8006818 <arm_radix8_butterfly_f32>
 8006700:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006702:	6872      	ldr	r2, [r6, #4]
 8006704:	4621      	mov	r1, r4
 8006706:	2304      	movs	r3, #4
 8006708:	f000 f886 	bl	8006818 <arm_radix8_butterfly_f32>
 800670c:	9801      	ldr	r0, [sp, #4]
 800670e:	6872      	ldr	r2, [r6, #4]
 8006710:	4621      	mov	r1, r4
 8006712:	2304      	movs	r3, #4
 8006714:	b00f      	add	sp, #60	@ 0x3c
 8006716:	ecbd 8b0a 	vpop	{d8-d12}
 800671a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671e:	f000 b87b 	b.w	8006818 <arm_radix8_butterfly_f32>
 8006722:	bf00      	nop

08006724 <arm_cfft_f32>:
 8006724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006728:	2a01      	cmp	r2, #1
 800672a:	4606      	mov	r6, r0
 800672c:	4617      	mov	r7, r2
 800672e:	460c      	mov	r4, r1
 8006730:	4698      	mov	r8, r3
 8006732:	8805      	ldrh	r5, [r0, #0]
 8006734:	d054      	beq.n	80067e0 <arm_cfft_f32+0xbc>
 8006736:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800673a:	d04c      	beq.n	80067d6 <arm_cfft_f32+0xb2>
 800673c:	d916      	bls.n	800676c <arm_cfft_f32+0x48>
 800673e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006742:	d01a      	beq.n	800677a <arm_cfft_f32+0x56>
 8006744:	d95c      	bls.n	8006800 <arm_cfft_f32+0xdc>
 8006746:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800674a:	d044      	beq.n	80067d6 <arm_cfft_f32+0xb2>
 800674c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006750:	d105      	bne.n	800675e <arm_cfft_f32+0x3a>
 8006752:	4620      	mov	r0, r4
 8006754:	4629      	mov	r1, r5
 8006756:	6872      	ldr	r2, [r6, #4]
 8006758:	2301      	movs	r3, #1
 800675a:	f000 f85d 	bl	8006818 <arm_radix8_butterfly_f32>
 800675e:	f1b8 0f00 	cmp.w	r8, #0
 8006762:	d111      	bne.n	8006788 <arm_cfft_f32+0x64>
 8006764:	2f01      	cmp	r7, #1
 8006766:	d016      	beq.n	8006796 <arm_cfft_f32+0x72>
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	2d20      	cmp	r5, #32
 800676e:	d032      	beq.n	80067d6 <arm_cfft_f32+0xb2>
 8006770:	d94a      	bls.n	8006808 <arm_cfft_f32+0xe4>
 8006772:	2d40      	cmp	r5, #64	@ 0x40
 8006774:	d0ed      	beq.n	8006752 <arm_cfft_f32+0x2e>
 8006776:	2d80      	cmp	r5, #128	@ 0x80
 8006778:	d1f1      	bne.n	800675e <arm_cfft_f32+0x3a>
 800677a:	4630      	mov	r0, r6
 800677c:	4621      	mov	r1, r4
 800677e:	f7ff fca1 	bl	80060c4 <arm_cfft_radix8by2_f32>
 8006782:	f1b8 0f00 	cmp.w	r8, #0
 8006786:	d0ed      	beq.n	8006764 <arm_cfft_f32+0x40>
 8006788:	4620      	mov	r0, r4
 800678a:	89b1      	ldrh	r1, [r6, #12]
 800678c:	68b2      	ldr	r2, [r6, #8]
 800678e:	f7f9 fd3f 	bl	8000210 <arm_bitreversal_32>
 8006792:	2f01      	cmp	r7, #1
 8006794:	d1e8      	bne.n	8006768 <arm_cfft_f32+0x44>
 8006796:	ee07 5a90 	vmov	s15, r5
 800679a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80067a2:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	d0de      	beq.n	8006768 <arm_cfft_f32+0x44>
 80067aa:	f104 0108 	add.w	r1, r4, #8
 80067ae:	2300      	movs	r3, #0
 80067b0:	3301      	adds	r3, #1
 80067b2:	429d      	cmp	r5, r3
 80067b4:	f101 0108 	add.w	r1, r1, #8
 80067b8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80067bc:	ed51 7a03 	vldr	s15, [r1, #-12]
 80067c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80067c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80067c8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80067cc:	ed41 7a03 	vstr	s15, [r1, #-12]
 80067d0:	d1ee      	bne.n	80067b0 <arm_cfft_f32+0x8c>
 80067d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d6:	4630      	mov	r0, r6
 80067d8:	4621      	mov	r1, r4
 80067da:	f7ff fd45 	bl	8006268 <arm_cfft_radix8by4_f32>
 80067de:	e7be      	b.n	800675e <arm_cfft_f32+0x3a>
 80067e0:	b1ad      	cbz	r5, 800680e <arm_cfft_f32+0xea>
 80067e2:	f101 030c 	add.w	r3, r1, #12
 80067e6:	2200      	movs	r2, #0
 80067e8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80067ec:	3201      	adds	r2, #1
 80067ee:	eef1 7a67 	vneg.f32	s15, s15
 80067f2:	4295      	cmp	r5, r2
 80067f4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80067f8:	f103 0308 	add.w	r3, r3, #8
 80067fc:	d1f4      	bne.n	80067e8 <arm_cfft_f32+0xc4>
 80067fe:	e79a      	b.n	8006736 <arm_cfft_f32+0x12>
 8006800:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006804:	d0a5      	beq.n	8006752 <arm_cfft_f32+0x2e>
 8006806:	e7aa      	b.n	800675e <arm_cfft_f32+0x3a>
 8006808:	2d10      	cmp	r5, #16
 800680a:	d0b6      	beq.n	800677a <arm_cfft_f32+0x56>
 800680c:	e7a7      	b.n	800675e <arm_cfft_f32+0x3a>
 800680e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006812:	d894      	bhi.n	800673e <arm_cfft_f32+0x1a>
 8006814:	e7aa      	b.n	800676c <arm_cfft_f32+0x48>
 8006816:	bf00      	nop

08006818 <arm_radix8_butterfly_f32>:
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	ed2d 8b10 	vpush	{d8-d15}
 8006820:	b09d      	sub	sp, #116	@ 0x74
 8006822:	461c      	mov	r4, r3
 8006824:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8006b48 <arm_radix8_butterfly_f32+0x330>
 8006828:	921a      	str	r2, [sp, #104]	@ 0x68
 800682a:	1d03      	adds	r3, r0, #4
 800682c:	4682      	mov	sl, r0
 800682e:	4689      	mov	r9, r1
 8006830:	468b      	mov	fp, r1
 8006832:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006834:	9400      	str	r4, [sp, #0]
 8006836:	469e      	mov	lr, r3
 8006838:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800683c:	005a      	lsls	r2, r3, #1
 800683e:	18d6      	adds	r6, r2, r3
 8006840:	18f5      	adds	r5, r6, r3
 8006842:	9203      	str	r2, [sp, #12]
 8006844:	195a      	adds	r2, r3, r5
 8006846:	18d0      	adds	r0, r2, r3
 8006848:	00df      	lsls	r7, r3, #3
 800684a:	1819      	adds	r1, r3, r0
 800684c:	463c      	mov	r4, r7
 800684e:	9701      	str	r7, [sp, #4]
 8006850:	4457      	add	r7, sl
 8006852:	930c      	str	r3, [sp, #48]	@ 0x30
 8006854:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800685e:	eb07 0c04 	add.w	ip, r7, r4
 8006862:	9c00      	ldr	r4, [sp, #0]
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800686a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800686e:	3204      	adds	r2, #4
 8006870:	3104      	adds	r1, #4
 8006872:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8006876:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800687a:	f04f 0800 	mov.w	r8, #0
 800687e:	eddc 7a00 	vldr	s15, [ip]
 8006882:	edd7 6a00 	vldr	s13, [r7]
 8006886:	edd6 3a00 	vldr	s7, [r6]
 800688a:	ed5e aa01 	vldr	s21, [lr, #-4]
 800688e:	edd5 4a00 	vldr	s9, [r5]
 8006892:	ed90 2a00 	vldr	s4, [r0]
 8006896:	ed12 7a01 	vldr	s14, [r2, #-4]
 800689a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800689e:	ee77 8a82 	vadd.f32	s17, s15, s4
 80068a2:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80068a6:	ee76 1a87 	vadd.f32	s3, s13, s14
 80068aa:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80068ae:	ee31 6a84 	vadd.f32	s12, s3, s8
 80068b2:	ee33 5a28 	vadd.f32	s10, s6, s17
 80068b6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80068ba:	ee75 6a06 	vadd.f32	s13, s10, s12
 80068be:	ee35 5a46 	vsub.f32	s10, s10, s12
 80068c2:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80068c6:	ed85 5a00 	vstr	s10, [r5]
 80068ca:	ed96 1a01 	vldr	s2, [r6, #4]
 80068ce:	edd7 5a01 	vldr	s11, [r7, #4]
 80068d2:	ed92 aa00 	vldr	s20, [r2]
 80068d6:	ed91 6a00 	vldr	s12, [r1]
 80068da:	ed9e 9a00 	vldr	s18, [lr]
 80068de:	ed95 5a01 	vldr	s10, [r5, #4]
 80068e2:	eddc 6a01 	vldr	s13, [ip, #4]
 80068e6:	edd0 9a01 	vldr	s19, [r0, #4]
 80068ea:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80068ee:	ee71 2a46 	vsub.f32	s5, s2, s12
 80068f2:	ee75 3aca 	vsub.f32	s7, s11, s20
 80068f6:	ee37 0a60 	vsub.f32	s0, s14, s1
 80068fa:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80068fe:	ee37 7a20 	vadd.f32	s14, s14, s1
 8006902:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8006906:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800690a:	ee79 3a05 	vadd.f32	s7, s18, s10
 800690e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8006912:	ee39 5a45 	vsub.f32	s10, s18, s10
 8006916:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800691a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800691e:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8006922:	ee31 6a06 	vadd.f32	s12, s2, s12
 8006926:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800692a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800692e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8006932:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8006936:	ee33 3a68 	vsub.f32	s6, s6, s17
 800693a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800693e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8006942:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8006946:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800694a:	ee75 6a62 	vsub.f32	s13, s10, s5
 800694e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8006952:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006956:	ee33 1a89 	vadd.f32	s2, s7, s18
 800695a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800695e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8006962:	ee75 4a22 	vadd.f32	s9, s10, s5
 8006966:	ee32 5a27 	vadd.f32	s10, s4, s15
 800696a:	ee72 7a67 	vsub.f32	s15, s4, s15
 800696e:	ee33 8a06 	vadd.f32	s16, s6, s12
 8006972:	ee75 2a87 	vadd.f32	s5, s11, s14
 8006976:	ee31 9a28 	vadd.f32	s18, s2, s17
 800697a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800697e:	ee74 0a61 	vsub.f32	s1, s8, s3
 8006982:	ee33 2a80 	vadd.f32	s4, s7, s0
 8006986:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800698a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800698e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006992:	ee31 1a68 	vsub.f32	s2, s2, s17
 8006996:	ee34 4a21 	vadd.f32	s8, s8, s3
 800699a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800699e:	ee74 4a85 	vadd.f32	s9, s9, s10
 80069a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80069a6:	44d8      	add	r8, fp
 80069a8:	45c1      	cmp	r9, r8
 80069aa:	ed8e 9a00 	vstr	s18, [lr]
 80069ae:	ed85 1a01 	vstr	s2, [r5, #4]
 80069b2:	449e      	add	lr, r3
 80069b4:	ed8c 8a00 	vstr	s16, [ip]
 80069b8:	441d      	add	r5, r3
 80069ba:	ed80 6a00 	vstr	s12, [r0]
 80069be:	edcc 0a01 	vstr	s1, [ip, #4]
 80069c2:	ed80 4a01 	vstr	s8, [r0, #4]
 80069c6:	449c      	add	ip, r3
 80069c8:	ed87 2a00 	vstr	s4, [r7]
 80069cc:	4418      	add	r0, r3
 80069ce:	ed41 3a01 	vstr	s7, [r1, #-4]
 80069d2:	ed42 2a01 	vstr	s5, [r2, #-4]
 80069d6:	ed86 7a00 	vstr	s14, [r6]
 80069da:	ed87 3a01 	vstr	s6, [r7, #4]
 80069de:	edc1 4a00 	vstr	s9, [r1]
 80069e2:	441f      	add	r7, r3
 80069e4:	edc2 5a00 	vstr	s11, [r2]
 80069e8:	4419      	add	r1, r3
 80069ea:	edc6 6a01 	vstr	s13, [r6, #4]
 80069ee:	441a      	add	r2, r3
 80069f0:	441e      	add	r6, r3
 80069f2:	f63f af44 	bhi.w	800687e <arm_radix8_butterfly_f32+0x66>
 80069f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80069f8:	2907      	cmp	r1, #7
 80069fa:	4620      	mov	r0, r4
 80069fc:	f240 81e9 	bls.w	8006dd2 <arm_radix8_butterfly_f32+0x5ba>
 8006a00:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8006a04:	193e      	adds	r6, r7, r4
 8006a06:	1935      	adds	r5, r6, r4
 8006a08:	9c03      	ldr	r4, [sp, #12]
 8006a0a:	9000      	str	r0, [sp, #0]
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	3201      	adds	r2, #1
 8006a10:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006a14:	9900      	ldr	r1, [sp, #0]
 8006a16:	1828      	adds	r0, r5, r0
 8006a18:	eb00 0e01 	add.w	lr, r0, r1
 8006a1c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006a1e:	440a      	add	r2, r1
 8006a20:	eb04 0c01 	add.w	ip, r4, r1
 8006a24:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8006a28:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8006a2c:	9a00      	ldr	r2, [sp, #0]
 8006a2e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006a30:	00ed      	lsls	r5, r5, #3
 8006a32:	9511      	str	r5, [sp, #68]	@ 0x44
 8006a34:	00d5      	lsls	r5, r2, #3
 8006a36:	950d      	str	r5, [sp, #52]	@ 0x34
 8006a38:	9d01      	ldr	r5, [sp, #4]
 8006a3a:	3508      	adds	r5, #8
 8006a3c:	9516      	str	r5, [sp, #88]	@ 0x58
 8006a3e:	9d02      	ldr	r5, [sp, #8]
 8006a40:	3508      	adds	r5, #8
 8006a42:	0114      	lsls	r4, r2, #4
 8006a44:	9517      	str	r5, [sp, #92]	@ 0x5c
 8006a46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006a48:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8006a4a:	940e      	str	r4, [sp, #56]	@ 0x38
 8006a4c:	00c0      	lsls	r0, r0, #3
 8006a4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006a50:	18aa      	adds	r2, r5, r2
 8006a52:	9207      	str	r2, [sp, #28]
 8006a54:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006a56:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006a58:	18aa      	adds	r2, r5, r2
 8006a5a:	9208      	str	r2, [sp, #32]
 8006a5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006a5e:	18aa      	adds	r2, r5, r2
 8006a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006a66:	f10e 0204 	add.w	r2, lr, #4
 8006a6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8006a6c:	00c9      	lsls	r1, r1, #3
 8006a6e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a70:	310c      	adds	r1, #12
 8006a72:	00f6      	lsls	r6, r6, #3
 8006a74:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8006a78:	9114      	str	r1, [sp, #80]	@ 0x50
 8006a7a:	18a9      	adds	r1, r5, r2
 8006a7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a7e:	9612      	str	r6, [sp, #72]	@ 0x48
 8006a80:	00ff      	lsls	r7, r7, #3
 8006a82:	19ae      	adds	r6, r5, r6
 8006a84:	3008      	adds	r0, #8
 8006a86:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8006a8a:	9606      	str	r6, [sp, #24]
 8006a8c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a8e:	18aa      	adds	r2, r5, r2
 8006a90:	0164      	lsls	r4, r4, #5
 8006a92:	19ee      	adds	r6, r5, r7
 8006a94:	f10c 000c 	add.w	r0, ip, #12
 8006a98:	9713      	str	r7, [sp, #76]	@ 0x4c
 8006a9a:	9604      	str	r6, [sp, #16]
 8006a9c:	9015      	str	r0, [sp, #84]	@ 0x54
 8006a9e:	9103      	str	r1, [sp, #12]
 8006aa0:	9205      	str	r2, [sp, #20]
 8006aa2:	f104 0208 	add.w	r2, r4, #8
 8006aa6:	9218      	str	r2, [sp, #96]	@ 0x60
 8006aa8:	f04f 0801 	mov.w	r8, #1
 8006aac:	2200      	movs	r2, #0
 8006aae:	f102 0108 	add.w	r1, r2, #8
 8006ab2:	460f      	mov	r7, r1
 8006ab4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ab6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8006ab8:	188e      	adds	r6, r1, r2
 8006aba:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8006abc:	188d      	adds	r5, r1, r2
 8006abe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006ac0:	188c      	adds	r4, r1, r2
 8006ac2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8006ac4:	1888      	adds	r0, r1, r2
 8006ac6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8006ac8:	eb01 0c02 	add.w	ip, r1, r2
 8006acc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8006ace:	440a      	add	r2, r1
 8006ad0:	9903      	ldr	r1, [sp, #12]
 8006ad2:	edd1 fa00 	vldr	s31, [r1]
 8006ad6:	9905      	ldr	r1, [sp, #20]
 8006ad8:	ed91 fa00 	vldr	s30, [r1]
 8006adc:	9904      	ldr	r1, [sp, #16]
 8006ade:	edd1 ea00 	vldr	s29, [r1]
 8006ae2:	9906      	ldr	r1, [sp, #24]
 8006ae4:	ed91 ea00 	vldr	s28, [r1]
 8006ae8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006aea:	edd1 da00 	vldr	s27, [r1]
 8006aee:	9908      	ldr	r1, [sp, #32]
 8006af0:	ed91 da00 	vldr	s26, [r1]
 8006af4:	9907      	ldr	r1, [sp, #28]
 8006af6:	edd1 ca00 	vldr	s25, [r1]
 8006afa:	9903      	ldr	r1, [sp, #12]
 8006afc:	ed91 ca01 	vldr	s24, [r1, #4]
 8006b00:	9905      	ldr	r1, [sp, #20]
 8006b02:	edd1 ba01 	vldr	s23, [r1, #4]
 8006b06:	9904      	ldr	r1, [sp, #16]
 8006b08:	edd1 aa01 	vldr	s21, [r1, #4]
 8006b0c:	9906      	ldr	r1, [sp, #24]
 8006b0e:	ed91 aa01 	vldr	s20, [r1, #4]
 8006b12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b14:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b18:	9908      	ldr	r1, [sp, #32]
 8006b1a:	edcd 7a00 	vstr	s15, [sp]
 8006b1e:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b22:	9907      	ldr	r1, [sp, #28]
 8006b24:	edcd 7a01 	vstr	s15, [sp, #4]
 8006b28:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b2c:	eb0a 0e07 	add.w	lr, sl, r7
 8006b30:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8006b32:	edcd 7a02 	vstr	s15, [sp, #8]
 8006b36:	eb0c 010a 	add.w	r1, ip, sl
 8006b3a:	4456      	add	r6, sl
 8006b3c:	4455      	add	r5, sl
 8006b3e:	4454      	add	r4, sl
 8006b40:	4450      	add	r0, sl
 8006b42:	4452      	add	r2, sl
 8006b44:	46c4      	mov	ip, r8
 8006b46:	e001      	b.n	8006b4c <arm_radix8_butterfly_f32+0x334>
 8006b48:	3f3504f3 	.word	0x3f3504f3
 8006b4c:	ed96 5a00 	vldr	s10, [r6]
 8006b50:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006b54:	ed11 6a01 	vldr	s12, [r1, #-4]
 8006b58:	edd0 7a00 	vldr	s15, [r0]
 8006b5c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8006b60:	edde 3a00 	vldr	s7, [lr]
 8006b64:	ed94 3a00 	vldr	s6, [r4]
 8006b68:	ed95 2a00 	vldr	s4, [r5]
 8006b6c:	ed9e 0a01 	vldr	s0, [lr, #4]
 8006b70:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006b74:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006b78:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006b7c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006b80:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006b84:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006b88:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006b8c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006b90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b94:	ed8e 6a00 	vstr	s12, [lr]
 8006b98:	edd0 8a01 	vldr	s17, [r0, #4]
 8006b9c:	ed95 9a01 	vldr	s18, [r5, #4]
 8006ba0:	edd1 2a00 	vldr	s5, [r1]
 8006ba4:	ed97 7a00 	vldr	s14, [r7]
 8006ba8:	edd4 0a01 	vldr	s1, [r4, #4]
 8006bac:	ed96 6a01 	vldr	s12, [r6, #4]
 8006bb0:	edd2 5a00 	vldr	s11, [r2]
 8006bb4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006bb8:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006bbc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006bc0:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006bc4:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006bc8:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006bcc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006bd0:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006bd4:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006bd8:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006bdc:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006be0:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006be4:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006be8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006bec:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006bf0:	ee32 9a08 	vadd.f32	s18, s4, s16
 8006bf4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006bf8:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006bfc:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006c00:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006c04:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006c08:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006c0c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006c10:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006c14:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006c18:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006c1c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006c20:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006c24:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006c28:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006c2c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006c30:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006c34:	ee74 3a22 	vadd.f32	s7, s8, s5
 8006c38:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006c3c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006c40:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006c44:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006c48:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006c4c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006c50:	ee72 4a24 	vadd.f32	s9, s4, s9
 8006c54:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006c58:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006c5c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006c60:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006c64:	ee36 6a03 	vadd.f32	s12, s12, s6
 8006c68:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006c6c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8006c70:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006c74:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8006c78:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006c7c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8006c80:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006c84:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8006c88:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006c8c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8006c90:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006c94:	ee35 3a03 	vadd.f32	s6, s10, s6
 8006c98:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006c9c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8006ca0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8006ca4:	ed9d 4a02 	vldr	s8, [sp, #8]
 8006ca8:	ed8e 1a01 	vstr	s2, [lr, #4]
 8006cac:	ee77 3a63 	vsub.f32	s7, s14, s7
 8006cb0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006cb4:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006cb8:	ed86 3a00 	vstr	s6, [r6]
 8006cbc:	ee30 9a89 	vadd.f32	s18, s1, s18
 8006cc0:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006cc4:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006cc8:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006ccc:	ee67 2a22 	vmul.f32	s5, s14, s5
 8006cd0:	ee64 1a00 	vmul.f32	s3, s8, s0
 8006cd4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006cd8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006cdc:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006ce0:	ee64 8a28 	vmul.f32	s17, s8, s17
 8006ce4:	ed9d 4a00 	vldr	s8, [sp]
 8006ce8:	edc6 6a01 	vstr	s13, [r6, #4]
 8006cec:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006cf0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8006cf4:	ee64 9a29 	vmul.f32	s19, s8, s19
 8006cf8:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006cfc:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006d00:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006d04:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8006d08:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006d0c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006d10:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8006d14:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8006d18:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006d1c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006d20:	ee30 0a68 	vsub.f32	s0, s0, s17
 8006d24:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8006d28:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006d2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006d30:	44dc      	add	ip, fp
 8006d32:	45e1      	cmp	r9, ip
 8006d34:	ed84 9a00 	vstr	s18, [r4]
 8006d38:	edc4 3a01 	vstr	s7, [r4, #4]
 8006d3c:	449e      	add	lr, r3
 8006d3e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8006d42:	edc2 2a00 	vstr	s5, [r2]
 8006d46:	441e      	add	r6, r3
 8006d48:	ed85 2a00 	vstr	s4, [r5]
 8006d4c:	ed85 8a01 	vstr	s16, [r5, #4]
 8006d50:	441c      	add	r4, r3
 8006d52:	ed47 1a01 	vstr	s3, [r7, #-4]
 8006d56:	ed87 0a00 	vstr	s0, [r7]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8006d60:	edc1 9a00 	vstr	s19, [r1]
 8006d64:	441d      	add	r5, r3
 8006d66:	edc0 0a00 	vstr	s1, [r0]
 8006d6a:	441f      	add	r7, r3
 8006d6c:	ed80 6a01 	vstr	s12, [r0, #4]
 8006d70:	4419      	add	r1, r3
 8006d72:	4418      	add	r0, r3
 8006d74:	f63f aeea 	bhi.w	8006b4c <arm_radix8_butterfly_f32+0x334>
 8006d78:	9a03      	ldr	r2, [sp, #12]
 8006d7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006d7c:	440a      	add	r2, r1
 8006d7e:	9203      	str	r2, [sp, #12]
 8006d80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006d82:	9a05      	ldr	r2, [sp, #20]
 8006d84:	440a      	add	r2, r1
 8006d86:	9205      	str	r2, [sp, #20]
 8006d88:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d8a:	9a04      	ldr	r2, [sp, #16]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	9204      	str	r2, [sp, #16]
 8006d90:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8006d92:	9a06      	ldr	r2, [sp, #24]
 8006d94:	440a      	add	r2, r1
 8006d96:	9206      	str	r2, [sp, #24]
 8006d98:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006d9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d9c:	440a      	add	r2, r1
 8006d9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006da0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006da2:	9a08      	ldr	r2, [sp, #32]
 8006da4:	440a      	add	r2, r1
 8006da6:	9208      	str	r2, [sp, #32]
 8006da8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006daa:	9a07      	ldr	r2, [sp, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	9207      	str	r2, [sp, #28]
 8006db0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006db2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006db4:	f108 0801 	add.w	r8, r8, #1
 8006db8:	3208      	adds	r2, #8
 8006dba:	4588      	cmp	r8, r1
 8006dbc:	920a      	str	r2, [sp, #40]	@ 0x28
 8006dbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006dc0:	f47f ae75 	bne.w	8006aae <arm_radix8_butterfly_f32+0x296>
 8006dc4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	46c3      	mov	fp, r8
 8006dcc:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8006dd0:	e532      	b.n	8006838 <arm_radix8_butterfly_f32+0x20>
 8006dd2:	b01d      	add	sp, #116	@ 0x74
 8006dd4:	ecbd 8b10 	vpop	{d8-d15}
 8006dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ddc <__cvt>:
 8006ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	ec57 6b10 	vmov	r6, r7, d0
 8006de4:	2f00      	cmp	r7, #0
 8006de6:	460c      	mov	r4, r1
 8006de8:	4619      	mov	r1, r3
 8006dea:	463b      	mov	r3, r7
 8006dec:	bfbb      	ittet	lt
 8006dee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006df2:	461f      	movlt	r7, r3
 8006df4:	2300      	movge	r3, #0
 8006df6:	232d      	movlt	r3, #45	@ 0x2d
 8006df8:	700b      	strb	r3, [r1, #0]
 8006dfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dfc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e00:	4691      	mov	r9, r2
 8006e02:	f023 0820 	bic.w	r8, r3, #32
 8006e06:	bfbc      	itt	lt
 8006e08:	4632      	movlt	r2, r6
 8006e0a:	4616      	movlt	r6, r2
 8006e0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e10:	d005      	beq.n	8006e1e <__cvt+0x42>
 8006e12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e16:	d100      	bne.n	8006e1a <__cvt+0x3e>
 8006e18:	3401      	adds	r4, #1
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	e000      	b.n	8006e20 <__cvt+0x44>
 8006e1e:	2103      	movs	r1, #3
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	ab02      	add	r3, sp, #8
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	ec47 6b10 	vmov	d0, r6, r7
 8006e2c:	4653      	mov	r3, sl
 8006e2e:	4622      	mov	r2, r4
 8006e30:	f000 fe3a 	bl	8007aa8 <_dtoa_r>
 8006e34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e38:	4605      	mov	r5, r0
 8006e3a:	d119      	bne.n	8006e70 <__cvt+0x94>
 8006e3c:	f019 0f01 	tst.w	r9, #1
 8006e40:	d00e      	beq.n	8006e60 <__cvt+0x84>
 8006e42:	eb00 0904 	add.w	r9, r0, r4
 8006e46:	2200      	movs	r2, #0
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	f7f9 febb 	bl	8000bc8 <__aeabi_dcmpeq>
 8006e52:	b108      	cbz	r0, 8006e58 <__cvt+0x7c>
 8006e54:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e58:	2230      	movs	r2, #48	@ 0x30
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	454b      	cmp	r3, r9
 8006e5e:	d31e      	bcc.n	8006e9e <__cvt+0xc2>
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e64:	1b5b      	subs	r3, r3, r5
 8006e66:	4628      	mov	r0, r5
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	b004      	add	sp, #16
 8006e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e74:	eb00 0904 	add.w	r9, r0, r4
 8006e78:	d1e5      	bne.n	8006e46 <__cvt+0x6a>
 8006e7a:	7803      	ldrb	r3, [r0, #0]
 8006e7c:	2b30      	cmp	r3, #48	@ 0x30
 8006e7e:	d10a      	bne.n	8006e96 <__cvt+0xba>
 8006e80:	2200      	movs	r2, #0
 8006e82:	2300      	movs	r3, #0
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fe9e 	bl	8000bc8 <__aeabi_dcmpeq>
 8006e8c:	b918      	cbnz	r0, 8006e96 <__cvt+0xba>
 8006e8e:	f1c4 0401 	rsb	r4, r4, #1
 8006e92:	f8ca 4000 	str.w	r4, [sl]
 8006e96:	f8da 3000 	ldr.w	r3, [sl]
 8006e9a:	4499      	add	r9, r3
 8006e9c:	e7d3      	b.n	8006e46 <__cvt+0x6a>
 8006e9e:	1c59      	adds	r1, r3, #1
 8006ea0:	9103      	str	r1, [sp, #12]
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	e7d9      	b.n	8006e5a <__cvt+0x7e>

08006ea6 <__exponent>:
 8006ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	bfba      	itte	lt
 8006eac:	4249      	neglt	r1, r1
 8006eae:	232d      	movlt	r3, #45	@ 0x2d
 8006eb0:	232b      	movge	r3, #43	@ 0x2b
 8006eb2:	2909      	cmp	r1, #9
 8006eb4:	7002      	strb	r2, [r0, #0]
 8006eb6:	7043      	strb	r3, [r0, #1]
 8006eb8:	dd29      	ble.n	8006f0e <__exponent+0x68>
 8006eba:	f10d 0307 	add.w	r3, sp, #7
 8006ebe:	461d      	mov	r5, r3
 8006ec0:	270a      	movs	r7, #10
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ec8:	fb07 1416 	mls	r4, r7, r6, r1
 8006ecc:	3430      	adds	r4, #48	@ 0x30
 8006ece:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	2c63      	cmp	r4, #99	@ 0x63
 8006ed6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006eda:	4631      	mov	r1, r6
 8006edc:	dcf1      	bgt.n	8006ec2 <__exponent+0x1c>
 8006ede:	3130      	adds	r1, #48	@ 0x30
 8006ee0:	1e94      	subs	r4, r2, #2
 8006ee2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ee6:	1c41      	adds	r1, r0, #1
 8006ee8:	4623      	mov	r3, r4
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	d30a      	bcc.n	8006f04 <__exponent+0x5e>
 8006eee:	f10d 0309 	add.w	r3, sp, #9
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	42ac      	cmp	r4, r5
 8006ef6:	bf88      	it	hi
 8006ef8:	2300      	movhi	r3, #0
 8006efa:	3302      	adds	r3, #2
 8006efc:	4403      	add	r3, r0
 8006efe:	1a18      	subs	r0, r3, r0
 8006f00:	b003      	add	sp, #12
 8006f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f04:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f08:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f0c:	e7ed      	b.n	8006eea <__exponent+0x44>
 8006f0e:	2330      	movs	r3, #48	@ 0x30
 8006f10:	3130      	adds	r1, #48	@ 0x30
 8006f12:	7083      	strb	r3, [r0, #2]
 8006f14:	70c1      	strb	r1, [r0, #3]
 8006f16:	1d03      	adds	r3, r0, #4
 8006f18:	e7f1      	b.n	8006efe <__exponent+0x58>
	...

08006f1c <_printf_float>:
 8006f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	b08d      	sub	sp, #52	@ 0x34
 8006f22:	460c      	mov	r4, r1
 8006f24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f28:	4616      	mov	r6, r2
 8006f2a:	461f      	mov	r7, r3
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	f000 fcbb 	bl	80078a8 <_localeconv_r>
 8006f32:	6803      	ldr	r3, [r0, #0]
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7f9 fa1a 	bl	8000370 <strlen>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f40:	f8d8 3000 	ldr.w	r3, [r8]
 8006f44:	9005      	str	r0, [sp, #20]
 8006f46:	3307      	adds	r3, #7
 8006f48:	f023 0307 	bic.w	r3, r3, #7
 8006f4c:	f103 0208 	add.w	r2, r3, #8
 8006f50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f54:	f8d4 b000 	ldr.w	fp, [r4]
 8006f58:	f8c8 2000 	str.w	r2, [r8]
 8006f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f64:	9307      	str	r3, [sp, #28]
 8006f66:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f72:	4b9c      	ldr	r3, [pc, #624]	@ (80071e4 <_printf_float+0x2c8>)
 8006f74:	f04f 32ff 	mov.w	r2, #4294967295
 8006f78:	f7f9 fe58 	bl	8000c2c <__aeabi_dcmpun>
 8006f7c:	bb70      	cbnz	r0, 8006fdc <_printf_float+0xc0>
 8006f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f82:	4b98      	ldr	r3, [pc, #608]	@ (80071e4 <_printf_float+0x2c8>)
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295
 8006f88:	f7f9 fe32 	bl	8000bf0 <__aeabi_dcmple>
 8006f8c:	bb30      	cbnz	r0, 8006fdc <_printf_float+0xc0>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2300      	movs	r3, #0
 8006f92:	4640      	mov	r0, r8
 8006f94:	4649      	mov	r1, r9
 8006f96:	f7f9 fe21 	bl	8000bdc <__aeabi_dcmplt>
 8006f9a:	b110      	cbz	r0, 8006fa2 <_printf_float+0x86>
 8006f9c:	232d      	movs	r3, #45	@ 0x2d
 8006f9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fa2:	4a91      	ldr	r2, [pc, #580]	@ (80071e8 <_printf_float+0x2cc>)
 8006fa4:	4b91      	ldr	r3, [pc, #580]	@ (80071ec <_printf_float+0x2d0>)
 8006fa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006faa:	bf94      	ite	ls
 8006fac:	4690      	movls	r8, r2
 8006fae:	4698      	movhi	r8, r3
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	6123      	str	r3, [r4, #16]
 8006fb4:	f02b 0304 	bic.w	r3, fp, #4
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	f04f 0900 	mov.w	r9, #0
 8006fbe:	9700      	str	r7, [sp, #0]
 8006fc0:	4633      	mov	r3, r6
 8006fc2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f000 f9d2 	bl	8007370 <_printf_common>
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f040 808d 	bne.w	80070ec <_printf_float+0x1d0>
 8006fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd6:	b00d      	add	sp, #52	@ 0x34
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	f7f9 fe22 	bl	8000c2c <__aeabi_dcmpun>
 8006fe8:	b140      	cbz	r0, 8006ffc <_printf_float+0xe0>
 8006fea:	464b      	mov	r3, r9
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfbc      	itt	lt
 8006ff0:	232d      	movlt	r3, #45	@ 0x2d
 8006ff2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80071f0 <_printf_float+0x2d4>)
 8006ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80071f4 <_printf_float+0x2d8>)
 8006ffa:	e7d4      	b.n	8006fa6 <_printf_float+0x8a>
 8006ffc:	6863      	ldr	r3, [r4, #4]
 8006ffe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007002:	9206      	str	r2, [sp, #24]
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	d13b      	bne.n	8007080 <_printf_float+0x164>
 8007008:	2306      	movs	r3, #6
 800700a:	6063      	str	r3, [r4, #4]
 800700c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007010:	2300      	movs	r3, #0
 8007012:	6022      	str	r2, [r4, #0]
 8007014:	9303      	str	r3, [sp, #12]
 8007016:	ab0a      	add	r3, sp, #40	@ 0x28
 8007018:	e9cd a301 	strd	sl, r3, [sp, #4]
 800701c:	ab09      	add	r3, sp, #36	@ 0x24
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	6861      	ldr	r1, [r4, #4]
 8007022:	ec49 8b10 	vmov	d0, r8, r9
 8007026:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800702a:	4628      	mov	r0, r5
 800702c:	f7ff fed6 	bl	8006ddc <__cvt>
 8007030:	9b06      	ldr	r3, [sp, #24]
 8007032:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007034:	2b47      	cmp	r3, #71	@ 0x47
 8007036:	4680      	mov	r8, r0
 8007038:	d129      	bne.n	800708e <_printf_float+0x172>
 800703a:	1cc8      	adds	r0, r1, #3
 800703c:	db02      	blt.n	8007044 <_printf_float+0x128>
 800703e:	6863      	ldr	r3, [r4, #4]
 8007040:	4299      	cmp	r1, r3
 8007042:	dd41      	ble.n	80070c8 <_printf_float+0x1ac>
 8007044:	f1aa 0a02 	sub.w	sl, sl, #2
 8007048:	fa5f fa8a 	uxtb.w	sl, sl
 800704c:	3901      	subs	r1, #1
 800704e:	4652      	mov	r2, sl
 8007050:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007054:	9109      	str	r1, [sp, #36]	@ 0x24
 8007056:	f7ff ff26 	bl	8006ea6 <__exponent>
 800705a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800705c:	1813      	adds	r3, r2, r0
 800705e:	2a01      	cmp	r2, #1
 8007060:	4681      	mov	r9, r0
 8007062:	6123      	str	r3, [r4, #16]
 8007064:	dc02      	bgt.n	800706c <_printf_float+0x150>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	07d2      	lsls	r2, r2, #31
 800706a:	d501      	bpl.n	8007070 <_printf_float+0x154>
 800706c:	3301      	adds	r3, #1
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0a2      	beq.n	8006fbe <_printf_float+0xa2>
 8007078:	232d      	movs	r3, #45	@ 0x2d
 800707a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800707e:	e79e      	b.n	8006fbe <_printf_float+0xa2>
 8007080:	9a06      	ldr	r2, [sp, #24]
 8007082:	2a47      	cmp	r2, #71	@ 0x47
 8007084:	d1c2      	bne.n	800700c <_printf_float+0xf0>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1c0      	bne.n	800700c <_printf_float+0xf0>
 800708a:	2301      	movs	r3, #1
 800708c:	e7bd      	b.n	800700a <_printf_float+0xee>
 800708e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007092:	d9db      	bls.n	800704c <_printf_float+0x130>
 8007094:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007098:	d118      	bne.n	80070cc <_printf_float+0x1b0>
 800709a:	2900      	cmp	r1, #0
 800709c:	6863      	ldr	r3, [r4, #4]
 800709e:	dd0b      	ble.n	80070b8 <_printf_float+0x19c>
 80070a0:	6121      	str	r1, [r4, #16]
 80070a2:	b913      	cbnz	r3, 80070aa <_printf_float+0x18e>
 80070a4:	6822      	ldr	r2, [r4, #0]
 80070a6:	07d0      	lsls	r0, r2, #31
 80070a8:	d502      	bpl.n	80070b0 <_printf_float+0x194>
 80070aa:	3301      	adds	r3, #1
 80070ac:	440b      	add	r3, r1
 80070ae:	6123      	str	r3, [r4, #16]
 80070b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070b2:	f04f 0900 	mov.w	r9, #0
 80070b6:	e7db      	b.n	8007070 <_printf_float+0x154>
 80070b8:	b913      	cbnz	r3, 80070c0 <_printf_float+0x1a4>
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	07d2      	lsls	r2, r2, #31
 80070be:	d501      	bpl.n	80070c4 <_printf_float+0x1a8>
 80070c0:	3302      	adds	r3, #2
 80070c2:	e7f4      	b.n	80070ae <_printf_float+0x192>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e7f2      	b.n	80070ae <_printf_float+0x192>
 80070c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ce:	4299      	cmp	r1, r3
 80070d0:	db05      	blt.n	80070de <_printf_float+0x1c2>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	6121      	str	r1, [r4, #16]
 80070d6:	07d8      	lsls	r0, r3, #31
 80070d8:	d5ea      	bpl.n	80070b0 <_printf_float+0x194>
 80070da:	1c4b      	adds	r3, r1, #1
 80070dc:	e7e7      	b.n	80070ae <_printf_float+0x192>
 80070de:	2900      	cmp	r1, #0
 80070e0:	bfd4      	ite	le
 80070e2:	f1c1 0202 	rsble	r2, r1, #2
 80070e6:	2201      	movgt	r2, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	e7e0      	b.n	80070ae <_printf_float+0x192>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	055a      	lsls	r2, r3, #21
 80070f0:	d407      	bmi.n	8007102 <_printf_float+0x1e6>
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	4642      	mov	r2, r8
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	d12b      	bne.n	8007158 <_printf_float+0x23c>
 8007100:	e767      	b.n	8006fd2 <_printf_float+0xb6>
 8007102:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007106:	f240 80dd 	bls.w	80072c4 <_printf_float+0x3a8>
 800710a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800710e:	2200      	movs	r2, #0
 8007110:	2300      	movs	r3, #0
 8007112:	f7f9 fd59 	bl	8000bc8 <__aeabi_dcmpeq>
 8007116:	2800      	cmp	r0, #0
 8007118:	d033      	beq.n	8007182 <_printf_float+0x266>
 800711a:	4a37      	ldr	r2, [pc, #220]	@ (80071f8 <_printf_float+0x2dc>)
 800711c:	2301      	movs	r3, #1
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	f43f af54 	beq.w	8006fd2 <_printf_float+0xb6>
 800712a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800712e:	4543      	cmp	r3, r8
 8007130:	db02      	blt.n	8007138 <_printf_float+0x21c>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	07d8      	lsls	r0, r3, #31
 8007136:	d50f      	bpl.n	8007158 <_printf_float+0x23c>
 8007138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800713c:	4631      	mov	r1, r6
 800713e:	4628      	mov	r0, r5
 8007140:	47b8      	blx	r7
 8007142:	3001      	adds	r0, #1
 8007144:	f43f af45 	beq.w	8006fd2 <_printf_float+0xb6>
 8007148:	f04f 0900 	mov.w	r9, #0
 800714c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007150:	f104 0a1a 	add.w	sl, r4, #26
 8007154:	45c8      	cmp	r8, r9
 8007156:	dc09      	bgt.n	800716c <_printf_float+0x250>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	079b      	lsls	r3, r3, #30
 800715c:	f100 8103 	bmi.w	8007366 <_printf_float+0x44a>
 8007160:	68e0      	ldr	r0, [r4, #12]
 8007162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007164:	4298      	cmp	r0, r3
 8007166:	bfb8      	it	lt
 8007168:	4618      	movlt	r0, r3
 800716a:	e734      	b.n	8006fd6 <_printf_float+0xba>
 800716c:	2301      	movs	r3, #1
 800716e:	4652      	mov	r2, sl
 8007170:	4631      	mov	r1, r6
 8007172:	4628      	mov	r0, r5
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	f43f af2b 	beq.w	8006fd2 <_printf_float+0xb6>
 800717c:	f109 0901 	add.w	r9, r9, #1
 8007180:	e7e8      	b.n	8007154 <_printf_float+0x238>
 8007182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc39      	bgt.n	80071fc <_printf_float+0x2e0>
 8007188:	4a1b      	ldr	r2, [pc, #108]	@ (80071f8 <_printf_float+0x2dc>)
 800718a:	2301      	movs	r3, #1
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f af1d 	beq.w	8006fd2 <_printf_float+0xb6>
 8007198:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800719c:	ea59 0303 	orrs.w	r3, r9, r3
 80071a0:	d102      	bne.n	80071a8 <_printf_float+0x28c>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	07d9      	lsls	r1, r3, #31
 80071a6:	d5d7      	bpl.n	8007158 <_printf_float+0x23c>
 80071a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f af0d 	beq.w	8006fd2 <_printf_float+0xb6>
 80071b8:	f04f 0a00 	mov.w	sl, #0
 80071bc:	f104 0b1a 	add.w	fp, r4, #26
 80071c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c2:	425b      	negs	r3, r3
 80071c4:	4553      	cmp	r3, sl
 80071c6:	dc01      	bgt.n	80071cc <_printf_float+0x2b0>
 80071c8:	464b      	mov	r3, r9
 80071ca:	e793      	b.n	80070f4 <_printf_float+0x1d8>
 80071cc:	2301      	movs	r3, #1
 80071ce:	465a      	mov	r2, fp
 80071d0:	4631      	mov	r1, r6
 80071d2:	4628      	mov	r0, r5
 80071d4:	47b8      	blx	r7
 80071d6:	3001      	adds	r0, #1
 80071d8:	f43f aefb 	beq.w	8006fd2 <_printf_float+0xb6>
 80071dc:	f10a 0a01 	add.w	sl, sl, #1
 80071e0:	e7ee      	b.n	80071c0 <_printf_float+0x2a4>
 80071e2:	bf00      	nop
 80071e4:	7fefffff 	.word	0x7fefffff
 80071e8:	0801cbc0 	.word	0x0801cbc0
 80071ec:	0801cbc4 	.word	0x0801cbc4
 80071f0:	0801cbc8 	.word	0x0801cbc8
 80071f4:	0801cbcc 	.word	0x0801cbcc
 80071f8:	0801cbd0 	.word	0x0801cbd0
 80071fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007202:	4553      	cmp	r3, sl
 8007204:	bfa8      	it	ge
 8007206:	4653      	movge	r3, sl
 8007208:	2b00      	cmp	r3, #0
 800720a:	4699      	mov	r9, r3
 800720c:	dc36      	bgt.n	800727c <_printf_float+0x360>
 800720e:	f04f 0b00 	mov.w	fp, #0
 8007212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007216:	f104 021a 	add.w	r2, r4, #26
 800721a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800721c:	9306      	str	r3, [sp, #24]
 800721e:	eba3 0309 	sub.w	r3, r3, r9
 8007222:	455b      	cmp	r3, fp
 8007224:	dc31      	bgt.n	800728a <_printf_float+0x36e>
 8007226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007228:	459a      	cmp	sl, r3
 800722a:	dc3a      	bgt.n	80072a2 <_printf_float+0x386>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	07da      	lsls	r2, r3, #31
 8007230:	d437      	bmi.n	80072a2 <_printf_float+0x386>
 8007232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007234:	ebaa 0903 	sub.w	r9, sl, r3
 8007238:	9b06      	ldr	r3, [sp, #24]
 800723a:	ebaa 0303 	sub.w	r3, sl, r3
 800723e:	4599      	cmp	r9, r3
 8007240:	bfa8      	it	ge
 8007242:	4699      	movge	r9, r3
 8007244:	f1b9 0f00 	cmp.w	r9, #0
 8007248:	dc33      	bgt.n	80072b2 <_printf_float+0x396>
 800724a:	f04f 0800 	mov.w	r8, #0
 800724e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007252:	f104 0b1a 	add.w	fp, r4, #26
 8007256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007258:	ebaa 0303 	sub.w	r3, sl, r3
 800725c:	eba3 0309 	sub.w	r3, r3, r9
 8007260:	4543      	cmp	r3, r8
 8007262:	f77f af79 	ble.w	8007158 <_printf_float+0x23c>
 8007266:	2301      	movs	r3, #1
 8007268:	465a      	mov	r2, fp
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	f43f aeae 	beq.w	8006fd2 <_printf_float+0xb6>
 8007276:	f108 0801 	add.w	r8, r8, #1
 800727a:	e7ec      	b.n	8007256 <_printf_float+0x33a>
 800727c:	4642      	mov	r2, r8
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	d1c2      	bne.n	800720e <_printf_float+0x2f2>
 8007288:	e6a3      	b.n	8006fd2 <_printf_float+0xb6>
 800728a:	2301      	movs	r3, #1
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	9206      	str	r2, [sp, #24]
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	f43f ae9c 	beq.w	8006fd2 <_printf_float+0xb6>
 800729a:	9a06      	ldr	r2, [sp, #24]
 800729c:	f10b 0b01 	add.w	fp, fp, #1
 80072a0:	e7bb      	b.n	800721a <_printf_float+0x2fe>
 80072a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	d1c0      	bne.n	8007232 <_printf_float+0x316>
 80072b0:	e68f      	b.n	8006fd2 <_printf_float+0xb6>
 80072b2:	9a06      	ldr	r2, [sp, #24]
 80072b4:	464b      	mov	r3, r9
 80072b6:	4442      	add	r2, r8
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	d1c3      	bne.n	800724a <_printf_float+0x32e>
 80072c2:	e686      	b.n	8006fd2 <_printf_float+0xb6>
 80072c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072c8:	f1ba 0f01 	cmp.w	sl, #1
 80072cc:	dc01      	bgt.n	80072d2 <_printf_float+0x3b6>
 80072ce:	07db      	lsls	r3, r3, #31
 80072d0:	d536      	bpl.n	8007340 <_printf_float+0x424>
 80072d2:	2301      	movs	r3, #1
 80072d4:	4642      	mov	r2, r8
 80072d6:	4631      	mov	r1, r6
 80072d8:	4628      	mov	r0, r5
 80072da:	47b8      	blx	r7
 80072dc:	3001      	adds	r0, #1
 80072de:	f43f ae78 	beq.w	8006fd2 <_printf_float+0xb6>
 80072e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	47b8      	blx	r7
 80072ec:	3001      	adds	r0, #1
 80072ee:	f43f ae70 	beq.w	8006fd2 <_printf_float+0xb6>
 80072f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072f6:	2200      	movs	r2, #0
 80072f8:	2300      	movs	r3, #0
 80072fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072fe:	f7f9 fc63 	bl	8000bc8 <__aeabi_dcmpeq>
 8007302:	b9c0      	cbnz	r0, 8007336 <_printf_float+0x41a>
 8007304:	4653      	mov	r3, sl
 8007306:	f108 0201 	add.w	r2, r8, #1
 800730a:	4631      	mov	r1, r6
 800730c:	4628      	mov	r0, r5
 800730e:	47b8      	blx	r7
 8007310:	3001      	adds	r0, #1
 8007312:	d10c      	bne.n	800732e <_printf_float+0x412>
 8007314:	e65d      	b.n	8006fd2 <_printf_float+0xb6>
 8007316:	2301      	movs	r3, #1
 8007318:	465a      	mov	r2, fp
 800731a:	4631      	mov	r1, r6
 800731c:	4628      	mov	r0, r5
 800731e:	47b8      	blx	r7
 8007320:	3001      	adds	r0, #1
 8007322:	f43f ae56 	beq.w	8006fd2 <_printf_float+0xb6>
 8007326:	f108 0801 	add.w	r8, r8, #1
 800732a:	45d0      	cmp	r8, sl
 800732c:	dbf3      	blt.n	8007316 <_printf_float+0x3fa>
 800732e:	464b      	mov	r3, r9
 8007330:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007334:	e6df      	b.n	80070f6 <_printf_float+0x1da>
 8007336:	f04f 0800 	mov.w	r8, #0
 800733a:	f104 0b1a 	add.w	fp, r4, #26
 800733e:	e7f4      	b.n	800732a <_printf_float+0x40e>
 8007340:	2301      	movs	r3, #1
 8007342:	4642      	mov	r2, r8
 8007344:	e7e1      	b.n	800730a <_printf_float+0x3ee>
 8007346:	2301      	movs	r3, #1
 8007348:	464a      	mov	r2, r9
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	f43f ae3e 	beq.w	8006fd2 <_printf_float+0xb6>
 8007356:	f108 0801 	add.w	r8, r8, #1
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800735e:	1a5b      	subs	r3, r3, r1
 8007360:	4543      	cmp	r3, r8
 8007362:	dcf0      	bgt.n	8007346 <_printf_float+0x42a>
 8007364:	e6fc      	b.n	8007160 <_printf_float+0x244>
 8007366:	f04f 0800 	mov.w	r8, #0
 800736a:	f104 0919 	add.w	r9, r4, #25
 800736e:	e7f4      	b.n	800735a <_printf_float+0x43e>

08007370 <_printf_common>:
 8007370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	4616      	mov	r6, r2
 8007376:	4698      	mov	r8, r3
 8007378:	688a      	ldr	r2, [r1, #8]
 800737a:	690b      	ldr	r3, [r1, #16]
 800737c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007380:	4293      	cmp	r3, r2
 8007382:	bfb8      	it	lt
 8007384:	4613      	movlt	r3, r2
 8007386:	6033      	str	r3, [r6, #0]
 8007388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800738c:	4607      	mov	r7, r0
 800738e:	460c      	mov	r4, r1
 8007390:	b10a      	cbz	r2, 8007396 <_printf_common+0x26>
 8007392:	3301      	adds	r3, #1
 8007394:	6033      	str	r3, [r6, #0]
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	0699      	lsls	r1, r3, #26
 800739a:	bf42      	ittt	mi
 800739c:	6833      	ldrmi	r3, [r6, #0]
 800739e:	3302      	addmi	r3, #2
 80073a0:	6033      	strmi	r3, [r6, #0]
 80073a2:	6825      	ldr	r5, [r4, #0]
 80073a4:	f015 0506 	ands.w	r5, r5, #6
 80073a8:	d106      	bne.n	80073b8 <_printf_common+0x48>
 80073aa:	f104 0a19 	add.w	sl, r4, #25
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	6832      	ldr	r2, [r6, #0]
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	dc26      	bgt.n	8007406 <_printf_common+0x96>
 80073b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	3b00      	subs	r3, #0
 80073c0:	bf18      	it	ne
 80073c2:	2301      	movne	r3, #1
 80073c4:	0692      	lsls	r2, r2, #26
 80073c6:	d42b      	bmi.n	8007420 <_printf_common+0xb0>
 80073c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073cc:	4641      	mov	r1, r8
 80073ce:	4638      	mov	r0, r7
 80073d0:	47c8      	blx	r9
 80073d2:	3001      	adds	r0, #1
 80073d4:	d01e      	beq.n	8007414 <_printf_common+0xa4>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	6922      	ldr	r2, [r4, #16]
 80073da:	f003 0306 	and.w	r3, r3, #6
 80073de:	2b04      	cmp	r3, #4
 80073e0:	bf02      	ittt	eq
 80073e2:	68e5      	ldreq	r5, [r4, #12]
 80073e4:	6833      	ldreq	r3, [r6, #0]
 80073e6:	1aed      	subeq	r5, r5, r3
 80073e8:	68a3      	ldr	r3, [r4, #8]
 80073ea:	bf0c      	ite	eq
 80073ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f0:	2500      	movne	r5, #0
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bfc4      	itt	gt
 80073f6:	1a9b      	subgt	r3, r3, r2
 80073f8:	18ed      	addgt	r5, r5, r3
 80073fa:	2600      	movs	r6, #0
 80073fc:	341a      	adds	r4, #26
 80073fe:	42b5      	cmp	r5, r6
 8007400:	d11a      	bne.n	8007438 <_printf_common+0xc8>
 8007402:	2000      	movs	r0, #0
 8007404:	e008      	b.n	8007418 <_printf_common+0xa8>
 8007406:	2301      	movs	r3, #1
 8007408:	4652      	mov	r2, sl
 800740a:	4641      	mov	r1, r8
 800740c:	4638      	mov	r0, r7
 800740e:	47c8      	blx	r9
 8007410:	3001      	adds	r0, #1
 8007412:	d103      	bne.n	800741c <_printf_common+0xac>
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741c:	3501      	adds	r5, #1
 800741e:	e7c6      	b.n	80073ae <_printf_common+0x3e>
 8007420:	18e1      	adds	r1, r4, r3
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	2030      	movs	r0, #48	@ 0x30
 8007426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800742a:	4422      	add	r2, r4
 800742c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007434:	3302      	adds	r3, #2
 8007436:	e7c7      	b.n	80073c8 <_printf_common+0x58>
 8007438:	2301      	movs	r3, #1
 800743a:	4622      	mov	r2, r4
 800743c:	4641      	mov	r1, r8
 800743e:	4638      	mov	r0, r7
 8007440:	47c8      	blx	r9
 8007442:	3001      	adds	r0, #1
 8007444:	d0e6      	beq.n	8007414 <_printf_common+0xa4>
 8007446:	3601      	adds	r6, #1
 8007448:	e7d9      	b.n	80073fe <_printf_common+0x8e>
	...

0800744c <_printf_i>:
 800744c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	7e0f      	ldrb	r7, [r1, #24]
 8007452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007454:	2f78      	cmp	r7, #120	@ 0x78
 8007456:	4691      	mov	r9, r2
 8007458:	4680      	mov	r8, r0
 800745a:	460c      	mov	r4, r1
 800745c:	469a      	mov	sl, r3
 800745e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007462:	d807      	bhi.n	8007474 <_printf_i+0x28>
 8007464:	2f62      	cmp	r7, #98	@ 0x62
 8007466:	d80a      	bhi.n	800747e <_printf_i+0x32>
 8007468:	2f00      	cmp	r7, #0
 800746a:	f000 80d2 	beq.w	8007612 <_printf_i+0x1c6>
 800746e:	2f58      	cmp	r7, #88	@ 0x58
 8007470:	f000 80b9 	beq.w	80075e6 <_printf_i+0x19a>
 8007474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800747c:	e03a      	b.n	80074f4 <_printf_i+0xa8>
 800747e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007482:	2b15      	cmp	r3, #21
 8007484:	d8f6      	bhi.n	8007474 <_printf_i+0x28>
 8007486:	a101      	add	r1, pc, #4	@ (adr r1, 800748c <_printf_i+0x40>)
 8007488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800748c:	080074e5 	.word	0x080074e5
 8007490:	080074f9 	.word	0x080074f9
 8007494:	08007475 	.word	0x08007475
 8007498:	08007475 	.word	0x08007475
 800749c:	08007475 	.word	0x08007475
 80074a0:	08007475 	.word	0x08007475
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	08007475 	.word	0x08007475
 80074ac:	08007475 	.word	0x08007475
 80074b0:	08007475 	.word	0x08007475
 80074b4:	08007475 	.word	0x08007475
 80074b8:	080075f9 	.word	0x080075f9
 80074bc:	08007523 	.word	0x08007523
 80074c0:	080075b3 	.word	0x080075b3
 80074c4:	08007475 	.word	0x08007475
 80074c8:	08007475 	.word	0x08007475
 80074cc:	0800761b 	.word	0x0800761b
 80074d0:	08007475 	.word	0x08007475
 80074d4:	08007523 	.word	0x08007523
 80074d8:	08007475 	.word	0x08007475
 80074dc:	08007475 	.word	0x08007475
 80074e0:	080075bb 	.word	0x080075bb
 80074e4:	6833      	ldr	r3, [r6, #0]
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6032      	str	r2, [r6, #0]
 80074ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074f4:	2301      	movs	r3, #1
 80074f6:	e09d      	b.n	8007634 <_printf_i+0x1e8>
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	6820      	ldr	r0, [r4, #0]
 80074fc:	1d19      	adds	r1, r3, #4
 80074fe:	6031      	str	r1, [r6, #0]
 8007500:	0606      	lsls	r6, r0, #24
 8007502:	d501      	bpl.n	8007508 <_printf_i+0xbc>
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	e003      	b.n	8007510 <_printf_i+0xc4>
 8007508:	0645      	lsls	r5, r0, #25
 800750a:	d5fb      	bpl.n	8007504 <_printf_i+0xb8>
 800750c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007510:	2d00      	cmp	r5, #0
 8007512:	da03      	bge.n	800751c <_printf_i+0xd0>
 8007514:	232d      	movs	r3, #45	@ 0x2d
 8007516:	426d      	negs	r5, r5
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800751c:	4859      	ldr	r0, [pc, #356]	@ (8007684 <_printf_i+0x238>)
 800751e:	230a      	movs	r3, #10
 8007520:	e011      	b.n	8007546 <_printf_i+0xfa>
 8007522:	6821      	ldr	r1, [r4, #0]
 8007524:	6833      	ldr	r3, [r6, #0]
 8007526:	0608      	lsls	r0, r1, #24
 8007528:	f853 5b04 	ldr.w	r5, [r3], #4
 800752c:	d402      	bmi.n	8007534 <_printf_i+0xe8>
 800752e:	0649      	lsls	r1, r1, #25
 8007530:	bf48      	it	mi
 8007532:	b2ad      	uxthmi	r5, r5
 8007534:	2f6f      	cmp	r7, #111	@ 0x6f
 8007536:	4853      	ldr	r0, [pc, #332]	@ (8007684 <_printf_i+0x238>)
 8007538:	6033      	str	r3, [r6, #0]
 800753a:	bf14      	ite	ne
 800753c:	230a      	movne	r3, #10
 800753e:	2308      	moveq	r3, #8
 8007540:	2100      	movs	r1, #0
 8007542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007546:	6866      	ldr	r6, [r4, #4]
 8007548:	60a6      	str	r6, [r4, #8]
 800754a:	2e00      	cmp	r6, #0
 800754c:	bfa2      	ittt	ge
 800754e:	6821      	ldrge	r1, [r4, #0]
 8007550:	f021 0104 	bicge.w	r1, r1, #4
 8007554:	6021      	strge	r1, [r4, #0]
 8007556:	b90d      	cbnz	r5, 800755c <_printf_i+0x110>
 8007558:	2e00      	cmp	r6, #0
 800755a:	d04b      	beq.n	80075f4 <_printf_i+0x1a8>
 800755c:	4616      	mov	r6, r2
 800755e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007562:	fb03 5711 	mls	r7, r3, r1, r5
 8007566:	5dc7      	ldrb	r7, [r0, r7]
 8007568:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800756c:	462f      	mov	r7, r5
 800756e:	42bb      	cmp	r3, r7
 8007570:	460d      	mov	r5, r1
 8007572:	d9f4      	bls.n	800755e <_printf_i+0x112>
 8007574:	2b08      	cmp	r3, #8
 8007576:	d10b      	bne.n	8007590 <_printf_i+0x144>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	07df      	lsls	r7, r3, #31
 800757c:	d508      	bpl.n	8007590 <_printf_i+0x144>
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6861      	ldr	r1, [r4, #4]
 8007582:	4299      	cmp	r1, r3
 8007584:	bfde      	ittt	le
 8007586:	2330      	movle	r3, #48	@ 0x30
 8007588:	f806 3c01 	strble.w	r3, [r6, #-1]
 800758c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007590:	1b92      	subs	r2, r2, r6
 8007592:	6122      	str	r2, [r4, #16]
 8007594:	f8cd a000 	str.w	sl, [sp]
 8007598:	464b      	mov	r3, r9
 800759a:	aa03      	add	r2, sp, #12
 800759c:	4621      	mov	r1, r4
 800759e:	4640      	mov	r0, r8
 80075a0:	f7ff fee6 	bl	8007370 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	d14a      	bne.n	800763e <_printf_i+0x1f2>
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	b004      	add	sp, #16
 80075ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	f043 0320 	orr.w	r3, r3, #32
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	4833      	ldr	r0, [pc, #204]	@ (8007688 <_printf_i+0x23c>)
 80075bc:	2778      	movs	r7, #120	@ 0x78
 80075be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	6831      	ldr	r1, [r6, #0]
 80075c6:	061f      	lsls	r7, r3, #24
 80075c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80075cc:	d402      	bmi.n	80075d4 <_printf_i+0x188>
 80075ce:	065f      	lsls	r7, r3, #25
 80075d0:	bf48      	it	mi
 80075d2:	b2ad      	uxthmi	r5, r5
 80075d4:	6031      	str	r1, [r6, #0]
 80075d6:	07d9      	lsls	r1, r3, #31
 80075d8:	bf44      	itt	mi
 80075da:	f043 0320 	orrmi.w	r3, r3, #32
 80075de:	6023      	strmi	r3, [r4, #0]
 80075e0:	b11d      	cbz	r5, 80075ea <_printf_i+0x19e>
 80075e2:	2310      	movs	r3, #16
 80075e4:	e7ac      	b.n	8007540 <_printf_i+0xf4>
 80075e6:	4827      	ldr	r0, [pc, #156]	@ (8007684 <_printf_i+0x238>)
 80075e8:	e7e9      	b.n	80075be <_printf_i+0x172>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	f023 0320 	bic.w	r3, r3, #32
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	e7f6      	b.n	80075e2 <_printf_i+0x196>
 80075f4:	4616      	mov	r6, r2
 80075f6:	e7bd      	b.n	8007574 <_printf_i+0x128>
 80075f8:	6833      	ldr	r3, [r6, #0]
 80075fa:	6825      	ldr	r5, [r4, #0]
 80075fc:	6961      	ldr	r1, [r4, #20]
 80075fe:	1d18      	adds	r0, r3, #4
 8007600:	6030      	str	r0, [r6, #0]
 8007602:	062e      	lsls	r6, r5, #24
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	d501      	bpl.n	800760c <_printf_i+0x1c0>
 8007608:	6019      	str	r1, [r3, #0]
 800760a:	e002      	b.n	8007612 <_printf_i+0x1c6>
 800760c:	0668      	lsls	r0, r5, #25
 800760e:	d5fb      	bpl.n	8007608 <_printf_i+0x1bc>
 8007610:	8019      	strh	r1, [r3, #0]
 8007612:	2300      	movs	r3, #0
 8007614:	6123      	str	r3, [r4, #16]
 8007616:	4616      	mov	r6, r2
 8007618:	e7bc      	b.n	8007594 <_printf_i+0x148>
 800761a:	6833      	ldr	r3, [r6, #0]
 800761c:	1d1a      	adds	r2, r3, #4
 800761e:	6032      	str	r2, [r6, #0]
 8007620:	681e      	ldr	r6, [r3, #0]
 8007622:	6862      	ldr	r2, [r4, #4]
 8007624:	2100      	movs	r1, #0
 8007626:	4630      	mov	r0, r6
 8007628:	f7f8 fe52 	bl	80002d0 <memchr>
 800762c:	b108      	cbz	r0, 8007632 <_printf_i+0x1e6>
 800762e:	1b80      	subs	r0, r0, r6
 8007630:	6060      	str	r0, [r4, #4]
 8007632:	6863      	ldr	r3, [r4, #4]
 8007634:	6123      	str	r3, [r4, #16]
 8007636:	2300      	movs	r3, #0
 8007638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800763c:	e7aa      	b.n	8007594 <_printf_i+0x148>
 800763e:	6923      	ldr	r3, [r4, #16]
 8007640:	4632      	mov	r2, r6
 8007642:	4649      	mov	r1, r9
 8007644:	4640      	mov	r0, r8
 8007646:	47d0      	blx	sl
 8007648:	3001      	adds	r0, #1
 800764a:	d0ad      	beq.n	80075a8 <_printf_i+0x15c>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	079b      	lsls	r3, r3, #30
 8007650:	d413      	bmi.n	800767a <_printf_i+0x22e>
 8007652:	68e0      	ldr	r0, [r4, #12]
 8007654:	9b03      	ldr	r3, [sp, #12]
 8007656:	4298      	cmp	r0, r3
 8007658:	bfb8      	it	lt
 800765a:	4618      	movlt	r0, r3
 800765c:	e7a6      	b.n	80075ac <_printf_i+0x160>
 800765e:	2301      	movs	r3, #1
 8007660:	4632      	mov	r2, r6
 8007662:	4649      	mov	r1, r9
 8007664:	4640      	mov	r0, r8
 8007666:	47d0      	blx	sl
 8007668:	3001      	adds	r0, #1
 800766a:	d09d      	beq.n	80075a8 <_printf_i+0x15c>
 800766c:	3501      	adds	r5, #1
 800766e:	68e3      	ldr	r3, [r4, #12]
 8007670:	9903      	ldr	r1, [sp, #12]
 8007672:	1a5b      	subs	r3, r3, r1
 8007674:	42ab      	cmp	r3, r5
 8007676:	dcf2      	bgt.n	800765e <_printf_i+0x212>
 8007678:	e7eb      	b.n	8007652 <_printf_i+0x206>
 800767a:	2500      	movs	r5, #0
 800767c:	f104 0619 	add.w	r6, r4, #25
 8007680:	e7f5      	b.n	800766e <_printf_i+0x222>
 8007682:	bf00      	nop
 8007684:	0801cbd2 	.word	0x0801cbd2
 8007688:	0801cbe3 	.word	0x0801cbe3

0800768c <std>:
 800768c:	2300      	movs	r3, #0
 800768e:	b510      	push	{r4, lr}
 8007690:	4604      	mov	r4, r0
 8007692:	e9c0 3300 	strd	r3, r3, [r0]
 8007696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800769a:	6083      	str	r3, [r0, #8]
 800769c:	8181      	strh	r1, [r0, #12]
 800769e:	6643      	str	r3, [r0, #100]	@ 0x64
 80076a0:	81c2      	strh	r2, [r0, #14]
 80076a2:	6183      	str	r3, [r0, #24]
 80076a4:	4619      	mov	r1, r3
 80076a6:	2208      	movs	r2, #8
 80076a8:	305c      	adds	r0, #92	@ 0x5c
 80076aa:	f000 f8f4 	bl	8007896 <memset>
 80076ae:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <std+0x58>)
 80076b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <std+0x5c>)
 80076b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <std+0x60>)
 80076b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <std+0x64>)
 80076bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x68>)
 80076c0:	6224      	str	r4, [r4, #32]
 80076c2:	429c      	cmp	r4, r3
 80076c4:	d006      	beq.n	80076d4 <std+0x48>
 80076c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076ca:	4294      	cmp	r4, r2
 80076cc:	d002      	beq.n	80076d4 <std+0x48>
 80076ce:	33d0      	adds	r3, #208	@ 0xd0
 80076d0:	429c      	cmp	r4, r3
 80076d2:	d105      	bne.n	80076e0 <std+0x54>
 80076d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076dc:	f000 b958 	b.w	8007990 <__retarget_lock_init_recursive>
 80076e0:	bd10      	pop	{r4, pc}
 80076e2:	bf00      	nop
 80076e4:	08007811 	.word	0x08007811
 80076e8:	08007833 	.word	0x08007833
 80076ec:	0800786b 	.word	0x0800786b
 80076f0:	0800788f 	.word	0x0800788f
 80076f4:	20005818 	.word	0x20005818

080076f8 <stdio_exit_handler>:
 80076f8:	4a02      	ldr	r2, [pc, #8]	@ (8007704 <stdio_exit_handler+0xc>)
 80076fa:	4903      	ldr	r1, [pc, #12]	@ (8007708 <stdio_exit_handler+0x10>)
 80076fc:	4803      	ldr	r0, [pc, #12]	@ (800770c <stdio_exit_handler+0x14>)
 80076fe:	f000 b869 	b.w	80077d4 <_fwalk_sglue>
 8007702:	bf00      	nop
 8007704:	2000000c 	.word	0x2000000c
 8007708:	0800903d 	.word	0x0800903d
 800770c:	2000001c 	.word	0x2000001c

08007710 <cleanup_stdio>:
 8007710:	6841      	ldr	r1, [r0, #4]
 8007712:	4b0c      	ldr	r3, [pc, #48]	@ (8007744 <cleanup_stdio+0x34>)
 8007714:	4299      	cmp	r1, r3
 8007716:	b510      	push	{r4, lr}
 8007718:	4604      	mov	r4, r0
 800771a:	d001      	beq.n	8007720 <cleanup_stdio+0x10>
 800771c:	f001 fc8e 	bl	800903c <_fflush_r>
 8007720:	68a1      	ldr	r1, [r4, #8]
 8007722:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <cleanup_stdio+0x38>)
 8007724:	4299      	cmp	r1, r3
 8007726:	d002      	beq.n	800772e <cleanup_stdio+0x1e>
 8007728:	4620      	mov	r0, r4
 800772a:	f001 fc87 	bl	800903c <_fflush_r>
 800772e:	68e1      	ldr	r1, [r4, #12]
 8007730:	4b06      	ldr	r3, [pc, #24]	@ (800774c <cleanup_stdio+0x3c>)
 8007732:	4299      	cmp	r1, r3
 8007734:	d004      	beq.n	8007740 <cleanup_stdio+0x30>
 8007736:	4620      	mov	r0, r4
 8007738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800773c:	f001 bc7e 	b.w	800903c <_fflush_r>
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	20005818 	.word	0x20005818
 8007748:	20005880 	.word	0x20005880
 800774c:	200058e8 	.word	0x200058e8

08007750 <global_stdio_init.part.0>:
 8007750:	b510      	push	{r4, lr}
 8007752:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <global_stdio_init.part.0+0x30>)
 8007754:	4c0b      	ldr	r4, [pc, #44]	@ (8007784 <global_stdio_init.part.0+0x34>)
 8007756:	4a0c      	ldr	r2, [pc, #48]	@ (8007788 <global_stdio_init.part.0+0x38>)
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	4620      	mov	r0, r4
 800775c:	2200      	movs	r2, #0
 800775e:	2104      	movs	r1, #4
 8007760:	f7ff ff94 	bl	800768c <std>
 8007764:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007768:	2201      	movs	r2, #1
 800776a:	2109      	movs	r1, #9
 800776c:	f7ff ff8e 	bl	800768c <std>
 8007770:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007774:	2202      	movs	r2, #2
 8007776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777a:	2112      	movs	r1, #18
 800777c:	f7ff bf86 	b.w	800768c <std>
 8007780:	20005950 	.word	0x20005950
 8007784:	20005818 	.word	0x20005818
 8007788:	080076f9 	.word	0x080076f9

0800778c <__sfp_lock_acquire>:
 800778c:	4801      	ldr	r0, [pc, #4]	@ (8007794 <__sfp_lock_acquire+0x8>)
 800778e:	f000 b900 	b.w	8007992 <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	20005959 	.word	0x20005959

08007798 <__sfp_lock_release>:
 8007798:	4801      	ldr	r0, [pc, #4]	@ (80077a0 <__sfp_lock_release+0x8>)
 800779a:	f000 b8fb 	b.w	8007994 <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	20005959 	.word	0x20005959

080077a4 <__sinit>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	4604      	mov	r4, r0
 80077a8:	f7ff fff0 	bl	800778c <__sfp_lock_acquire>
 80077ac:	6a23      	ldr	r3, [r4, #32]
 80077ae:	b11b      	cbz	r3, 80077b8 <__sinit+0x14>
 80077b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b4:	f7ff bff0 	b.w	8007798 <__sfp_lock_release>
 80077b8:	4b04      	ldr	r3, [pc, #16]	@ (80077cc <__sinit+0x28>)
 80077ba:	6223      	str	r3, [r4, #32]
 80077bc:	4b04      	ldr	r3, [pc, #16]	@ (80077d0 <__sinit+0x2c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f5      	bne.n	80077b0 <__sinit+0xc>
 80077c4:	f7ff ffc4 	bl	8007750 <global_stdio_init.part.0>
 80077c8:	e7f2      	b.n	80077b0 <__sinit+0xc>
 80077ca:	bf00      	nop
 80077cc:	08007711 	.word	0x08007711
 80077d0:	20005950 	.word	0x20005950

080077d4 <_fwalk_sglue>:
 80077d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d8:	4607      	mov	r7, r0
 80077da:	4688      	mov	r8, r1
 80077dc:	4614      	mov	r4, r2
 80077de:	2600      	movs	r6, #0
 80077e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e4:	f1b9 0901 	subs.w	r9, r9, #1
 80077e8:	d505      	bpl.n	80077f6 <_fwalk_sglue+0x22>
 80077ea:	6824      	ldr	r4, [r4, #0]
 80077ec:	2c00      	cmp	r4, #0
 80077ee:	d1f7      	bne.n	80077e0 <_fwalk_sglue+0xc>
 80077f0:	4630      	mov	r0, r6
 80077f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d907      	bls.n	800780c <_fwalk_sglue+0x38>
 80077fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007800:	3301      	adds	r3, #1
 8007802:	d003      	beq.n	800780c <_fwalk_sglue+0x38>
 8007804:	4629      	mov	r1, r5
 8007806:	4638      	mov	r0, r7
 8007808:	47c0      	blx	r8
 800780a:	4306      	orrs	r6, r0
 800780c:	3568      	adds	r5, #104	@ 0x68
 800780e:	e7e9      	b.n	80077e4 <_fwalk_sglue+0x10>

08007810 <__sread>:
 8007810:	b510      	push	{r4, lr}
 8007812:	460c      	mov	r4, r1
 8007814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007818:	f000 f86c 	bl	80078f4 <_read_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	bfab      	itete	ge
 8007820:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007822:	89a3      	ldrhlt	r3, [r4, #12]
 8007824:	181b      	addge	r3, r3, r0
 8007826:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800782a:	bfac      	ite	ge
 800782c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800782e:	81a3      	strhlt	r3, [r4, #12]
 8007830:	bd10      	pop	{r4, pc}

08007832 <__swrite>:
 8007832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007836:	461f      	mov	r7, r3
 8007838:	898b      	ldrh	r3, [r1, #12]
 800783a:	05db      	lsls	r3, r3, #23
 800783c:	4605      	mov	r5, r0
 800783e:	460c      	mov	r4, r1
 8007840:	4616      	mov	r6, r2
 8007842:	d505      	bpl.n	8007850 <__swrite+0x1e>
 8007844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007848:	2302      	movs	r3, #2
 800784a:	2200      	movs	r2, #0
 800784c:	f000 f840 	bl	80078d0 <_lseek_r>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007856:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	4632      	mov	r2, r6
 800785e:	463b      	mov	r3, r7
 8007860:	4628      	mov	r0, r5
 8007862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007866:	f000 b857 	b.w	8007918 <_write_r>

0800786a <__sseek>:
 800786a:	b510      	push	{r4, lr}
 800786c:	460c      	mov	r4, r1
 800786e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007872:	f000 f82d 	bl	80078d0 <_lseek_r>
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	bf15      	itete	ne
 800787c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800787e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007882:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007886:	81a3      	strheq	r3, [r4, #12]
 8007888:	bf18      	it	ne
 800788a:	81a3      	strhne	r3, [r4, #12]
 800788c:	bd10      	pop	{r4, pc}

0800788e <__sclose>:
 800788e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007892:	f000 b80d 	b.w	80078b0 <_close_r>

08007896 <memset>:
 8007896:	4402      	add	r2, r0
 8007898:	4603      	mov	r3, r0
 800789a:	4293      	cmp	r3, r2
 800789c:	d100      	bne.n	80078a0 <memset+0xa>
 800789e:	4770      	bx	lr
 80078a0:	f803 1b01 	strb.w	r1, [r3], #1
 80078a4:	e7f9      	b.n	800789a <memset+0x4>
	...

080078a8 <_localeconv_r>:
 80078a8:	4800      	ldr	r0, [pc, #0]	@ (80078ac <_localeconv_r+0x4>)
 80078aa:	4770      	bx	lr
 80078ac:	20000158 	.word	0x20000158

080078b0 <_close_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4d06      	ldr	r5, [pc, #24]	@ (80078cc <_close_r+0x1c>)
 80078b4:	2300      	movs	r3, #0
 80078b6:	4604      	mov	r4, r0
 80078b8:	4608      	mov	r0, r1
 80078ba:	602b      	str	r3, [r5, #0]
 80078bc:	f7fa f95c 	bl	8001b78 <_close>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_close_r+0x1a>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_close_r+0x1a>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	20005954 	.word	0x20005954

080078d0 <_lseek_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	@ (80078f0 <_lseek_r+0x20>)
 80078d4:	4604      	mov	r4, r0
 80078d6:	4608      	mov	r0, r1
 80078d8:	4611      	mov	r1, r2
 80078da:	2200      	movs	r2, #0
 80078dc:	602a      	str	r2, [r5, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f7fa f971 	bl	8001bc6 <_lseek>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_lseek_r+0x1e>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_lseek_r+0x1e>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	20005954 	.word	0x20005954

080078f4 <_read_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d07      	ldr	r5, [pc, #28]	@ (8007914 <_read_r+0x20>)
 80078f8:	4604      	mov	r4, r0
 80078fa:	4608      	mov	r0, r1
 80078fc:	4611      	mov	r1, r2
 80078fe:	2200      	movs	r2, #0
 8007900:	602a      	str	r2, [r5, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	f7fa f8ff 	bl	8001b06 <_read>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_read_r+0x1e>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_read_r+0x1e>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	20005954 	.word	0x20005954

08007918 <_write_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d07      	ldr	r5, [pc, #28]	@ (8007938 <_write_r+0x20>)
 800791c:	4604      	mov	r4, r0
 800791e:	4608      	mov	r0, r1
 8007920:	4611      	mov	r1, r2
 8007922:	2200      	movs	r2, #0
 8007924:	602a      	str	r2, [r5, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	f7fa f90a 	bl	8001b40 <_write>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_write_r+0x1e>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_write_r+0x1e>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	20005954 	.word	0x20005954

0800793c <__errno>:
 800793c:	4b01      	ldr	r3, [pc, #4]	@ (8007944 <__errno+0x8>)
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000018 	.word	0x20000018

08007948 <__libc_init_array>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4d0d      	ldr	r5, [pc, #52]	@ (8007980 <__libc_init_array+0x38>)
 800794c:	4c0d      	ldr	r4, [pc, #52]	@ (8007984 <__libc_init_array+0x3c>)
 800794e:	1b64      	subs	r4, r4, r5
 8007950:	10a4      	asrs	r4, r4, #2
 8007952:	2600      	movs	r6, #0
 8007954:	42a6      	cmp	r6, r4
 8007956:	d109      	bne.n	800796c <__libc_init_array+0x24>
 8007958:	4d0b      	ldr	r5, [pc, #44]	@ (8007988 <__libc_init_array+0x40>)
 800795a:	4c0c      	ldr	r4, [pc, #48]	@ (800798c <__libc_init_array+0x44>)
 800795c:	f001 fede 	bl	800971c <_init>
 8007960:	1b64      	subs	r4, r4, r5
 8007962:	10a4      	asrs	r4, r4, #2
 8007964:	2600      	movs	r6, #0
 8007966:	42a6      	cmp	r6, r4
 8007968:	d105      	bne.n	8007976 <__libc_init_array+0x2e>
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007970:	4798      	blx	r3
 8007972:	3601      	adds	r6, #1
 8007974:	e7ee      	b.n	8007954 <__libc_init_array+0xc>
 8007976:	f855 3b04 	ldr.w	r3, [r5], #4
 800797a:	4798      	blx	r3
 800797c:	3601      	adds	r6, #1
 800797e:	e7f2      	b.n	8007966 <__libc_init_array+0x1e>
 8007980:	0801cf38 	.word	0x0801cf38
 8007984:	0801cf38 	.word	0x0801cf38
 8007988:	0801cf38 	.word	0x0801cf38
 800798c:	0801cf3c 	.word	0x0801cf3c

08007990 <__retarget_lock_init_recursive>:
 8007990:	4770      	bx	lr

08007992 <__retarget_lock_acquire_recursive>:
 8007992:	4770      	bx	lr

08007994 <__retarget_lock_release_recursive>:
 8007994:	4770      	bx	lr

08007996 <quorem>:
 8007996:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	6903      	ldr	r3, [r0, #16]
 800799c:	690c      	ldr	r4, [r1, #16]
 800799e:	42a3      	cmp	r3, r4
 80079a0:	4607      	mov	r7, r0
 80079a2:	db7e      	blt.n	8007aa2 <quorem+0x10c>
 80079a4:	3c01      	subs	r4, #1
 80079a6:	f101 0814 	add.w	r8, r1, #20
 80079aa:	00a3      	lsls	r3, r4, #2
 80079ac:	f100 0514 	add.w	r5, r0, #20
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079c0:	3301      	adds	r3, #1
 80079c2:	429a      	cmp	r2, r3
 80079c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80079cc:	d32e      	bcc.n	8007a2c <quorem+0x96>
 80079ce:	f04f 0a00 	mov.w	sl, #0
 80079d2:	46c4      	mov	ip, r8
 80079d4:	46ae      	mov	lr, r5
 80079d6:	46d3      	mov	fp, sl
 80079d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079dc:	b298      	uxth	r0, r3
 80079de:	fb06 a000 	mla	r0, r6, r0, sl
 80079e2:	0c02      	lsrs	r2, r0, #16
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	fb06 2303 	mla	r3, r6, r3, r2
 80079ea:	f8de 2000 	ldr.w	r2, [lr]
 80079ee:	b280      	uxth	r0, r0
 80079f0:	b292      	uxth	r2, r2
 80079f2:	1a12      	subs	r2, r2, r0
 80079f4:	445a      	add	r2, fp
 80079f6:	f8de 0000 	ldr.w	r0, [lr]
 80079fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a08:	b292      	uxth	r2, r2
 8007a0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a0e:	45e1      	cmp	r9, ip
 8007a10:	f84e 2b04 	str.w	r2, [lr], #4
 8007a14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a18:	d2de      	bcs.n	80079d8 <quorem+0x42>
 8007a1a:	9b00      	ldr	r3, [sp, #0]
 8007a1c:	58eb      	ldr	r3, [r5, r3]
 8007a1e:	b92b      	cbnz	r3, 8007a2c <quorem+0x96>
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	3b04      	subs	r3, #4
 8007a24:	429d      	cmp	r5, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	d32f      	bcc.n	8007a8a <quorem+0xf4>
 8007a2a:	613c      	str	r4, [r7, #16]
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f001 f979 	bl	8008d24 <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	db25      	blt.n	8007a82 <quorem+0xec>
 8007a36:	4629      	mov	r1, r5
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a3e:	f8d1 c000 	ldr.w	ip, [r1]
 8007a42:	fa1f fe82 	uxth.w	lr, r2
 8007a46:	fa1f f38c 	uxth.w	r3, ip
 8007a4a:	eba3 030e 	sub.w	r3, r3, lr
 8007a4e:	4403      	add	r3, r0
 8007a50:	0c12      	lsrs	r2, r2, #16
 8007a52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a60:	45c1      	cmp	r9, r8
 8007a62:	f841 3b04 	str.w	r3, [r1], #4
 8007a66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a6a:	d2e6      	bcs.n	8007a3a <quorem+0xa4>
 8007a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a74:	b922      	cbnz	r2, 8007a80 <quorem+0xea>
 8007a76:	3b04      	subs	r3, #4
 8007a78:	429d      	cmp	r5, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	d30b      	bcc.n	8007a96 <quorem+0x100>
 8007a7e:	613c      	str	r4, [r7, #16]
 8007a80:	3601      	adds	r6, #1
 8007a82:	4630      	mov	r0, r6
 8007a84:	b003      	add	sp, #12
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	6812      	ldr	r2, [r2, #0]
 8007a8c:	3b04      	subs	r3, #4
 8007a8e:	2a00      	cmp	r2, #0
 8007a90:	d1cb      	bne.n	8007a2a <quorem+0x94>
 8007a92:	3c01      	subs	r4, #1
 8007a94:	e7c6      	b.n	8007a24 <quorem+0x8e>
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	3b04      	subs	r3, #4
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	d1ef      	bne.n	8007a7e <quorem+0xe8>
 8007a9e:	3c01      	subs	r4, #1
 8007aa0:	e7ea      	b.n	8007a78 <quorem+0xe2>
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e7ee      	b.n	8007a84 <quorem+0xee>
	...

08007aa8 <_dtoa_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	69c7      	ldr	r7, [r0, #28]
 8007aae:	b099      	sub	sp, #100	@ 0x64
 8007ab0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ab4:	ec55 4b10 	vmov	r4, r5, d0
 8007ab8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007aba:	9109      	str	r1, [sp, #36]	@ 0x24
 8007abc:	4683      	mov	fp, r0
 8007abe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ac0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ac2:	b97f      	cbnz	r7, 8007ae4 <_dtoa_r+0x3c>
 8007ac4:	2010      	movs	r0, #16
 8007ac6:	f000 fdfd 	bl	80086c4 <malloc>
 8007aca:	4602      	mov	r2, r0
 8007acc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ad0:	b920      	cbnz	r0, 8007adc <_dtoa_r+0x34>
 8007ad2:	4ba7      	ldr	r3, [pc, #668]	@ (8007d70 <_dtoa_r+0x2c8>)
 8007ad4:	21ef      	movs	r1, #239	@ 0xef
 8007ad6:	48a7      	ldr	r0, [pc, #668]	@ (8007d74 <_dtoa_r+0x2cc>)
 8007ad8:	f001 faf6 	bl	80090c8 <__assert_func>
 8007adc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ae0:	6007      	str	r7, [r0, #0]
 8007ae2:	60c7      	str	r7, [r0, #12]
 8007ae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ae8:	6819      	ldr	r1, [r3, #0]
 8007aea:	b159      	cbz	r1, 8007b04 <_dtoa_r+0x5c>
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	604a      	str	r2, [r1, #4]
 8007af0:	2301      	movs	r3, #1
 8007af2:	4093      	lsls	r3, r2
 8007af4:	608b      	str	r3, [r1, #8]
 8007af6:	4658      	mov	r0, fp
 8007af8:	f000 feda 	bl	80088b0 <_Bfree>
 8007afc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	1e2b      	subs	r3, r5, #0
 8007b06:	bfb9      	ittee	lt
 8007b08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b0c:	9303      	strlt	r3, [sp, #12]
 8007b0e:	2300      	movge	r3, #0
 8007b10:	6033      	strge	r3, [r6, #0]
 8007b12:	9f03      	ldr	r7, [sp, #12]
 8007b14:	4b98      	ldr	r3, [pc, #608]	@ (8007d78 <_dtoa_r+0x2d0>)
 8007b16:	bfbc      	itt	lt
 8007b18:	2201      	movlt	r2, #1
 8007b1a:	6032      	strlt	r2, [r6, #0]
 8007b1c:	43bb      	bics	r3, r7
 8007b1e:	d112      	bne.n	8007b46 <_dtoa_r+0x9e>
 8007b20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b2c:	4323      	orrs	r3, r4
 8007b2e:	f000 854d 	beq.w	80085cc <_dtoa_r+0xb24>
 8007b32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d8c <_dtoa_r+0x2e4>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 854f 	beq.w	80085dc <_dtoa_r+0xb34>
 8007b3e:	f10a 0303 	add.w	r3, sl, #3
 8007b42:	f000 bd49 	b.w	80085d8 <_dtoa_r+0xb30>
 8007b46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	ec51 0b17 	vmov	r0, r1, d7
 8007b50:	2300      	movs	r3, #0
 8007b52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b56:	f7f9 f837 	bl	8000bc8 <__aeabi_dcmpeq>
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	b158      	cbz	r0, 8007b76 <_dtoa_r+0xce>
 8007b5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b60:	2301      	movs	r3, #1
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b66:	b113      	cbz	r3, 8007b6e <_dtoa_r+0xc6>
 8007b68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b6a:	4b84      	ldr	r3, [pc, #528]	@ (8007d7c <_dtoa_r+0x2d4>)
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007d90 <_dtoa_r+0x2e8>
 8007b72:	f000 bd33 	b.w	80085dc <_dtoa_r+0xb34>
 8007b76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b7a:	aa16      	add	r2, sp, #88	@ 0x58
 8007b7c:	a917      	add	r1, sp, #92	@ 0x5c
 8007b7e:	4658      	mov	r0, fp
 8007b80:	f001 f980 	bl	8008e84 <__d2b>
 8007b84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b88:	4681      	mov	r9, r0
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	d077      	beq.n	8007c7e <_dtoa_r+0x1d6>
 8007b8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ba0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ba4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ba8:	4619      	mov	r1, r3
 8007baa:	2200      	movs	r2, #0
 8007bac:	4b74      	ldr	r3, [pc, #464]	@ (8007d80 <_dtoa_r+0x2d8>)
 8007bae:	f7f8 fbeb 	bl	8000388 <__aeabi_dsub>
 8007bb2:	a369      	add	r3, pc, #420	@ (adr r3, 8007d58 <_dtoa_r+0x2b0>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 fd9e 	bl	80006f8 <__aeabi_dmul>
 8007bbc:	a368      	add	r3, pc, #416	@ (adr r3, 8007d60 <_dtoa_r+0x2b8>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	f7f8 fbe3 	bl	800038c <__adddf3>
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4630      	mov	r0, r6
 8007bca:	460d      	mov	r5, r1
 8007bcc:	f7f8 fd2a 	bl	8000624 <__aeabi_i2d>
 8007bd0:	a365      	add	r3, pc, #404	@ (adr r3, 8007d68 <_dtoa_r+0x2c0>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fd8f 	bl	80006f8 <__aeabi_dmul>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4620      	mov	r0, r4
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7f8 fbd3 	bl	800038c <__adddf3>
 8007be6:	4604      	mov	r4, r0
 8007be8:	460d      	mov	r5, r1
 8007bea:	f7f9 f835 	bl	8000c58 <__aeabi_d2iz>
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	f7f8 fff0 	bl	8000bdc <__aeabi_dcmplt>
 8007bfc:	b140      	cbz	r0, 8007c10 <_dtoa_r+0x168>
 8007bfe:	4638      	mov	r0, r7
 8007c00:	f7f8 fd10 	bl	8000624 <__aeabi_i2d>
 8007c04:	4622      	mov	r2, r4
 8007c06:	462b      	mov	r3, r5
 8007c08:	f7f8 ffde 	bl	8000bc8 <__aeabi_dcmpeq>
 8007c0c:	b900      	cbnz	r0, 8007c10 <_dtoa_r+0x168>
 8007c0e:	3f01      	subs	r7, #1
 8007c10:	2f16      	cmp	r7, #22
 8007c12:	d851      	bhi.n	8007cb8 <_dtoa_r+0x210>
 8007c14:	4b5b      	ldr	r3, [pc, #364]	@ (8007d84 <_dtoa_r+0x2dc>)
 8007c16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c22:	f7f8 ffdb 	bl	8000bdc <__aeabi_dcmplt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d048      	beq.n	8007cbc <_dtoa_r+0x214>
 8007c2a:	3f01      	subs	r7, #1
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c32:	1b9b      	subs	r3, r3, r6
 8007c34:	1e5a      	subs	r2, r3, #1
 8007c36:	bf44      	itt	mi
 8007c38:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c3c:	2300      	movmi	r3, #0
 8007c3e:	9208      	str	r2, [sp, #32]
 8007c40:	bf54      	ite	pl
 8007c42:	f04f 0800 	movpl.w	r8, #0
 8007c46:	9308      	strmi	r3, [sp, #32]
 8007c48:	2f00      	cmp	r7, #0
 8007c4a:	db39      	blt.n	8007cc0 <_dtoa_r+0x218>
 8007c4c:	9b08      	ldr	r3, [sp, #32]
 8007c4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c50:	443b      	add	r3, r7
 8007c52:	9308      	str	r3, [sp, #32]
 8007c54:	2300      	movs	r3, #0
 8007c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5a:	2b09      	cmp	r3, #9
 8007c5c:	d864      	bhi.n	8007d28 <_dtoa_r+0x280>
 8007c5e:	2b05      	cmp	r3, #5
 8007c60:	bfc4      	itt	gt
 8007c62:	3b04      	subgt	r3, #4
 8007c64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c68:	f1a3 0302 	sub.w	r3, r3, #2
 8007c6c:	bfcc      	ite	gt
 8007c6e:	2400      	movgt	r4, #0
 8007c70:	2401      	movle	r4, #1
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d863      	bhi.n	8007d3e <_dtoa_r+0x296>
 8007c76:	e8df f003 	tbb	[pc, r3]
 8007c7a:	372a      	.short	0x372a
 8007c7c:	5535      	.short	0x5535
 8007c7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007c82:	441e      	add	r6, r3
 8007c84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	bfc1      	itttt	gt
 8007c8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c90:	409f      	lslgt	r7, r3
 8007c92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c9a:	bfd6      	itet	le
 8007c9c:	f1c3 0320 	rsble	r3, r3, #32
 8007ca0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ca4:	fa04 f003 	lslle.w	r0, r4, r3
 8007ca8:	f7f8 fcac 	bl	8000604 <__aeabi_ui2d>
 8007cac:	2201      	movs	r2, #1
 8007cae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cb2:	3e01      	subs	r6, #1
 8007cb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007cb6:	e777      	b.n	8007ba8 <_dtoa_r+0x100>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e7b8      	b.n	8007c2e <_dtoa_r+0x186>
 8007cbc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007cbe:	e7b7      	b.n	8007c30 <_dtoa_r+0x188>
 8007cc0:	427b      	negs	r3, r7
 8007cc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	eba8 0807 	sub.w	r8, r8, r7
 8007cca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ccc:	e7c4      	b.n	8007c58 <_dtoa_r+0x1b0>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dc35      	bgt.n	8007d44 <_dtoa_r+0x29c>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	9307      	str	r3, [sp, #28]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ce2:	e00b      	b.n	8007cfc <_dtoa_r+0x254>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e7f3      	b.n	8007cd0 <_dtoa_r+0x228>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cee:	18fb      	adds	r3, r7, r3
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	9307      	str	r3, [sp, #28]
 8007cf8:	bfb8      	it	lt
 8007cfa:	2301      	movlt	r3, #1
 8007cfc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d00:	2100      	movs	r1, #0
 8007d02:	2204      	movs	r2, #4
 8007d04:	f102 0514 	add.w	r5, r2, #20
 8007d08:	429d      	cmp	r5, r3
 8007d0a:	d91f      	bls.n	8007d4c <_dtoa_r+0x2a4>
 8007d0c:	6041      	str	r1, [r0, #4]
 8007d0e:	4658      	mov	r0, fp
 8007d10:	f000 fd8e 	bl	8008830 <_Balloc>
 8007d14:	4682      	mov	sl, r0
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d13c      	bne.n	8007d94 <_dtoa_r+0x2ec>
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8007d88 <_dtoa_r+0x2e0>)
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d22:	e6d8      	b.n	8007ad6 <_dtoa_r+0x2e>
 8007d24:	2301      	movs	r3, #1
 8007d26:	e7e0      	b.n	8007cea <_dtoa_r+0x242>
 8007d28:	2401      	movs	r4, #1
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	9307      	str	r3, [sp, #28]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2312      	movs	r3, #18
 8007d3c:	e7d0      	b.n	8007ce0 <_dtoa_r+0x238>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d42:	e7f5      	b.n	8007d30 <_dtoa_r+0x288>
 8007d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	9307      	str	r3, [sp, #28]
 8007d4a:	e7d7      	b.n	8007cfc <_dtoa_r+0x254>
 8007d4c:	3101      	adds	r1, #1
 8007d4e:	0052      	lsls	r2, r2, #1
 8007d50:	e7d8      	b.n	8007d04 <_dtoa_r+0x25c>
 8007d52:	bf00      	nop
 8007d54:	f3af 8000 	nop.w
 8007d58:	636f4361 	.word	0x636f4361
 8007d5c:	3fd287a7 	.word	0x3fd287a7
 8007d60:	8b60c8b3 	.word	0x8b60c8b3
 8007d64:	3fc68a28 	.word	0x3fc68a28
 8007d68:	509f79fb 	.word	0x509f79fb
 8007d6c:	3fd34413 	.word	0x3fd34413
 8007d70:	0801cc01 	.word	0x0801cc01
 8007d74:	0801cc18 	.word	0x0801cc18
 8007d78:	7ff00000 	.word	0x7ff00000
 8007d7c:	0801cbd1 	.word	0x0801cbd1
 8007d80:	3ff80000 	.word	0x3ff80000
 8007d84:	0801cd10 	.word	0x0801cd10
 8007d88:	0801cc70 	.word	0x0801cc70
 8007d8c:	0801cbfd 	.word	0x0801cbfd
 8007d90:	0801cbd0 	.word	0x0801cbd0
 8007d94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d98:	6018      	str	r0, [r3, #0]
 8007d9a:	9b07      	ldr	r3, [sp, #28]
 8007d9c:	2b0e      	cmp	r3, #14
 8007d9e:	f200 80a4 	bhi.w	8007eea <_dtoa_r+0x442>
 8007da2:	2c00      	cmp	r4, #0
 8007da4:	f000 80a1 	beq.w	8007eea <_dtoa_r+0x442>
 8007da8:	2f00      	cmp	r7, #0
 8007daa:	dd33      	ble.n	8007e14 <_dtoa_r+0x36c>
 8007dac:	4bad      	ldr	r3, [pc, #692]	@ (8008064 <_dtoa_r+0x5bc>)
 8007dae:	f007 020f 	and.w	r2, r7, #15
 8007db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db6:	ed93 7b00 	vldr	d7, [r3]
 8007dba:	05f8      	lsls	r0, r7, #23
 8007dbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007dc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007dc4:	d516      	bpl.n	8007df4 <_dtoa_r+0x34c>
 8007dc6:	4ba8      	ldr	r3, [pc, #672]	@ (8008068 <_dtoa_r+0x5c0>)
 8007dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dd0:	f7f8 fdbc 	bl	800094c <__aeabi_ddiv>
 8007dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd8:	f004 040f 	and.w	r4, r4, #15
 8007ddc:	2603      	movs	r6, #3
 8007dde:	4da2      	ldr	r5, [pc, #648]	@ (8008068 <_dtoa_r+0x5c0>)
 8007de0:	b954      	cbnz	r4, 8007df8 <_dtoa_r+0x350>
 8007de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dea:	f7f8 fdaf 	bl	800094c <__aeabi_ddiv>
 8007dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df2:	e028      	b.n	8007e46 <_dtoa_r+0x39e>
 8007df4:	2602      	movs	r6, #2
 8007df6:	e7f2      	b.n	8007dde <_dtoa_r+0x336>
 8007df8:	07e1      	lsls	r1, r4, #31
 8007dfa:	d508      	bpl.n	8007e0e <_dtoa_r+0x366>
 8007dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e04:	f7f8 fc78 	bl	80006f8 <__aeabi_dmul>
 8007e08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e0c:	3601      	adds	r6, #1
 8007e0e:	1064      	asrs	r4, r4, #1
 8007e10:	3508      	adds	r5, #8
 8007e12:	e7e5      	b.n	8007de0 <_dtoa_r+0x338>
 8007e14:	f000 80d2 	beq.w	8007fbc <_dtoa_r+0x514>
 8007e18:	427c      	negs	r4, r7
 8007e1a:	4b92      	ldr	r3, [pc, #584]	@ (8008064 <_dtoa_r+0x5bc>)
 8007e1c:	4d92      	ldr	r5, [pc, #584]	@ (8008068 <_dtoa_r+0x5c0>)
 8007e1e:	f004 020f 	and.w	r2, r4, #15
 8007e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e2e:	f7f8 fc63 	bl	80006f8 <__aeabi_dmul>
 8007e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e36:	1124      	asrs	r4, r4, #4
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2602      	movs	r6, #2
 8007e3c:	2c00      	cmp	r4, #0
 8007e3e:	f040 80b2 	bne.w	8007fa6 <_dtoa_r+0x4fe>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1d3      	bne.n	8007dee <_dtoa_r+0x346>
 8007e46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80b7 	beq.w	8007fc0 <_dtoa_r+0x518>
 8007e52:	4b86      	ldr	r3, [pc, #536]	@ (800806c <_dtoa_r+0x5c4>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 febf 	bl	8000bdc <__aeabi_dcmplt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f000 80ae 	beq.w	8007fc0 <_dtoa_r+0x518>
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 80aa 	beq.w	8007fc0 <_dtoa_r+0x518>
 8007e6c:	9b00      	ldr	r3, [sp, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dd37      	ble.n	8007ee2 <_dtoa_r+0x43a>
 8007e72:	1e7b      	subs	r3, r7, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	4620      	mov	r0, r4
 8007e78:	4b7d      	ldr	r3, [pc, #500]	@ (8008070 <_dtoa_r+0x5c8>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	f7f8 fc3b 	bl	80006f8 <__aeabi_dmul>
 8007e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e86:	9c00      	ldr	r4, [sp, #0]
 8007e88:	3601      	adds	r6, #1
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7f8 fbca 	bl	8000624 <__aeabi_i2d>
 8007e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e94:	f7f8 fc30 	bl	80006f8 <__aeabi_dmul>
 8007e98:	4b76      	ldr	r3, [pc, #472]	@ (8008074 <_dtoa_r+0x5cc>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f7f8 fa76 	bl	800038c <__adddf3>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	f040 808d 	bne.w	8007fc6 <_dtoa_r+0x51e>
 8007eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb0:	4b71      	ldr	r3, [pc, #452]	@ (8008078 <_dtoa_r+0x5d0>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f7f8 fa68 	bl	8000388 <__aeabi_dsub>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	4633      	mov	r3, r6
 8007ec4:	f7f8 fea8 	bl	8000c18 <__aeabi_dcmpgt>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	f040 828b 	bne.w	80083e4 <_dtoa_r+0x93c>
 8007ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ed8:	f7f8 fe80 	bl	8000bdc <__aeabi_dcmplt>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f040 8128 	bne.w	8008132 <_dtoa_r+0x68a>
 8007ee2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ee6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007eea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f2c0 815a 	blt.w	80081a6 <_dtoa_r+0x6fe>
 8007ef2:	2f0e      	cmp	r7, #14
 8007ef4:	f300 8157 	bgt.w	80081a6 <_dtoa_r+0x6fe>
 8007ef8:	4b5a      	ldr	r3, [pc, #360]	@ (8008064 <_dtoa_r+0x5bc>)
 8007efa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007efe:	ed93 7b00 	vldr	d7, [r3]
 8007f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	ed8d 7b00 	vstr	d7, [sp]
 8007f0a:	da03      	bge.n	8007f14 <_dtoa_r+0x46c>
 8007f0c:	9b07      	ldr	r3, [sp, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f340 8101 	ble.w	8008116 <_dtoa_r+0x66e>
 8007f14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f18:	4656      	mov	r6, sl
 8007f1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	f7f8 fd13 	bl	800094c <__aeabi_ddiv>
 8007f26:	f7f8 fe97 	bl	8000c58 <__aeabi_d2iz>
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	f7f8 fb7a 	bl	8000624 <__aeabi_i2d>
 8007f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f34:	f7f8 fbe0 	bl	80006f8 <__aeabi_dmul>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f44:	f7f8 fa20 	bl	8000388 <__aeabi_dsub>
 8007f48:	f806 4b01 	strb.w	r4, [r6], #1
 8007f4c:	9d07      	ldr	r5, [sp, #28]
 8007f4e:	eba6 040a 	sub.w	r4, r6, sl
 8007f52:	42a5      	cmp	r5, r4
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	f040 8117 	bne.w	800818a <_dtoa_r+0x6e2>
 8007f5c:	f7f8 fa16 	bl	800038c <__adddf3>
 8007f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f64:	4604      	mov	r4, r0
 8007f66:	460d      	mov	r5, r1
 8007f68:	f7f8 fe56 	bl	8000c18 <__aeabi_dcmpgt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f040 80f9 	bne.w	8008164 <_dtoa_r+0x6bc>
 8007f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7f8 fe25 	bl	8000bc8 <__aeabi_dcmpeq>
 8007f7e:	b118      	cbz	r0, 8007f88 <_dtoa_r+0x4e0>
 8007f80:	f018 0f01 	tst.w	r8, #1
 8007f84:	f040 80ee 	bne.w	8008164 <_dtoa_r+0x6bc>
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4658      	mov	r0, fp
 8007f8c:	f000 fc90 	bl	80088b0 <_Bfree>
 8007f90:	2300      	movs	r3, #0
 8007f92:	7033      	strb	r3, [r6, #0]
 8007f94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f96:	3701      	adds	r7, #1
 8007f98:	601f      	str	r7, [r3, #0]
 8007f9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 831d 	beq.w	80085dc <_dtoa_r+0xb34>
 8007fa2:	601e      	str	r6, [r3, #0]
 8007fa4:	e31a      	b.n	80085dc <_dtoa_r+0xb34>
 8007fa6:	07e2      	lsls	r2, r4, #31
 8007fa8:	d505      	bpl.n	8007fb6 <_dtoa_r+0x50e>
 8007faa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fae:	f7f8 fba3 	bl	80006f8 <__aeabi_dmul>
 8007fb2:	3601      	adds	r6, #1
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	1064      	asrs	r4, r4, #1
 8007fb8:	3508      	adds	r5, #8
 8007fba:	e73f      	b.n	8007e3c <_dtoa_r+0x394>
 8007fbc:	2602      	movs	r6, #2
 8007fbe:	e742      	b.n	8007e46 <_dtoa_r+0x39e>
 8007fc0:	9c07      	ldr	r4, [sp, #28]
 8007fc2:	9704      	str	r7, [sp, #16]
 8007fc4:	e761      	b.n	8007e8a <_dtoa_r+0x3e2>
 8007fc6:	4b27      	ldr	r3, [pc, #156]	@ (8008064 <_dtoa_r+0x5bc>)
 8007fc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fd2:	4454      	add	r4, sl
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d053      	beq.n	8008080 <_dtoa_r+0x5d8>
 8007fd8:	4928      	ldr	r1, [pc, #160]	@ (800807c <_dtoa_r+0x5d4>)
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f7f8 fcb6 	bl	800094c <__aeabi_ddiv>
 8007fe0:	4633      	mov	r3, r6
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	f7f8 f9d0 	bl	8000388 <__aeabi_dsub>
 8007fe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fec:	4656      	mov	r6, sl
 8007fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff2:	f7f8 fe31 	bl	8000c58 <__aeabi_d2iz>
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	f7f8 fb14 	bl	8000624 <__aeabi_i2d>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008004:	f7f8 f9c0 	bl	8000388 <__aeabi_dsub>
 8008008:	3530      	adds	r5, #48	@ 0x30
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008012:	f806 5b01 	strb.w	r5, [r6], #1
 8008016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800801a:	f7f8 fddf 	bl	8000bdc <__aeabi_dcmplt>
 800801e:	2800      	cmp	r0, #0
 8008020:	d171      	bne.n	8008106 <_dtoa_r+0x65e>
 8008022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008026:	4911      	ldr	r1, [pc, #68]	@ (800806c <_dtoa_r+0x5c4>)
 8008028:	2000      	movs	r0, #0
 800802a:	f7f8 f9ad 	bl	8000388 <__aeabi_dsub>
 800802e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008032:	f7f8 fdd3 	bl	8000bdc <__aeabi_dcmplt>
 8008036:	2800      	cmp	r0, #0
 8008038:	f040 8095 	bne.w	8008166 <_dtoa_r+0x6be>
 800803c:	42a6      	cmp	r6, r4
 800803e:	f43f af50 	beq.w	8007ee2 <_dtoa_r+0x43a>
 8008042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008046:	4b0a      	ldr	r3, [pc, #40]	@ (8008070 <_dtoa_r+0x5c8>)
 8008048:	2200      	movs	r2, #0
 800804a:	f7f8 fb55 	bl	80006f8 <__aeabi_dmul>
 800804e:	4b08      	ldr	r3, [pc, #32]	@ (8008070 <_dtoa_r+0x5c8>)
 8008050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008054:	2200      	movs	r2, #0
 8008056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800805a:	f7f8 fb4d 	bl	80006f8 <__aeabi_dmul>
 800805e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008062:	e7c4      	b.n	8007fee <_dtoa_r+0x546>
 8008064:	0801cd10 	.word	0x0801cd10
 8008068:	0801cce8 	.word	0x0801cce8
 800806c:	3ff00000 	.word	0x3ff00000
 8008070:	40240000 	.word	0x40240000
 8008074:	401c0000 	.word	0x401c0000
 8008078:	40140000 	.word	0x40140000
 800807c:	3fe00000 	.word	0x3fe00000
 8008080:	4631      	mov	r1, r6
 8008082:	4628      	mov	r0, r5
 8008084:	f7f8 fb38 	bl	80006f8 <__aeabi_dmul>
 8008088:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800808c:	9415      	str	r4, [sp, #84]	@ 0x54
 800808e:	4656      	mov	r6, sl
 8008090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008094:	f7f8 fde0 	bl	8000c58 <__aeabi_d2iz>
 8008098:	4605      	mov	r5, r0
 800809a:	f7f8 fac3 	bl	8000624 <__aeabi_i2d>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a6:	f7f8 f96f 	bl	8000388 <__aeabi_dsub>
 80080aa:	3530      	adds	r5, #48	@ 0x30
 80080ac:	f806 5b01 	strb.w	r5, [r6], #1
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	42a6      	cmp	r6, r4
 80080b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	d124      	bne.n	800810a <_dtoa_r+0x662>
 80080c0:	4bac      	ldr	r3, [pc, #688]	@ (8008374 <_dtoa_r+0x8cc>)
 80080c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080c6:	f7f8 f961 	bl	800038c <__adddf3>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d2:	f7f8 fda1 	bl	8000c18 <__aeabi_dcmpgt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d145      	bne.n	8008166 <_dtoa_r+0x6be>
 80080da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080de:	49a5      	ldr	r1, [pc, #660]	@ (8008374 <_dtoa_r+0x8cc>)
 80080e0:	2000      	movs	r0, #0
 80080e2:	f7f8 f951 	bl	8000388 <__aeabi_dsub>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ee:	f7f8 fd75 	bl	8000bdc <__aeabi_dcmplt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f43f aef5 	beq.w	8007ee2 <_dtoa_r+0x43a>
 80080f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80080fa:	1e73      	subs	r3, r6, #1
 80080fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80080fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008102:	2b30      	cmp	r3, #48	@ 0x30
 8008104:	d0f8      	beq.n	80080f8 <_dtoa_r+0x650>
 8008106:	9f04      	ldr	r7, [sp, #16]
 8008108:	e73e      	b.n	8007f88 <_dtoa_r+0x4e0>
 800810a:	4b9b      	ldr	r3, [pc, #620]	@ (8008378 <_dtoa_r+0x8d0>)
 800810c:	f7f8 faf4 	bl	80006f8 <__aeabi_dmul>
 8008110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008114:	e7bc      	b.n	8008090 <_dtoa_r+0x5e8>
 8008116:	d10c      	bne.n	8008132 <_dtoa_r+0x68a>
 8008118:	4b98      	ldr	r3, [pc, #608]	@ (800837c <_dtoa_r+0x8d4>)
 800811a:	2200      	movs	r2, #0
 800811c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008120:	f7f8 faea 	bl	80006f8 <__aeabi_dmul>
 8008124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008128:	f7f8 fd6c 	bl	8000c04 <__aeabi_dcmpge>
 800812c:	2800      	cmp	r0, #0
 800812e:	f000 8157 	beq.w	80083e0 <_dtoa_r+0x938>
 8008132:	2400      	movs	r4, #0
 8008134:	4625      	mov	r5, r4
 8008136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008138:	43db      	mvns	r3, r3
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	4656      	mov	r6, sl
 800813e:	2700      	movs	r7, #0
 8008140:	4621      	mov	r1, r4
 8008142:	4658      	mov	r0, fp
 8008144:	f000 fbb4 	bl	80088b0 <_Bfree>
 8008148:	2d00      	cmp	r5, #0
 800814a:	d0dc      	beq.n	8008106 <_dtoa_r+0x65e>
 800814c:	b12f      	cbz	r7, 800815a <_dtoa_r+0x6b2>
 800814e:	42af      	cmp	r7, r5
 8008150:	d003      	beq.n	800815a <_dtoa_r+0x6b2>
 8008152:	4639      	mov	r1, r7
 8008154:	4658      	mov	r0, fp
 8008156:	f000 fbab 	bl	80088b0 <_Bfree>
 800815a:	4629      	mov	r1, r5
 800815c:	4658      	mov	r0, fp
 800815e:	f000 fba7 	bl	80088b0 <_Bfree>
 8008162:	e7d0      	b.n	8008106 <_dtoa_r+0x65e>
 8008164:	9704      	str	r7, [sp, #16]
 8008166:	4633      	mov	r3, r6
 8008168:	461e      	mov	r6, r3
 800816a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800816e:	2a39      	cmp	r2, #57	@ 0x39
 8008170:	d107      	bne.n	8008182 <_dtoa_r+0x6da>
 8008172:	459a      	cmp	sl, r3
 8008174:	d1f8      	bne.n	8008168 <_dtoa_r+0x6c0>
 8008176:	9a04      	ldr	r2, [sp, #16]
 8008178:	3201      	adds	r2, #1
 800817a:	9204      	str	r2, [sp, #16]
 800817c:	2230      	movs	r2, #48	@ 0x30
 800817e:	f88a 2000 	strb.w	r2, [sl]
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	3201      	adds	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	e7bd      	b.n	8008106 <_dtoa_r+0x65e>
 800818a:	4b7b      	ldr	r3, [pc, #492]	@ (8008378 <_dtoa_r+0x8d0>)
 800818c:	2200      	movs	r2, #0
 800818e:	f7f8 fab3 	bl	80006f8 <__aeabi_dmul>
 8008192:	2200      	movs	r2, #0
 8008194:	2300      	movs	r3, #0
 8008196:	4604      	mov	r4, r0
 8008198:	460d      	mov	r5, r1
 800819a:	f7f8 fd15 	bl	8000bc8 <__aeabi_dcmpeq>
 800819e:	2800      	cmp	r0, #0
 80081a0:	f43f aebb 	beq.w	8007f1a <_dtoa_r+0x472>
 80081a4:	e6f0      	b.n	8007f88 <_dtoa_r+0x4e0>
 80081a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	f000 80db 	beq.w	8008364 <_dtoa_r+0x8bc>
 80081ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b0:	2a01      	cmp	r2, #1
 80081b2:	f300 80bf 	bgt.w	8008334 <_dtoa_r+0x88c>
 80081b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	f000 80b7 	beq.w	800832c <_dtoa_r+0x884>
 80081be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081c4:	4646      	mov	r6, r8
 80081c6:	9a08      	ldr	r2, [sp, #32]
 80081c8:	2101      	movs	r1, #1
 80081ca:	441a      	add	r2, r3
 80081cc:	4658      	mov	r0, fp
 80081ce:	4498      	add	r8, r3
 80081d0:	9208      	str	r2, [sp, #32]
 80081d2:	f000 fc21 	bl	8008a18 <__i2b>
 80081d6:	4605      	mov	r5, r0
 80081d8:	b15e      	cbz	r6, 80081f2 <_dtoa_r+0x74a>
 80081da:	9b08      	ldr	r3, [sp, #32]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	dd08      	ble.n	80081f2 <_dtoa_r+0x74a>
 80081e0:	42b3      	cmp	r3, r6
 80081e2:	9a08      	ldr	r2, [sp, #32]
 80081e4:	bfa8      	it	ge
 80081e6:	4633      	movge	r3, r6
 80081e8:	eba8 0803 	sub.w	r8, r8, r3
 80081ec:	1af6      	subs	r6, r6, r3
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	9308      	str	r3, [sp, #32]
 80081f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081f4:	b1f3      	cbz	r3, 8008234 <_dtoa_r+0x78c>
 80081f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80b7 	beq.w	800836c <_dtoa_r+0x8c4>
 80081fe:	b18c      	cbz	r4, 8008224 <_dtoa_r+0x77c>
 8008200:	4629      	mov	r1, r5
 8008202:	4622      	mov	r2, r4
 8008204:	4658      	mov	r0, fp
 8008206:	f000 fcc7 	bl	8008b98 <__pow5mult>
 800820a:	464a      	mov	r2, r9
 800820c:	4601      	mov	r1, r0
 800820e:	4605      	mov	r5, r0
 8008210:	4658      	mov	r0, fp
 8008212:	f000 fc17 	bl	8008a44 <__multiply>
 8008216:	4649      	mov	r1, r9
 8008218:	9004      	str	r0, [sp, #16]
 800821a:	4658      	mov	r0, fp
 800821c:	f000 fb48 	bl	80088b0 <_Bfree>
 8008220:	9b04      	ldr	r3, [sp, #16]
 8008222:	4699      	mov	r9, r3
 8008224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008226:	1b1a      	subs	r2, r3, r4
 8008228:	d004      	beq.n	8008234 <_dtoa_r+0x78c>
 800822a:	4649      	mov	r1, r9
 800822c:	4658      	mov	r0, fp
 800822e:	f000 fcb3 	bl	8008b98 <__pow5mult>
 8008232:	4681      	mov	r9, r0
 8008234:	2101      	movs	r1, #1
 8008236:	4658      	mov	r0, fp
 8008238:	f000 fbee 	bl	8008a18 <__i2b>
 800823c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800823e:	4604      	mov	r4, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 81cf 	beq.w	80085e4 <_dtoa_r+0xb3c>
 8008246:	461a      	mov	r2, r3
 8008248:	4601      	mov	r1, r0
 800824a:	4658      	mov	r0, fp
 800824c:	f000 fca4 	bl	8008b98 <__pow5mult>
 8008250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008252:	2b01      	cmp	r3, #1
 8008254:	4604      	mov	r4, r0
 8008256:	f300 8095 	bgt.w	8008384 <_dtoa_r+0x8dc>
 800825a:	9b02      	ldr	r3, [sp, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 8087 	bne.w	8008370 <_dtoa_r+0x8c8>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008268:	2b00      	cmp	r3, #0
 800826a:	f040 8089 	bne.w	8008380 <_dtoa_r+0x8d8>
 800826e:	9b03      	ldr	r3, [sp, #12]
 8008270:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008274:	0d1b      	lsrs	r3, r3, #20
 8008276:	051b      	lsls	r3, r3, #20
 8008278:	b12b      	cbz	r3, 8008286 <_dtoa_r+0x7de>
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	3301      	adds	r3, #1
 800827e:	9308      	str	r3, [sp, #32]
 8008280:	f108 0801 	add.w	r8, r8, #1
 8008284:	2301      	movs	r3, #1
 8008286:	930a      	str	r3, [sp, #40]	@ 0x28
 8008288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 81b0 	beq.w	80085f0 <_dtoa_r+0xb48>
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008296:	6918      	ldr	r0, [r3, #16]
 8008298:	f000 fb72 	bl	8008980 <__hi0bits>
 800829c:	f1c0 0020 	rsb	r0, r0, #32
 80082a0:	9b08      	ldr	r3, [sp, #32]
 80082a2:	4418      	add	r0, r3
 80082a4:	f010 001f 	ands.w	r0, r0, #31
 80082a8:	d077      	beq.n	800839a <_dtoa_r+0x8f2>
 80082aa:	f1c0 0320 	rsb	r3, r0, #32
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	dd6b      	ble.n	800838a <_dtoa_r+0x8e2>
 80082b2:	9b08      	ldr	r3, [sp, #32]
 80082b4:	f1c0 001c 	rsb	r0, r0, #28
 80082b8:	4403      	add	r3, r0
 80082ba:	4480      	add	r8, r0
 80082bc:	4406      	add	r6, r0
 80082be:	9308      	str	r3, [sp, #32]
 80082c0:	f1b8 0f00 	cmp.w	r8, #0
 80082c4:	dd05      	ble.n	80082d2 <_dtoa_r+0x82a>
 80082c6:	4649      	mov	r1, r9
 80082c8:	4642      	mov	r2, r8
 80082ca:	4658      	mov	r0, fp
 80082cc:	f000 fcbe 	bl	8008c4c <__lshift>
 80082d0:	4681      	mov	r9, r0
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	dd05      	ble.n	80082e4 <_dtoa_r+0x83c>
 80082d8:	4621      	mov	r1, r4
 80082da:	461a      	mov	r2, r3
 80082dc:	4658      	mov	r0, fp
 80082de:	f000 fcb5 	bl	8008c4c <__lshift>
 80082e2:	4604      	mov	r4, r0
 80082e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d059      	beq.n	800839e <_dtoa_r+0x8f6>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4648      	mov	r0, r9
 80082ee:	f000 fd19 	bl	8008d24 <__mcmp>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	da53      	bge.n	800839e <_dtoa_r+0x8f6>
 80082f6:	1e7b      	subs	r3, r7, #1
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	4649      	mov	r1, r9
 80082fc:	2300      	movs	r3, #0
 80082fe:	220a      	movs	r2, #10
 8008300:	4658      	mov	r0, fp
 8008302:	f000 faf7 	bl	80088f4 <__multadd>
 8008306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008308:	4681      	mov	r9, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 8172 	beq.w	80085f4 <_dtoa_r+0xb4c>
 8008310:	2300      	movs	r3, #0
 8008312:	4629      	mov	r1, r5
 8008314:	220a      	movs	r2, #10
 8008316:	4658      	mov	r0, fp
 8008318:	f000 faec 	bl	80088f4 <__multadd>
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	4605      	mov	r5, r0
 8008322:	dc67      	bgt.n	80083f4 <_dtoa_r+0x94c>
 8008324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008326:	2b02      	cmp	r3, #2
 8008328:	dc41      	bgt.n	80083ae <_dtoa_r+0x906>
 800832a:	e063      	b.n	80083f4 <_dtoa_r+0x94c>
 800832c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800832e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008332:	e746      	b.n	80081c2 <_dtoa_r+0x71a>
 8008334:	9b07      	ldr	r3, [sp, #28]
 8008336:	1e5c      	subs	r4, r3, #1
 8008338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800833a:	42a3      	cmp	r3, r4
 800833c:	bfbf      	itttt	lt
 800833e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008340:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008342:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008344:	1ae3      	sublt	r3, r4, r3
 8008346:	bfb4      	ite	lt
 8008348:	18d2      	addlt	r2, r2, r3
 800834a:	1b1c      	subge	r4, r3, r4
 800834c:	9b07      	ldr	r3, [sp, #28]
 800834e:	bfbc      	itt	lt
 8008350:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008352:	2400      	movlt	r4, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	bfb5      	itete	lt
 8008358:	eba8 0603 	sublt.w	r6, r8, r3
 800835c:	9b07      	ldrge	r3, [sp, #28]
 800835e:	2300      	movlt	r3, #0
 8008360:	4646      	movge	r6, r8
 8008362:	e730      	b.n	80081c6 <_dtoa_r+0x71e>
 8008364:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008366:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008368:	4646      	mov	r6, r8
 800836a:	e735      	b.n	80081d8 <_dtoa_r+0x730>
 800836c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800836e:	e75c      	b.n	800822a <_dtoa_r+0x782>
 8008370:	2300      	movs	r3, #0
 8008372:	e788      	b.n	8008286 <_dtoa_r+0x7de>
 8008374:	3fe00000 	.word	0x3fe00000
 8008378:	40240000 	.word	0x40240000
 800837c:	40140000 	.word	0x40140000
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	e780      	b.n	8008286 <_dtoa_r+0x7de>
 8008384:	2300      	movs	r3, #0
 8008386:	930a      	str	r3, [sp, #40]	@ 0x28
 8008388:	e782      	b.n	8008290 <_dtoa_r+0x7e8>
 800838a:	d099      	beq.n	80082c0 <_dtoa_r+0x818>
 800838c:	9a08      	ldr	r2, [sp, #32]
 800838e:	331c      	adds	r3, #28
 8008390:	441a      	add	r2, r3
 8008392:	4498      	add	r8, r3
 8008394:	441e      	add	r6, r3
 8008396:	9208      	str	r2, [sp, #32]
 8008398:	e792      	b.n	80082c0 <_dtoa_r+0x818>
 800839a:	4603      	mov	r3, r0
 800839c:	e7f6      	b.n	800838c <_dtoa_r+0x8e4>
 800839e:	9b07      	ldr	r3, [sp, #28]
 80083a0:	9704      	str	r7, [sp, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dc20      	bgt.n	80083e8 <_dtoa_r+0x940>
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	dd1e      	ble.n	80083ec <_dtoa_r+0x944>
 80083ae:	9b00      	ldr	r3, [sp, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f47f aec0 	bne.w	8008136 <_dtoa_r+0x68e>
 80083b6:	4621      	mov	r1, r4
 80083b8:	2205      	movs	r2, #5
 80083ba:	4658      	mov	r0, fp
 80083bc:	f000 fa9a 	bl	80088f4 <__multadd>
 80083c0:	4601      	mov	r1, r0
 80083c2:	4604      	mov	r4, r0
 80083c4:	4648      	mov	r0, r9
 80083c6:	f000 fcad 	bl	8008d24 <__mcmp>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	f77f aeb3 	ble.w	8008136 <_dtoa_r+0x68e>
 80083d0:	4656      	mov	r6, sl
 80083d2:	2331      	movs	r3, #49	@ 0x31
 80083d4:	f806 3b01 	strb.w	r3, [r6], #1
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	3301      	adds	r3, #1
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	e6ae      	b.n	800813e <_dtoa_r+0x696>
 80083e0:	9c07      	ldr	r4, [sp, #28]
 80083e2:	9704      	str	r7, [sp, #16]
 80083e4:	4625      	mov	r5, r4
 80083e6:	e7f3      	b.n	80083d0 <_dtoa_r+0x928>
 80083e8:	9b07      	ldr	r3, [sp, #28]
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8104 	beq.w	80085fc <_dtoa_r+0xb54>
 80083f4:	2e00      	cmp	r6, #0
 80083f6:	dd05      	ble.n	8008404 <_dtoa_r+0x95c>
 80083f8:	4629      	mov	r1, r5
 80083fa:	4632      	mov	r2, r6
 80083fc:	4658      	mov	r0, fp
 80083fe:	f000 fc25 	bl	8008c4c <__lshift>
 8008402:	4605      	mov	r5, r0
 8008404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008406:	2b00      	cmp	r3, #0
 8008408:	d05a      	beq.n	80084c0 <_dtoa_r+0xa18>
 800840a:	6869      	ldr	r1, [r5, #4]
 800840c:	4658      	mov	r0, fp
 800840e:	f000 fa0f 	bl	8008830 <_Balloc>
 8008412:	4606      	mov	r6, r0
 8008414:	b928      	cbnz	r0, 8008422 <_dtoa_r+0x97a>
 8008416:	4b84      	ldr	r3, [pc, #528]	@ (8008628 <_dtoa_r+0xb80>)
 8008418:	4602      	mov	r2, r0
 800841a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800841e:	f7ff bb5a 	b.w	8007ad6 <_dtoa_r+0x2e>
 8008422:	692a      	ldr	r2, [r5, #16]
 8008424:	3202      	adds	r2, #2
 8008426:	0092      	lsls	r2, r2, #2
 8008428:	f105 010c 	add.w	r1, r5, #12
 800842c:	300c      	adds	r0, #12
 800842e:	f000 fe3d 	bl	80090ac <memcpy>
 8008432:	2201      	movs	r2, #1
 8008434:	4631      	mov	r1, r6
 8008436:	4658      	mov	r0, fp
 8008438:	f000 fc08 	bl	8008c4c <__lshift>
 800843c:	f10a 0301 	add.w	r3, sl, #1
 8008440:	9307      	str	r3, [sp, #28]
 8008442:	9b00      	ldr	r3, [sp, #0]
 8008444:	4453      	add	r3, sl
 8008446:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008448:	9b02      	ldr	r3, [sp, #8]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	462f      	mov	r7, r5
 8008450:	930a      	str	r3, [sp, #40]	@ 0x28
 8008452:	4605      	mov	r5, r0
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	4621      	mov	r1, r4
 8008458:	3b01      	subs	r3, #1
 800845a:	4648      	mov	r0, r9
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	f7ff fa9a 	bl	8007996 <quorem>
 8008462:	4639      	mov	r1, r7
 8008464:	9002      	str	r0, [sp, #8]
 8008466:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800846a:	4648      	mov	r0, r9
 800846c:	f000 fc5a 	bl	8008d24 <__mcmp>
 8008470:	462a      	mov	r2, r5
 8008472:	9008      	str	r0, [sp, #32]
 8008474:	4621      	mov	r1, r4
 8008476:	4658      	mov	r0, fp
 8008478:	f000 fc70 	bl	8008d5c <__mdiff>
 800847c:	68c2      	ldr	r2, [r0, #12]
 800847e:	4606      	mov	r6, r0
 8008480:	bb02      	cbnz	r2, 80084c4 <_dtoa_r+0xa1c>
 8008482:	4601      	mov	r1, r0
 8008484:	4648      	mov	r0, r9
 8008486:	f000 fc4d 	bl	8008d24 <__mcmp>
 800848a:	4602      	mov	r2, r0
 800848c:	4631      	mov	r1, r6
 800848e:	4658      	mov	r0, fp
 8008490:	920e      	str	r2, [sp, #56]	@ 0x38
 8008492:	f000 fa0d 	bl	80088b0 <_Bfree>
 8008496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008498:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800849a:	9e07      	ldr	r6, [sp, #28]
 800849c:	ea43 0102 	orr.w	r1, r3, r2
 80084a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084a2:	4319      	orrs	r1, r3
 80084a4:	d110      	bne.n	80084c8 <_dtoa_r+0xa20>
 80084a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084aa:	d029      	beq.n	8008500 <_dtoa_r+0xa58>
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	dd02      	ble.n	80084b8 <_dtoa_r+0xa10>
 80084b2:	9b02      	ldr	r3, [sp, #8]
 80084b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084b8:	9b00      	ldr	r3, [sp, #0]
 80084ba:	f883 8000 	strb.w	r8, [r3]
 80084be:	e63f      	b.n	8008140 <_dtoa_r+0x698>
 80084c0:	4628      	mov	r0, r5
 80084c2:	e7bb      	b.n	800843c <_dtoa_r+0x994>
 80084c4:	2201      	movs	r2, #1
 80084c6:	e7e1      	b.n	800848c <_dtoa_r+0x9e4>
 80084c8:	9b08      	ldr	r3, [sp, #32]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	db04      	blt.n	80084d8 <_dtoa_r+0xa30>
 80084ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084d0:	430b      	orrs	r3, r1
 80084d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084d4:	430b      	orrs	r3, r1
 80084d6:	d120      	bne.n	800851a <_dtoa_r+0xa72>
 80084d8:	2a00      	cmp	r2, #0
 80084da:	dded      	ble.n	80084b8 <_dtoa_r+0xa10>
 80084dc:	4649      	mov	r1, r9
 80084de:	2201      	movs	r2, #1
 80084e0:	4658      	mov	r0, fp
 80084e2:	f000 fbb3 	bl	8008c4c <__lshift>
 80084e6:	4621      	mov	r1, r4
 80084e8:	4681      	mov	r9, r0
 80084ea:	f000 fc1b 	bl	8008d24 <__mcmp>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	dc03      	bgt.n	80084fa <_dtoa_r+0xa52>
 80084f2:	d1e1      	bne.n	80084b8 <_dtoa_r+0xa10>
 80084f4:	f018 0f01 	tst.w	r8, #1
 80084f8:	d0de      	beq.n	80084b8 <_dtoa_r+0xa10>
 80084fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084fe:	d1d8      	bne.n	80084b2 <_dtoa_r+0xa0a>
 8008500:	9a00      	ldr	r2, [sp, #0]
 8008502:	2339      	movs	r3, #57	@ 0x39
 8008504:	7013      	strb	r3, [r2, #0]
 8008506:	4633      	mov	r3, r6
 8008508:	461e      	mov	r6, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008510:	2a39      	cmp	r2, #57	@ 0x39
 8008512:	d052      	beq.n	80085ba <_dtoa_r+0xb12>
 8008514:	3201      	adds	r2, #1
 8008516:	701a      	strb	r2, [r3, #0]
 8008518:	e612      	b.n	8008140 <_dtoa_r+0x698>
 800851a:	2a00      	cmp	r2, #0
 800851c:	dd07      	ble.n	800852e <_dtoa_r+0xa86>
 800851e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008522:	d0ed      	beq.n	8008500 <_dtoa_r+0xa58>
 8008524:	9a00      	ldr	r2, [sp, #0]
 8008526:	f108 0301 	add.w	r3, r8, #1
 800852a:	7013      	strb	r3, [r2, #0]
 800852c:	e608      	b.n	8008140 <_dtoa_r+0x698>
 800852e:	9b07      	ldr	r3, [sp, #28]
 8008530:	9a07      	ldr	r2, [sp, #28]
 8008532:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008538:	4293      	cmp	r3, r2
 800853a:	d028      	beq.n	800858e <_dtoa_r+0xae6>
 800853c:	4649      	mov	r1, r9
 800853e:	2300      	movs	r3, #0
 8008540:	220a      	movs	r2, #10
 8008542:	4658      	mov	r0, fp
 8008544:	f000 f9d6 	bl	80088f4 <__multadd>
 8008548:	42af      	cmp	r7, r5
 800854a:	4681      	mov	r9, r0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	f04f 020a 	mov.w	r2, #10
 8008554:	4639      	mov	r1, r7
 8008556:	4658      	mov	r0, fp
 8008558:	d107      	bne.n	800856a <_dtoa_r+0xac2>
 800855a:	f000 f9cb 	bl	80088f4 <__multadd>
 800855e:	4607      	mov	r7, r0
 8008560:	4605      	mov	r5, r0
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	3301      	adds	r3, #1
 8008566:	9307      	str	r3, [sp, #28]
 8008568:	e774      	b.n	8008454 <_dtoa_r+0x9ac>
 800856a:	f000 f9c3 	bl	80088f4 <__multadd>
 800856e:	4629      	mov	r1, r5
 8008570:	4607      	mov	r7, r0
 8008572:	2300      	movs	r3, #0
 8008574:	220a      	movs	r2, #10
 8008576:	4658      	mov	r0, fp
 8008578:	f000 f9bc 	bl	80088f4 <__multadd>
 800857c:	4605      	mov	r5, r0
 800857e:	e7f0      	b.n	8008562 <_dtoa_r+0xaba>
 8008580:	9b00      	ldr	r3, [sp, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	bfcc      	ite	gt
 8008586:	461e      	movgt	r6, r3
 8008588:	2601      	movle	r6, #1
 800858a:	4456      	add	r6, sl
 800858c:	2700      	movs	r7, #0
 800858e:	4649      	mov	r1, r9
 8008590:	2201      	movs	r2, #1
 8008592:	4658      	mov	r0, fp
 8008594:	f000 fb5a 	bl	8008c4c <__lshift>
 8008598:	4621      	mov	r1, r4
 800859a:	4681      	mov	r9, r0
 800859c:	f000 fbc2 	bl	8008d24 <__mcmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	dcb0      	bgt.n	8008506 <_dtoa_r+0xa5e>
 80085a4:	d102      	bne.n	80085ac <_dtoa_r+0xb04>
 80085a6:	f018 0f01 	tst.w	r8, #1
 80085aa:	d1ac      	bne.n	8008506 <_dtoa_r+0xa5e>
 80085ac:	4633      	mov	r3, r6
 80085ae:	461e      	mov	r6, r3
 80085b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085b4:	2a30      	cmp	r2, #48	@ 0x30
 80085b6:	d0fa      	beq.n	80085ae <_dtoa_r+0xb06>
 80085b8:	e5c2      	b.n	8008140 <_dtoa_r+0x698>
 80085ba:	459a      	cmp	sl, r3
 80085bc:	d1a4      	bne.n	8008508 <_dtoa_r+0xa60>
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	3301      	adds	r3, #1
 80085c2:	9304      	str	r3, [sp, #16]
 80085c4:	2331      	movs	r3, #49	@ 0x31
 80085c6:	f88a 3000 	strb.w	r3, [sl]
 80085ca:	e5b9      	b.n	8008140 <_dtoa_r+0x698>
 80085cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800862c <_dtoa_r+0xb84>
 80085d2:	b11b      	cbz	r3, 80085dc <_dtoa_r+0xb34>
 80085d4:	f10a 0308 	add.w	r3, sl, #8
 80085d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	4650      	mov	r0, sl
 80085de:	b019      	add	sp, #100	@ 0x64
 80085e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	f77f ae37 	ble.w	800825a <_dtoa_r+0x7b2>
 80085ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f0:	2001      	movs	r0, #1
 80085f2:	e655      	b.n	80082a0 <_dtoa_r+0x7f8>
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f77f aed6 	ble.w	80083a8 <_dtoa_r+0x900>
 80085fc:	4656      	mov	r6, sl
 80085fe:	4621      	mov	r1, r4
 8008600:	4648      	mov	r0, r9
 8008602:	f7ff f9c8 	bl	8007996 <quorem>
 8008606:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800860a:	f806 8b01 	strb.w	r8, [r6], #1
 800860e:	9b00      	ldr	r3, [sp, #0]
 8008610:	eba6 020a 	sub.w	r2, r6, sl
 8008614:	4293      	cmp	r3, r2
 8008616:	ddb3      	ble.n	8008580 <_dtoa_r+0xad8>
 8008618:	4649      	mov	r1, r9
 800861a:	2300      	movs	r3, #0
 800861c:	220a      	movs	r2, #10
 800861e:	4658      	mov	r0, fp
 8008620:	f000 f968 	bl	80088f4 <__multadd>
 8008624:	4681      	mov	r9, r0
 8008626:	e7ea      	b.n	80085fe <_dtoa_r+0xb56>
 8008628:	0801cc70 	.word	0x0801cc70
 800862c:	0801cbf4 	.word	0x0801cbf4

08008630 <_free_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4605      	mov	r5, r0
 8008634:	2900      	cmp	r1, #0
 8008636:	d041      	beq.n	80086bc <_free_r+0x8c>
 8008638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800863c:	1f0c      	subs	r4, r1, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	bfb8      	it	lt
 8008642:	18e4      	addlt	r4, r4, r3
 8008644:	f000 f8e8 	bl	8008818 <__malloc_lock>
 8008648:	4a1d      	ldr	r2, [pc, #116]	@ (80086c0 <_free_r+0x90>)
 800864a:	6813      	ldr	r3, [r2, #0]
 800864c:	b933      	cbnz	r3, 800865c <_free_r+0x2c>
 800864e:	6063      	str	r3, [r4, #4]
 8008650:	6014      	str	r4, [r2, #0]
 8008652:	4628      	mov	r0, r5
 8008654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008658:	f000 b8e4 	b.w	8008824 <__malloc_unlock>
 800865c:	42a3      	cmp	r3, r4
 800865e:	d908      	bls.n	8008672 <_free_r+0x42>
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	1821      	adds	r1, r4, r0
 8008664:	428b      	cmp	r3, r1
 8008666:	bf01      	itttt	eq
 8008668:	6819      	ldreq	r1, [r3, #0]
 800866a:	685b      	ldreq	r3, [r3, #4]
 800866c:	1809      	addeq	r1, r1, r0
 800866e:	6021      	streq	r1, [r4, #0]
 8008670:	e7ed      	b.n	800864e <_free_r+0x1e>
 8008672:	461a      	mov	r2, r3
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	b10b      	cbz	r3, 800867c <_free_r+0x4c>
 8008678:	42a3      	cmp	r3, r4
 800867a:	d9fa      	bls.n	8008672 <_free_r+0x42>
 800867c:	6811      	ldr	r1, [r2, #0]
 800867e:	1850      	adds	r0, r2, r1
 8008680:	42a0      	cmp	r0, r4
 8008682:	d10b      	bne.n	800869c <_free_r+0x6c>
 8008684:	6820      	ldr	r0, [r4, #0]
 8008686:	4401      	add	r1, r0
 8008688:	1850      	adds	r0, r2, r1
 800868a:	4283      	cmp	r3, r0
 800868c:	6011      	str	r1, [r2, #0]
 800868e:	d1e0      	bne.n	8008652 <_free_r+0x22>
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	6053      	str	r3, [r2, #4]
 8008696:	4408      	add	r0, r1
 8008698:	6010      	str	r0, [r2, #0]
 800869a:	e7da      	b.n	8008652 <_free_r+0x22>
 800869c:	d902      	bls.n	80086a4 <_free_r+0x74>
 800869e:	230c      	movs	r3, #12
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	e7d6      	b.n	8008652 <_free_r+0x22>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	1821      	adds	r1, r4, r0
 80086a8:	428b      	cmp	r3, r1
 80086aa:	bf04      	itt	eq
 80086ac:	6819      	ldreq	r1, [r3, #0]
 80086ae:	685b      	ldreq	r3, [r3, #4]
 80086b0:	6063      	str	r3, [r4, #4]
 80086b2:	bf04      	itt	eq
 80086b4:	1809      	addeq	r1, r1, r0
 80086b6:	6021      	streq	r1, [r4, #0]
 80086b8:	6054      	str	r4, [r2, #4]
 80086ba:	e7ca      	b.n	8008652 <_free_r+0x22>
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
 80086be:	bf00      	nop
 80086c0:	20005960 	.word	0x20005960

080086c4 <malloc>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	@ (80086d0 <malloc+0xc>)
 80086c6:	4601      	mov	r1, r0
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	f000 b825 	b.w	8008718 <_malloc_r>
 80086ce:	bf00      	nop
 80086d0:	20000018 	.word	0x20000018

080086d4 <sbrk_aligned>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008714 <sbrk_aligned+0x40>)
 80086d8:	460c      	mov	r4, r1
 80086da:	6831      	ldr	r1, [r6, #0]
 80086dc:	4605      	mov	r5, r0
 80086de:	b911      	cbnz	r1, 80086e6 <sbrk_aligned+0x12>
 80086e0:	f000 fcd4 	bl	800908c <_sbrk_r>
 80086e4:	6030      	str	r0, [r6, #0]
 80086e6:	4621      	mov	r1, r4
 80086e8:	4628      	mov	r0, r5
 80086ea:	f000 fccf 	bl	800908c <_sbrk_r>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d103      	bne.n	80086fa <sbrk_aligned+0x26>
 80086f2:	f04f 34ff 	mov.w	r4, #4294967295
 80086f6:	4620      	mov	r0, r4
 80086f8:	bd70      	pop	{r4, r5, r6, pc}
 80086fa:	1cc4      	adds	r4, r0, #3
 80086fc:	f024 0403 	bic.w	r4, r4, #3
 8008700:	42a0      	cmp	r0, r4
 8008702:	d0f8      	beq.n	80086f6 <sbrk_aligned+0x22>
 8008704:	1a21      	subs	r1, r4, r0
 8008706:	4628      	mov	r0, r5
 8008708:	f000 fcc0 	bl	800908c <_sbrk_r>
 800870c:	3001      	adds	r0, #1
 800870e:	d1f2      	bne.n	80086f6 <sbrk_aligned+0x22>
 8008710:	e7ef      	b.n	80086f2 <sbrk_aligned+0x1e>
 8008712:	bf00      	nop
 8008714:	2000595c 	.word	0x2000595c

08008718 <_malloc_r>:
 8008718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800871c:	1ccd      	adds	r5, r1, #3
 800871e:	f025 0503 	bic.w	r5, r5, #3
 8008722:	3508      	adds	r5, #8
 8008724:	2d0c      	cmp	r5, #12
 8008726:	bf38      	it	cc
 8008728:	250c      	movcc	r5, #12
 800872a:	2d00      	cmp	r5, #0
 800872c:	4606      	mov	r6, r0
 800872e:	db01      	blt.n	8008734 <_malloc_r+0x1c>
 8008730:	42a9      	cmp	r1, r5
 8008732:	d904      	bls.n	800873e <_malloc_r+0x26>
 8008734:	230c      	movs	r3, #12
 8008736:	6033      	str	r3, [r6, #0]
 8008738:	2000      	movs	r0, #0
 800873a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800873e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008814 <_malloc_r+0xfc>
 8008742:	f000 f869 	bl	8008818 <__malloc_lock>
 8008746:	f8d8 3000 	ldr.w	r3, [r8]
 800874a:	461c      	mov	r4, r3
 800874c:	bb44      	cbnz	r4, 80087a0 <_malloc_r+0x88>
 800874e:	4629      	mov	r1, r5
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff ffbf 	bl	80086d4 <sbrk_aligned>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	4604      	mov	r4, r0
 800875a:	d158      	bne.n	800880e <_malloc_r+0xf6>
 800875c:	f8d8 4000 	ldr.w	r4, [r8]
 8008760:	4627      	mov	r7, r4
 8008762:	2f00      	cmp	r7, #0
 8008764:	d143      	bne.n	80087ee <_malloc_r+0xd6>
 8008766:	2c00      	cmp	r4, #0
 8008768:	d04b      	beq.n	8008802 <_malloc_r+0xea>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	4639      	mov	r1, r7
 800876e:	4630      	mov	r0, r6
 8008770:	eb04 0903 	add.w	r9, r4, r3
 8008774:	f000 fc8a 	bl	800908c <_sbrk_r>
 8008778:	4581      	cmp	r9, r0
 800877a:	d142      	bne.n	8008802 <_malloc_r+0xea>
 800877c:	6821      	ldr	r1, [r4, #0]
 800877e:	1a6d      	subs	r5, r5, r1
 8008780:	4629      	mov	r1, r5
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff ffa6 	bl	80086d4 <sbrk_aligned>
 8008788:	3001      	adds	r0, #1
 800878a:	d03a      	beq.n	8008802 <_malloc_r+0xea>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	442b      	add	r3, r5
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	f8d8 3000 	ldr.w	r3, [r8]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	bb62      	cbnz	r2, 80087f4 <_malloc_r+0xdc>
 800879a:	f8c8 7000 	str.w	r7, [r8]
 800879e:	e00f      	b.n	80087c0 <_malloc_r+0xa8>
 80087a0:	6822      	ldr	r2, [r4, #0]
 80087a2:	1b52      	subs	r2, r2, r5
 80087a4:	d420      	bmi.n	80087e8 <_malloc_r+0xd0>
 80087a6:	2a0b      	cmp	r2, #11
 80087a8:	d917      	bls.n	80087da <_malloc_r+0xc2>
 80087aa:	1961      	adds	r1, r4, r5
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	6025      	str	r5, [r4, #0]
 80087b0:	bf18      	it	ne
 80087b2:	6059      	strne	r1, [r3, #4]
 80087b4:	6863      	ldr	r3, [r4, #4]
 80087b6:	bf08      	it	eq
 80087b8:	f8c8 1000 	streq.w	r1, [r8]
 80087bc:	5162      	str	r2, [r4, r5]
 80087be:	604b      	str	r3, [r1, #4]
 80087c0:	4630      	mov	r0, r6
 80087c2:	f000 f82f 	bl	8008824 <__malloc_unlock>
 80087c6:	f104 000b 	add.w	r0, r4, #11
 80087ca:	1d23      	adds	r3, r4, #4
 80087cc:	f020 0007 	bic.w	r0, r0, #7
 80087d0:	1ac2      	subs	r2, r0, r3
 80087d2:	bf1c      	itt	ne
 80087d4:	1a1b      	subne	r3, r3, r0
 80087d6:	50a3      	strne	r3, [r4, r2]
 80087d8:	e7af      	b.n	800873a <_malloc_r+0x22>
 80087da:	6862      	ldr	r2, [r4, #4]
 80087dc:	42a3      	cmp	r3, r4
 80087de:	bf0c      	ite	eq
 80087e0:	f8c8 2000 	streq.w	r2, [r8]
 80087e4:	605a      	strne	r2, [r3, #4]
 80087e6:	e7eb      	b.n	80087c0 <_malloc_r+0xa8>
 80087e8:	4623      	mov	r3, r4
 80087ea:	6864      	ldr	r4, [r4, #4]
 80087ec:	e7ae      	b.n	800874c <_malloc_r+0x34>
 80087ee:	463c      	mov	r4, r7
 80087f0:	687f      	ldr	r7, [r7, #4]
 80087f2:	e7b6      	b.n	8008762 <_malloc_r+0x4a>
 80087f4:	461a      	mov	r2, r3
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	d1fb      	bne.n	80087f4 <_malloc_r+0xdc>
 80087fc:	2300      	movs	r3, #0
 80087fe:	6053      	str	r3, [r2, #4]
 8008800:	e7de      	b.n	80087c0 <_malloc_r+0xa8>
 8008802:	230c      	movs	r3, #12
 8008804:	6033      	str	r3, [r6, #0]
 8008806:	4630      	mov	r0, r6
 8008808:	f000 f80c 	bl	8008824 <__malloc_unlock>
 800880c:	e794      	b.n	8008738 <_malloc_r+0x20>
 800880e:	6005      	str	r5, [r0, #0]
 8008810:	e7d6      	b.n	80087c0 <_malloc_r+0xa8>
 8008812:	bf00      	nop
 8008814:	20005960 	.word	0x20005960

08008818 <__malloc_lock>:
 8008818:	4801      	ldr	r0, [pc, #4]	@ (8008820 <__malloc_lock+0x8>)
 800881a:	f7ff b8ba 	b.w	8007992 <__retarget_lock_acquire_recursive>
 800881e:	bf00      	nop
 8008820:	20005958 	.word	0x20005958

08008824 <__malloc_unlock>:
 8008824:	4801      	ldr	r0, [pc, #4]	@ (800882c <__malloc_unlock+0x8>)
 8008826:	f7ff b8b5 	b.w	8007994 <__retarget_lock_release_recursive>
 800882a:	bf00      	nop
 800882c:	20005958 	.word	0x20005958

08008830 <_Balloc>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	69c6      	ldr	r6, [r0, #28]
 8008834:	4604      	mov	r4, r0
 8008836:	460d      	mov	r5, r1
 8008838:	b976      	cbnz	r6, 8008858 <_Balloc+0x28>
 800883a:	2010      	movs	r0, #16
 800883c:	f7ff ff42 	bl	80086c4 <malloc>
 8008840:	4602      	mov	r2, r0
 8008842:	61e0      	str	r0, [r4, #28]
 8008844:	b920      	cbnz	r0, 8008850 <_Balloc+0x20>
 8008846:	4b18      	ldr	r3, [pc, #96]	@ (80088a8 <_Balloc+0x78>)
 8008848:	4818      	ldr	r0, [pc, #96]	@ (80088ac <_Balloc+0x7c>)
 800884a:	216b      	movs	r1, #107	@ 0x6b
 800884c:	f000 fc3c 	bl	80090c8 <__assert_func>
 8008850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008854:	6006      	str	r6, [r0, #0]
 8008856:	60c6      	str	r6, [r0, #12]
 8008858:	69e6      	ldr	r6, [r4, #28]
 800885a:	68f3      	ldr	r3, [r6, #12]
 800885c:	b183      	cbz	r3, 8008880 <_Balloc+0x50>
 800885e:	69e3      	ldr	r3, [r4, #28]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008866:	b9b8      	cbnz	r0, 8008898 <_Balloc+0x68>
 8008868:	2101      	movs	r1, #1
 800886a:	fa01 f605 	lsl.w	r6, r1, r5
 800886e:	1d72      	adds	r2, r6, #5
 8008870:	0092      	lsls	r2, r2, #2
 8008872:	4620      	mov	r0, r4
 8008874:	f000 fc46 	bl	8009104 <_calloc_r>
 8008878:	b160      	cbz	r0, 8008894 <_Balloc+0x64>
 800887a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800887e:	e00e      	b.n	800889e <_Balloc+0x6e>
 8008880:	2221      	movs	r2, #33	@ 0x21
 8008882:	2104      	movs	r1, #4
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fc3d 	bl	8009104 <_calloc_r>
 800888a:	69e3      	ldr	r3, [r4, #28]
 800888c:	60f0      	str	r0, [r6, #12]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e4      	bne.n	800885e <_Balloc+0x2e>
 8008894:	2000      	movs	r0, #0
 8008896:	bd70      	pop	{r4, r5, r6, pc}
 8008898:	6802      	ldr	r2, [r0, #0]
 800889a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800889e:	2300      	movs	r3, #0
 80088a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088a4:	e7f7      	b.n	8008896 <_Balloc+0x66>
 80088a6:	bf00      	nop
 80088a8:	0801cc01 	.word	0x0801cc01
 80088ac:	0801cc81 	.word	0x0801cc81

080088b0 <_Bfree>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	69c6      	ldr	r6, [r0, #28]
 80088b4:	4605      	mov	r5, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	b976      	cbnz	r6, 80088d8 <_Bfree+0x28>
 80088ba:	2010      	movs	r0, #16
 80088bc:	f7ff ff02 	bl	80086c4 <malloc>
 80088c0:	4602      	mov	r2, r0
 80088c2:	61e8      	str	r0, [r5, #28]
 80088c4:	b920      	cbnz	r0, 80088d0 <_Bfree+0x20>
 80088c6:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <_Bfree+0x3c>)
 80088c8:	4809      	ldr	r0, [pc, #36]	@ (80088f0 <_Bfree+0x40>)
 80088ca:	218f      	movs	r1, #143	@ 0x8f
 80088cc:	f000 fbfc 	bl	80090c8 <__assert_func>
 80088d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088d4:	6006      	str	r6, [r0, #0]
 80088d6:	60c6      	str	r6, [r0, #12]
 80088d8:	b13c      	cbz	r4, 80088ea <_Bfree+0x3a>
 80088da:	69eb      	ldr	r3, [r5, #28]
 80088dc:	6862      	ldr	r2, [r4, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088e4:	6021      	str	r1, [r4, #0]
 80088e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	0801cc01 	.word	0x0801cc01
 80088f0:	0801cc81 	.word	0x0801cc81

080088f4 <__multadd>:
 80088f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f8:	690d      	ldr	r5, [r1, #16]
 80088fa:	4607      	mov	r7, r0
 80088fc:	460c      	mov	r4, r1
 80088fe:	461e      	mov	r6, r3
 8008900:	f101 0c14 	add.w	ip, r1, #20
 8008904:	2000      	movs	r0, #0
 8008906:	f8dc 3000 	ldr.w	r3, [ip]
 800890a:	b299      	uxth	r1, r3
 800890c:	fb02 6101 	mla	r1, r2, r1, r6
 8008910:	0c1e      	lsrs	r6, r3, #16
 8008912:	0c0b      	lsrs	r3, r1, #16
 8008914:	fb02 3306 	mla	r3, r2, r6, r3
 8008918:	b289      	uxth	r1, r1
 800891a:	3001      	adds	r0, #1
 800891c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008920:	4285      	cmp	r5, r0
 8008922:	f84c 1b04 	str.w	r1, [ip], #4
 8008926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800892a:	dcec      	bgt.n	8008906 <__multadd+0x12>
 800892c:	b30e      	cbz	r6, 8008972 <__multadd+0x7e>
 800892e:	68a3      	ldr	r3, [r4, #8]
 8008930:	42ab      	cmp	r3, r5
 8008932:	dc19      	bgt.n	8008968 <__multadd+0x74>
 8008934:	6861      	ldr	r1, [r4, #4]
 8008936:	4638      	mov	r0, r7
 8008938:	3101      	adds	r1, #1
 800893a:	f7ff ff79 	bl	8008830 <_Balloc>
 800893e:	4680      	mov	r8, r0
 8008940:	b928      	cbnz	r0, 800894e <__multadd+0x5a>
 8008942:	4602      	mov	r2, r0
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <__multadd+0x84>)
 8008946:	480d      	ldr	r0, [pc, #52]	@ (800897c <__multadd+0x88>)
 8008948:	21ba      	movs	r1, #186	@ 0xba
 800894a:	f000 fbbd 	bl	80090c8 <__assert_func>
 800894e:	6922      	ldr	r2, [r4, #16]
 8008950:	3202      	adds	r2, #2
 8008952:	f104 010c 	add.w	r1, r4, #12
 8008956:	0092      	lsls	r2, r2, #2
 8008958:	300c      	adds	r0, #12
 800895a:	f000 fba7 	bl	80090ac <memcpy>
 800895e:	4621      	mov	r1, r4
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ffa5 	bl	80088b0 <_Bfree>
 8008966:	4644      	mov	r4, r8
 8008968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800896c:	3501      	adds	r5, #1
 800896e:	615e      	str	r6, [r3, #20]
 8008970:	6125      	str	r5, [r4, #16]
 8008972:	4620      	mov	r0, r4
 8008974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008978:	0801cc70 	.word	0x0801cc70
 800897c:	0801cc81 	.word	0x0801cc81

08008980 <__hi0bits>:
 8008980:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008984:	4603      	mov	r3, r0
 8008986:	bf36      	itet	cc
 8008988:	0403      	lslcc	r3, r0, #16
 800898a:	2000      	movcs	r0, #0
 800898c:	2010      	movcc	r0, #16
 800898e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008992:	bf3c      	itt	cc
 8008994:	021b      	lslcc	r3, r3, #8
 8008996:	3008      	addcc	r0, #8
 8008998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800899c:	bf3c      	itt	cc
 800899e:	011b      	lslcc	r3, r3, #4
 80089a0:	3004      	addcc	r0, #4
 80089a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a6:	bf3c      	itt	cc
 80089a8:	009b      	lslcc	r3, r3, #2
 80089aa:	3002      	addcc	r0, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	db05      	blt.n	80089bc <__hi0bits+0x3c>
 80089b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089b4:	f100 0001 	add.w	r0, r0, #1
 80089b8:	bf08      	it	eq
 80089ba:	2020      	moveq	r0, #32
 80089bc:	4770      	bx	lr

080089be <__lo0bits>:
 80089be:	6803      	ldr	r3, [r0, #0]
 80089c0:	4602      	mov	r2, r0
 80089c2:	f013 0007 	ands.w	r0, r3, #7
 80089c6:	d00b      	beq.n	80089e0 <__lo0bits+0x22>
 80089c8:	07d9      	lsls	r1, r3, #31
 80089ca:	d421      	bmi.n	8008a10 <__lo0bits+0x52>
 80089cc:	0798      	lsls	r0, r3, #30
 80089ce:	bf49      	itett	mi
 80089d0:	085b      	lsrmi	r3, r3, #1
 80089d2:	089b      	lsrpl	r3, r3, #2
 80089d4:	2001      	movmi	r0, #1
 80089d6:	6013      	strmi	r3, [r2, #0]
 80089d8:	bf5c      	itt	pl
 80089da:	6013      	strpl	r3, [r2, #0]
 80089dc:	2002      	movpl	r0, #2
 80089de:	4770      	bx	lr
 80089e0:	b299      	uxth	r1, r3
 80089e2:	b909      	cbnz	r1, 80089e8 <__lo0bits+0x2a>
 80089e4:	0c1b      	lsrs	r3, r3, #16
 80089e6:	2010      	movs	r0, #16
 80089e8:	b2d9      	uxtb	r1, r3
 80089ea:	b909      	cbnz	r1, 80089f0 <__lo0bits+0x32>
 80089ec:	3008      	adds	r0, #8
 80089ee:	0a1b      	lsrs	r3, r3, #8
 80089f0:	0719      	lsls	r1, r3, #28
 80089f2:	bf04      	itt	eq
 80089f4:	091b      	lsreq	r3, r3, #4
 80089f6:	3004      	addeq	r0, #4
 80089f8:	0799      	lsls	r1, r3, #30
 80089fa:	bf04      	itt	eq
 80089fc:	089b      	lsreq	r3, r3, #2
 80089fe:	3002      	addeq	r0, #2
 8008a00:	07d9      	lsls	r1, r3, #31
 8008a02:	d403      	bmi.n	8008a0c <__lo0bits+0x4e>
 8008a04:	085b      	lsrs	r3, r3, #1
 8008a06:	f100 0001 	add.w	r0, r0, #1
 8008a0a:	d003      	beq.n	8008a14 <__lo0bits+0x56>
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	4770      	bx	lr
 8008a10:	2000      	movs	r0, #0
 8008a12:	4770      	bx	lr
 8008a14:	2020      	movs	r0, #32
 8008a16:	4770      	bx	lr

08008a18 <__i2b>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	f7ff ff07 	bl	8008830 <_Balloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	b928      	cbnz	r0, 8008a32 <__i2b+0x1a>
 8008a26:	4b05      	ldr	r3, [pc, #20]	@ (8008a3c <__i2b+0x24>)
 8008a28:	4805      	ldr	r0, [pc, #20]	@ (8008a40 <__i2b+0x28>)
 8008a2a:	f240 1145 	movw	r1, #325	@ 0x145
 8008a2e:	f000 fb4b 	bl	80090c8 <__assert_func>
 8008a32:	2301      	movs	r3, #1
 8008a34:	6144      	str	r4, [r0, #20]
 8008a36:	6103      	str	r3, [r0, #16]
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	bf00      	nop
 8008a3c:	0801cc70 	.word	0x0801cc70
 8008a40:	0801cc81 	.word	0x0801cc81

08008a44 <__multiply>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4614      	mov	r4, r2
 8008a4a:	690a      	ldr	r2, [r1, #16]
 8008a4c:	6923      	ldr	r3, [r4, #16]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	bfa8      	it	ge
 8008a52:	4623      	movge	r3, r4
 8008a54:	460f      	mov	r7, r1
 8008a56:	bfa4      	itt	ge
 8008a58:	460c      	movge	r4, r1
 8008a5a:	461f      	movge	r7, r3
 8008a5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a64:	68a3      	ldr	r3, [r4, #8]
 8008a66:	6861      	ldr	r1, [r4, #4]
 8008a68:	eb0a 0609 	add.w	r6, sl, r9
 8008a6c:	42b3      	cmp	r3, r6
 8008a6e:	b085      	sub	sp, #20
 8008a70:	bfb8      	it	lt
 8008a72:	3101      	addlt	r1, #1
 8008a74:	f7ff fedc 	bl	8008830 <_Balloc>
 8008a78:	b930      	cbnz	r0, 8008a88 <__multiply+0x44>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	4b44      	ldr	r3, [pc, #272]	@ (8008b90 <__multiply+0x14c>)
 8008a7e:	4845      	ldr	r0, [pc, #276]	@ (8008b94 <__multiply+0x150>)
 8008a80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a84:	f000 fb20 	bl	80090c8 <__assert_func>
 8008a88:	f100 0514 	add.w	r5, r0, #20
 8008a8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a90:	462b      	mov	r3, r5
 8008a92:	2200      	movs	r2, #0
 8008a94:	4543      	cmp	r3, r8
 8008a96:	d321      	bcc.n	8008adc <__multiply+0x98>
 8008a98:	f107 0114 	add.w	r1, r7, #20
 8008a9c:	f104 0214 	add.w	r2, r4, #20
 8008aa0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008aa4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008aa8:	9302      	str	r3, [sp, #8]
 8008aaa:	1b13      	subs	r3, r2, r4
 8008aac:	3b15      	subs	r3, #21
 8008aae:	f023 0303 	bic.w	r3, r3, #3
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	f104 0715 	add.w	r7, r4, #21
 8008ab8:	42ba      	cmp	r2, r7
 8008aba:	bf38      	it	cc
 8008abc:	2304      	movcc	r3, #4
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	9b02      	ldr	r3, [sp, #8]
 8008ac2:	9103      	str	r1, [sp, #12]
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	d80c      	bhi.n	8008ae2 <__multiply+0x9e>
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	dd03      	ble.n	8008ad4 <__multiply+0x90>
 8008acc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d05b      	beq.n	8008b8c <__multiply+0x148>
 8008ad4:	6106      	str	r6, [r0, #16]
 8008ad6:	b005      	add	sp, #20
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	f843 2b04 	str.w	r2, [r3], #4
 8008ae0:	e7d8      	b.n	8008a94 <__multiply+0x50>
 8008ae2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ae6:	f1ba 0f00 	cmp.w	sl, #0
 8008aea:	d024      	beq.n	8008b36 <__multiply+0xf2>
 8008aec:	f104 0e14 	add.w	lr, r4, #20
 8008af0:	46a9      	mov	r9, r5
 8008af2:	f04f 0c00 	mov.w	ip, #0
 8008af6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008afa:	f8d9 3000 	ldr.w	r3, [r9]
 8008afe:	fa1f fb87 	uxth.w	fp, r7
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b0c:	f8d9 7000 	ldr.w	r7, [r9]
 8008b10:	4463      	add	r3, ip
 8008b12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b16:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b24:	4572      	cmp	r2, lr
 8008b26:	f849 3b04 	str.w	r3, [r9], #4
 8008b2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b2e:	d8e2      	bhi.n	8008af6 <__multiply+0xb2>
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	f845 c003 	str.w	ip, [r5, r3]
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b3c:	3104      	adds	r1, #4
 8008b3e:	f1b9 0f00 	cmp.w	r9, #0
 8008b42:	d021      	beq.n	8008b88 <__multiply+0x144>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	f104 0c14 	add.w	ip, r4, #20
 8008b4a:	46ae      	mov	lr, r5
 8008b4c:	f04f 0a00 	mov.w	sl, #0
 8008b50:	f8bc b000 	ldrh.w	fp, [ip]
 8008b54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b58:	fb09 770b 	mla	r7, r9, fp, r7
 8008b5c:	4457      	add	r7, sl
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b64:	f84e 3b04 	str.w	r3, [lr], #4
 8008b68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b70:	f8be 3000 	ldrh.w	r3, [lr]
 8008b74:	fb09 330a 	mla	r3, r9, sl, r3
 8008b78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b7c:	4562      	cmp	r2, ip
 8008b7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b82:	d8e5      	bhi.n	8008b50 <__multiply+0x10c>
 8008b84:	9f01      	ldr	r7, [sp, #4]
 8008b86:	51eb      	str	r3, [r5, r7]
 8008b88:	3504      	adds	r5, #4
 8008b8a:	e799      	b.n	8008ac0 <__multiply+0x7c>
 8008b8c:	3e01      	subs	r6, #1
 8008b8e:	e79b      	b.n	8008ac8 <__multiply+0x84>
 8008b90:	0801cc70 	.word	0x0801cc70
 8008b94:	0801cc81 	.word	0x0801cc81

08008b98 <__pow5mult>:
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	4615      	mov	r5, r2
 8008b9e:	f012 0203 	ands.w	r2, r2, #3
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	460e      	mov	r6, r1
 8008ba6:	d007      	beq.n	8008bb8 <__pow5mult+0x20>
 8008ba8:	4c25      	ldr	r4, [pc, #148]	@ (8008c40 <__pow5mult+0xa8>)
 8008baa:	3a01      	subs	r2, #1
 8008bac:	2300      	movs	r3, #0
 8008bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bb2:	f7ff fe9f 	bl	80088f4 <__multadd>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	10ad      	asrs	r5, r5, #2
 8008bba:	d03d      	beq.n	8008c38 <__pow5mult+0xa0>
 8008bbc:	69fc      	ldr	r4, [r7, #28]
 8008bbe:	b97c      	cbnz	r4, 8008be0 <__pow5mult+0x48>
 8008bc0:	2010      	movs	r0, #16
 8008bc2:	f7ff fd7f 	bl	80086c4 <malloc>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	61f8      	str	r0, [r7, #28]
 8008bca:	b928      	cbnz	r0, 8008bd8 <__pow5mult+0x40>
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c44 <__pow5mult+0xac>)
 8008bce:	481e      	ldr	r0, [pc, #120]	@ (8008c48 <__pow5mult+0xb0>)
 8008bd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bd4:	f000 fa78 	bl	80090c8 <__assert_func>
 8008bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bdc:	6004      	str	r4, [r0, #0]
 8008bde:	60c4      	str	r4, [r0, #12]
 8008be0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008be8:	b94c      	cbnz	r4, 8008bfe <__pow5mult+0x66>
 8008bea:	f240 2171 	movw	r1, #625	@ 0x271
 8008bee:	4638      	mov	r0, r7
 8008bf0:	f7ff ff12 	bl	8008a18 <__i2b>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	6003      	str	r3, [r0, #0]
 8008bfe:	f04f 0900 	mov.w	r9, #0
 8008c02:	07eb      	lsls	r3, r5, #31
 8008c04:	d50a      	bpl.n	8008c1c <__pow5mult+0x84>
 8008c06:	4631      	mov	r1, r6
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	f7ff ff1a 	bl	8008a44 <__multiply>
 8008c10:	4631      	mov	r1, r6
 8008c12:	4680      	mov	r8, r0
 8008c14:	4638      	mov	r0, r7
 8008c16:	f7ff fe4b 	bl	80088b0 <_Bfree>
 8008c1a:	4646      	mov	r6, r8
 8008c1c:	106d      	asrs	r5, r5, #1
 8008c1e:	d00b      	beq.n	8008c38 <__pow5mult+0xa0>
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	b938      	cbnz	r0, 8008c34 <__pow5mult+0x9c>
 8008c24:	4622      	mov	r2, r4
 8008c26:	4621      	mov	r1, r4
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f7ff ff0b 	bl	8008a44 <__multiply>
 8008c2e:	6020      	str	r0, [r4, #0]
 8008c30:	f8c0 9000 	str.w	r9, [r0]
 8008c34:	4604      	mov	r4, r0
 8008c36:	e7e4      	b.n	8008c02 <__pow5mult+0x6a>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3e:	bf00      	nop
 8008c40:	0801ccdc 	.word	0x0801ccdc
 8008c44:	0801cc01 	.word	0x0801cc01
 8008c48:	0801cc81 	.word	0x0801cc81

08008c4c <__lshift>:
 8008c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c50:	460c      	mov	r4, r1
 8008c52:	6849      	ldr	r1, [r1, #4]
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c5a:	68a3      	ldr	r3, [r4, #8]
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	4691      	mov	r9, r2
 8008c60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c64:	f108 0601 	add.w	r6, r8, #1
 8008c68:	42b3      	cmp	r3, r6
 8008c6a:	db0b      	blt.n	8008c84 <__lshift+0x38>
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff fddf 	bl	8008830 <_Balloc>
 8008c72:	4605      	mov	r5, r0
 8008c74:	b948      	cbnz	r0, 8008c8a <__lshift+0x3e>
 8008c76:	4602      	mov	r2, r0
 8008c78:	4b28      	ldr	r3, [pc, #160]	@ (8008d1c <__lshift+0xd0>)
 8008c7a:	4829      	ldr	r0, [pc, #164]	@ (8008d20 <__lshift+0xd4>)
 8008c7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c80:	f000 fa22 	bl	80090c8 <__assert_func>
 8008c84:	3101      	adds	r1, #1
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	e7ee      	b.n	8008c68 <__lshift+0x1c>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f100 0114 	add.w	r1, r0, #20
 8008c90:	f100 0210 	add.w	r2, r0, #16
 8008c94:	4618      	mov	r0, r3
 8008c96:	4553      	cmp	r3, sl
 8008c98:	db33      	blt.n	8008d02 <__lshift+0xb6>
 8008c9a:	6920      	ldr	r0, [r4, #16]
 8008c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ca0:	f104 0314 	add.w	r3, r4, #20
 8008ca4:	f019 091f 	ands.w	r9, r9, #31
 8008ca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cb0:	d02b      	beq.n	8008d0a <__lshift+0xbe>
 8008cb2:	f1c9 0e20 	rsb	lr, r9, #32
 8008cb6:	468a      	mov	sl, r1
 8008cb8:	2200      	movs	r2, #0
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	fa00 f009 	lsl.w	r0, r0, r9
 8008cc0:	4310      	orrs	r0, r2
 8008cc2:	f84a 0b04 	str.w	r0, [sl], #4
 8008cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cca:	459c      	cmp	ip, r3
 8008ccc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cd0:	d8f3      	bhi.n	8008cba <__lshift+0x6e>
 8008cd2:	ebac 0304 	sub.w	r3, ip, r4
 8008cd6:	3b15      	subs	r3, #21
 8008cd8:	f023 0303 	bic.w	r3, r3, #3
 8008cdc:	3304      	adds	r3, #4
 8008cde:	f104 0015 	add.w	r0, r4, #21
 8008ce2:	4584      	cmp	ip, r0
 8008ce4:	bf38      	it	cc
 8008ce6:	2304      	movcc	r3, #4
 8008ce8:	50ca      	str	r2, [r1, r3]
 8008cea:	b10a      	cbz	r2, 8008cf0 <__lshift+0xa4>
 8008cec:	f108 0602 	add.w	r6, r8, #2
 8008cf0:	3e01      	subs	r6, #1
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	612e      	str	r6, [r5, #16]
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	f7ff fdda 	bl	80088b0 <_Bfree>
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d06:	3301      	adds	r3, #1
 8008d08:	e7c5      	b.n	8008c96 <__lshift+0x4a>
 8008d0a:	3904      	subs	r1, #4
 8008d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d10:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d14:	459c      	cmp	ip, r3
 8008d16:	d8f9      	bhi.n	8008d0c <__lshift+0xc0>
 8008d18:	e7ea      	b.n	8008cf0 <__lshift+0xa4>
 8008d1a:	bf00      	nop
 8008d1c:	0801cc70 	.word	0x0801cc70
 8008d20:	0801cc81 	.word	0x0801cc81

08008d24 <__mcmp>:
 8008d24:	690a      	ldr	r2, [r1, #16]
 8008d26:	4603      	mov	r3, r0
 8008d28:	6900      	ldr	r0, [r0, #16]
 8008d2a:	1a80      	subs	r0, r0, r2
 8008d2c:	b530      	push	{r4, r5, lr}
 8008d2e:	d10e      	bne.n	8008d4e <__mcmp+0x2a>
 8008d30:	3314      	adds	r3, #20
 8008d32:	3114      	adds	r1, #20
 8008d34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d44:	4295      	cmp	r5, r2
 8008d46:	d003      	beq.n	8008d50 <__mcmp+0x2c>
 8008d48:	d205      	bcs.n	8008d56 <__mcmp+0x32>
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	bd30      	pop	{r4, r5, pc}
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d3f3      	bcc.n	8008d3c <__mcmp+0x18>
 8008d54:	e7fb      	b.n	8008d4e <__mcmp+0x2a>
 8008d56:	2001      	movs	r0, #1
 8008d58:	e7f9      	b.n	8008d4e <__mcmp+0x2a>
	...

08008d5c <__mdiff>:
 8008d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	4689      	mov	r9, r1
 8008d62:	4606      	mov	r6, r0
 8008d64:	4611      	mov	r1, r2
 8008d66:	4648      	mov	r0, r9
 8008d68:	4614      	mov	r4, r2
 8008d6a:	f7ff ffdb 	bl	8008d24 <__mcmp>
 8008d6e:	1e05      	subs	r5, r0, #0
 8008d70:	d112      	bne.n	8008d98 <__mdiff+0x3c>
 8008d72:	4629      	mov	r1, r5
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff fd5b 	bl	8008830 <_Balloc>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	b928      	cbnz	r0, 8008d8a <__mdiff+0x2e>
 8008d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e7c <__mdiff+0x120>)
 8008d80:	f240 2137 	movw	r1, #567	@ 0x237
 8008d84:	483e      	ldr	r0, [pc, #248]	@ (8008e80 <__mdiff+0x124>)
 8008d86:	f000 f99f 	bl	80090c8 <__assert_func>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d90:	4610      	mov	r0, r2
 8008d92:	b003      	add	sp, #12
 8008d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d98:	bfbc      	itt	lt
 8008d9a:	464b      	movlt	r3, r9
 8008d9c:	46a1      	movlt	r9, r4
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008da4:	bfba      	itte	lt
 8008da6:	461c      	movlt	r4, r3
 8008da8:	2501      	movlt	r5, #1
 8008daa:	2500      	movge	r5, #0
 8008dac:	f7ff fd40 	bl	8008830 <_Balloc>
 8008db0:	4602      	mov	r2, r0
 8008db2:	b918      	cbnz	r0, 8008dbc <__mdiff+0x60>
 8008db4:	4b31      	ldr	r3, [pc, #196]	@ (8008e7c <__mdiff+0x120>)
 8008db6:	f240 2145 	movw	r1, #581	@ 0x245
 8008dba:	e7e3      	b.n	8008d84 <__mdiff+0x28>
 8008dbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008dc0:	6926      	ldr	r6, [r4, #16]
 8008dc2:	60c5      	str	r5, [r0, #12]
 8008dc4:	f109 0310 	add.w	r3, r9, #16
 8008dc8:	f109 0514 	add.w	r5, r9, #20
 8008dcc:	f104 0e14 	add.w	lr, r4, #20
 8008dd0:	f100 0b14 	add.w	fp, r0, #20
 8008dd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	46d9      	mov	r9, fp
 8008de0:	f04f 0c00 	mov.w	ip, #0
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	fa1f f38a 	uxth.w	r3, sl
 8008df4:	4619      	mov	r1, r3
 8008df6:	b283      	uxth	r3, r0
 8008df8:	1acb      	subs	r3, r1, r3
 8008dfa:	0c00      	lsrs	r0, r0, #16
 8008dfc:	4463      	add	r3, ip
 8008dfe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e0c:	4576      	cmp	r6, lr
 8008e0e:	f849 3b04 	str.w	r3, [r9], #4
 8008e12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e16:	d8e5      	bhi.n	8008de4 <__mdiff+0x88>
 8008e18:	1b33      	subs	r3, r6, r4
 8008e1a:	3b15      	subs	r3, #21
 8008e1c:	f023 0303 	bic.w	r3, r3, #3
 8008e20:	3415      	adds	r4, #21
 8008e22:	3304      	adds	r3, #4
 8008e24:	42a6      	cmp	r6, r4
 8008e26:	bf38      	it	cc
 8008e28:	2304      	movcc	r3, #4
 8008e2a:	441d      	add	r5, r3
 8008e2c:	445b      	add	r3, fp
 8008e2e:	461e      	mov	r6, r3
 8008e30:	462c      	mov	r4, r5
 8008e32:	4544      	cmp	r4, r8
 8008e34:	d30e      	bcc.n	8008e54 <__mdiff+0xf8>
 8008e36:	f108 0103 	add.w	r1, r8, #3
 8008e3a:	1b49      	subs	r1, r1, r5
 8008e3c:	f021 0103 	bic.w	r1, r1, #3
 8008e40:	3d03      	subs	r5, #3
 8008e42:	45a8      	cmp	r8, r5
 8008e44:	bf38      	it	cc
 8008e46:	2100      	movcc	r1, #0
 8008e48:	440b      	add	r3, r1
 8008e4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e4e:	b191      	cbz	r1, 8008e76 <__mdiff+0x11a>
 8008e50:	6117      	str	r7, [r2, #16]
 8008e52:	e79d      	b.n	8008d90 <__mdiff+0x34>
 8008e54:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e58:	46e6      	mov	lr, ip
 8008e5a:	0c08      	lsrs	r0, r1, #16
 8008e5c:	fa1c fc81 	uxtah	ip, ip, r1
 8008e60:	4471      	add	r1, lr
 8008e62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e66:	b289      	uxth	r1, r1
 8008e68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e6c:	f846 1b04 	str.w	r1, [r6], #4
 8008e70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e74:	e7dd      	b.n	8008e32 <__mdiff+0xd6>
 8008e76:	3f01      	subs	r7, #1
 8008e78:	e7e7      	b.n	8008e4a <__mdiff+0xee>
 8008e7a:	bf00      	nop
 8008e7c:	0801cc70 	.word	0x0801cc70
 8008e80:	0801cc81 	.word	0x0801cc81

08008e84 <__d2b>:
 8008e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e88:	460f      	mov	r7, r1
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	ec59 8b10 	vmov	r8, r9, d0
 8008e90:	4616      	mov	r6, r2
 8008e92:	f7ff fccd 	bl	8008830 <_Balloc>
 8008e96:	4604      	mov	r4, r0
 8008e98:	b930      	cbnz	r0, 8008ea8 <__d2b+0x24>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b23      	ldr	r3, [pc, #140]	@ (8008f2c <__d2b+0xa8>)
 8008e9e:	4824      	ldr	r0, [pc, #144]	@ (8008f30 <__d2b+0xac>)
 8008ea0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ea4:	f000 f910 	bl	80090c8 <__assert_func>
 8008ea8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008eac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008eb0:	b10d      	cbz	r5, 8008eb6 <__d2b+0x32>
 8008eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	f1b8 0300 	subs.w	r3, r8, #0
 8008ebc:	d023      	beq.n	8008f06 <__d2b+0x82>
 8008ebe:	4668      	mov	r0, sp
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	f7ff fd7c 	bl	80089be <__lo0bits>
 8008ec6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008eca:	b1d0      	cbz	r0, 8008f02 <__d2b+0x7e>
 8008ecc:	f1c0 0320 	rsb	r3, r0, #32
 8008ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed4:	430b      	orrs	r3, r1
 8008ed6:	40c2      	lsrs	r2, r0
 8008ed8:	6163      	str	r3, [r4, #20]
 8008eda:	9201      	str	r2, [sp, #4]
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	61a3      	str	r3, [r4, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bf0c      	ite	eq
 8008ee4:	2201      	moveq	r2, #1
 8008ee6:	2202      	movne	r2, #2
 8008ee8:	6122      	str	r2, [r4, #16]
 8008eea:	b1a5      	cbz	r5, 8008f16 <__d2b+0x92>
 8008eec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ef0:	4405      	add	r5, r0
 8008ef2:	603d      	str	r5, [r7, #0]
 8008ef4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ef8:	6030      	str	r0, [r6, #0]
 8008efa:	4620      	mov	r0, r4
 8008efc:	b003      	add	sp, #12
 8008efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f02:	6161      	str	r1, [r4, #20]
 8008f04:	e7ea      	b.n	8008edc <__d2b+0x58>
 8008f06:	a801      	add	r0, sp, #4
 8008f08:	f7ff fd59 	bl	80089be <__lo0bits>
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	6163      	str	r3, [r4, #20]
 8008f10:	3020      	adds	r0, #32
 8008f12:	2201      	movs	r2, #1
 8008f14:	e7e8      	b.n	8008ee8 <__d2b+0x64>
 8008f16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f1e:	6038      	str	r0, [r7, #0]
 8008f20:	6918      	ldr	r0, [r3, #16]
 8008f22:	f7ff fd2d 	bl	8008980 <__hi0bits>
 8008f26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f2a:	e7e5      	b.n	8008ef8 <__d2b+0x74>
 8008f2c:	0801cc70 	.word	0x0801cc70
 8008f30:	0801cc81 	.word	0x0801cc81

08008f34 <__sflush_r>:
 8008f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3c:	0716      	lsls	r6, r2, #28
 8008f3e:	4605      	mov	r5, r0
 8008f40:	460c      	mov	r4, r1
 8008f42:	d454      	bmi.n	8008fee <__sflush_r+0xba>
 8008f44:	684b      	ldr	r3, [r1, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	dc02      	bgt.n	8008f50 <__sflush_r+0x1c>
 8008f4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd48      	ble.n	8008fe2 <__sflush_r+0xae>
 8008f50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f52:	2e00      	cmp	r6, #0
 8008f54:	d045      	beq.n	8008fe2 <__sflush_r+0xae>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f5c:	682f      	ldr	r7, [r5, #0]
 8008f5e:	6a21      	ldr	r1, [r4, #32]
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	d030      	beq.n	8008fc6 <__sflush_r+0x92>
 8008f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	0759      	lsls	r1, r3, #29
 8008f6a:	d505      	bpl.n	8008f78 <__sflush_r+0x44>
 8008f6c:	6863      	ldr	r3, [r4, #4]
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f72:	b10b      	cbz	r3, 8008f78 <__sflush_r+0x44>
 8008f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f76:	1ad2      	subs	r2, r2, r3
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f7c:	6a21      	ldr	r1, [r4, #32]
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b0      	blx	r6
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	d106      	bne.n	8008f96 <__sflush_r+0x62>
 8008f88:	6829      	ldr	r1, [r5, #0]
 8008f8a:	291d      	cmp	r1, #29
 8008f8c:	d82b      	bhi.n	8008fe6 <__sflush_r+0xb2>
 8008f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8009038 <__sflush_r+0x104>)
 8008f90:	410a      	asrs	r2, r1
 8008f92:	07d6      	lsls	r6, r2, #31
 8008f94:	d427      	bmi.n	8008fe6 <__sflush_r+0xb2>
 8008f96:	2200      	movs	r2, #0
 8008f98:	6062      	str	r2, [r4, #4]
 8008f9a:	04d9      	lsls	r1, r3, #19
 8008f9c:	6922      	ldr	r2, [r4, #16]
 8008f9e:	6022      	str	r2, [r4, #0]
 8008fa0:	d504      	bpl.n	8008fac <__sflush_r+0x78>
 8008fa2:	1c42      	adds	r2, r0, #1
 8008fa4:	d101      	bne.n	8008faa <__sflush_r+0x76>
 8008fa6:	682b      	ldr	r3, [r5, #0]
 8008fa8:	b903      	cbnz	r3, 8008fac <__sflush_r+0x78>
 8008faa:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fae:	602f      	str	r7, [r5, #0]
 8008fb0:	b1b9      	cbz	r1, 8008fe2 <__sflush_r+0xae>
 8008fb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	d002      	beq.n	8008fc0 <__sflush_r+0x8c>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f7ff fb38 	bl	8008630 <_free_r>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fc4:	e00d      	b.n	8008fe2 <__sflush_r+0xae>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	4628      	mov	r0, r5
 8008fca:	47b0      	blx	r6
 8008fcc:	4602      	mov	r2, r0
 8008fce:	1c50      	adds	r0, r2, #1
 8008fd0:	d1c9      	bne.n	8008f66 <__sflush_r+0x32>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0c6      	beq.n	8008f66 <__sflush_r+0x32>
 8008fd8:	2b1d      	cmp	r3, #29
 8008fda:	d001      	beq.n	8008fe0 <__sflush_r+0xac>
 8008fdc:	2b16      	cmp	r3, #22
 8008fde:	d11e      	bne.n	800901e <__sflush_r+0xea>
 8008fe0:	602f      	str	r7, [r5, #0]
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e022      	b.n	800902c <__sflush_r+0xf8>
 8008fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fea:	b21b      	sxth	r3, r3
 8008fec:	e01b      	b.n	8009026 <__sflush_r+0xf2>
 8008fee:	690f      	ldr	r7, [r1, #16]
 8008ff0:	2f00      	cmp	r7, #0
 8008ff2:	d0f6      	beq.n	8008fe2 <__sflush_r+0xae>
 8008ff4:	0793      	lsls	r3, r2, #30
 8008ff6:	680e      	ldr	r6, [r1, #0]
 8008ff8:	bf08      	it	eq
 8008ffa:	694b      	ldreq	r3, [r1, #20]
 8008ffc:	600f      	str	r7, [r1, #0]
 8008ffe:	bf18      	it	ne
 8009000:	2300      	movne	r3, #0
 8009002:	eba6 0807 	sub.w	r8, r6, r7
 8009006:	608b      	str	r3, [r1, #8]
 8009008:	f1b8 0f00 	cmp.w	r8, #0
 800900c:	dde9      	ble.n	8008fe2 <__sflush_r+0xae>
 800900e:	6a21      	ldr	r1, [r4, #32]
 8009010:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009012:	4643      	mov	r3, r8
 8009014:	463a      	mov	r2, r7
 8009016:	4628      	mov	r0, r5
 8009018:	47b0      	blx	r6
 800901a:	2800      	cmp	r0, #0
 800901c:	dc08      	bgt.n	8009030 <__sflush_r+0xfc>
 800901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009026:	81a3      	strh	r3, [r4, #12]
 8009028:	f04f 30ff 	mov.w	r0, #4294967295
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	4407      	add	r7, r0
 8009032:	eba8 0800 	sub.w	r8, r8, r0
 8009036:	e7e7      	b.n	8009008 <__sflush_r+0xd4>
 8009038:	dfbffffe 	.word	0xdfbffffe

0800903c <_fflush_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	690b      	ldr	r3, [r1, #16]
 8009040:	4605      	mov	r5, r0
 8009042:	460c      	mov	r4, r1
 8009044:	b913      	cbnz	r3, 800904c <_fflush_r+0x10>
 8009046:	2500      	movs	r5, #0
 8009048:	4628      	mov	r0, r5
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	b118      	cbz	r0, 8009056 <_fflush_r+0x1a>
 800904e:	6a03      	ldr	r3, [r0, #32]
 8009050:	b90b      	cbnz	r3, 8009056 <_fflush_r+0x1a>
 8009052:	f7fe fba7 	bl	80077a4 <__sinit>
 8009056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0f3      	beq.n	8009046 <_fflush_r+0xa>
 800905e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009060:	07d0      	lsls	r0, r2, #31
 8009062:	d404      	bmi.n	800906e <_fflush_r+0x32>
 8009064:	0599      	lsls	r1, r3, #22
 8009066:	d402      	bmi.n	800906e <_fflush_r+0x32>
 8009068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800906a:	f7fe fc92 	bl	8007992 <__retarget_lock_acquire_recursive>
 800906e:	4628      	mov	r0, r5
 8009070:	4621      	mov	r1, r4
 8009072:	f7ff ff5f 	bl	8008f34 <__sflush_r>
 8009076:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009078:	07da      	lsls	r2, r3, #31
 800907a:	4605      	mov	r5, r0
 800907c:	d4e4      	bmi.n	8009048 <_fflush_r+0xc>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	059b      	lsls	r3, r3, #22
 8009082:	d4e1      	bmi.n	8009048 <_fflush_r+0xc>
 8009084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009086:	f7fe fc85 	bl	8007994 <__retarget_lock_release_recursive>
 800908a:	e7dd      	b.n	8009048 <_fflush_r+0xc>

0800908c <_sbrk_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d06      	ldr	r5, [pc, #24]	@ (80090a8 <_sbrk_r+0x1c>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	f7f8 fda2 	bl	8001be0 <_sbrk>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_sbrk_r+0x1a>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_sbrk_r+0x1a>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	20005954 	.word	0x20005954

080090ac <memcpy>:
 80090ac:	440a      	add	r2, r1
 80090ae:	4291      	cmp	r1, r2
 80090b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b4:	d100      	bne.n	80090b8 <memcpy+0xc>
 80090b6:	4770      	bx	lr
 80090b8:	b510      	push	{r4, lr}
 80090ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c2:	4291      	cmp	r1, r2
 80090c4:	d1f9      	bne.n	80090ba <memcpy+0xe>
 80090c6:	bd10      	pop	{r4, pc}

080090c8 <__assert_func>:
 80090c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ca:	4614      	mov	r4, r2
 80090cc:	461a      	mov	r2, r3
 80090ce:	4b09      	ldr	r3, [pc, #36]	@ (80090f4 <__assert_func+0x2c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4605      	mov	r5, r0
 80090d4:	68d8      	ldr	r0, [r3, #12]
 80090d6:	b954      	cbnz	r4, 80090ee <__assert_func+0x26>
 80090d8:	4b07      	ldr	r3, [pc, #28]	@ (80090f8 <__assert_func+0x30>)
 80090da:	461c      	mov	r4, r3
 80090dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090e0:	9100      	str	r1, [sp, #0]
 80090e2:	462b      	mov	r3, r5
 80090e4:	4905      	ldr	r1, [pc, #20]	@ (80090fc <__assert_func+0x34>)
 80090e6:	f000 f841 	bl	800916c <fiprintf>
 80090ea:	f000 f851 	bl	8009190 <abort>
 80090ee:	4b04      	ldr	r3, [pc, #16]	@ (8009100 <__assert_func+0x38>)
 80090f0:	e7f4      	b.n	80090dc <__assert_func+0x14>
 80090f2:	bf00      	nop
 80090f4:	20000018 	.word	0x20000018
 80090f8:	0801ce1d 	.word	0x0801ce1d
 80090fc:	0801cdef 	.word	0x0801cdef
 8009100:	0801cde2 	.word	0x0801cde2

08009104 <_calloc_r>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	fba1 5402 	umull	r5, r4, r1, r2
 800910a:	b93c      	cbnz	r4, 800911c <_calloc_r+0x18>
 800910c:	4629      	mov	r1, r5
 800910e:	f7ff fb03 	bl	8008718 <_malloc_r>
 8009112:	4606      	mov	r6, r0
 8009114:	b928      	cbnz	r0, 8009122 <_calloc_r+0x1e>
 8009116:	2600      	movs	r6, #0
 8009118:	4630      	mov	r0, r6
 800911a:	bd70      	pop	{r4, r5, r6, pc}
 800911c:	220c      	movs	r2, #12
 800911e:	6002      	str	r2, [r0, #0]
 8009120:	e7f9      	b.n	8009116 <_calloc_r+0x12>
 8009122:	462a      	mov	r2, r5
 8009124:	4621      	mov	r1, r4
 8009126:	f7fe fbb6 	bl	8007896 <memset>
 800912a:	e7f5      	b.n	8009118 <_calloc_r+0x14>

0800912c <__ascii_mbtowc>:
 800912c:	b082      	sub	sp, #8
 800912e:	b901      	cbnz	r1, 8009132 <__ascii_mbtowc+0x6>
 8009130:	a901      	add	r1, sp, #4
 8009132:	b142      	cbz	r2, 8009146 <__ascii_mbtowc+0x1a>
 8009134:	b14b      	cbz	r3, 800914a <__ascii_mbtowc+0x1e>
 8009136:	7813      	ldrb	r3, [r2, #0]
 8009138:	600b      	str	r3, [r1, #0]
 800913a:	7812      	ldrb	r2, [r2, #0]
 800913c:	1e10      	subs	r0, r2, #0
 800913e:	bf18      	it	ne
 8009140:	2001      	movne	r0, #1
 8009142:	b002      	add	sp, #8
 8009144:	4770      	bx	lr
 8009146:	4610      	mov	r0, r2
 8009148:	e7fb      	b.n	8009142 <__ascii_mbtowc+0x16>
 800914a:	f06f 0001 	mvn.w	r0, #1
 800914e:	e7f8      	b.n	8009142 <__ascii_mbtowc+0x16>

08009150 <__ascii_wctomb>:
 8009150:	4603      	mov	r3, r0
 8009152:	4608      	mov	r0, r1
 8009154:	b141      	cbz	r1, 8009168 <__ascii_wctomb+0x18>
 8009156:	2aff      	cmp	r2, #255	@ 0xff
 8009158:	d904      	bls.n	8009164 <__ascii_wctomb+0x14>
 800915a:	228a      	movs	r2, #138	@ 0x8a
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	4770      	bx	lr
 8009164:	700a      	strb	r2, [r1, #0]
 8009166:	2001      	movs	r0, #1
 8009168:	4770      	bx	lr
	...

0800916c <fiprintf>:
 800916c:	b40e      	push	{r1, r2, r3}
 800916e:	b503      	push	{r0, r1, lr}
 8009170:	4601      	mov	r1, r0
 8009172:	ab03      	add	r3, sp, #12
 8009174:	4805      	ldr	r0, [pc, #20]	@ (800918c <fiprintf+0x20>)
 8009176:	f853 2b04 	ldr.w	r2, [r3], #4
 800917a:	6800      	ldr	r0, [r0, #0]
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	f000 f837 	bl	80091f0 <_vfiprintf_r>
 8009182:	b002      	add	sp, #8
 8009184:	f85d eb04 	ldr.w	lr, [sp], #4
 8009188:	b003      	add	sp, #12
 800918a:	4770      	bx	lr
 800918c:	20000018 	.word	0x20000018

08009190 <abort>:
 8009190:	b508      	push	{r3, lr}
 8009192:	2006      	movs	r0, #6
 8009194:	f000 fa00 	bl	8009598 <raise>
 8009198:	2001      	movs	r0, #1
 800919a:	f7f8 fca9 	bl	8001af0 <_exit>

0800919e <__sfputc_r>:
 800919e:	6893      	ldr	r3, [r2, #8]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	b410      	push	{r4}
 80091a6:	6093      	str	r3, [r2, #8]
 80091a8:	da08      	bge.n	80091bc <__sfputc_r+0x1e>
 80091aa:	6994      	ldr	r4, [r2, #24]
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	db01      	blt.n	80091b4 <__sfputc_r+0x16>
 80091b0:	290a      	cmp	r1, #10
 80091b2:	d103      	bne.n	80091bc <__sfputc_r+0x1e>
 80091b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b8:	f000 b932 	b.w	8009420 <__swbuf_r>
 80091bc:	6813      	ldr	r3, [r2, #0]
 80091be:	1c58      	adds	r0, r3, #1
 80091c0:	6010      	str	r0, [r2, #0]
 80091c2:	7019      	strb	r1, [r3, #0]
 80091c4:	4608      	mov	r0, r1
 80091c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <__sfputs_r>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	4606      	mov	r6, r0
 80091d0:	460f      	mov	r7, r1
 80091d2:	4614      	mov	r4, r2
 80091d4:	18d5      	adds	r5, r2, r3
 80091d6:	42ac      	cmp	r4, r5
 80091d8:	d101      	bne.n	80091de <__sfputs_r+0x12>
 80091da:	2000      	movs	r0, #0
 80091dc:	e007      	b.n	80091ee <__sfputs_r+0x22>
 80091de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e2:	463a      	mov	r2, r7
 80091e4:	4630      	mov	r0, r6
 80091e6:	f7ff ffda 	bl	800919e <__sfputc_r>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d1f3      	bne.n	80091d6 <__sfputs_r+0xa>
 80091ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091f0 <_vfiprintf_r>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	460d      	mov	r5, r1
 80091f6:	b09d      	sub	sp, #116	@ 0x74
 80091f8:	4614      	mov	r4, r2
 80091fa:	4698      	mov	r8, r3
 80091fc:	4606      	mov	r6, r0
 80091fe:	b118      	cbz	r0, 8009208 <_vfiprintf_r+0x18>
 8009200:	6a03      	ldr	r3, [r0, #32]
 8009202:	b90b      	cbnz	r3, 8009208 <_vfiprintf_r+0x18>
 8009204:	f7fe face 	bl	80077a4 <__sinit>
 8009208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800920a:	07d9      	lsls	r1, r3, #31
 800920c:	d405      	bmi.n	800921a <_vfiprintf_r+0x2a>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	059a      	lsls	r2, r3, #22
 8009212:	d402      	bmi.n	800921a <_vfiprintf_r+0x2a>
 8009214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009216:	f7fe fbbc 	bl	8007992 <__retarget_lock_acquire_recursive>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	071b      	lsls	r3, r3, #28
 800921e:	d501      	bpl.n	8009224 <_vfiprintf_r+0x34>
 8009220:	692b      	ldr	r3, [r5, #16]
 8009222:	b99b      	cbnz	r3, 800924c <_vfiprintf_r+0x5c>
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f000 f938 	bl	800949c <__swsetup_r>
 800922c:	b170      	cbz	r0, 800924c <_vfiprintf_r+0x5c>
 800922e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009230:	07dc      	lsls	r4, r3, #31
 8009232:	d504      	bpl.n	800923e <_vfiprintf_r+0x4e>
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	b01d      	add	sp, #116	@ 0x74
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	0598      	lsls	r0, r3, #22
 8009242:	d4f7      	bmi.n	8009234 <_vfiprintf_r+0x44>
 8009244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009246:	f7fe fba5 	bl	8007994 <__retarget_lock_release_recursive>
 800924a:	e7f3      	b.n	8009234 <_vfiprintf_r+0x44>
 800924c:	2300      	movs	r3, #0
 800924e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009250:	2320      	movs	r3, #32
 8009252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009256:	f8cd 800c 	str.w	r8, [sp, #12]
 800925a:	2330      	movs	r3, #48	@ 0x30
 800925c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800940c <_vfiprintf_r+0x21c>
 8009260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009264:	f04f 0901 	mov.w	r9, #1
 8009268:	4623      	mov	r3, r4
 800926a:	469a      	mov	sl, r3
 800926c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009270:	b10a      	cbz	r2, 8009276 <_vfiprintf_r+0x86>
 8009272:	2a25      	cmp	r2, #37	@ 0x25
 8009274:	d1f9      	bne.n	800926a <_vfiprintf_r+0x7a>
 8009276:	ebba 0b04 	subs.w	fp, sl, r4
 800927a:	d00b      	beq.n	8009294 <_vfiprintf_r+0xa4>
 800927c:	465b      	mov	r3, fp
 800927e:	4622      	mov	r2, r4
 8009280:	4629      	mov	r1, r5
 8009282:	4630      	mov	r0, r6
 8009284:	f7ff ffa2 	bl	80091cc <__sfputs_r>
 8009288:	3001      	adds	r0, #1
 800928a:	f000 80a7 	beq.w	80093dc <_vfiprintf_r+0x1ec>
 800928e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009290:	445a      	add	r2, fp
 8009292:	9209      	str	r2, [sp, #36]	@ 0x24
 8009294:	f89a 3000 	ldrb.w	r3, [sl]
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 809f 	beq.w	80093dc <_vfiprintf_r+0x1ec>
 800929e:	2300      	movs	r3, #0
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a8:	f10a 0a01 	add.w	sl, sl, #1
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	9307      	str	r3, [sp, #28]
 80092b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80092b6:	4654      	mov	r4, sl
 80092b8:	2205      	movs	r2, #5
 80092ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092be:	4853      	ldr	r0, [pc, #332]	@ (800940c <_vfiprintf_r+0x21c>)
 80092c0:	f7f7 f806 	bl	80002d0 <memchr>
 80092c4:	9a04      	ldr	r2, [sp, #16]
 80092c6:	b9d8      	cbnz	r0, 8009300 <_vfiprintf_r+0x110>
 80092c8:	06d1      	lsls	r1, r2, #27
 80092ca:	bf44      	itt	mi
 80092cc:	2320      	movmi	r3, #32
 80092ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092d2:	0713      	lsls	r3, r2, #28
 80092d4:	bf44      	itt	mi
 80092d6:	232b      	movmi	r3, #43	@ 0x2b
 80092d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092dc:	f89a 3000 	ldrb.w	r3, [sl]
 80092e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e2:	d015      	beq.n	8009310 <_vfiprintf_r+0x120>
 80092e4:	9a07      	ldr	r2, [sp, #28]
 80092e6:	4654      	mov	r4, sl
 80092e8:	2000      	movs	r0, #0
 80092ea:	f04f 0c0a 	mov.w	ip, #10
 80092ee:	4621      	mov	r1, r4
 80092f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f4:	3b30      	subs	r3, #48	@ 0x30
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	d94b      	bls.n	8009392 <_vfiprintf_r+0x1a2>
 80092fa:	b1b0      	cbz	r0, 800932a <_vfiprintf_r+0x13a>
 80092fc:	9207      	str	r2, [sp, #28]
 80092fe:	e014      	b.n	800932a <_vfiprintf_r+0x13a>
 8009300:	eba0 0308 	sub.w	r3, r0, r8
 8009304:	fa09 f303 	lsl.w	r3, r9, r3
 8009308:	4313      	orrs	r3, r2
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	46a2      	mov	sl, r4
 800930e:	e7d2      	b.n	80092b6 <_vfiprintf_r+0xc6>
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	1d19      	adds	r1, r3, #4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	9103      	str	r1, [sp, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	bfbb      	ittet	lt
 800931c:	425b      	neglt	r3, r3
 800931e:	f042 0202 	orrlt.w	r2, r2, #2
 8009322:	9307      	strge	r3, [sp, #28]
 8009324:	9307      	strlt	r3, [sp, #28]
 8009326:	bfb8      	it	lt
 8009328:	9204      	strlt	r2, [sp, #16]
 800932a:	7823      	ldrb	r3, [r4, #0]
 800932c:	2b2e      	cmp	r3, #46	@ 0x2e
 800932e:	d10a      	bne.n	8009346 <_vfiprintf_r+0x156>
 8009330:	7863      	ldrb	r3, [r4, #1]
 8009332:	2b2a      	cmp	r3, #42	@ 0x2a
 8009334:	d132      	bne.n	800939c <_vfiprintf_r+0x1ac>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	1d1a      	adds	r2, r3, #4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	9203      	str	r2, [sp, #12]
 800933e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009342:	3402      	adds	r4, #2
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800941c <_vfiprintf_r+0x22c>
 800934a:	7821      	ldrb	r1, [r4, #0]
 800934c:	2203      	movs	r2, #3
 800934e:	4650      	mov	r0, sl
 8009350:	f7f6 ffbe 	bl	80002d0 <memchr>
 8009354:	b138      	cbz	r0, 8009366 <_vfiprintf_r+0x176>
 8009356:	9b04      	ldr	r3, [sp, #16]
 8009358:	eba0 000a 	sub.w	r0, r0, sl
 800935c:	2240      	movs	r2, #64	@ 0x40
 800935e:	4082      	lsls	r2, r0
 8009360:	4313      	orrs	r3, r2
 8009362:	3401      	adds	r4, #1
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936a:	4829      	ldr	r0, [pc, #164]	@ (8009410 <_vfiprintf_r+0x220>)
 800936c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009370:	2206      	movs	r2, #6
 8009372:	f7f6 ffad 	bl	80002d0 <memchr>
 8009376:	2800      	cmp	r0, #0
 8009378:	d03f      	beq.n	80093fa <_vfiprintf_r+0x20a>
 800937a:	4b26      	ldr	r3, [pc, #152]	@ (8009414 <_vfiprintf_r+0x224>)
 800937c:	bb1b      	cbnz	r3, 80093c6 <_vfiprintf_r+0x1d6>
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	3307      	adds	r3, #7
 8009382:	f023 0307 	bic.w	r3, r3, #7
 8009386:	3308      	adds	r3, #8
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938c:	443b      	add	r3, r7
 800938e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009390:	e76a      	b.n	8009268 <_vfiprintf_r+0x78>
 8009392:	fb0c 3202 	mla	r2, ip, r2, r3
 8009396:	460c      	mov	r4, r1
 8009398:	2001      	movs	r0, #1
 800939a:	e7a8      	b.n	80092ee <_vfiprintf_r+0xfe>
 800939c:	2300      	movs	r3, #0
 800939e:	3401      	adds	r4, #1
 80093a0:	9305      	str	r3, [sp, #20]
 80093a2:	4619      	mov	r1, r3
 80093a4:	f04f 0c0a 	mov.w	ip, #10
 80093a8:	4620      	mov	r0, r4
 80093aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ae:	3a30      	subs	r2, #48	@ 0x30
 80093b0:	2a09      	cmp	r2, #9
 80093b2:	d903      	bls.n	80093bc <_vfiprintf_r+0x1cc>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0c6      	beq.n	8009346 <_vfiprintf_r+0x156>
 80093b8:	9105      	str	r1, [sp, #20]
 80093ba:	e7c4      	b.n	8009346 <_vfiprintf_r+0x156>
 80093bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c0:	4604      	mov	r4, r0
 80093c2:	2301      	movs	r3, #1
 80093c4:	e7f0      	b.n	80093a8 <_vfiprintf_r+0x1b8>
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4b12      	ldr	r3, [pc, #72]	@ (8009418 <_vfiprintf_r+0x228>)
 80093ce:	a904      	add	r1, sp, #16
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7fd fda3 	bl	8006f1c <_printf_float>
 80093d6:	4607      	mov	r7, r0
 80093d8:	1c78      	adds	r0, r7, #1
 80093da:	d1d6      	bne.n	800938a <_vfiprintf_r+0x19a>
 80093dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093de:	07d9      	lsls	r1, r3, #31
 80093e0:	d405      	bmi.n	80093ee <_vfiprintf_r+0x1fe>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	059a      	lsls	r2, r3, #22
 80093e6:	d402      	bmi.n	80093ee <_vfiprintf_r+0x1fe>
 80093e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ea:	f7fe fad3 	bl	8007994 <__retarget_lock_release_recursive>
 80093ee:	89ab      	ldrh	r3, [r5, #12]
 80093f0:	065b      	lsls	r3, r3, #25
 80093f2:	f53f af1f 	bmi.w	8009234 <_vfiprintf_r+0x44>
 80093f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093f8:	e71e      	b.n	8009238 <_vfiprintf_r+0x48>
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	462a      	mov	r2, r5
 8009400:	4b05      	ldr	r3, [pc, #20]	@ (8009418 <_vfiprintf_r+0x228>)
 8009402:	a904      	add	r1, sp, #16
 8009404:	4630      	mov	r0, r6
 8009406:	f7fe f821 	bl	800744c <_printf_i>
 800940a:	e7e4      	b.n	80093d6 <_vfiprintf_r+0x1e6>
 800940c:	0801cf1f 	.word	0x0801cf1f
 8009410:	0801cf29 	.word	0x0801cf29
 8009414:	08006f1d 	.word	0x08006f1d
 8009418:	080091cd 	.word	0x080091cd
 800941c:	0801cf25 	.word	0x0801cf25

08009420 <__swbuf_r>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	460e      	mov	r6, r1
 8009424:	4614      	mov	r4, r2
 8009426:	4605      	mov	r5, r0
 8009428:	b118      	cbz	r0, 8009432 <__swbuf_r+0x12>
 800942a:	6a03      	ldr	r3, [r0, #32]
 800942c:	b90b      	cbnz	r3, 8009432 <__swbuf_r+0x12>
 800942e:	f7fe f9b9 	bl	80077a4 <__sinit>
 8009432:	69a3      	ldr	r3, [r4, #24]
 8009434:	60a3      	str	r3, [r4, #8]
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	071a      	lsls	r2, r3, #28
 800943a:	d501      	bpl.n	8009440 <__swbuf_r+0x20>
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	b943      	cbnz	r3, 8009452 <__swbuf_r+0x32>
 8009440:	4621      	mov	r1, r4
 8009442:	4628      	mov	r0, r5
 8009444:	f000 f82a 	bl	800949c <__swsetup_r>
 8009448:	b118      	cbz	r0, 8009452 <__swbuf_r+0x32>
 800944a:	f04f 37ff 	mov.w	r7, #4294967295
 800944e:	4638      	mov	r0, r7
 8009450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	6922      	ldr	r2, [r4, #16]
 8009456:	1a98      	subs	r0, r3, r2
 8009458:	6963      	ldr	r3, [r4, #20]
 800945a:	b2f6      	uxtb	r6, r6
 800945c:	4283      	cmp	r3, r0
 800945e:	4637      	mov	r7, r6
 8009460:	dc05      	bgt.n	800946e <__swbuf_r+0x4e>
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f7ff fde9 	bl	800903c <_fflush_r>
 800946a:	2800      	cmp	r0, #0
 800946c:	d1ed      	bne.n	800944a <__swbuf_r+0x2a>
 800946e:	68a3      	ldr	r3, [r4, #8]
 8009470:	3b01      	subs	r3, #1
 8009472:	60a3      	str	r3, [r4, #8]
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	701e      	strb	r6, [r3, #0]
 800947c:	6962      	ldr	r2, [r4, #20]
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	429a      	cmp	r2, r3
 8009482:	d004      	beq.n	800948e <__swbuf_r+0x6e>
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	07db      	lsls	r3, r3, #31
 8009488:	d5e1      	bpl.n	800944e <__swbuf_r+0x2e>
 800948a:	2e0a      	cmp	r6, #10
 800948c:	d1df      	bne.n	800944e <__swbuf_r+0x2e>
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff fdd3 	bl	800903c <_fflush_r>
 8009496:	2800      	cmp	r0, #0
 8009498:	d0d9      	beq.n	800944e <__swbuf_r+0x2e>
 800949a:	e7d6      	b.n	800944a <__swbuf_r+0x2a>

0800949c <__swsetup_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4b29      	ldr	r3, [pc, #164]	@ (8009544 <__swsetup_r+0xa8>)
 80094a0:	4605      	mov	r5, r0
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	460c      	mov	r4, r1
 80094a6:	b118      	cbz	r0, 80094b0 <__swsetup_r+0x14>
 80094a8:	6a03      	ldr	r3, [r0, #32]
 80094aa:	b90b      	cbnz	r3, 80094b0 <__swsetup_r+0x14>
 80094ac:	f7fe f97a 	bl	80077a4 <__sinit>
 80094b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b4:	0719      	lsls	r1, r3, #28
 80094b6:	d422      	bmi.n	80094fe <__swsetup_r+0x62>
 80094b8:	06da      	lsls	r2, r3, #27
 80094ba:	d407      	bmi.n	80094cc <__swsetup_r+0x30>
 80094bc:	2209      	movs	r2, #9
 80094be:	602a      	str	r2, [r5, #0]
 80094c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ca:	e033      	b.n	8009534 <__swsetup_r+0x98>
 80094cc:	0758      	lsls	r0, r3, #29
 80094ce:	d512      	bpl.n	80094f6 <__swsetup_r+0x5a>
 80094d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094d2:	b141      	cbz	r1, 80094e6 <__swsetup_r+0x4a>
 80094d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094d8:	4299      	cmp	r1, r3
 80094da:	d002      	beq.n	80094e2 <__swsetup_r+0x46>
 80094dc:	4628      	mov	r0, r5
 80094de:	f7ff f8a7 	bl	8008630 <_free_r>
 80094e2:	2300      	movs	r3, #0
 80094e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	2300      	movs	r3, #0
 80094f0:	6063      	str	r3, [r4, #4]
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f043 0308 	orr.w	r3, r3, #8
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	b94b      	cbnz	r3, 8009516 <__swsetup_r+0x7a>
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800950c:	d003      	beq.n	8009516 <__swsetup_r+0x7a>
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f883 	bl	800961c <__smakebuf_r>
 8009516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951a:	f013 0201 	ands.w	r2, r3, #1
 800951e:	d00a      	beq.n	8009536 <__swsetup_r+0x9a>
 8009520:	2200      	movs	r2, #0
 8009522:	60a2      	str	r2, [r4, #8]
 8009524:	6962      	ldr	r2, [r4, #20]
 8009526:	4252      	negs	r2, r2
 8009528:	61a2      	str	r2, [r4, #24]
 800952a:	6922      	ldr	r2, [r4, #16]
 800952c:	b942      	cbnz	r2, 8009540 <__swsetup_r+0xa4>
 800952e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009532:	d1c5      	bne.n	80094c0 <__swsetup_r+0x24>
 8009534:	bd38      	pop	{r3, r4, r5, pc}
 8009536:	0799      	lsls	r1, r3, #30
 8009538:	bf58      	it	pl
 800953a:	6962      	ldrpl	r2, [r4, #20]
 800953c:	60a2      	str	r2, [r4, #8]
 800953e:	e7f4      	b.n	800952a <__swsetup_r+0x8e>
 8009540:	2000      	movs	r0, #0
 8009542:	e7f7      	b.n	8009534 <__swsetup_r+0x98>
 8009544:	20000018 	.word	0x20000018

08009548 <_raise_r>:
 8009548:	291f      	cmp	r1, #31
 800954a:	b538      	push	{r3, r4, r5, lr}
 800954c:	4605      	mov	r5, r0
 800954e:	460c      	mov	r4, r1
 8009550:	d904      	bls.n	800955c <_raise_r+0x14>
 8009552:	2316      	movs	r3, #22
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	f04f 30ff 	mov.w	r0, #4294967295
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800955e:	b112      	cbz	r2, 8009566 <_raise_r+0x1e>
 8009560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009564:	b94b      	cbnz	r3, 800957a <_raise_r+0x32>
 8009566:	4628      	mov	r0, r5
 8009568:	f000 f830 	bl	80095cc <_getpid_r>
 800956c:	4622      	mov	r2, r4
 800956e:	4601      	mov	r1, r0
 8009570:	4628      	mov	r0, r5
 8009572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009576:	f000 b817 	b.w	80095a8 <_kill_r>
 800957a:	2b01      	cmp	r3, #1
 800957c:	d00a      	beq.n	8009594 <_raise_r+0x4c>
 800957e:	1c59      	adds	r1, r3, #1
 8009580:	d103      	bne.n	800958a <_raise_r+0x42>
 8009582:	2316      	movs	r3, #22
 8009584:	6003      	str	r3, [r0, #0]
 8009586:	2001      	movs	r0, #1
 8009588:	e7e7      	b.n	800955a <_raise_r+0x12>
 800958a:	2100      	movs	r1, #0
 800958c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009590:	4620      	mov	r0, r4
 8009592:	4798      	blx	r3
 8009594:	2000      	movs	r0, #0
 8009596:	e7e0      	b.n	800955a <_raise_r+0x12>

08009598 <raise>:
 8009598:	4b02      	ldr	r3, [pc, #8]	@ (80095a4 <raise+0xc>)
 800959a:	4601      	mov	r1, r0
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	f7ff bfd3 	b.w	8009548 <_raise_r>
 80095a2:	bf00      	nop
 80095a4:	20000018 	.word	0x20000018

080095a8 <_kill_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d07      	ldr	r5, [pc, #28]	@ (80095c8 <_kill_r+0x20>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	f7f8 fa8b 	bl	8001ad0 <_kill>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d102      	bne.n	80095c4 <_kill_r+0x1c>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b103      	cbz	r3, 80095c4 <_kill_r+0x1c>
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	bf00      	nop
 80095c8:	20005954 	.word	0x20005954

080095cc <_getpid_r>:
 80095cc:	f7f8 ba78 	b.w	8001ac0 <_getpid>

080095d0 <__swhatbuf_r>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	460c      	mov	r4, r1
 80095d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d8:	2900      	cmp	r1, #0
 80095da:	b096      	sub	sp, #88	@ 0x58
 80095dc:	4615      	mov	r5, r2
 80095de:	461e      	mov	r6, r3
 80095e0:	da0d      	bge.n	80095fe <__swhatbuf_r+0x2e>
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095e8:	f04f 0100 	mov.w	r1, #0
 80095ec:	bf14      	ite	ne
 80095ee:	2340      	movne	r3, #64	@ 0x40
 80095f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095f4:	2000      	movs	r0, #0
 80095f6:	6031      	str	r1, [r6, #0]
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	b016      	add	sp, #88	@ 0x58
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
 80095fe:	466a      	mov	r2, sp
 8009600:	f000 f848 	bl	8009694 <_fstat_r>
 8009604:	2800      	cmp	r0, #0
 8009606:	dbec      	blt.n	80095e2 <__swhatbuf_r+0x12>
 8009608:	9901      	ldr	r1, [sp, #4]
 800960a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800960e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009612:	4259      	negs	r1, r3
 8009614:	4159      	adcs	r1, r3
 8009616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800961a:	e7eb      	b.n	80095f4 <__swhatbuf_r+0x24>

0800961c <__smakebuf_r>:
 800961c:	898b      	ldrh	r3, [r1, #12]
 800961e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009620:	079d      	lsls	r5, r3, #30
 8009622:	4606      	mov	r6, r0
 8009624:	460c      	mov	r4, r1
 8009626:	d507      	bpl.n	8009638 <__smakebuf_r+0x1c>
 8009628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	6123      	str	r3, [r4, #16]
 8009630:	2301      	movs	r3, #1
 8009632:	6163      	str	r3, [r4, #20]
 8009634:	b003      	add	sp, #12
 8009636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009638:	ab01      	add	r3, sp, #4
 800963a:	466a      	mov	r2, sp
 800963c:	f7ff ffc8 	bl	80095d0 <__swhatbuf_r>
 8009640:	9f00      	ldr	r7, [sp, #0]
 8009642:	4605      	mov	r5, r0
 8009644:	4639      	mov	r1, r7
 8009646:	4630      	mov	r0, r6
 8009648:	f7ff f866 	bl	8008718 <_malloc_r>
 800964c:	b948      	cbnz	r0, 8009662 <__smakebuf_r+0x46>
 800964e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009652:	059a      	lsls	r2, r3, #22
 8009654:	d4ee      	bmi.n	8009634 <__smakebuf_r+0x18>
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	f043 0302 	orr.w	r3, r3, #2
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	e7e2      	b.n	8009628 <__smakebuf_r+0xc>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	6020      	str	r0, [r4, #0]
 8009666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009672:	b15b      	cbz	r3, 800968c <__smakebuf_r+0x70>
 8009674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009678:	4630      	mov	r0, r6
 800967a:	f000 f81d 	bl	80096b8 <_isatty_r>
 800967e:	b128      	cbz	r0, 800968c <__smakebuf_r+0x70>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f023 0303 	bic.w	r3, r3, #3
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	431d      	orrs	r5, r3
 8009690:	81a5      	strh	r5, [r4, #12]
 8009692:	e7cf      	b.n	8009634 <__smakebuf_r+0x18>

08009694 <_fstat_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d07      	ldr	r5, [pc, #28]	@ (80096b4 <_fstat_r+0x20>)
 8009698:	2300      	movs	r3, #0
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	4611      	mov	r1, r2
 80096a0:	602b      	str	r3, [r5, #0]
 80096a2:	f7f8 fa75 	bl	8001b90 <_fstat>
 80096a6:	1c43      	adds	r3, r0, #1
 80096a8:	d102      	bne.n	80096b0 <_fstat_r+0x1c>
 80096aa:	682b      	ldr	r3, [r5, #0]
 80096ac:	b103      	cbz	r3, 80096b0 <_fstat_r+0x1c>
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	bd38      	pop	{r3, r4, r5, pc}
 80096b2:	bf00      	nop
 80096b4:	20005954 	.word	0x20005954

080096b8 <_isatty_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4d06      	ldr	r5, [pc, #24]	@ (80096d4 <_isatty_r+0x1c>)
 80096bc:	2300      	movs	r3, #0
 80096be:	4604      	mov	r4, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	602b      	str	r3, [r5, #0]
 80096c4:	f7f8 fa74 	bl	8001bb0 <_isatty>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_isatty_r+0x1a>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_isatty_r+0x1a>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20005954 	.word	0x20005954

080096d8 <sqrtf>:
 80096d8:	b508      	push	{r3, lr}
 80096da:	ed2d 8b02 	vpush	{d8}
 80096de:	eeb0 8a40 	vmov.f32	s16, s0
 80096e2:	f000 f817 	bl	8009714 <__ieee754_sqrtf>
 80096e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80096ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ee:	d60c      	bvs.n	800970a <sqrtf+0x32>
 80096f0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009710 <sqrtf+0x38>
 80096f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80096f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fc:	d505      	bpl.n	800970a <sqrtf+0x32>
 80096fe:	f7fe f91d 	bl	800793c <__errno>
 8009702:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009706:	2321      	movs	r3, #33	@ 0x21
 8009708:	6003      	str	r3, [r0, #0]
 800970a:	ecbd 8b02 	vpop	{d8}
 800970e:	bd08      	pop	{r3, pc}
 8009710:	00000000 	.word	0x00000000

08009714 <__ieee754_sqrtf>:
 8009714:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009718:	4770      	bx	lr
	...

0800971c <_init>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr

08009728 <_fini>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	bf00      	nop
 800972c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972e:	bc08      	pop	{r3}
 8009730:	469e      	mov	lr, r3
 8009732:	4770      	bx	lr
