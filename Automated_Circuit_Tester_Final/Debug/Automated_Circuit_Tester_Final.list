
Automated_Circuit_Tester_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013ae0  0800ce90  0800ce90  0000de90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020970  08020970  000221e8  2**0
                  CONTENTS
  4 .ARM          00000008  08020970  08020970  00021970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020978  08020978  000221e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020978  08020978  00021978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802097c  0802097c  0002197c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08020980  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018c90  200001e8  08020b68  000221e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018e78  08020b68  00022e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cd1  00000000  00000000  00022218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab1  00000000  00000000  0003bee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001027  00000000  00000000  00040e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056b1  00000000  00000000  00041eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d924  00000000  00000000  00047568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e56d0  00000000  00000000  00064e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0014a55c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  0014a610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00150f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001a6  00000000  00000000  00150fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0015116f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce78 	.word	0x0800ce78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800ce78 	.word	0x0800ce78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <send_img>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}
}


void send_img(){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n"; 
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <send_img+0x8c>)
 8000f80:	463c      	mov	r4, r7
 8000f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f84:	c407      	stmia	r4!, {r0, r1, r2}
 8000f86:	8023      	strh	r3, [r4, #0]

	uint8_t* byte_ptr = (uint8_t*)snapshot_buff;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <send_img+0x90>)
 8000f8a:	613b      	str	r3, [r7, #16]

	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8000f8c:	f24c 33bf 	movw	r3, #50111	@ 0xc3bf
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	e00e      	b.n	8000fb6 <send_img+0x3e>
    	send_ptr[j] = byte_ptr[i];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	7819      	ldrb	r1, [r3, #0]
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800100c <send_img+0x94>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db04      	blt.n	8000fc6 <send_img+0x4e>
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f24c 32be 	movw	r2, #50110	@ 0xc3be
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	dde8      	ble.n	8000f98 <send_img+0x20>
	#else
		#define LOG() do { } while (0)
	#endif

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){ 
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e00b      	b.n	8000fe4 <send_img+0x6c>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 8000fcc:	463a      	mov	r2, r7
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	18d1      	adds	r1, r2, r3
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	480d      	ldr	r0, [pc, #52]	@ (8001010 <send_img+0x98>)
 8000fda:	f007 fc9d 	bl	8008918 <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){ 
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	ddf0      	ble.n	8000fcc <send_img+0x54>
	}
	
	// Send image data through serial port.
	
	HAL_UART_Transmit(&huart3, send_ptr, FRAMESIZE*2, HAL_MAX_DELAY);
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	f24c 32c0 	movw	r2, #50112	@ 0xc3c0
 8000ff2:	4906      	ldr	r1, [pc, #24]	@ (800100c <send_img+0x94>)
 8000ff4:	4806      	ldr	r0, [pc, #24]	@ (8001010 <send_img+0x98>)
 8000ff6:	f007 fc8f 	bl	8008918 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, &send_ptr[FRAMESIZE], FRAMESIZE, HAL_MAX_DELAY);
	
}
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	0800cf3c 	.word	0x0800cf3c
 8001008:	20000560 	.word	0x20000560
 800100c:	2000c920 	.word	0x2000c920
 8001010:	20000500 	.word	0x20000500

08001014 <p3>:


void p3(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	ov7670_snapshot(snapshot_buff);
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <p3+0x30>)
 800101a:	f001 f815 	bl	8002048 <ov7670_snapshot>
		while(!dma_flag)
 800101e:	e002      	b.n	8001026 <p3+0x12>
		{
			HAL_Delay(10);	
 8001020:	200a      	movs	r0, #10
 8001022:	f001 ff1d 	bl	8002e60 <HAL_Delay>
		while(!dma_flag)
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <p3+0x34>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f8      	beq.n	8001020 <p3+0xc>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <p3+0x38>)
 8001032:	f004 fc60 	bl	80058f6 <HAL_GPIO_TogglePin>
		dma_flag = 0;
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <p3+0x34>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		//print_ss(); 
		send_img(); 
 800103c:	f7ff ff9c 	bl	8000f78 <send_img>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000560 	.word	0x20000560
 8001048:	20018ce0 	.word	0x20018ce0
 800104c:	40020400 	.word	0x40020400

08001050 <print_msg>:
#include <string.h>
#include <stdio.h>



void print_msg(char * msg) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f929 	bl	80002b0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <print_msg+0x24>)
 8001068:	f007 fc56 	bl	8008918 <HAL_UART_Transmit>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000500 	.word	0x20000500

08001078 <flashLED>:

void flashLED(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, uint32_t delay_ms, uint8_t toggles) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	460b      	mov	r3, r1
 8001086:	817b      	strh	r3, [r7, #10]
 8001088:	4613      	mov	r3, r2
 800108a:	727b      	strb	r3, [r7, #9]
    for (uint8_t i = 0; i < toggles; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
 8001090:	e00a      	b.n	80010a8 <flashLED+0x30>
        HAL_GPIO_TogglePin(GPIO_Port, GPIO_Pin);
 8001092:	897b      	ldrh	r3, [r7, #10]
 8001094:	4619      	mov	r1, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f004 fc2d 	bl	80058f6 <HAL_GPIO_TogglePin>
        HAL_Delay(delay_ms);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 fedf 	bl	8002e60 <HAL_Delay>
    for (uint8_t i = 0; i < toggles; i++) {
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	3301      	adds	r3, #1
 80010a6:	75fb      	strb	r3, [r7, #23]
 80010a8:	7dfa      	ldrb	r2, [r7, #23]
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3f0      	bcc.n	8001092 <flashLED+0x1a>
    }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2234      	movs	r2, #52	@ 0x34
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f009 fa3b 	bl	800a546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <SystemClock_Config+0xd0>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	4a28      	ldr	r2, [pc, #160]	@ (800118c <SystemClock_Config+0xd0>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <SystemClock_Config+0xd4>)
 8001106:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <SystemClock_Config+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800111c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001120:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800112a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001130:	23a8      	movs	r3, #168	@ 0xa8
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001138:	2307      	movs	r3, #7
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4618      	mov	r0, r3
 8001146:	f006 f8e9 	bl	800731c <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001150:	f000 fb70 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001160:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2105      	movs	r1, #5
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fd88 	bl	8006c88 <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800117e:	f000 fb59 	bl	8001834 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011a6:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <MX_ADC1_Init+0xa0>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011fa:	f001 fe55 	bl	8002ea8 <HAL_ADC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001204:	f000 fb16 	bl	8001834 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_ADC1_Init+0x9c>)
 800121a:	f001 fe89 	bl	8002f30 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001224:	f000 fb06 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000228 	.word	0x20000228
 8001234:	40012000 	.word	0x40012000

08001238 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
 void MX_DCMI_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_DCMI_Init+0x60>)
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <MX_DCMI_Init+0x64>)
 8001240:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_DCMI_Init+0x60>)
 800124a:	2220      	movs	r2, #32
 800124c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001250:	2280      	movs	r2, #128	@ 0x80
 8001252:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_DCMI_Init+0x60>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_DCMI_Init+0x60>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_DCMI_Init+0x60>)
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001286:	f002 fb85 	bl	8003994 <HAL_DCMI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fad0 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002d0 	.word	0x200002d0
 800129c:	50050000 	.word	0x50050000

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f004 fb49 	bl	8005974 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 faa4 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000380 	.word	0x20000380
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C2_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <MX_I2C2_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C2_Init+0x50>)
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_I2C2_Init+0x58>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C2_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_I2C2_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_I2C2_Init+0x50>)
 800131a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_I2C2_Init+0x50>)
 800133a:	f004 fb1b 	bl	8005974 <HAL_I2C_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001344:	f000 fa76 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200003d4 	.word	0x200003d4
 8001350:	40005800 	.word	0x40005800
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b092      	sub	sp, #72	@ 0x48
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2220      	movs	r2, #32
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f009 f8df 	bl	800a546 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001388:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <MX_TIM1_Init+0xfc>)
 800138a:	4a33      	ldr	r2, [pc, #204]	@ (8001458 <MX_TIM1_Init+0x100>)
 800138c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800138e:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 800139a:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <MX_TIM1_Init+0xfc>)
 800139c:	2214      	movs	r2, #20
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b2:	4828      	ldr	r0, [pc, #160]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013b4:	f006 fa9f 	bl	80078f6 <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80013be:	f000 fa39 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ce:	4619      	mov	r1, r3
 80013d0:	4820      	ldr	r0, [pc, #128]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013d2:	f007 f96f 	bl	80086b4 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80013dc:	f000 fa2a 	bl	8001834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	@ 0x60
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 80013e4:	230a      	movs	r3, #10
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4813      	ldr	r0, [pc, #76]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001406:	f006 fc7d 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001410:	f000 fa10 	bl	8001834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001438:	f007 f9b8 	bl	80087ac <HAL_TIMEx_ConfigBreakDeadTime>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001442:	f000 f9f7 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001446:	4803      	ldr	r0, [pc, #12]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001448:	f001 fa9e 	bl	8002988 <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3748      	adds	r7, #72	@ 0x48
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000428 	.word	0x20000428
 8001458:	40010000 	.word	0x40010000

0800145c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800147a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800148e:	2253      	movs	r2, #83	@ 0x53
 8001490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149e:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014a0:	f006 f9da 	bl	8007858 <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80014aa:	f000 f9c3 	bl	8001834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014bc:	f006 fce4 	bl	8007e88 <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 f9b5 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ca:	2320      	movs	r3, #32
 80014cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014d8:	f007 f8ec 	bl	80086b4 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014e2:	f000 f9a7 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000470 	.word	0x20000470

080014f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM6_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001504:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_TIM6_Init+0x68>)
 8001506:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_TIM6_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001514:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800151a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_TIM6_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001524:	f006 f998 	bl	8007858 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800152e:	f000 f981 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001540:	f007 f8b8 	bl	80086b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800154a:	f000 f973 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200004b8 	.word	0x200004b8
 800155c:	40001000 	.word	0x40001000

08001560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001566:	4a16      	ldr	r2, [pc, #88]	@ (80015c0 <MX_USART3_UART_Init+0x60>)
 8001568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4809      	ldr	r0, [pc, #36]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001598:	f007 f96e 	bl	8008878 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f947 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000500 	.word	0x20000500
 80015c0:	40004800 	.word	0x40004800

080015c4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
 void MX_USB_OTG_FS_USB_Init(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
 void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2038      	movs	r0, #56	@ 0x38
 80015fc:	f001 ffa1 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001600:	2038      	movs	r0, #56	@ 0x38
 8001602:	f001 ffba 	bl	800357a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2039      	movs	r0, #57	@ 0x39
 800160c:	f001 ff99 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001610:	2039      	movs	r0, #57	@ 0x39
 8001612:	f001 ffb2 	bl	800357a <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	4b77      	ldr	r3, [pc, #476]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a76      	ldr	r2, [pc, #472]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b74      	ldr	r3, [pc, #464]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	4b70      	ldr	r3, [pc, #448]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a6f      	ldr	r2, [pc, #444]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b6d      	ldr	r3, [pc, #436]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	4b69      	ldr	r3, [pc, #420]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a68      	ldr	r2, [pc, #416]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b66      	ldr	r3, [pc, #408]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b62      	ldr	r3, [pc, #392]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a61      	ldr	r2, [pc, #388]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b58      	ldr	r3, [pc, #352]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b54      	ldr	r3, [pc, #336]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a53      	ldr	r2, [pc, #332]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b51      	ldr	r3, [pc, #324]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a4c      	ldr	r2, [pc, #304]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b4a      	ldr	r3, [pc, #296]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b46      	ldr	r3, [pc, #280]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a45      	ldr	r2, [pc, #276]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001720:	483f      	ldr	r0, [pc, #252]	@ (8001820 <MX_GPIO_Init+0x1fc>)
 8001722:	f004 f8cf 	bl	80058c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800172c:	483d      	ldr	r0, [pc, #244]	@ (8001824 <MX_GPIO_Init+0x200>)
 800172e:	f004 f8c9 	bl	80058c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2140      	movs	r1, #64	@ 0x40
 8001736:	483c      	ldr	r0, [pc, #240]	@ (8001828 <MX_GPIO_Init+0x204>)
 8001738:	f004 f8c4 	bl	80058c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4836      	ldr	r0, [pc, #216]	@ (800182c <MX_GPIO_Init+0x208>)
 8001754:	f003 ff22 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001758:	f244 0381 	movw	r3, #16513	@ 0x4081
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	482b      	ldr	r0, [pc, #172]	@ (8001820 <MX_GPIO_Init+0x1fc>)
 8001772:	f003 ff13 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001776:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4825      	ldr	r0, [pc, #148]	@ (8001824 <MX_GPIO_Init+0x200>)
 8001790:	f003 ff04 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001794:	2340      	movs	r3, #64	@ 0x40
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	481f      	ldr	r0, [pc, #124]	@ (8001828 <MX_GPIO_Init+0x204>)
 80017ac:	f003 fef6 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4819      	ldr	r0, [pc, #100]	@ (8001828 <MX_GPIO_Init+0x204>)
 80017c4:	f003 feea 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017da:	230a      	movs	r3, #10
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4812      	ldr	r0, [pc, #72]	@ (8001830 <MX_GPIO_Init+0x20c>)
 80017e6:	f003 fed9 	bl	800559c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	480c      	ldr	r0, [pc, #48]	@ (8001830 <MX_GPIO_Init+0x20c>)
 8001800:	f003 fecc 	bl	800559c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2028      	movs	r0, #40	@ 0x28
 800180a:	f001 fe9a 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800180e:	2028      	movs	r0, #40	@ 0x28
 8001810:	f001 feb3 	bl	800357a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	@ 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40020800 	.word	0x40020800
 8001830:	40020000 	.word	0x40020000

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <HAL_UART_RxCpltCallback>:
float posY = 0.0f;

extern arm_rfft_fast_instance_f32 fftHandler;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	4839      	ldr	r0, [pc, #228]	@ (8001930 <HAL_UART_RxCpltCallback+0xf0>)
 800184c:	f004 f853 	bl	80058f6 <HAL_GPIO_TogglePin>

    if (!(huart->Instance == USART3)) {
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a37      	ldr	r2, [pc, #220]	@ (8001934 <HAL_UART_RxCpltCallback+0xf4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d165      	bne.n	8001926 <HAL_UART_RxCpltCallback+0xe6>
        return; // Not from USART3, ignore
    }

    switch (state) {
 800185a:	4b37      	ldr	r3, [pc, #220]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_UART_RxCpltCallback+0x28>
 8001862:	2b03      	cmp	r3, #3
 8001864:	d043      	beq.n	80018ee <HAL_UART_RxCpltCallback+0xae>
 8001866:	e057      	b.n	8001918 <HAL_UART_RxCpltCallback+0xd8>
        case STATE_LISTEN:
            if (match_command(rx_data_arr, CMD_TAKEPIC)) {
 8001868:	4934      	ldr	r1, [pc, #208]	@ (800193c <HAL_UART_RxCpltCallback+0xfc>)
 800186a:	4835      	ldr	r0, [pc, #212]	@ (8001940 <HAL_UART_RxCpltCallback+0x100>)
 800186c:	f000 f8f7 	bl	8001a5e <match_command>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <HAL_UART_RxCpltCallback+0x50>
                state = STATE_TAKEPIC;
 8001876:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
                ptr_state = State_Picture; //next state 
 800187c:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <HAL_UART_RxCpltCallback+0x104>)
 800187e:	4a32      	ldr	r2, [pc, #200]	@ (8001948 <HAL_UART_RxCpltCallback+0x108>)
 8001880:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_TAKEPIC, 8, 100); //ack
 8001882:	2364      	movs	r3, #100	@ 0x64
 8001884:	2208      	movs	r2, #8
 8001886:	492d      	ldr	r1, [pc, #180]	@ (800193c <HAL_UART_RxCpltCallback+0xfc>)
 8001888:	4830      	ldr	r0, [pc, #192]	@ (800194c <HAL_UART_RxCpltCallback+0x10c>)
 800188a:	f007 f845 	bl	8008918 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart3, CMD_COORDS, 8, 100);
            } else {
                state = STATE_LISTEN;
                ptr_state = State_Listen;
            }
            break;
 800188e:	e04b      	b.n	8001928 <HAL_UART_RxCpltCallback+0xe8>
            } else if (match_command(rx_data_arr, CMD_ADCFFT)) {
 8001890:	492f      	ldr	r1, [pc, #188]	@ (8001950 <HAL_UART_RxCpltCallback+0x110>)
 8001892:	482b      	ldr	r0, [pc, #172]	@ (8001940 <HAL_UART_RxCpltCallback+0x100>)
 8001894:	f000 f8e3 	bl	8001a5e <match_command>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00c      	beq.n	80018b8 <HAL_UART_RxCpltCallback+0x78>
                state = STATE_ADCFFT;
 800189e:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 80018a0:	2202      	movs	r2, #2
 80018a2:	701a      	strb	r2, [r3, #0]
                ptr_state = State_ADC_FFT;
 80018a4:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <HAL_UART_RxCpltCallback+0x104>)
 80018a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001954 <HAL_UART_RxCpltCallback+0x114>)
 80018a8:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
 80018aa:	2364      	movs	r3, #100	@ 0x64
 80018ac:	2208      	movs	r2, #8
 80018ae:	4928      	ldr	r1, [pc, #160]	@ (8001950 <HAL_UART_RxCpltCallback+0x110>)
 80018b0:	4826      	ldr	r0, [pc, #152]	@ (800194c <HAL_UART_RxCpltCallback+0x10c>)
 80018b2:	f007 f831 	bl	8008918 <HAL_UART_Transmit>
            break;
 80018b6:	e037      	b.n	8001928 <HAL_UART_RxCpltCallback+0xe8>
            } else if (match_command(rx_data_arr, CMD_COORDS)) {
 80018b8:	4927      	ldr	r1, [pc, #156]	@ (8001958 <HAL_UART_RxCpltCallback+0x118>)
 80018ba:	4821      	ldr	r0, [pc, #132]	@ (8001940 <HAL_UART_RxCpltCallback+0x100>)
 80018bc:	f000 f8cf 	bl	8001a5e <match_command>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00c      	beq.n	80018e0 <HAL_UART_RxCpltCallback+0xa0>
                state = STATE_COORDS;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 80018c8:	2203      	movs	r2, #3
 80018ca:	701a      	strb	r2, [r3, #0]
                ptr_state = State_Coord_RX;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <HAL_UART_RxCpltCallback+0x104>)
 80018ce:	4a23      	ldr	r2, [pc, #140]	@ (800195c <HAL_UART_RxCpltCallback+0x11c>)
 80018d0:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_COORDS, 8, 100);
 80018d2:	2364      	movs	r3, #100	@ 0x64
 80018d4:	2208      	movs	r2, #8
 80018d6:	4920      	ldr	r1, [pc, #128]	@ (8001958 <HAL_UART_RxCpltCallback+0x118>)
 80018d8:	481c      	ldr	r0, [pc, #112]	@ (800194c <HAL_UART_RxCpltCallback+0x10c>)
 80018da:	f007 f81d 	bl	8008918 <HAL_UART_Transmit>
            break;
 80018de:	e023      	b.n	8001928 <HAL_UART_RxCpltCallback+0xe8>
                state = STATE_LISTEN;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
                ptr_state = State_Listen;
 80018e6:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <HAL_UART_RxCpltCallback+0x104>)
 80018e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001960 <HAL_UART_RxCpltCallback+0x120>)
 80018ea:	601a      	str	r2, [r3, #0]
            break;
 80018ec:	e01c      	b.n	8001928 <HAL_UART_RxCpltCallback+0xe8>

        case STATE_COORDS:
            memcpy(&posX, &rx_data_arr[0], 4);
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_UART_RxCpltCallback+0x100>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <HAL_UART_RxCpltCallback+0x124>)
 80018f4:	6013      	str	r3, [r2, #0]
            memcpy(&posY, &rx_data_arr[4], 4);
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_UART_RxCpltCallback+0x100>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_UART_RxCpltCallback+0x128>)
 80018fc:	6013      	str	r3, [r2, #0]

            assert_param(posX >= -20.0f && posX <= 20.0f && posY >= -20.0f && posY <= 20.0f);

            state = STATE_MOTORS;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 8001900:	2204      	movs	r2, #4
 8001902:	701a      	strb	r2, [r3, #0]
            ptr_state = State_Motors;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_UART_RxCpltCallback+0x104>)
 8001906:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_UART_RxCpltCallback+0x12c>)
 8001908:	601a      	str	r2, [r3, #0]

            HAL_UART_Transmit(&huart3, CMD_COORDS_RX, 8, 100);
 800190a:	2364      	movs	r3, #100	@ 0x64
 800190c:	2208      	movs	r2, #8
 800190e:	4918      	ldr	r1, [pc, #96]	@ (8001970 <HAL_UART_RxCpltCallback+0x130>)
 8001910:	480e      	ldr	r0, [pc, #56]	@ (800194c <HAL_UART_RxCpltCallback+0x10c>)
 8001912:	f007 f801 	bl	8008918 <HAL_UART_Transmit>
            break;
 8001916:	e007      	b.n	8001928 <HAL_UART_RxCpltCallback+0xe8>

        default:
            // Unexpected state in UART callback
            state = STATE_LISTEN;
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
            ptr_state = State_Listen;
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_UART_RxCpltCallback+0x104>)
 8001920:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_UART_RxCpltCallback+0x120>)
 8001922:	601a      	str	r2, [r3, #0]
            break;
 8001924:	e000      	b.n	8001928 <HAL_UART_RxCpltCallback+0xe8>
        return; // Not from USART3, ignore
 8001926:	bf00      	nop
    }
}
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40020400 	.word	0x40020400
 8001934:	40004800 	.word	0x40004800
 8001938:	20018ce8 	.word	0x20018ce8
 800193c:	0800d014 	.word	0x0800d014
 8001940:	20000204 	.word	0x20000204
 8001944:	20018ce4 	.word	0x20018ce4
 8001948:	080019a5 	.word	0x080019a5
 800194c:	20000500 	.word	0x20000500
 8001950:	0800d020 	.word	0x0800d020
 8001954:	08001a51 	.word	0x08001a51
 8001958:	0800d02c 	.word	0x0800d02c
 800195c:	080019c9 	.word	0x080019c9
 8001960:	08001975 	.word	0x08001975
 8001964:	20000220 	.word	0x20000220
 8001968:	20000224 	.word	0x20000224
 800196c:	080019f9 	.word	0x080019f9
 8001970:	0800d038 	.word	0x0800d038

08001974 <State_Listen>:

void State_Listen(void){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    state = STATE_LISTEN;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <State_Listen+0x20>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <State_Listen+0x24>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
    //flashLED(LD1_GPIO_Port, LD1_Pin, 100, 5);
    //State listen will blink LED1 and wait for UART communications to determine the next state to go into 
    //it will wait for certain preambles
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for preamble
 8001984:	2208      	movs	r2, #8
 8001986:	4905      	ldr	r1, [pc, #20]	@ (800199c <State_Listen+0x28>)
 8001988:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <State_Listen+0x2c>)
 800198a:	f007 f850 	bl	8008a2e <HAL_UART_Receive_IT>
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20018ce8 	.word	0x20018ce8
 8001998:	20018ce4 	.word	0x20018ce4
 800199c:	20000204 	.word	0x20000204
 80019a0:	20000500 	.word	0x20000500

080019a4 <State_Picture>:

void State_Picture(void){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    state = STATE_TAKEPIC;
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <State_Picture+0x18>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
    p3();
 80019ae:	f7ff fb31 	bl	8001014 <p3>
    ptr_state = State_Listen;
 80019b2:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <State_Picture+0x1c>)
 80019b4:	4a03      	ldr	r2, [pc, #12]	@ (80019c4 <State_Picture+0x20>)
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20018ce8 	.word	0x20018ce8
 80019c0:	20018ce4 	.word	0x20018ce4
 80019c4:	08001975 	.word	0x08001975

080019c8 <State_Coord_RX>:

void State_Coord_RX(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
    state = STATE_COORDS;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <State_Coord_RX+0x20>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <State_Coord_RX+0x24>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for 2 floats
 80019d8:	2208      	movs	r2, #8
 80019da:	4905      	ldr	r1, [pc, #20]	@ (80019f0 <State_Coord_RX+0x28>)
 80019dc:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <State_Coord_RX+0x2c>)
 80019de:	f007 f826 	bl	8008a2e <HAL_UART_Receive_IT>
    
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20018ce8 	.word	0x20018ce8
 80019ec:	20018ce4 	.word	0x20018ce4
 80019f0:	20000204 	.word	0x20000204
 80019f4:	20000500 	.word	0x20000500

080019f8 <State_Motors>:

void State_Motors(void){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
    state = STATE_MOTORS;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <State_Motors+0x40>)
 8001a00:	2204      	movs	r2, #4
 8001a02:	701a      	strb	r2, [r3, #0]
    init_home(&myProbe);
 8001a04:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <State_Motors+0x44>)
 8001a06:	f000 fa2b 	bl	8001e60 <init_home>
    Position test = {3, 3, 0};
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <State_Motors+0x48>)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    moveProbe_test(&myProbe, test);
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a18:	4808      	ldr	r0, [pc, #32]	@ (8001a3c <State_Motors+0x44>)
 8001a1a:	f000 f9f3 	bl	8001e04 <moveProbe_test>
    flashLED(LD2_GPIO_Port, LD2_Pin, 100, 5);
 8001a1e:	2305      	movs	r3, #5
 8001a20:	2264      	movs	r2, #100	@ 0x64
 8001a22:	2180      	movs	r1, #128	@ 0x80
 8001a24:	4807      	ldr	r0, [pc, #28]	@ (8001a44 <State_Motors+0x4c>)
 8001a26:	f7ff fb27 	bl	8001078 <flashLED>
    ptr_state = State_Listen;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <State_Motors+0x50>)
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <State_Motors+0x54>)
 8001a2e:	601a      	str	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20018ce8 	.word	0x20018ce8
 8001a3c:	20018cec 	.word	0x20018cec
 8001a40:	0800cf58 	.word	0x0800cf58
 8001a44:	40020400 	.word	0x40020400
 8001a48:	20018ce4 	.word	0x20018ce4
 8001a4c:	08001975 	.word	0x08001975

08001a50 <State_ADC_FFT>:
    //basically a blocker to motor actuate until it receives a go. If receives anything other than go it indicates a problem and should force you to reset.
    ptr_state = NULL;
}


void State_ADC_FFT(void){
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
    //         sendADC_UART();
    //         sendFFT_UART();
    //     }
    // }
    // ptr_state = State_Listen;
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <match_command>:
 * @brief Compare fixed-length 8-byte command strings.
 * @param input     Pointer to received buffer (must be at least 8 bytes)
 * @param command   Pointer to expected command (8-byte string)
 * @return 1 if match, 0 if not
 */
uint8_t match_command(const uint8_t* input, const uint8_t* command) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
    return (memcmp(input, command, 8) == 0);
 8001a68:	2208      	movs	r2, #8
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f008 fd5a 	bl	800a526 <memcmp>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <main>:
Stepper nema;
const Position HOME = {9, 8, 12.2};
	

int main(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	HAL_Init();
 8001a8c:	f001 f976 	bl	8002d7c <HAL_Init>
  	SystemClock_Config();
 8001a90:	f7ff fb14 	bl	80010bc <SystemClock_Config>
	MX_GPIO_Init();
 8001a94:	f7ff fdc6 	bl	8001624 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a98:	f7ff fd9c 	bl	80015d4 <MX_DMA_Init>
	MX_DCMI_Init();
 8001a9c:	f7ff fbcc 	bl	8001238 <MX_DCMI_Init>
	MX_USART3_UART_Init();
 8001aa0:	f7ff fd5e 	bl	8001560 <MX_USART3_UART_Init>
	MX_I2C2_Init();
 8001aa4:	f7ff fc2a 	bl	80012fc <MX_I2C2_Init>
	MX_TIM1_Init();
 8001aa8:	f7ff fc56 	bl	8001358 <MX_TIM1_Init>
	MX_TIM6_Init();
 8001aac:	f7ff fd22 	bl	80014f4 <MX_TIM6_Init>
	MX_ADC1_Init();
 8001ab0:	f7ff fb70 	bl	8001194 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001ab4:	f7ff fbf4 	bl	80012a0 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001ab8:	f7ff fcd0 	bl	800145c <MX_TIM2_Init>
	MX_USB_OTG_FS_USB_Init();
 8001abc:	f7ff fd82 	bl	80015c4 <MX_USB_OTG_FS_USB_Init>
	
	//init FFT
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8001ac0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ac4:	4830      	ldr	r0, [pc, #192]	@ (8001b88 <main+0x100>)
 8001ac6:	f007 ff2d 	bl	8009924 <arm_rfft_fast_init_f32>

	//init probe
	myProbe.lin = &lin;
 8001aca:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <main+0x104>)
 8001acc:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <main+0x108>)
 8001ace:	60da      	str	r2, [r3, #12]
	myProbe.rot = &rot;
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <main+0x104>)
 8001ad2:	4a30      	ldr	r2, [pc, #192]	@ (8001b94 <main+0x10c>)
 8001ad4:	611a      	str	r2, [r3, #16]
	myProbe.nema = &nema;
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <main+0x104>)
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b98 <main+0x110>)
 8001ada:	615a      	str	r2, [r3, #20]
	
    myProbe.probePos = HOME; 
 8001adc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b8c <main+0x104>)
 8001ade:	4a2f      	ldr	r2, [pc, #188]	@ (8001b9c <main+0x114>)
 8001ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    myProbe.lin->Channel = 0;
 8001ae6:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <main+0x104>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	721a      	strb	r2, [r3, #8]
    myProbe.lin->currAngle = 0;
 8001aee:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <main+0x104>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
    myProbe.lin->homeAngle = 0;
 8001af8:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <main+0x104>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]

    myProbe.rot->Channel = 15;
 8001b02:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <main+0x104>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	220f      	movs	r2, #15
 8001b08:	721a      	strb	r2, [r3, #8]
    myProbe.rot->currAngle = 0;
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <main+0x104>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
    myProbe.rot->homeAngle = 0;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <main+0x104>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]

    myProbe.nema->currAngle = HOME.x;
 8001b1e:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8001ba0 <main+0x118>
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <main+0x104>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	edc3 7a01 	vstr	s15, [r3, #4]
    myProbe.nema->homeAngle = HOME.x;
 8001b2e:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8001ba0 <main+0x118>
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <main+0x104>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	edc3 7a00 	vstr	s15, [r3]
	
	ptr_state = State_Listen;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <main+0x11c>)
 8001b40:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <main+0x120>)
 8001b42:	601a      	str	r2, [r3, #0]

	__HAL_DMA_ENABLE_IT(&hdma_dcmi, DMA_IT_TC);
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <main+0x124>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <main+0x124>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0210 	orr.w	r2, r2, #16
 8001b52:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b54:	2039      	movs	r0, #57	@ 0x39
 8001b56:	f001 fd10 	bl	800357a <HAL_NVIC_EnableIRQ>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4814      	ldr	r0, [pc, #80]	@ (8001bb0 <main+0x128>)
 8001b5e:	f005 ff19 	bl	8007994 <HAL_TIM_PWM_Start>
	ov7670_init();
 8001b62:	f000 f9ad 	bl	8001ec0 <ov7670_init>
	ov7_config();
 8001b66:	f000 f9dd 	bl	8001f24 <ov7_config>

	while(1){
		flashLED(LD1_GPIO_Port, LD1_Pin, 500, 1);
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b70:	2101      	movs	r1, #1
 8001b72:	4810      	ldr	r0, [pc, #64]	@ (8001bb4 <main+0x12c>)
 8001b74:	f7ff fa80 	bl	8001078 <flashLED>

		if (ptr_state != NULL) {
 8001b78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <main+0x11c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f4      	beq.n	8001b6a <main+0xe2>
            ptr_state();       // Run the state logic
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <main+0x11c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4798      	blx	r3
		flashLED(LD1_GPIO_Port, LD1_Pin, 500, 1);
 8001b86:	e7f0      	b.n	8001b6a <main+0xe2>
 8001b88:	20000548 	.word	0x20000548
 8001b8c:	20018cec 	.word	0x20018cec
 8001b90:	20018d04 	.word	0x20018d04
 8001b94:	20018d10 	.word	0x20018d10
 8001b98:	20018d1c 	.word	0x20018d1c
 8001b9c:	0800d044 	.word	0x0800d044
 8001ba0:	00000009 	.word	0x00000009
 8001ba4:	20018ce4 	.word	0x20018ce4
 8001ba8:	08001975 	.word	0x08001975
 8001bac:	20000320 	.word	0x20000320
 8001bb0:	20000428 	.word	0x20000428
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <home_Align>:
#include <math.h>

extern const Position HOME;

// Calculates the motor position based on given (x, y) coords
void home_Align(Probe* myProbe){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    // 1. retract the motor
    setServoAngle(myProbe->lin, 0);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001c44 <home_Align+0x8c>
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fa99 	bl	8002100 <setServoAngle>
    myProbe->lin->currAngle = 0; 
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    HAL_Delay(10); 
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f001 f941 	bl	8002e60 <HAL_Delay>

    // 2. rotate to home angle
    setServoAngle(myProbe->rot, 0);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001c44 <home_Align+0x8c>
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fa8a 	bl	8002100 <setServoAngle>
    myProbe->rot->currAngle = 0; 
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    HAL_Delay(10); 
 8001bf6:	200a      	movs	r0, #10
 8001bf8:	f001 f932 	bl	8002e60 <HAL_Delay>

    // 3. retract to home direction in stepper
    float move_cm = -(myProbe->nema->currAngle - HOME.x); // move right
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c04:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <home_Align+0x90>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c14:	eef1 7a67 	vneg.f32	s15, s15
 8001c18:	edc7 7a03 	vstr	s15, [r7, #12]
    stp_moveDistance((myProbe->nema), move_cm);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fbfd 	bl	8002424 <stp_moveDistance>
    myProbe->nema->currAngle = myProbe->nema->homeAngle;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	605a      	str	r2, [r3, #4]
    HAL_Delay(10); 
 8001c36:	200a      	movs	r0, #10
 8001c38:	f001 f912 	bl	8002e60 <HAL_Delay>
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	00000000 	.word	0x00000000
 8001c48:	0800d044 	.word	0x0800d044

08001c4c <x_align>:

void x_align(Probe* myProbe, Position desiredLoc){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	4638      	mov	r0, r7
 8001c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    float move_cm = -(HOME.x - desiredLoc.x);
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <x_align+0x58>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6a:	edc7 7a05 	vstr	s15, [r7, #20]
    if(move_cm > X_MAX){
 8001c6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c72:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8001c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	dd01      	ble.n	8001c84 <x_align+0x38>
        move_cm = X_MAX;
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <x_align+0x5c>)
 8001c82:	617b      	str	r3, [r7, #20]
    }
    stp_moveDistance(((myProbe->nema)), move_cm);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	ed97 0a05 	vldr	s0, [r7, #20]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fbc9 	bl	8002424 <stp_moveDistance>
    myProbe->nema->currAngle = move_cm; 
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	605a      	str	r2, [r3, #4]
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	0800d044 	.word	0x0800d044
 8001ca8:	41500000 	.word	0x41500000
 8001cac:	00000000 	.word	0x00000000

08001cb0 <theta_align>:

void theta_align(Probe* myProbe, Position desiredLoc){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	4638      	mov	r0, r7
 8001cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    float theta_rad = atan(desiredLoc.x / H);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc4f 	bl	8000564 <__aeabi_i2d>
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <theta_align+0xa0>)
 8001ccc:	f7fe fdde 	bl	800088c <__aeabi_ddiv>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	ec43 2b17 	vmov	d7, r2, r3
 8001cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cdc:	eef0 0a67 	vmov.f32	s1, s15
 8001ce0:	f00a fd2e 	bl	800c740 <atan>
 8001ce4:	ec53 2b10 	vmov	r2, r3, d0
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7fe ff7c 	bl	8000be8 <__aeabi_d2f>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	613b      	str	r3, [r7, #16]
    float theta_deg = theta_rad * DEGREE_CONVERSION;
 8001cf4:	6938      	ldr	r0, [r7, #16]
 8001cf6:	f7fe fc47 	bl	8000588 <__aeabi_f2d>
 8001cfa:	a313      	add	r3, pc, #76	@ (adr r3, 8001d48 <theta_align+0x98>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fc9a 	bl	8000638 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7fe ff6c 	bl	8000be8 <__aeabi_d2f>
 8001d10:	4603      	mov	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]
    if(theta_deg > THETA_MAX){
 8001d14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d18:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001d54 <theta_align+0xa4>
 8001d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	dd01      	ble.n	8001d2a <theta_align+0x7a>
        theta_deg = THETA_MAX;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <theta_align+0xa8>)
 8001d28:	617b      	str	r3, [r7, #20]
    }
    setServoAngle(myProbe->rot, theta_deg);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f9e4 	bl	8002100 <setServoAngle>
    myProbe->rot->currAngle = theta_deg;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]
}
 8001d40:	bf00      	nop
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	1a63c1f8 	.word	0x1a63c1f8
 8001d4c:	404ca5dc 	.word	0x404ca5dc
 8001d50:	40290000 	.word	0x40290000
 8001d54:	42080000 	.word	0x42080000
 8001d58:	42080000 	.word	0x42080000
 8001d5c:	00000000 	.word	0x00000000

08001d60 <R_align>:

void R_align(Probe* myProbe, Position desiredLoc){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	4638      	mov	r0, r7
 8001d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    float hypotenuse = hypot(H, desiredLoc.y);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbf7 	bl	8000564 <__aeabi_i2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	ec43 2b11 	vmov	d1, r2, r3
 8001d7e:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8001de8 <R_align+0x88>
 8001d82:	f00a fca9 	bl	800c6d8 <hypot>
 8001d86:	ec53 2b10 	vmov	r2, r3, d0
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe ff2b 	bl	8000be8 <__aeabi_d2f>
 8001d92:	4603      	mov	r3, r0
 8001d94:	617b      	str	r3, [r7, #20]
    float move_cm = hypotenuse - PROBE_LEN;
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7fe fbf6 	bl	8000588 <__aeabi_f2d>
 8001d9c:	a315      	add	r3, pc, #84	@ (adr r3, 8001df4 <R_align+0x94>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe fa91 	bl	80002c8 <__aeabi_dsub>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe ff1b 	bl	8000be8 <__aeabi_d2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]
    sv_moveDistance(myProbe->lin, move_cm); // automatically updates cur_angle
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	ed97 0a04 	vldr	s0, [r7, #16]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fa06 	bl	80021d0 <sv_moveDistance>
    if(move_cm > DR_MAX){
 8001dc4:	6938      	ldr	r0, [r7, #16]
 8001dc6:	f7fe fbdf 	bl	8000588 <__aeabi_f2d>
 8001dca:	a30c      	add	r3, pc, #48	@ (adr r3, 8001dfc <R_align+0x9c>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fec2 	bl	8000b58 <__aeabi_dcmpgt>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d100      	bne.n	8001ddc <R_align+0x7c>
        move_cm = DR_MAX; 
    }
}
 8001dda:	e001      	b.n	8001de0 <R_align+0x80>
        move_cm = DR_MAX; 
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <R_align+0x90>)
 8001dde:	613b      	str	r3, [r7, #16]
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	00000000 	.word	0x00000000
 8001dec:	40290000 	.word	0x40290000
 8001df0:	402ccccd 	.word	0x402ccccd
 8001df4:	9999999a 	.word	0x9999999a
 8001df8:	40289999 	.word	0x40289999
 8001dfc:	9999999a 	.word	0x9999999a
 8001e00:	40059999 	.word	0x40059999

08001e04 <moveProbe_test>:

// assume probe at home
void moveProbe_test(Probe* myProbe, Position desiredLoc){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	4638      	mov	r0, r7
 8001e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    // 1. send home
    home_Align(myProbe);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fed0 	bl	8001bb8 <home_Align>

    // 2. align stepper, theta, R in order
    x_align(myProbe, desiredLoc);
 8001e18:	463b      	mov	r3, r7
 8001e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff ff15 	bl	8001c4c <x_align>
    HAL_Delay(100); 
 8001e22:	2064      	movs	r0, #100	@ 0x64
 8001e24:	f001 f81c 	bl	8002e60 <HAL_Delay>
    theta_align(myProbe, desiredLoc);
 8001e28:	463b      	mov	r3, r7
 8001e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7ff ff3f 	bl	8001cb0 <theta_align>
    HAL_Delay(100); 
 8001e32:	2064      	movs	r0, #100	@ 0x64
 8001e34:	f001 f814 	bl	8002e60 <HAL_Delay>
    R_align(myProbe, desiredLoc);
 8001e38:	463b      	mov	r3, r7
 8001e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff ff8f 	bl	8001d60 <R_align>
    HAL_Delay(100); 
 8001e42:	2064      	movs	r0, #100	@ 0x64
 8001e44:	f001 f80c 	bl	8002e60 <HAL_Delay>

    // 3. wait
    HAL_Delay(3000); 
 8001e48:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e4c:	f001 f808 	bl	8002e60 <HAL_Delay>

    // 4. Align back home
    home_Align(myProbe);
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff feb1 	bl	8001bb8 <home_Align>

}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <init_home>:

void init_home(Probe* myProbe){
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    myProbe->nema->homeAngle = HOME.x;
 8001e68:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <init_home+0x5c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	ee07 2a90 	vmov	s15, r2
 8001e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e78:	edc3 7a00 	vstr	s15, [r3]
    myProbe->nema->currAngle = myProbe->nema->homeAngle;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	605a      	str	r2, [r3, #4]

    myProbe->lin->currAngle = 0; 
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
    myProbe->lin->homeAngle = 0; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
    myProbe->rot->currAngle = 0; 
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
    myProbe->rot->homeAngle = 0; 
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]

}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	0800d044 	.word	0x0800d044

08001ec0 <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09a      	sub	sp, #104	@ 0x68
 8001ec4:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 8001ec6:	4814      	ldr	r0, [pc, #80]	@ (8001f18 <ov7670_init+0x58>)
 8001ec8:	f7ff f8c2 	bl	8001050 <print_msg>
  val = ov7670_read(0x0A);
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f000 f875 	bl	8001fbc <ov7670_read>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if (val != 0x76) {
 8001ed8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001edc:	2b76      	cmp	r3, #118	@ 0x76
 8001ede:	d00c      	beq.n	8001efa <ov7670_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8001ee0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	490d      	ldr	r1, [pc, #52]	@ (8001f1c <ov7670_init+0x5c>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f008 fab9 	bl	800a460 <siprintf>
    print_msg(msg);
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f8ad 	bl	8001050 <print_msg>
    return 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e009      	b.n	8001f0e <ov7670_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 8001efa:	463b      	mov	r3, r7
 8001efc:	4908      	ldr	r1, [pc, #32]	@ (8001f20 <ov7670_init+0x60>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f008 faae 	bl	800a460 <siprintf>
    print_msg(msg);
 8001f04:	463b      	mov	r3, r7
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f8a2 	bl	8001050 <print_msg>

  // Your code here

  //

  return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3768      	adds	r7, #104	@ 0x68
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	0800cf64 	.word	0x0800cf64
 8001f1c:	0800cf70 	.word	0x0800cf70
 8001f20:	0800cf8c 	.word	0x0800cf8c

08001f24 <ov7_config>:
    }

    print_msg("OV7670 Register Read Complete.\n");
}

void ov7_config(){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	@ 0x28
 8001f28:	af02      	add	r7, sp, #8
	char msg[20];
	uint8_t data[2];
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e037      	b.n	8001fa0 <ov7_config+0x7c>
		data[0] = OV7670_reg[i][0]; 
 8001f30:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb0 <ov7_config+0x8c>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001f38:	703b      	strb	r3, [r7, #0]
		data[1] = OV7670_reg[i][1];
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb0 <ov7_config+0x8c>)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	707b      	strb	r3, [r7, #1]
		HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); //send address frame
 8001f46:	463a      	mov	r2, r7
 8001f48:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2302      	movs	r3, #2
 8001f50:	2142      	movs	r1, #66	@ 0x42
 8001f52:	4818      	ldr	r0, [pc, #96]	@ (8001fb4 <ov7_config+0x90>)
 8001f54:	f003 fe52 	bl	8005bfc <HAL_I2C_Master_Transmit>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8001f5c:	e017      	b.n	8001f8e <ov7_config+0x6a>
			 sprintf(msg, "Error hi\n");
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4915      	ldr	r1, [pc, #84]	@ (8001fb8 <ov7_config+0x94>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f008 fa7c 	bl	800a460 <siprintf>
       print_msg(msg);
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f870 	bl	8001050 <print_msg>
       HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f74:	f000 ff74 	bl	8002e60 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); 
 8001f78:	463a      	mov	r2, r7
 8001f7a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2302      	movs	r3, #2
 8001f82:	2142      	movs	r1, #66	@ 0x42
 8001f84:	480b      	ldr	r0, [pc, #44]	@ (8001fb4 <ov7_config+0x90>)
 8001f86:	f003 fe39 	bl	8005bfc <HAL_I2C_Master_Transmit>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8001f8e:	7efb      	ldrb	r3, [r7, #27]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e4      	bne.n	8001f5e <ov7_config+0x3a>
    }
		HAL_Delay(10);
 8001f94:	200a      	movs	r0, #10
 8001f96:	f000 ff63 	bl	8002e60 <HAL_Delay>
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b79      	cmp	r3, #121	@ 0x79
 8001fa4:	ddc4      	ble.n	8001f30 <ov7_config+0xc>
	}
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	0800d050 	.word	0x0800d050
 8001fb4:	200003d4 	.word	0x200003d4
 8001fb8:	0800cfec 	.word	0x0800cfec

08001fbc <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09e      	sub	sp, #120	@ 0x78
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
		char msg[100];
    // Transmit register
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 8001fc6:	1dfa      	adds	r2, r7, #7
 8001fc8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2301      	movs	r3, #1
 8001fd0:	2142      	movs	r1, #66	@ 0x42
 8001fd2:	481b      	ldr	r0, [pc, #108]	@ (8002040 <ov7670_read+0x84>)
 8001fd4:	f003 fe12 	bl	8005bfc <HAL_I2C_Master_Transmit>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8001fde:	e01a      	b.n	8002016 <ov7670_read+0x5a>
			 sprintf(msg, "Error\n");
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	4917      	ldr	r1, [pc, #92]	@ (8002044 <ov7670_read+0x88>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f008 fa3a 	bl	800a460 <siprintf>
       print_msg(msg);
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f82d 	bl	8001050 <print_msg>
       HAL_Delay(1000);
 8001ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ffa:	f000 ff31 	bl	8002e60 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 8001ffe:	1dfa      	adds	r2, r7, #7
 8002000:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2301      	movs	r3, #1
 8002008:	2142      	movs	r1, #66	@ 0x42
 800200a:	480d      	ldr	r0, [pc, #52]	@ (8002040 <ov7670_read+0x84>)
 800200c:	f003 fdf6 	bl	8005bfc <HAL_I2C_Master_Transmit>
 8002010:	4603      	mov	r3, r0
 8002012:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8002016:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1e0      	bne.n	8001fe0 <ov7670_read+0x24>
    }
    // Read data
    HAL_I2C_Master_Receive(&hi2c2, (reADDR_OV7670), &data, 1, HAL_MAX_DELAY);
 800201e:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2301      	movs	r3, #1
 800202a:	2143      	movs	r1, #67	@ 0x43
 800202c:	4804      	ldr	r0, [pc, #16]	@ (8002040 <ov7670_read+0x84>)
 800202e:	f003 fee3 	bl	8005df8 <HAL_I2C_Master_Receive>
    return data;
 8002032:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 8002036:	4618      	mov	r0, r3
 8002038:	3770      	adds	r7, #112	@ 0x70
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200003d4 	.word	0x200003d4
 8002044:	0800cff8 	.word	0x0800cff8

08002048 <ov7670_snapshot>:




void ov7670_snapshot(uint16_t *buff){
 8002048:	b580      	push	{r7, lr}
 800204a:	b09c      	sub	sp, #112	@ 0x70
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  // Your code here
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 8002050:	4a0e      	ldr	r2, [pc, #56]	@ (800208c <ov7670_snapshot+0x44>)
 8002052:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 8002056:	2102      	movs	r1, #2
 8002058:	480d      	ldr	r0, [pc, #52]	@ (8002090 <ov7670_snapshot+0x48>)
 800205a:	f001 faa9 	bl	80035b0 <HAL_DCMI_Start_DMA>
 800205e:	4603      	mov	r3, r0
 8002060:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 8002064:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <ov7670_snapshot+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	4908      	ldr	r1, [pc, #32]	@ (8002094 <ov7670_snapshot+0x4c>)
 8002072:	4618      	mov	r0, r3
 8002074:	f008 f9f4 	bl	800a460 <siprintf>
       print_msg(msg);
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ffe7 	bl	8001050 <print_msg>
    }
}//goes back to main for waiting for interrupt
 8002082:	bf00      	nop
 8002084:	3770      	adds	r7, #112	@ 0x70
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000560 	.word	0x20000560
 8002090:	200002d0 	.word	0x200002d0
 8002094:	0800d000 	.word	0x0800d000

08002098 <PCA9685_SetPWM>:
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
}

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af04      	add	r7, sp, #16
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
 80020a2:	460b      	mov	r3, r1
 80020a4:	80bb      	strh	r3, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	3306      	adds	r3, #6
 80020b2:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 80020b4:	88bb      	ldrh	r3, [r7, #4]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 80020ba:	88bb      	ldrh	r3, [r7, #4]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	230a      	movs	r3, #10
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	2304      	movs	r3, #4
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2301      	movs	r3, #1
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	4803      	ldr	r0, [pc, #12]	@ (80020f8 <PCA9685_SetPWM+0x60>)
 80020ec:	f004 f8b6 	bl	800625c <HAL_I2C_Mem_Write>
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200003d4 	.word	0x200003d4
 80020fc:	00000000 	.word	0x00000000

08002100 <setServoAngle>:
  Value = (205.0 + (Angle / 180.0) * (410.0 - 205.0));
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
}

void setServoAngle(Servo* sv, float Angle)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	ed87 0a00 	vstr	s0, [r7]
  // this one is for the position
  float Value;
    if (Angle < 0) Angle = 0;
 800210c:	edd7 7a00 	vldr	s15, [r7]
 8002110:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d502      	bpl.n	8002120 <setServoAngle+0x20>
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	603b      	str	r3, [r7, #0]
    if (Angle > 180) Angle = 180;
 8002120:	edd7 7a00 	vldr	s15, [r7]
 8002124:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80021c0 <setServoAngle+0xc0>
 8002128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	dd01      	ble.n	8002136 <setServoAngle+0x36>
 8002132:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <setServoAngle+0xc4>)
 8002134:	603b      	str	r3, [r7, #0]

    float Rev_Angle = 180 - Angle; //in order to make positive values forward and negative values backwards ;)
 8002136:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80021c0 <setServoAngle+0xc0>
 800213a:	edd7 7a00 	vldr	s15, [r7]
 800213e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002142:	edc7 7a03 	vstr	s15, [r7, #12]

  Value = (Rev_Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7fe fa1e 	bl	8000588 <__aeabi_f2d>
 800214c:	a318      	add	r3, pc, #96	@ (adr r3, 80021b0 <setServoAngle+0xb0>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fa71 	bl	8000638 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <setServoAngle+0xc8>)
 8002164:	f7fe fb92 	bl	800088c <__aeabi_ddiv>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	a311      	add	r3, pc, #68	@ (adr r3, 80021b8 <setServoAngle+0xb8>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe f8a9 	bl	80002cc <__adddf3>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fd31 	bl	8000be8 <__aeabi_d2f>
 8002186:	4603      	mov	r3, r0
 8002188:	60bb      	str	r3, [r7, #8]
  PCA9685_SetPWM(sv->Channel, 0, (uint16_t)Value);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7a1b      	ldrb	r3, [r3, #8]
 800218e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002196:	ee17 2a90 	vmov	r2, s15
 800219a:	b292      	uxth	r2, r2
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff7a 	bl	8002098 <PCA9685_SetPWM>
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	f3af 8000 	nop.w
 80021b0:	00000000 	.word	0x00000000
 80021b4:	40799800 	.word	0x40799800
 80021b8:	9999999a 	.word	0x9999999a
 80021bc:	40599999 	.word	0x40599999
 80021c0:	43340000 	.word	0x43340000
 80021c4:	43340000 	.word	0x43340000
 80021c8:	40668000 	.word	0x40668000
 80021cc:	00000000 	.word	0x00000000

080021d0 <sv_moveDistance>:
  sv->homeAngle = homeAngle;
  setServoAngle(sv, homeAngle);
}

//pass in the current Angle of the servo, and modify that value by its angle equivalent of the distance 
void sv_moveDistance(Servo* sv, float distance_cm) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	ed87 0a00 	vstr	s0, [r7]

  //theoretically we have around 2.8cm per 180 deg
  //experimentally we have around 2.52cm per 180 deg. 

    float delta_angle = distance_cm / 0.01544; // (0.014)
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	f7fe f9d3 	bl	8000588 <__aeabi_f2d>
 80021e2:	a323      	add	r3, pc, #140	@ (adr r3, 8002270 <sv_moveDistance+0xa0>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fb50 	bl	800088c <__aeabi_ddiv>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fcf8 	bl	8000be8 <__aeabi_d2f>
 80021f8:	4603      	mov	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]


    
    if(delta_angle + sv->currAngle > 0 && delta_angle + sv->currAngle <= 180){
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	edd7 7a03 	vldr	s15, [r7, #12]
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	dd18      	ble.n	8002246 <sv_moveDistance+0x76>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	edd7 7a03 	vldr	s15, [r7, #12]
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002268 <sv_moveDistance+0x98>
 8002226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	d80a      	bhi.n	8002246 <sv_moveDistance+0x76>
      sv->currAngle += delta_angle;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	ed93 7a00 	vldr	s14, [r3]
 8002236:	edd7 7a03 	vldr	s15, [r7, #12]
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	edc3 7a00 	vstr	s15, [r3]
 8002244:	e003      	b.n	800224e <sv_moveDistance+0x7e>
    }else{
      //print_msg("Angle change request exceeded bounds");
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002246:	2101      	movs	r1, #1
 8002248:	4808      	ldr	r0, [pc, #32]	@ (800226c <sv_moveDistance+0x9c>)
 800224a:	f003 fb54 	bl	80058f6 <HAL_GPIO_TogglePin>

    }

    setServoAngle(sv, sv->currAngle);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eeb0 0a67 	vmov.f32	s0, s15
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff51 	bl	8002100 <setServoAngle>
  
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	43340000 	.word	0x43340000
 800226c:	40020400 	.word	0x40020400
 8002270:	b866e43b 	.word	0xb866e43b
 8002274:	3f8f9f01 	.word	0x3f8f9f01

08002278 <stp_Step>:

#include "steppermotors.h"
#include "stdlib.h"


void stp_Step(Stepper* motor, int step) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
   switch(step % 4) {
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	425a      	negs	r2, r3
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	bf58      	it	pl
 8002290:	4253      	negpl	r3, r2
 8002292:	2b03      	cmp	r3, #3
 8002294:	d85e      	bhi.n	8002354 <stp_Step+0xdc>
 8002296:	a201      	add	r2, pc, #4	@ (adr r2, 800229c <stp_Step+0x24>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022d7 	.word	0x080022d7
 80022a4:	08002301 	.word	0x08002301
 80022a8:	0800232b 	.word	0x0800232b
       case 0:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 80022ac:	2201      	movs	r2, #1
 80022ae:	2108      	movs	r1, #8
 80022b0:	482a      	ldr	r0, [pc, #168]	@ (800235c <stp_Step+0xe4>)
 80022b2:	f003 fb07 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2120      	movs	r1, #32
 80022ba:	4828      	ldr	r0, [pc, #160]	@ (800235c <stp_Step+0xe4>)
 80022bc:	f003 fb02 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	2140      	movs	r1, #64	@ 0x40
 80022c4:	4825      	ldr	r0, [pc, #148]	@ (800235c <stp_Step+0xe4>)
 80022c6:	f003 fafd 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2180      	movs	r1, #128	@ 0x80
 80022ce:	4823      	ldr	r0, [pc, #140]	@ (800235c <stp_Step+0xe4>)
 80022d0:	f003 faf8 	bl	80058c4 <HAL_GPIO_WritePin>
           break;
 80022d4:	e03e      	b.n	8002354 <stp_Step+0xdc>
       case 1:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2108      	movs	r1, #8
 80022da:	4820      	ldr	r0, [pc, #128]	@ (800235c <stp_Step+0xe4>)
 80022dc:	f003 faf2 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 80022e0:	2201      	movs	r2, #1
 80022e2:	2120      	movs	r1, #32
 80022e4:	481d      	ldr	r0, [pc, #116]	@ (800235c <stp_Step+0xe4>)
 80022e6:	f003 faed 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	2140      	movs	r1, #64	@ 0x40
 80022ee:	481b      	ldr	r0, [pc, #108]	@ (800235c <stp_Step+0xe4>)
 80022f0:	f003 fae8 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2180      	movs	r1, #128	@ 0x80
 80022f8:	4818      	ldr	r0, [pc, #96]	@ (800235c <stp_Step+0xe4>)
 80022fa:	f003 fae3 	bl	80058c4 <HAL_GPIO_WritePin>
           break;
 80022fe:	e029      	b.n	8002354 <stp_Step+0xdc>
       case 2:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	2108      	movs	r1, #8
 8002304:	4815      	ldr	r0, [pc, #84]	@ (800235c <stp_Step+0xe4>)
 8002306:	f003 fadd 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	2120      	movs	r1, #32
 800230e:	4813      	ldr	r0, [pc, #76]	@ (800235c <stp_Step+0xe4>)
 8002310:	f003 fad8 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	@ 0x40
 8002318:	4810      	ldr	r0, [pc, #64]	@ (800235c <stp_Step+0xe4>)
 800231a:	f003 fad3 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 800231e:	2201      	movs	r2, #1
 8002320:	2180      	movs	r1, #128	@ 0x80
 8002322:	480e      	ldr	r0, [pc, #56]	@ (800235c <stp_Step+0xe4>)
 8002324:	f003 face 	bl	80058c4 <HAL_GPIO_WritePin>
           break;
 8002328:	e014      	b.n	8002354 <stp_Step+0xdc>
       case 3:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 800232a:	2201      	movs	r2, #1
 800232c:	2108      	movs	r1, #8
 800232e:	480b      	ldr	r0, [pc, #44]	@ (800235c <stp_Step+0xe4>)
 8002330:	f003 fac8 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	2120      	movs	r1, #32
 8002338:	4808      	ldr	r0, [pc, #32]	@ (800235c <stp_Step+0xe4>)
 800233a:	f003 fac3 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	2140      	movs	r1, #64	@ 0x40
 8002342:	4806      	ldr	r0, [pc, #24]	@ (800235c <stp_Step+0xe4>)
 8002344:	f003 fabe 	bl	80058c4 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 8002348:	2201      	movs	r2, #1
 800234a:	2180      	movs	r1, #128	@ 0x80
 800234c:	4803      	ldr	r0, [pc, #12]	@ (800235c <stp_Step+0xe4>)
 800234e:	f003 fab9 	bl	80058c4 <HAL_GPIO_WritePin>
           break;
 8002352:	bf00      	nop
   }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40020000 	.word	0x40020000

08002360 <stp_Stop>:
   nema->homeAngle = 0;
   nema->currAngle = 0;
}


void stp_Stop(Stepper* motor) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	2108      	movs	r1, #8
 800236c:	480a      	ldr	r0, [pc, #40]	@ (8002398 <stp_Stop+0x38>)
 800236e:	f003 faa9 	bl	80058c4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2120      	movs	r1, #32
 8002376:	4808      	ldr	r0, [pc, #32]	@ (8002398 <stp_Stop+0x38>)
 8002378:	f003 faa4 	bl	80058c4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	2140      	movs	r1, #64	@ 0x40
 8002380:	4805      	ldr	r0, [pc, #20]	@ (8002398 <stp_Stop+0x38>)
 8002382:	f003 fa9f 	bl	80058c4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	4803      	ldr	r0, [pc, #12]	@ (8002398 <stp_Stop+0x38>)
 800238c:	f003 fa9a 	bl	80058c4 <HAL_GPIO_WritePin>

}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40020000 	.word	0x40020000

0800239c <stp_Move>:

void stp_Move(Stepper* motor, int steps, int delay) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
   int direction = (steps > 0) ? 1 : -1; // Determine direction
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dd01      	ble.n	80023b2 <stp_Move+0x16>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e001      	b.n	80023b6 <stp_Move+0x1a>
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	61bb      	str	r3, [r7, #24]
   int stepCount = abs(steps);  // Get absolute step count
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bfb8      	it	lt
 80023be:	425b      	neglt	r3, r3
 80023c0:	617b      	str	r3, [r7, #20]

   for (int i = 0; i < stepCount; i++) {
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e021      	b.n	800240c <stp_Move+0x70>
       int stepIndex = (direction > 0) ? (i % 4) : (3 - (i % 4));
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	dd08      	ble.n	80023e0 <stp_Move+0x44>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	425a      	negs	r2, r3
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	f002 0203 	and.w	r2, r2, #3
 80023da:	bf58      	it	pl
 80023dc:	4253      	negpl	r3, r2
 80023de:	e009      	b.n	80023f4 <stp_Move+0x58>
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	425a      	negs	r2, r3
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	bf58      	it	pl
 80023ee:	4253      	negpl	r3, r2
 80023f0:	f1c3 0303 	rsb	r3, r3, #3
 80023f4:	613b      	str	r3, [r7, #16]
       stp_Step(motor, stepIndex);
 80023f6:	6939      	ldr	r1, [r7, #16]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff ff3d 	bl	8002278 <stp_Step>
       HAL_Delay(delay); // Speed control
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fd2d 	bl	8002e60 <HAL_Delay>
   for (int i = 0; i < stepCount; i++) {
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	dbd9      	blt.n	80023c8 <stp_Move+0x2c>
   }
   stp_Stop(motor);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7ff ffa3 	bl	8002360 <stp_Stop>
}
 800241a:	bf00      	nop
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <stp_moveDistance>:

void stp_moveDistance(Stepper* motor, float distance_cm){
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	ed87 0a00 	vstr	s0, [r7]

   int convertedSteps = distance_cm * NEMA_DISTANCE_TO_STEPS;
 8002430:	edd7 7a00 	vldr	s15, [r7]
 8002434:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002464 <stp_moveDistance+0x40>
 8002438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002440:	ee17 3a90 	vmov	r3, s15
 8002444:	60fb      	str	r3, [r7, #12]
   stp_Move(motor, convertedSteps, 5);
 8002446:	2205      	movs	r2, #5
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa6 	bl	800239c <stp_Move>
   HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002450:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002454:	4804      	ldr	r0, [pc, #16]	@ (8002468 <stp_moveDistance+0x44>)
 8002456:	f003 fa4e 	bl	80058f6 <HAL_GPIO_TogglePin>

}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	42440000 	.word	0x42440000
 8002468:	40020400 	.word	0x40020400

0800246c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	4a0f      	ldr	r2, [pc, #60]	@ (80024b8 <HAL_MspInit+0x4c>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002480:	6453      	str	r3, [r2, #68]	@ 0x44
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	@ 0x40
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	@ 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002598 <HAL_ADC_MspInit+0xdc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d158      	bne.n	8002590 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b2e      	ldr	r3, [pc, #184]	@ (800259c <HAL_ADC_MspInit+0xe0>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	4a2d      	ldr	r2, [pc, #180]	@ (800259c <HAL_ADC_MspInit+0xe0>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ee:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_ADC_MspInit+0xe0>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b27      	ldr	r3, [pc, #156]	@ (800259c <HAL_ADC_MspInit+0xe0>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a26      	ldr	r2, [pc, #152]	@ (800259c <HAL_ADC_MspInit+0xe0>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <HAL_ADC_MspInit+0xe0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002516:	2301      	movs	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800251a:	2303      	movs	r3, #3
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	481d      	ldr	r0, [pc, #116]	@ (80025a0 <HAL_ADC_MspInit+0xe4>)
 800252a:	f003 f837 	bl	800559c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800252e:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002530:	4a1d      	ldr	r2, [pc, #116]	@ (80025a8 <HAL_ADC_MspInit+0xec>)
 8002532:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002534:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002536:	2200      	movs	r2, #0
 8002538:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800253a:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002540:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002546:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002548:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800254c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002554:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800255c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002560:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002564:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002568:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800256c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002574:	480b      	ldr	r0, [pc, #44]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002576:	f001 fa87 	bl	8003a88 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002580:	f7ff f958 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a07      	ldr	r2, [pc, #28]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 8002588:	639a      	str	r2, [r3, #56]	@ 0x38
 800258a:	4a06      	ldr	r2, [pc, #24]	@ (80025a4 <HAL_ADC_MspInit+0xe8>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	@ 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40012000 	.word	0x40012000
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	20000270 	.word	0x20000270
 80025a8:	40026410 	.word	0x40026410

080025ac <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08e      	sub	sp, #56	@ 0x38
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a78      	ldr	r2, [pc, #480]	@ (80027ac <HAL_DCMI_MspInit+0x200>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f040 80e9 	bne.w	80027a2 <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 80025d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d8:	4a75      	ldr	r2, [pc, #468]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6353      	str	r3, [r2, #52]	@ 0x34
 80025e0:	4b73      	ldr	r3, [pc, #460]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 80025e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	4b6f      	ldr	r3, [pc, #444]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	4a6e      	ldr	r2, [pc, #440]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fc:	4b6c      	ldr	r3, [pc, #432]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	4a67      	ldr	r2, [pc, #412]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6313      	str	r3, [r2, #48]	@ 0x30
 8002618:	4b65      	ldr	r3, [pc, #404]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	4b61      	ldr	r3, [pc, #388]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	4a60      	ldr	r2, [pc, #384]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	6313      	str	r3, [r2, #48]	@ 0x30
 8002634:	4b5e      	ldr	r3, [pc, #376]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	4b5a      	ldr	r3, [pc, #360]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	4a59      	ldr	r2, [pc, #356]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002650:	4b57      	ldr	r3, [pc, #348]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	4b53      	ldr	r3, [pc, #332]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002664:	4a52      	ldr	r2, [pc, #328]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 8002666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800266a:	6313      	str	r3, [r2, #48]	@ 0x30
 800266c:	4b50      	ldr	r3, [pc, #320]	@ (80027b0 <HAL_DCMI_MspInit+0x204>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002678:	2370      	movs	r3, #112	@ 0x70
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002688:	230d      	movs	r3, #13
 800268a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800268c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002690:	4619      	mov	r1, r3
 8002692:	4848      	ldr	r0, [pc, #288]	@ (80027b4 <HAL_DCMI_MspInit+0x208>)
 8002694:	f002 ff82 	bl	800559c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002698:	2350      	movs	r3, #80	@ 0x50
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	2300      	movs	r3, #0
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026a8:	230d      	movs	r3, #13
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b0:	4619      	mov	r1, r3
 80026b2:	4841      	ldr	r0, [pc, #260]	@ (80027b8 <HAL_DCMI_MspInit+0x20c>)
 80026b4:	f002 ff72 	bl	800559c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026b8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026ca:	230d      	movs	r3, #13
 80026cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d2:	4619      	mov	r1, r3
 80026d4:	4839      	ldr	r0, [pc, #228]	@ (80027bc <HAL_DCMI_MspInit+0x210>)
 80026d6:	f002 ff61 	bl	800559c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026da:	2308      	movs	r3, #8
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026ea:	230d      	movs	r3, #13
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f2:	4619      	mov	r1, r3
 80026f4:	4832      	ldr	r0, [pc, #200]	@ (80027c0 <HAL_DCMI_MspInit+0x214>)
 80026f6:	f002 ff51 	bl	800559c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800270c:	230d      	movs	r3, #13
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002714:	4619      	mov	r1, r3
 8002716:	482b      	ldr	r0, [pc, #172]	@ (80027c4 <HAL_DCMI_MspInit+0x218>)
 8002718:	f002 ff40 	bl	800559c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800271c:	4b2a      	ldr	r3, [pc, #168]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 800271e:	4a2b      	ldr	r2, [pc, #172]	@ (80027cc <HAL_DCMI_MspInit+0x220>)
 8002720:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002722:	4b29      	ldr	r3, [pc, #164]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002724:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002728:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272a:	4b27      	ldr	r3, [pc, #156]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	4b25      	ldr	r3, [pc, #148]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002736:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800273c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800273e:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002740:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002744:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002748:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800274c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800274e:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002754:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002756:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002758:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800275c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800275e:	4b1a      	ldr	r3, [pc, #104]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002760:	2204      	movs	r2, #4
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002766:	2203      	movs	r2, #3
 8002768:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800276a:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 800276c:	2200      	movs	r2, #0
 800276e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002770:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002776:	4814      	ldr	r0, [pc, #80]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 8002778:	f001 f986 	bl	8003a88 <HAL_DMA_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8002782:	f7ff f857 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a0f      	ldr	r2, [pc, #60]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 800278a:	649a      	str	r2, [r3, #72]	@ 0x48
 800278c:	4a0e      	ldr	r2, [pc, #56]	@ (80027c8 <HAL_DCMI_MspInit+0x21c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	204e      	movs	r0, #78	@ 0x4e
 8002798:	f000 fed3 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800279c:	204e      	movs	r0, #78	@ 0x4e
 800279e:	f000 feec 	bl	800357a <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 80027a2:	bf00      	nop
 80027a4:	3738      	adds	r7, #56	@ 0x38
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	50050000 	.word	0x50050000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40021800 	.word	0x40021800
 80027c8:	20000320 	.word	0x20000320
 80027cc:	40026428 	.word	0x40026428

080027d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	@ 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a32      	ldr	r2, [pc, #200]	@ (80028b8 <HAL_I2C_MspInit+0xe8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12d      	bne.n	800284e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	4a30      	ldr	r2, [pc, #192]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	6313      	str	r3, [r2, #48]	@ 0x30
 8002802:	4b2e      	ldr	r3, [pc, #184]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800280e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002814:	2312      	movs	r3, #18
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002818:	2301      	movs	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002820:	2304      	movs	r3, #4
 8002822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	4825      	ldr	r0, [pc, #148]	@ (80028c0 <HAL_I2C_MspInit+0xf0>)
 800282c:	f002 feb6 	bl	800559c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	4b21      	ldr	r3, [pc, #132]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	4a20      	ldr	r2, [pc, #128]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 800283a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800283e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002840:	4b1e      	ldr	r3, [pc, #120]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800284c:	e030      	b.n	80028b0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1c      	ldr	r2, [pc, #112]	@ (80028c4 <HAL_I2C_MspInit+0xf4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d12b      	bne.n	80028b0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	4b17      	ldr	r3, [pc, #92]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 8002862:	f043 0320 	orr.w	r3, r3, #32
 8002866:	6313      	str	r3, [r2, #48]	@ 0x30
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002874:	2303      	movs	r3, #3
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002878:	2312      	movs	r3, #18
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287c:	2301      	movs	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002884:	2304      	movs	r3, #4
 8002886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	4619      	mov	r1, r3
 800288e:	480e      	ldr	r0, [pc, #56]	@ (80028c8 <HAL_I2C_MspInit+0xf8>)
 8002890:	f002 fe84 	bl	800559c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 800289e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_I2C_MspInit+0xec>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3730      	adds	r7, #48	@ 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40005400 	.word	0x40005400
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020400 	.word	0x40020400
 80028c4:	40005800 	.word	0x40005800
 80028c8:	40021400 	.word	0x40021400

080028cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002908 <HAL_TIM_PWM_MspInit+0x3c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10d      	bne.n	80028fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <HAL_TIM_PWM_MspInit+0x40>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_TIM_PWM_MspInit+0x40>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ee:	4b07      	ldr	r3, [pc, #28]	@ (800290c <HAL_TIM_PWM_MspInit+0x40>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40010000 	.word	0x40010000
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b16      	ldr	r3, [pc, #88]	@ (8002980 <HAL_TIM_Base_MspInit+0x70>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	4a15      	ldr	r2, [pc, #84]	@ (8002980 <HAL_TIM_Base_MspInit+0x70>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <HAL_TIM_Base_MspInit+0x70>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800293e:	e01a      	b.n	8002976 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0f      	ldr	r2, [pc, #60]	@ (8002984 <HAL_TIM_Base_MspInit+0x74>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d115      	bne.n	8002976 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_TIM_Base_MspInit+0x70>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <HAL_TIM_Base_MspInit+0x70>)
 8002954:	f043 0310 	orr.w	r3, r3, #16
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_TIM_Base_MspInit+0x70>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	2036      	movs	r0, #54	@ 0x36
 800296c:	f000 fde9 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002970:	2036      	movs	r0, #54	@ 0x36
 8002972:	f000 fe02 	bl	800357a <HAL_NVIC_EnableIRQ>
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40001000 	.word	0x40001000

08002988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <HAL_TIM_MspPostInit+0x68>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d11e      	bne.n	80029e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_TIM_MspPostInit+0x6c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <HAL_TIM_MspPostInit+0x6c>)
 80029b4:	f043 0310 	orr.w	r3, r3, #16
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <HAL_TIM_MspPostInit+0x6c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029d8:	2301      	movs	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	4619      	mov	r1, r3
 80029e2:	4805      	ldr	r0, [pc, #20]	@ (80029f8 <HAL_TIM_MspPostInit+0x70>)
 80029e4:	f002 fdda 	bl	800559c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	@ 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1d      	ldr	r2, [pc, #116]	@ (8002a90 <HAL_UART_MspInit+0x94>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d134      	bne.n	8002a88 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	4b1c      	ldr	r3, [pc, #112]	@ (8002a94 <HAL_UART_MspInit+0x98>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <HAL_UART_MspInit+0x98>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2e:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <HAL_UART_MspInit+0x98>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_UART_MspInit+0x98>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a14      	ldr	r2, [pc, #80]	@ (8002a94 <HAL_UART_MspInit+0x98>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_UART_MspInit+0x98>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a68:	2307      	movs	r3, #7
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	4809      	ldr	r0, [pc, #36]	@ (8002a98 <HAL_UART_MspInit+0x9c>)
 8002a74:	f002 fd92 	bl	800559c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	2027      	movs	r0, #39	@ 0x27
 8002a7e:	f000 fd60 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a82:	2027      	movs	r0, #39	@ 0x27
 8002a84:	f000 fd79 	bl	800357a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002a88:	bf00      	nop
 8002a8a:	3728      	adds	r7, #40	@ 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40004800 	.word	0x40004800
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40020c00 	.word	0x40020c00

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <HardFault_Handler+0x4>

08002aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <MemManage_Handler+0x4>

08002ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <BusFault_Handler+0x4>

08002abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <UsageFault_Handler+0x4>

08002ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af2:	f000 f995 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b00:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <USART3_IRQHandler+0x10>)
 8002b02:	f005 ffb9 	bl	8008a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000500 	.word	0x20000500

08002b10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002b14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b18:	f002 ff08 	bl	800592c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b24:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <TIM6_DAC_IRQHandler+0x10>)
 8002b26:	f004 fffd 	bl	8007b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200004b8 	.word	0x200004b8

08002b34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b38:	4802      	ldr	r0, [pc, #8]	@ (8002b44 <DMA2_Stream0_IRQHandler+0x10>)
 8002b3a:	f001 f93d 	bl	8003db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000270 	.word	0x20000270

08002b48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002b4c:	4803      	ldr	r0, [pc, #12]	@ (8002b5c <DMA2_Stream1_IRQHandler+0x14>)
 8002b4e:	f001 f933 	bl	8003db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	dma_flag = 1;
 8002b52:	4b03      	ldr	r3, [pc, #12]	@ (8002b60 <DMA2_Stream1_IRQHandler+0x18>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000320 	.word	0x20000320
 8002b60:	20018ce0 	.word	0x20018ce0

08002b64 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002b68:	4802      	ldr	r0, [pc, #8]	@ (8002b74 <DCMI_IRQHandler+0x10>)
 8002b6a:	f000 fdc1 	bl	80036f0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200002d0 	.word	0x200002d0

08002b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return 1;
 8002b7c:	2301      	movs	r3, #1
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <_kill>:

int _kill(int pid, int sig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b92:	f007 fd2b 	bl	800a5ec <__errno>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2216      	movs	r2, #22
 8002b9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_exit>:

void _exit (int status)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ffe7 	bl	8002b88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <_exit+0x12>

08002bbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e00a      	b.n	8002be6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bd0:	f3af 8000 	nop.w
 8002bd4:	4601      	mov	r1, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	60ba      	str	r2, [r7, #8]
 8002bdc:	b2ca      	uxtb	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3301      	adds	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	dbf0      	blt.n	8002bd0 <_read+0x12>
  }

  return len;
 8002bee:	687b      	ldr	r3, [r7, #4]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e009      	b.n	8002c1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	60ba      	str	r2, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dbf1      	blt.n	8002c0a <_write+0x12>
  }
  return len;
 8002c26:	687b      	ldr	r3, [r7, #4]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_close>:

int _close(int file)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c58:	605a      	str	r2, [r3, #4]
  return 0;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_isatty>:

int _isatty(int file)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c70:	2301      	movs	r3, #1
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca0:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <_sbrk+0x5c>)
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <_sbrk+0x60>)
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cac:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <_sbrk+0x64>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <_sbrk+0x68>)
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc8:	f007 fc90 	bl	800a5ec <__errno>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	220c      	movs	r2, #12
 8002cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e009      	b.n	8002cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd8:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <_sbrk+0x64>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cde:	4b07      	ldr	r3, [pc, #28]	@ (8002cfc <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a05      	ldr	r2, [pc, #20]	@ (8002cfc <_sbrk+0x64>)
 8002ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20020000 	.word	0x20020000
 8002cf8:	00000400 	.word	0x00000400
 8002cfc:	20018d24 	.word	0x20018d24
 8002d00:	20018e78 	.word	0x20018e78

08002d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <SystemInit+0x20>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0e:	4a05      	ldr	r2, [pc, #20]	@ (8002d24 <SystemInit+0x20>)
 8002d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d2c:	f7ff ffea 	bl	8002d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d30:	480c      	ldr	r0, [pc, #48]	@ (8002d64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d32:	490d      	ldr	r1, [pc, #52]	@ (8002d68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d34:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d38:	e002      	b.n	8002d40 <LoopCopyDataInit>

08002d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3e:	3304      	adds	r3, #4

08002d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d44:	d3f9      	bcc.n	8002d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d48:	4c0a      	ldr	r4, [pc, #40]	@ (8002d74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d4c:	e001      	b.n	8002d52 <LoopFillZerobss>

08002d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d50:	3204      	adds	r2, #4

08002d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d54:	d3fb      	bcc.n	8002d4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d56:	f007 fc4f 	bl	800a5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5a:	f7fe fe95 	bl	8001a88 <main>
  bx  lr    
 8002d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d68:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002d6c:	08020980 	.word	0x08020980
  ldr r2, =_sbss
 8002d70:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d74:	20018e78 	.word	0x20018e78

08002d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d78:	e7fe      	b.n	8002d78 <ADC_IRQHandler>
	...

08002d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d80:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <HAL_Init+0x40>)
 8002d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <HAL_Init+0x40>)
 8002d92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d98:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a07      	ldr	r2, [pc, #28]	@ (8002dbc <HAL_Init+0x40>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da4:	2003      	movs	r0, #3
 8002da6:	f000 fbc1 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f000 f808 	bl	8002dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db0:	f7ff fb5c 	bl	800246c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00

08002dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc8:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_InitTick+0x54>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <HAL_InitTick+0x58>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fbd9 	bl	8003596 <HAL_SYSTICK_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00e      	b.n	8002e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	d80a      	bhi.n	8002e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f000 fba1 	bl	8003542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4a06      	ldr	r2, [pc, #24]	@ (8002e1c <HAL_InitTick+0x5c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000008 	.word	0x20000008
 8002e44:	20018d28 	.word	0x20018d28

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20018d28 	.word	0x20018d28

08002e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff ffee 	bl	8002e48 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d005      	beq.n	8002e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_Delay+0x44>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e86:	bf00      	nop
 8002e88:	f7ff ffde 	bl	8002e48 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d8f7      	bhi.n	8002e88 <HAL_Delay+0x28>
  {
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000008 	.word	0x20000008

08002ea8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e033      	b.n	8002f26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff faf8 	bl	80024bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002eee:	f023 0302 	bic.w	r3, r3, #2
 8002ef2:	f043 0202 	orr.w	r2, r3, #2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f94a 	bl	8003194 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f16:	e001      	b.n	8002f1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1c>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e113      	b.n	8003174 <HAL_ADC_ConfigChannel+0x244>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d925      	bls.n	8002fa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68d9      	ldr	r1, [r3, #12]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b1e      	subs	r3, #30
 8002f72:	2207      	movs	r2, #7
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	400a      	ands	r2, r1
 8002f80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68d9      	ldr	r1, [r3, #12]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	4603      	mov	r3, r0
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4403      	add	r3, r0
 8002f9a:	3b1e      	subs	r3, #30
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e022      	b.n	8002fee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6919      	ldr	r1, [r3, #16]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	400a      	ands	r2, r1
 8002fca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6919      	ldr	r1, [r3, #16]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4403      	add	r3, r0
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d824      	bhi.n	8003040 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	3b05      	subs	r3, #5
 8003008:	221f      	movs	r2, #31
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	400a      	ands	r2, r1
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	4618      	mov	r0, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	3b05      	subs	r3, #5
 8003032:	fa00 f203 	lsl.w	r2, r0, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	635a      	str	r2, [r3, #52]	@ 0x34
 800303e:	e04c      	b.n	80030da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d824      	bhi.n	8003092 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	3b23      	subs	r3, #35	@ 0x23
 800305a:	221f      	movs	r2, #31
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43da      	mvns	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	400a      	ands	r2, r1
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	4618      	mov	r0, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	3b23      	subs	r3, #35	@ 0x23
 8003084:	fa00 f203 	lsl.w	r2, r0, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003090:	e023      	b.n	80030da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	3b41      	subs	r3, #65	@ 0x41
 80030a4:	221f      	movs	r2, #31
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	400a      	ands	r2, r1
 80030b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	3b41      	subs	r3, #65	@ 0x41
 80030ce:	fa00 f203 	lsl.w	r2, r0, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030da:	4b29      	ldr	r3, [pc, #164]	@ (8003180 <HAL_ADC_ConfigChannel+0x250>)
 80030dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a28      	ldr	r2, [pc, #160]	@ (8003184 <HAL_ADC_ConfigChannel+0x254>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10f      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x1d8>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b12      	cmp	r3, #18
 80030ee:	d10b      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1d      	ldr	r2, [pc, #116]	@ (8003184 <HAL_ADC_ConfigChannel+0x254>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d12b      	bne.n	800316a <HAL_ADC_ConfigChannel+0x23a>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <HAL_ADC_ConfigChannel+0x258>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <HAL_ADC_ConfigChannel+0x1f4>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b11      	cmp	r3, #17
 8003122:	d122      	bne.n	800316a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a11      	ldr	r2, [pc, #68]	@ (8003188 <HAL_ADC_ConfigChannel+0x258>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d111      	bne.n	800316a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003146:	4b11      	ldr	r3, [pc, #68]	@ (800318c <HAL_ADC_ConfigChannel+0x25c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a11      	ldr	r2, [pc, #68]	@ (8003190 <HAL_ADC_ConfigChannel+0x260>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	0c9a      	lsrs	r2, r3, #18
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800315c:	e002      	b.n	8003164 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3b01      	subs	r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f9      	bne.n	800315e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40012300 	.word	0x40012300
 8003184:	40012000 	.word	0x40012000
 8003188:	10000012 	.word	0x10000012
 800318c:	20000000 	.word	0x20000000
 8003190:	431bde83 	.word	0x431bde83

08003194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800319c:	4b79      	ldr	r3, [pc, #484]	@ (8003384 <ADC_Init+0x1f0>)
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	021a      	lsls	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800320e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6899      	ldr	r1, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003226:	4a58      	ldr	r2, [pc, #352]	@ (8003388 <ADC_Init+0x1f4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800323a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800325c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6899      	ldr	r1, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	e00f      	b.n	8003292 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003290:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0202 	bic.w	r2, r2, #2
 80032a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6899      	ldr	r1, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7e1b      	ldrb	r3, [r3, #24]
 80032ac:	005a      	lsls	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01b      	beq.n	80032f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	3b01      	subs	r3, #1
 80032ec:	035a      	lsls	r2, r3, #13
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	e007      	b.n	8003308 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003306:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	3b01      	subs	r3, #1
 8003324:	051a      	lsls	r2, r3, #20
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800333c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800334a:	025a      	lsls	r2, r3, #9
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6899      	ldr	r1, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	029a      	lsls	r2, r3, #10
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40012300 	.word	0x40012300
 8003388:	0f000001 	.word	0x0f000001

0800338c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033a8:	4013      	ands	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033be:	4a04      	ldr	r2, [pc, #16]	@ (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	60d3      	str	r3, [r2, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d8:	4b04      	ldr	r3, [pc, #16]	@ (80033ec <__NVIC_GetPriorityGrouping+0x18>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 0307 	and.w	r3, r3, #7
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	db0b      	blt.n	800341a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	4907      	ldr	r1, [pc, #28]	@ (8003428 <__NVIC_EnableIRQ+0x38>)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2001      	movs	r0, #1
 8003412:	fa00 f202 	lsl.w	r2, r0, r2
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100

0800342c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	2b00      	cmp	r3, #0
 800343e:	db0a      	blt.n	8003456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	490c      	ldr	r1, [pc, #48]	@ (8003478 <__NVIC_SetPriority+0x4c>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	440b      	add	r3, r1
 8003450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003454:	e00a      	b.n	800346c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4908      	ldr	r1, [pc, #32]	@ (800347c <__NVIC_SetPriority+0x50>)
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	3b04      	subs	r3, #4
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	440b      	add	r3, r1
 800346a:	761a      	strb	r2, [r3, #24]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	@ 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf28      	it	cs
 800349e:	2304      	movcs	r3, #4
 80034a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d902      	bls.n	80034b0 <NVIC_EncodePriority+0x30>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	e000      	b.n	80034b2 <NVIC_EncodePriority+0x32>
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	401a      	ands	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	4313      	orrs	r3, r2
         );
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	@ 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034f8:	d301      	bcc.n	80034fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003528 <SysTick_Config+0x40>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003506:	210f      	movs	r1, #15
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f7ff ff8e 	bl	800342c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <SysTick_Config+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <SysTick_Config+0x40>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff29 	bl	800338c <__NVIC_SetPriorityGrouping>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003554:	f7ff ff3e 	bl	80033d4 <__NVIC_GetPriorityGrouping>
 8003558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff ff8e 	bl	8003480 <NVIC_EncodePriority>
 8003564:	4602      	mov	r2, r0
 8003566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff5d 	bl	800342c <__NVIC_SetPriority>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff31 	bl	80033f0 <__NVIC_EnableIRQ>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffa2 	bl	80034e8 <SysTick_Config>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_DCMI_Start_DMA+0x20>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e086      	b.n	80036de <HAL_DCMI_Start_DMA+0x12e>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ee:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0202 	bic.w	r2, r2, #2
 80035fe:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003614:	4a34      	ldr	r2, [pc, #208]	@ (80036e8 <HAL_DCMI_Start_DMA+0x138>)
 8003616:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361c:	4a33      	ldr	r2, [pc, #204]	@ (80036ec <HAL_DCMI_Start_DMA+0x13c>)
 800361e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003624:	2200      	movs	r2, #0
 8003626:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800363a:	d20a      	bcs.n	8003652 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3328      	adds	r3, #40	@ 0x28
 8003646:	4619      	mov	r1, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	f000 faca 	bl	8003be4 <HAL_DMA_Start_IT>
 8003650:	e038      	b.n	80036c4 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003656:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <HAL_DCMI_Start_DMA+0x138>)
 8003658:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 800366c:	e009      	b.n	8003682 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003672:	085a      	lsrs	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	005a      	lsls	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368a:	d2f0      	bcs.n	800366e <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003690:	1e9a      	subs	r2, r3, #2
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3328      	adds	r3, #40	@ 0x28
 80036b4:	4619      	mov	r1, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	f000 fde4 	bl	800428c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	0800383d 	.word	0x0800383d
 80036ec:	08003967 	.word	0x08003967

080036f0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2204      	movs	r2, #4
 8003710:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003716:	f043 0202 	orr.w	r2, r3, #2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2204      	movs	r2, #4
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372a:	4a2f      	ldr	r2, [pc, #188]	@ (80037e8 <HAL_DCMI_IRQHandler+0xf8>)
 800372c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fb1e 	bl	8003d74 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2202      	movs	r2, #2
 8003748:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2204      	movs	r2, #4
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003762:	4a21      	ldr	r2, [pc, #132]	@ (80037e8 <HAL_DCMI_IRQHandler+0xf8>)
 8003764:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fb02 	bl	8003d74 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2210      	movs	r2, #16
 8003780:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f83c 	bl	8003800 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2208      	movs	r2, #8
 8003798:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f83a 	bl	8003814 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d019      	beq.n	80037de <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d107      	bne.n	80037c8 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 021e 	bic.w	r2, r2, #30
 80037c6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f825 	bl	8003828 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	08003967 	.word	0x08003967

080037ec <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003852:	2b00      	cmp	r3, #0
 8003854:	d043      	beq.n	80038de <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003862:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d118      	bne.n	80038a2 <DCMI_DMAXferCplt+0x66>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	00da      	lsls	r2, r3, #3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	2200      	movs	r2, #0
 8003890:	4619      	mov	r1, r3
 8003892:	f001 fe43 	bl	800551c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389a:	1e5a      	subs	r2, r3, #1
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	639a      	str	r2, [r3, #56]	@ 0x38
 80038a0:	e044      	b.n	800392c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d13c      	bne.n	800392c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	00da      	lsls	r2, r3, #3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4413      	add	r3, r2
 80038ca:	2201      	movs	r2, #1
 80038cc:	4619      	mov	r1, r3
 80038ce:	f001 fe25 	bl	800551c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d6:	1e5a      	subs	r2, r3, #1
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	639a      	str	r2, [r3, #56]	@ 0x38
 80038dc:	e026      	b.n	800392c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d006      	beq.n	80038fc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	e017      	b.n	800392c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10f      	bne.n	800392c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003910:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003916:	0099      	lsls	r1, r3, #2
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	440a      	add	r2, r1
 8003922:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	429a      	cmp	r2, r3
 8003936:	d112      	bne.n	800395e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d103      	bne.n	800395e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003972:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397a:	2b02      	cmp	r3, #2
 800397c:	d003      	beq.n	8003986 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff ff30 	bl	80037ec <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e069      	b.n	8003a7a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fe fdf6 	bl	80025ac <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fe fdf3 	bl	80025ac <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a84 <HAL_DCMI_Init+0xf0>)
 80039da:	400b      	ands	r3, r1
 80039dc:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80039f2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80039fe:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003a0a:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8003a16:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003a22:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d112      	bne.n	8003a5a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7f1b      	ldrb	r3, [r3, #28]
 8003a38:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7f5b      	ldrb	r3, [r3, #29]
 8003a3e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003a40:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7f9b      	ldrb	r3, [r3, #30]
 8003a46:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003a48:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7fdb      	ldrb	r3, [r3, #31]
 8003a50:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003a56:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003a58:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 021e 	orr.w	r2, r2, #30
 8003a68:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	ffe0f007 	.word	0xffe0f007

08003a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff f9d8 	bl	8002e48 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e099      	b.n	8003bd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac4:	e00f      	b.n	8003ae6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ac6:	f7ff f9bf 	bl	8002e48 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	d908      	bls.n	8003ae6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2203      	movs	r2, #3
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e078      	b.n	8003bd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e8      	bne.n	8003ac6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4b38      	ldr	r3, [pc, #224]	@ (8003be0 <HAL_DMA_Init+0x158>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d107      	bne.n	8003b50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0307 	bic.w	r3, r3, #7
 8003b66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d117      	bne.n	8003baa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb01 	bl	8004194 <DMA_CheckFifoParam>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2240      	movs	r2, #64	@ 0x40
 8003b9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e016      	b.n	8003bd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fab8 	bl	8004128 <DMA_CalcBaseAndBitshift>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc0:	223f      	movs	r2, #63	@ 0x3f
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	f010803f 	.word	0xf010803f

08003be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_DMA_Start_IT+0x26>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e040      	b.n	8003c8c <HAL_DMA_Start_IT+0xa8>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d12f      	bne.n	8003c7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 fa4a 	bl	80040cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	223f      	movs	r2, #63	@ 0x3f
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0216 	orr.w	r2, r2, #22
 8003c52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0208 	orr.w	r2, r2, #8
 8003c6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e005      	b.n	8003c8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
 8003c88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ca2:	f7ff f8d1 	bl	8002e48 <HAL_GetTick>
 8003ca6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d008      	beq.n	8003cc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e052      	b.n	8003d6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0216 	bic.w	r2, r2, #22
 8003cd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_DMA_Abort+0x62>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0208 	bic.w	r2, r2, #8
 8003d04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d16:	e013      	b.n	8003d40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d18:	f7ff f896 	bl	8002e48 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d90c      	bls.n	8003d40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e015      	b.n	8003d6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e4      	bne.n	8003d18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	223f      	movs	r2, #63	@ 0x3f
 8003d54:	409a      	lsls	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d004      	beq.n	8003d92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00c      	b.n	8003dac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2205      	movs	r2, #5
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dc4:	4b8e      	ldr	r3, [pc, #568]	@ (8004000 <HAL_DMA_IRQHandler+0x248>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a8e      	ldr	r2, [pc, #568]	@ (8004004 <HAL_DMA_IRQHandler+0x24c>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0a9b      	lsrs	r3, r3, #10
 8003dd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de2:	2208      	movs	r2, #8
 8003de4:	409a      	lsls	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01a      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0204 	bic.w	r2, r2, #4
 8003e0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	2208      	movs	r2, #8
 8003e12:	409a      	lsls	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1c:	f043 0201 	orr.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	2201      	movs	r2, #1
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d012      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	2201      	movs	r2, #1
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	2204      	movs	r2, #4
 8003e60:	409a      	lsls	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d012      	beq.n	8003e90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e94:	2210      	movs	r2, #16
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d043      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d03c      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d018      	beq.n	8003efa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d108      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d024      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
 8003ee6:	e01f      	b.n	8003f28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
 8003ef8:	e016      	b.n	8003f28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0208 	bic.w	r2, r2, #8
 8003f16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 808f 	beq.w	8004058 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8087 	beq.w	8004058 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	2220      	movs	r2, #32
 8003f50:	409a      	lsls	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d136      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0216 	bic.w	r2, r2, #22
 8003f70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x1da>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0208 	bic.w	r2, r2, #8
 8003fa0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa6:	223f      	movs	r2, #63	@ 0x3f
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d07e      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
        }
        return;
 8003fce:	e079      	b.n	80040c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01d      	beq.n	800401a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10d      	bne.n	8004008 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
 8003ffc:	e02c      	b.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
 8003ffe:	bf00      	nop
 8004000:	20000000 	.word	0x20000000
 8004004:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d023      	beq.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
 8004018:	e01e      	b.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10f      	bne.n	8004048 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0210 	bic.w	r2, r2, #16
 8004036:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	2b00      	cmp	r3, #0
 800405e:	d032      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2205      	movs	r2, #5
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3301      	adds	r3, #1
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	429a      	cmp	r2, r3
 800408e:	d307      	bcc.n	80040a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f2      	bne.n	8004084 <HAL_DMA_IRQHandler+0x2cc>
 800409e:	e000      	b.n	80040a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
 80040c2:	e000      	b.n	80040c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040c4:	bf00      	nop
    }
  }
}
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b40      	cmp	r3, #64	@ 0x40
 80040f8:	d108      	bne.n	800410c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800410a:	e007      	b.n	800411c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	3b10      	subs	r3, #16
 8004138:	4a14      	ldr	r2, [pc, #80]	@ (800418c <DMA_CalcBaseAndBitshift+0x64>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004142:	4a13      	ldr	r2, [pc, #76]	@ (8004190 <DMA_CalcBaseAndBitshift+0x68>)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d909      	bls.n	800416a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	659a      	str	r2, [r3, #88]	@ 0x58
 8004168:	e007      	b.n	800417a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	aaaaaaab 	.word	0xaaaaaaab
 8004190:	0800d15c 	.word	0x0800d15c

08004194 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d11f      	bne.n	80041ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d856      	bhi.n	8004262 <DMA_CheckFifoParam+0xce>
 80041b4:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <DMA_CheckFifoParam+0x28>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041df 	.word	0x080041df
 80041c4:	080041cd 	.word	0x080041cd
 80041c8:	08004263 	.word	0x08004263
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d046      	beq.n	8004266 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041dc:	e043      	b.n	8004266 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041e6:	d140      	bne.n	800426a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ec:	e03d      	b.n	800426a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f6:	d121      	bne.n	800423c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d837      	bhi.n	800426e <DMA_CheckFifoParam+0xda>
 80041fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <DMA_CheckFifoParam+0x70>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004215 	.word	0x08004215
 8004208:	0800421b 	.word	0x0800421b
 800420c:	08004215 	.word	0x08004215
 8004210:	0800422d 	.word	0x0800422d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e030      	b.n	800427c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d025      	beq.n	8004272 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422a:	e022      	b.n	8004272 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004234:	d11f      	bne.n	8004276 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800423a:	e01c      	b.n	8004276 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d903      	bls.n	800424a <DMA_CheckFifoParam+0xb6>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d003      	beq.n	8004250 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004248:	e018      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      break;
 800424e:	e015      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00e      	beq.n	800427a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e00b      	b.n	800427a <DMA_CheckFifoParam+0xe6>
      break;
 8004262:	bf00      	nop
 8004264:	e00a      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 8004266:	bf00      	nop
 8004268:	e008      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 800426a:	bf00      	nop
 800426c:	e006      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 800426e:	bf00      	nop
 8004270:	e004      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;   
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 800427a:	bf00      	nop
    }
  } 
  
  return status; 
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop

0800428c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b80      	cmp	r3, #128	@ 0x80
 80042a4:	d106      	bne.n	80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f001 b911 	b.w	80054d6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d105      	bne.n	80042d8 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2240      	movs	r2, #64	@ 0x40
 80042d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f001 b8ff 	b.w	80054d6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d102      	bne.n	80042e8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80042e2:	2302      	movs	r3, #2
 80042e4:	f001 b8f7 	b.w	80054d6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f041 80e5 	bne.w	80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800431a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f001 f910 	bl	8005550 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	4b8d      	ldr	r3, [pc, #564]	@ (800456c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8004338:	429a      	cmp	r2, r3
 800433a:	d960      	bls.n	80043fe <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a8b      	ldr	r2, [pc, #556]	@ (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d057      	beq.n	80043f6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a8a      	ldr	r2, [pc, #552]	@ (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d050      	beq.n	80043f2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a88      	ldr	r2, [pc, #544]	@ (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d049      	beq.n	80043ee <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a87      	ldr	r2, [pc, #540]	@ (800457c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d042      	beq.n	80043ea <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a85      	ldr	r2, [pc, #532]	@ (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d03a      	beq.n	80043e4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a84      	ldr	r2, [pc, #528]	@ (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d032      	beq.n	80043de <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a82      	ldr	r2, [pc, #520]	@ (8004588 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02a      	beq.n	80043d8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a81      	ldr	r2, [pc, #516]	@ (800458c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7f      	ldr	r2, [pc, #508]	@ (8004590 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01a      	beq.n	80043cc <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7e      	ldr	r2, [pc, #504]	@ (8004594 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d012      	beq.n	80043c6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7c      	ldr	r2, [pc, #496]	@ (8004598 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00a      	beq.n	80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a7b      	ldr	r2, [pc, #492]	@ (800459c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d102      	bne.n	80043ba <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80043b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80043b8:	e01e      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043be:	e01b      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80043c4:	e018      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80043ca:	e015      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80043d0:	e012      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043d6:	e00f      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043dc:	e00c      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043e2:	e009      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043e8:	e006      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043ea:	2320      	movs	r3, #32
 80043ec:	e004      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043ee:	2320      	movs	r3, #32
 80043f0:	e002      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043f2:	2320      	movs	r3, #32
 80043f4:	e000      	b.n	80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80043f6:	2320      	movs	r3, #32
 80043f8:	4a69      	ldr	r2, [pc, #420]	@ (80045a0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80043fa:	60d3      	str	r3, [r2, #12]
 80043fc:	e14f      	b.n	800469e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	4b67      	ldr	r3, [pc, #412]	@ (80045a4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004406:	429a      	cmp	r2, r3
 8004408:	d960      	bls.n	80044cc <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a58      	ldr	r2, [pc, #352]	@ (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d057      	beq.n	80044c4 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a56      	ldr	r2, [pc, #344]	@ (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d050      	beq.n	80044c0 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a55      	ldr	r2, [pc, #340]	@ (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d049      	beq.n	80044bc <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a53      	ldr	r2, [pc, #332]	@ (800457c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d042      	beq.n	80044b8 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a52      	ldr	r2, [pc, #328]	@ (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d03a      	beq.n	80044b2 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a50      	ldr	r2, [pc, #320]	@ (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d032      	beq.n	80044ac <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a4f      	ldr	r2, [pc, #316]	@ (8004588 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d02a      	beq.n	80044a6 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a4d      	ldr	r2, [pc, #308]	@ (800458c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d022      	beq.n	80044a0 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a4c      	ldr	r2, [pc, #304]	@ (8004590 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d01a      	beq.n	800449a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a4a      	ldr	r2, [pc, #296]	@ (8004594 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d012      	beq.n	8004494 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a49      	ldr	r2, [pc, #292]	@ (8004598 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00a      	beq.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a47      	ldr	r2, [pc, #284]	@ (800459c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d102      	bne.n	8004488 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8004482:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004486:	e01e      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004488:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800448c:	e01b      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800448e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004492:	e018      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004494:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004498:	e015      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800449a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800449e:	e012      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80044a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044a4:	e00f      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80044a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044aa:	e00c      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80044ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044b0:	e009      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80044b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044b6:	e006      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80044b8:	2320      	movs	r3, #32
 80044ba:	e004      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80044bc:	2320      	movs	r3, #32
 80044be:	e002      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80044c0:	2320      	movs	r3, #32
 80044c2:	e000      	b.n	80044c6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80044c4:	2320      	movs	r3, #32
 80044c6:	4a36      	ldr	r2, [pc, #216]	@ (80045a0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80044c8:	6093      	str	r3, [r2, #8]
 80044ca:	e0e8      	b.n	800469e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b35      	ldr	r3, [pc, #212]	@ (80045a8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80044d4:	429a      	cmp	r2, r3
 80044d6:	f240 8082 	bls.w	80045de <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a24      	ldr	r2, [pc, #144]	@ (8004570 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d078      	beq.n	80045d6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a22      	ldr	r2, [pc, #136]	@ (8004574 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d071      	beq.n	80045d2 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a21      	ldr	r2, [pc, #132]	@ (8004578 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d06a      	beq.n	80045ce <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d063      	beq.n	80045ca <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1e      	ldr	r2, [pc, #120]	@ (8004580 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d05b      	beq.n	80045c4 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1c      	ldr	r2, [pc, #112]	@ (8004584 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d053      	beq.n	80045be <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1b      	ldr	r2, [pc, #108]	@ (8004588 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d04b      	beq.n	80045b8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a19      	ldr	r2, [pc, #100]	@ (800458c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d043      	beq.n	80045b2 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a18      	ldr	r2, [pc, #96]	@ (8004590 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d03b      	beq.n	80045ac <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a16      	ldr	r2, [pc, #88]	@ (8004594 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d012      	beq.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a15      	ldr	r2, [pc, #84]	@ (8004598 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00a      	beq.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a13      	ldr	r2, [pc, #76]	@ (800459c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d102      	bne.n	8004558 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8004552:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004556:	e03f      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004558:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800455c:	e03c      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800455e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004562:	e039      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004564:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004568:	e036      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800456a:	bf00      	nop
 800456c:	40026458 	.word	0x40026458
 8004570:	40026010 	.word	0x40026010
 8004574:	40026410 	.word	0x40026410
 8004578:	40026070 	.word	0x40026070
 800457c:	40026470 	.word	0x40026470
 8004580:	40026028 	.word	0x40026028
 8004584:	40026428 	.word	0x40026428
 8004588:	40026088 	.word	0x40026088
 800458c:	40026488 	.word	0x40026488
 8004590:	40026040 	.word	0x40026040
 8004594:	40026440 	.word	0x40026440
 8004598:	400260a0 	.word	0x400260a0
 800459c:	400264a0 	.word	0x400264a0
 80045a0:	40026400 	.word	0x40026400
 80045a4:	400260b8 	.word	0x400260b8
 80045a8:	40026058 	.word	0x40026058
 80045ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045b0:	e012      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045b6:	e00f      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045bc:	e00c      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045c2:	e009      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045c8:	e006      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045ca:	2320      	movs	r3, #32
 80045cc:	e004      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045ce:	2320      	movs	r3, #32
 80045d0:	e002      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045d2:	2320      	movs	r3, #32
 80045d4:	e000      	b.n	80045d8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045d6:	2320      	movs	r3, #32
 80045d8:	4a8c      	ldr	r2, [pc, #560]	@ (800480c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80045da:	60d3      	str	r3, [r2, #12]
 80045dc:	e05f      	b.n	800469e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a8b      	ldr	r2, [pc, #556]	@ (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d057      	beq.n	8004698 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a89      	ldr	r2, [pc, #548]	@ (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d050      	beq.n	8004694 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a88      	ldr	r2, [pc, #544]	@ (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d049      	beq.n	8004690 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a86      	ldr	r2, [pc, #536]	@ (800481c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d042      	beq.n	800468c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a85      	ldr	r2, [pc, #532]	@ (8004820 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d03a      	beq.n	8004686 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a83      	ldr	r2, [pc, #524]	@ (8004824 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d032      	beq.n	8004680 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a82      	ldr	r2, [pc, #520]	@ (8004828 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d02a      	beq.n	800467a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a80      	ldr	r2, [pc, #512]	@ (800482c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d022      	beq.n	8004674 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a7f      	ldr	r2, [pc, #508]	@ (8004830 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01a      	beq.n	800466e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a7d      	ldr	r2, [pc, #500]	@ (8004834 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d012      	beq.n	8004668 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a7c      	ldr	r2, [pc, #496]	@ (8004838 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00a      	beq.n	8004662 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a7a      	ldr	r2, [pc, #488]	@ (800483c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d102      	bne.n	800465c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004656:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800465a:	e01e      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800465c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004660:	e01b      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004662:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004666:	e018      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004668:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800466c:	e015      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800466e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004672:	e012      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004674:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004678:	e00f      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800467a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800467e:	e00c      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004680:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004684:	e009      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004686:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800468a:	e006      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800468c:	2320      	movs	r3, #32
 800468e:	e004      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004690:	2320      	movs	r3, #32
 8004692:	e002      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004694:	2320      	movs	r3, #32
 8004696:	e000      	b.n	800469a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004698:	2320      	movs	r3, #32
 800469a:	4a5c      	ldr	r2, [pc, #368]	@ (800480c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800469c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b66      	ldr	r3, [pc, #408]	@ (8004840 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d960      	bls.n	800476c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a58      	ldr	r2, [pc, #352]	@ (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d057      	beq.n	8004764 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a56      	ldr	r2, [pc, #344]	@ (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d050      	beq.n	8004760 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a55      	ldr	r2, [pc, #340]	@ (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d049      	beq.n	800475c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a53      	ldr	r2, [pc, #332]	@ (800481c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d042      	beq.n	8004758 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a52      	ldr	r2, [pc, #328]	@ (8004820 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d03a      	beq.n	8004752 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a50      	ldr	r2, [pc, #320]	@ (8004824 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d032      	beq.n	800474c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004828 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d02a      	beq.n	8004746 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a4d      	ldr	r2, [pc, #308]	@ (800482c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d022      	beq.n	8004740 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004830 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d01a      	beq.n	800473a <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a4a      	ldr	r2, [pc, #296]	@ (8004834 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d012      	beq.n	8004734 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a49      	ldr	r2, [pc, #292]	@ (8004838 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00a      	beq.n	800472e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a47      	ldr	r2, [pc, #284]	@ (800483c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d102      	bne.n	8004728 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8004722:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004726:	e01e      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004728:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800472c:	e01b      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800472e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004732:	e018      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004734:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004738:	e015      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800473a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800473e:	e012      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004744:	e00f      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800474a:	e00c      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800474c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004750:	e009      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004756:	e006      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004758:	2310      	movs	r3, #16
 800475a:	e004      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800475c:	2310      	movs	r3, #16
 800475e:	e002      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004760:	2310      	movs	r3, #16
 8004762:	e000      	b.n	8004766 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004764:	2310      	movs	r3, #16
 8004766:	4a37      	ldr	r2, [pc, #220]	@ (8004844 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004768:	60d3      	str	r3, [r2, #12]
 800476a:	e14f      	b.n	8004a0c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4b35      	ldr	r3, [pc, #212]	@ (8004848 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004774:	429a      	cmp	r2, r3
 8004776:	f240 8082 	bls.w	800487e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a24      	ldr	r2, [pc, #144]	@ (8004810 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d078      	beq.n	8004876 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a22      	ldr	r2, [pc, #136]	@ (8004814 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d071      	beq.n	8004872 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d06a      	beq.n	800486e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1f      	ldr	r2, [pc, #124]	@ (800481c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d063      	beq.n	800486a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004820 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d05b      	beq.n	8004864 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004824 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d053      	beq.n	800485e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d04b      	beq.n	8004858 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a19      	ldr	r2, [pc, #100]	@ (800482c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d043      	beq.n	8004852 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d03b      	beq.n	800484c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a16      	ldr	r2, [pc, #88]	@ (8004834 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d012      	beq.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00a      	beq.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a13      	ldr	r2, [pc, #76]	@ (800483c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d102      	bne.n	80047f8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80047f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80047f6:	e03f      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80047f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80047fc:	e03c      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80047fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004802:	e039      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004804:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004808:	e036      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800480a:	bf00      	nop
 800480c:	40026000 	.word	0x40026000
 8004810:	40026010 	.word	0x40026010
 8004814:	40026410 	.word	0x40026410
 8004818:	40026070 	.word	0x40026070
 800481c:	40026470 	.word	0x40026470
 8004820:	40026028 	.word	0x40026028
 8004824:	40026428 	.word	0x40026428
 8004828:	40026088 	.word	0x40026088
 800482c:	40026488 	.word	0x40026488
 8004830:	40026040 	.word	0x40026040
 8004834:	40026440 	.word	0x40026440
 8004838:	400260a0 	.word	0x400260a0
 800483c:	400264a0 	.word	0x400264a0
 8004840:	40026458 	.word	0x40026458
 8004844:	40026400 	.word	0x40026400
 8004848:	400260b8 	.word	0x400260b8
 800484c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004850:	e012      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004856:	e00f      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800485c:	e00c      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800485e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004862:	e009      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004868:	e006      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800486a:	2310      	movs	r3, #16
 800486c:	e004      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800486e:	2310      	movs	r3, #16
 8004870:	e002      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004872:	2310      	movs	r3, #16
 8004874:	e000      	b.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004876:	2310      	movs	r3, #16
 8004878:	4a8c      	ldr	r2, [pc, #560]	@ (8004aac <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800487a:	6093      	str	r3, [r2, #8]
 800487c:	e0c6      	b.n	8004a0c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	4b8a      	ldr	r3, [pc, #552]	@ (8004ab0 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8004886:	429a      	cmp	r2, r3
 8004888:	d960      	bls.n	800494c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a89      	ldr	r2, [pc, #548]	@ (8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d057      	beq.n	8004944 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a87      	ldr	r2, [pc, #540]	@ (8004ab8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d050      	beq.n	8004940 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a86      	ldr	r2, [pc, #536]	@ (8004abc <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d049      	beq.n	800493c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a84      	ldr	r2, [pc, #528]	@ (8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d042      	beq.n	8004938 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a83      	ldr	r2, [pc, #524]	@ (8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03a      	beq.n	8004932 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a81      	ldr	r2, [pc, #516]	@ (8004ac8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d032      	beq.n	800492c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a80      	ldr	r2, [pc, #512]	@ (8004acc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d02a      	beq.n	8004926 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a7e      	ldr	r2, [pc, #504]	@ (8004ad0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d022      	beq.n	8004920 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7d      	ldr	r2, [pc, #500]	@ (8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d01a      	beq.n	800491a <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7b      	ldr	r2, [pc, #492]	@ (8004ad8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d012      	beq.n	8004914 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a7a      	ldr	r2, [pc, #488]	@ (8004adc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00a      	beq.n	800490e <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a78      	ldr	r2, [pc, #480]	@ (8004ae0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d102      	bne.n	8004908 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8004902:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004906:	e01e      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004908:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800490c:	e01b      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800490e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004912:	e018      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004914:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004918:	e015      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800491a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800491e:	e012      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004924:	e00f      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800492a:	e00c      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800492c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004930:	e009      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004936:	e006      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004938:	2310      	movs	r3, #16
 800493a:	e004      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800493c:	2310      	movs	r3, #16
 800493e:	e002      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004940:	2310      	movs	r3, #16
 8004942:	e000      	b.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004944:	2310      	movs	r3, #16
 8004946:	4a67      	ldr	r2, [pc, #412]	@ (8004ae4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004948:	60d3      	str	r3, [r2, #12]
 800494a:	e05f      	b.n	8004a0c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a58      	ldr	r2, [pc, #352]	@ (8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d057      	beq.n	8004a06 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a57      	ldr	r2, [pc, #348]	@ (8004ab8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d050      	beq.n	8004a02 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a55      	ldr	r2, [pc, #340]	@ (8004abc <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d049      	beq.n	80049fe <HAL_DMAEx_MultiBufferStart_IT+0x772>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a54      	ldr	r2, [pc, #336]	@ (8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d042      	beq.n	80049fa <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a52      	ldr	r2, [pc, #328]	@ (8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d03a      	beq.n	80049f4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a51      	ldr	r2, [pc, #324]	@ (8004ac8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d032      	beq.n	80049ee <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a4f      	ldr	r2, [pc, #316]	@ (8004acc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02a      	beq.n	80049e8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a4e      	ldr	r2, [pc, #312]	@ (8004ad0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a4c      	ldr	r2, [pc, #304]	@ (8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01a      	beq.n	80049dc <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a4b      	ldr	r2, [pc, #300]	@ (8004ad8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d012      	beq.n	80049d6 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a49      	ldr	r2, [pc, #292]	@ (8004adc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00a      	beq.n	80049d0 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a48      	ldr	r2, [pc, #288]	@ (8004ae0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d102      	bne.n	80049ca <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80049c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049c8:	e01e      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80049ce:	e01b      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049d4:	e018      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049da:	e015      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049e0:	e012      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049e6:	e00f      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ec:	e00c      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049f2:	e009      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049f8:	e006      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049fa:	2310      	movs	r3, #16
 80049fc:	e004      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80049fe:	2310      	movs	r3, #16
 8004a00:	e002      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a02:	2310      	movs	r3, #16
 8004a04:	e000      	b.n	8004a08 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a06:	2310      	movs	r3, #16
 8004a08:	4a36      	ldr	r2, [pc, #216]	@ (8004ae4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004a0a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b35      	ldr	r3, [pc, #212]	@ (8004ae8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	f240 8082 	bls.w	8004b1e <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a25      	ldr	r2, [pc, #148]	@ (8004ab4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d078      	beq.n	8004b16 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a23      	ldr	r2, [pc, #140]	@ (8004ab8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d071      	beq.n	8004b12 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a22      	ldr	r2, [pc, #136]	@ (8004abc <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d06a      	beq.n	8004b0e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a20      	ldr	r2, [pc, #128]	@ (8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d063      	beq.n	8004b0a <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d05b      	beq.n	8004b04 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d053      	beq.n	8004afe <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004acc <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d04b      	beq.n	8004af8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d043      	beq.n	8004af2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d03b      	beq.n	8004aec <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a17      	ldr	r2, [pc, #92]	@ (8004ad8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d012      	beq.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a16      	ldr	r2, [pc, #88]	@ (8004adc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00a      	beq.n	8004a9e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ae0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d102      	bne.n	8004a98 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8004a92:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004a96:	e03f      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004a98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a9c:	e03c      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004a9e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004aa2:	e039      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004aa4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004aa8:	e036      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004aaa:	bf00      	nop
 8004aac:	40026400 	.word	0x40026400
 8004ab0:	40026058 	.word	0x40026058
 8004ab4:	40026010 	.word	0x40026010
 8004ab8:	40026410 	.word	0x40026410
 8004abc:	40026070 	.word	0x40026070
 8004ac0:	40026470 	.word	0x40026470
 8004ac4:	40026028 	.word	0x40026028
 8004ac8:	40026428 	.word	0x40026428
 8004acc:	40026088 	.word	0x40026088
 8004ad0:	40026488 	.word	0x40026488
 8004ad4:	40026040 	.word	0x40026040
 8004ad8:	40026440 	.word	0x40026440
 8004adc:	400260a0 	.word	0x400260a0
 8004ae0:	400264a0 	.word	0x400264a0
 8004ae4:	40026000 	.word	0x40026000
 8004ae8:	40026458 	.word	0x40026458
 8004aec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004af0:	e012      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004af6:	e00f      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004af8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004afc:	e00c      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004afe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b02:	e009      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b08:	e006      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	e004      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b0e:	2308      	movs	r3, #8
 8004b10:	e002      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b12:	2308      	movs	r3, #8
 8004b14:	e000      	b.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b16:	2308      	movs	r3, #8
 8004b18:	4a8c      	ldr	r2, [pc, #560]	@ (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004b1a:	60d3      	str	r3, [r2, #12]
 8004b1c:	e14e      	b.n	8004dbc <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	4b8a      	ldr	r3, [pc, #552]	@ (8004d50 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d960      	bls.n	8004bec <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a89      	ldr	r2, [pc, #548]	@ (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d057      	beq.n	8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a87      	ldr	r2, [pc, #540]	@ (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d050      	beq.n	8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a86      	ldr	r2, [pc, #536]	@ (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d049      	beq.n	8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a84      	ldr	r2, [pc, #528]	@ (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d042      	beq.n	8004bd8 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a83      	ldr	r2, [pc, #524]	@ (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d03a      	beq.n	8004bd2 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a81      	ldr	r2, [pc, #516]	@ (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d032      	beq.n	8004bcc <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a80      	ldr	r2, [pc, #512]	@ (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d02a      	beq.n	8004bc6 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a7e      	ldr	r2, [pc, #504]	@ (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a7d      	ldr	r2, [pc, #500]	@ (8004d74 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d01a      	beq.n	8004bba <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a7b      	ldr	r2, [pc, #492]	@ (8004d78 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d012      	beq.n	8004bb4 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7a      	ldr	r2, [pc, #488]	@ (8004d7c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00a      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a78      	ldr	r2, [pc, #480]	@ (8004d80 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d102      	bne.n	8004ba8 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8004ba2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004ba6:	e01e      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004ba8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bac:	e01b      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bae:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004bb2:	e018      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bb4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004bb8:	e015      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bba:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004bbe:	e012      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bc4:	e00f      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bca:	e00c      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bd0:	e009      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bd6:	e006      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bd8:	2308      	movs	r3, #8
 8004bda:	e004      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004bdc:	2308      	movs	r3, #8
 8004bde:	e002      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004be0:	2308      	movs	r3, #8
 8004be2:	e000      	b.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004be4:	2308      	movs	r3, #8
 8004be6:	4a59      	ldr	r2, [pc, #356]	@ (8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004be8:	6093      	str	r3, [r2, #8]
 8004bea:	e0e7      	b.n	8004dbc <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4b64      	ldr	r3, [pc, #400]	@ (8004d84 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d960      	bls.n	8004cba <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a55      	ldr	r2, [pc, #340]	@ (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d057      	beq.n	8004cb2 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a54      	ldr	r2, [pc, #336]	@ (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d050      	beq.n	8004cae <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a52      	ldr	r2, [pc, #328]	@ (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d049      	beq.n	8004caa <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a51      	ldr	r2, [pc, #324]	@ (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d042      	beq.n	8004ca6 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a4f      	ldr	r2, [pc, #316]	@ (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d03a      	beq.n	8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d032      	beq.n	8004c9a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a4c      	ldr	r2, [pc, #304]	@ (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d02a      	beq.n	8004c94 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a4b      	ldr	r2, [pc, #300]	@ (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d022      	beq.n	8004c8e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a49      	ldr	r2, [pc, #292]	@ (8004d74 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01a      	beq.n	8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a48      	ldr	r2, [pc, #288]	@ (8004d78 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d012      	beq.n	8004c82 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a46      	ldr	r2, [pc, #280]	@ (8004d7c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00a      	beq.n	8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a45      	ldr	r2, [pc, #276]	@ (8004d80 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d102      	bne.n	8004c76 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8004c70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c74:	e01e      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c7a:	e01b      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004c7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c80:	e018      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004c82:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c86:	e015      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004c88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c8c:	e012      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004c8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c92:	e00f      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c98:	e00c      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004c9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c9e:	e009      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004ca0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ca4:	e006      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	e004      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004caa:	2308      	movs	r3, #8
 8004cac:	e002      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	e000      	b.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	4a34      	ldr	r2, [pc, #208]	@ (8004d88 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004cb6:	60d3      	str	r3, [r2, #12]
 8004cb8:	e080      	b.n	8004dbc <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a25      	ldr	r2, [pc, #148]	@ (8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d078      	beq.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a23      	ldr	r2, [pc, #140]	@ (8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d071      	beq.n	8004db2 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a22      	ldr	r2, [pc, #136]	@ (8004d5c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d06a      	beq.n	8004dae <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a20      	ldr	r2, [pc, #128]	@ (8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d063      	beq.n	8004daa <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d05b      	beq.n	8004da4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d053      	beq.n	8004d9e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d04b      	beq.n	8004d98 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d043      	beq.n	8004d92 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a19      	ldr	r2, [pc, #100]	@ (8004d74 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d03b      	beq.n	8004d8c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a17      	ldr	r2, [pc, #92]	@ (8004d78 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d012      	beq.n	8004d44 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a16      	ldr	r2, [pc, #88]	@ (8004d7c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00a      	beq.n	8004d3e <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a14      	ldr	r2, [pc, #80]	@ (8004d80 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d102      	bne.n	8004d38 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8004d32:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d36:	e03f      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004d38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d3c:	e03c      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004d3e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d42:	e039      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004d44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d48:	e036      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004d4a:	bf00      	nop
 8004d4c:	40026400 	.word	0x40026400
 8004d50:	400260b8 	.word	0x400260b8
 8004d54:	40026010 	.word	0x40026010
 8004d58:	40026410 	.word	0x40026410
 8004d5c:	40026070 	.word	0x40026070
 8004d60:	40026470 	.word	0x40026470
 8004d64:	40026028 	.word	0x40026028
 8004d68:	40026428 	.word	0x40026428
 8004d6c:	40026088 	.word	0x40026088
 8004d70:	40026488 	.word	0x40026488
 8004d74:	40026040 	.word	0x40026040
 8004d78:	40026440 	.word	0x40026440
 8004d7c:	400260a0 	.word	0x400260a0
 8004d80:	400264a0 	.word	0x400264a0
 8004d84:	40026058 	.word	0x40026058
 8004d88:	40026000 	.word	0x40026000
 8004d8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d90:	e012      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004d92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d96:	e00f      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d9c:	e00c      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004da2:	e009      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004da8:	e006      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004daa:	2308      	movs	r3, #8
 8004dac:	e004      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004dae:	2308      	movs	r3, #8
 8004db0:	e002      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004db2:	2308      	movs	r3, #8
 8004db4:	e000      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004db6:	2308      	movs	r3, #8
 8004db8:	4a8a      	ldr	r2, [pc, #552]	@ (8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004dba:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b89      	ldr	r3, [pc, #548]	@ (8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d960      	bls.n	8004e8a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a87      	ldr	r2, [pc, #540]	@ (8004fec <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d057      	beq.n	8004e82 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a86      	ldr	r2, [pc, #536]	@ (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d050      	beq.n	8004e7e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a84      	ldr	r2, [pc, #528]	@ (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d049      	beq.n	8004e7a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a83      	ldr	r2, [pc, #524]	@ (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d042      	beq.n	8004e76 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a81      	ldr	r2, [pc, #516]	@ (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d03a      	beq.n	8004e70 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a80      	ldr	r2, [pc, #512]	@ (8005000 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d032      	beq.n	8004e6a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a7e      	ldr	r2, [pc, #504]	@ (8005004 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02a      	beq.n	8004e64 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a7d      	ldr	r2, [pc, #500]	@ (8005008 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a7b      	ldr	r2, [pc, #492]	@ (800500c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01a      	beq.n	8004e58 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a7a      	ldr	r2, [pc, #488]	@ (8005010 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d012      	beq.n	8004e52 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a78      	ldr	r2, [pc, #480]	@ (8005014 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00a      	beq.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a77      	ldr	r2, [pc, #476]	@ (8005018 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d102      	bne.n	8004e46 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8004e40:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e44:	e01e      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e4a:	e01b      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e50:	e018      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e52:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e56:	e015      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e5c:	e012      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e62:	e00f      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e68:	e00c      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e6e:	e009      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e74:	e006      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e76:	2304      	movs	r3, #4
 8004e78:	e004      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e7a:	2304      	movs	r3, #4
 8004e7c:	e002      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e7e:	2304      	movs	r3, #4
 8004e80:	e000      	b.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004e82:	2304      	movs	r3, #4
 8004e84:	4a65      	ldr	r2, [pc, #404]	@ (800501c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004e86:	60d3      	str	r3, [r2, #12]
 8004e88:	e150      	b.n	800512c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	4b63      	ldr	r3, [pc, #396]	@ (8005020 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d960      	bls.n	8004f58 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a54      	ldr	r2, [pc, #336]	@ (8004fec <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d057      	beq.n	8004f50 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	@ (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d050      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a51      	ldr	r2, [pc, #324]	@ (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d049      	beq.n	8004f48 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d042      	beq.n	8004f44 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d03a      	beq.n	8004f3e <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8005000 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d032      	beq.n	8004f38 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a4b      	ldr	r2, [pc, #300]	@ (8005004 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d02a      	beq.n	8004f32 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a49      	ldr	r2, [pc, #292]	@ (8005008 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d022      	beq.n	8004f2c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a48      	ldr	r2, [pc, #288]	@ (800500c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d01a      	beq.n	8004f26 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a46      	ldr	r2, [pc, #280]	@ (8005010 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d012      	beq.n	8004f20 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a45      	ldr	r2, [pc, #276]	@ (8005014 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00a      	beq.n	8004f1a <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a43      	ldr	r2, [pc, #268]	@ (8005018 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d102      	bne.n	8004f14 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8004f0e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004f12:	e01e      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f18:	e01b      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f1a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004f1e:	e018      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004f24:	e015      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f26:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004f2a:	e012      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f30:	e00f      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f36:	e00c      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f3c:	e009      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f42:	e006      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	e004      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	e002      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	e000      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004f50:	2304      	movs	r3, #4
 8004f52:	4a32      	ldr	r2, [pc, #200]	@ (800501c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004f54:	6093      	str	r3, [r2, #8]
 8004f56:	e0e9      	b.n	800512c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4b31      	ldr	r3, [pc, #196]	@ (8005024 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004f60:	429a      	cmp	r2, r3
 8004f62:	f240 8083 	bls.w	800506c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a20      	ldr	r2, [pc, #128]	@ (8004fec <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d079      	beq.n	8005064 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d072      	beq.n	8005060 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d06b      	beq.n	800505c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d064      	beq.n	8005058 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1a      	ldr	r2, [pc, #104]	@ (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d05c      	beq.n	8005052 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a18      	ldr	r2, [pc, #96]	@ (8005000 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d054      	beq.n	800504c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a17      	ldr	r2, [pc, #92]	@ (8005004 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d04c      	beq.n	8005046 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a15      	ldr	r2, [pc, #84]	@ (8005008 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d044      	beq.n	8005040 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a14      	ldr	r2, [pc, #80]	@ (800500c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d03c      	beq.n	800503a <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a12      	ldr	r2, [pc, #72]	@ (8005010 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d034      	beq.n	8005034 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a11      	ldr	r2, [pc, #68]	@ (8005014 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d02c      	beq.n	800502e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8005018 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d124      	bne.n	8005028 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8004fde:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004fe2:	e040      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8004fe4:	40026000 	.word	0x40026000
 8004fe8:	40026458 	.word	0x40026458
 8004fec:	40026010 	.word	0x40026010
 8004ff0:	40026410 	.word	0x40026410
 8004ff4:	40026070 	.word	0x40026070
 8004ff8:	40026470 	.word	0x40026470
 8004ffc:	40026028 	.word	0x40026028
 8005000:	40026428 	.word	0x40026428
 8005004:	40026088 	.word	0x40026088
 8005008:	40026488 	.word	0x40026488
 800500c:	40026040 	.word	0x40026040
 8005010:	40026440 	.word	0x40026440
 8005014:	400260a0 	.word	0x400260a0
 8005018:	400264a0 	.word	0x400264a0
 800501c:	40026400 	.word	0x40026400
 8005020:	400260b8 	.word	0x400260b8
 8005024:	40026058 	.word	0x40026058
 8005028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800502c:	e01b      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800502e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005032:	e018      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005034:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005038:	e015      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800503a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800503e:	e012      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005044:	e00f      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800504a:	e00c      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800504c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005050:	e009      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005056:	e006      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005058:	2304      	movs	r3, #4
 800505a:	e004      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800505c:	2304      	movs	r3, #4
 800505e:	e002      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005060:	2304      	movs	r3, #4
 8005062:	e000      	b.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005064:	2304      	movs	r3, #4
 8005066:	4a8b      	ldr	r2, [pc, #556]	@ (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8005068:	60d3      	str	r3, [r2, #12]
 800506a:	e05f      	b.n	800512c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a89      	ldr	r2, [pc, #548]	@ (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d057      	beq.n	8005126 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a88      	ldr	r2, [pc, #544]	@ (800529c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d050      	beq.n	8005122 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a86      	ldr	r2, [pc, #536]	@ (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d049      	beq.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a85      	ldr	r2, [pc, #532]	@ (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d042      	beq.n	800511a <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a83      	ldr	r2, [pc, #524]	@ (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d03a      	beq.n	8005114 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a82      	ldr	r2, [pc, #520]	@ (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d032      	beq.n	800510e <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a80      	ldr	r2, [pc, #512]	@ (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02a      	beq.n	8005108 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7f      	ldr	r2, [pc, #508]	@ (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d022      	beq.n	8005102 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7d      	ldr	r2, [pc, #500]	@ (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01a      	beq.n	80050fc <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7c      	ldr	r2, [pc, #496]	@ (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d012      	beq.n	80050f6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a7a      	ldr	r2, [pc, #488]	@ (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00a      	beq.n	80050f0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a79      	ldr	r2, [pc, #484]	@ (80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d102      	bne.n	80050ea <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80050e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050e8:	e01e      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050ee:	e01b      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050f0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050f4:	e018      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050f6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050fa:	e015      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80050fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005100:	e012      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005106:	e00f      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005108:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800510c:	e00c      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800510e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005112:	e009      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005118:	e006      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800511a:	2304      	movs	r3, #4
 800511c:	e004      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800511e:	2304      	movs	r3, #4
 8005120:	e002      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005122:	2304      	movs	r3, #4
 8005124:	e000      	b.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005126:	2304      	movs	r3, #4
 8005128:	4a5a      	ldr	r2, [pc, #360]	@ (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800512a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	4b65      	ldr	r3, [pc, #404]	@ (80052c8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005134:	429a      	cmp	r2, r3
 8005136:	d95c      	bls.n	80051f2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a56      	ldr	r2, [pc, #344]	@ (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d053      	beq.n	80051ea <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a55      	ldr	r2, [pc, #340]	@ (800529c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d04c      	beq.n	80051e6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a53      	ldr	r2, [pc, #332]	@ (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d045      	beq.n	80051e2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a52      	ldr	r2, [pc, #328]	@ (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d03e      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a50      	ldr	r2, [pc, #320]	@ (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d037      	beq.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a4f      	ldr	r2, [pc, #316]	@ (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d030      	beq.n	80051d6 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a4d      	ldr	r2, [pc, #308]	@ (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d029      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4c      	ldr	r2, [pc, #304]	@ (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d022      	beq.n	80051ce <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a4a      	ldr	r2, [pc, #296]	@ (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01a      	beq.n	80051c8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a49      	ldr	r2, [pc, #292]	@ (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d012      	beq.n	80051c2 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a47      	ldr	r2, [pc, #284]	@ (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00a      	beq.n	80051bc <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a46      	ldr	r2, [pc, #280]	@ (80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d102      	bne.n	80051b6 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80051b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051b4:	e01a      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051ba:	e017      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051c0:	e014      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051c6:	e011      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051cc:	e00e      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051ce:	2340      	movs	r3, #64	@ 0x40
 80051d0:	e00c      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051d2:	2340      	movs	r3, #64	@ 0x40
 80051d4:	e00a      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051d6:	2340      	movs	r3, #64	@ 0x40
 80051d8:	e008      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051da:	2340      	movs	r3, #64	@ 0x40
 80051dc:	e006      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051de:	2301      	movs	r3, #1
 80051e0:	e004      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e002      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4a37      	ldr	r2, [pc, #220]	@ (80052cc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80051ee:	60d3      	str	r3, [r2, #12]
 80051f0:	e141      	b.n	8005476 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	4b35      	ldr	r3, [pc, #212]	@ (80052d0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d97c      	bls.n	80052f8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a25      	ldr	r2, [pc, #148]	@ (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d073      	beq.n	80052f0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a23      	ldr	r2, [pc, #140]	@ (800529c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d06c      	beq.n	80052ec <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a22      	ldr	r2, [pc, #136]	@ (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d065      	beq.n	80052e8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a20      	ldr	r2, [pc, #128]	@ (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d05e      	beq.n	80052e4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1f      	ldr	r2, [pc, #124]	@ (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d057      	beq.n	80052e0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1d      	ldr	r2, [pc, #116]	@ (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d050      	beq.n	80052dc <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1c      	ldr	r2, [pc, #112]	@ (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d049      	beq.n	80052d8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1a      	ldr	r2, [pc, #104]	@ (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d042      	beq.n	80052d4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d01a      	beq.n	800528e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a17      	ldr	r2, [pc, #92]	@ (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d012      	beq.n	8005288 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a16      	ldr	r2, [pc, #88]	@ (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00a      	beq.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a14      	ldr	r2, [pc, #80]	@ (80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d102      	bne.n	800527c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8005276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800527a:	e03a      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800527c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005280:	e037      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005286:	e034      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800528c:	e031      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800528e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005292:	e02e      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005294:	40026000 	.word	0x40026000
 8005298:	40026010 	.word	0x40026010
 800529c:	40026410 	.word	0x40026410
 80052a0:	40026070 	.word	0x40026070
 80052a4:	40026470 	.word	0x40026470
 80052a8:	40026028 	.word	0x40026028
 80052ac:	40026428 	.word	0x40026428
 80052b0:	40026088 	.word	0x40026088
 80052b4:	40026488 	.word	0x40026488
 80052b8:	40026040 	.word	0x40026040
 80052bc:	40026440 	.word	0x40026440
 80052c0:	400260a0 	.word	0x400260a0
 80052c4:	400264a0 	.word	0x400264a0
 80052c8:	40026458 	.word	0x40026458
 80052cc:	40026400 	.word	0x40026400
 80052d0:	400260b8 	.word	0x400260b8
 80052d4:	2340      	movs	r3, #64	@ 0x40
 80052d6:	e00c      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80052d8:	2340      	movs	r3, #64	@ 0x40
 80052da:	e00a      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80052dc:	2340      	movs	r3, #64	@ 0x40
 80052de:	e008      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80052e0:	2340      	movs	r3, #64	@ 0x40
 80052e2:	e006      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e004      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e002      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4a7b      	ldr	r2, [pc, #492]	@ (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80052f4:	6093      	str	r3, [r2, #8]
 80052f6:	e0be      	b.n	8005476 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	4b79      	ldr	r3, [pc, #484]	@ (80054e4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005300:	429a      	cmp	r2, r3
 8005302:	d95c      	bls.n	80053be <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a77      	ldr	r2, [pc, #476]	@ (80054e8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d053      	beq.n	80053b6 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a76      	ldr	r2, [pc, #472]	@ (80054ec <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d04c      	beq.n	80053b2 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a74      	ldr	r2, [pc, #464]	@ (80054f0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d045      	beq.n	80053ae <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a73      	ldr	r2, [pc, #460]	@ (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d03e      	beq.n	80053aa <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a71      	ldr	r2, [pc, #452]	@ (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d037      	beq.n	80053a6 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a70      	ldr	r2, [pc, #448]	@ (80054fc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d030      	beq.n	80053a2 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6e      	ldr	r2, [pc, #440]	@ (8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d029      	beq.n	800539e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6d      	ldr	r2, [pc, #436]	@ (8005504 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d022      	beq.n	800539a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a6b      	ldr	r2, [pc, #428]	@ (8005508 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01a      	beq.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a6a      	ldr	r2, [pc, #424]	@ (800550c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d012      	beq.n	800538e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a68      	ldr	r2, [pc, #416]	@ (8005510 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00a      	beq.n	8005388 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a67      	ldr	r2, [pc, #412]	@ (8005514 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d102      	bne.n	8005382 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800537c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005380:	e01a      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005382:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005386:	e017      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800538c:	e014      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800538e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005392:	e011      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005398:	e00e      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800539a:	2340      	movs	r3, #64	@ 0x40
 800539c:	e00c      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800539e:	2340      	movs	r3, #64	@ 0x40
 80053a0:	e00a      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80053a2:	2340      	movs	r3, #64	@ 0x40
 80053a4:	e008      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80053a6:	2340      	movs	r3, #64	@ 0x40
 80053a8:	e006      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e004      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e002      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4a57      	ldr	r2, [pc, #348]	@ (8005518 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80053ba:	60d3      	str	r3, [r2, #12]
 80053bc:	e05b      	b.n	8005476 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a49      	ldr	r2, [pc, #292]	@ (80054e8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d053      	beq.n	8005470 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a47      	ldr	r2, [pc, #284]	@ (80054ec <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d04c      	beq.n	800546c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a46      	ldr	r2, [pc, #280]	@ (80054f0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d045      	beq.n	8005468 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a44      	ldr	r2, [pc, #272]	@ (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d03e      	beq.n	8005464 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a43      	ldr	r2, [pc, #268]	@ (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d037      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a41      	ldr	r2, [pc, #260]	@ (80054fc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d030      	beq.n	800545c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a40      	ldr	r2, [pc, #256]	@ (8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d029      	beq.n	8005458 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a3e      	ldr	r2, [pc, #248]	@ (8005504 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d022      	beq.n	8005454 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a3d      	ldr	r2, [pc, #244]	@ (8005508 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d01a      	beq.n	800544e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a3b      	ldr	r2, [pc, #236]	@ (800550c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d012      	beq.n	8005448 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3a      	ldr	r2, [pc, #232]	@ (8005510 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00a      	beq.n	8005442 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a38      	ldr	r2, [pc, #224]	@ (8005514 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d102      	bne.n	800543c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8005436:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800543a:	e01a      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800543c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005440:	e017      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005442:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005446:	e014      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800544c:	e011      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800544e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005452:	e00e      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005454:	2340      	movs	r3, #64	@ 0x40
 8005456:	e00c      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005458:	2340      	movs	r3, #64	@ 0x40
 800545a:	e00a      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800545c:	2340      	movs	r3, #64	@ 0x40
 800545e:	e008      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005460:	2340      	movs	r3, #64	@ 0x40
 8005462:	e006      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005464:	2301      	movs	r3, #1
 8005466:	e004      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005468:	2301      	movs	r3, #1
 800546a:	e002      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005470:	2301      	movs	r3, #1
 8005472:	4a29      	ldr	r2, [pc, #164]	@ (8005518 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8005474:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0216 	orr.w	r2, r2, #22
 8005484:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695a      	ldr	r2, [r3, #20]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005494:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0208 	orr.w	r2, r2, #8
 80054b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e005      	b.n	80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
 80054d2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40026400 	.word	0x40026400
 80054e4:	40026058 	.word	0x40026058
 80054e8:	40026010 	.word	0x40026010
 80054ec:	40026410 	.word	0x40026410
 80054f0:	40026070 	.word	0x40026070
 80054f4:	40026470 	.word	0x40026470
 80054f8:	40026028 	.word	0x40026028
 80054fc:	40026428 	.word	0x40026428
 8005500:	40026088 	.word	0x40026088
 8005504:	40026488 	.word	0x40026488
 8005508:	40026040 	.word	0x40026040
 800550c:	40026440 	.word	0x40026440
 8005510:	400260a0 	.word	0x400260a0
 8005514:	400264a0 	.word	0x400264a0
 8005518:	40026000 	.word	0x40026000

0800551c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e003      	b.n	8005542 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b40      	cmp	r3, #64	@ 0x40
 800556c:	d108      	bne.n	8005580 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800557e:	e007      	b.n	8005590 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800559c:	b480      	push	{r7}
 800559e:	b089      	sub	sp, #36	@ 0x24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	e165      	b.n	8005884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055b8:	2201      	movs	r2, #1
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4013      	ands	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	f040 8154 	bne.w	800587e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d005      	beq.n	80055ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d130      	bne.n	8005650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	2203      	movs	r2, #3
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005624:	2201      	movs	r2, #1
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 0201 	and.w	r2, r3, #1
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d017      	beq.n	800568c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d123      	bne.n	80056e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	08da      	lsrs	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3208      	adds	r2, #8
 80056a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	220f      	movs	r2, #15
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	08da      	lsrs	r2, r3, #3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3208      	adds	r2, #8
 80056da:	69b9      	ldr	r1, [r7, #24]
 80056dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2203      	movs	r2, #3
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0203 	and.w	r2, r3, #3
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80ae 	beq.w	800587e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b5d      	ldr	r3, [pc, #372]	@ (800589c <HAL_GPIO_Init+0x300>)
 8005728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572a:	4a5c      	ldr	r2, [pc, #368]	@ (800589c <HAL_GPIO_Init+0x300>)
 800572c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005730:	6453      	str	r3, [r2, #68]	@ 0x44
 8005732:	4b5a      	ldr	r3, [pc, #360]	@ (800589c <HAL_GPIO_Init+0x300>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800573e:	4a58      	ldr	r2, [pc, #352]	@ (80058a0 <HAL_GPIO_Init+0x304>)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	3302      	adds	r3, #2
 8005746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	220f      	movs	r2, #15
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a4f      	ldr	r2, [pc, #316]	@ (80058a4 <HAL_GPIO_Init+0x308>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d025      	beq.n	80057b6 <HAL_GPIO_Init+0x21a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a4e      	ldr	r2, [pc, #312]	@ (80058a8 <HAL_GPIO_Init+0x30c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01f      	beq.n	80057b2 <HAL_GPIO_Init+0x216>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a4d      	ldr	r2, [pc, #308]	@ (80058ac <HAL_GPIO_Init+0x310>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d019      	beq.n	80057ae <HAL_GPIO_Init+0x212>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a4c      	ldr	r2, [pc, #304]	@ (80058b0 <HAL_GPIO_Init+0x314>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <HAL_GPIO_Init+0x20e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a4b      	ldr	r2, [pc, #300]	@ (80058b4 <HAL_GPIO_Init+0x318>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00d      	beq.n	80057a6 <HAL_GPIO_Init+0x20a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a4a      	ldr	r2, [pc, #296]	@ (80058b8 <HAL_GPIO_Init+0x31c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <HAL_GPIO_Init+0x206>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a49      	ldr	r2, [pc, #292]	@ (80058bc <HAL_GPIO_Init+0x320>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d101      	bne.n	800579e <HAL_GPIO_Init+0x202>
 800579a:	2306      	movs	r3, #6
 800579c:	e00c      	b.n	80057b8 <HAL_GPIO_Init+0x21c>
 800579e:	2307      	movs	r3, #7
 80057a0:	e00a      	b.n	80057b8 <HAL_GPIO_Init+0x21c>
 80057a2:	2305      	movs	r3, #5
 80057a4:	e008      	b.n	80057b8 <HAL_GPIO_Init+0x21c>
 80057a6:	2304      	movs	r3, #4
 80057a8:	e006      	b.n	80057b8 <HAL_GPIO_Init+0x21c>
 80057aa:	2303      	movs	r3, #3
 80057ac:	e004      	b.n	80057b8 <HAL_GPIO_Init+0x21c>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e002      	b.n	80057b8 <HAL_GPIO_Init+0x21c>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <HAL_GPIO_Init+0x21c>
 80057b6:	2300      	movs	r3, #0
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	f002 0203 	and.w	r2, r2, #3
 80057be:	0092      	lsls	r2, r2, #2
 80057c0:	4093      	lsls	r3, r2
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057c8:	4935      	ldr	r1, [pc, #212]	@ (80058a0 <HAL_GPIO_Init+0x304>)
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	3302      	adds	r3, #2
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057d6:	4b3a      	ldr	r3, [pc, #232]	@ (80058c0 <HAL_GPIO_Init+0x324>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	43db      	mvns	r3, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4013      	ands	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057fa:	4a31      	ldr	r2, [pc, #196]	@ (80058c0 <HAL_GPIO_Init+0x324>)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005800:	4b2f      	ldr	r3, [pc, #188]	@ (80058c0 <HAL_GPIO_Init+0x324>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	43db      	mvns	r3, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4013      	ands	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005824:	4a26      	ldr	r2, [pc, #152]	@ (80058c0 <HAL_GPIO_Init+0x324>)
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800582a:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <HAL_GPIO_Init+0x324>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	43db      	mvns	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800584e:	4a1c      	ldr	r2, [pc, #112]	@ (80058c0 <HAL_GPIO_Init+0x324>)
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <HAL_GPIO_Init+0x324>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	43db      	mvns	r3, r3
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	4013      	ands	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005878:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <HAL_GPIO_Init+0x324>)
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3301      	adds	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b0f      	cmp	r3, #15
 8005888:	f67f ae96 	bls.w	80055b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	3724      	adds	r7, #36	@ 0x24
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40023800 	.word	0x40023800
 80058a0:	40013800 	.word	0x40013800
 80058a4:	40020000 	.word	0x40020000
 80058a8:	40020400 	.word	0x40020400
 80058ac:	40020800 	.word	0x40020800
 80058b0:	40020c00 	.word	0x40020c00
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40021400 	.word	0x40021400
 80058bc:	40021800 	.word	0x40021800
 80058c0:	40013c00 	.word	0x40013c00

080058c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	807b      	strh	r3, [r7, #2]
 80058d0:	4613      	mov	r3, r2
 80058d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058d4:	787b      	ldrb	r3, [r7, #1]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058da:	887a      	ldrh	r2, [r7, #2]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058e0:	e003      	b.n	80058ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058e2:	887b      	ldrh	r3, [r7, #2]
 80058e4:	041a      	lsls	r2, r3, #16
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	619a      	str	r2, [r3, #24]
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b085      	sub	sp, #20
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005908:	887a      	ldrh	r2, [r7, #2]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4013      	ands	r3, r2
 800590e:	041a      	lsls	r2, r3, #16
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	43d9      	mvns	r1, r3
 8005914:	887b      	ldrh	r3, [r7, #2]
 8005916:	400b      	ands	r3, r1
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	619a      	str	r2, [r3, #24]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	4013      	ands	r3, r2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d006      	beq.n	8005950 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005942:	4a05      	ldr	r2, [pc, #20]	@ (8005958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f806 	bl	800595c <HAL_GPIO_EXTI_Callback>
  }
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40013c00 	.word	0x40013c00

0800595c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e12b      	b.n	8005bde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fc ff18 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	@ 0x24
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059d8:	f001 fa48 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 80059dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4a81      	ldr	r2, [pc, #516]	@ (8005be8 <HAL_I2C_Init+0x274>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d807      	bhi.n	80059f8 <HAL_I2C_Init+0x84>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a80      	ldr	r2, [pc, #512]	@ (8005bec <HAL_I2C_Init+0x278>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	bf94      	ite	ls
 80059f0:	2301      	movls	r3, #1
 80059f2:	2300      	movhi	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e006      	b.n	8005a06 <HAL_I2C_Init+0x92>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a7d      	ldr	r2, [pc, #500]	@ (8005bf0 <HAL_I2C_Init+0x27c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	bf94      	ite	ls
 8005a00:	2301      	movls	r3, #1
 8005a02:	2300      	movhi	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e0e7      	b.n	8005bde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a78      	ldr	r2, [pc, #480]	@ (8005bf4 <HAL_I2C_Init+0x280>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	0c9b      	lsrs	r3, r3, #18
 8005a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a6a      	ldr	r2, [pc, #424]	@ (8005be8 <HAL_I2C_Init+0x274>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d802      	bhi.n	8005a48 <HAL_I2C_Init+0xd4>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	3301      	adds	r3, #1
 8005a46:	e009      	b.n	8005a5c <HAL_I2C_Init+0xe8>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	4a69      	ldr	r2, [pc, #420]	@ (8005bf8 <HAL_I2C_Init+0x284>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	099b      	lsrs	r3, r3, #6
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	495c      	ldr	r1, [pc, #368]	@ (8005be8 <HAL_I2C_Init+0x274>)
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	d819      	bhi.n	8005ab0 <HAL_I2C_Init+0x13c>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	1e59      	subs	r1, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a90:	400b      	ands	r3, r1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_I2C_Init+0x138>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1e59      	subs	r1, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aaa:	e051      	b.n	8005b50 <HAL_I2C_Init+0x1dc>
 8005aac:	2304      	movs	r3, #4
 8005aae:	e04f      	b.n	8005b50 <HAL_I2C_Init+0x1dc>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d111      	bne.n	8005adc <HAL_I2C_Init+0x168>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	1e58      	subs	r0, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6859      	ldr	r1, [r3, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	440b      	add	r3, r1
 8005ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aca:	3301      	adds	r3, #1
 8005acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	e012      	b.n	8005b02 <HAL_I2C_Init+0x18e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1e58      	subs	r0, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6859      	ldr	r1, [r3, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	0099      	lsls	r1, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005af2:	3301      	adds	r3, #1
 8005af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <HAL_I2C_Init+0x196>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e022      	b.n	8005b50 <HAL_I2C_Init+0x1dc>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10e      	bne.n	8005b30 <HAL_I2C_Init+0x1bc>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1e58      	subs	r0, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6859      	ldr	r1, [r3, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	440b      	add	r3, r1
 8005b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b24:	3301      	adds	r3, #1
 8005b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b2e:	e00f      	b.n	8005b50 <HAL_I2C_Init+0x1dc>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	1e58      	subs	r0, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6859      	ldr	r1, [r3, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	0099      	lsls	r1, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b46:	3301      	adds	r3, #1
 8005b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	6809      	ldr	r1, [r1, #0]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6911      	ldr	r1, [r2, #16]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68d2      	ldr	r2, [r2, #12]
 8005b8a:	4311      	orrs	r1, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	000186a0 	.word	0x000186a0
 8005bec:	001e847f 	.word	0x001e847f
 8005bf0:	003d08ff 	.word	0x003d08ff
 8005bf4:	431bde83 	.word	0x431bde83
 8005bf8:	10624dd3 	.word	0x10624dd3

08005bfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	461a      	mov	r2, r3
 8005c08:	460b      	mov	r3, r1
 8005c0a:	817b      	strh	r3, [r7, #10]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c10:	f7fd f91a 	bl	8002e48 <HAL_GetTick>
 8005c14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	f040 80e0 	bne.w	8005de4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	2319      	movs	r3, #25
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4970      	ldr	r1, [pc, #448]	@ (8005df0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fdf4 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e0d3      	b.n	8005de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_I2C_Master_Transmit+0x50>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e0cc      	b.n	8005de6 <HAL_I2C_Master_Transmit+0x1ea>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d007      	beq.n	8005c72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2221      	movs	r2, #33	@ 0x21
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	893a      	ldrh	r2, [r7, #8]
 8005ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a50      	ldr	r2, [pc, #320]	@ (8005df4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cb4:	8979      	ldrh	r1, [r7, #10]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fbc8 	bl	8006450 <I2C_MasterRequestWrite>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e08d      	b.n	8005de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ce0:	e066      	b.n	8005db0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	6a39      	ldr	r1, [r7, #32]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 feb2 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00d      	beq.n	8005d0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d107      	bne.n	8005d0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e06b      	b.n	8005de6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	781a      	ldrb	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d11b      	bne.n	8005d84 <HAL_I2C_Master_Transmit+0x188>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d017      	beq.n	8005d84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	6a39      	ldr	r1, [r7, #32]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fea9 	bl	8006ae0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00d      	beq.n	8005db0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d107      	bne.n	8005dac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005daa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e01a      	b.n	8005de6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d194      	bne.n	8005ce2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	00100002 	.word	0x00100002
 8005df4:	ffff0000 	.word	0xffff0000

08005df8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	607a      	str	r2, [r7, #4]
 8005e02:	461a      	mov	r2, r3
 8005e04:	460b      	mov	r3, r1
 8005e06:	817b      	strh	r3, [r7, #10]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e0c:	f7fd f81c 	bl	8002e48 <HAL_GetTick>
 8005e10:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	f040 8217 	bne.w	800624e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	2319      	movs	r3, #25
 8005e26:	2201      	movs	r2, #1
 8005e28:	497c      	ldr	r1, [pc, #496]	@ (800601c <HAL_I2C_Master_Receive+0x224>)
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fcf6 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005e36:	2302      	movs	r3, #2
 8005e38:	e20a      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_I2C_Master_Receive+0x50>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e203      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d007      	beq.n	8005e6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2222      	movs	r2, #34	@ 0x22
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2210      	movs	r2, #16
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	893a      	ldrh	r2, [r7, #8]
 8005e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4a5c      	ldr	r2, [pc, #368]	@ (8006020 <HAL_I2C_Master_Receive+0x228>)
 8005eae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005eb0:	8979      	ldrh	r1, [r7, #10]
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fb4c 	bl	8006554 <I2C_MasterRequestRead>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e1c4      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d113      	bne.n	8005ef6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	623b      	str	r3, [r7, #32]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	623b      	str	r3, [r7, #32]
 8005ee2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e198      	b.n	8006228 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d11b      	bne.n	8005f36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e178      	b.n	8006228 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d11b      	bne.n	8005f76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	e158      	b.n	8006228 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f9c:	e144      	b.n	8006228 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	f200 80f1 	bhi.w	800618a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d123      	bne.n	8005ff8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fddb 	bl	8006b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e145      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ff6:	e117      	b.n	8006228 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d14e      	bne.n	800609e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	2200      	movs	r2, #0
 8006008:	4906      	ldr	r1, [pc, #24]	@ (8006024 <HAL_I2C_Master_Receive+0x22c>)
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fc06 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e11a      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
 800601a:	bf00      	nop
 800601c:	00100002 	.word	0x00100002
 8006020:	ffff0000 	.word	0xffff0000
 8006024:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800609c:	e0c4      	b.n	8006228 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	2200      	movs	r2, #0
 80060a6:	496c      	ldr	r1, [pc, #432]	@ (8006258 <HAL_I2C_Master_Receive+0x460>)
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fbb7 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0cb      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	2200      	movs	r2, #0
 8006102:	4955      	ldr	r1, [pc, #340]	@ (8006258 <HAL_I2C_Master_Receive+0x460>)
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fb89 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e09d      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006188:	e04e      	b.n	8006228 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800618a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fcee 	bl	8006b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e058      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d124      	bne.n	8006228 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d107      	bne.n	80061f6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622c:	2b00      	cmp	r3, #0
 800622e:	f47f aeb6 	bne.w	8005f9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	e000      	b.n	8006250 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800624e:	2302      	movs	r3, #2
  }
}
 8006250:	4618      	mov	r0, r3
 8006252:	3728      	adds	r7, #40	@ 0x28
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	00010004 	.word	0x00010004

0800625c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	461a      	mov	r2, r3
 800626a:	4603      	mov	r3, r0
 800626c:	817b      	strh	r3, [r7, #10]
 800626e:	460b      	mov	r3, r1
 8006270:	813b      	strh	r3, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006276:	f7fc fde7 	bl	8002e48 <HAL_GetTick>
 800627a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b20      	cmp	r3, #32
 8006286:	f040 80d9 	bne.w	800643c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	2319      	movs	r3, #25
 8006290:	2201      	movs	r2, #1
 8006292:	496d      	ldr	r1, [pc, #436]	@ (8006448 <HAL_I2C_Mem_Write+0x1ec>)
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fac1 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
 80062a2:	e0cc      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_I2C_Mem_Write+0x56>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0c5      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d007      	beq.n	80062d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2221      	movs	r2, #33	@ 0x21
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2240      	movs	r2, #64	@ 0x40
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006308:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a4d      	ldr	r2, [pc, #308]	@ (800644c <HAL_I2C_Mem_Write+0x1f0>)
 8006318:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800631a:	88f8      	ldrh	r0, [r7, #6]
 800631c:	893a      	ldrh	r2, [r7, #8]
 800631e:	8979      	ldrh	r1, [r7, #10]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4603      	mov	r3, r0
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f9e0 	bl	80066f0 <I2C_RequestMemoryWrite>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d052      	beq.n	80063dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e081      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fb86 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	2b04      	cmp	r3, #4
 8006350:	d107      	bne.n	8006362 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e06b      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d11b      	bne.n	80063dc <HAL_I2C_Mem_Write+0x180>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d017      	beq.n	80063dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1aa      	bne.n	800633a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fb79 	bl	8006ae0 <I2C_WaitOnBTFFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00d      	beq.n	8006410 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d107      	bne.n	800640c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800640a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e016      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	e000      	b.n	800643e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
  }
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	00100002 	.word	0x00100002
 800644c:	ffff0000 	.word	0xffff0000

08006450 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	460b      	mov	r3, r1
 800645e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d006      	beq.n	800647a <I2C_MasterRequestWrite+0x2a>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d003      	beq.n	800647a <I2C_MasterRequestWrite+0x2a>
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006478:	d108      	bne.n	800648c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e00b      	b.n	80064a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006490:	2b12      	cmp	r3, #18
 8006492:	d107      	bne.n	80064a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f9b3 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00d      	beq.n	80064d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ca:	d103      	bne.n	80064d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e035      	b.n	8006544 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064e0:	d108      	bne.n	80064f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064e2:	897b      	ldrh	r3, [r7, #10]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064f0:	611a      	str	r2, [r3, #16]
 80064f2:	e01b      	b.n	800652c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064f4:	897b      	ldrh	r3, [r7, #10]
 80064f6:	11db      	asrs	r3, r3, #7
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 0306 	and.w	r3, r3, #6
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f063 030f 	orn	r3, r3, #15
 8006504:	b2da      	uxtb	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	490e      	ldr	r1, [pc, #56]	@ (800654c <I2C_MasterRequestWrite+0xfc>)
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f9fc 	bl	8006910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e010      	b.n	8006544 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006522:	897b      	ldrh	r3, [r7, #10]
 8006524:	b2da      	uxtb	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4907      	ldr	r1, [pc, #28]	@ (8006550 <I2C_MasterRequestWrite+0x100>)
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f9ec 	bl	8006910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	00010008 	.word	0x00010008
 8006550:	00010002 	.word	0x00010002

08006554 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	460b      	mov	r3, r1
 8006562:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006578:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d006      	beq.n	800658e <I2C_MasterRequestRead+0x3a>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d003      	beq.n	800658e <I2C_MasterRequestRead+0x3a>
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800658c:	d108      	bne.n	80065a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e00b      	b.n	80065b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a4:	2b11      	cmp	r3, #17
 80065a6:	d107      	bne.n	80065b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f929 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00d      	beq.n	80065ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065de:	d103      	bne.n	80065e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e079      	b.n	80066e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065f4:	d108      	bne.n	8006608 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065f6:	897b      	ldrh	r3, [r7, #10]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	611a      	str	r2, [r3, #16]
 8006606:	e05f      	b.n	80066c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006608:	897b      	ldrh	r3, [r7, #10]
 800660a:	11db      	asrs	r3, r3, #7
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0306 	and.w	r3, r3, #6
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f063 030f 	orn	r3, r3, #15
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4930      	ldr	r1, [pc, #192]	@ (80066e8 <I2C_MasterRequestRead+0x194>)
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f972 	bl	8006910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e054      	b.n	80066e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006636:	897b      	ldrh	r3, [r7, #10]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4929      	ldr	r1, [pc, #164]	@ (80066ec <I2C_MasterRequestRead+0x198>)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f962 	bl	8006910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e044      	b.n	80066e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006656:	2300      	movs	r3, #0
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800667a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f8c7 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00d      	beq.n	80066b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a2:	d103      	bne.n	80066ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066aa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e017      	b.n	80066e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80066b0:	897b      	ldrh	r3, [r7, #10]
 80066b2:	11db      	asrs	r3, r3, #7
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f003 0306 	and.w	r3, r3, #6
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f063 030e 	orn	r3, r3, #14
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4907      	ldr	r1, [pc, #28]	@ (80066ec <I2C_MasterRequestRead+0x198>)
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f91e 	bl	8006910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	00010008 	.word	0x00010008
 80066ec:	00010002 	.word	0x00010002

080066f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4603      	mov	r3, r0
 8006700:	817b      	strh	r3, [r7, #10]
 8006702:	460b      	mov	r3, r1
 8006704:	813b      	strh	r3, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006718:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	2200      	movs	r2, #0
 8006722:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f878 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00d      	beq.n	800674e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800673c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006740:	d103      	bne.n	800674a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006748:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e05f      	b.n	800680e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800674e:	897b      	ldrh	r3, [r7, #10]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800675c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	6a3a      	ldr	r2, [r7, #32]
 8006762:	492d      	ldr	r1, [pc, #180]	@ (8006818 <I2C_RequestMemoryWrite+0x128>)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f8d3 	bl	8006910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e04c      	b.n	800680e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678c:	6a39      	ldr	r1, [r7, #32]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f95e 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00d      	beq.n	80067b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d107      	bne.n	80067b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e02b      	b.n	800680e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067bc:	893b      	ldrh	r3, [r7, #8]
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	611a      	str	r2, [r3, #16]
 80067c6:	e021      	b.n	800680c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067c8:	893b      	ldrh	r3, [r7, #8]
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d8:	6a39      	ldr	r1, [r7, #32]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f938 	bl	8006a50 <I2C_WaitOnTXEFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d107      	bne.n	80067fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e005      	b.n	800680e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006802:	893b      	ldrh	r3, [r7, #8]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	00010002 	.word	0x00010002

0800681c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800682c:	e048      	b.n	80068c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d044      	beq.n	80068c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fc fb07 	bl	8002e48 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d139      	bne.n	80068c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	0c1b      	lsrs	r3, r3, #16
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b01      	cmp	r3, #1
 8006854:	d10d      	bne.n	8006872 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	43da      	mvns	r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	4013      	ands	r3, r2
 8006862:	b29b      	uxth	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf0c      	ite	eq
 8006868:	2301      	moveq	r3, #1
 800686a:	2300      	movne	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	461a      	mov	r2, r3
 8006870:	e00c      	b.n	800688c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	43da      	mvns	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4013      	ands	r3, r2
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	461a      	mov	r2, r3
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	429a      	cmp	r2, r3
 8006890:	d116      	bne.n	80068c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e023      	b.n	8006908 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	0c1b      	lsrs	r3, r3, #16
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d10d      	bne.n	80068e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	43da      	mvns	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	e00c      	b.n	8006900 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	43da      	mvns	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4013      	ands	r3, r2
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	429a      	cmp	r2, r3
 8006904:	d093      	beq.n	800682e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800691e:	e071      	b.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800692a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800692e:	d123      	bne.n	8006978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800693e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	f043 0204 	orr.w	r2, r3, #4
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e067      	b.n	8006a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697e:	d041      	beq.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006980:	f7fc fa62 	bl	8002e48 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d302      	bcc.n	8006996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d136      	bne.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	0c1b      	lsrs	r3, r3, #16
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d10c      	bne.n	80069ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	43da      	mvns	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4013      	ands	r3, r2
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf14      	ite	ne
 80069b2:	2301      	movne	r3, #1
 80069b4:	2300      	moveq	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	e00b      	b.n	80069d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	43da      	mvns	r2, r3
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4013      	ands	r3, r2
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f0:	f043 0220 	orr.w	r2, r3, #32
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e021      	b.n	8006a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	0c1b      	lsrs	r3, r3, #16
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d10c      	bne.n	8006a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	43da      	mvns	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bf14      	ite	ne
 8006a20:	2301      	movne	r3, #1
 8006a22:	2300      	moveq	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	e00b      	b.n	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	43da      	mvns	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4013      	ands	r3, r2
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bf14      	ite	ne
 8006a3a:	2301      	movne	r3, #1
 8006a3c:	2300      	moveq	r3, #0
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f47f af6d 	bne.w	8006920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a5c:	e034      	b.n	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 f8e3 	bl	8006c2a <I2C_IsAcknowledgeFailed>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e034      	b.n	8006ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d028      	beq.n	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a76:	f7fc f9e7 	bl	8002e48 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d302      	bcc.n	8006a8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d11d      	bne.n	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a96:	2b80      	cmp	r3, #128	@ 0x80
 8006a98:	d016      	beq.n	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab4:	f043 0220 	orr.w	r2, r3, #32
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e007      	b.n	8006ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad2:	2b80      	cmp	r3, #128	@ 0x80
 8006ad4:	d1c3      	bne.n	8006a5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aec:	e034      	b.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 f89b 	bl	8006c2a <I2C_IsAcknowledgeFailed>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e034      	b.n	8006b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d028      	beq.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b06:	f7fc f99f 	bl	8002e48 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d302      	bcc.n	8006b1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11d      	bne.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d016      	beq.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e007      	b.n	8006b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d1c3      	bne.n	8006aee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b7c:	e049      	b.n	8006c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d119      	bne.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0210 	mvn.w	r2, #16
 8006b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e030      	b.n	8006c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc0:	f7fc f942 	bl	8002e48 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d11d      	bne.n	8006c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be0:	2b40      	cmp	r3, #64	@ 0x40
 8006be2:	d016      	beq.n	8006c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e007      	b.n	8006c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1c:	2b40      	cmp	r3, #64	@ 0x40
 8006c1e:	d1ae      	bne.n	8006b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c40:	d11b      	bne.n	8006c7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	f043 0204 	orr.w	r2, r3, #4
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0cc      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c9c:	4b68      	ldr	r3, [pc, #416]	@ (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d90c      	bls.n	8006cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006caa:	4b65      	ldr	r3, [pc, #404]	@ (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb2:	4b63      	ldr	r3, [pc, #396]	@ (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d001      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0b8      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cdc:	4b59      	ldr	r3, [pc, #356]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4a58      	ldr	r2, [pc, #352]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cf4:	4b53      	ldr	r3, [pc, #332]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	4a52      	ldr	r2, [pc, #328]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d00:	4b50      	ldr	r3, [pc, #320]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	494d      	ldr	r1, [pc, #308]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d044      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d107      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d26:	4b47      	ldr	r3, [pc, #284]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d119      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e07f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d003      	beq.n	8006d46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d107      	bne.n	8006d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d46:	4b3f      	ldr	r3, [pc, #252]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d109      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e06f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d56:	4b3b      	ldr	r3, [pc, #236]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e067      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d66:	4b37      	ldr	r3, [pc, #220]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f023 0203 	bic.w	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4934      	ldr	r1, [pc, #208]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d78:	f7fc f866 	bl	8002e48 <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7e:	e00a      	b.n	8006d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d80:	f7fc f862 	bl	8002e48 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e04f      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d96:	4b2b      	ldr	r3, [pc, #172]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 020c 	and.w	r2, r3, #12
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d1eb      	bne.n	8006d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006da8:	4b25      	ldr	r3, [pc, #148]	@ (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d20c      	bcs.n	8006dd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db6:	4b22      	ldr	r3, [pc, #136]	@ (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b20      	ldr	r3, [pc, #128]	@ (8006e40 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e032      	b.n	8006e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ddc:	4b19      	ldr	r3, [pc, #100]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4916      	ldr	r1, [pc, #88]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dfa:	4b12      	ldr	r3, [pc, #72]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	490e      	ldr	r1, [pc, #56]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e0e:	f000 f855 	bl	8006ebc <HAL_RCC_GetSysClockFreq>
 8006e12:	4602      	mov	r2, r0
 8006e14:	4b0b      	ldr	r3, [pc, #44]	@ (8006e44 <HAL_RCC_ClockConfig+0x1bc>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	091b      	lsrs	r3, r3, #4
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	490a      	ldr	r1, [pc, #40]	@ (8006e48 <HAL_RCC_ClockConfig+0x1c0>)
 8006e20:	5ccb      	ldrb	r3, [r1, r3]
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	4a09      	ldr	r2, [pc, #36]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c4>)
 8006e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e2a:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fb ffc6 	bl	8002dc0 <HAL_InitTick>

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40023c00 	.word	0x40023c00
 8006e44:	40023800 	.word	0x40023800
 8006e48:	0800d144 	.word	0x0800d144
 8006e4c:	20000000 	.word	0x20000000
 8006e50:	20000004 	.word	0x20000004

08006e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e58:	4b03      	ldr	r3, [pc, #12]	@ (8006e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000000 	.word	0x20000000

08006e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e70:	f7ff fff0 	bl	8006e54 <HAL_RCC_GetHCLKFreq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	0a9b      	lsrs	r3, r3, #10
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	4903      	ldr	r1, [pc, #12]	@ (8006e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	0800d154 	.word	0x0800d154

08006e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e98:	f7ff ffdc 	bl	8006e54 <HAL_RCC_GetHCLKFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b05      	ldr	r3, [pc, #20]	@ (8006eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	0b5b      	lsrs	r3, r3, #13
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	4903      	ldr	r1, [pc, #12]	@ (8006eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eaa:	5ccb      	ldrb	r3, [r1, r3]
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	0800d154 	.word	0x0800d154

08006ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec0:	b0ae      	sub	sp, #184	@ 0xb8
 8006ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ee2:	4bcb      	ldr	r3, [pc, #812]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	f200 8206 	bhi.w	80072fc <HAL_RCC_GetSysClockFreq+0x440>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f2d 	.word	0x08006f2d
 8006efc:	080072fd 	.word	0x080072fd
 8006f00:	080072fd 	.word	0x080072fd
 8006f04:	080072fd 	.word	0x080072fd
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	080072fd 	.word	0x080072fd
 8006f10:	080072fd 	.word	0x080072fd
 8006f14:	080072fd 	.word	0x080072fd
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	080072fd 	.word	0x080072fd
 8006f20:	080072fd 	.word	0x080072fd
 8006f24:	080072fd 	.word	0x080072fd
 8006f28:	0800712d 	.word	0x0800712d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f2c:	4bb9      	ldr	r3, [pc, #740]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f32:	e1e7      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f34:	4bb8      	ldr	r3, [pc, #736]	@ (8007218 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f3a:	e1e3      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f3c:	4bb4      	ldr	r3, [pc, #720]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f48:	4bb1      	ldr	r3, [pc, #708]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d071      	beq.n	8007038 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f54:	4bae      	ldr	r3, [pc, #696]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	099b      	lsrs	r3, r3, #6
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f60:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	f04f 0000 	mov.w	r0, #0
 8006f82:	f04f 0100 	mov.w	r1, #0
 8006f86:	0159      	lsls	r1, r3, #5
 8006f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f8c:	0150      	lsls	r0, r2, #5
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4621      	mov	r1, r4
 8006f94:	1a51      	subs	r1, r2, r1
 8006f96:	6439      	str	r1, [r7, #64]	@ 0x40
 8006f98:	4629      	mov	r1, r5
 8006f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8006f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006fac:	4649      	mov	r1, r9
 8006fae:	018b      	lsls	r3, r1, #6
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	018a      	lsls	r2, r1, #6
 8006fba:	4641      	mov	r1, r8
 8006fbc:	1a51      	subs	r1, r2, r1
 8006fbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	00cb      	lsls	r3, r1, #3
 8006fd8:	4641      	mov	r1, r8
 8006fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fde:	4641      	mov	r1, r8
 8006fe0:	00ca      	lsls	r2, r1, #3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4622      	mov	r2, r4
 8006fea:	189b      	adds	r3, r3, r2
 8006fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fee:	462b      	mov	r3, r5
 8006ff0:	460a      	mov	r2, r1
 8006ff2:	eb42 0303 	adc.w	r3, r2, r3
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007004:	4629      	mov	r1, r5
 8007006:	024b      	lsls	r3, r1, #9
 8007008:	4621      	mov	r1, r4
 800700a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800700e:	4621      	mov	r1, r4
 8007010:	024a      	lsls	r2, r1, #9
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800701a:	2200      	movs	r2, #0
 800701c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007020:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007024:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007028:	f7f9 fe2e 	bl	8000c88 <__aeabi_uldivmod>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4613      	mov	r3, r2
 8007032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007036:	e067      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007038:	4b75      	ldr	r3, [pc, #468]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	099b      	lsrs	r3, r3, #6
 800703e:	2200      	movs	r2, #0
 8007040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007044:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007048:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800704c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007050:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007052:	2300      	movs	r3, #0
 8007054:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007056:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800705a:	4622      	mov	r2, r4
 800705c:	462b      	mov	r3, r5
 800705e:	f04f 0000 	mov.w	r0, #0
 8007062:	f04f 0100 	mov.w	r1, #0
 8007066:	0159      	lsls	r1, r3, #5
 8007068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800706c:	0150      	lsls	r0, r2, #5
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4621      	mov	r1, r4
 8007074:	1a51      	subs	r1, r2, r1
 8007076:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007078:	4629      	mov	r1, r5
 800707a:	eb63 0301 	sbc.w	r3, r3, r1
 800707e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800708c:	4649      	mov	r1, r9
 800708e:	018b      	lsls	r3, r1, #6
 8007090:	4641      	mov	r1, r8
 8007092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007096:	4641      	mov	r1, r8
 8007098:	018a      	lsls	r2, r1, #6
 800709a:	4641      	mov	r1, r8
 800709c:	ebb2 0a01 	subs.w	sl, r2, r1
 80070a0:	4649      	mov	r1, r9
 80070a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ba:	4692      	mov	sl, r2
 80070bc:	469b      	mov	fp, r3
 80070be:	4623      	mov	r3, r4
 80070c0:	eb1a 0303 	adds.w	r3, sl, r3
 80070c4:	623b      	str	r3, [r7, #32]
 80070c6:	462b      	mov	r3, r5
 80070c8:	eb4b 0303 	adc.w	r3, fp, r3
 80070cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ce:	f04f 0200 	mov.w	r2, #0
 80070d2:	f04f 0300 	mov.w	r3, #0
 80070d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80070da:	4629      	mov	r1, r5
 80070dc:	028b      	lsls	r3, r1, #10
 80070de:	4621      	mov	r1, r4
 80070e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070e4:	4621      	mov	r1, r4
 80070e6:	028a      	lsls	r2, r1, #10
 80070e8:	4610      	mov	r0, r2
 80070ea:	4619      	mov	r1, r3
 80070ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070f0:	2200      	movs	r2, #0
 80070f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80070f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80070f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80070fa:	f7f9 fdc5 	bl	8000c88 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4613      	mov	r3, r2
 8007104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007108:	4b41      	ldr	r3, [pc, #260]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	3301      	adds	r3, #1
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800711a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800711e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007122:	fbb2 f3f3 	udiv	r3, r2, r3
 8007126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800712a:	e0eb      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800712c:	4b38      	ldr	r3, [pc, #224]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007138:	4b35      	ldr	r3, [pc, #212]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d06b      	beq.n	800721c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007144:	4b32      	ldr	r3, [pc, #200]	@ (8007210 <HAL_RCC_GetSysClockFreq+0x354>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	099b      	lsrs	r3, r3, #6
 800714a:	2200      	movs	r2, #0
 800714c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800714e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007150:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	663b      	str	r3, [r7, #96]	@ 0x60
 8007158:	2300      	movs	r3, #0
 800715a:	667b      	str	r3, [r7, #100]	@ 0x64
 800715c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007160:	4622      	mov	r2, r4
 8007162:	462b      	mov	r3, r5
 8007164:	f04f 0000 	mov.w	r0, #0
 8007168:	f04f 0100 	mov.w	r1, #0
 800716c:	0159      	lsls	r1, r3, #5
 800716e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007172:	0150      	lsls	r0, r2, #5
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4621      	mov	r1, r4
 800717a:	1a51      	subs	r1, r2, r1
 800717c:	61b9      	str	r1, [r7, #24]
 800717e:	4629      	mov	r1, r5
 8007180:	eb63 0301 	sbc.w	r3, r3, r1
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	f04f 0200 	mov.w	r2, #0
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007192:	4659      	mov	r1, fp
 8007194:	018b      	lsls	r3, r1, #6
 8007196:	4651      	mov	r1, sl
 8007198:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800719c:	4651      	mov	r1, sl
 800719e:	018a      	lsls	r2, r1, #6
 80071a0:	4651      	mov	r1, sl
 80071a2:	ebb2 0801 	subs.w	r8, r2, r1
 80071a6:	4659      	mov	r1, fp
 80071a8:	eb63 0901 	sbc.w	r9, r3, r1
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071c0:	4690      	mov	r8, r2
 80071c2:	4699      	mov	r9, r3
 80071c4:	4623      	mov	r3, r4
 80071c6:	eb18 0303 	adds.w	r3, r8, r3
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	462b      	mov	r3, r5
 80071ce:	eb49 0303 	adc.w	r3, r9, r3
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80071e0:	4629      	mov	r1, r5
 80071e2:	024b      	lsls	r3, r1, #9
 80071e4:	4621      	mov	r1, r4
 80071e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071ea:	4621      	mov	r1, r4
 80071ec:	024a      	lsls	r2, r1, #9
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071f6:	2200      	movs	r2, #0
 80071f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80071fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007200:	f7f9 fd42 	bl	8000c88 <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4613      	mov	r3, r2
 800720a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800720e:	e065      	b.n	80072dc <HAL_RCC_GetSysClockFreq+0x420>
 8007210:	40023800 	.word	0x40023800
 8007214:	00f42400 	.word	0x00f42400
 8007218:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800721c:	4b3d      	ldr	r3, [pc, #244]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x458>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	099b      	lsrs	r3, r3, #6
 8007222:	2200      	movs	r2, #0
 8007224:	4618      	mov	r0, r3
 8007226:	4611      	mov	r1, r2
 8007228:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800722c:	653b      	str	r3, [r7, #80]	@ 0x50
 800722e:	2300      	movs	r3, #0
 8007230:	657b      	str	r3, [r7, #84]	@ 0x54
 8007232:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	f04f 0000 	mov.w	r0, #0
 800723e:	f04f 0100 	mov.w	r1, #0
 8007242:	0159      	lsls	r1, r3, #5
 8007244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007248:	0150      	lsls	r0, r2, #5
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4641      	mov	r1, r8
 8007250:	1a51      	subs	r1, r2, r1
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	4649      	mov	r1, r9
 8007256:	eb63 0301 	sbc.w	r3, r3, r1
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007268:	4659      	mov	r1, fp
 800726a:	018b      	lsls	r3, r1, #6
 800726c:	4651      	mov	r1, sl
 800726e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007272:	4651      	mov	r1, sl
 8007274:	018a      	lsls	r2, r1, #6
 8007276:	4651      	mov	r1, sl
 8007278:	1a54      	subs	r4, r2, r1
 800727a:	4659      	mov	r1, fp
 800727c:	eb63 0501 	sbc.w	r5, r3, r1
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	00eb      	lsls	r3, r5, #3
 800728a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800728e:	00e2      	lsls	r2, r4, #3
 8007290:	4614      	mov	r4, r2
 8007292:	461d      	mov	r5, r3
 8007294:	4643      	mov	r3, r8
 8007296:	18e3      	adds	r3, r4, r3
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	464b      	mov	r3, r9
 800729c:	eb45 0303 	adc.w	r3, r5, r3
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	f04f 0200 	mov.w	r2, #0
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072ae:	4629      	mov	r1, r5
 80072b0:	028b      	lsls	r3, r1, #10
 80072b2:	4621      	mov	r1, r4
 80072b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072b8:	4621      	mov	r1, r4
 80072ba:	028a      	lsls	r2, r1, #10
 80072bc:	4610      	mov	r0, r2
 80072be:	4619      	mov	r1, r3
 80072c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c4:	2200      	movs	r2, #0
 80072c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80072ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072ce:	f7f9 fcdb 	bl	8000c88 <__aeabi_uldivmod>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4613      	mov	r3, r2
 80072d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80072dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x458>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	0f1b      	lsrs	r3, r3, #28
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80072ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80072fa:	e003      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072fc:	4b06      	ldr	r3, [pc, #24]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x45c>)
 80072fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007302:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007308:	4618      	mov	r0, r3
 800730a:	37b8      	adds	r7, #184	@ 0xb8
 800730c:	46bd      	mov	sp, r7
 800730e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007312:	bf00      	nop
 8007314:	40023800 	.word	0x40023800
 8007318:	00f42400 	.word	0x00f42400

0800731c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e28d      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8083 	beq.w	8007442 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800733c:	4b94      	ldr	r3, [pc, #592]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 030c 	and.w	r3, r3, #12
 8007344:	2b04      	cmp	r3, #4
 8007346:	d019      	beq.n	800737c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007348:	4b91      	ldr	r3, [pc, #580]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 030c 	and.w	r3, r3, #12
        || \
 8007350:	2b08      	cmp	r3, #8
 8007352:	d106      	bne.n	8007362 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007354:	4b8e      	ldr	r3, [pc, #568]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800735c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007360:	d00c      	beq.n	800737c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007362:	4b8b      	ldr	r3, [pc, #556]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800736a:	2b0c      	cmp	r3, #12
 800736c:	d112      	bne.n	8007394 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800736e:	4b88      	ldr	r3, [pc, #544]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800737a:	d10b      	bne.n	8007394 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800737c:	4b84      	ldr	r3, [pc, #528]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d05b      	beq.n	8007440 <HAL_RCC_OscConfig+0x124>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d157      	bne.n	8007440 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e25a      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800739c:	d106      	bne.n	80073ac <HAL_RCC_OscConfig+0x90>
 800739e:	4b7c      	ldr	r3, [pc, #496]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a7b      	ldr	r2, [pc, #492]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e01d      	b.n	80073e8 <HAL_RCC_OscConfig+0xcc>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073b4:	d10c      	bne.n	80073d0 <HAL_RCC_OscConfig+0xb4>
 80073b6:	4b76      	ldr	r3, [pc, #472]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a75      	ldr	r2, [pc, #468]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	4b73      	ldr	r3, [pc, #460]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a72      	ldr	r2, [pc, #456]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	e00b      	b.n	80073e8 <HAL_RCC_OscConfig+0xcc>
 80073d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a6e      	ldr	r2, [pc, #440]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a6b      	ldr	r2, [pc, #428]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80073e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d013      	beq.n	8007418 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f0:	f7fb fd2a 	bl	8002e48 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073f8:	f7fb fd26 	bl	8002e48 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b64      	cmp	r3, #100	@ 0x64
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e21f      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800740a:	4b61      	ldr	r3, [pc, #388]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0f0      	beq.n	80073f8 <HAL_RCC_OscConfig+0xdc>
 8007416:	e014      	b.n	8007442 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fb fd16 	bl	8002e48 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007420:	f7fb fd12 	bl	8002e48 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b64      	cmp	r3, #100	@ 0x64
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e20b      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007432:	4b57      	ldr	r3, [pc, #348]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1f0      	bne.n	8007420 <HAL_RCC_OscConfig+0x104>
 800743e:	e000      	b.n	8007442 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d06f      	beq.n	800752e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800744e:	4b50      	ldr	r3, [pc, #320]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 030c 	and.w	r3, r3, #12
 8007456:	2b00      	cmp	r3, #0
 8007458:	d017      	beq.n	800748a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800745a:	4b4d      	ldr	r3, [pc, #308]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007462:	2b08      	cmp	r3, #8
 8007464:	d105      	bne.n	8007472 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007466:	4b4a      	ldr	r3, [pc, #296]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007472:	4b47      	ldr	r3, [pc, #284]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800747a:	2b0c      	cmp	r3, #12
 800747c:	d11c      	bne.n	80074b8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800747e:	4b44      	ldr	r3, [pc, #272]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d116      	bne.n	80074b8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748a:	4b41      	ldr	r3, [pc, #260]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <HAL_RCC_OscConfig+0x186>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d001      	beq.n	80074a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e1d3      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074a2:	4b3b      	ldr	r3, [pc, #236]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4937      	ldr	r1, [pc, #220]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074b6:	e03a      	b.n	800752e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d020      	beq.n	8007502 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c0:	4b34      	ldr	r3, [pc, #208]	@ (8007594 <HAL_RCC_OscConfig+0x278>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c6:	f7fb fcbf 	bl	8002e48 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074ce:	f7fb fcbb 	bl	8002e48 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e1b4      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0f0      	beq.n	80074ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ec:	4b28      	ldr	r3, [pc, #160]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	4925      	ldr	r1, [pc, #148]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	600b      	str	r3, [r1, #0]
 8007500:	e015      	b.n	800752e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007502:	4b24      	ldr	r3, [pc, #144]	@ (8007594 <HAL_RCC_OscConfig+0x278>)
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fb fc9e 	bl	8002e48 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007510:	f7fb fc9a 	bl	8002e48 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e193      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007522:	4b1b      	ldr	r3, [pc, #108]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f0      	bne.n	8007510 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d036      	beq.n	80075a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d016      	beq.n	8007570 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007542:	4b15      	ldr	r3, [pc, #84]	@ (8007598 <HAL_RCC_OscConfig+0x27c>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007548:	f7fb fc7e 	bl	8002e48 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007550:	f7fb fc7a 	bl	8002e48 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e173      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007562:	4b0b      	ldr	r3, [pc, #44]	@ (8007590 <HAL_RCC_OscConfig+0x274>)
 8007564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0x234>
 800756e:	e01b      	b.n	80075a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007570:	4b09      	ldr	r3, [pc, #36]	@ (8007598 <HAL_RCC_OscConfig+0x27c>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007576:	f7fb fc67 	bl	8002e48 <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800757c:	e00e      	b.n	800759c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800757e:	f7fb fc63 	bl	8002e48 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d907      	bls.n	800759c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e15c      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
 8007590:	40023800 	.word	0x40023800
 8007594:	42470000 	.word	0x42470000
 8007598:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800759c:	4b8a      	ldr	r3, [pc, #552]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 800759e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1ea      	bne.n	800757e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8097 	beq.w	80076e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075ba:	4b83      	ldr	r3, [pc, #524]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80075bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10f      	bne.n	80075e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	4b7f      	ldr	r3, [pc, #508]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ce:	4a7e      	ldr	r2, [pc, #504]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80075d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80075d6:	4b7c      	ldr	r3, [pc, #496]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075de:	60bb      	str	r3, [r7, #8]
 80075e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e2:	2301      	movs	r3, #1
 80075e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075e6:	4b79      	ldr	r3, [pc, #484]	@ (80077cc <HAL_RCC_OscConfig+0x4b0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d118      	bne.n	8007624 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075f2:	4b76      	ldr	r3, [pc, #472]	@ (80077cc <HAL_RCC_OscConfig+0x4b0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a75      	ldr	r2, [pc, #468]	@ (80077cc <HAL_RCC_OscConfig+0x4b0>)
 80075f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075fe:	f7fb fc23 	bl	8002e48 <HAL_GetTick>
 8007602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007604:	e008      	b.n	8007618 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007606:	f7fb fc1f 	bl	8002e48 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d901      	bls.n	8007618 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e118      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007618:	4b6c      	ldr	r3, [pc, #432]	@ (80077cc <HAL_RCC_OscConfig+0x4b0>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0f0      	beq.n	8007606 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d106      	bne.n	800763a <HAL_RCC_OscConfig+0x31e>
 800762c:	4b66      	ldr	r3, [pc, #408]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 800762e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007630:	4a65      	ldr	r2, [pc, #404]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 8007632:	f043 0301 	orr.w	r3, r3, #1
 8007636:	6713      	str	r3, [r2, #112]	@ 0x70
 8007638:	e01c      	b.n	8007674 <HAL_RCC_OscConfig+0x358>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b05      	cmp	r3, #5
 8007640:	d10c      	bne.n	800765c <HAL_RCC_OscConfig+0x340>
 8007642:	4b61      	ldr	r3, [pc, #388]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 8007644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007646:	4a60      	ldr	r2, [pc, #384]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 8007648:	f043 0304 	orr.w	r3, r3, #4
 800764c:	6713      	str	r3, [r2, #112]	@ 0x70
 800764e:	4b5e      	ldr	r3, [pc, #376]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	4a5d      	ldr	r2, [pc, #372]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 8007654:	f043 0301 	orr.w	r3, r3, #1
 8007658:	6713      	str	r3, [r2, #112]	@ 0x70
 800765a:	e00b      	b.n	8007674 <HAL_RCC_OscConfig+0x358>
 800765c:	4b5a      	ldr	r3, [pc, #360]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 800765e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007660:	4a59      	ldr	r2, [pc, #356]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 8007662:	f023 0301 	bic.w	r3, r3, #1
 8007666:	6713      	str	r3, [r2, #112]	@ 0x70
 8007668:	4b57      	ldr	r3, [pc, #348]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 800766a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766c:	4a56      	ldr	r2, [pc, #344]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 800766e:	f023 0304 	bic.w	r3, r3, #4
 8007672:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d015      	beq.n	80076a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800767c:	f7fb fbe4 	bl	8002e48 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007682:	e00a      	b.n	800769a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007684:	f7fb fbe0 	bl	8002e48 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e0d7      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800769a:	4b4b      	ldr	r3, [pc, #300]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 800769c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0ee      	beq.n	8007684 <HAL_RCC_OscConfig+0x368>
 80076a6:	e014      	b.n	80076d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a8:	f7fb fbce 	bl	8002e48 <HAL_GetTick>
 80076ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ae:	e00a      	b.n	80076c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b0:	f7fb fbca 	bl	8002e48 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076be:	4293      	cmp	r3, r2
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e0c1      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076c6:	4b40      	ldr	r3, [pc, #256]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80076c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1ee      	bne.n	80076b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d105      	bne.n	80076e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076d8:	4b3b      	ldr	r3, [pc, #236]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80076da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076dc:	4a3a      	ldr	r2, [pc, #232]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80076de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80ad 	beq.w	8007848 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076ee:	4b36      	ldr	r3, [pc, #216]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 030c 	and.w	r3, r3, #12
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d060      	beq.n	80077bc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d145      	bne.n	800778e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007702:	4b33      	ldr	r3, [pc, #204]	@ (80077d0 <HAL_RCC_OscConfig+0x4b4>)
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007708:	f7fb fb9e 	bl	8002e48 <HAL_GetTick>
 800770c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800770e:	e008      	b.n	8007722 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007710:	f7fb fb9a 	bl	8002e48 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e093      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007722:	4b29      	ldr	r3, [pc, #164]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f0      	bne.n	8007710 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69da      	ldr	r2, [r3, #28]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	431a      	orrs	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	019b      	lsls	r3, r3, #6
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	3b01      	subs	r3, #1
 8007748:	041b      	lsls	r3, r3, #16
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	061b      	lsls	r3, r3, #24
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007758:	071b      	lsls	r3, r3, #28
 800775a:	491b      	ldr	r1, [pc, #108]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 800775c:	4313      	orrs	r3, r2
 800775e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007760:	4b1b      	ldr	r3, [pc, #108]	@ (80077d0 <HAL_RCC_OscConfig+0x4b4>)
 8007762:	2201      	movs	r2, #1
 8007764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007766:	f7fb fb6f 	bl	8002e48 <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800776c:	e008      	b.n	8007780 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800776e:	f7fb fb6b 	bl	8002e48 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d901      	bls.n	8007780 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e064      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007780:	4b11      	ldr	r3, [pc, #68]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d0f0      	beq.n	800776e <HAL_RCC_OscConfig+0x452>
 800778c:	e05c      	b.n	8007848 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800778e:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <HAL_RCC_OscConfig+0x4b4>)
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007794:	f7fb fb58 	bl	8002e48 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800779c:	f7fb fb54 	bl	8002e48 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e04d      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ae:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <HAL_RCC_OscConfig+0x4ac>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f0      	bne.n	800779c <HAL_RCC_OscConfig+0x480>
 80077ba:	e045      	b.n	8007848 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d107      	bne.n	80077d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e040      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40007000 	.word	0x40007000
 80077d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077d4:	4b1f      	ldr	r3, [pc, #124]	@ (8007854 <HAL_RCC_OscConfig+0x538>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d030      	beq.n	8007844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d129      	bne.n	8007844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d122      	bne.n	8007844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007804:	4013      	ands	r3, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800780a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800780c:	4293      	cmp	r3, r2
 800780e:	d119      	bne.n	8007844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	3b01      	subs	r3, #1
 800781e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007820:	429a      	cmp	r2, r3
 8007822:	d10f      	bne.n	8007844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007830:	429a      	cmp	r2, r3
 8007832:	d107      	bne.n	8007844 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007840:	429a      	cmp	r2, r3
 8007842:	d001      	beq.n	8007848 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40023800 	.word	0x40023800

08007858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e041      	b.n	80078ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fb f846 	bl	8002910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f000 fbf0 	bl	800807c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b082      	sub	sp, #8
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e041      	b.n	800798c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d106      	bne.n	8007922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fa ffd5 	bl	80028cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2202      	movs	r2, #2
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f000 fba1 	bl	800807c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d109      	bne.n	80079b8 <HAL_TIM_PWM_Start+0x24>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	e022      	b.n	80079fe <HAL_TIM_PWM_Start+0x6a>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d109      	bne.n	80079d2 <HAL_TIM_PWM_Start+0x3e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	bf14      	ite	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	2300      	moveq	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	e015      	b.n	80079fe <HAL_TIM_PWM_Start+0x6a>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d109      	bne.n	80079ec <HAL_TIM_PWM_Start+0x58>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	bf14      	ite	ne
 80079e4:	2301      	movne	r3, #1
 80079e6:	2300      	moveq	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	e008      	b.n	80079fe <HAL_TIM_PWM_Start+0x6a>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	bf14      	ite	ne
 80079f8:	2301      	movne	r3, #1
 80079fa:	2300      	moveq	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e07c      	b.n	8007b00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <HAL_TIM_PWM_Start+0x82>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a14:	e013      	b.n	8007a3e <HAL_TIM_PWM_Start+0xaa>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d104      	bne.n	8007a26 <HAL_TIM_PWM_Start+0x92>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a24:	e00b      	b.n	8007a3e <HAL_TIM_PWM_Start+0xaa>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d104      	bne.n	8007a36 <HAL_TIM_PWM_Start+0xa2>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a34:	e003      	b.n	8007a3e <HAL_TIM_PWM_Start+0xaa>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2201      	movs	r2, #1
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fe0e 	bl	8008668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a2d      	ldr	r2, [pc, #180]	@ (8007b08 <HAL_TIM_PWM_Start+0x174>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <HAL_TIM_PWM_Start+0xcc>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8007b0c <HAL_TIM_PWM_Start+0x178>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d101      	bne.n	8007a64 <HAL_TIM_PWM_Start+0xd0>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <HAL_TIM_PWM_Start+0xd2>
 8007a64:	2300      	movs	r3, #0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a22      	ldr	r2, [pc, #136]	@ (8007b08 <HAL_TIM_PWM_Start+0x174>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d022      	beq.n	8007aca <HAL_TIM_PWM_Start+0x136>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8c:	d01d      	beq.n	8007aca <HAL_TIM_PWM_Start+0x136>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1f      	ldr	r2, [pc, #124]	@ (8007b10 <HAL_TIM_PWM_Start+0x17c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d018      	beq.n	8007aca <HAL_TIM_PWM_Start+0x136>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b14 <HAL_TIM_PWM_Start+0x180>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <HAL_TIM_PWM_Start+0x136>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8007b18 <HAL_TIM_PWM_Start+0x184>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00e      	beq.n	8007aca <HAL_TIM_PWM_Start+0x136>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a16      	ldr	r2, [pc, #88]	@ (8007b0c <HAL_TIM_PWM_Start+0x178>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d009      	beq.n	8007aca <HAL_TIM_PWM_Start+0x136>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a18      	ldr	r2, [pc, #96]	@ (8007b1c <HAL_TIM_PWM_Start+0x188>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d004      	beq.n	8007aca <HAL_TIM_PWM_Start+0x136>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a16      	ldr	r2, [pc, #88]	@ (8007b20 <HAL_TIM_PWM_Start+0x18c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d111      	bne.n	8007aee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b06      	cmp	r3, #6
 8007ada:	d010      	beq.n	8007afe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aec:	e007      	b.n	8007afe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0201 	orr.w	r2, r2, #1
 8007afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40010400 	.word	0x40010400
 8007b10:	40000400 	.word	0x40000400
 8007b14:	40000800 	.word	0x40000800
 8007b18:	40000c00 	.word	0x40000c00
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40001800 	.word	0x40001800

08007b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d020      	beq.n	8007b88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01b      	beq.n	8007b88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0202 	mvn.w	r2, #2
 8007b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa65 	bl	800803e <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa57 	bl	800802a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fa68 	bl	8008052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d020      	beq.n	8007bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01b      	beq.n	8007bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0204 	mvn.w	r2, #4
 8007ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa3f 	bl	800803e <HAL_TIM_IC_CaptureCallback>
 8007bc0:	e005      	b.n	8007bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa31 	bl	800802a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa42 	bl	8008052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d020      	beq.n	8007c20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01b      	beq.n	8007c20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0208 	mvn.w	r2, #8
 8007bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa19 	bl	800803e <HAL_TIM_IC_CaptureCallback>
 8007c0c:	e005      	b.n	8007c1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa0b 	bl	800802a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fa1c 	bl	8008052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d020      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01b      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0210 	mvn.w	r2, #16
 8007c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2208      	movs	r2, #8
 8007c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f9f3 	bl	800803e <HAL_TIM_IC_CaptureCallback>
 8007c58:	e005      	b.n	8007c66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f9e5 	bl	800802a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f9f6 	bl	8008052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00c      	beq.n	8007c90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0201 	mvn.w	r2, #1
 8007c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9c3 	bl	8008016 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fdd8 	bl	8008864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f9c7 	bl	8008066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00c      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f06f 0220 	mvn.w	r2, #32
 8007cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fdaa 	bl	8008850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e0ae      	b.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b0c      	cmp	r3, #12
 8007d2e:	f200 809f 	bhi.w	8007e70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d32:	a201      	add	r2, pc, #4	@ (adr r2, 8007d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d6d 	.word	0x08007d6d
 8007d3c:	08007e71 	.word	0x08007e71
 8007d40:	08007e71 	.word	0x08007e71
 8007d44:	08007e71 	.word	0x08007e71
 8007d48:	08007dad 	.word	0x08007dad
 8007d4c:	08007e71 	.word	0x08007e71
 8007d50:	08007e71 	.word	0x08007e71
 8007d54:	08007e71 	.word	0x08007e71
 8007d58:	08007def 	.word	0x08007def
 8007d5c:	08007e71 	.word	0x08007e71
 8007d60:	08007e71 	.word	0x08007e71
 8007d64:	08007e71 	.word	0x08007e71
 8007d68:	08007e2f 	.word	0x08007e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fa2e 	bl	80081d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0208 	orr.w	r2, r2, #8
 8007d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0204 	bic.w	r2, r2, #4
 8007d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6999      	ldr	r1, [r3, #24]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	691a      	ldr	r2, [r3, #16]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	619a      	str	r2, [r3, #24]
      break;
 8007daa:	e064      	b.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68b9      	ldr	r1, [r7, #8]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fa7e 	bl	80082b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699a      	ldr	r2, [r3, #24]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6999      	ldr	r1, [r3, #24]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	021a      	lsls	r2, r3, #8
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	619a      	str	r2, [r3, #24]
      break;
 8007dec:	e043      	b.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68b9      	ldr	r1, [r7, #8]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fad3 	bl	80083a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69da      	ldr	r2, [r3, #28]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0208 	orr.w	r2, r2, #8
 8007e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69da      	ldr	r2, [r3, #28]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0204 	bic.w	r2, r2, #4
 8007e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69d9      	ldr	r1, [r3, #28]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	61da      	str	r2, [r3, #28]
      break;
 8007e2c:	e023      	b.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fb27 	bl	8008488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69da      	ldr	r2, [r3, #28]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69d9      	ldr	r1, [r3, #28]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	021a      	lsls	r2, r3, #8
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	61da      	str	r2, [r3, #28]
      break;
 8007e6e:	e002      	b.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	75fb      	strb	r3, [r7, #23]
      break;
 8007e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e0b4      	b.n	800800e <HAL_TIM_ConfigClockSource+0x186>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007edc:	d03e      	beq.n	8007f5c <HAL_TIM_ConfigClockSource+0xd4>
 8007ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ee2:	f200 8087 	bhi.w	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eea:	f000 8086 	beq.w	8007ffa <HAL_TIM_ConfigClockSource+0x172>
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef2:	d87f      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef4:	2b70      	cmp	r3, #112	@ 0x70
 8007ef6:	d01a      	beq.n	8007f2e <HAL_TIM_ConfigClockSource+0xa6>
 8007ef8:	2b70      	cmp	r3, #112	@ 0x70
 8007efa:	d87b      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8007efc:	2b60      	cmp	r3, #96	@ 0x60
 8007efe:	d050      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0x11a>
 8007f00:	2b60      	cmp	r3, #96	@ 0x60
 8007f02:	d877      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8007f04:	2b50      	cmp	r3, #80	@ 0x50
 8007f06:	d03c      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0xfa>
 8007f08:	2b50      	cmp	r3, #80	@ 0x50
 8007f0a:	d873      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8007f0c:	2b40      	cmp	r3, #64	@ 0x40
 8007f0e:	d058      	beq.n	8007fc2 <HAL_TIM_ConfigClockSource+0x13a>
 8007f10:	2b40      	cmp	r3, #64	@ 0x40
 8007f12:	d86f      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8007f14:	2b30      	cmp	r3, #48	@ 0x30
 8007f16:	d064      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8007f18:	2b30      	cmp	r3, #48	@ 0x30
 8007f1a:	d86b      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d060      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d867      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d05c      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d05a      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8007f2c:	e062      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f3e:	f000 fb73 	bl	8008628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	609a      	str	r2, [r3, #8]
      break;
 8007f5a:	e04f      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f6c:	f000 fb5c 	bl	8008628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f7e:	609a      	str	r2, [r3, #8]
      break;
 8007f80:	e03c      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f000 fad0 	bl	8008534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2150      	movs	r1, #80	@ 0x50
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fb29 	bl	80085f2 <TIM_ITRx_SetConfig>
      break;
 8007fa0:	e02c      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f000 faef 	bl	8008592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2160      	movs	r1, #96	@ 0x60
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fb19 	bl	80085f2 <TIM_ITRx_SetConfig>
      break;
 8007fc0:	e01c      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f000 fab0 	bl	8008534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2140      	movs	r1, #64	@ 0x40
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fb09 	bl	80085f2 <TIM_ITRx_SetConfig>
      break;
 8007fe0:	e00c      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4619      	mov	r1, r3
 8007fec:	4610      	mov	r0, r2
 8007fee:	f000 fb00 	bl	80085f2 <TIM_ITRx_SetConfig>
      break;
 8007ff2:	e003      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff8:	e000      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a46      	ldr	r2, [pc, #280]	@ (80081a8 <TIM_Base_SetConfig+0x12c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d013      	beq.n	80080bc <TIM_Base_SetConfig+0x40>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800809a:	d00f      	beq.n	80080bc <TIM_Base_SetConfig+0x40>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a43      	ldr	r2, [pc, #268]	@ (80081ac <TIM_Base_SetConfig+0x130>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d00b      	beq.n	80080bc <TIM_Base_SetConfig+0x40>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a42      	ldr	r2, [pc, #264]	@ (80081b0 <TIM_Base_SetConfig+0x134>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d007      	beq.n	80080bc <TIM_Base_SetConfig+0x40>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a41      	ldr	r2, [pc, #260]	@ (80081b4 <TIM_Base_SetConfig+0x138>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_Base_SetConfig+0x40>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a40      	ldr	r2, [pc, #256]	@ (80081b8 <TIM_Base_SetConfig+0x13c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d108      	bne.n	80080ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a35      	ldr	r2, [pc, #212]	@ (80081a8 <TIM_Base_SetConfig+0x12c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d02b      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080dc:	d027      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a32      	ldr	r2, [pc, #200]	@ (80081ac <TIM_Base_SetConfig+0x130>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d023      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a31      	ldr	r2, [pc, #196]	@ (80081b0 <TIM_Base_SetConfig+0x134>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d01f      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a30      	ldr	r2, [pc, #192]	@ (80081b4 <TIM_Base_SetConfig+0x138>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d01b      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a2f      	ldr	r2, [pc, #188]	@ (80081b8 <TIM_Base_SetConfig+0x13c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d017      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a2e      	ldr	r2, [pc, #184]	@ (80081bc <TIM_Base_SetConfig+0x140>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a2d      	ldr	r2, [pc, #180]	@ (80081c0 <TIM_Base_SetConfig+0x144>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00f      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a2c      	ldr	r2, [pc, #176]	@ (80081c4 <TIM_Base_SetConfig+0x148>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d00b      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a2b      	ldr	r2, [pc, #172]	@ (80081c8 <TIM_Base_SetConfig+0x14c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d007      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a2a      	ldr	r2, [pc, #168]	@ (80081cc <TIM_Base_SetConfig+0x150>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d003      	beq.n	800812e <TIM_Base_SetConfig+0xb2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a29      	ldr	r2, [pc, #164]	@ (80081d0 <TIM_Base_SetConfig+0x154>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d108      	bne.n	8008140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4313      	orrs	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a10      	ldr	r2, [pc, #64]	@ (80081a8 <TIM_Base_SetConfig+0x12c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d003      	beq.n	8008174 <TIM_Base_SetConfig+0xf8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a12      	ldr	r2, [pc, #72]	@ (80081b8 <TIM_Base_SetConfig+0x13c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d103      	bne.n	800817c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b01      	cmp	r3, #1
 800818c:	d105      	bne.n	800819a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f023 0201 	bic.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]
  }
}
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40010000 	.word	0x40010000
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40000c00 	.word	0x40000c00
 80081b8:	40010400 	.word	0x40010400
 80081bc:	40014000 	.word	0x40014000
 80081c0:	40014400 	.word	0x40014400
 80081c4:	40014800 	.word	0x40014800
 80081c8:	40001800 	.word	0x40001800
 80081cc:	40001c00 	.word	0x40001c00
 80081d0:	40002000 	.word	0x40002000

080081d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	f023 0201 	bic.w	r2, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0303 	bic.w	r3, r3, #3
 800820a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f023 0302 	bic.w	r3, r3, #2
 800821c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	4313      	orrs	r3, r2
 8008226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a20      	ldr	r2, [pc, #128]	@ (80082ac <TIM_OC1_SetConfig+0xd8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d003      	beq.n	8008238 <TIM_OC1_SetConfig+0x64>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a1f      	ldr	r2, [pc, #124]	@ (80082b0 <TIM_OC1_SetConfig+0xdc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d10c      	bne.n	8008252 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f023 0308 	bic.w	r3, r3, #8
 800823e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f023 0304 	bic.w	r3, r3, #4
 8008250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a15      	ldr	r2, [pc, #84]	@ (80082ac <TIM_OC1_SetConfig+0xd8>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d003      	beq.n	8008262 <TIM_OC1_SetConfig+0x8e>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a14      	ldr	r2, [pc, #80]	@ (80082b0 <TIM_OC1_SetConfig+0xdc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d111      	bne.n	8008286 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	621a      	str	r2, [r3, #32]
}
 80082a0:	bf00      	nop
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	40010000 	.word	0x40010000
 80082b0:	40010400 	.word	0x40010400

080082b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	f023 0210 	bic.w	r2, r3, #16
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	021b      	lsls	r3, r3, #8
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f023 0320 	bic.w	r3, r3, #32
 80082fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	011b      	lsls	r3, r3, #4
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	4313      	orrs	r3, r2
 800830a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a22      	ldr	r2, [pc, #136]	@ (8008398 <TIM_OC2_SetConfig+0xe4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d003      	beq.n	800831c <TIM_OC2_SetConfig+0x68>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a21      	ldr	r2, [pc, #132]	@ (800839c <TIM_OC2_SetConfig+0xe8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d10d      	bne.n	8008338 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	4313      	orrs	r3, r2
 800832e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008336:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a17      	ldr	r2, [pc, #92]	@ (8008398 <TIM_OC2_SetConfig+0xe4>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d003      	beq.n	8008348 <TIM_OC2_SetConfig+0x94>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a16      	ldr	r2, [pc, #88]	@ (800839c <TIM_OC2_SetConfig+0xe8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d113      	bne.n	8008370 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800834e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4313      	orrs	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	621a      	str	r2, [r3, #32]
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40010000 	.word	0x40010000
 800839c:	40010400 	.word	0x40010400

080083a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	021b      	lsls	r3, r3, #8
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a21      	ldr	r2, [pc, #132]	@ (8008480 <TIM_OC3_SetConfig+0xe0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d003      	beq.n	8008406 <TIM_OC3_SetConfig+0x66>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a20      	ldr	r2, [pc, #128]	@ (8008484 <TIM_OC3_SetConfig+0xe4>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d10d      	bne.n	8008422 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800840c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a16      	ldr	r2, [pc, #88]	@ (8008480 <TIM_OC3_SetConfig+0xe0>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_OC3_SetConfig+0x92>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a15      	ldr	r2, [pc, #84]	@ (8008484 <TIM_OC3_SetConfig+0xe4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d113      	bne.n	800845a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	621a      	str	r2, [r3, #32]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	40010000 	.word	0x40010000
 8008484:	40010400 	.word	0x40010400

08008488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	031b      	lsls	r3, r3, #12
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	4313      	orrs	r3, r2
 80084de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a12      	ldr	r2, [pc, #72]	@ (800852c <TIM_OC4_SetConfig+0xa4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d003      	beq.n	80084f0 <TIM_OC4_SetConfig+0x68>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a11      	ldr	r2, [pc, #68]	@ (8008530 <TIM_OC4_SetConfig+0xa8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d109      	bne.n	8008504 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	019b      	lsls	r3, r3, #6
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	621a      	str	r2, [r3, #32]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40010000 	.word	0x40010000
 8008530:	40010400 	.word	0x40010400

08008534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f023 0201 	bic.w	r2, r3, #1
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800855e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 030a 	bic.w	r3, r3, #10
 8008570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	621a      	str	r2, [r3, #32]
}
 8008586:	bf00      	nop
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008592:	b480      	push	{r7}
 8008594:	b087      	sub	sp, #28
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	f023 0210 	bic.w	r2, r3, #16
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	031b      	lsls	r3, r3, #12
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	621a      	str	r2, [r3, #32]
}
 80085e6:	bf00      	nop
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b085      	sub	sp, #20
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4313      	orrs	r3, r2
 8008610:	f043 0307 	orr.w	r3, r3, #7
 8008614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	609a      	str	r2, [r3, #8]
}
 800861c:	bf00      	nop
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	021a      	lsls	r2, r3, #8
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	431a      	orrs	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4313      	orrs	r3, r2
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	609a      	str	r2, [r3, #8]
}
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	2201      	movs	r2, #1
 800867c:	fa02 f303 	lsl.w	r3, r2, r3
 8008680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a1a      	ldr	r2, [r3, #32]
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	43db      	mvns	r3, r3
 800868a:	401a      	ands	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1a      	ldr	r2, [r3, #32]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	fa01 f303 	lsl.w	r3, r1, r3
 80086a0:	431a      	orrs	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	621a      	str	r2, [r3, #32]
}
 80086a6:	bf00      	nop
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
	...

080086b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d101      	bne.n	80086cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086c8:	2302      	movs	r3, #2
 80086ca:	e05a      	b.n	8008782 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a21      	ldr	r2, [pc, #132]	@ (8008790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d022      	beq.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008718:	d01d      	beq.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a1d      	ldr	r2, [pc, #116]	@ (8008794 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d018      	beq.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1b      	ldr	r2, [pc, #108]	@ (8008798 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d013      	beq.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1a      	ldr	r2, [pc, #104]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00e      	beq.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a18      	ldr	r2, [pc, #96]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d009      	beq.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a17      	ldr	r2, [pc, #92]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d004      	beq.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a15      	ldr	r2, [pc, #84]	@ (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d10c      	bne.n	8008770 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800875c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4313      	orrs	r3, r2
 8008766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40010000 	.word	0x40010000
 8008794:	40000400 	.word	0x40000400
 8008798:	40000800 	.word	0x40000800
 800879c:	40000c00 	.word	0x40000c00
 80087a0:	40010400 	.word	0x40010400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40001800 	.word	0x40001800

080087ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e03d      	b.n	8008844 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e042      	b.n	8008910 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fa f8ac 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2224      	movs	r2, #36	@ 0x24
 80088a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fdbd 	bl	800943c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	695a      	ldr	r2, [r3, #20]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	@ 0x28
 800891c:	af02      	add	r7, sp, #8
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	4613      	mov	r3, r2
 8008926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b20      	cmp	r3, #32
 8008936:	d175      	bne.n	8008a24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <HAL_UART_Transmit+0x2c>
 800893e:	88fb      	ldrh	r3, [r7, #6]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e06e      	b.n	8008a26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2221      	movs	r2, #33	@ 0x21
 8008952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008956:	f7fa fa77 	bl	8002e48 <HAL_GetTick>
 800895a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	88fa      	ldrh	r2, [r7, #6]
 8008960:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	88fa      	ldrh	r2, [r7, #6]
 8008966:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008970:	d108      	bne.n	8008984 <HAL_UART_Transmit+0x6c>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d104      	bne.n	8008984 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	e003      	b.n	800898c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800898c:	e02e      	b.n	80089ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	2180      	movs	r1, #128	@ 0x80
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fb1f 	bl	8008fdc <UART_WaitOnFlagUntilTimeout>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d005      	beq.n	80089b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e03a      	b.n	8008a26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10b      	bne.n	80089ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	3302      	adds	r3, #2
 80089ca:	61bb      	str	r3, [r7, #24]
 80089cc:	e007      	b.n	80089de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3301      	adds	r3, #1
 80089dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1cb      	bne.n	800898e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2200      	movs	r2, #0
 80089fe:	2140      	movs	r1, #64	@ 0x40
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 faeb 	bl	8008fdc <UART_WaitOnFlagUntilTimeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e006      	b.n	8008a26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e000      	b.n	8008a26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008a24:	2302      	movs	r3, #2
  }
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3720      	adds	r7, #32
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	d112      	bne.n	8008a6e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_UART_Receive_IT+0x26>
 8008a4e:	88fb      	ldrh	r3, [r7, #6]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e00b      	b.n	8008a70 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	461a      	mov	r2, r3
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fb12 	bl	800908e <UART_Start_Receive_IT>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	e000      	b.n	8008a70 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008a6e:	2302      	movs	r3, #2
  }
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b0ba      	sub	sp, #232	@ 0xe8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10f      	bne.n	8008ade <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d009      	beq.n	8008ade <HAL_UART_IRQHandler+0x66>
 8008aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fbf2 	bl	80092c0 <UART_Receive_IT>
      return;
 8008adc:	e25b      	b.n	8008f96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 80de 	beq.w	8008ca4 <HAL_UART_IRQHandler+0x22c>
 8008ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d106      	bne.n	8008b02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 80d1 	beq.w	8008ca4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <HAL_UART_IRQHandler+0xae>
 8008b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b1e:	f043 0201 	orr.w	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00b      	beq.n	8008b4a <HAL_UART_IRQHandler+0xd2>
 8008b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b42:	f043 0202 	orr.w	r2, r3, #2
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <HAL_UART_IRQHandler+0xf6>
 8008b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d005      	beq.n	8008b6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b66:	f043 0204 	orr.w	r2, r3, #4
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d011      	beq.n	8008b9e <HAL_UART_IRQHandler+0x126>
 8008b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d105      	bne.n	8008b92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d005      	beq.n	8008b9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b96:	f043 0208 	orr.w	r2, r3, #8
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 81f2 	beq.w	8008f8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bac:	f003 0320 	and.w	r3, r3, #32
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d008      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x14e>
 8008bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fb7d 	bl	80092c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd0:	2b40      	cmp	r3, #64	@ 0x40
 8008bd2:	bf0c      	ite	eq
 8008bd4:	2301      	moveq	r3, #1
 8008bd6:	2300      	movne	r3, #0
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <HAL_UART_IRQHandler+0x17a>
 8008bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d04f      	beq.n	8008c92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fa85 	bl	8009102 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c02:	2b40      	cmp	r3, #64	@ 0x40
 8008c04:	d141      	bne.n	8008c8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3314      	adds	r3, #20
 8008c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1d9      	bne.n	8008c06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d013      	beq.n	8008c82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8008e58 <HAL_UART_IRQHandler+0x3e0>)
 8008c60:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fb f884 	bl	8003d74 <HAL_DMA_Abort_IT>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d016      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c80:	e00e      	b.n	8008ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f994 	bl	8008fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c88:	e00a      	b.n	8008ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f990 	bl	8008fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c90:	e006      	b.n	8008ca0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f98c 	bl	8008fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c9e:	e175      	b.n	8008f8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca0:	bf00      	nop
    return;
 8008ca2:	e173      	b.n	8008f8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	f040 814f 	bne.w	8008f4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 8148 	beq.w	8008f4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cc0:	f003 0310 	and.w	r3, r3, #16
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8141 	beq.w	8008f4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60bb      	str	r3, [r7, #8]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60bb      	str	r3, [r7, #8]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	60bb      	str	r3, [r7, #8]
 8008cde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cea:	2b40      	cmp	r3, #64	@ 0x40
 8008cec:	f040 80b6 	bne.w	8008e5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8145 	beq.w	8008f90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	f080 813e 	bcs.w	8008f90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d26:	f000 8088 	beq.w	8008e3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	330c      	adds	r3, #12
 8008d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	330c      	adds	r3, #12
 8008d52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008d56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1d9      	bne.n	8008d2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3314      	adds	r3, #20
 8008d7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d88:	f023 0301 	bic.w	r3, r3, #1
 8008d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3314      	adds	r3, #20
 8008d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e1      	bne.n	8008d76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3314      	adds	r3, #20
 8008db8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008dd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ddc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e3      	bne.n	8008db2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	330c      	adds	r3, #12
 8008dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e02:	e853 3f00 	ldrex	r3, [r3]
 8008e06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e0a:	f023 0310 	bic.w	r3, r3, #16
 8008e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	330c      	adds	r3, #12
 8008e18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008e1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e3      	bne.n	8008df8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fa ff2d 	bl	8003c94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f8b7 	bl	8008fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e56:	e09b      	b.n	8008f90 <HAL_UART_IRQHandler+0x518>
 8008e58:	080091c9 	.word	0x080091c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 808e 	beq.w	8008f94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8089 	beq.w	8008f94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	330c      	adds	r3, #12
 8008e88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	330c      	adds	r3, #12
 8008ea2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008ea6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ea8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e3      	bne.n	8008e82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3314      	adds	r3, #20
 8008ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3314      	adds	r3, #20
 8008eda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ede:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e3      	bne.n	8008eba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	330c      	adds	r3, #12
 8008f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0310 	bic.w	r3, r3, #16
 8008f16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	330c      	adds	r3, #12
 8008f20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f24:	61fa      	str	r2, [r7, #28]
 8008f26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	69b9      	ldr	r1, [r7, #24]
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	617b      	str	r3, [r7, #20]
   return(result);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e3      	bne.n	8008f00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f83d 	bl	8008fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f4a:	e023      	b.n	8008f94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <HAL_UART_IRQHandler+0x4f4>
 8008f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f943 	bl	80091f0 <UART_Transmit_IT>
    return;
 8008f6a:	e014      	b.n	8008f96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00e      	beq.n	8008f96 <HAL_UART_IRQHandler+0x51e>
 8008f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d008      	beq.n	8008f96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f983 	bl	8009290 <UART_EndTransmit_IT>
    return;
 8008f8a:	e004      	b.n	8008f96 <HAL_UART_IRQHandler+0x51e>
    return;
 8008f8c:	bf00      	nop
 8008f8e:	e002      	b.n	8008f96 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f90:	bf00      	nop
 8008f92:	e000      	b.n	8008f96 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f94:	bf00      	nop
  }
}
 8008f96:	37e8      	adds	r7, #232	@ 0xe8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fec:	e03b      	b.n	8009066 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d037      	beq.n	8009066 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff6:	f7f9 ff27 	bl	8002e48 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	6a3a      	ldr	r2, [r7, #32]
 8009002:	429a      	cmp	r2, r3
 8009004:	d302      	bcc.n	800900c <UART_WaitOnFlagUntilTimeout+0x30>
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e03a      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	d023      	beq.n	8009066 <UART_WaitOnFlagUntilTimeout+0x8a>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b80      	cmp	r3, #128	@ 0x80
 8009022:	d020      	beq.n	8009066 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b40      	cmp	r3, #64	@ 0x40
 8009028:	d01d      	beq.n	8009066 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0308 	and.w	r3, r3, #8
 8009034:	2b08      	cmp	r3, #8
 8009036:	d116      	bne.n	8009066 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	617b      	str	r3, [r7, #20]
 800904c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 f857 	bl	8009102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2208      	movs	r2, #8
 8009058:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e00f      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	4013      	ands	r3, r2
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	429a      	cmp	r2, r3
 8009074:	bf0c      	ite	eq
 8009076:	2301      	moveq	r3, #1
 8009078:	2300      	movne	r3, #0
 800907a:	b2db      	uxtb	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	429a      	cmp	r2, r3
 8009082:	d0b4      	beq.n	8008fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800908e:	b480      	push	{r7}
 8009090:	b085      	sub	sp, #20
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	4613      	mov	r3, r2
 800909a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	88fa      	ldrh	r2, [r7, #6]
 80090a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	88fa      	ldrh	r2, [r7, #6]
 80090ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2222      	movs	r2, #34	@ 0x22
 80090b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d007      	beq.n	80090d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695a      	ldr	r2, [r3, #20]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0220 	orr.w	r2, r2, #32
 80090f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009102:	b480      	push	{r7}
 8009104:	b095      	sub	sp, #84	@ 0x54
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	330c      	adds	r3, #12
 8009110:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	330c      	adds	r3, #12
 8009128:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800912a:	643a      	str	r2, [r7, #64]	@ 0x40
 800912c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009130:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e5      	bne.n	800910a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3314      	adds	r3, #20
 8009144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	61fb      	str	r3, [r7, #28]
   return(result);
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	f023 0301 	bic.w	r3, r3, #1
 8009154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3314      	adds	r3, #20
 800915c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800915e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009160:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e5      	bne.n	800913e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	2b01      	cmp	r3, #1
 8009178:	d119      	bne.n	80091ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	330c      	adds	r3, #12
 8009180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	60bb      	str	r3, [r7, #8]
   return(result);
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f023 0310 	bic.w	r3, r3, #16
 8009190:	647b      	str	r3, [r7, #68]	@ 0x44
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	330c      	adds	r3, #12
 8009198:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800919a:	61ba      	str	r2, [r7, #24]
 800919c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6979      	ldr	r1, [r7, #20]
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	613b      	str	r3, [r7, #16]
   return(result);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e5      	bne.n	800917a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80091bc:	bf00      	nop
 80091be:	3754      	adds	r7, #84	@ 0x54
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff fee4 	bl	8008fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b21      	cmp	r3, #33	@ 0x21
 8009202:	d13e      	bne.n	8009282 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800920c:	d114      	bne.n	8009238 <UART_Transmit_IT+0x48>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d110      	bne.n	8009238 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	461a      	mov	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800922a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	1c9a      	adds	r2, r3, #2
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	621a      	str	r2, [r3, #32]
 8009236:	e008      	b.n	800924a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	1c59      	adds	r1, r3, #1
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	6211      	str	r1, [r2, #32]
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b01      	subs	r3, #1
 8009252:	b29b      	uxth	r3, r3
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	4619      	mov	r1, r3
 8009258:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10f      	bne.n	800927e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800926c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800927c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	e000      	b.n	8009284 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009282:	2302      	movs	r3, #2
  }
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7ff fe73 	bl	8008f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08c      	sub	sp, #48	@ 0x30
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b22      	cmp	r3, #34	@ 0x22
 80092d2:	f040 80ae 	bne.w	8009432 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092de:	d117      	bne.n	8009310 <UART_Receive_IT+0x50>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d113      	bne.n	8009310 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fe:	b29a      	uxth	r2, r3
 8009300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009302:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009308:	1c9a      	adds	r2, r3, #2
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	629a      	str	r2, [r3, #40]	@ 0x28
 800930e:	e026      	b.n	800935e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009314:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009316:	2300      	movs	r3, #0
 8009318:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009322:	d007      	beq.n	8009334 <UART_Receive_IT+0x74>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <UART_Receive_IT+0x82>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d106      	bne.n	8009342 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	b2da      	uxtb	r2, r3
 800933c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	e008      	b.n	8009354 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800934e:	b2da      	uxtb	r2, r3
 8009350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009352:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009362:	b29b      	uxth	r3, r3
 8009364:	3b01      	subs	r3, #1
 8009366:	b29b      	uxth	r3, r3
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	4619      	mov	r1, r3
 800936c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800936e:	2b00      	cmp	r3, #0
 8009370:	d15d      	bne.n	800942e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0220 	bic.w	r2, r2, #32
 8009380:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009390:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	695a      	ldr	r2, [r3, #20]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0201 	bic.w	r2, r2, #1
 80093a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d135      	bne.n	8009424 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	613b      	str	r3, [r7, #16]
   return(result);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f023 0310 	bic.w	r3, r3, #16
 80093d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	330c      	adds	r3, #12
 80093dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093de:	623a      	str	r2, [r7, #32]
 80093e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	69f9      	ldr	r1, [r7, #28]
 80093e4:	6a3a      	ldr	r2, [r7, #32]
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e5      	bne.n	80093be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0310 	and.w	r3, r3, #16
 80093fc:	2b10      	cmp	r3, #16
 80093fe:	d10a      	bne.n	8009416 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fdd1 	bl	8008fc4 <HAL_UARTEx_RxEventCallback>
 8009422:	e002      	b.n	800942a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7f8 fa0b 	bl	8001840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	e002      	b.n	8009434 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	e000      	b.n	8009434 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009432:	2302      	movs	r3, #2
  }
}
 8009434:	4618      	mov	r0, r3
 8009436:	3730      	adds	r7, #48	@ 0x30
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800943c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009440:	b0c0      	sub	sp, #256	@ 0x100
 8009442:	af00      	add	r7, sp, #0
 8009444:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009458:	68d9      	ldr	r1, [r3, #12]
 800945a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	ea40 0301 	orr.w	r3, r0, r1
 8009464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	431a      	orrs	r2, r3
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	431a      	orrs	r2, r3
 800947c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009494:	f021 010c 	bic.w	r1, r1, #12
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094a2:	430b      	orrs	r3, r1
 80094a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80094b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b6:	6999      	ldr	r1, [r3, #24]
 80094b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	ea40 0301 	orr.w	r3, r0, r1
 80094c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	4b8f      	ldr	r3, [pc, #572]	@ (8009708 <UART_SetConfig+0x2cc>)
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d005      	beq.n	80094dc <UART_SetConfig+0xa0>
 80094d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b8d      	ldr	r3, [pc, #564]	@ (800970c <UART_SetConfig+0x2d0>)
 80094d8:	429a      	cmp	r2, r3
 80094da:	d104      	bne.n	80094e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094dc:	f7fd fcda 	bl	8006e94 <HAL_RCC_GetPCLK2Freq>
 80094e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80094e4:	e003      	b.n	80094ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094e6:	f7fd fcc1 	bl	8006e6c <HAL_RCC_GetPCLK1Freq>
 80094ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094f8:	f040 810c 	bne.w	8009714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009500:	2200      	movs	r2, #0
 8009502:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009506:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800950a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800950e:	4622      	mov	r2, r4
 8009510:	462b      	mov	r3, r5
 8009512:	1891      	adds	r1, r2, r2
 8009514:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009516:	415b      	adcs	r3, r3
 8009518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800951a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800951e:	4621      	mov	r1, r4
 8009520:	eb12 0801 	adds.w	r8, r2, r1
 8009524:	4629      	mov	r1, r5
 8009526:	eb43 0901 	adc.w	r9, r3, r1
 800952a:	f04f 0200 	mov.w	r2, #0
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800953a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800953e:	4690      	mov	r8, r2
 8009540:	4699      	mov	r9, r3
 8009542:	4623      	mov	r3, r4
 8009544:	eb18 0303 	adds.w	r3, r8, r3
 8009548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800954c:	462b      	mov	r3, r5
 800954e:	eb49 0303 	adc.w	r3, r9, r3
 8009552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009562:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800956a:	460b      	mov	r3, r1
 800956c:	18db      	adds	r3, r3, r3
 800956e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009570:	4613      	mov	r3, r2
 8009572:	eb42 0303 	adc.w	r3, r2, r3
 8009576:	657b      	str	r3, [r7, #84]	@ 0x54
 8009578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800957c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009580:	f7f7 fb82 	bl	8000c88 <__aeabi_uldivmod>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4b61      	ldr	r3, [pc, #388]	@ (8009710 <UART_SetConfig+0x2d4>)
 800958a:	fba3 2302 	umull	r2, r3, r3, r2
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	011c      	lsls	r4, r3, #4
 8009592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009596:	2200      	movs	r2, #0
 8009598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800959c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80095a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80095a4:	4642      	mov	r2, r8
 80095a6:	464b      	mov	r3, r9
 80095a8:	1891      	adds	r1, r2, r2
 80095aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80095ac:	415b      	adcs	r3, r3
 80095ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095b4:	4641      	mov	r1, r8
 80095b6:	eb12 0a01 	adds.w	sl, r2, r1
 80095ba:	4649      	mov	r1, r9
 80095bc:	eb43 0b01 	adc.w	fp, r3, r1
 80095c0:	f04f 0200 	mov.w	r2, #0
 80095c4:	f04f 0300 	mov.w	r3, #0
 80095c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095d4:	4692      	mov	sl, r2
 80095d6:	469b      	mov	fp, r3
 80095d8:	4643      	mov	r3, r8
 80095da:	eb1a 0303 	adds.w	r3, sl, r3
 80095de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095e2:	464b      	mov	r3, r9
 80095e4:	eb4b 0303 	adc.w	r3, fp, r3
 80095e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80095fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009600:	460b      	mov	r3, r1
 8009602:	18db      	adds	r3, r3, r3
 8009604:	643b      	str	r3, [r7, #64]	@ 0x40
 8009606:	4613      	mov	r3, r2
 8009608:	eb42 0303 	adc.w	r3, r2, r3
 800960c:	647b      	str	r3, [r7, #68]	@ 0x44
 800960e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009616:	f7f7 fb37 	bl	8000c88 <__aeabi_uldivmod>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4611      	mov	r1, r2
 8009620:	4b3b      	ldr	r3, [pc, #236]	@ (8009710 <UART_SetConfig+0x2d4>)
 8009622:	fba3 2301 	umull	r2, r3, r3, r1
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	2264      	movs	r2, #100	@ 0x64
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	1acb      	subs	r3, r1, r3
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009636:	4b36      	ldr	r3, [pc, #216]	@ (8009710 <UART_SetConfig+0x2d4>)
 8009638:	fba3 2302 	umull	r2, r3, r3, r2
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009644:	441c      	add	r4, r3
 8009646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800964a:	2200      	movs	r2, #0
 800964c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009650:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009658:	4642      	mov	r2, r8
 800965a:	464b      	mov	r3, r9
 800965c:	1891      	adds	r1, r2, r2
 800965e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009660:	415b      	adcs	r3, r3
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009668:	4641      	mov	r1, r8
 800966a:	1851      	adds	r1, r2, r1
 800966c:	6339      	str	r1, [r7, #48]	@ 0x30
 800966e:	4649      	mov	r1, r9
 8009670:	414b      	adcs	r3, r1
 8009672:	637b      	str	r3, [r7, #52]	@ 0x34
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009680:	4659      	mov	r1, fp
 8009682:	00cb      	lsls	r3, r1, #3
 8009684:	4651      	mov	r1, sl
 8009686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800968a:	4651      	mov	r1, sl
 800968c:	00ca      	lsls	r2, r1, #3
 800968e:	4610      	mov	r0, r2
 8009690:	4619      	mov	r1, r3
 8009692:	4603      	mov	r3, r0
 8009694:	4642      	mov	r2, r8
 8009696:	189b      	adds	r3, r3, r2
 8009698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800969c:	464b      	mov	r3, r9
 800969e:	460a      	mov	r2, r1
 80096a0:	eb42 0303 	adc.w	r3, r2, r3
 80096a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80096b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096bc:	460b      	mov	r3, r1
 80096be:	18db      	adds	r3, r3, r3
 80096c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096c2:	4613      	mov	r3, r2
 80096c4:	eb42 0303 	adc.w	r3, r2, r3
 80096c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80096d2:	f7f7 fad9 	bl	8000c88 <__aeabi_uldivmod>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4b0d      	ldr	r3, [pc, #52]	@ (8009710 <UART_SetConfig+0x2d4>)
 80096dc:	fba3 1302 	umull	r1, r3, r3, r2
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	2164      	movs	r1, #100	@ 0x64
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	3332      	adds	r3, #50	@ 0x32
 80096ee:	4a08      	ldr	r2, [pc, #32]	@ (8009710 <UART_SetConfig+0x2d4>)
 80096f0:	fba2 2303 	umull	r2, r3, r2, r3
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	f003 0207 	and.w	r2, r3, #7
 80096fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4422      	add	r2, r4
 8009702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009704:	e106      	b.n	8009914 <UART_SetConfig+0x4d8>
 8009706:	bf00      	nop
 8009708:	40011000 	.word	0x40011000
 800970c:	40011400 	.word	0x40011400
 8009710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009718:	2200      	movs	r2, #0
 800971a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800971e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009726:	4642      	mov	r2, r8
 8009728:	464b      	mov	r3, r9
 800972a:	1891      	adds	r1, r2, r2
 800972c:	6239      	str	r1, [r7, #32]
 800972e:	415b      	adcs	r3, r3
 8009730:	627b      	str	r3, [r7, #36]	@ 0x24
 8009732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009736:	4641      	mov	r1, r8
 8009738:	1854      	adds	r4, r2, r1
 800973a:	4649      	mov	r1, r9
 800973c:	eb43 0501 	adc.w	r5, r3, r1
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	00eb      	lsls	r3, r5, #3
 800974a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800974e:	00e2      	lsls	r2, r4, #3
 8009750:	4614      	mov	r4, r2
 8009752:	461d      	mov	r5, r3
 8009754:	4643      	mov	r3, r8
 8009756:	18e3      	adds	r3, r4, r3
 8009758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800975c:	464b      	mov	r3, r9
 800975e:	eb45 0303 	adc.w	r3, r5, r3
 8009762:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009772:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	f04f 0300 	mov.w	r3, #0
 800977e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009782:	4629      	mov	r1, r5
 8009784:	008b      	lsls	r3, r1, #2
 8009786:	4621      	mov	r1, r4
 8009788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800978c:	4621      	mov	r1, r4
 800978e:	008a      	lsls	r2, r1, #2
 8009790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009794:	f7f7 fa78 	bl	8000c88 <__aeabi_uldivmod>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4b60      	ldr	r3, [pc, #384]	@ (8009920 <UART_SetConfig+0x4e4>)
 800979e:	fba3 2302 	umull	r2, r3, r3, r2
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	011c      	lsls	r4, r3, #4
 80097a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80097b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80097b8:	4642      	mov	r2, r8
 80097ba:	464b      	mov	r3, r9
 80097bc:	1891      	adds	r1, r2, r2
 80097be:	61b9      	str	r1, [r7, #24]
 80097c0:	415b      	adcs	r3, r3
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097c8:	4641      	mov	r1, r8
 80097ca:	1851      	adds	r1, r2, r1
 80097cc:	6139      	str	r1, [r7, #16]
 80097ce:	4649      	mov	r1, r9
 80097d0:	414b      	adcs	r3, r1
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	f04f 0300 	mov.w	r3, #0
 80097dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097e0:	4659      	mov	r1, fp
 80097e2:	00cb      	lsls	r3, r1, #3
 80097e4:	4651      	mov	r1, sl
 80097e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097ea:	4651      	mov	r1, sl
 80097ec:	00ca      	lsls	r2, r1, #3
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	4603      	mov	r3, r0
 80097f4:	4642      	mov	r2, r8
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097fc:	464b      	mov	r3, r9
 80097fe:	460a      	mov	r2, r1
 8009800:	eb42 0303 	adc.w	r3, r2, r3
 8009804:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009812:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009820:	4649      	mov	r1, r9
 8009822:	008b      	lsls	r3, r1, #2
 8009824:	4641      	mov	r1, r8
 8009826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800982a:	4641      	mov	r1, r8
 800982c:	008a      	lsls	r2, r1, #2
 800982e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009832:	f7f7 fa29 	bl	8000c88 <__aeabi_uldivmod>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4611      	mov	r1, r2
 800983c:	4b38      	ldr	r3, [pc, #224]	@ (8009920 <UART_SetConfig+0x4e4>)
 800983e:	fba3 2301 	umull	r2, r3, r3, r1
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	2264      	movs	r2, #100	@ 0x64
 8009846:	fb02 f303 	mul.w	r3, r2, r3
 800984a:	1acb      	subs	r3, r1, r3
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	3332      	adds	r3, #50	@ 0x32
 8009850:	4a33      	ldr	r2, [pc, #204]	@ (8009920 <UART_SetConfig+0x4e4>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800985c:	441c      	add	r4, r3
 800985e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009862:	2200      	movs	r2, #0
 8009864:	673b      	str	r3, [r7, #112]	@ 0x70
 8009866:	677a      	str	r2, [r7, #116]	@ 0x74
 8009868:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800986c:	4642      	mov	r2, r8
 800986e:	464b      	mov	r3, r9
 8009870:	1891      	adds	r1, r2, r2
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	415b      	adcs	r3, r3
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800987c:	4641      	mov	r1, r8
 800987e:	1851      	adds	r1, r2, r1
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	4649      	mov	r1, r9
 8009884:	414b      	adcs	r3, r1
 8009886:	607b      	str	r3, [r7, #4]
 8009888:	f04f 0200 	mov.w	r2, #0
 800988c:	f04f 0300 	mov.w	r3, #0
 8009890:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009894:	4659      	mov	r1, fp
 8009896:	00cb      	lsls	r3, r1, #3
 8009898:	4651      	mov	r1, sl
 800989a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800989e:	4651      	mov	r1, sl
 80098a0:	00ca      	lsls	r2, r1, #3
 80098a2:	4610      	mov	r0, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	4603      	mov	r3, r0
 80098a8:	4642      	mov	r2, r8
 80098aa:	189b      	adds	r3, r3, r2
 80098ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098ae:	464b      	mov	r3, r9
 80098b0:	460a      	mov	r2, r1
 80098b2:	eb42 0303 	adc.w	r3, r2, r3
 80098b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80098c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80098d0:	4649      	mov	r1, r9
 80098d2:	008b      	lsls	r3, r1, #2
 80098d4:	4641      	mov	r1, r8
 80098d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098da:	4641      	mov	r1, r8
 80098dc:	008a      	lsls	r2, r1, #2
 80098de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80098e2:	f7f7 f9d1 	bl	8000c88 <__aeabi_uldivmod>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009920 <UART_SetConfig+0x4e4>)
 80098ec:	fba3 1302 	umull	r1, r3, r3, r2
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	2164      	movs	r1, #100	@ 0x64
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	3332      	adds	r3, #50	@ 0x32
 80098fe:	4a08      	ldr	r2, [pc, #32]	@ (8009920 <UART_SetConfig+0x4e4>)
 8009900:	fba2 2303 	umull	r2, r3, r2, r3
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	f003 020f 	and.w	r2, r3, #15
 800990a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4422      	add	r2, r4
 8009912:	609a      	str	r2, [r3, #8]
}
 8009914:	bf00      	nop
 8009916:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800991a:	46bd      	mov	sp, r7
 800991c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009920:	51eb851f 	.word	0x51eb851f

08009924 <arm_rfft_fast_init_f32>:
 8009924:	084b      	lsrs	r3, r1, #1
 8009926:	2b80      	cmp	r3, #128	@ 0x80
 8009928:	b410      	push	{r4}
 800992a:	8201      	strh	r1, [r0, #16]
 800992c:	8003      	strh	r3, [r0, #0]
 800992e:	d047      	beq.n	80099c0 <arm_rfft_fast_init_f32+0x9c>
 8009930:	d917      	bls.n	8009962 <arm_rfft_fast_init_f32+0x3e>
 8009932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009936:	d03d      	beq.n	80099b4 <arm_rfft_fast_init_f32+0x90>
 8009938:	d929      	bls.n	800998e <arm_rfft_fast_init_f32+0x6a>
 800993a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800993e:	d020      	beq.n	8009982 <arm_rfft_fast_init_f32+0x5e>
 8009940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009944:	d113      	bne.n	800996e <arm_rfft_fast_init_f32+0x4a>
 8009946:	4921      	ldr	r1, [pc, #132]	@ (80099cc <arm_rfft_fast_init_f32+0xa8>)
 8009948:	4a21      	ldr	r2, [pc, #132]	@ (80099d0 <arm_rfft_fast_init_f32+0xac>)
 800994a:	4b22      	ldr	r3, [pc, #136]	@ (80099d4 <arm_rfft_fast_init_f32+0xb0>)
 800994c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8009950:	8184      	strh	r4, [r0, #12]
 8009952:	6081      	str	r1, [r0, #8]
 8009954:	6042      	str	r2, [r0, #4]
 8009956:	6143      	str	r3, [r0, #20]
 8009958:	2000      	movs	r0, #0
 800995a:	b240      	sxtb	r0, r0
 800995c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	2b20      	cmp	r3, #32
 8009964:	d01c      	beq.n	80099a0 <arm_rfft_fast_init_f32+0x7c>
 8009966:	2b40      	cmp	r3, #64	@ 0x40
 8009968:	d006      	beq.n	8009978 <arm_rfft_fast_init_f32+0x54>
 800996a:	2b10      	cmp	r3, #16
 800996c:	d01d      	beq.n	80099aa <arm_rfft_fast_init_f32+0x86>
 800996e:	20ff      	movs	r0, #255	@ 0xff
 8009970:	b240      	sxtb	r0, r0
 8009972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	2438      	movs	r4, #56	@ 0x38
 800997a:	4917      	ldr	r1, [pc, #92]	@ (80099d8 <arm_rfft_fast_init_f32+0xb4>)
 800997c:	4a17      	ldr	r2, [pc, #92]	@ (80099dc <arm_rfft_fast_init_f32+0xb8>)
 800997e:	4b18      	ldr	r3, [pc, #96]	@ (80099e0 <arm_rfft_fast_init_f32+0xbc>)
 8009980:	e7e6      	b.n	8009950 <arm_rfft_fast_init_f32+0x2c>
 8009982:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8009986:	4917      	ldr	r1, [pc, #92]	@ (80099e4 <arm_rfft_fast_init_f32+0xc0>)
 8009988:	4a17      	ldr	r2, [pc, #92]	@ (80099e8 <arm_rfft_fast_init_f32+0xc4>)
 800998a:	4b18      	ldr	r3, [pc, #96]	@ (80099ec <arm_rfft_fast_init_f32+0xc8>)
 800998c:	e7e0      	b.n	8009950 <arm_rfft_fast_init_f32+0x2c>
 800998e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009992:	d1ec      	bne.n	800996e <arm_rfft_fast_init_f32+0x4a>
 8009994:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8009998:	4915      	ldr	r1, [pc, #84]	@ (80099f0 <arm_rfft_fast_init_f32+0xcc>)
 800999a:	4a16      	ldr	r2, [pc, #88]	@ (80099f4 <arm_rfft_fast_init_f32+0xd0>)
 800999c:	4b16      	ldr	r3, [pc, #88]	@ (80099f8 <arm_rfft_fast_init_f32+0xd4>)
 800999e:	e7d7      	b.n	8009950 <arm_rfft_fast_init_f32+0x2c>
 80099a0:	2430      	movs	r4, #48	@ 0x30
 80099a2:	4916      	ldr	r1, [pc, #88]	@ (80099fc <arm_rfft_fast_init_f32+0xd8>)
 80099a4:	4a16      	ldr	r2, [pc, #88]	@ (8009a00 <arm_rfft_fast_init_f32+0xdc>)
 80099a6:	4b17      	ldr	r3, [pc, #92]	@ (8009a04 <arm_rfft_fast_init_f32+0xe0>)
 80099a8:	e7d2      	b.n	8009950 <arm_rfft_fast_init_f32+0x2c>
 80099aa:	2414      	movs	r4, #20
 80099ac:	4916      	ldr	r1, [pc, #88]	@ (8009a08 <arm_rfft_fast_init_f32+0xe4>)
 80099ae:	4a17      	ldr	r2, [pc, #92]	@ (8009a0c <arm_rfft_fast_init_f32+0xe8>)
 80099b0:	4b17      	ldr	r3, [pc, #92]	@ (8009a10 <arm_rfft_fast_init_f32+0xec>)
 80099b2:	e7cd      	b.n	8009950 <arm_rfft_fast_init_f32+0x2c>
 80099b4:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80099b8:	4916      	ldr	r1, [pc, #88]	@ (8009a14 <arm_rfft_fast_init_f32+0xf0>)
 80099ba:	4a17      	ldr	r2, [pc, #92]	@ (8009a18 <arm_rfft_fast_init_f32+0xf4>)
 80099bc:	4b17      	ldr	r3, [pc, #92]	@ (8009a1c <arm_rfft_fast_init_f32+0xf8>)
 80099be:	e7c7      	b.n	8009950 <arm_rfft_fast_init_f32+0x2c>
 80099c0:	24d0      	movs	r4, #208	@ 0xd0
 80099c2:	4917      	ldr	r1, [pc, #92]	@ (8009a20 <arm_rfft_fast_init_f32+0xfc>)
 80099c4:	4a17      	ldr	r2, [pc, #92]	@ (8009a24 <arm_rfft_fast_init_f32+0x100>)
 80099c6:	4b18      	ldr	r3, [pc, #96]	@ (8009a28 <arm_rfft_fast_init_f32+0x104>)
 80099c8:	e7c2      	b.n	8009950 <arm_rfft_fast_init_f32+0x2c>
 80099ca:	bf00      	nop
 80099cc:	0801bf6c 	.word	0x0801bf6c
 80099d0:	0800d164 	.word	0x0800d164
 80099d4:	080132d4 	.word	0x080132d4
 80099d8:	08011264 	.word	0x08011264
 80099dc:	0801dd2c 	.word	0x0801dd2c
 80099e0:	0802021c 	.word	0x0802021c
 80099e4:	08019c54 	.word	0x08019c54
 80099e8:	08017b54 	.word	0x08017b54
 80099ec:	080112d4 	.word	0x080112d4
 80099f0:	0801feac 	.word	0x0801feac
 80099f4:	080172d4 	.word	0x080172d4
 80099f8:	0801df2c 	.word	0x0801df2c
 80099fc:	0801ab0c 	.word	0x0801ab0c
 8009a00:	08019b54 	.word	0x08019b54
 8009a04:	08011164 	.word	0x08011164
 8009a08:	0801aa64 	.word	0x0801aa64
 8009a0c:	08017ad4 	.word	0x08017ad4
 8009a10:	0801aa8c 	.word	0x0801aa8c
 8009a14:	0801e72c 	.word	0x0801e72c
 8009a18:	0801af6c 	.word	0x0801af6c
 8009a1c:	0801eaac 	.word	0x0801eaac
 8009a20:	0802041c 	.word	0x0802041c
 8009a24:	0801ab6c 	.word	0x0801ab6c
 8009a28:	0801faac 	.word	0x0801faac

08009a2c <__cvt>:
 8009a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a30:	ec57 6b10 	vmov	r6, r7, d0
 8009a34:	2f00      	cmp	r7, #0
 8009a36:	460c      	mov	r4, r1
 8009a38:	4619      	mov	r1, r3
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	bfbb      	ittet	lt
 8009a3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a42:	461f      	movlt	r7, r3
 8009a44:	2300      	movge	r3, #0
 8009a46:	232d      	movlt	r3, #45	@ 0x2d
 8009a48:	700b      	strb	r3, [r1, #0]
 8009a4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a50:	4691      	mov	r9, r2
 8009a52:	f023 0820 	bic.w	r8, r3, #32
 8009a56:	bfbc      	itt	lt
 8009a58:	4632      	movlt	r2, r6
 8009a5a:	4616      	movlt	r6, r2
 8009a5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a60:	d005      	beq.n	8009a6e <__cvt+0x42>
 8009a62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a66:	d100      	bne.n	8009a6a <__cvt+0x3e>
 8009a68:	3401      	adds	r4, #1
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	e000      	b.n	8009a70 <__cvt+0x44>
 8009a6e:	2103      	movs	r1, #3
 8009a70:	ab03      	add	r3, sp, #12
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	ab02      	add	r3, sp, #8
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	ec47 6b10 	vmov	d0, r6, r7
 8009a7c:	4653      	mov	r3, sl
 8009a7e:	4622      	mov	r2, r4
 8009a80:	f000 fe6a 	bl	800a758 <_dtoa_r>
 8009a84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a88:	4605      	mov	r5, r0
 8009a8a:	d119      	bne.n	8009ac0 <__cvt+0x94>
 8009a8c:	f019 0f01 	tst.w	r9, #1
 8009a90:	d00e      	beq.n	8009ab0 <__cvt+0x84>
 8009a92:	eb00 0904 	add.w	r9, r0, r4
 8009a96:	2200      	movs	r2, #0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	f7f7 f833 	bl	8000b08 <__aeabi_dcmpeq>
 8009aa2:	b108      	cbz	r0, 8009aa8 <__cvt+0x7c>
 8009aa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009aa8:	2230      	movs	r2, #48	@ 0x30
 8009aaa:	9b03      	ldr	r3, [sp, #12]
 8009aac:	454b      	cmp	r3, r9
 8009aae:	d31e      	bcc.n	8009aee <__cvt+0xc2>
 8009ab0:	9b03      	ldr	r3, [sp, #12]
 8009ab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ab4:	1b5b      	subs	r3, r3, r5
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	b004      	add	sp, #16
 8009abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ac4:	eb00 0904 	add.w	r9, r0, r4
 8009ac8:	d1e5      	bne.n	8009a96 <__cvt+0x6a>
 8009aca:	7803      	ldrb	r3, [r0, #0]
 8009acc:	2b30      	cmp	r3, #48	@ 0x30
 8009ace:	d10a      	bne.n	8009ae6 <__cvt+0xba>
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	f7f7 f816 	bl	8000b08 <__aeabi_dcmpeq>
 8009adc:	b918      	cbnz	r0, 8009ae6 <__cvt+0xba>
 8009ade:	f1c4 0401 	rsb	r4, r4, #1
 8009ae2:	f8ca 4000 	str.w	r4, [sl]
 8009ae6:	f8da 3000 	ldr.w	r3, [sl]
 8009aea:	4499      	add	r9, r3
 8009aec:	e7d3      	b.n	8009a96 <__cvt+0x6a>
 8009aee:	1c59      	adds	r1, r3, #1
 8009af0:	9103      	str	r1, [sp, #12]
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	e7d9      	b.n	8009aaa <__cvt+0x7e>

08009af6 <__exponent>:
 8009af6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009af8:	2900      	cmp	r1, #0
 8009afa:	bfba      	itte	lt
 8009afc:	4249      	neglt	r1, r1
 8009afe:	232d      	movlt	r3, #45	@ 0x2d
 8009b00:	232b      	movge	r3, #43	@ 0x2b
 8009b02:	2909      	cmp	r1, #9
 8009b04:	7002      	strb	r2, [r0, #0]
 8009b06:	7043      	strb	r3, [r0, #1]
 8009b08:	dd29      	ble.n	8009b5e <__exponent+0x68>
 8009b0a:	f10d 0307 	add.w	r3, sp, #7
 8009b0e:	461d      	mov	r5, r3
 8009b10:	270a      	movs	r7, #10
 8009b12:	461a      	mov	r2, r3
 8009b14:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b18:	fb07 1416 	mls	r4, r7, r6, r1
 8009b1c:	3430      	adds	r4, #48	@ 0x30
 8009b1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b22:	460c      	mov	r4, r1
 8009b24:	2c63      	cmp	r4, #99	@ 0x63
 8009b26:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	dcf1      	bgt.n	8009b12 <__exponent+0x1c>
 8009b2e:	3130      	adds	r1, #48	@ 0x30
 8009b30:	1e94      	subs	r4, r2, #2
 8009b32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b36:	1c41      	adds	r1, r0, #1
 8009b38:	4623      	mov	r3, r4
 8009b3a:	42ab      	cmp	r3, r5
 8009b3c:	d30a      	bcc.n	8009b54 <__exponent+0x5e>
 8009b3e:	f10d 0309 	add.w	r3, sp, #9
 8009b42:	1a9b      	subs	r3, r3, r2
 8009b44:	42ac      	cmp	r4, r5
 8009b46:	bf88      	it	hi
 8009b48:	2300      	movhi	r3, #0
 8009b4a:	3302      	adds	r3, #2
 8009b4c:	4403      	add	r3, r0
 8009b4e:	1a18      	subs	r0, r3, r0
 8009b50:	b003      	add	sp, #12
 8009b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b5c:	e7ed      	b.n	8009b3a <__exponent+0x44>
 8009b5e:	2330      	movs	r3, #48	@ 0x30
 8009b60:	3130      	adds	r1, #48	@ 0x30
 8009b62:	7083      	strb	r3, [r0, #2]
 8009b64:	70c1      	strb	r1, [r0, #3]
 8009b66:	1d03      	adds	r3, r0, #4
 8009b68:	e7f1      	b.n	8009b4e <__exponent+0x58>
	...

08009b6c <_printf_float>:
 8009b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	b08d      	sub	sp, #52	@ 0x34
 8009b72:	460c      	mov	r4, r1
 8009b74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b78:	4616      	mov	r6, r2
 8009b7a:	461f      	mov	r7, r3
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	f000 fceb 	bl	800a558 <_localeconv_r>
 8009b82:	6803      	ldr	r3, [r0, #0]
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7f6 fb92 	bl	80002b0 <strlen>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b90:	f8d8 3000 	ldr.w	r3, [r8]
 8009b94:	9005      	str	r0, [sp, #20]
 8009b96:	3307      	adds	r3, #7
 8009b98:	f023 0307 	bic.w	r3, r3, #7
 8009b9c:	f103 0208 	add.w	r2, r3, #8
 8009ba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8009ba8:	f8c8 2000 	str.w	r2, [r8]
 8009bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009bb4:	9307      	str	r3, [sp, #28]
 8009bb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8009e34 <_printf_float+0x2c8>)
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc8:	f7f6 ffd0 	bl	8000b6c <__aeabi_dcmpun>
 8009bcc:	bb70      	cbnz	r0, 8009c2c <_printf_float+0xc0>
 8009bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bd2:	4b98      	ldr	r3, [pc, #608]	@ (8009e34 <_printf_float+0x2c8>)
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd8:	f7f6 ffaa 	bl	8000b30 <__aeabi_dcmple>
 8009bdc:	bb30      	cbnz	r0, 8009c2c <_printf_float+0xc0>
 8009bde:	2200      	movs	r2, #0
 8009be0:	2300      	movs	r3, #0
 8009be2:	4640      	mov	r0, r8
 8009be4:	4649      	mov	r1, r9
 8009be6:	f7f6 ff99 	bl	8000b1c <__aeabi_dcmplt>
 8009bea:	b110      	cbz	r0, 8009bf2 <_printf_float+0x86>
 8009bec:	232d      	movs	r3, #45	@ 0x2d
 8009bee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bf2:	4a91      	ldr	r2, [pc, #580]	@ (8009e38 <_printf_float+0x2cc>)
 8009bf4:	4b91      	ldr	r3, [pc, #580]	@ (8009e3c <_printf_float+0x2d0>)
 8009bf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009bfa:	bf94      	ite	ls
 8009bfc:	4690      	movls	r8, r2
 8009bfe:	4698      	movhi	r8, r3
 8009c00:	2303      	movs	r3, #3
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	f02b 0304 	bic.w	r3, fp, #4
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	f04f 0900 	mov.w	r9, #0
 8009c0e:	9700      	str	r7, [sp, #0]
 8009c10:	4633      	mov	r3, r6
 8009c12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009c14:	4621      	mov	r1, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 f9d2 	bl	8009fc0 <_printf_common>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	f040 808d 	bne.w	8009d3c <_printf_float+0x1d0>
 8009c22:	f04f 30ff 	mov.w	r0, #4294967295
 8009c26:	b00d      	add	sp, #52	@ 0x34
 8009c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2c:	4642      	mov	r2, r8
 8009c2e:	464b      	mov	r3, r9
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff9a 	bl	8000b6c <__aeabi_dcmpun>
 8009c38:	b140      	cbz	r0, 8009c4c <_printf_float+0xe0>
 8009c3a:	464b      	mov	r3, r9
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	bfbc      	itt	lt
 8009c40:	232d      	movlt	r3, #45	@ 0x2d
 8009c42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c46:	4a7e      	ldr	r2, [pc, #504]	@ (8009e40 <_printf_float+0x2d4>)
 8009c48:	4b7e      	ldr	r3, [pc, #504]	@ (8009e44 <_printf_float+0x2d8>)
 8009c4a:	e7d4      	b.n	8009bf6 <_printf_float+0x8a>
 8009c4c:	6863      	ldr	r3, [r4, #4]
 8009c4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c52:	9206      	str	r2, [sp, #24]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	d13b      	bne.n	8009cd0 <_printf_float+0x164>
 8009c58:	2306      	movs	r3, #6
 8009c5a:	6063      	str	r3, [r4, #4]
 8009c5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c60:	2300      	movs	r3, #0
 8009c62:	6022      	str	r2, [r4, #0]
 8009c64:	9303      	str	r3, [sp, #12]
 8009c66:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c6c:	ab09      	add	r3, sp, #36	@ 0x24
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	6861      	ldr	r1, [r4, #4]
 8009c72:	ec49 8b10 	vmov	d0, r8, r9
 8009c76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f7ff fed6 	bl	8009a2c <__cvt>
 8009c80:	9b06      	ldr	r3, [sp, #24]
 8009c82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c84:	2b47      	cmp	r3, #71	@ 0x47
 8009c86:	4680      	mov	r8, r0
 8009c88:	d129      	bne.n	8009cde <_printf_float+0x172>
 8009c8a:	1cc8      	adds	r0, r1, #3
 8009c8c:	db02      	blt.n	8009c94 <_printf_float+0x128>
 8009c8e:	6863      	ldr	r3, [r4, #4]
 8009c90:	4299      	cmp	r1, r3
 8009c92:	dd41      	ble.n	8009d18 <_printf_float+0x1ac>
 8009c94:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c98:	fa5f fa8a 	uxtb.w	sl, sl
 8009c9c:	3901      	subs	r1, #1
 8009c9e:	4652      	mov	r2, sl
 8009ca0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ca4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ca6:	f7ff ff26 	bl	8009af6 <__exponent>
 8009caa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cac:	1813      	adds	r3, r2, r0
 8009cae:	2a01      	cmp	r2, #1
 8009cb0:	4681      	mov	r9, r0
 8009cb2:	6123      	str	r3, [r4, #16]
 8009cb4:	dc02      	bgt.n	8009cbc <_printf_float+0x150>
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	07d2      	lsls	r2, r2, #31
 8009cba:	d501      	bpl.n	8009cc0 <_printf_float+0x154>
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	6123      	str	r3, [r4, #16]
 8009cc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d0a2      	beq.n	8009c0e <_printf_float+0xa2>
 8009cc8:	232d      	movs	r3, #45	@ 0x2d
 8009cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cce:	e79e      	b.n	8009c0e <_printf_float+0xa2>
 8009cd0:	9a06      	ldr	r2, [sp, #24]
 8009cd2:	2a47      	cmp	r2, #71	@ 0x47
 8009cd4:	d1c2      	bne.n	8009c5c <_printf_float+0xf0>
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1c0      	bne.n	8009c5c <_printf_float+0xf0>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e7bd      	b.n	8009c5a <_printf_float+0xee>
 8009cde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ce2:	d9db      	bls.n	8009c9c <_printf_float+0x130>
 8009ce4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ce8:	d118      	bne.n	8009d1c <_printf_float+0x1b0>
 8009cea:	2900      	cmp	r1, #0
 8009cec:	6863      	ldr	r3, [r4, #4]
 8009cee:	dd0b      	ble.n	8009d08 <_printf_float+0x19c>
 8009cf0:	6121      	str	r1, [r4, #16]
 8009cf2:	b913      	cbnz	r3, 8009cfa <_printf_float+0x18e>
 8009cf4:	6822      	ldr	r2, [r4, #0]
 8009cf6:	07d0      	lsls	r0, r2, #31
 8009cf8:	d502      	bpl.n	8009d00 <_printf_float+0x194>
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	440b      	add	r3, r1
 8009cfe:	6123      	str	r3, [r4, #16]
 8009d00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d02:	f04f 0900 	mov.w	r9, #0
 8009d06:	e7db      	b.n	8009cc0 <_printf_float+0x154>
 8009d08:	b913      	cbnz	r3, 8009d10 <_printf_float+0x1a4>
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	07d2      	lsls	r2, r2, #31
 8009d0e:	d501      	bpl.n	8009d14 <_printf_float+0x1a8>
 8009d10:	3302      	adds	r3, #2
 8009d12:	e7f4      	b.n	8009cfe <_printf_float+0x192>
 8009d14:	2301      	movs	r3, #1
 8009d16:	e7f2      	b.n	8009cfe <_printf_float+0x192>
 8009d18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d1e:	4299      	cmp	r1, r3
 8009d20:	db05      	blt.n	8009d2e <_printf_float+0x1c2>
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	6121      	str	r1, [r4, #16]
 8009d26:	07d8      	lsls	r0, r3, #31
 8009d28:	d5ea      	bpl.n	8009d00 <_printf_float+0x194>
 8009d2a:	1c4b      	adds	r3, r1, #1
 8009d2c:	e7e7      	b.n	8009cfe <_printf_float+0x192>
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	bfd4      	ite	le
 8009d32:	f1c1 0202 	rsble	r2, r1, #2
 8009d36:	2201      	movgt	r2, #1
 8009d38:	4413      	add	r3, r2
 8009d3a:	e7e0      	b.n	8009cfe <_printf_float+0x192>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	055a      	lsls	r2, r3, #21
 8009d40:	d407      	bmi.n	8009d52 <_printf_float+0x1e6>
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	4642      	mov	r2, r8
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b8      	blx	r7
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d12b      	bne.n	8009da8 <_printf_float+0x23c>
 8009d50:	e767      	b.n	8009c22 <_printf_float+0xb6>
 8009d52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d56:	f240 80dd 	bls.w	8009f14 <_printf_float+0x3a8>
 8009d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2300      	movs	r3, #0
 8009d62:	f7f6 fed1 	bl	8000b08 <__aeabi_dcmpeq>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d033      	beq.n	8009dd2 <_printf_float+0x266>
 8009d6a:	4a37      	ldr	r2, [pc, #220]	@ (8009e48 <_printf_float+0x2dc>)
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	f43f af54 	beq.w	8009c22 <_printf_float+0xb6>
 8009d7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d7e:	4543      	cmp	r3, r8
 8009d80:	db02      	blt.n	8009d88 <_printf_float+0x21c>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	07d8      	lsls	r0, r3, #31
 8009d86:	d50f      	bpl.n	8009da8 <_printf_float+0x23c>
 8009d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d8c:	4631      	mov	r1, r6
 8009d8e:	4628      	mov	r0, r5
 8009d90:	47b8      	blx	r7
 8009d92:	3001      	adds	r0, #1
 8009d94:	f43f af45 	beq.w	8009c22 <_printf_float+0xb6>
 8009d98:	f04f 0900 	mov.w	r9, #0
 8009d9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009da0:	f104 0a1a 	add.w	sl, r4, #26
 8009da4:	45c8      	cmp	r8, r9
 8009da6:	dc09      	bgt.n	8009dbc <_printf_float+0x250>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	079b      	lsls	r3, r3, #30
 8009dac:	f100 8103 	bmi.w	8009fb6 <_printf_float+0x44a>
 8009db0:	68e0      	ldr	r0, [r4, #12]
 8009db2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009db4:	4298      	cmp	r0, r3
 8009db6:	bfb8      	it	lt
 8009db8:	4618      	movlt	r0, r3
 8009dba:	e734      	b.n	8009c26 <_printf_float+0xba>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4652      	mov	r2, sl
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	47b8      	blx	r7
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f43f af2b 	beq.w	8009c22 <_printf_float+0xb6>
 8009dcc:	f109 0901 	add.w	r9, r9, #1
 8009dd0:	e7e8      	b.n	8009da4 <_printf_float+0x238>
 8009dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dc39      	bgt.n	8009e4c <_printf_float+0x2e0>
 8009dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8009e48 <_printf_float+0x2dc>)
 8009dda:	2301      	movs	r3, #1
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	f43f af1d 	beq.w	8009c22 <_printf_float+0xb6>
 8009de8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009dec:	ea59 0303 	orrs.w	r3, r9, r3
 8009df0:	d102      	bne.n	8009df8 <_printf_float+0x28c>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	07d9      	lsls	r1, r3, #31
 8009df6:	d5d7      	bpl.n	8009da8 <_printf_float+0x23c>
 8009df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4628      	mov	r0, r5
 8009e00:	47b8      	blx	r7
 8009e02:	3001      	adds	r0, #1
 8009e04:	f43f af0d 	beq.w	8009c22 <_printf_float+0xb6>
 8009e08:	f04f 0a00 	mov.w	sl, #0
 8009e0c:	f104 0b1a 	add.w	fp, r4, #26
 8009e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e12:	425b      	negs	r3, r3
 8009e14:	4553      	cmp	r3, sl
 8009e16:	dc01      	bgt.n	8009e1c <_printf_float+0x2b0>
 8009e18:	464b      	mov	r3, r9
 8009e1a:	e793      	b.n	8009d44 <_printf_float+0x1d8>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	465a      	mov	r2, fp
 8009e20:	4631      	mov	r1, r6
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b8      	blx	r7
 8009e26:	3001      	adds	r0, #1
 8009e28:	f43f aefb 	beq.w	8009c22 <_printf_float+0xb6>
 8009e2c:	f10a 0a01 	add.w	sl, sl, #1
 8009e30:	e7ee      	b.n	8009e10 <_printf_float+0x2a4>
 8009e32:	bf00      	nop
 8009e34:	7fefffff 	.word	0x7fefffff
 8009e38:	080205bc 	.word	0x080205bc
 8009e3c:	080205c0 	.word	0x080205c0
 8009e40:	080205c4 	.word	0x080205c4
 8009e44:	080205c8 	.word	0x080205c8
 8009e48:	080205cc 	.word	0x080205cc
 8009e4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e52:	4553      	cmp	r3, sl
 8009e54:	bfa8      	it	ge
 8009e56:	4653      	movge	r3, sl
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	4699      	mov	r9, r3
 8009e5c:	dc36      	bgt.n	8009ecc <_printf_float+0x360>
 8009e5e:	f04f 0b00 	mov.w	fp, #0
 8009e62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e66:	f104 021a 	add.w	r2, r4, #26
 8009e6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e6c:	9306      	str	r3, [sp, #24]
 8009e6e:	eba3 0309 	sub.w	r3, r3, r9
 8009e72:	455b      	cmp	r3, fp
 8009e74:	dc31      	bgt.n	8009eda <_printf_float+0x36e>
 8009e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e78:	459a      	cmp	sl, r3
 8009e7a:	dc3a      	bgt.n	8009ef2 <_printf_float+0x386>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	07da      	lsls	r2, r3, #31
 8009e80:	d437      	bmi.n	8009ef2 <_printf_float+0x386>
 8009e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e84:	ebaa 0903 	sub.w	r9, sl, r3
 8009e88:	9b06      	ldr	r3, [sp, #24]
 8009e8a:	ebaa 0303 	sub.w	r3, sl, r3
 8009e8e:	4599      	cmp	r9, r3
 8009e90:	bfa8      	it	ge
 8009e92:	4699      	movge	r9, r3
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	dc33      	bgt.n	8009f02 <_printf_float+0x396>
 8009e9a:	f04f 0800 	mov.w	r8, #0
 8009e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ea2:	f104 0b1a 	add.w	fp, r4, #26
 8009ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea8:	ebaa 0303 	sub.w	r3, sl, r3
 8009eac:	eba3 0309 	sub.w	r3, r3, r9
 8009eb0:	4543      	cmp	r3, r8
 8009eb2:	f77f af79 	ble.w	8009da8 <_printf_float+0x23c>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	465a      	mov	r2, fp
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b8      	blx	r7
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	f43f aeae 	beq.w	8009c22 <_printf_float+0xb6>
 8009ec6:	f108 0801 	add.w	r8, r8, #1
 8009eca:	e7ec      	b.n	8009ea6 <_printf_float+0x33a>
 8009ecc:	4642      	mov	r2, r8
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	47b8      	blx	r7
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d1c2      	bne.n	8009e5e <_printf_float+0x2f2>
 8009ed8:	e6a3      	b.n	8009c22 <_printf_float+0xb6>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	9206      	str	r2, [sp, #24]
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	f43f ae9c 	beq.w	8009c22 <_printf_float+0xb6>
 8009eea:	9a06      	ldr	r2, [sp, #24]
 8009eec:	f10b 0b01 	add.w	fp, fp, #1
 8009ef0:	e7bb      	b.n	8009e6a <_printf_float+0x2fe>
 8009ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4628      	mov	r0, r5
 8009efa:	47b8      	blx	r7
 8009efc:	3001      	adds	r0, #1
 8009efe:	d1c0      	bne.n	8009e82 <_printf_float+0x316>
 8009f00:	e68f      	b.n	8009c22 <_printf_float+0xb6>
 8009f02:	9a06      	ldr	r2, [sp, #24]
 8009f04:	464b      	mov	r3, r9
 8009f06:	4442      	add	r2, r8
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b8      	blx	r7
 8009f0e:	3001      	adds	r0, #1
 8009f10:	d1c3      	bne.n	8009e9a <_printf_float+0x32e>
 8009f12:	e686      	b.n	8009c22 <_printf_float+0xb6>
 8009f14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f18:	f1ba 0f01 	cmp.w	sl, #1
 8009f1c:	dc01      	bgt.n	8009f22 <_printf_float+0x3b6>
 8009f1e:	07db      	lsls	r3, r3, #31
 8009f20:	d536      	bpl.n	8009f90 <_printf_float+0x424>
 8009f22:	2301      	movs	r3, #1
 8009f24:	4642      	mov	r2, r8
 8009f26:	4631      	mov	r1, r6
 8009f28:	4628      	mov	r0, r5
 8009f2a:	47b8      	blx	r7
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	f43f ae78 	beq.w	8009c22 <_printf_float+0xb6>
 8009f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f43f ae70 	beq.w	8009c22 <_printf_float+0xb6>
 8009f42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f46:	2200      	movs	r2, #0
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f4e:	f7f6 fddb 	bl	8000b08 <__aeabi_dcmpeq>
 8009f52:	b9c0      	cbnz	r0, 8009f86 <_printf_float+0x41a>
 8009f54:	4653      	mov	r3, sl
 8009f56:	f108 0201 	add.w	r2, r8, #1
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	47b8      	blx	r7
 8009f60:	3001      	adds	r0, #1
 8009f62:	d10c      	bne.n	8009f7e <_printf_float+0x412>
 8009f64:	e65d      	b.n	8009c22 <_printf_float+0xb6>
 8009f66:	2301      	movs	r3, #1
 8009f68:	465a      	mov	r2, fp
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b8      	blx	r7
 8009f70:	3001      	adds	r0, #1
 8009f72:	f43f ae56 	beq.w	8009c22 <_printf_float+0xb6>
 8009f76:	f108 0801 	add.w	r8, r8, #1
 8009f7a:	45d0      	cmp	r8, sl
 8009f7c:	dbf3      	blt.n	8009f66 <_printf_float+0x3fa>
 8009f7e:	464b      	mov	r3, r9
 8009f80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f84:	e6df      	b.n	8009d46 <_printf_float+0x1da>
 8009f86:	f04f 0800 	mov.w	r8, #0
 8009f8a:	f104 0b1a 	add.w	fp, r4, #26
 8009f8e:	e7f4      	b.n	8009f7a <_printf_float+0x40e>
 8009f90:	2301      	movs	r3, #1
 8009f92:	4642      	mov	r2, r8
 8009f94:	e7e1      	b.n	8009f5a <_printf_float+0x3ee>
 8009f96:	2301      	movs	r3, #1
 8009f98:	464a      	mov	r2, r9
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	47b8      	blx	r7
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f43f ae3e 	beq.w	8009c22 <_printf_float+0xb6>
 8009fa6:	f108 0801 	add.w	r8, r8, #1
 8009faa:	68e3      	ldr	r3, [r4, #12]
 8009fac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009fae:	1a5b      	subs	r3, r3, r1
 8009fb0:	4543      	cmp	r3, r8
 8009fb2:	dcf0      	bgt.n	8009f96 <_printf_float+0x42a>
 8009fb4:	e6fc      	b.n	8009db0 <_printf_float+0x244>
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	f104 0919 	add.w	r9, r4, #25
 8009fbe:	e7f4      	b.n	8009faa <_printf_float+0x43e>

08009fc0 <_printf_common>:
 8009fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	4698      	mov	r8, r3
 8009fc8:	688a      	ldr	r2, [r1, #8]
 8009fca:	690b      	ldr	r3, [r1, #16]
 8009fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	bfb8      	it	lt
 8009fd4:	4613      	movlt	r3, r2
 8009fd6:	6033      	str	r3, [r6, #0]
 8009fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fdc:	4607      	mov	r7, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	b10a      	cbz	r2, 8009fe6 <_printf_common+0x26>
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	6033      	str	r3, [r6, #0]
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	0699      	lsls	r1, r3, #26
 8009fea:	bf42      	ittt	mi
 8009fec:	6833      	ldrmi	r3, [r6, #0]
 8009fee:	3302      	addmi	r3, #2
 8009ff0:	6033      	strmi	r3, [r6, #0]
 8009ff2:	6825      	ldr	r5, [r4, #0]
 8009ff4:	f015 0506 	ands.w	r5, r5, #6
 8009ff8:	d106      	bne.n	800a008 <_printf_common+0x48>
 8009ffa:	f104 0a19 	add.w	sl, r4, #25
 8009ffe:	68e3      	ldr	r3, [r4, #12]
 800a000:	6832      	ldr	r2, [r6, #0]
 800a002:	1a9b      	subs	r3, r3, r2
 800a004:	42ab      	cmp	r3, r5
 800a006:	dc26      	bgt.n	800a056 <_printf_common+0x96>
 800a008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a00c:	6822      	ldr	r2, [r4, #0]
 800a00e:	3b00      	subs	r3, #0
 800a010:	bf18      	it	ne
 800a012:	2301      	movne	r3, #1
 800a014:	0692      	lsls	r2, r2, #26
 800a016:	d42b      	bmi.n	800a070 <_printf_common+0xb0>
 800a018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a01c:	4641      	mov	r1, r8
 800a01e:	4638      	mov	r0, r7
 800a020:	47c8      	blx	r9
 800a022:	3001      	adds	r0, #1
 800a024:	d01e      	beq.n	800a064 <_printf_common+0xa4>
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	6922      	ldr	r2, [r4, #16]
 800a02a:	f003 0306 	and.w	r3, r3, #6
 800a02e:	2b04      	cmp	r3, #4
 800a030:	bf02      	ittt	eq
 800a032:	68e5      	ldreq	r5, [r4, #12]
 800a034:	6833      	ldreq	r3, [r6, #0]
 800a036:	1aed      	subeq	r5, r5, r3
 800a038:	68a3      	ldr	r3, [r4, #8]
 800a03a:	bf0c      	ite	eq
 800a03c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a040:	2500      	movne	r5, #0
 800a042:	4293      	cmp	r3, r2
 800a044:	bfc4      	itt	gt
 800a046:	1a9b      	subgt	r3, r3, r2
 800a048:	18ed      	addgt	r5, r5, r3
 800a04a:	2600      	movs	r6, #0
 800a04c:	341a      	adds	r4, #26
 800a04e:	42b5      	cmp	r5, r6
 800a050:	d11a      	bne.n	800a088 <_printf_common+0xc8>
 800a052:	2000      	movs	r0, #0
 800a054:	e008      	b.n	800a068 <_printf_common+0xa8>
 800a056:	2301      	movs	r3, #1
 800a058:	4652      	mov	r2, sl
 800a05a:	4641      	mov	r1, r8
 800a05c:	4638      	mov	r0, r7
 800a05e:	47c8      	blx	r9
 800a060:	3001      	adds	r0, #1
 800a062:	d103      	bne.n	800a06c <_printf_common+0xac>
 800a064:	f04f 30ff 	mov.w	r0, #4294967295
 800a068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a06c:	3501      	adds	r5, #1
 800a06e:	e7c6      	b.n	8009ffe <_printf_common+0x3e>
 800a070:	18e1      	adds	r1, r4, r3
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	2030      	movs	r0, #48	@ 0x30
 800a076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a07a:	4422      	add	r2, r4
 800a07c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a084:	3302      	adds	r3, #2
 800a086:	e7c7      	b.n	800a018 <_printf_common+0x58>
 800a088:	2301      	movs	r3, #1
 800a08a:	4622      	mov	r2, r4
 800a08c:	4641      	mov	r1, r8
 800a08e:	4638      	mov	r0, r7
 800a090:	47c8      	blx	r9
 800a092:	3001      	adds	r0, #1
 800a094:	d0e6      	beq.n	800a064 <_printf_common+0xa4>
 800a096:	3601      	adds	r6, #1
 800a098:	e7d9      	b.n	800a04e <_printf_common+0x8e>
	...

0800a09c <_printf_i>:
 800a09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	7e0f      	ldrb	r7, [r1, #24]
 800a0a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0a4:	2f78      	cmp	r7, #120	@ 0x78
 800a0a6:	4691      	mov	r9, r2
 800a0a8:	4680      	mov	r8, r0
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	469a      	mov	sl, r3
 800a0ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0b2:	d807      	bhi.n	800a0c4 <_printf_i+0x28>
 800a0b4:	2f62      	cmp	r7, #98	@ 0x62
 800a0b6:	d80a      	bhi.n	800a0ce <_printf_i+0x32>
 800a0b8:	2f00      	cmp	r7, #0
 800a0ba:	f000 80d2 	beq.w	800a262 <_printf_i+0x1c6>
 800a0be:	2f58      	cmp	r7, #88	@ 0x58
 800a0c0:	f000 80b9 	beq.w	800a236 <_printf_i+0x19a>
 800a0c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0cc:	e03a      	b.n	800a144 <_printf_i+0xa8>
 800a0ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0d2:	2b15      	cmp	r3, #21
 800a0d4:	d8f6      	bhi.n	800a0c4 <_printf_i+0x28>
 800a0d6:	a101      	add	r1, pc, #4	@ (adr r1, 800a0dc <_printf_i+0x40>)
 800a0d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0dc:	0800a135 	.word	0x0800a135
 800a0e0:	0800a149 	.word	0x0800a149
 800a0e4:	0800a0c5 	.word	0x0800a0c5
 800a0e8:	0800a0c5 	.word	0x0800a0c5
 800a0ec:	0800a0c5 	.word	0x0800a0c5
 800a0f0:	0800a0c5 	.word	0x0800a0c5
 800a0f4:	0800a149 	.word	0x0800a149
 800a0f8:	0800a0c5 	.word	0x0800a0c5
 800a0fc:	0800a0c5 	.word	0x0800a0c5
 800a100:	0800a0c5 	.word	0x0800a0c5
 800a104:	0800a0c5 	.word	0x0800a0c5
 800a108:	0800a249 	.word	0x0800a249
 800a10c:	0800a173 	.word	0x0800a173
 800a110:	0800a203 	.word	0x0800a203
 800a114:	0800a0c5 	.word	0x0800a0c5
 800a118:	0800a0c5 	.word	0x0800a0c5
 800a11c:	0800a26b 	.word	0x0800a26b
 800a120:	0800a0c5 	.word	0x0800a0c5
 800a124:	0800a173 	.word	0x0800a173
 800a128:	0800a0c5 	.word	0x0800a0c5
 800a12c:	0800a0c5 	.word	0x0800a0c5
 800a130:	0800a20b 	.word	0x0800a20b
 800a134:	6833      	ldr	r3, [r6, #0]
 800a136:	1d1a      	adds	r2, r3, #4
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6032      	str	r2, [r6, #0]
 800a13c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a144:	2301      	movs	r3, #1
 800a146:	e09d      	b.n	800a284 <_printf_i+0x1e8>
 800a148:	6833      	ldr	r3, [r6, #0]
 800a14a:	6820      	ldr	r0, [r4, #0]
 800a14c:	1d19      	adds	r1, r3, #4
 800a14e:	6031      	str	r1, [r6, #0]
 800a150:	0606      	lsls	r6, r0, #24
 800a152:	d501      	bpl.n	800a158 <_printf_i+0xbc>
 800a154:	681d      	ldr	r5, [r3, #0]
 800a156:	e003      	b.n	800a160 <_printf_i+0xc4>
 800a158:	0645      	lsls	r5, r0, #25
 800a15a:	d5fb      	bpl.n	800a154 <_printf_i+0xb8>
 800a15c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a160:	2d00      	cmp	r5, #0
 800a162:	da03      	bge.n	800a16c <_printf_i+0xd0>
 800a164:	232d      	movs	r3, #45	@ 0x2d
 800a166:	426d      	negs	r5, r5
 800a168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a16c:	4859      	ldr	r0, [pc, #356]	@ (800a2d4 <_printf_i+0x238>)
 800a16e:	230a      	movs	r3, #10
 800a170:	e011      	b.n	800a196 <_printf_i+0xfa>
 800a172:	6821      	ldr	r1, [r4, #0]
 800a174:	6833      	ldr	r3, [r6, #0]
 800a176:	0608      	lsls	r0, r1, #24
 800a178:	f853 5b04 	ldr.w	r5, [r3], #4
 800a17c:	d402      	bmi.n	800a184 <_printf_i+0xe8>
 800a17e:	0649      	lsls	r1, r1, #25
 800a180:	bf48      	it	mi
 800a182:	b2ad      	uxthmi	r5, r5
 800a184:	2f6f      	cmp	r7, #111	@ 0x6f
 800a186:	4853      	ldr	r0, [pc, #332]	@ (800a2d4 <_printf_i+0x238>)
 800a188:	6033      	str	r3, [r6, #0]
 800a18a:	bf14      	ite	ne
 800a18c:	230a      	movne	r3, #10
 800a18e:	2308      	moveq	r3, #8
 800a190:	2100      	movs	r1, #0
 800a192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a196:	6866      	ldr	r6, [r4, #4]
 800a198:	60a6      	str	r6, [r4, #8]
 800a19a:	2e00      	cmp	r6, #0
 800a19c:	bfa2      	ittt	ge
 800a19e:	6821      	ldrge	r1, [r4, #0]
 800a1a0:	f021 0104 	bicge.w	r1, r1, #4
 800a1a4:	6021      	strge	r1, [r4, #0]
 800a1a6:	b90d      	cbnz	r5, 800a1ac <_printf_i+0x110>
 800a1a8:	2e00      	cmp	r6, #0
 800a1aa:	d04b      	beq.n	800a244 <_printf_i+0x1a8>
 800a1ac:	4616      	mov	r6, r2
 800a1ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1b2:	fb03 5711 	mls	r7, r3, r1, r5
 800a1b6:	5dc7      	ldrb	r7, [r0, r7]
 800a1b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1bc:	462f      	mov	r7, r5
 800a1be:	42bb      	cmp	r3, r7
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	d9f4      	bls.n	800a1ae <_printf_i+0x112>
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d10b      	bne.n	800a1e0 <_printf_i+0x144>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	07df      	lsls	r7, r3, #31
 800a1cc:	d508      	bpl.n	800a1e0 <_printf_i+0x144>
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	bfde      	ittt	le
 800a1d6:	2330      	movle	r3, #48	@ 0x30
 800a1d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1e0:	1b92      	subs	r2, r2, r6
 800a1e2:	6122      	str	r2, [r4, #16]
 800a1e4:	f8cd a000 	str.w	sl, [sp]
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	aa03      	add	r2, sp, #12
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7ff fee6 	bl	8009fc0 <_printf_common>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d14a      	bne.n	800a28e <_printf_i+0x1f2>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	b004      	add	sp, #16
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	f043 0320 	orr.w	r3, r3, #32
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	4833      	ldr	r0, [pc, #204]	@ (800a2d8 <_printf_i+0x23c>)
 800a20c:	2778      	movs	r7, #120	@ 0x78
 800a20e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	6831      	ldr	r1, [r6, #0]
 800a216:	061f      	lsls	r7, r3, #24
 800a218:	f851 5b04 	ldr.w	r5, [r1], #4
 800a21c:	d402      	bmi.n	800a224 <_printf_i+0x188>
 800a21e:	065f      	lsls	r7, r3, #25
 800a220:	bf48      	it	mi
 800a222:	b2ad      	uxthmi	r5, r5
 800a224:	6031      	str	r1, [r6, #0]
 800a226:	07d9      	lsls	r1, r3, #31
 800a228:	bf44      	itt	mi
 800a22a:	f043 0320 	orrmi.w	r3, r3, #32
 800a22e:	6023      	strmi	r3, [r4, #0]
 800a230:	b11d      	cbz	r5, 800a23a <_printf_i+0x19e>
 800a232:	2310      	movs	r3, #16
 800a234:	e7ac      	b.n	800a190 <_printf_i+0xf4>
 800a236:	4827      	ldr	r0, [pc, #156]	@ (800a2d4 <_printf_i+0x238>)
 800a238:	e7e9      	b.n	800a20e <_printf_i+0x172>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	f023 0320 	bic.w	r3, r3, #32
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	e7f6      	b.n	800a232 <_printf_i+0x196>
 800a244:	4616      	mov	r6, r2
 800a246:	e7bd      	b.n	800a1c4 <_printf_i+0x128>
 800a248:	6833      	ldr	r3, [r6, #0]
 800a24a:	6825      	ldr	r5, [r4, #0]
 800a24c:	6961      	ldr	r1, [r4, #20]
 800a24e:	1d18      	adds	r0, r3, #4
 800a250:	6030      	str	r0, [r6, #0]
 800a252:	062e      	lsls	r6, r5, #24
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	d501      	bpl.n	800a25c <_printf_i+0x1c0>
 800a258:	6019      	str	r1, [r3, #0]
 800a25a:	e002      	b.n	800a262 <_printf_i+0x1c6>
 800a25c:	0668      	lsls	r0, r5, #25
 800a25e:	d5fb      	bpl.n	800a258 <_printf_i+0x1bc>
 800a260:	8019      	strh	r1, [r3, #0]
 800a262:	2300      	movs	r3, #0
 800a264:	6123      	str	r3, [r4, #16]
 800a266:	4616      	mov	r6, r2
 800a268:	e7bc      	b.n	800a1e4 <_printf_i+0x148>
 800a26a:	6833      	ldr	r3, [r6, #0]
 800a26c:	1d1a      	adds	r2, r3, #4
 800a26e:	6032      	str	r2, [r6, #0]
 800a270:	681e      	ldr	r6, [r3, #0]
 800a272:	6862      	ldr	r2, [r4, #4]
 800a274:	2100      	movs	r1, #0
 800a276:	4630      	mov	r0, r6
 800a278:	f7f5 ffca 	bl	8000210 <memchr>
 800a27c:	b108      	cbz	r0, 800a282 <_printf_i+0x1e6>
 800a27e:	1b80      	subs	r0, r0, r6
 800a280:	6060      	str	r0, [r4, #4]
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	6123      	str	r3, [r4, #16]
 800a286:	2300      	movs	r3, #0
 800a288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a28c:	e7aa      	b.n	800a1e4 <_printf_i+0x148>
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	4632      	mov	r2, r6
 800a292:	4649      	mov	r1, r9
 800a294:	4640      	mov	r0, r8
 800a296:	47d0      	blx	sl
 800a298:	3001      	adds	r0, #1
 800a29a:	d0ad      	beq.n	800a1f8 <_printf_i+0x15c>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	079b      	lsls	r3, r3, #30
 800a2a0:	d413      	bmi.n	800a2ca <_printf_i+0x22e>
 800a2a2:	68e0      	ldr	r0, [r4, #12]
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	4298      	cmp	r0, r3
 800a2a8:	bfb8      	it	lt
 800a2aa:	4618      	movlt	r0, r3
 800a2ac:	e7a6      	b.n	800a1fc <_printf_i+0x160>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	47d0      	blx	sl
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d09d      	beq.n	800a1f8 <_printf_i+0x15c>
 800a2bc:	3501      	adds	r5, #1
 800a2be:	68e3      	ldr	r3, [r4, #12]
 800a2c0:	9903      	ldr	r1, [sp, #12]
 800a2c2:	1a5b      	subs	r3, r3, r1
 800a2c4:	42ab      	cmp	r3, r5
 800a2c6:	dcf2      	bgt.n	800a2ae <_printf_i+0x212>
 800a2c8:	e7eb      	b.n	800a2a2 <_printf_i+0x206>
 800a2ca:	2500      	movs	r5, #0
 800a2cc:	f104 0619 	add.w	r6, r4, #25
 800a2d0:	e7f5      	b.n	800a2be <_printf_i+0x222>
 800a2d2:	bf00      	nop
 800a2d4:	080205ce 	.word	0x080205ce
 800a2d8:	080205df 	.word	0x080205df

0800a2dc <std>:
 800a2dc:	2300      	movs	r3, #0
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2ea:	6083      	str	r3, [r0, #8]
 800a2ec:	8181      	strh	r1, [r0, #12]
 800a2ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2f0:	81c2      	strh	r2, [r0, #14]
 800a2f2:	6183      	str	r3, [r0, #24]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	2208      	movs	r2, #8
 800a2f8:	305c      	adds	r0, #92	@ 0x5c
 800a2fa:	f000 f924 	bl	800a546 <memset>
 800a2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a334 <std+0x58>)
 800a300:	6263      	str	r3, [r4, #36]	@ 0x24
 800a302:	4b0d      	ldr	r3, [pc, #52]	@ (800a338 <std+0x5c>)
 800a304:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a306:	4b0d      	ldr	r3, [pc, #52]	@ (800a33c <std+0x60>)
 800a308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a30a:	4b0d      	ldr	r3, [pc, #52]	@ (800a340 <std+0x64>)
 800a30c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a30e:	4b0d      	ldr	r3, [pc, #52]	@ (800a344 <std+0x68>)
 800a310:	6224      	str	r4, [r4, #32]
 800a312:	429c      	cmp	r4, r3
 800a314:	d006      	beq.n	800a324 <std+0x48>
 800a316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a31a:	4294      	cmp	r4, r2
 800a31c:	d002      	beq.n	800a324 <std+0x48>
 800a31e:	33d0      	adds	r3, #208	@ 0xd0
 800a320:	429c      	cmp	r4, r3
 800a322:	d105      	bne.n	800a330 <std+0x54>
 800a324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a32c:	f000 b988 	b.w	800a640 <__retarget_lock_init_recursive>
 800a330:	bd10      	pop	{r4, pc}
 800a332:	bf00      	nop
 800a334:	0800a4a1 	.word	0x0800a4a1
 800a338:	0800a4c3 	.word	0x0800a4c3
 800a33c:	0800a4fb 	.word	0x0800a4fb
 800a340:	0800a51f 	.word	0x0800a51f
 800a344:	20018d2c 	.word	0x20018d2c

0800a348 <stdio_exit_handler>:
 800a348:	4a02      	ldr	r2, [pc, #8]	@ (800a354 <stdio_exit_handler+0xc>)
 800a34a:	4903      	ldr	r1, [pc, #12]	@ (800a358 <stdio_exit_handler+0x10>)
 800a34c:	4803      	ldr	r0, [pc, #12]	@ (800a35c <stdio_exit_handler+0x14>)
 800a34e:	f000 b869 	b.w	800a424 <_fwalk_sglue>
 800a352:	bf00      	nop
 800a354:	2000000c 	.word	0x2000000c
 800a358:	0800bf9d 	.word	0x0800bf9d
 800a35c:	2000001c 	.word	0x2000001c

0800a360 <cleanup_stdio>:
 800a360:	6841      	ldr	r1, [r0, #4]
 800a362:	4b0c      	ldr	r3, [pc, #48]	@ (800a394 <cleanup_stdio+0x34>)
 800a364:	4299      	cmp	r1, r3
 800a366:	b510      	push	{r4, lr}
 800a368:	4604      	mov	r4, r0
 800a36a:	d001      	beq.n	800a370 <cleanup_stdio+0x10>
 800a36c:	f001 fe16 	bl	800bf9c <_fflush_r>
 800a370:	68a1      	ldr	r1, [r4, #8]
 800a372:	4b09      	ldr	r3, [pc, #36]	@ (800a398 <cleanup_stdio+0x38>)
 800a374:	4299      	cmp	r1, r3
 800a376:	d002      	beq.n	800a37e <cleanup_stdio+0x1e>
 800a378:	4620      	mov	r0, r4
 800a37a:	f001 fe0f 	bl	800bf9c <_fflush_r>
 800a37e:	68e1      	ldr	r1, [r4, #12]
 800a380:	4b06      	ldr	r3, [pc, #24]	@ (800a39c <cleanup_stdio+0x3c>)
 800a382:	4299      	cmp	r1, r3
 800a384:	d004      	beq.n	800a390 <cleanup_stdio+0x30>
 800a386:	4620      	mov	r0, r4
 800a388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a38c:	f001 be06 	b.w	800bf9c <_fflush_r>
 800a390:	bd10      	pop	{r4, pc}
 800a392:	bf00      	nop
 800a394:	20018d2c 	.word	0x20018d2c
 800a398:	20018d94 	.word	0x20018d94
 800a39c:	20018dfc 	.word	0x20018dfc

0800a3a0 <global_stdio_init.part.0>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d0 <global_stdio_init.part.0+0x30>)
 800a3a4:	4c0b      	ldr	r4, [pc, #44]	@ (800a3d4 <global_stdio_init.part.0+0x34>)
 800a3a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a3d8 <global_stdio_init.part.0+0x38>)
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	2104      	movs	r1, #4
 800a3b0:	f7ff ff94 	bl	800a2dc <std>
 800a3b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	2109      	movs	r1, #9
 800a3bc:	f7ff ff8e 	bl	800a2dc <std>
 800a3c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ca:	2112      	movs	r1, #18
 800a3cc:	f7ff bf86 	b.w	800a2dc <std>
 800a3d0:	20018e64 	.word	0x20018e64
 800a3d4:	20018d2c 	.word	0x20018d2c
 800a3d8:	0800a349 	.word	0x0800a349

0800a3dc <__sfp_lock_acquire>:
 800a3dc:	4801      	ldr	r0, [pc, #4]	@ (800a3e4 <__sfp_lock_acquire+0x8>)
 800a3de:	f000 b930 	b.w	800a642 <__retarget_lock_acquire_recursive>
 800a3e2:	bf00      	nop
 800a3e4:	20018e6d 	.word	0x20018e6d

0800a3e8 <__sfp_lock_release>:
 800a3e8:	4801      	ldr	r0, [pc, #4]	@ (800a3f0 <__sfp_lock_release+0x8>)
 800a3ea:	f000 b92b 	b.w	800a644 <__retarget_lock_release_recursive>
 800a3ee:	bf00      	nop
 800a3f0:	20018e6d 	.word	0x20018e6d

0800a3f4 <__sinit>:
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	f7ff fff0 	bl	800a3dc <__sfp_lock_acquire>
 800a3fc:	6a23      	ldr	r3, [r4, #32]
 800a3fe:	b11b      	cbz	r3, 800a408 <__sinit+0x14>
 800a400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a404:	f7ff bff0 	b.w	800a3e8 <__sfp_lock_release>
 800a408:	4b04      	ldr	r3, [pc, #16]	@ (800a41c <__sinit+0x28>)
 800a40a:	6223      	str	r3, [r4, #32]
 800a40c:	4b04      	ldr	r3, [pc, #16]	@ (800a420 <__sinit+0x2c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1f5      	bne.n	800a400 <__sinit+0xc>
 800a414:	f7ff ffc4 	bl	800a3a0 <global_stdio_init.part.0>
 800a418:	e7f2      	b.n	800a400 <__sinit+0xc>
 800a41a:	bf00      	nop
 800a41c:	0800a361 	.word	0x0800a361
 800a420:	20018e64 	.word	0x20018e64

0800a424 <_fwalk_sglue>:
 800a424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a428:	4607      	mov	r7, r0
 800a42a:	4688      	mov	r8, r1
 800a42c:	4614      	mov	r4, r2
 800a42e:	2600      	movs	r6, #0
 800a430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a434:	f1b9 0901 	subs.w	r9, r9, #1
 800a438:	d505      	bpl.n	800a446 <_fwalk_sglue+0x22>
 800a43a:	6824      	ldr	r4, [r4, #0]
 800a43c:	2c00      	cmp	r4, #0
 800a43e:	d1f7      	bne.n	800a430 <_fwalk_sglue+0xc>
 800a440:	4630      	mov	r0, r6
 800a442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d907      	bls.n	800a45c <_fwalk_sglue+0x38>
 800a44c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a450:	3301      	adds	r3, #1
 800a452:	d003      	beq.n	800a45c <_fwalk_sglue+0x38>
 800a454:	4629      	mov	r1, r5
 800a456:	4638      	mov	r0, r7
 800a458:	47c0      	blx	r8
 800a45a:	4306      	orrs	r6, r0
 800a45c:	3568      	adds	r5, #104	@ 0x68
 800a45e:	e7e9      	b.n	800a434 <_fwalk_sglue+0x10>

0800a460 <siprintf>:
 800a460:	b40e      	push	{r1, r2, r3}
 800a462:	b500      	push	{lr}
 800a464:	b09c      	sub	sp, #112	@ 0x70
 800a466:	ab1d      	add	r3, sp, #116	@ 0x74
 800a468:	9002      	str	r0, [sp, #8]
 800a46a:	9006      	str	r0, [sp, #24]
 800a46c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a470:	4809      	ldr	r0, [pc, #36]	@ (800a498 <siprintf+0x38>)
 800a472:	9107      	str	r1, [sp, #28]
 800a474:	9104      	str	r1, [sp, #16]
 800a476:	4909      	ldr	r1, [pc, #36]	@ (800a49c <siprintf+0x3c>)
 800a478:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47c:	9105      	str	r1, [sp, #20]
 800a47e:	6800      	ldr	r0, [r0, #0]
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	a902      	add	r1, sp, #8
 800a484:	f001 fc0a 	bl	800bc9c <_svfiprintf_r>
 800a488:	9b02      	ldr	r3, [sp, #8]
 800a48a:	2200      	movs	r2, #0
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	b01c      	add	sp, #112	@ 0x70
 800a490:	f85d eb04 	ldr.w	lr, [sp], #4
 800a494:	b003      	add	sp, #12
 800a496:	4770      	bx	lr
 800a498:	20000018 	.word	0x20000018
 800a49c:	ffff0208 	.word	0xffff0208

0800a4a0 <__sread>:
 800a4a0:	b510      	push	{r4, lr}
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a8:	f000 f87c 	bl	800a5a4 <_read_r>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	bfab      	itete	ge
 800a4b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a4b4:	181b      	addge	r3, r3, r0
 800a4b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4ba:	bfac      	ite	ge
 800a4bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4be:	81a3      	strhlt	r3, [r4, #12]
 800a4c0:	bd10      	pop	{r4, pc}

0800a4c2 <__swrite>:
 800a4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c6:	461f      	mov	r7, r3
 800a4c8:	898b      	ldrh	r3, [r1, #12]
 800a4ca:	05db      	lsls	r3, r3, #23
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	4616      	mov	r6, r2
 800a4d2:	d505      	bpl.n	800a4e0 <__swrite+0x1e>
 800a4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d8:	2302      	movs	r3, #2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f000 f850 	bl	800a580 <_lseek_r>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4ea:	81a3      	strh	r3, [r4, #12]
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f6:	f000 b867 	b.w	800a5c8 <_write_r>

0800a4fa <__sseek>:
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a502:	f000 f83d 	bl	800a580 <_lseek_r>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	bf15      	itete	ne
 800a50c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a50e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a512:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a516:	81a3      	strheq	r3, [r4, #12]
 800a518:	bf18      	it	ne
 800a51a:	81a3      	strhne	r3, [r4, #12]
 800a51c:	bd10      	pop	{r4, pc}

0800a51e <__sclose>:
 800a51e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a522:	f000 b81d 	b.w	800a560 <_close_r>

0800a526 <memcmp>:
 800a526:	b510      	push	{r4, lr}
 800a528:	3901      	subs	r1, #1
 800a52a:	4402      	add	r2, r0
 800a52c:	4290      	cmp	r0, r2
 800a52e:	d101      	bne.n	800a534 <memcmp+0xe>
 800a530:	2000      	movs	r0, #0
 800a532:	e005      	b.n	800a540 <memcmp+0x1a>
 800a534:	7803      	ldrb	r3, [r0, #0]
 800a536:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a53a:	42a3      	cmp	r3, r4
 800a53c:	d001      	beq.n	800a542 <memcmp+0x1c>
 800a53e:	1b18      	subs	r0, r3, r4
 800a540:	bd10      	pop	{r4, pc}
 800a542:	3001      	adds	r0, #1
 800a544:	e7f2      	b.n	800a52c <memcmp+0x6>

0800a546 <memset>:
 800a546:	4402      	add	r2, r0
 800a548:	4603      	mov	r3, r0
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d100      	bne.n	800a550 <memset+0xa>
 800a54e:	4770      	bx	lr
 800a550:	f803 1b01 	strb.w	r1, [r3], #1
 800a554:	e7f9      	b.n	800a54a <memset+0x4>
	...

0800a558 <_localeconv_r>:
 800a558:	4800      	ldr	r0, [pc, #0]	@ (800a55c <_localeconv_r+0x4>)
 800a55a:	4770      	bx	lr
 800a55c:	20000158 	.word	0x20000158

0800a560 <_close_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d06      	ldr	r5, [pc, #24]	@ (800a57c <_close_r+0x1c>)
 800a564:	2300      	movs	r3, #0
 800a566:	4604      	mov	r4, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	602b      	str	r3, [r5, #0]
 800a56c:	f7f8 fb60 	bl	8002c30 <_close>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_close_r+0x1a>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	b103      	cbz	r3, 800a57a <_close_r+0x1a>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	20018e68 	.word	0x20018e68

0800a580 <_lseek_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4d07      	ldr	r5, [pc, #28]	@ (800a5a0 <_lseek_r+0x20>)
 800a584:	4604      	mov	r4, r0
 800a586:	4608      	mov	r0, r1
 800a588:	4611      	mov	r1, r2
 800a58a:	2200      	movs	r2, #0
 800a58c:	602a      	str	r2, [r5, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	f7f8 fb75 	bl	8002c7e <_lseek>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_lseek_r+0x1e>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_lseek_r+0x1e>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	20018e68 	.word	0x20018e68

0800a5a4 <_read_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	@ (800a5c4 <_read_r+0x20>)
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	602a      	str	r2, [r5, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	f7f8 fb03 	bl	8002bbe <_read>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_read_r+0x1e>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_read_r+0x1e>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	20018e68 	.word	0x20018e68

0800a5c8 <_write_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	@ (800a5e8 <_write_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f8 fb0e 	bl	8002bf8 <_write>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_write_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_write_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	20018e68 	.word	0x20018e68

0800a5ec <__errno>:
 800a5ec:	4b01      	ldr	r3, [pc, #4]	@ (800a5f4 <__errno+0x8>)
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20000018 	.word	0x20000018

0800a5f8 <__libc_init_array>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a630 <__libc_init_array+0x38>)
 800a5fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a634 <__libc_init_array+0x3c>)
 800a5fe:	1b64      	subs	r4, r4, r5
 800a600:	10a4      	asrs	r4, r4, #2
 800a602:	2600      	movs	r6, #0
 800a604:	42a6      	cmp	r6, r4
 800a606:	d109      	bne.n	800a61c <__libc_init_array+0x24>
 800a608:	4d0b      	ldr	r5, [pc, #44]	@ (800a638 <__libc_init_array+0x40>)
 800a60a:	4c0c      	ldr	r4, [pc, #48]	@ (800a63c <__libc_init_array+0x44>)
 800a60c:	f002 fc34 	bl	800ce78 <_init>
 800a610:	1b64      	subs	r4, r4, r5
 800a612:	10a4      	asrs	r4, r4, #2
 800a614:	2600      	movs	r6, #0
 800a616:	42a6      	cmp	r6, r4
 800a618:	d105      	bne.n	800a626 <__libc_init_array+0x2e>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a620:	4798      	blx	r3
 800a622:	3601      	adds	r6, #1
 800a624:	e7ee      	b.n	800a604 <__libc_init_array+0xc>
 800a626:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62a:	4798      	blx	r3
 800a62c:	3601      	adds	r6, #1
 800a62e:	e7f2      	b.n	800a616 <__libc_init_array+0x1e>
 800a630:	08020978 	.word	0x08020978
 800a634:	08020978 	.word	0x08020978
 800a638:	08020978 	.word	0x08020978
 800a63c:	0802097c 	.word	0x0802097c

0800a640 <__retarget_lock_init_recursive>:
 800a640:	4770      	bx	lr

0800a642 <__retarget_lock_acquire_recursive>:
 800a642:	4770      	bx	lr

0800a644 <__retarget_lock_release_recursive>:
 800a644:	4770      	bx	lr

0800a646 <quorem>:
 800a646:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64a:	6903      	ldr	r3, [r0, #16]
 800a64c:	690c      	ldr	r4, [r1, #16]
 800a64e:	42a3      	cmp	r3, r4
 800a650:	4607      	mov	r7, r0
 800a652:	db7e      	blt.n	800a752 <quorem+0x10c>
 800a654:	3c01      	subs	r4, #1
 800a656:	f101 0814 	add.w	r8, r1, #20
 800a65a:	00a3      	lsls	r3, r4, #2
 800a65c:	f100 0514 	add.w	r5, r0, #20
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a66c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a670:	3301      	adds	r3, #1
 800a672:	429a      	cmp	r2, r3
 800a674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a678:	fbb2 f6f3 	udiv	r6, r2, r3
 800a67c:	d32e      	bcc.n	800a6dc <quorem+0x96>
 800a67e:	f04f 0a00 	mov.w	sl, #0
 800a682:	46c4      	mov	ip, r8
 800a684:	46ae      	mov	lr, r5
 800a686:	46d3      	mov	fp, sl
 800a688:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a68c:	b298      	uxth	r0, r3
 800a68e:	fb06 a000 	mla	r0, r6, r0, sl
 800a692:	0c02      	lsrs	r2, r0, #16
 800a694:	0c1b      	lsrs	r3, r3, #16
 800a696:	fb06 2303 	mla	r3, r6, r3, r2
 800a69a:	f8de 2000 	ldr.w	r2, [lr]
 800a69e:	b280      	uxth	r0, r0
 800a6a0:	b292      	uxth	r2, r2
 800a6a2:	1a12      	subs	r2, r2, r0
 800a6a4:	445a      	add	r2, fp
 800a6a6:	f8de 0000 	ldr.w	r0, [lr]
 800a6aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a6b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a6b8:	b292      	uxth	r2, r2
 800a6ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a6be:	45e1      	cmp	r9, ip
 800a6c0:	f84e 2b04 	str.w	r2, [lr], #4
 800a6c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a6c8:	d2de      	bcs.n	800a688 <quorem+0x42>
 800a6ca:	9b00      	ldr	r3, [sp, #0]
 800a6cc:	58eb      	ldr	r3, [r5, r3]
 800a6ce:	b92b      	cbnz	r3, 800a6dc <quorem+0x96>
 800a6d0:	9b01      	ldr	r3, [sp, #4]
 800a6d2:	3b04      	subs	r3, #4
 800a6d4:	429d      	cmp	r5, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	d32f      	bcc.n	800a73a <quorem+0xf4>
 800a6da:	613c      	str	r4, [r7, #16]
 800a6dc:	4638      	mov	r0, r7
 800a6de:	f001 f979 	bl	800b9d4 <__mcmp>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	db25      	blt.n	800a732 <quorem+0xec>
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6ee:	f8d1 c000 	ldr.w	ip, [r1]
 800a6f2:	fa1f fe82 	uxth.w	lr, r2
 800a6f6:	fa1f f38c 	uxth.w	r3, ip
 800a6fa:	eba3 030e 	sub.w	r3, r3, lr
 800a6fe:	4403      	add	r3, r0
 800a700:	0c12      	lsrs	r2, r2, #16
 800a702:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a706:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a710:	45c1      	cmp	r9, r8
 800a712:	f841 3b04 	str.w	r3, [r1], #4
 800a716:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a71a:	d2e6      	bcs.n	800a6ea <quorem+0xa4>
 800a71c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a720:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a724:	b922      	cbnz	r2, 800a730 <quorem+0xea>
 800a726:	3b04      	subs	r3, #4
 800a728:	429d      	cmp	r5, r3
 800a72a:	461a      	mov	r2, r3
 800a72c:	d30b      	bcc.n	800a746 <quorem+0x100>
 800a72e:	613c      	str	r4, [r7, #16]
 800a730:	3601      	adds	r6, #1
 800a732:	4630      	mov	r0, r6
 800a734:	b003      	add	sp, #12
 800a736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73a:	6812      	ldr	r2, [r2, #0]
 800a73c:	3b04      	subs	r3, #4
 800a73e:	2a00      	cmp	r2, #0
 800a740:	d1cb      	bne.n	800a6da <quorem+0x94>
 800a742:	3c01      	subs	r4, #1
 800a744:	e7c6      	b.n	800a6d4 <quorem+0x8e>
 800a746:	6812      	ldr	r2, [r2, #0]
 800a748:	3b04      	subs	r3, #4
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	d1ef      	bne.n	800a72e <quorem+0xe8>
 800a74e:	3c01      	subs	r4, #1
 800a750:	e7ea      	b.n	800a728 <quorem+0xe2>
 800a752:	2000      	movs	r0, #0
 800a754:	e7ee      	b.n	800a734 <quorem+0xee>
	...

0800a758 <_dtoa_r>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	69c7      	ldr	r7, [r0, #28]
 800a75e:	b099      	sub	sp, #100	@ 0x64
 800a760:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a764:	ec55 4b10 	vmov	r4, r5, d0
 800a768:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a76a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a76c:	4683      	mov	fp, r0
 800a76e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a770:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a772:	b97f      	cbnz	r7, 800a794 <_dtoa_r+0x3c>
 800a774:	2010      	movs	r0, #16
 800a776:	f000 fdfd 	bl	800b374 <malloc>
 800a77a:	4602      	mov	r2, r0
 800a77c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a780:	b920      	cbnz	r0, 800a78c <_dtoa_r+0x34>
 800a782:	4ba7      	ldr	r3, [pc, #668]	@ (800aa20 <_dtoa_r+0x2c8>)
 800a784:	21ef      	movs	r1, #239	@ 0xef
 800a786:	48a7      	ldr	r0, [pc, #668]	@ (800aa24 <_dtoa_r+0x2cc>)
 800a788:	f001 fc68 	bl	800c05c <__assert_func>
 800a78c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a790:	6007      	str	r7, [r0, #0]
 800a792:	60c7      	str	r7, [r0, #12]
 800a794:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a798:	6819      	ldr	r1, [r3, #0]
 800a79a:	b159      	cbz	r1, 800a7b4 <_dtoa_r+0x5c>
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	604a      	str	r2, [r1, #4]
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	4093      	lsls	r3, r2
 800a7a4:	608b      	str	r3, [r1, #8]
 800a7a6:	4658      	mov	r0, fp
 800a7a8:	f000 feda 	bl	800b560 <_Bfree>
 800a7ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	1e2b      	subs	r3, r5, #0
 800a7b6:	bfb9      	ittee	lt
 800a7b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a7bc:	9303      	strlt	r3, [sp, #12]
 800a7be:	2300      	movge	r3, #0
 800a7c0:	6033      	strge	r3, [r6, #0]
 800a7c2:	9f03      	ldr	r7, [sp, #12]
 800a7c4:	4b98      	ldr	r3, [pc, #608]	@ (800aa28 <_dtoa_r+0x2d0>)
 800a7c6:	bfbc      	itt	lt
 800a7c8:	2201      	movlt	r2, #1
 800a7ca:	6032      	strlt	r2, [r6, #0]
 800a7cc:	43bb      	bics	r3, r7
 800a7ce:	d112      	bne.n	800a7f6 <_dtoa_r+0x9e>
 800a7d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7dc:	4323      	orrs	r3, r4
 800a7de:	f000 854d 	beq.w	800b27c <_dtoa_r+0xb24>
 800a7e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aa3c <_dtoa_r+0x2e4>
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 854f 	beq.w	800b28c <_dtoa_r+0xb34>
 800a7ee:	f10a 0303 	add.w	r3, sl, #3
 800a7f2:	f000 bd49 	b.w	800b288 <_dtoa_r+0xb30>
 800a7f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	ec51 0b17 	vmov	r0, r1, d7
 800a800:	2300      	movs	r3, #0
 800a802:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a806:	f7f6 f97f 	bl	8000b08 <__aeabi_dcmpeq>
 800a80a:	4680      	mov	r8, r0
 800a80c:	b158      	cbz	r0, 800a826 <_dtoa_r+0xce>
 800a80e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a810:	2301      	movs	r3, #1
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a816:	b113      	cbz	r3, 800a81e <_dtoa_r+0xc6>
 800a818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a81a:	4b84      	ldr	r3, [pc, #528]	@ (800aa2c <_dtoa_r+0x2d4>)
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aa40 <_dtoa_r+0x2e8>
 800a822:	f000 bd33 	b.w	800b28c <_dtoa_r+0xb34>
 800a826:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a82a:	aa16      	add	r2, sp, #88	@ 0x58
 800a82c:	a917      	add	r1, sp, #92	@ 0x5c
 800a82e:	4658      	mov	r0, fp
 800a830:	f001 f980 	bl	800bb34 <__d2b>
 800a834:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a838:	4681      	mov	r9, r0
 800a83a:	2e00      	cmp	r6, #0
 800a83c:	d077      	beq.n	800a92e <_dtoa_r+0x1d6>
 800a83e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a840:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a84c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a850:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a854:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a858:	4619      	mov	r1, r3
 800a85a:	2200      	movs	r2, #0
 800a85c:	4b74      	ldr	r3, [pc, #464]	@ (800aa30 <_dtoa_r+0x2d8>)
 800a85e:	f7f5 fd33 	bl	80002c8 <__aeabi_dsub>
 800a862:	a369      	add	r3, pc, #420	@ (adr r3, 800aa08 <_dtoa_r+0x2b0>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 fee6 	bl	8000638 <__aeabi_dmul>
 800a86c:	a368      	add	r3, pc, #416	@ (adr r3, 800aa10 <_dtoa_r+0x2b8>)
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	f7f5 fd2b 	bl	80002cc <__adddf3>
 800a876:	4604      	mov	r4, r0
 800a878:	4630      	mov	r0, r6
 800a87a:	460d      	mov	r5, r1
 800a87c:	f7f5 fe72 	bl	8000564 <__aeabi_i2d>
 800a880:	a365      	add	r3, pc, #404	@ (adr r3, 800aa18 <_dtoa_r+0x2c0>)
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	f7f5 fed7 	bl	8000638 <__aeabi_dmul>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4620      	mov	r0, r4
 800a890:	4629      	mov	r1, r5
 800a892:	f7f5 fd1b 	bl	80002cc <__adddf3>
 800a896:	4604      	mov	r4, r0
 800a898:	460d      	mov	r5, r1
 800a89a:	f7f6 f97d 	bl	8000b98 <__aeabi_d2iz>
 800a89e:	2200      	movs	r2, #0
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f6 f938 	bl	8000b1c <__aeabi_dcmplt>
 800a8ac:	b140      	cbz	r0, 800a8c0 <_dtoa_r+0x168>
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	f7f5 fe58 	bl	8000564 <__aeabi_i2d>
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	462b      	mov	r3, r5
 800a8b8:	f7f6 f926 	bl	8000b08 <__aeabi_dcmpeq>
 800a8bc:	b900      	cbnz	r0, 800a8c0 <_dtoa_r+0x168>
 800a8be:	3f01      	subs	r7, #1
 800a8c0:	2f16      	cmp	r7, #22
 800a8c2:	d851      	bhi.n	800a968 <_dtoa_r+0x210>
 800a8c4:	4b5b      	ldr	r3, [pc, #364]	@ (800aa34 <_dtoa_r+0x2dc>)
 800a8c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8d2:	f7f6 f923 	bl	8000b1c <__aeabi_dcmplt>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d048      	beq.n	800a96c <_dtoa_r+0x214>
 800a8da:	3f01      	subs	r7, #1
 800a8dc:	2300      	movs	r3, #0
 800a8de:	9312      	str	r3, [sp, #72]	@ 0x48
 800a8e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a8e2:	1b9b      	subs	r3, r3, r6
 800a8e4:	1e5a      	subs	r2, r3, #1
 800a8e6:	bf44      	itt	mi
 800a8e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a8ec:	2300      	movmi	r3, #0
 800a8ee:	9208      	str	r2, [sp, #32]
 800a8f0:	bf54      	ite	pl
 800a8f2:	f04f 0800 	movpl.w	r8, #0
 800a8f6:	9308      	strmi	r3, [sp, #32]
 800a8f8:	2f00      	cmp	r7, #0
 800a8fa:	db39      	blt.n	800a970 <_dtoa_r+0x218>
 800a8fc:	9b08      	ldr	r3, [sp, #32]
 800a8fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a900:	443b      	add	r3, r7
 800a902:	9308      	str	r3, [sp, #32]
 800a904:	2300      	movs	r3, #0
 800a906:	930a      	str	r3, [sp, #40]	@ 0x28
 800a908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d864      	bhi.n	800a9d8 <_dtoa_r+0x280>
 800a90e:	2b05      	cmp	r3, #5
 800a910:	bfc4      	itt	gt
 800a912:	3b04      	subgt	r3, #4
 800a914:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a918:	f1a3 0302 	sub.w	r3, r3, #2
 800a91c:	bfcc      	ite	gt
 800a91e:	2400      	movgt	r4, #0
 800a920:	2401      	movle	r4, #1
 800a922:	2b03      	cmp	r3, #3
 800a924:	d863      	bhi.n	800a9ee <_dtoa_r+0x296>
 800a926:	e8df f003 	tbb	[pc, r3]
 800a92a:	372a      	.short	0x372a
 800a92c:	5535      	.short	0x5535
 800a92e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a932:	441e      	add	r6, r3
 800a934:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a938:	2b20      	cmp	r3, #32
 800a93a:	bfc1      	itttt	gt
 800a93c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a940:	409f      	lslgt	r7, r3
 800a942:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a946:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a94a:	bfd6      	itet	le
 800a94c:	f1c3 0320 	rsble	r3, r3, #32
 800a950:	ea47 0003 	orrgt.w	r0, r7, r3
 800a954:	fa04 f003 	lslle.w	r0, r4, r3
 800a958:	f7f5 fdf4 	bl	8000544 <__aeabi_ui2d>
 800a95c:	2201      	movs	r2, #1
 800a95e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a962:	3e01      	subs	r6, #1
 800a964:	9214      	str	r2, [sp, #80]	@ 0x50
 800a966:	e777      	b.n	800a858 <_dtoa_r+0x100>
 800a968:	2301      	movs	r3, #1
 800a96a:	e7b8      	b.n	800a8de <_dtoa_r+0x186>
 800a96c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a96e:	e7b7      	b.n	800a8e0 <_dtoa_r+0x188>
 800a970:	427b      	negs	r3, r7
 800a972:	930a      	str	r3, [sp, #40]	@ 0x28
 800a974:	2300      	movs	r3, #0
 800a976:	eba8 0807 	sub.w	r8, r8, r7
 800a97a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a97c:	e7c4      	b.n	800a908 <_dtoa_r+0x1b0>
 800a97e:	2300      	movs	r3, #0
 800a980:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a984:	2b00      	cmp	r3, #0
 800a986:	dc35      	bgt.n	800a9f4 <_dtoa_r+0x29c>
 800a988:	2301      	movs	r3, #1
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	9307      	str	r3, [sp, #28]
 800a98e:	461a      	mov	r2, r3
 800a990:	920e      	str	r2, [sp, #56]	@ 0x38
 800a992:	e00b      	b.n	800a9ac <_dtoa_r+0x254>
 800a994:	2301      	movs	r3, #1
 800a996:	e7f3      	b.n	800a980 <_dtoa_r+0x228>
 800a998:	2300      	movs	r3, #0
 800a99a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a99c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a99e:	18fb      	adds	r3, r7, r3
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	9307      	str	r3, [sp, #28]
 800a9a8:	bfb8      	it	lt
 800a9aa:	2301      	movlt	r3, #1
 800a9ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	2204      	movs	r2, #4
 800a9b4:	f102 0514 	add.w	r5, r2, #20
 800a9b8:	429d      	cmp	r5, r3
 800a9ba:	d91f      	bls.n	800a9fc <_dtoa_r+0x2a4>
 800a9bc:	6041      	str	r1, [r0, #4]
 800a9be:	4658      	mov	r0, fp
 800a9c0:	f000 fd8e 	bl	800b4e0 <_Balloc>
 800a9c4:	4682      	mov	sl, r0
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d13c      	bne.n	800aa44 <_dtoa_r+0x2ec>
 800a9ca:	4b1b      	ldr	r3, [pc, #108]	@ (800aa38 <_dtoa_r+0x2e0>)
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800a9d2:	e6d8      	b.n	800a786 <_dtoa_r+0x2e>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e7e0      	b.n	800a99a <_dtoa_r+0x242>
 800a9d8:	2401      	movs	r4, #1
 800a9da:	2300      	movs	r3, #0
 800a9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2312      	movs	r3, #18
 800a9ec:	e7d0      	b.n	800a990 <_dtoa_r+0x238>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9f2:	e7f5      	b.n	800a9e0 <_dtoa_r+0x288>
 800a9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	9307      	str	r3, [sp, #28]
 800a9fa:	e7d7      	b.n	800a9ac <_dtoa_r+0x254>
 800a9fc:	3101      	adds	r1, #1
 800a9fe:	0052      	lsls	r2, r2, #1
 800aa00:	e7d8      	b.n	800a9b4 <_dtoa_r+0x25c>
 800aa02:	bf00      	nop
 800aa04:	f3af 8000 	nop.w
 800aa08:	636f4361 	.word	0x636f4361
 800aa0c:	3fd287a7 	.word	0x3fd287a7
 800aa10:	8b60c8b3 	.word	0x8b60c8b3
 800aa14:	3fc68a28 	.word	0x3fc68a28
 800aa18:	509f79fb 	.word	0x509f79fb
 800aa1c:	3fd34413 	.word	0x3fd34413
 800aa20:	080205fd 	.word	0x080205fd
 800aa24:	08020614 	.word	0x08020614
 800aa28:	7ff00000 	.word	0x7ff00000
 800aa2c:	080205cd 	.word	0x080205cd
 800aa30:	3ff80000 	.word	0x3ff80000
 800aa34:	08020710 	.word	0x08020710
 800aa38:	0802066c 	.word	0x0802066c
 800aa3c:	080205f9 	.word	0x080205f9
 800aa40:	080205cc 	.word	0x080205cc
 800aa44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa48:	6018      	str	r0, [r3, #0]
 800aa4a:	9b07      	ldr	r3, [sp, #28]
 800aa4c:	2b0e      	cmp	r3, #14
 800aa4e:	f200 80a4 	bhi.w	800ab9a <_dtoa_r+0x442>
 800aa52:	2c00      	cmp	r4, #0
 800aa54:	f000 80a1 	beq.w	800ab9a <_dtoa_r+0x442>
 800aa58:	2f00      	cmp	r7, #0
 800aa5a:	dd33      	ble.n	800aac4 <_dtoa_r+0x36c>
 800aa5c:	4bad      	ldr	r3, [pc, #692]	@ (800ad14 <_dtoa_r+0x5bc>)
 800aa5e:	f007 020f 	and.w	r2, r7, #15
 800aa62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa66:	ed93 7b00 	vldr	d7, [r3]
 800aa6a:	05f8      	lsls	r0, r7, #23
 800aa6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aa70:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa74:	d516      	bpl.n	800aaa4 <_dtoa_r+0x34c>
 800aa76:	4ba8      	ldr	r3, [pc, #672]	@ (800ad18 <_dtoa_r+0x5c0>)
 800aa78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa80:	f7f5 ff04 	bl	800088c <__aeabi_ddiv>
 800aa84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa88:	f004 040f 	and.w	r4, r4, #15
 800aa8c:	2603      	movs	r6, #3
 800aa8e:	4da2      	ldr	r5, [pc, #648]	@ (800ad18 <_dtoa_r+0x5c0>)
 800aa90:	b954      	cbnz	r4, 800aaa8 <_dtoa_r+0x350>
 800aa92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa9a:	f7f5 fef7 	bl	800088c <__aeabi_ddiv>
 800aa9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa2:	e028      	b.n	800aaf6 <_dtoa_r+0x39e>
 800aaa4:	2602      	movs	r6, #2
 800aaa6:	e7f2      	b.n	800aa8e <_dtoa_r+0x336>
 800aaa8:	07e1      	lsls	r1, r4, #31
 800aaaa:	d508      	bpl.n	800aabe <_dtoa_r+0x366>
 800aaac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aab4:	f7f5 fdc0 	bl	8000638 <__aeabi_dmul>
 800aab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aabc:	3601      	adds	r6, #1
 800aabe:	1064      	asrs	r4, r4, #1
 800aac0:	3508      	adds	r5, #8
 800aac2:	e7e5      	b.n	800aa90 <_dtoa_r+0x338>
 800aac4:	f000 80d2 	beq.w	800ac6c <_dtoa_r+0x514>
 800aac8:	427c      	negs	r4, r7
 800aaca:	4b92      	ldr	r3, [pc, #584]	@ (800ad14 <_dtoa_r+0x5bc>)
 800aacc:	4d92      	ldr	r5, [pc, #584]	@ (800ad18 <_dtoa_r+0x5c0>)
 800aace:	f004 020f 	and.w	r2, r4, #15
 800aad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aade:	f7f5 fdab 	bl	8000638 <__aeabi_dmul>
 800aae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae6:	1124      	asrs	r4, r4, #4
 800aae8:	2300      	movs	r3, #0
 800aaea:	2602      	movs	r6, #2
 800aaec:	2c00      	cmp	r4, #0
 800aaee:	f040 80b2 	bne.w	800ac56 <_dtoa_r+0x4fe>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1d3      	bne.n	800aa9e <_dtoa_r+0x346>
 800aaf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aaf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80b7 	beq.w	800ac70 <_dtoa_r+0x518>
 800ab02:	4b86      	ldr	r3, [pc, #536]	@ (800ad1c <_dtoa_r+0x5c4>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	4620      	mov	r0, r4
 800ab08:	4629      	mov	r1, r5
 800ab0a:	f7f6 f807 	bl	8000b1c <__aeabi_dcmplt>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f000 80ae 	beq.w	800ac70 <_dtoa_r+0x518>
 800ab14:	9b07      	ldr	r3, [sp, #28]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80aa 	beq.w	800ac70 <_dtoa_r+0x518>
 800ab1c:	9b00      	ldr	r3, [sp, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	dd37      	ble.n	800ab92 <_dtoa_r+0x43a>
 800ab22:	1e7b      	subs	r3, r7, #1
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	4620      	mov	r0, r4
 800ab28:	4b7d      	ldr	r3, [pc, #500]	@ (800ad20 <_dtoa_r+0x5c8>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 fd83 	bl	8000638 <__aeabi_dmul>
 800ab32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab36:	9c00      	ldr	r4, [sp, #0]
 800ab38:	3601      	adds	r6, #1
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f7f5 fd12 	bl	8000564 <__aeabi_i2d>
 800ab40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab44:	f7f5 fd78 	bl	8000638 <__aeabi_dmul>
 800ab48:	4b76      	ldr	r3, [pc, #472]	@ (800ad24 <_dtoa_r+0x5cc>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f7f5 fbbe 	bl	80002cc <__adddf3>
 800ab50:	4605      	mov	r5, r0
 800ab52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab56:	2c00      	cmp	r4, #0
 800ab58:	f040 808d 	bne.w	800ac76 <_dtoa_r+0x51e>
 800ab5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab60:	4b71      	ldr	r3, [pc, #452]	@ (800ad28 <_dtoa_r+0x5d0>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	f7f5 fbb0 	bl	80002c8 <__aeabi_dsub>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab70:	462a      	mov	r2, r5
 800ab72:	4633      	mov	r3, r6
 800ab74:	f7f5 fff0 	bl	8000b58 <__aeabi_dcmpgt>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	f040 828b 	bne.w	800b094 <_dtoa_r+0x93c>
 800ab7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab82:	462a      	mov	r2, r5
 800ab84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab88:	f7f5 ffc8 	bl	8000b1c <__aeabi_dcmplt>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	f040 8128 	bne.w	800ade2 <_dtoa_r+0x68a>
 800ab92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ab96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ab9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f2c0 815a 	blt.w	800ae56 <_dtoa_r+0x6fe>
 800aba2:	2f0e      	cmp	r7, #14
 800aba4:	f300 8157 	bgt.w	800ae56 <_dtoa_r+0x6fe>
 800aba8:	4b5a      	ldr	r3, [pc, #360]	@ (800ad14 <_dtoa_r+0x5bc>)
 800abaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abae:	ed93 7b00 	vldr	d7, [r3]
 800abb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	ed8d 7b00 	vstr	d7, [sp]
 800abba:	da03      	bge.n	800abc4 <_dtoa_r+0x46c>
 800abbc:	9b07      	ldr	r3, [sp, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f340 8101 	ble.w	800adc6 <_dtoa_r+0x66e>
 800abc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800abc8:	4656      	mov	r6, sl
 800abca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abce:	4620      	mov	r0, r4
 800abd0:	4629      	mov	r1, r5
 800abd2:	f7f5 fe5b 	bl	800088c <__aeabi_ddiv>
 800abd6:	f7f5 ffdf 	bl	8000b98 <__aeabi_d2iz>
 800abda:	4680      	mov	r8, r0
 800abdc:	f7f5 fcc2 	bl	8000564 <__aeabi_i2d>
 800abe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abe4:	f7f5 fd28 	bl	8000638 <__aeabi_dmul>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	4620      	mov	r0, r4
 800abee:	4629      	mov	r1, r5
 800abf0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800abf4:	f7f5 fb68 	bl	80002c8 <__aeabi_dsub>
 800abf8:	f806 4b01 	strb.w	r4, [r6], #1
 800abfc:	9d07      	ldr	r5, [sp, #28]
 800abfe:	eba6 040a 	sub.w	r4, r6, sl
 800ac02:	42a5      	cmp	r5, r4
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	f040 8117 	bne.w	800ae3a <_dtoa_r+0x6e2>
 800ac0c:	f7f5 fb5e 	bl	80002cc <__adddf3>
 800ac10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac14:	4604      	mov	r4, r0
 800ac16:	460d      	mov	r5, r1
 800ac18:	f7f5 ff9e 	bl	8000b58 <__aeabi_dcmpgt>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	f040 80f9 	bne.w	800ae14 <_dtoa_r+0x6bc>
 800ac22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac26:	4620      	mov	r0, r4
 800ac28:	4629      	mov	r1, r5
 800ac2a:	f7f5 ff6d 	bl	8000b08 <__aeabi_dcmpeq>
 800ac2e:	b118      	cbz	r0, 800ac38 <_dtoa_r+0x4e0>
 800ac30:	f018 0f01 	tst.w	r8, #1
 800ac34:	f040 80ee 	bne.w	800ae14 <_dtoa_r+0x6bc>
 800ac38:	4649      	mov	r1, r9
 800ac3a:	4658      	mov	r0, fp
 800ac3c:	f000 fc90 	bl	800b560 <_Bfree>
 800ac40:	2300      	movs	r3, #0
 800ac42:	7033      	strb	r3, [r6, #0]
 800ac44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac46:	3701      	adds	r7, #1
 800ac48:	601f      	str	r7, [r3, #0]
 800ac4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 831d 	beq.w	800b28c <_dtoa_r+0xb34>
 800ac52:	601e      	str	r6, [r3, #0]
 800ac54:	e31a      	b.n	800b28c <_dtoa_r+0xb34>
 800ac56:	07e2      	lsls	r2, r4, #31
 800ac58:	d505      	bpl.n	800ac66 <_dtoa_r+0x50e>
 800ac5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac5e:	f7f5 fceb 	bl	8000638 <__aeabi_dmul>
 800ac62:	3601      	adds	r6, #1
 800ac64:	2301      	movs	r3, #1
 800ac66:	1064      	asrs	r4, r4, #1
 800ac68:	3508      	adds	r5, #8
 800ac6a:	e73f      	b.n	800aaec <_dtoa_r+0x394>
 800ac6c:	2602      	movs	r6, #2
 800ac6e:	e742      	b.n	800aaf6 <_dtoa_r+0x39e>
 800ac70:	9c07      	ldr	r4, [sp, #28]
 800ac72:	9704      	str	r7, [sp, #16]
 800ac74:	e761      	b.n	800ab3a <_dtoa_r+0x3e2>
 800ac76:	4b27      	ldr	r3, [pc, #156]	@ (800ad14 <_dtoa_r+0x5bc>)
 800ac78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac82:	4454      	add	r4, sl
 800ac84:	2900      	cmp	r1, #0
 800ac86:	d053      	beq.n	800ad30 <_dtoa_r+0x5d8>
 800ac88:	4928      	ldr	r1, [pc, #160]	@ (800ad2c <_dtoa_r+0x5d4>)
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	f7f5 fdfe 	bl	800088c <__aeabi_ddiv>
 800ac90:	4633      	mov	r3, r6
 800ac92:	462a      	mov	r2, r5
 800ac94:	f7f5 fb18 	bl	80002c8 <__aeabi_dsub>
 800ac98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac9c:	4656      	mov	r6, sl
 800ac9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca2:	f7f5 ff79 	bl	8000b98 <__aeabi_d2iz>
 800aca6:	4605      	mov	r5, r0
 800aca8:	f7f5 fc5c 	bl	8000564 <__aeabi_i2d>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acb4:	f7f5 fb08 	bl	80002c8 <__aeabi_dsub>
 800acb8:	3530      	adds	r5, #48	@ 0x30
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acc2:	f806 5b01 	strb.w	r5, [r6], #1
 800acc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acca:	f7f5 ff27 	bl	8000b1c <__aeabi_dcmplt>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d171      	bne.n	800adb6 <_dtoa_r+0x65e>
 800acd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acd6:	4911      	ldr	r1, [pc, #68]	@ (800ad1c <_dtoa_r+0x5c4>)
 800acd8:	2000      	movs	r0, #0
 800acda:	f7f5 faf5 	bl	80002c8 <__aeabi_dsub>
 800acde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ace2:	f7f5 ff1b 	bl	8000b1c <__aeabi_dcmplt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f040 8095 	bne.w	800ae16 <_dtoa_r+0x6be>
 800acec:	42a6      	cmp	r6, r4
 800acee:	f43f af50 	beq.w	800ab92 <_dtoa_r+0x43a>
 800acf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800acf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad20 <_dtoa_r+0x5c8>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	f7f5 fc9d 	bl	8000638 <__aeabi_dmul>
 800acfe:	4b08      	ldr	r3, [pc, #32]	@ (800ad20 <_dtoa_r+0x5c8>)
 800ad00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad04:	2200      	movs	r2, #0
 800ad06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad0a:	f7f5 fc95 	bl	8000638 <__aeabi_dmul>
 800ad0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad12:	e7c4      	b.n	800ac9e <_dtoa_r+0x546>
 800ad14:	08020710 	.word	0x08020710
 800ad18:	080206e8 	.word	0x080206e8
 800ad1c:	3ff00000 	.word	0x3ff00000
 800ad20:	40240000 	.word	0x40240000
 800ad24:	401c0000 	.word	0x401c0000
 800ad28:	40140000 	.word	0x40140000
 800ad2c:	3fe00000 	.word	0x3fe00000
 800ad30:	4631      	mov	r1, r6
 800ad32:	4628      	mov	r0, r5
 800ad34:	f7f5 fc80 	bl	8000638 <__aeabi_dmul>
 800ad38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ad3e:	4656      	mov	r6, sl
 800ad40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad44:	f7f5 ff28 	bl	8000b98 <__aeabi_d2iz>
 800ad48:	4605      	mov	r5, r0
 800ad4a:	f7f5 fc0b 	bl	8000564 <__aeabi_i2d>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad56:	f7f5 fab7 	bl	80002c8 <__aeabi_dsub>
 800ad5a:	3530      	adds	r5, #48	@ 0x30
 800ad5c:	f806 5b01 	strb.w	r5, [r6], #1
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	42a6      	cmp	r6, r4
 800ad66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad6a:	f04f 0200 	mov.w	r2, #0
 800ad6e:	d124      	bne.n	800adba <_dtoa_r+0x662>
 800ad70:	4bac      	ldr	r3, [pc, #688]	@ (800b024 <_dtoa_r+0x8cc>)
 800ad72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad76:	f7f5 faa9 	bl	80002cc <__adddf3>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad82:	f7f5 fee9 	bl	8000b58 <__aeabi_dcmpgt>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d145      	bne.n	800ae16 <_dtoa_r+0x6be>
 800ad8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad8e:	49a5      	ldr	r1, [pc, #660]	@ (800b024 <_dtoa_r+0x8cc>)
 800ad90:	2000      	movs	r0, #0
 800ad92:	f7f5 fa99 	bl	80002c8 <__aeabi_dsub>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad9e:	f7f5 febd 	bl	8000b1c <__aeabi_dcmplt>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	f43f aef5 	beq.w	800ab92 <_dtoa_r+0x43a>
 800ada8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800adaa:	1e73      	subs	r3, r6, #1
 800adac:	9315      	str	r3, [sp, #84]	@ 0x54
 800adae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800adb2:	2b30      	cmp	r3, #48	@ 0x30
 800adb4:	d0f8      	beq.n	800ada8 <_dtoa_r+0x650>
 800adb6:	9f04      	ldr	r7, [sp, #16]
 800adb8:	e73e      	b.n	800ac38 <_dtoa_r+0x4e0>
 800adba:	4b9b      	ldr	r3, [pc, #620]	@ (800b028 <_dtoa_r+0x8d0>)
 800adbc:	f7f5 fc3c 	bl	8000638 <__aeabi_dmul>
 800adc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc4:	e7bc      	b.n	800ad40 <_dtoa_r+0x5e8>
 800adc6:	d10c      	bne.n	800ade2 <_dtoa_r+0x68a>
 800adc8:	4b98      	ldr	r3, [pc, #608]	@ (800b02c <_dtoa_r+0x8d4>)
 800adca:	2200      	movs	r2, #0
 800adcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800add0:	f7f5 fc32 	bl	8000638 <__aeabi_dmul>
 800add4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800add8:	f7f5 feb4 	bl	8000b44 <__aeabi_dcmpge>
 800addc:	2800      	cmp	r0, #0
 800adde:	f000 8157 	beq.w	800b090 <_dtoa_r+0x938>
 800ade2:	2400      	movs	r4, #0
 800ade4:	4625      	mov	r5, r4
 800ade6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ade8:	43db      	mvns	r3, r3
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	4656      	mov	r6, sl
 800adee:	2700      	movs	r7, #0
 800adf0:	4621      	mov	r1, r4
 800adf2:	4658      	mov	r0, fp
 800adf4:	f000 fbb4 	bl	800b560 <_Bfree>
 800adf8:	2d00      	cmp	r5, #0
 800adfa:	d0dc      	beq.n	800adb6 <_dtoa_r+0x65e>
 800adfc:	b12f      	cbz	r7, 800ae0a <_dtoa_r+0x6b2>
 800adfe:	42af      	cmp	r7, r5
 800ae00:	d003      	beq.n	800ae0a <_dtoa_r+0x6b2>
 800ae02:	4639      	mov	r1, r7
 800ae04:	4658      	mov	r0, fp
 800ae06:	f000 fbab 	bl	800b560 <_Bfree>
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4658      	mov	r0, fp
 800ae0e:	f000 fba7 	bl	800b560 <_Bfree>
 800ae12:	e7d0      	b.n	800adb6 <_dtoa_r+0x65e>
 800ae14:	9704      	str	r7, [sp, #16]
 800ae16:	4633      	mov	r3, r6
 800ae18:	461e      	mov	r6, r3
 800ae1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae1e:	2a39      	cmp	r2, #57	@ 0x39
 800ae20:	d107      	bne.n	800ae32 <_dtoa_r+0x6da>
 800ae22:	459a      	cmp	sl, r3
 800ae24:	d1f8      	bne.n	800ae18 <_dtoa_r+0x6c0>
 800ae26:	9a04      	ldr	r2, [sp, #16]
 800ae28:	3201      	adds	r2, #1
 800ae2a:	9204      	str	r2, [sp, #16]
 800ae2c:	2230      	movs	r2, #48	@ 0x30
 800ae2e:	f88a 2000 	strb.w	r2, [sl]
 800ae32:	781a      	ldrb	r2, [r3, #0]
 800ae34:	3201      	adds	r2, #1
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	e7bd      	b.n	800adb6 <_dtoa_r+0x65e>
 800ae3a:	4b7b      	ldr	r3, [pc, #492]	@ (800b028 <_dtoa_r+0x8d0>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f7f5 fbfb 	bl	8000638 <__aeabi_dmul>
 800ae42:	2200      	movs	r2, #0
 800ae44:	2300      	movs	r3, #0
 800ae46:	4604      	mov	r4, r0
 800ae48:	460d      	mov	r5, r1
 800ae4a:	f7f5 fe5d 	bl	8000b08 <__aeabi_dcmpeq>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f aebb 	beq.w	800abca <_dtoa_r+0x472>
 800ae54:	e6f0      	b.n	800ac38 <_dtoa_r+0x4e0>
 800ae56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	f000 80db 	beq.w	800b014 <_dtoa_r+0x8bc>
 800ae5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae60:	2a01      	cmp	r2, #1
 800ae62:	f300 80bf 	bgt.w	800afe4 <_dtoa_r+0x88c>
 800ae66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ae68:	2a00      	cmp	r2, #0
 800ae6a:	f000 80b7 	beq.w	800afdc <_dtoa_r+0x884>
 800ae6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae74:	4646      	mov	r6, r8
 800ae76:	9a08      	ldr	r2, [sp, #32]
 800ae78:	2101      	movs	r1, #1
 800ae7a:	441a      	add	r2, r3
 800ae7c:	4658      	mov	r0, fp
 800ae7e:	4498      	add	r8, r3
 800ae80:	9208      	str	r2, [sp, #32]
 800ae82:	f000 fc21 	bl	800b6c8 <__i2b>
 800ae86:	4605      	mov	r5, r0
 800ae88:	b15e      	cbz	r6, 800aea2 <_dtoa_r+0x74a>
 800ae8a:	9b08      	ldr	r3, [sp, #32]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	dd08      	ble.n	800aea2 <_dtoa_r+0x74a>
 800ae90:	42b3      	cmp	r3, r6
 800ae92:	9a08      	ldr	r2, [sp, #32]
 800ae94:	bfa8      	it	ge
 800ae96:	4633      	movge	r3, r6
 800ae98:	eba8 0803 	sub.w	r8, r8, r3
 800ae9c:	1af6      	subs	r6, r6, r3
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	9308      	str	r3, [sp, #32]
 800aea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aea4:	b1f3      	cbz	r3, 800aee4 <_dtoa_r+0x78c>
 800aea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 80b7 	beq.w	800b01c <_dtoa_r+0x8c4>
 800aeae:	b18c      	cbz	r4, 800aed4 <_dtoa_r+0x77c>
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	4658      	mov	r0, fp
 800aeb6:	f000 fcc7 	bl	800b848 <__pow5mult>
 800aeba:	464a      	mov	r2, r9
 800aebc:	4601      	mov	r1, r0
 800aebe:	4605      	mov	r5, r0
 800aec0:	4658      	mov	r0, fp
 800aec2:	f000 fc17 	bl	800b6f4 <__multiply>
 800aec6:	4649      	mov	r1, r9
 800aec8:	9004      	str	r0, [sp, #16]
 800aeca:	4658      	mov	r0, fp
 800aecc:	f000 fb48 	bl	800b560 <_Bfree>
 800aed0:	9b04      	ldr	r3, [sp, #16]
 800aed2:	4699      	mov	r9, r3
 800aed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aed6:	1b1a      	subs	r2, r3, r4
 800aed8:	d004      	beq.n	800aee4 <_dtoa_r+0x78c>
 800aeda:	4649      	mov	r1, r9
 800aedc:	4658      	mov	r0, fp
 800aede:	f000 fcb3 	bl	800b848 <__pow5mult>
 800aee2:	4681      	mov	r9, r0
 800aee4:	2101      	movs	r1, #1
 800aee6:	4658      	mov	r0, fp
 800aee8:	f000 fbee 	bl	800b6c8 <__i2b>
 800aeec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeee:	4604      	mov	r4, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 81cf 	beq.w	800b294 <_dtoa_r+0xb3c>
 800aef6:	461a      	mov	r2, r3
 800aef8:	4601      	mov	r1, r0
 800aefa:	4658      	mov	r0, fp
 800aefc:	f000 fca4 	bl	800b848 <__pow5mult>
 800af00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af02:	2b01      	cmp	r3, #1
 800af04:	4604      	mov	r4, r0
 800af06:	f300 8095 	bgt.w	800b034 <_dtoa_r+0x8dc>
 800af0a:	9b02      	ldr	r3, [sp, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f040 8087 	bne.w	800b020 <_dtoa_r+0x8c8>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f040 8089 	bne.w	800b030 <_dtoa_r+0x8d8>
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af24:	0d1b      	lsrs	r3, r3, #20
 800af26:	051b      	lsls	r3, r3, #20
 800af28:	b12b      	cbz	r3, 800af36 <_dtoa_r+0x7de>
 800af2a:	9b08      	ldr	r3, [sp, #32]
 800af2c:	3301      	adds	r3, #1
 800af2e:	9308      	str	r3, [sp, #32]
 800af30:	f108 0801 	add.w	r8, r8, #1
 800af34:	2301      	movs	r3, #1
 800af36:	930a      	str	r3, [sp, #40]	@ 0x28
 800af38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 81b0 	beq.w	800b2a0 <_dtoa_r+0xb48>
 800af40:	6923      	ldr	r3, [r4, #16]
 800af42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af46:	6918      	ldr	r0, [r3, #16]
 800af48:	f000 fb72 	bl	800b630 <__hi0bits>
 800af4c:	f1c0 0020 	rsb	r0, r0, #32
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	4418      	add	r0, r3
 800af54:	f010 001f 	ands.w	r0, r0, #31
 800af58:	d077      	beq.n	800b04a <_dtoa_r+0x8f2>
 800af5a:	f1c0 0320 	rsb	r3, r0, #32
 800af5e:	2b04      	cmp	r3, #4
 800af60:	dd6b      	ble.n	800b03a <_dtoa_r+0x8e2>
 800af62:	9b08      	ldr	r3, [sp, #32]
 800af64:	f1c0 001c 	rsb	r0, r0, #28
 800af68:	4403      	add	r3, r0
 800af6a:	4480      	add	r8, r0
 800af6c:	4406      	add	r6, r0
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	f1b8 0f00 	cmp.w	r8, #0
 800af74:	dd05      	ble.n	800af82 <_dtoa_r+0x82a>
 800af76:	4649      	mov	r1, r9
 800af78:	4642      	mov	r2, r8
 800af7a:	4658      	mov	r0, fp
 800af7c:	f000 fcbe 	bl	800b8fc <__lshift>
 800af80:	4681      	mov	r9, r0
 800af82:	9b08      	ldr	r3, [sp, #32]
 800af84:	2b00      	cmp	r3, #0
 800af86:	dd05      	ble.n	800af94 <_dtoa_r+0x83c>
 800af88:	4621      	mov	r1, r4
 800af8a:	461a      	mov	r2, r3
 800af8c:	4658      	mov	r0, fp
 800af8e:	f000 fcb5 	bl	800b8fc <__lshift>
 800af92:	4604      	mov	r4, r0
 800af94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af96:	2b00      	cmp	r3, #0
 800af98:	d059      	beq.n	800b04e <_dtoa_r+0x8f6>
 800af9a:	4621      	mov	r1, r4
 800af9c:	4648      	mov	r0, r9
 800af9e:	f000 fd19 	bl	800b9d4 <__mcmp>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	da53      	bge.n	800b04e <_dtoa_r+0x8f6>
 800afa6:	1e7b      	subs	r3, r7, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	4649      	mov	r1, r9
 800afac:	2300      	movs	r3, #0
 800afae:	220a      	movs	r2, #10
 800afb0:	4658      	mov	r0, fp
 800afb2:	f000 faf7 	bl	800b5a4 <__multadd>
 800afb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afb8:	4681      	mov	r9, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8172 	beq.w	800b2a4 <_dtoa_r+0xb4c>
 800afc0:	2300      	movs	r3, #0
 800afc2:	4629      	mov	r1, r5
 800afc4:	220a      	movs	r2, #10
 800afc6:	4658      	mov	r0, fp
 800afc8:	f000 faec 	bl	800b5a4 <__multadd>
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	4605      	mov	r5, r0
 800afd2:	dc67      	bgt.n	800b0a4 <_dtoa_r+0x94c>
 800afd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	dc41      	bgt.n	800b05e <_dtoa_r+0x906>
 800afda:	e063      	b.n	800b0a4 <_dtoa_r+0x94c>
 800afdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800afde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800afe2:	e746      	b.n	800ae72 <_dtoa_r+0x71a>
 800afe4:	9b07      	ldr	r3, [sp, #28]
 800afe6:	1e5c      	subs	r4, r3, #1
 800afe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afea:	42a3      	cmp	r3, r4
 800afec:	bfbf      	itttt	lt
 800afee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aff0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aff2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aff4:	1ae3      	sublt	r3, r4, r3
 800aff6:	bfb4      	ite	lt
 800aff8:	18d2      	addlt	r2, r2, r3
 800affa:	1b1c      	subge	r4, r3, r4
 800affc:	9b07      	ldr	r3, [sp, #28]
 800affe:	bfbc      	itt	lt
 800b000:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b002:	2400      	movlt	r4, #0
 800b004:	2b00      	cmp	r3, #0
 800b006:	bfb5      	itete	lt
 800b008:	eba8 0603 	sublt.w	r6, r8, r3
 800b00c:	9b07      	ldrge	r3, [sp, #28]
 800b00e:	2300      	movlt	r3, #0
 800b010:	4646      	movge	r6, r8
 800b012:	e730      	b.n	800ae76 <_dtoa_r+0x71e>
 800b014:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b016:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b018:	4646      	mov	r6, r8
 800b01a:	e735      	b.n	800ae88 <_dtoa_r+0x730>
 800b01c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b01e:	e75c      	b.n	800aeda <_dtoa_r+0x782>
 800b020:	2300      	movs	r3, #0
 800b022:	e788      	b.n	800af36 <_dtoa_r+0x7de>
 800b024:	3fe00000 	.word	0x3fe00000
 800b028:	40240000 	.word	0x40240000
 800b02c:	40140000 	.word	0x40140000
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	e780      	b.n	800af36 <_dtoa_r+0x7de>
 800b034:	2300      	movs	r3, #0
 800b036:	930a      	str	r3, [sp, #40]	@ 0x28
 800b038:	e782      	b.n	800af40 <_dtoa_r+0x7e8>
 800b03a:	d099      	beq.n	800af70 <_dtoa_r+0x818>
 800b03c:	9a08      	ldr	r2, [sp, #32]
 800b03e:	331c      	adds	r3, #28
 800b040:	441a      	add	r2, r3
 800b042:	4498      	add	r8, r3
 800b044:	441e      	add	r6, r3
 800b046:	9208      	str	r2, [sp, #32]
 800b048:	e792      	b.n	800af70 <_dtoa_r+0x818>
 800b04a:	4603      	mov	r3, r0
 800b04c:	e7f6      	b.n	800b03c <_dtoa_r+0x8e4>
 800b04e:	9b07      	ldr	r3, [sp, #28]
 800b050:	9704      	str	r7, [sp, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	dc20      	bgt.n	800b098 <_dtoa_r+0x940>
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	dd1e      	ble.n	800b09c <_dtoa_r+0x944>
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	f47f aec0 	bne.w	800ade6 <_dtoa_r+0x68e>
 800b066:	4621      	mov	r1, r4
 800b068:	2205      	movs	r2, #5
 800b06a:	4658      	mov	r0, fp
 800b06c:	f000 fa9a 	bl	800b5a4 <__multadd>
 800b070:	4601      	mov	r1, r0
 800b072:	4604      	mov	r4, r0
 800b074:	4648      	mov	r0, r9
 800b076:	f000 fcad 	bl	800b9d4 <__mcmp>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f77f aeb3 	ble.w	800ade6 <_dtoa_r+0x68e>
 800b080:	4656      	mov	r6, sl
 800b082:	2331      	movs	r3, #49	@ 0x31
 800b084:	f806 3b01 	strb.w	r3, [r6], #1
 800b088:	9b04      	ldr	r3, [sp, #16]
 800b08a:	3301      	adds	r3, #1
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	e6ae      	b.n	800adee <_dtoa_r+0x696>
 800b090:	9c07      	ldr	r4, [sp, #28]
 800b092:	9704      	str	r7, [sp, #16]
 800b094:	4625      	mov	r5, r4
 800b096:	e7f3      	b.n	800b080 <_dtoa_r+0x928>
 800b098:	9b07      	ldr	r3, [sp, #28]
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 8104 	beq.w	800b2ac <_dtoa_r+0xb54>
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	dd05      	ble.n	800b0b4 <_dtoa_r+0x95c>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4632      	mov	r2, r6
 800b0ac:	4658      	mov	r0, fp
 800b0ae:	f000 fc25 	bl	800b8fc <__lshift>
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d05a      	beq.n	800b170 <_dtoa_r+0xa18>
 800b0ba:	6869      	ldr	r1, [r5, #4]
 800b0bc:	4658      	mov	r0, fp
 800b0be:	f000 fa0f 	bl	800b4e0 <_Balloc>
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	b928      	cbnz	r0, 800b0d2 <_dtoa_r+0x97a>
 800b0c6:	4b84      	ldr	r3, [pc, #528]	@ (800b2d8 <_dtoa_r+0xb80>)
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b0ce:	f7ff bb5a 	b.w	800a786 <_dtoa_r+0x2e>
 800b0d2:	692a      	ldr	r2, [r5, #16]
 800b0d4:	3202      	adds	r2, #2
 800b0d6:	0092      	lsls	r2, r2, #2
 800b0d8:	f105 010c 	add.w	r1, r5, #12
 800b0dc:	300c      	adds	r0, #12
 800b0de:	f000 ffaf 	bl	800c040 <memcpy>
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4658      	mov	r0, fp
 800b0e8:	f000 fc08 	bl	800b8fc <__lshift>
 800b0ec:	f10a 0301 	add.w	r3, sl, #1
 800b0f0:	9307      	str	r3, [sp, #28]
 800b0f2:	9b00      	ldr	r3, [sp, #0]
 800b0f4:	4453      	add	r3, sl
 800b0f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0f8:	9b02      	ldr	r3, [sp, #8]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	462f      	mov	r7, r5
 800b100:	930a      	str	r3, [sp, #40]	@ 0x28
 800b102:	4605      	mov	r5, r0
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	4621      	mov	r1, r4
 800b108:	3b01      	subs	r3, #1
 800b10a:	4648      	mov	r0, r9
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	f7ff fa9a 	bl	800a646 <quorem>
 800b112:	4639      	mov	r1, r7
 800b114:	9002      	str	r0, [sp, #8]
 800b116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b11a:	4648      	mov	r0, r9
 800b11c:	f000 fc5a 	bl	800b9d4 <__mcmp>
 800b120:	462a      	mov	r2, r5
 800b122:	9008      	str	r0, [sp, #32]
 800b124:	4621      	mov	r1, r4
 800b126:	4658      	mov	r0, fp
 800b128:	f000 fc70 	bl	800ba0c <__mdiff>
 800b12c:	68c2      	ldr	r2, [r0, #12]
 800b12e:	4606      	mov	r6, r0
 800b130:	bb02      	cbnz	r2, 800b174 <_dtoa_r+0xa1c>
 800b132:	4601      	mov	r1, r0
 800b134:	4648      	mov	r0, r9
 800b136:	f000 fc4d 	bl	800b9d4 <__mcmp>
 800b13a:	4602      	mov	r2, r0
 800b13c:	4631      	mov	r1, r6
 800b13e:	4658      	mov	r0, fp
 800b140:	920e      	str	r2, [sp, #56]	@ 0x38
 800b142:	f000 fa0d 	bl	800b560 <_Bfree>
 800b146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b14a:	9e07      	ldr	r6, [sp, #28]
 800b14c:	ea43 0102 	orr.w	r1, r3, r2
 800b150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b152:	4319      	orrs	r1, r3
 800b154:	d110      	bne.n	800b178 <_dtoa_r+0xa20>
 800b156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b15a:	d029      	beq.n	800b1b0 <_dtoa_r+0xa58>
 800b15c:	9b08      	ldr	r3, [sp, #32]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	dd02      	ble.n	800b168 <_dtoa_r+0xa10>
 800b162:	9b02      	ldr	r3, [sp, #8]
 800b164:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b168:	9b00      	ldr	r3, [sp, #0]
 800b16a:	f883 8000 	strb.w	r8, [r3]
 800b16e:	e63f      	b.n	800adf0 <_dtoa_r+0x698>
 800b170:	4628      	mov	r0, r5
 800b172:	e7bb      	b.n	800b0ec <_dtoa_r+0x994>
 800b174:	2201      	movs	r2, #1
 800b176:	e7e1      	b.n	800b13c <_dtoa_r+0x9e4>
 800b178:	9b08      	ldr	r3, [sp, #32]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	db04      	blt.n	800b188 <_dtoa_r+0xa30>
 800b17e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b180:	430b      	orrs	r3, r1
 800b182:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b184:	430b      	orrs	r3, r1
 800b186:	d120      	bne.n	800b1ca <_dtoa_r+0xa72>
 800b188:	2a00      	cmp	r2, #0
 800b18a:	dded      	ble.n	800b168 <_dtoa_r+0xa10>
 800b18c:	4649      	mov	r1, r9
 800b18e:	2201      	movs	r2, #1
 800b190:	4658      	mov	r0, fp
 800b192:	f000 fbb3 	bl	800b8fc <__lshift>
 800b196:	4621      	mov	r1, r4
 800b198:	4681      	mov	r9, r0
 800b19a:	f000 fc1b 	bl	800b9d4 <__mcmp>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	dc03      	bgt.n	800b1aa <_dtoa_r+0xa52>
 800b1a2:	d1e1      	bne.n	800b168 <_dtoa_r+0xa10>
 800b1a4:	f018 0f01 	tst.w	r8, #1
 800b1a8:	d0de      	beq.n	800b168 <_dtoa_r+0xa10>
 800b1aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1ae:	d1d8      	bne.n	800b162 <_dtoa_r+0xa0a>
 800b1b0:	9a00      	ldr	r2, [sp, #0]
 800b1b2:	2339      	movs	r3, #57	@ 0x39
 800b1b4:	7013      	strb	r3, [r2, #0]
 800b1b6:	4633      	mov	r3, r6
 800b1b8:	461e      	mov	r6, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b1c0:	2a39      	cmp	r2, #57	@ 0x39
 800b1c2:	d052      	beq.n	800b26a <_dtoa_r+0xb12>
 800b1c4:	3201      	adds	r2, #1
 800b1c6:	701a      	strb	r2, [r3, #0]
 800b1c8:	e612      	b.n	800adf0 <_dtoa_r+0x698>
 800b1ca:	2a00      	cmp	r2, #0
 800b1cc:	dd07      	ble.n	800b1de <_dtoa_r+0xa86>
 800b1ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1d2:	d0ed      	beq.n	800b1b0 <_dtoa_r+0xa58>
 800b1d4:	9a00      	ldr	r2, [sp, #0]
 800b1d6:	f108 0301 	add.w	r3, r8, #1
 800b1da:	7013      	strb	r3, [r2, #0]
 800b1dc:	e608      	b.n	800adf0 <_dtoa_r+0x698>
 800b1de:	9b07      	ldr	r3, [sp, #28]
 800b1e0:	9a07      	ldr	r2, [sp, #28]
 800b1e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d028      	beq.n	800b23e <_dtoa_r+0xae6>
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	220a      	movs	r2, #10
 800b1f2:	4658      	mov	r0, fp
 800b1f4:	f000 f9d6 	bl	800b5a4 <__multadd>
 800b1f8:	42af      	cmp	r7, r5
 800b1fa:	4681      	mov	r9, r0
 800b1fc:	f04f 0300 	mov.w	r3, #0
 800b200:	f04f 020a 	mov.w	r2, #10
 800b204:	4639      	mov	r1, r7
 800b206:	4658      	mov	r0, fp
 800b208:	d107      	bne.n	800b21a <_dtoa_r+0xac2>
 800b20a:	f000 f9cb 	bl	800b5a4 <__multadd>
 800b20e:	4607      	mov	r7, r0
 800b210:	4605      	mov	r5, r0
 800b212:	9b07      	ldr	r3, [sp, #28]
 800b214:	3301      	adds	r3, #1
 800b216:	9307      	str	r3, [sp, #28]
 800b218:	e774      	b.n	800b104 <_dtoa_r+0x9ac>
 800b21a:	f000 f9c3 	bl	800b5a4 <__multadd>
 800b21e:	4629      	mov	r1, r5
 800b220:	4607      	mov	r7, r0
 800b222:	2300      	movs	r3, #0
 800b224:	220a      	movs	r2, #10
 800b226:	4658      	mov	r0, fp
 800b228:	f000 f9bc 	bl	800b5a4 <__multadd>
 800b22c:	4605      	mov	r5, r0
 800b22e:	e7f0      	b.n	800b212 <_dtoa_r+0xaba>
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	bfcc      	ite	gt
 800b236:	461e      	movgt	r6, r3
 800b238:	2601      	movle	r6, #1
 800b23a:	4456      	add	r6, sl
 800b23c:	2700      	movs	r7, #0
 800b23e:	4649      	mov	r1, r9
 800b240:	2201      	movs	r2, #1
 800b242:	4658      	mov	r0, fp
 800b244:	f000 fb5a 	bl	800b8fc <__lshift>
 800b248:	4621      	mov	r1, r4
 800b24a:	4681      	mov	r9, r0
 800b24c:	f000 fbc2 	bl	800b9d4 <__mcmp>
 800b250:	2800      	cmp	r0, #0
 800b252:	dcb0      	bgt.n	800b1b6 <_dtoa_r+0xa5e>
 800b254:	d102      	bne.n	800b25c <_dtoa_r+0xb04>
 800b256:	f018 0f01 	tst.w	r8, #1
 800b25a:	d1ac      	bne.n	800b1b6 <_dtoa_r+0xa5e>
 800b25c:	4633      	mov	r3, r6
 800b25e:	461e      	mov	r6, r3
 800b260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b264:	2a30      	cmp	r2, #48	@ 0x30
 800b266:	d0fa      	beq.n	800b25e <_dtoa_r+0xb06>
 800b268:	e5c2      	b.n	800adf0 <_dtoa_r+0x698>
 800b26a:	459a      	cmp	sl, r3
 800b26c:	d1a4      	bne.n	800b1b8 <_dtoa_r+0xa60>
 800b26e:	9b04      	ldr	r3, [sp, #16]
 800b270:	3301      	adds	r3, #1
 800b272:	9304      	str	r3, [sp, #16]
 800b274:	2331      	movs	r3, #49	@ 0x31
 800b276:	f88a 3000 	strb.w	r3, [sl]
 800b27a:	e5b9      	b.n	800adf0 <_dtoa_r+0x698>
 800b27c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b27e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b2dc <_dtoa_r+0xb84>
 800b282:	b11b      	cbz	r3, 800b28c <_dtoa_r+0xb34>
 800b284:	f10a 0308 	add.w	r3, sl, #8
 800b288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	4650      	mov	r0, sl
 800b28e:	b019      	add	sp, #100	@ 0x64
 800b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b296:	2b01      	cmp	r3, #1
 800b298:	f77f ae37 	ble.w	800af0a <_dtoa_r+0x7b2>
 800b29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2a0:	2001      	movs	r0, #1
 800b2a2:	e655      	b.n	800af50 <_dtoa_r+0x7f8>
 800b2a4:	9b00      	ldr	r3, [sp, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f77f aed6 	ble.w	800b058 <_dtoa_r+0x900>
 800b2ac:	4656      	mov	r6, sl
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	4648      	mov	r0, r9
 800b2b2:	f7ff f9c8 	bl	800a646 <quorem>
 800b2b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2ba:	f806 8b01 	strb.w	r8, [r6], #1
 800b2be:	9b00      	ldr	r3, [sp, #0]
 800b2c0:	eba6 020a 	sub.w	r2, r6, sl
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	ddb3      	ble.n	800b230 <_dtoa_r+0xad8>
 800b2c8:	4649      	mov	r1, r9
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	220a      	movs	r2, #10
 800b2ce:	4658      	mov	r0, fp
 800b2d0:	f000 f968 	bl	800b5a4 <__multadd>
 800b2d4:	4681      	mov	r9, r0
 800b2d6:	e7ea      	b.n	800b2ae <_dtoa_r+0xb56>
 800b2d8:	0802066c 	.word	0x0802066c
 800b2dc:	080205f0 	.word	0x080205f0

0800b2e0 <_free_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	2900      	cmp	r1, #0
 800b2e6:	d041      	beq.n	800b36c <_free_r+0x8c>
 800b2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2ec:	1f0c      	subs	r4, r1, #4
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bfb8      	it	lt
 800b2f2:	18e4      	addlt	r4, r4, r3
 800b2f4:	f000 f8e8 	bl	800b4c8 <__malloc_lock>
 800b2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b370 <_free_r+0x90>)
 800b2fa:	6813      	ldr	r3, [r2, #0]
 800b2fc:	b933      	cbnz	r3, 800b30c <_free_r+0x2c>
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	6014      	str	r4, [r2, #0]
 800b302:	4628      	mov	r0, r5
 800b304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b308:	f000 b8e4 	b.w	800b4d4 <__malloc_unlock>
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	d908      	bls.n	800b322 <_free_r+0x42>
 800b310:	6820      	ldr	r0, [r4, #0]
 800b312:	1821      	adds	r1, r4, r0
 800b314:	428b      	cmp	r3, r1
 800b316:	bf01      	itttt	eq
 800b318:	6819      	ldreq	r1, [r3, #0]
 800b31a:	685b      	ldreq	r3, [r3, #4]
 800b31c:	1809      	addeq	r1, r1, r0
 800b31e:	6021      	streq	r1, [r4, #0]
 800b320:	e7ed      	b.n	800b2fe <_free_r+0x1e>
 800b322:	461a      	mov	r2, r3
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	b10b      	cbz	r3, 800b32c <_free_r+0x4c>
 800b328:	42a3      	cmp	r3, r4
 800b32a:	d9fa      	bls.n	800b322 <_free_r+0x42>
 800b32c:	6811      	ldr	r1, [r2, #0]
 800b32e:	1850      	adds	r0, r2, r1
 800b330:	42a0      	cmp	r0, r4
 800b332:	d10b      	bne.n	800b34c <_free_r+0x6c>
 800b334:	6820      	ldr	r0, [r4, #0]
 800b336:	4401      	add	r1, r0
 800b338:	1850      	adds	r0, r2, r1
 800b33a:	4283      	cmp	r3, r0
 800b33c:	6011      	str	r1, [r2, #0]
 800b33e:	d1e0      	bne.n	800b302 <_free_r+0x22>
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	6053      	str	r3, [r2, #4]
 800b346:	4408      	add	r0, r1
 800b348:	6010      	str	r0, [r2, #0]
 800b34a:	e7da      	b.n	800b302 <_free_r+0x22>
 800b34c:	d902      	bls.n	800b354 <_free_r+0x74>
 800b34e:	230c      	movs	r3, #12
 800b350:	602b      	str	r3, [r5, #0]
 800b352:	e7d6      	b.n	800b302 <_free_r+0x22>
 800b354:	6820      	ldr	r0, [r4, #0]
 800b356:	1821      	adds	r1, r4, r0
 800b358:	428b      	cmp	r3, r1
 800b35a:	bf04      	itt	eq
 800b35c:	6819      	ldreq	r1, [r3, #0]
 800b35e:	685b      	ldreq	r3, [r3, #4]
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	bf04      	itt	eq
 800b364:	1809      	addeq	r1, r1, r0
 800b366:	6021      	streq	r1, [r4, #0]
 800b368:	6054      	str	r4, [r2, #4]
 800b36a:	e7ca      	b.n	800b302 <_free_r+0x22>
 800b36c:	bd38      	pop	{r3, r4, r5, pc}
 800b36e:	bf00      	nop
 800b370:	20018e74 	.word	0x20018e74

0800b374 <malloc>:
 800b374:	4b02      	ldr	r3, [pc, #8]	@ (800b380 <malloc+0xc>)
 800b376:	4601      	mov	r1, r0
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f000 b825 	b.w	800b3c8 <_malloc_r>
 800b37e:	bf00      	nop
 800b380:	20000018 	.word	0x20000018

0800b384 <sbrk_aligned>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	4e0f      	ldr	r6, [pc, #60]	@ (800b3c4 <sbrk_aligned+0x40>)
 800b388:	460c      	mov	r4, r1
 800b38a:	6831      	ldr	r1, [r6, #0]
 800b38c:	4605      	mov	r5, r0
 800b38e:	b911      	cbnz	r1, 800b396 <sbrk_aligned+0x12>
 800b390:	f000 fe46 	bl	800c020 <_sbrk_r>
 800b394:	6030      	str	r0, [r6, #0]
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 fe41 	bl	800c020 <_sbrk_r>
 800b39e:	1c43      	adds	r3, r0, #1
 800b3a0:	d103      	bne.n	800b3aa <sbrk_aligned+0x26>
 800b3a2:	f04f 34ff 	mov.w	r4, #4294967295
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	bd70      	pop	{r4, r5, r6, pc}
 800b3aa:	1cc4      	adds	r4, r0, #3
 800b3ac:	f024 0403 	bic.w	r4, r4, #3
 800b3b0:	42a0      	cmp	r0, r4
 800b3b2:	d0f8      	beq.n	800b3a6 <sbrk_aligned+0x22>
 800b3b4:	1a21      	subs	r1, r4, r0
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f000 fe32 	bl	800c020 <_sbrk_r>
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d1f2      	bne.n	800b3a6 <sbrk_aligned+0x22>
 800b3c0:	e7ef      	b.n	800b3a2 <sbrk_aligned+0x1e>
 800b3c2:	bf00      	nop
 800b3c4:	20018e70 	.word	0x20018e70

0800b3c8 <_malloc_r>:
 800b3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3cc:	1ccd      	adds	r5, r1, #3
 800b3ce:	f025 0503 	bic.w	r5, r5, #3
 800b3d2:	3508      	adds	r5, #8
 800b3d4:	2d0c      	cmp	r5, #12
 800b3d6:	bf38      	it	cc
 800b3d8:	250c      	movcc	r5, #12
 800b3da:	2d00      	cmp	r5, #0
 800b3dc:	4606      	mov	r6, r0
 800b3de:	db01      	blt.n	800b3e4 <_malloc_r+0x1c>
 800b3e0:	42a9      	cmp	r1, r5
 800b3e2:	d904      	bls.n	800b3ee <_malloc_r+0x26>
 800b3e4:	230c      	movs	r3, #12
 800b3e6:	6033      	str	r3, [r6, #0]
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b4c4 <_malloc_r+0xfc>
 800b3f2:	f000 f869 	bl	800b4c8 <__malloc_lock>
 800b3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3fa:	461c      	mov	r4, r3
 800b3fc:	bb44      	cbnz	r4, 800b450 <_malloc_r+0x88>
 800b3fe:	4629      	mov	r1, r5
 800b400:	4630      	mov	r0, r6
 800b402:	f7ff ffbf 	bl	800b384 <sbrk_aligned>
 800b406:	1c43      	adds	r3, r0, #1
 800b408:	4604      	mov	r4, r0
 800b40a:	d158      	bne.n	800b4be <_malloc_r+0xf6>
 800b40c:	f8d8 4000 	ldr.w	r4, [r8]
 800b410:	4627      	mov	r7, r4
 800b412:	2f00      	cmp	r7, #0
 800b414:	d143      	bne.n	800b49e <_malloc_r+0xd6>
 800b416:	2c00      	cmp	r4, #0
 800b418:	d04b      	beq.n	800b4b2 <_malloc_r+0xea>
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	4639      	mov	r1, r7
 800b41e:	4630      	mov	r0, r6
 800b420:	eb04 0903 	add.w	r9, r4, r3
 800b424:	f000 fdfc 	bl	800c020 <_sbrk_r>
 800b428:	4581      	cmp	r9, r0
 800b42a:	d142      	bne.n	800b4b2 <_malloc_r+0xea>
 800b42c:	6821      	ldr	r1, [r4, #0]
 800b42e:	1a6d      	subs	r5, r5, r1
 800b430:	4629      	mov	r1, r5
 800b432:	4630      	mov	r0, r6
 800b434:	f7ff ffa6 	bl	800b384 <sbrk_aligned>
 800b438:	3001      	adds	r0, #1
 800b43a:	d03a      	beq.n	800b4b2 <_malloc_r+0xea>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	442b      	add	r3, r5
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	f8d8 3000 	ldr.w	r3, [r8]
 800b446:	685a      	ldr	r2, [r3, #4]
 800b448:	bb62      	cbnz	r2, 800b4a4 <_malloc_r+0xdc>
 800b44a:	f8c8 7000 	str.w	r7, [r8]
 800b44e:	e00f      	b.n	800b470 <_malloc_r+0xa8>
 800b450:	6822      	ldr	r2, [r4, #0]
 800b452:	1b52      	subs	r2, r2, r5
 800b454:	d420      	bmi.n	800b498 <_malloc_r+0xd0>
 800b456:	2a0b      	cmp	r2, #11
 800b458:	d917      	bls.n	800b48a <_malloc_r+0xc2>
 800b45a:	1961      	adds	r1, r4, r5
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	6025      	str	r5, [r4, #0]
 800b460:	bf18      	it	ne
 800b462:	6059      	strne	r1, [r3, #4]
 800b464:	6863      	ldr	r3, [r4, #4]
 800b466:	bf08      	it	eq
 800b468:	f8c8 1000 	streq.w	r1, [r8]
 800b46c:	5162      	str	r2, [r4, r5]
 800b46e:	604b      	str	r3, [r1, #4]
 800b470:	4630      	mov	r0, r6
 800b472:	f000 f82f 	bl	800b4d4 <__malloc_unlock>
 800b476:	f104 000b 	add.w	r0, r4, #11
 800b47a:	1d23      	adds	r3, r4, #4
 800b47c:	f020 0007 	bic.w	r0, r0, #7
 800b480:	1ac2      	subs	r2, r0, r3
 800b482:	bf1c      	itt	ne
 800b484:	1a1b      	subne	r3, r3, r0
 800b486:	50a3      	strne	r3, [r4, r2]
 800b488:	e7af      	b.n	800b3ea <_malloc_r+0x22>
 800b48a:	6862      	ldr	r2, [r4, #4]
 800b48c:	42a3      	cmp	r3, r4
 800b48e:	bf0c      	ite	eq
 800b490:	f8c8 2000 	streq.w	r2, [r8]
 800b494:	605a      	strne	r2, [r3, #4]
 800b496:	e7eb      	b.n	800b470 <_malloc_r+0xa8>
 800b498:	4623      	mov	r3, r4
 800b49a:	6864      	ldr	r4, [r4, #4]
 800b49c:	e7ae      	b.n	800b3fc <_malloc_r+0x34>
 800b49e:	463c      	mov	r4, r7
 800b4a0:	687f      	ldr	r7, [r7, #4]
 800b4a2:	e7b6      	b.n	800b412 <_malloc_r+0x4a>
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	42a3      	cmp	r3, r4
 800b4aa:	d1fb      	bne.n	800b4a4 <_malloc_r+0xdc>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	6053      	str	r3, [r2, #4]
 800b4b0:	e7de      	b.n	800b470 <_malloc_r+0xa8>
 800b4b2:	230c      	movs	r3, #12
 800b4b4:	6033      	str	r3, [r6, #0]
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	f000 f80c 	bl	800b4d4 <__malloc_unlock>
 800b4bc:	e794      	b.n	800b3e8 <_malloc_r+0x20>
 800b4be:	6005      	str	r5, [r0, #0]
 800b4c0:	e7d6      	b.n	800b470 <_malloc_r+0xa8>
 800b4c2:	bf00      	nop
 800b4c4:	20018e74 	.word	0x20018e74

0800b4c8 <__malloc_lock>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	@ (800b4d0 <__malloc_lock+0x8>)
 800b4ca:	f7ff b8ba 	b.w	800a642 <__retarget_lock_acquire_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	20018e6c 	.word	0x20018e6c

0800b4d4 <__malloc_unlock>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	@ (800b4dc <__malloc_unlock+0x8>)
 800b4d6:	f7ff b8b5 	b.w	800a644 <__retarget_lock_release_recursive>
 800b4da:	bf00      	nop
 800b4dc:	20018e6c 	.word	0x20018e6c

0800b4e0 <_Balloc>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	69c6      	ldr	r6, [r0, #28]
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	460d      	mov	r5, r1
 800b4e8:	b976      	cbnz	r6, 800b508 <_Balloc+0x28>
 800b4ea:	2010      	movs	r0, #16
 800b4ec:	f7ff ff42 	bl	800b374 <malloc>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	61e0      	str	r0, [r4, #28]
 800b4f4:	b920      	cbnz	r0, 800b500 <_Balloc+0x20>
 800b4f6:	4b18      	ldr	r3, [pc, #96]	@ (800b558 <_Balloc+0x78>)
 800b4f8:	4818      	ldr	r0, [pc, #96]	@ (800b55c <_Balloc+0x7c>)
 800b4fa:	216b      	movs	r1, #107	@ 0x6b
 800b4fc:	f000 fdae 	bl	800c05c <__assert_func>
 800b500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b504:	6006      	str	r6, [r0, #0]
 800b506:	60c6      	str	r6, [r0, #12]
 800b508:	69e6      	ldr	r6, [r4, #28]
 800b50a:	68f3      	ldr	r3, [r6, #12]
 800b50c:	b183      	cbz	r3, 800b530 <_Balloc+0x50>
 800b50e:	69e3      	ldr	r3, [r4, #28]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b516:	b9b8      	cbnz	r0, 800b548 <_Balloc+0x68>
 800b518:	2101      	movs	r1, #1
 800b51a:	fa01 f605 	lsl.w	r6, r1, r5
 800b51e:	1d72      	adds	r2, r6, #5
 800b520:	0092      	lsls	r2, r2, #2
 800b522:	4620      	mov	r0, r4
 800b524:	f000 fdb8 	bl	800c098 <_calloc_r>
 800b528:	b160      	cbz	r0, 800b544 <_Balloc+0x64>
 800b52a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b52e:	e00e      	b.n	800b54e <_Balloc+0x6e>
 800b530:	2221      	movs	r2, #33	@ 0x21
 800b532:	2104      	movs	r1, #4
 800b534:	4620      	mov	r0, r4
 800b536:	f000 fdaf 	bl	800c098 <_calloc_r>
 800b53a:	69e3      	ldr	r3, [r4, #28]
 800b53c:	60f0      	str	r0, [r6, #12]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1e4      	bne.n	800b50e <_Balloc+0x2e>
 800b544:	2000      	movs	r0, #0
 800b546:	bd70      	pop	{r4, r5, r6, pc}
 800b548:	6802      	ldr	r2, [r0, #0]
 800b54a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b54e:	2300      	movs	r3, #0
 800b550:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b554:	e7f7      	b.n	800b546 <_Balloc+0x66>
 800b556:	bf00      	nop
 800b558:	080205fd 	.word	0x080205fd
 800b55c:	0802067d 	.word	0x0802067d

0800b560 <_Bfree>:
 800b560:	b570      	push	{r4, r5, r6, lr}
 800b562:	69c6      	ldr	r6, [r0, #28]
 800b564:	4605      	mov	r5, r0
 800b566:	460c      	mov	r4, r1
 800b568:	b976      	cbnz	r6, 800b588 <_Bfree+0x28>
 800b56a:	2010      	movs	r0, #16
 800b56c:	f7ff ff02 	bl	800b374 <malloc>
 800b570:	4602      	mov	r2, r0
 800b572:	61e8      	str	r0, [r5, #28]
 800b574:	b920      	cbnz	r0, 800b580 <_Bfree+0x20>
 800b576:	4b09      	ldr	r3, [pc, #36]	@ (800b59c <_Bfree+0x3c>)
 800b578:	4809      	ldr	r0, [pc, #36]	@ (800b5a0 <_Bfree+0x40>)
 800b57a:	218f      	movs	r1, #143	@ 0x8f
 800b57c:	f000 fd6e 	bl	800c05c <__assert_func>
 800b580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b584:	6006      	str	r6, [r0, #0]
 800b586:	60c6      	str	r6, [r0, #12]
 800b588:	b13c      	cbz	r4, 800b59a <_Bfree+0x3a>
 800b58a:	69eb      	ldr	r3, [r5, #28]
 800b58c:	6862      	ldr	r2, [r4, #4]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b594:	6021      	str	r1, [r4, #0]
 800b596:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	080205fd 	.word	0x080205fd
 800b5a0:	0802067d 	.word	0x0802067d

0800b5a4 <__multadd>:
 800b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a8:	690d      	ldr	r5, [r1, #16]
 800b5aa:	4607      	mov	r7, r0
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	461e      	mov	r6, r3
 800b5b0:	f101 0c14 	add.w	ip, r1, #20
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b5ba:	b299      	uxth	r1, r3
 800b5bc:	fb02 6101 	mla	r1, r2, r1, r6
 800b5c0:	0c1e      	lsrs	r6, r3, #16
 800b5c2:	0c0b      	lsrs	r3, r1, #16
 800b5c4:	fb02 3306 	mla	r3, r2, r6, r3
 800b5c8:	b289      	uxth	r1, r1
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5d0:	4285      	cmp	r5, r0
 800b5d2:	f84c 1b04 	str.w	r1, [ip], #4
 800b5d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5da:	dcec      	bgt.n	800b5b6 <__multadd+0x12>
 800b5dc:	b30e      	cbz	r6, 800b622 <__multadd+0x7e>
 800b5de:	68a3      	ldr	r3, [r4, #8]
 800b5e0:	42ab      	cmp	r3, r5
 800b5e2:	dc19      	bgt.n	800b618 <__multadd+0x74>
 800b5e4:	6861      	ldr	r1, [r4, #4]
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	3101      	adds	r1, #1
 800b5ea:	f7ff ff79 	bl	800b4e0 <_Balloc>
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	b928      	cbnz	r0, 800b5fe <__multadd+0x5a>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b628 <__multadd+0x84>)
 800b5f6:	480d      	ldr	r0, [pc, #52]	@ (800b62c <__multadd+0x88>)
 800b5f8:	21ba      	movs	r1, #186	@ 0xba
 800b5fa:	f000 fd2f 	bl	800c05c <__assert_func>
 800b5fe:	6922      	ldr	r2, [r4, #16]
 800b600:	3202      	adds	r2, #2
 800b602:	f104 010c 	add.w	r1, r4, #12
 800b606:	0092      	lsls	r2, r2, #2
 800b608:	300c      	adds	r0, #12
 800b60a:	f000 fd19 	bl	800c040 <memcpy>
 800b60e:	4621      	mov	r1, r4
 800b610:	4638      	mov	r0, r7
 800b612:	f7ff ffa5 	bl	800b560 <_Bfree>
 800b616:	4644      	mov	r4, r8
 800b618:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b61c:	3501      	adds	r5, #1
 800b61e:	615e      	str	r6, [r3, #20]
 800b620:	6125      	str	r5, [r4, #16]
 800b622:	4620      	mov	r0, r4
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	0802066c 	.word	0x0802066c
 800b62c:	0802067d 	.word	0x0802067d

0800b630 <__hi0bits>:
 800b630:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b634:	4603      	mov	r3, r0
 800b636:	bf36      	itet	cc
 800b638:	0403      	lslcc	r3, r0, #16
 800b63a:	2000      	movcs	r0, #0
 800b63c:	2010      	movcc	r0, #16
 800b63e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b642:	bf3c      	itt	cc
 800b644:	021b      	lslcc	r3, r3, #8
 800b646:	3008      	addcc	r0, #8
 800b648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b64c:	bf3c      	itt	cc
 800b64e:	011b      	lslcc	r3, r3, #4
 800b650:	3004      	addcc	r0, #4
 800b652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b656:	bf3c      	itt	cc
 800b658:	009b      	lslcc	r3, r3, #2
 800b65a:	3002      	addcc	r0, #2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	db05      	blt.n	800b66c <__hi0bits+0x3c>
 800b660:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b664:	f100 0001 	add.w	r0, r0, #1
 800b668:	bf08      	it	eq
 800b66a:	2020      	moveq	r0, #32
 800b66c:	4770      	bx	lr

0800b66e <__lo0bits>:
 800b66e:	6803      	ldr	r3, [r0, #0]
 800b670:	4602      	mov	r2, r0
 800b672:	f013 0007 	ands.w	r0, r3, #7
 800b676:	d00b      	beq.n	800b690 <__lo0bits+0x22>
 800b678:	07d9      	lsls	r1, r3, #31
 800b67a:	d421      	bmi.n	800b6c0 <__lo0bits+0x52>
 800b67c:	0798      	lsls	r0, r3, #30
 800b67e:	bf49      	itett	mi
 800b680:	085b      	lsrmi	r3, r3, #1
 800b682:	089b      	lsrpl	r3, r3, #2
 800b684:	2001      	movmi	r0, #1
 800b686:	6013      	strmi	r3, [r2, #0]
 800b688:	bf5c      	itt	pl
 800b68a:	6013      	strpl	r3, [r2, #0]
 800b68c:	2002      	movpl	r0, #2
 800b68e:	4770      	bx	lr
 800b690:	b299      	uxth	r1, r3
 800b692:	b909      	cbnz	r1, 800b698 <__lo0bits+0x2a>
 800b694:	0c1b      	lsrs	r3, r3, #16
 800b696:	2010      	movs	r0, #16
 800b698:	b2d9      	uxtb	r1, r3
 800b69a:	b909      	cbnz	r1, 800b6a0 <__lo0bits+0x32>
 800b69c:	3008      	adds	r0, #8
 800b69e:	0a1b      	lsrs	r3, r3, #8
 800b6a0:	0719      	lsls	r1, r3, #28
 800b6a2:	bf04      	itt	eq
 800b6a4:	091b      	lsreq	r3, r3, #4
 800b6a6:	3004      	addeq	r0, #4
 800b6a8:	0799      	lsls	r1, r3, #30
 800b6aa:	bf04      	itt	eq
 800b6ac:	089b      	lsreq	r3, r3, #2
 800b6ae:	3002      	addeq	r0, #2
 800b6b0:	07d9      	lsls	r1, r3, #31
 800b6b2:	d403      	bmi.n	800b6bc <__lo0bits+0x4e>
 800b6b4:	085b      	lsrs	r3, r3, #1
 800b6b6:	f100 0001 	add.w	r0, r0, #1
 800b6ba:	d003      	beq.n	800b6c4 <__lo0bits+0x56>
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	4770      	bx	lr
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	4770      	bx	lr
 800b6c4:	2020      	movs	r0, #32
 800b6c6:	4770      	bx	lr

0800b6c8 <__i2b>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	f7ff ff07 	bl	800b4e0 <_Balloc>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	b928      	cbnz	r0, 800b6e2 <__i2b+0x1a>
 800b6d6:	4b05      	ldr	r3, [pc, #20]	@ (800b6ec <__i2b+0x24>)
 800b6d8:	4805      	ldr	r0, [pc, #20]	@ (800b6f0 <__i2b+0x28>)
 800b6da:	f240 1145 	movw	r1, #325	@ 0x145
 800b6de:	f000 fcbd 	bl	800c05c <__assert_func>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	6144      	str	r4, [r0, #20]
 800b6e6:	6103      	str	r3, [r0, #16]
 800b6e8:	bd10      	pop	{r4, pc}
 800b6ea:	bf00      	nop
 800b6ec:	0802066c 	.word	0x0802066c
 800b6f0:	0802067d 	.word	0x0802067d

0800b6f4 <__multiply>:
 800b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	4614      	mov	r4, r2
 800b6fa:	690a      	ldr	r2, [r1, #16]
 800b6fc:	6923      	ldr	r3, [r4, #16]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	bfa8      	it	ge
 800b702:	4623      	movge	r3, r4
 800b704:	460f      	mov	r7, r1
 800b706:	bfa4      	itt	ge
 800b708:	460c      	movge	r4, r1
 800b70a:	461f      	movge	r7, r3
 800b70c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b710:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b714:	68a3      	ldr	r3, [r4, #8]
 800b716:	6861      	ldr	r1, [r4, #4]
 800b718:	eb0a 0609 	add.w	r6, sl, r9
 800b71c:	42b3      	cmp	r3, r6
 800b71e:	b085      	sub	sp, #20
 800b720:	bfb8      	it	lt
 800b722:	3101      	addlt	r1, #1
 800b724:	f7ff fedc 	bl	800b4e0 <_Balloc>
 800b728:	b930      	cbnz	r0, 800b738 <__multiply+0x44>
 800b72a:	4602      	mov	r2, r0
 800b72c:	4b44      	ldr	r3, [pc, #272]	@ (800b840 <__multiply+0x14c>)
 800b72e:	4845      	ldr	r0, [pc, #276]	@ (800b844 <__multiply+0x150>)
 800b730:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b734:	f000 fc92 	bl	800c05c <__assert_func>
 800b738:	f100 0514 	add.w	r5, r0, #20
 800b73c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b740:	462b      	mov	r3, r5
 800b742:	2200      	movs	r2, #0
 800b744:	4543      	cmp	r3, r8
 800b746:	d321      	bcc.n	800b78c <__multiply+0x98>
 800b748:	f107 0114 	add.w	r1, r7, #20
 800b74c:	f104 0214 	add.w	r2, r4, #20
 800b750:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b754:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b758:	9302      	str	r3, [sp, #8]
 800b75a:	1b13      	subs	r3, r2, r4
 800b75c:	3b15      	subs	r3, #21
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	3304      	adds	r3, #4
 800b764:	f104 0715 	add.w	r7, r4, #21
 800b768:	42ba      	cmp	r2, r7
 800b76a:	bf38      	it	cc
 800b76c:	2304      	movcc	r3, #4
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	9b02      	ldr	r3, [sp, #8]
 800b772:	9103      	str	r1, [sp, #12]
 800b774:	428b      	cmp	r3, r1
 800b776:	d80c      	bhi.n	800b792 <__multiply+0x9e>
 800b778:	2e00      	cmp	r6, #0
 800b77a:	dd03      	ble.n	800b784 <__multiply+0x90>
 800b77c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b780:	2b00      	cmp	r3, #0
 800b782:	d05b      	beq.n	800b83c <__multiply+0x148>
 800b784:	6106      	str	r6, [r0, #16]
 800b786:	b005      	add	sp, #20
 800b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78c:	f843 2b04 	str.w	r2, [r3], #4
 800b790:	e7d8      	b.n	800b744 <__multiply+0x50>
 800b792:	f8b1 a000 	ldrh.w	sl, [r1]
 800b796:	f1ba 0f00 	cmp.w	sl, #0
 800b79a:	d024      	beq.n	800b7e6 <__multiply+0xf2>
 800b79c:	f104 0e14 	add.w	lr, r4, #20
 800b7a0:	46a9      	mov	r9, r5
 800b7a2:	f04f 0c00 	mov.w	ip, #0
 800b7a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b7aa:	f8d9 3000 	ldr.w	r3, [r9]
 800b7ae:	fa1f fb87 	uxth.w	fp, r7
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b7b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b7bc:	f8d9 7000 	ldr.w	r7, [r9]
 800b7c0:	4463      	add	r3, ip
 800b7c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b7c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800b7ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7d4:	4572      	cmp	r2, lr
 800b7d6:	f849 3b04 	str.w	r3, [r9], #4
 800b7da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b7de:	d8e2      	bhi.n	800b7a6 <__multiply+0xb2>
 800b7e0:	9b01      	ldr	r3, [sp, #4]
 800b7e2:	f845 c003 	str.w	ip, [r5, r3]
 800b7e6:	9b03      	ldr	r3, [sp, #12]
 800b7e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b7ec:	3104      	adds	r1, #4
 800b7ee:	f1b9 0f00 	cmp.w	r9, #0
 800b7f2:	d021      	beq.n	800b838 <__multiply+0x144>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	f104 0c14 	add.w	ip, r4, #20
 800b7fa:	46ae      	mov	lr, r5
 800b7fc:	f04f 0a00 	mov.w	sl, #0
 800b800:	f8bc b000 	ldrh.w	fp, [ip]
 800b804:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b808:	fb09 770b 	mla	r7, r9, fp, r7
 800b80c:	4457      	add	r7, sl
 800b80e:	b29b      	uxth	r3, r3
 800b810:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b814:	f84e 3b04 	str.w	r3, [lr], #4
 800b818:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b81c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b820:	f8be 3000 	ldrh.w	r3, [lr]
 800b824:	fb09 330a 	mla	r3, r9, sl, r3
 800b828:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b82c:	4562      	cmp	r2, ip
 800b82e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b832:	d8e5      	bhi.n	800b800 <__multiply+0x10c>
 800b834:	9f01      	ldr	r7, [sp, #4]
 800b836:	51eb      	str	r3, [r5, r7]
 800b838:	3504      	adds	r5, #4
 800b83a:	e799      	b.n	800b770 <__multiply+0x7c>
 800b83c:	3e01      	subs	r6, #1
 800b83e:	e79b      	b.n	800b778 <__multiply+0x84>
 800b840:	0802066c 	.word	0x0802066c
 800b844:	0802067d 	.word	0x0802067d

0800b848 <__pow5mult>:
 800b848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b84c:	4615      	mov	r5, r2
 800b84e:	f012 0203 	ands.w	r2, r2, #3
 800b852:	4607      	mov	r7, r0
 800b854:	460e      	mov	r6, r1
 800b856:	d007      	beq.n	800b868 <__pow5mult+0x20>
 800b858:	4c25      	ldr	r4, [pc, #148]	@ (800b8f0 <__pow5mult+0xa8>)
 800b85a:	3a01      	subs	r2, #1
 800b85c:	2300      	movs	r3, #0
 800b85e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b862:	f7ff fe9f 	bl	800b5a4 <__multadd>
 800b866:	4606      	mov	r6, r0
 800b868:	10ad      	asrs	r5, r5, #2
 800b86a:	d03d      	beq.n	800b8e8 <__pow5mult+0xa0>
 800b86c:	69fc      	ldr	r4, [r7, #28]
 800b86e:	b97c      	cbnz	r4, 800b890 <__pow5mult+0x48>
 800b870:	2010      	movs	r0, #16
 800b872:	f7ff fd7f 	bl	800b374 <malloc>
 800b876:	4602      	mov	r2, r0
 800b878:	61f8      	str	r0, [r7, #28]
 800b87a:	b928      	cbnz	r0, 800b888 <__pow5mult+0x40>
 800b87c:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f4 <__pow5mult+0xac>)
 800b87e:	481e      	ldr	r0, [pc, #120]	@ (800b8f8 <__pow5mult+0xb0>)
 800b880:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b884:	f000 fbea 	bl	800c05c <__assert_func>
 800b888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b88c:	6004      	str	r4, [r0, #0]
 800b88e:	60c4      	str	r4, [r0, #12]
 800b890:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b898:	b94c      	cbnz	r4, 800b8ae <__pow5mult+0x66>
 800b89a:	f240 2171 	movw	r1, #625	@ 0x271
 800b89e:	4638      	mov	r0, r7
 800b8a0:	f7ff ff12 	bl	800b6c8 <__i2b>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	6003      	str	r3, [r0, #0]
 800b8ae:	f04f 0900 	mov.w	r9, #0
 800b8b2:	07eb      	lsls	r3, r5, #31
 800b8b4:	d50a      	bpl.n	800b8cc <__pow5mult+0x84>
 800b8b6:	4631      	mov	r1, r6
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	f7ff ff1a 	bl	800b6f4 <__multiply>
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	4680      	mov	r8, r0
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f7ff fe4b 	bl	800b560 <_Bfree>
 800b8ca:	4646      	mov	r6, r8
 800b8cc:	106d      	asrs	r5, r5, #1
 800b8ce:	d00b      	beq.n	800b8e8 <__pow5mult+0xa0>
 800b8d0:	6820      	ldr	r0, [r4, #0]
 800b8d2:	b938      	cbnz	r0, 800b8e4 <__pow5mult+0x9c>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4638      	mov	r0, r7
 800b8da:	f7ff ff0b 	bl	800b6f4 <__multiply>
 800b8de:	6020      	str	r0, [r4, #0]
 800b8e0:	f8c0 9000 	str.w	r9, [r0]
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	e7e4      	b.n	800b8b2 <__pow5mult+0x6a>
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	bf00      	nop
 800b8f0:	080206d8 	.word	0x080206d8
 800b8f4:	080205fd 	.word	0x080205fd
 800b8f8:	0802067d 	.word	0x0802067d

0800b8fc <__lshift>:
 800b8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b900:	460c      	mov	r4, r1
 800b902:	6849      	ldr	r1, [r1, #4]
 800b904:	6923      	ldr	r3, [r4, #16]
 800b906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	4607      	mov	r7, r0
 800b90e:	4691      	mov	r9, r2
 800b910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b914:	f108 0601 	add.w	r6, r8, #1
 800b918:	42b3      	cmp	r3, r6
 800b91a:	db0b      	blt.n	800b934 <__lshift+0x38>
 800b91c:	4638      	mov	r0, r7
 800b91e:	f7ff fddf 	bl	800b4e0 <_Balloc>
 800b922:	4605      	mov	r5, r0
 800b924:	b948      	cbnz	r0, 800b93a <__lshift+0x3e>
 800b926:	4602      	mov	r2, r0
 800b928:	4b28      	ldr	r3, [pc, #160]	@ (800b9cc <__lshift+0xd0>)
 800b92a:	4829      	ldr	r0, [pc, #164]	@ (800b9d0 <__lshift+0xd4>)
 800b92c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b930:	f000 fb94 	bl	800c05c <__assert_func>
 800b934:	3101      	adds	r1, #1
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	e7ee      	b.n	800b918 <__lshift+0x1c>
 800b93a:	2300      	movs	r3, #0
 800b93c:	f100 0114 	add.w	r1, r0, #20
 800b940:	f100 0210 	add.w	r2, r0, #16
 800b944:	4618      	mov	r0, r3
 800b946:	4553      	cmp	r3, sl
 800b948:	db33      	blt.n	800b9b2 <__lshift+0xb6>
 800b94a:	6920      	ldr	r0, [r4, #16]
 800b94c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b950:	f104 0314 	add.w	r3, r4, #20
 800b954:	f019 091f 	ands.w	r9, r9, #31
 800b958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b95c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b960:	d02b      	beq.n	800b9ba <__lshift+0xbe>
 800b962:	f1c9 0e20 	rsb	lr, r9, #32
 800b966:	468a      	mov	sl, r1
 800b968:	2200      	movs	r2, #0
 800b96a:	6818      	ldr	r0, [r3, #0]
 800b96c:	fa00 f009 	lsl.w	r0, r0, r9
 800b970:	4310      	orrs	r0, r2
 800b972:	f84a 0b04 	str.w	r0, [sl], #4
 800b976:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97a:	459c      	cmp	ip, r3
 800b97c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b980:	d8f3      	bhi.n	800b96a <__lshift+0x6e>
 800b982:	ebac 0304 	sub.w	r3, ip, r4
 800b986:	3b15      	subs	r3, #21
 800b988:	f023 0303 	bic.w	r3, r3, #3
 800b98c:	3304      	adds	r3, #4
 800b98e:	f104 0015 	add.w	r0, r4, #21
 800b992:	4584      	cmp	ip, r0
 800b994:	bf38      	it	cc
 800b996:	2304      	movcc	r3, #4
 800b998:	50ca      	str	r2, [r1, r3]
 800b99a:	b10a      	cbz	r2, 800b9a0 <__lshift+0xa4>
 800b99c:	f108 0602 	add.w	r6, r8, #2
 800b9a0:	3e01      	subs	r6, #1
 800b9a2:	4638      	mov	r0, r7
 800b9a4:	612e      	str	r6, [r5, #16]
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	f7ff fdda 	bl	800b560 <_Bfree>
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	e7c5      	b.n	800b946 <__lshift+0x4a>
 800b9ba:	3904      	subs	r1, #4
 800b9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9c4:	459c      	cmp	ip, r3
 800b9c6:	d8f9      	bhi.n	800b9bc <__lshift+0xc0>
 800b9c8:	e7ea      	b.n	800b9a0 <__lshift+0xa4>
 800b9ca:	bf00      	nop
 800b9cc:	0802066c 	.word	0x0802066c
 800b9d0:	0802067d 	.word	0x0802067d

0800b9d4 <__mcmp>:
 800b9d4:	690a      	ldr	r2, [r1, #16]
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	6900      	ldr	r0, [r0, #16]
 800b9da:	1a80      	subs	r0, r0, r2
 800b9dc:	b530      	push	{r4, r5, lr}
 800b9de:	d10e      	bne.n	800b9fe <__mcmp+0x2a>
 800b9e0:	3314      	adds	r3, #20
 800b9e2:	3114      	adds	r1, #20
 800b9e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9f4:	4295      	cmp	r5, r2
 800b9f6:	d003      	beq.n	800ba00 <__mcmp+0x2c>
 800b9f8:	d205      	bcs.n	800ba06 <__mcmp+0x32>
 800b9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fe:	bd30      	pop	{r4, r5, pc}
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	d3f3      	bcc.n	800b9ec <__mcmp+0x18>
 800ba04:	e7fb      	b.n	800b9fe <__mcmp+0x2a>
 800ba06:	2001      	movs	r0, #1
 800ba08:	e7f9      	b.n	800b9fe <__mcmp+0x2a>
	...

0800ba0c <__mdiff>:
 800ba0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	4689      	mov	r9, r1
 800ba12:	4606      	mov	r6, r0
 800ba14:	4611      	mov	r1, r2
 800ba16:	4648      	mov	r0, r9
 800ba18:	4614      	mov	r4, r2
 800ba1a:	f7ff ffdb 	bl	800b9d4 <__mcmp>
 800ba1e:	1e05      	subs	r5, r0, #0
 800ba20:	d112      	bne.n	800ba48 <__mdiff+0x3c>
 800ba22:	4629      	mov	r1, r5
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7ff fd5b 	bl	800b4e0 <_Balloc>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	b928      	cbnz	r0, 800ba3a <__mdiff+0x2e>
 800ba2e:	4b3f      	ldr	r3, [pc, #252]	@ (800bb2c <__mdiff+0x120>)
 800ba30:	f240 2137 	movw	r1, #567	@ 0x237
 800ba34:	483e      	ldr	r0, [pc, #248]	@ (800bb30 <__mdiff+0x124>)
 800ba36:	f000 fb11 	bl	800c05c <__assert_func>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba40:	4610      	mov	r0, r2
 800ba42:	b003      	add	sp, #12
 800ba44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba48:	bfbc      	itt	lt
 800ba4a:	464b      	movlt	r3, r9
 800ba4c:	46a1      	movlt	r9, r4
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba54:	bfba      	itte	lt
 800ba56:	461c      	movlt	r4, r3
 800ba58:	2501      	movlt	r5, #1
 800ba5a:	2500      	movge	r5, #0
 800ba5c:	f7ff fd40 	bl	800b4e0 <_Balloc>
 800ba60:	4602      	mov	r2, r0
 800ba62:	b918      	cbnz	r0, 800ba6c <__mdiff+0x60>
 800ba64:	4b31      	ldr	r3, [pc, #196]	@ (800bb2c <__mdiff+0x120>)
 800ba66:	f240 2145 	movw	r1, #581	@ 0x245
 800ba6a:	e7e3      	b.n	800ba34 <__mdiff+0x28>
 800ba6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba70:	6926      	ldr	r6, [r4, #16]
 800ba72:	60c5      	str	r5, [r0, #12]
 800ba74:	f109 0310 	add.w	r3, r9, #16
 800ba78:	f109 0514 	add.w	r5, r9, #20
 800ba7c:	f104 0e14 	add.w	lr, r4, #20
 800ba80:	f100 0b14 	add.w	fp, r0, #20
 800ba84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	46d9      	mov	r9, fp
 800ba90:	f04f 0c00 	mov.w	ip, #0
 800ba94:	9b01      	ldr	r3, [sp, #4]
 800ba96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba9e:	9301      	str	r3, [sp, #4]
 800baa0:	fa1f f38a 	uxth.w	r3, sl
 800baa4:	4619      	mov	r1, r3
 800baa6:	b283      	uxth	r3, r0
 800baa8:	1acb      	subs	r3, r1, r3
 800baaa:	0c00      	lsrs	r0, r0, #16
 800baac:	4463      	add	r3, ip
 800baae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bab2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800babc:	4576      	cmp	r6, lr
 800babe:	f849 3b04 	str.w	r3, [r9], #4
 800bac2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bac6:	d8e5      	bhi.n	800ba94 <__mdiff+0x88>
 800bac8:	1b33      	subs	r3, r6, r4
 800baca:	3b15      	subs	r3, #21
 800bacc:	f023 0303 	bic.w	r3, r3, #3
 800bad0:	3415      	adds	r4, #21
 800bad2:	3304      	adds	r3, #4
 800bad4:	42a6      	cmp	r6, r4
 800bad6:	bf38      	it	cc
 800bad8:	2304      	movcc	r3, #4
 800bada:	441d      	add	r5, r3
 800badc:	445b      	add	r3, fp
 800bade:	461e      	mov	r6, r3
 800bae0:	462c      	mov	r4, r5
 800bae2:	4544      	cmp	r4, r8
 800bae4:	d30e      	bcc.n	800bb04 <__mdiff+0xf8>
 800bae6:	f108 0103 	add.w	r1, r8, #3
 800baea:	1b49      	subs	r1, r1, r5
 800baec:	f021 0103 	bic.w	r1, r1, #3
 800baf0:	3d03      	subs	r5, #3
 800baf2:	45a8      	cmp	r8, r5
 800baf4:	bf38      	it	cc
 800baf6:	2100      	movcc	r1, #0
 800baf8:	440b      	add	r3, r1
 800bafa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bafe:	b191      	cbz	r1, 800bb26 <__mdiff+0x11a>
 800bb00:	6117      	str	r7, [r2, #16]
 800bb02:	e79d      	b.n	800ba40 <__mdiff+0x34>
 800bb04:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb08:	46e6      	mov	lr, ip
 800bb0a:	0c08      	lsrs	r0, r1, #16
 800bb0c:	fa1c fc81 	uxtah	ip, ip, r1
 800bb10:	4471      	add	r1, lr
 800bb12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb16:	b289      	uxth	r1, r1
 800bb18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb1c:	f846 1b04 	str.w	r1, [r6], #4
 800bb20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb24:	e7dd      	b.n	800bae2 <__mdiff+0xd6>
 800bb26:	3f01      	subs	r7, #1
 800bb28:	e7e7      	b.n	800bafa <__mdiff+0xee>
 800bb2a:	bf00      	nop
 800bb2c:	0802066c 	.word	0x0802066c
 800bb30:	0802067d 	.word	0x0802067d

0800bb34 <__d2b>:
 800bb34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb38:	460f      	mov	r7, r1
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	ec59 8b10 	vmov	r8, r9, d0
 800bb40:	4616      	mov	r6, r2
 800bb42:	f7ff fccd 	bl	800b4e0 <_Balloc>
 800bb46:	4604      	mov	r4, r0
 800bb48:	b930      	cbnz	r0, 800bb58 <__d2b+0x24>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	4b23      	ldr	r3, [pc, #140]	@ (800bbdc <__d2b+0xa8>)
 800bb4e:	4824      	ldr	r0, [pc, #144]	@ (800bbe0 <__d2b+0xac>)
 800bb50:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb54:	f000 fa82 	bl	800c05c <__assert_func>
 800bb58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb60:	b10d      	cbz	r5, 800bb66 <__d2b+0x32>
 800bb62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb66:	9301      	str	r3, [sp, #4]
 800bb68:	f1b8 0300 	subs.w	r3, r8, #0
 800bb6c:	d023      	beq.n	800bbb6 <__d2b+0x82>
 800bb6e:	4668      	mov	r0, sp
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	f7ff fd7c 	bl	800b66e <__lo0bits>
 800bb76:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb7a:	b1d0      	cbz	r0, 800bbb2 <__d2b+0x7e>
 800bb7c:	f1c0 0320 	rsb	r3, r0, #32
 800bb80:	fa02 f303 	lsl.w	r3, r2, r3
 800bb84:	430b      	orrs	r3, r1
 800bb86:	40c2      	lsrs	r2, r0
 800bb88:	6163      	str	r3, [r4, #20]
 800bb8a:	9201      	str	r2, [sp, #4]
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	61a3      	str	r3, [r4, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	bf0c      	ite	eq
 800bb94:	2201      	moveq	r2, #1
 800bb96:	2202      	movne	r2, #2
 800bb98:	6122      	str	r2, [r4, #16]
 800bb9a:	b1a5      	cbz	r5, 800bbc6 <__d2b+0x92>
 800bb9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bba0:	4405      	add	r5, r0
 800bba2:	603d      	str	r5, [r7, #0]
 800bba4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bba8:	6030      	str	r0, [r6, #0]
 800bbaa:	4620      	mov	r0, r4
 800bbac:	b003      	add	sp, #12
 800bbae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbb2:	6161      	str	r1, [r4, #20]
 800bbb4:	e7ea      	b.n	800bb8c <__d2b+0x58>
 800bbb6:	a801      	add	r0, sp, #4
 800bbb8:	f7ff fd59 	bl	800b66e <__lo0bits>
 800bbbc:	9b01      	ldr	r3, [sp, #4]
 800bbbe:	6163      	str	r3, [r4, #20]
 800bbc0:	3020      	adds	r0, #32
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	e7e8      	b.n	800bb98 <__d2b+0x64>
 800bbc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbce:	6038      	str	r0, [r7, #0]
 800bbd0:	6918      	ldr	r0, [r3, #16]
 800bbd2:	f7ff fd2d 	bl	800b630 <__hi0bits>
 800bbd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbda:	e7e5      	b.n	800bba8 <__d2b+0x74>
 800bbdc:	0802066c 	.word	0x0802066c
 800bbe0:	0802067d 	.word	0x0802067d

0800bbe4 <__ssputs_r>:
 800bbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe8:	688e      	ldr	r6, [r1, #8]
 800bbea:	461f      	mov	r7, r3
 800bbec:	42be      	cmp	r6, r7
 800bbee:	680b      	ldr	r3, [r1, #0]
 800bbf0:	4682      	mov	sl, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	4690      	mov	r8, r2
 800bbf6:	d82d      	bhi.n	800bc54 <__ssputs_r+0x70>
 800bbf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc00:	d026      	beq.n	800bc50 <__ssputs_r+0x6c>
 800bc02:	6965      	ldr	r5, [r4, #20]
 800bc04:	6909      	ldr	r1, [r1, #16]
 800bc06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc0a:	eba3 0901 	sub.w	r9, r3, r1
 800bc0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc12:	1c7b      	adds	r3, r7, #1
 800bc14:	444b      	add	r3, r9
 800bc16:	106d      	asrs	r5, r5, #1
 800bc18:	429d      	cmp	r5, r3
 800bc1a:	bf38      	it	cc
 800bc1c:	461d      	movcc	r5, r3
 800bc1e:	0553      	lsls	r3, r2, #21
 800bc20:	d527      	bpl.n	800bc72 <__ssputs_r+0x8e>
 800bc22:	4629      	mov	r1, r5
 800bc24:	f7ff fbd0 	bl	800b3c8 <_malloc_r>
 800bc28:	4606      	mov	r6, r0
 800bc2a:	b360      	cbz	r0, 800bc86 <__ssputs_r+0xa2>
 800bc2c:	6921      	ldr	r1, [r4, #16]
 800bc2e:	464a      	mov	r2, r9
 800bc30:	f000 fa06 	bl	800c040 <memcpy>
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc3e:	81a3      	strh	r3, [r4, #12]
 800bc40:	6126      	str	r6, [r4, #16]
 800bc42:	6165      	str	r5, [r4, #20]
 800bc44:	444e      	add	r6, r9
 800bc46:	eba5 0509 	sub.w	r5, r5, r9
 800bc4a:	6026      	str	r6, [r4, #0]
 800bc4c:	60a5      	str	r5, [r4, #8]
 800bc4e:	463e      	mov	r6, r7
 800bc50:	42be      	cmp	r6, r7
 800bc52:	d900      	bls.n	800bc56 <__ssputs_r+0x72>
 800bc54:	463e      	mov	r6, r7
 800bc56:	6820      	ldr	r0, [r4, #0]
 800bc58:	4632      	mov	r2, r6
 800bc5a:	4641      	mov	r1, r8
 800bc5c:	f000 f9c6 	bl	800bfec <memmove>
 800bc60:	68a3      	ldr	r3, [r4, #8]
 800bc62:	1b9b      	subs	r3, r3, r6
 800bc64:	60a3      	str	r3, [r4, #8]
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	4433      	add	r3, r6
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc72:	462a      	mov	r2, r5
 800bc74:	f000 fa36 	bl	800c0e4 <_realloc_r>
 800bc78:	4606      	mov	r6, r0
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d1e0      	bne.n	800bc40 <__ssputs_r+0x5c>
 800bc7e:	6921      	ldr	r1, [r4, #16]
 800bc80:	4650      	mov	r0, sl
 800bc82:	f7ff fb2d 	bl	800b2e0 <_free_r>
 800bc86:	230c      	movs	r3, #12
 800bc88:	f8ca 3000 	str.w	r3, [sl]
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc92:	81a3      	strh	r3, [r4, #12]
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	e7e9      	b.n	800bc6e <__ssputs_r+0x8a>
	...

0800bc9c <_svfiprintf_r>:
 800bc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	4698      	mov	r8, r3
 800bca2:	898b      	ldrh	r3, [r1, #12]
 800bca4:	061b      	lsls	r3, r3, #24
 800bca6:	b09d      	sub	sp, #116	@ 0x74
 800bca8:	4607      	mov	r7, r0
 800bcaa:	460d      	mov	r5, r1
 800bcac:	4614      	mov	r4, r2
 800bcae:	d510      	bpl.n	800bcd2 <_svfiprintf_r+0x36>
 800bcb0:	690b      	ldr	r3, [r1, #16]
 800bcb2:	b973      	cbnz	r3, 800bcd2 <_svfiprintf_r+0x36>
 800bcb4:	2140      	movs	r1, #64	@ 0x40
 800bcb6:	f7ff fb87 	bl	800b3c8 <_malloc_r>
 800bcba:	6028      	str	r0, [r5, #0]
 800bcbc:	6128      	str	r0, [r5, #16]
 800bcbe:	b930      	cbnz	r0, 800bcce <_svfiprintf_r+0x32>
 800bcc0:	230c      	movs	r3, #12
 800bcc2:	603b      	str	r3, [r7, #0]
 800bcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc8:	b01d      	add	sp, #116	@ 0x74
 800bcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcce:	2340      	movs	r3, #64	@ 0x40
 800bcd0:	616b      	str	r3, [r5, #20]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcd6:	2320      	movs	r3, #32
 800bcd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bce0:	2330      	movs	r3, #48	@ 0x30
 800bce2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be80 <_svfiprintf_r+0x1e4>
 800bce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcea:	f04f 0901 	mov.w	r9, #1
 800bcee:	4623      	mov	r3, r4
 800bcf0:	469a      	mov	sl, r3
 800bcf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcf6:	b10a      	cbz	r2, 800bcfc <_svfiprintf_r+0x60>
 800bcf8:	2a25      	cmp	r2, #37	@ 0x25
 800bcfa:	d1f9      	bne.n	800bcf0 <_svfiprintf_r+0x54>
 800bcfc:	ebba 0b04 	subs.w	fp, sl, r4
 800bd00:	d00b      	beq.n	800bd1a <_svfiprintf_r+0x7e>
 800bd02:	465b      	mov	r3, fp
 800bd04:	4622      	mov	r2, r4
 800bd06:	4629      	mov	r1, r5
 800bd08:	4638      	mov	r0, r7
 800bd0a:	f7ff ff6b 	bl	800bbe4 <__ssputs_r>
 800bd0e:	3001      	adds	r0, #1
 800bd10:	f000 80a7 	beq.w	800be62 <_svfiprintf_r+0x1c6>
 800bd14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd16:	445a      	add	r2, fp
 800bd18:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 809f 	beq.w	800be62 <_svfiprintf_r+0x1c6>
 800bd24:	2300      	movs	r3, #0
 800bd26:	f04f 32ff 	mov.w	r2, #4294967295
 800bd2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd2e:	f10a 0a01 	add.w	sl, sl, #1
 800bd32:	9304      	str	r3, [sp, #16]
 800bd34:	9307      	str	r3, [sp, #28]
 800bd36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd3c:	4654      	mov	r4, sl
 800bd3e:	2205      	movs	r2, #5
 800bd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd44:	484e      	ldr	r0, [pc, #312]	@ (800be80 <_svfiprintf_r+0x1e4>)
 800bd46:	f7f4 fa63 	bl	8000210 <memchr>
 800bd4a:	9a04      	ldr	r2, [sp, #16]
 800bd4c:	b9d8      	cbnz	r0, 800bd86 <_svfiprintf_r+0xea>
 800bd4e:	06d0      	lsls	r0, r2, #27
 800bd50:	bf44      	itt	mi
 800bd52:	2320      	movmi	r3, #32
 800bd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd58:	0711      	lsls	r1, r2, #28
 800bd5a:	bf44      	itt	mi
 800bd5c:	232b      	movmi	r3, #43	@ 0x2b
 800bd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd62:	f89a 3000 	ldrb.w	r3, [sl]
 800bd66:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd68:	d015      	beq.n	800bd96 <_svfiprintf_r+0xfa>
 800bd6a:	9a07      	ldr	r2, [sp, #28]
 800bd6c:	4654      	mov	r4, sl
 800bd6e:	2000      	movs	r0, #0
 800bd70:	f04f 0c0a 	mov.w	ip, #10
 800bd74:	4621      	mov	r1, r4
 800bd76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd7a:	3b30      	subs	r3, #48	@ 0x30
 800bd7c:	2b09      	cmp	r3, #9
 800bd7e:	d94b      	bls.n	800be18 <_svfiprintf_r+0x17c>
 800bd80:	b1b0      	cbz	r0, 800bdb0 <_svfiprintf_r+0x114>
 800bd82:	9207      	str	r2, [sp, #28]
 800bd84:	e014      	b.n	800bdb0 <_svfiprintf_r+0x114>
 800bd86:	eba0 0308 	sub.w	r3, r0, r8
 800bd8a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	9304      	str	r3, [sp, #16]
 800bd92:	46a2      	mov	sl, r4
 800bd94:	e7d2      	b.n	800bd3c <_svfiprintf_r+0xa0>
 800bd96:	9b03      	ldr	r3, [sp, #12]
 800bd98:	1d19      	adds	r1, r3, #4
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	9103      	str	r1, [sp, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	bfbb      	ittet	lt
 800bda2:	425b      	neglt	r3, r3
 800bda4:	f042 0202 	orrlt.w	r2, r2, #2
 800bda8:	9307      	strge	r3, [sp, #28]
 800bdaa:	9307      	strlt	r3, [sp, #28]
 800bdac:	bfb8      	it	lt
 800bdae:	9204      	strlt	r2, [sp, #16]
 800bdb0:	7823      	ldrb	r3, [r4, #0]
 800bdb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdb4:	d10a      	bne.n	800bdcc <_svfiprintf_r+0x130>
 800bdb6:	7863      	ldrb	r3, [r4, #1]
 800bdb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdba:	d132      	bne.n	800be22 <_svfiprintf_r+0x186>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	1d1a      	adds	r2, r3, #4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	9203      	str	r2, [sp, #12]
 800bdc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdc8:	3402      	adds	r4, #2
 800bdca:	9305      	str	r3, [sp, #20]
 800bdcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be90 <_svfiprintf_r+0x1f4>
 800bdd0:	7821      	ldrb	r1, [r4, #0]
 800bdd2:	2203      	movs	r2, #3
 800bdd4:	4650      	mov	r0, sl
 800bdd6:	f7f4 fa1b 	bl	8000210 <memchr>
 800bdda:	b138      	cbz	r0, 800bdec <_svfiprintf_r+0x150>
 800bddc:	9b04      	ldr	r3, [sp, #16]
 800bdde:	eba0 000a 	sub.w	r0, r0, sl
 800bde2:	2240      	movs	r2, #64	@ 0x40
 800bde4:	4082      	lsls	r2, r0
 800bde6:	4313      	orrs	r3, r2
 800bde8:	3401      	adds	r4, #1
 800bdea:	9304      	str	r3, [sp, #16]
 800bdec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf0:	4824      	ldr	r0, [pc, #144]	@ (800be84 <_svfiprintf_r+0x1e8>)
 800bdf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdf6:	2206      	movs	r2, #6
 800bdf8:	f7f4 fa0a 	bl	8000210 <memchr>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d036      	beq.n	800be6e <_svfiprintf_r+0x1d2>
 800be00:	4b21      	ldr	r3, [pc, #132]	@ (800be88 <_svfiprintf_r+0x1ec>)
 800be02:	bb1b      	cbnz	r3, 800be4c <_svfiprintf_r+0x1b0>
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	3307      	adds	r3, #7
 800be08:	f023 0307 	bic.w	r3, r3, #7
 800be0c:	3308      	adds	r3, #8
 800be0e:	9303      	str	r3, [sp, #12]
 800be10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be12:	4433      	add	r3, r6
 800be14:	9309      	str	r3, [sp, #36]	@ 0x24
 800be16:	e76a      	b.n	800bcee <_svfiprintf_r+0x52>
 800be18:	fb0c 3202 	mla	r2, ip, r2, r3
 800be1c:	460c      	mov	r4, r1
 800be1e:	2001      	movs	r0, #1
 800be20:	e7a8      	b.n	800bd74 <_svfiprintf_r+0xd8>
 800be22:	2300      	movs	r3, #0
 800be24:	3401      	adds	r4, #1
 800be26:	9305      	str	r3, [sp, #20]
 800be28:	4619      	mov	r1, r3
 800be2a:	f04f 0c0a 	mov.w	ip, #10
 800be2e:	4620      	mov	r0, r4
 800be30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be34:	3a30      	subs	r2, #48	@ 0x30
 800be36:	2a09      	cmp	r2, #9
 800be38:	d903      	bls.n	800be42 <_svfiprintf_r+0x1a6>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d0c6      	beq.n	800bdcc <_svfiprintf_r+0x130>
 800be3e:	9105      	str	r1, [sp, #20]
 800be40:	e7c4      	b.n	800bdcc <_svfiprintf_r+0x130>
 800be42:	fb0c 2101 	mla	r1, ip, r1, r2
 800be46:	4604      	mov	r4, r0
 800be48:	2301      	movs	r3, #1
 800be4a:	e7f0      	b.n	800be2e <_svfiprintf_r+0x192>
 800be4c:	ab03      	add	r3, sp, #12
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	462a      	mov	r2, r5
 800be52:	4b0e      	ldr	r3, [pc, #56]	@ (800be8c <_svfiprintf_r+0x1f0>)
 800be54:	a904      	add	r1, sp, #16
 800be56:	4638      	mov	r0, r7
 800be58:	f7fd fe88 	bl	8009b6c <_printf_float>
 800be5c:	1c42      	adds	r2, r0, #1
 800be5e:	4606      	mov	r6, r0
 800be60:	d1d6      	bne.n	800be10 <_svfiprintf_r+0x174>
 800be62:	89ab      	ldrh	r3, [r5, #12]
 800be64:	065b      	lsls	r3, r3, #25
 800be66:	f53f af2d 	bmi.w	800bcc4 <_svfiprintf_r+0x28>
 800be6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be6c:	e72c      	b.n	800bcc8 <_svfiprintf_r+0x2c>
 800be6e:	ab03      	add	r3, sp, #12
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	462a      	mov	r2, r5
 800be74:	4b05      	ldr	r3, [pc, #20]	@ (800be8c <_svfiprintf_r+0x1f0>)
 800be76:	a904      	add	r1, sp, #16
 800be78:	4638      	mov	r0, r7
 800be7a:	f7fe f90f 	bl	800a09c <_printf_i>
 800be7e:	e7ed      	b.n	800be5c <_svfiprintf_r+0x1c0>
 800be80:	080207d8 	.word	0x080207d8
 800be84:	080207e2 	.word	0x080207e2
 800be88:	08009b6d 	.word	0x08009b6d
 800be8c:	0800bbe5 	.word	0x0800bbe5
 800be90:	080207de 	.word	0x080207de

0800be94 <__sflush_r>:
 800be94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be9c:	0716      	lsls	r6, r2, #28
 800be9e:	4605      	mov	r5, r0
 800bea0:	460c      	mov	r4, r1
 800bea2:	d454      	bmi.n	800bf4e <__sflush_r+0xba>
 800bea4:	684b      	ldr	r3, [r1, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	dc02      	bgt.n	800beb0 <__sflush_r+0x1c>
 800beaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	dd48      	ble.n	800bf42 <__sflush_r+0xae>
 800beb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	d045      	beq.n	800bf42 <__sflush_r+0xae>
 800beb6:	2300      	movs	r3, #0
 800beb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bebc:	682f      	ldr	r7, [r5, #0]
 800bebe:	6a21      	ldr	r1, [r4, #32]
 800bec0:	602b      	str	r3, [r5, #0]
 800bec2:	d030      	beq.n	800bf26 <__sflush_r+0x92>
 800bec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bec6:	89a3      	ldrh	r3, [r4, #12]
 800bec8:	0759      	lsls	r1, r3, #29
 800beca:	d505      	bpl.n	800bed8 <__sflush_r+0x44>
 800becc:	6863      	ldr	r3, [r4, #4]
 800bece:	1ad2      	subs	r2, r2, r3
 800bed0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bed2:	b10b      	cbz	r3, 800bed8 <__sflush_r+0x44>
 800bed4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bed6:	1ad2      	subs	r2, r2, r3
 800bed8:	2300      	movs	r3, #0
 800beda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bedc:	6a21      	ldr	r1, [r4, #32]
 800bede:	4628      	mov	r0, r5
 800bee0:	47b0      	blx	r6
 800bee2:	1c43      	adds	r3, r0, #1
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	d106      	bne.n	800bef6 <__sflush_r+0x62>
 800bee8:	6829      	ldr	r1, [r5, #0]
 800beea:	291d      	cmp	r1, #29
 800beec:	d82b      	bhi.n	800bf46 <__sflush_r+0xb2>
 800beee:	4a2a      	ldr	r2, [pc, #168]	@ (800bf98 <__sflush_r+0x104>)
 800bef0:	410a      	asrs	r2, r1
 800bef2:	07d6      	lsls	r6, r2, #31
 800bef4:	d427      	bmi.n	800bf46 <__sflush_r+0xb2>
 800bef6:	2200      	movs	r2, #0
 800bef8:	6062      	str	r2, [r4, #4]
 800befa:	04d9      	lsls	r1, r3, #19
 800befc:	6922      	ldr	r2, [r4, #16]
 800befe:	6022      	str	r2, [r4, #0]
 800bf00:	d504      	bpl.n	800bf0c <__sflush_r+0x78>
 800bf02:	1c42      	adds	r2, r0, #1
 800bf04:	d101      	bne.n	800bf0a <__sflush_r+0x76>
 800bf06:	682b      	ldr	r3, [r5, #0]
 800bf08:	b903      	cbnz	r3, 800bf0c <__sflush_r+0x78>
 800bf0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf0e:	602f      	str	r7, [r5, #0]
 800bf10:	b1b9      	cbz	r1, 800bf42 <__sflush_r+0xae>
 800bf12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf16:	4299      	cmp	r1, r3
 800bf18:	d002      	beq.n	800bf20 <__sflush_r+0x8c>
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f7ff f9e0 	bl	800b2e0 <_free_r>
 800bf20:	2300      	movs	r3, #0
 800bf22:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf24:	e00d      	b.n	800bf42 <__sflush_r+0xae>
 800bf26:	2301      	movs	r3, #1
 800bf28:	4628      	mov	r0, r5
 800bf2a:	47b0      	blx	r6
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	1c50      	adds	r0, r2, #1
 800bf30:	d1c9      	bne.n	800bec6 <__sflush_r+0x32>
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d0c6      	beq.n	800bec6 <__sflush_r+0x32>
 800bf38:	2b1d      	cmp	r3, #29
 800bf3a:	d001      	beq.n	800bf40 <__sflush_r+0xac>
 800bf3c:	2b16      	cmp	r3, #22
 800bf3e:	d11e      	bne.n	800bf7e <__sflush_r+0xea>
 800bf40:	602f      	str	r7, [r5, #0]
 800bf42:	2000      	movs	r0, #0
 800bf44:	e022      	b.n	800bf8c <__sflush_r+0xf8>
 800bf46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf4a:	b21b      	sxth	r3, r3
 800bf4c:	e01b      	b.n	800bf86 <__sflush_r+0xf2>
 800bf4e:	690f      	ldr	r7, [r1, #16]
 800bf50:	2f00      	cmp	r7, #0
 800bf52:	d0f6      	beq.n	800bf42 <__sflush_r+0xae>
 800bf54:	0793      	lsls	r3, r2, #30
 800bf56:	680e      	ldr	r6, [r1, #0]
 800bf58:	bf08      	it	eq
 800bf5a:	694b      	ldreq	r3, [r1, #20]
 800bf5c:	600f      	str	r7, [r1, #0]
 800bf5e:	bf18      	it	ne
 800bf60:	2300      	movne	r3, #0
 800bf62:	eba6 0807 	sub.w	r8, r6, r7
 800bf66:	608b      	str	r3, [r1, #8]
 800bf68:	f1b8 0f00 	cmp.w	r8, #0
 800bf6c:	dde9      	ble.n	800bf42 <__sflush_r+0xae>
 800bf6e:	6a21      	ldr	r1, [r4, #32]
 800bf70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf72:	4643      	mov	r3, r8
 800bf74:	463a      	mov	r2, r7
 800bf76:	4628      	mov	r0, r5
 800bf78:	47b0      	blx	r6
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	dc08      	bgt.n	800bf90 <__sflush_r+0xfc>
 800bf7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf86:	81a3      	strh	r3, [r4, #12]
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf90:	4407      	add	r7, r0
 800bf92:	eba8 0800 	sub.w	r8, r8, r0
 800bf96:	e7e7      	b.n	800bf68 <__sflush_r+0xd4>
 800bf98:	dfbffffe 	.word	0xdfbffffe

0800bf9c <_fflush_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	690b      	ldr	r3, [r1, #16]
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	b913      	cbnz	r3, 800bfac <_fflush_r+0x10>
 800bfa6:	2500      	movs	r5, #0
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	b118      	cbz	r0, 800bfb6 <_fflush_r+0x1a>
 800bfae:	6a03      	ldr	r3, [r0, #32]
 800bfb0:	b90b      	cbnz	r3, 800bfb6 <_fflush_r+0x1a>
 800bfb2:	f7fe fa1f 	bl	800a3f4 <__sinit>
 800bfb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d0f3      	beq.n	800bfa6 <_fflush_r+0xa>
 800bfbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bfc0:	07d0      	lsls	r0, r2, #31
 800bfc2:	d404      	bmi.n	800bfce <_fflush_r+0x32>
 800bfc4:	0599      	lsls	r1, r3, #22
 800bfc6:	d402      	bmi.n	800bfce <_fflush_r+0x32>
 800bfc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfca:	f7fe fb3a 	bl	800a642 <__retarget_lock_acquire_recursive>
 800bfce:	4628      	mov	r0, r5
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	f7ff ff5f 	bl	800be94 <__sflush_r>
 800bfd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfd8:	07da      	lsls	r2, r3, #31
 800bfda:	4605      	mov	r5, r0
 800bfdc:	d4e4      	bmi.n	800bfa8 <_fflush_r+0xc>
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	059b      	lsls	r3, r3, #22
 800bfe2:	d4e1      	bmi.n	800bfa8 <_fflush_r+0xc>
 800bfe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfe6:	f7fe fb2d 	bl	800a644 <__retarget_lock_release_recursive>
 800bfea:	e7dd      	b.n	800bfa8 <_fflush_r+0xc>

0800bfec <memmove>:
 800bfec:	4288      	cmp	r0, r1
 800bfee:	b510      	push	{r4, lr}
 800bff0:	eb01 0402 	add.w	r4, r1, r2
 800bff4:	d902      	bls.n	800bffc <memmove+0x10>
 800bff6:	4284      	cmp	r4, r0
 800bff8:	4623      	mov	r3, r4
 800bffa:	d807      	bhi.n	800c00c <memmove+0x20>
 800bffc:	1e43      	subs	r3, r0, #1
 800bffe:	42a1      	cmp	r1, r4
 800c000:	d008      	beq.n	800c014 <memmove+0x28>
 800c002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c00a:	e7f8      	b.n	800bffe <memmove+0x12>
 800c00c:	4402      	add	r2, r0
 800c00e:	4601      	mov	r1, r0
 800c010:	428a      	cmp	r2, r1
 800c012:	d100      	bne.n	800c016 <memmove+0x2a>
 800c014:	bd10      	pop	{r4, pc}
 800c016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c01e:	e7f7      	b.n	800c010 <memmove+0x24>

0800c020 <_sbrk_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4d06      	ldr	r5, [pc, #24]	@ (800c03c <_sbrk_r+0x1c>)
 800c024:	2300      	movs	r3, #0
 800c026:	4604      	mov	r4, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	602b      	str	r3, [r5, #0]
 800c02c:	f7f6 fe34 	bl	8002c98 <_sbrk>
 800c030:	1c43      	adds	r3, r0, #1
 800c032:	d102      	bne.n	800c03a <_sbrk_r+0x1a>
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	b103      	cbz	r3, 800c03a <_sbrk_r+0x1a>
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	bd38      	pop	{r3, r4, r5, pc}
 800c03c:	20018e68 	.word	0x20018e68

0800c040 <memcpy>:
 800c040:	440a      	add	r2, r1
 800c042:	4291      	cmp	r1, r2
 800c044:	f100 33ff 	add.w	r3, r0, #4294967295
 800c048:	d100      	bne.n	800c04c <memcpy+0xc>
 800c04a:	4770      	bx	lr
 800c04c:	b510      	push	{r4, lr}
 800c04e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c052:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c056:	4291      	cmp	r1, r2
 800c058:	d1f9      	bne.n	800c04e <memcpy+0xe>
 800c05a:	bd10      	pop	{r4, pc}

0800c05c <__assert_func>:
 800c05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c05e:	4614      	mov	r4, r2
 800c060:	461a      	mov	r2, r3
 800c062:	4b09      	ldr	r3, [pc, #36]	@ (800c088 <__assert_func+0x2c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4605      	mov	r5, r0
 800c068:	68d8      	ldr	r0, [r3, #12]
 800c06a:	b954      	cbnz	r4, 800c082 <__assert_func+0x26>
 800c06c:	4b07      	ldr	r3, [pc, #28]	@ (800c08c <__assert_func+0x30>)
 800c06e:	461c      	mov	r4, r3
 800c070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c074:	9100      	str	r1, [sp, #0]
 800c076:	462b      	mov	r3, r5
 800c078:	4905      	ldr	r1, [pc, #20]	@ (800c090 <__assert_func+0x34>)
 800c07a:	f000 f86f 	bl	800c15c <fiprintf>
 800c07e:	f000 f87f 	bl	800c180 <abort>
 800c082:	4b04      	ldr	r3, [pc, #16]	@ (800c094 <__assert_func+0x38>)
 800c084:	e7f4      	b.n	800c070 <__assert_func+0x14>
 800c086:	bf00      	nop
 800c088:	20000018 	.word	0x20000018
 800c08c:	0802082e 	.word	0x0802082e
 800c090:	08020800 	.word	0x08020800
 800c094:	080207f3 	.word	0x080207f3

0800c098 <_calloc_r>:
 800c098:	b570      	push	{r4, r5, r6, lr}
 800c09a:	fba1 5402 	umull	r5, r4, r1, r2
 800c09e:	b93c      	cbnz	r4, 800c0b0 <_calloc_r+0x18>
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7ff f991 	bl	800b3c8 <_malloc_r>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	b928      	cbnz	r0, 800c0b6 <_calloc_r+0x1e>
 800c0aa:	2600      	movs	r6, #0
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	220c      	movs	r2, #12
 800c0b2:	6002      	str	r2, [r0, #0]
 800c0b4:	e7f9      	b.n	800c0aa <_calloc_r+0x12>
 800c0b6:	462a      	mov	r2, r5
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	f7fe fa44 	bl	800a546 <memset>
 800c0be:	e7f5      	b.n	800c0ac <_calloc_r+0x14>

0800c0c0 <__ascii_mbtowc>:
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	b901      	cbnz	r1, 800c0c6 <__ascii_mbtowc+0x6>
 800c0c4:	a901      	add	r1, sp, #4
 800c0c6:	b142      	cbz	r2, 800c0da <__ascii_mbtowc+0x1a>
 800c0c8:	b14b      	cbz	r3, 800c0de <__ascii_mbtowc+0x1e>
 800c0ca:	7813      	ldrb	r3, [r2, #0]
 800c0cc:	600b      	str	r3, [r1, #0]
 800c0ce:	7812      	ldrb	r2, [r2, #0]
 800c0d0:	1e10      	subs	r0, r2, #0
 800c0d2:	bf18      	it	ne
 800c0d4:	2001      	movne	r0, #1
 800c0d6:	b002      	add	sp, #8
 800c0d8:	4770      	bx	lr
 800c0da:	4610      	mov	r0, r2
 800c0dc:	e7fb      	b.n	800c0d6 <__ascii_mbtowc+0x16>
 800c0de:	f06f 0001 	mvn.w	r0, #1
 800c0e2:	e7f8      	b.n	800c0d6 <__ascii_mbtowc+0x16>

0800c0e4 <_realloc_r>:
 800c0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e8:	4680      	mov	r8, r0
 800c0ea:	4615      	mov	r5, r2
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	b921      	cbnz	r1, 800c0fa <_realloc_r+0x16>
 800c0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	f7ff b967 	b.w	800b3c8 <_malloc_r>
 800c0fa:	b92a      	cbnz	r2, 800c108 <_realloc_r+0x24>
 800c0fc:	f7ff f8f0 	bl	800b2e0 <_free_r>
 800c100:	2400      	movs	r4, #0
 800c102:	4620      	mov	r0, r4
 800c104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c108:	f000 f841 	bl	800c18e <_malloc_usable_size_r>
 800c10c:	4285      	cmp	r5, r0
 800c10e:	4606      	mov	r6, r0
 800c110:	d802      	bhi.n	800c118 <_realloc_r+0x34>
 800c112:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c116:	d8f4      	bhi.n	800c102 <_realloc_r+0x1e>
 800c118:	4629      	mov	r1, r5
 800c11a:	4640      	mov	r0, r8
 800c11c:	f7ff f954 	bl	800b3c8 <_malloc_r>
 800c120:	4607      	mov	r7, r0
 800c122:	2800      	cmp	r0, #0
 800c124:	d0ec      	beq.n	800c100 <_realloc_r+0x1c>
 800c126:	42b5      	cmp	r5, r6
 800c128:	462a      	mov	r2, r5
 800c12a:	4621      	mov	r1, r4
 800c12c:	bf28      	it	cs
 800c12e:	4632      	movcs	r2, r6
 800c130:	f7ff ff86 	bl	800c040 <memcpy>
 800c134:	4621      	mov	r1, r4
 800c136:	4640      	mov	r0, r8
 800c138:	f7ff f8d2 	bl	800b2e0 <_free_r>
 800c13c:	463c      	mov	r4, r7
 800c13e:	e7e0      	b.n	800c102 <_realloc_r+0x1e>

0800c140 <__ascii_wctomb>:
 800c140:	4603      	mov	r3, r0
 800c142:	4608      	mov	r0, r1
 800c144:	b141      	cbz	r1, 800c158 <__ascii_wctomb+0x18>
 800c146:	2aff      	cmp	r2, #255	@ 0xff
 800c148:	d904      	bls.n	800c154 <__ascii_wctomb+0x14>
 800c14a:	228a      	movs	r2, #138	@ 0x8a
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	4770      	bx	lr
 800c154:	700a      	strb	r2, [r1, #0]
 800c156:	2001      	movs	r0, #1
 800c158:	4770      	bx	lr
	...

0800c15c <fiprintf>:
 800c15c:	b40e      	push	{r1, r2, r3}
 800c15e:	b503      	push	{r0, r1, lr}
 800c160:	4601      	mov	r1, r0
 800c162:	ab03      	add	r3, sp, #12
 800c164:	4805      	ldr	r0, [pc, #20]	@ (800c17c <fiprintf+0x20>)
 800c166:	f853 2b04 	ldr.w	r2, [r3], #4
 800c16a:	6800      	ldr	r0, [r0, #0]
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	f000 f83f 	bl	800c1f0 <_vfiprintf_r>
 800c172:	b002      	add	sp, #8
 800c174:	f85d eb04 	ldr.w	lr, [sp], #4
 800c178:	b003      	add	sp, #12
 800c17a:	4770      	bx	lr
 800c17c:	20000018 	.word	0x20000018

0800c180 <abort>:
 800c180:	b508      	push	{r3, lr}
 800c182:	2006      	movs	r0, #6
 800c184:	f000 fa08 	bl	800c598 <raise>
 800c188:	2001      	movs	r0, #1
 800c18a:	f7f6 fd0d 	bl	8002ba8 <_exit>

0800c18e <_malloc_usable_size_r>:
 800c18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c192:	1f18      	subs	r0, r3, #4
 800c194:	2b00      	cmp	r3, #0
 800c196:	bfbc      	itt	lt
 800c198:	580b      	ldrlt	r3, [r1, r0]
 800c19a:	18c0      	addlt	r0, r0, r3
 800c19c:	4770      	bx	lr

0800c19e <__sfputc_r>:
 800c19e:	6893      	ldr	r3, [r2, #8]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	b410      	push	{r4}
 800c1a6:	6093      	str	r3, [r2, #8]
 800c1a8:	da08      	bge.n	800c1bc <__sfputc_r+0x1e>
 800c1aa:	6994      	ldr	r4, [r2, #24]
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	db01      	blt.n	800c1b4 <__sfputc_r+0x16>
 800c1b0:	290a      	cmp	r1, #10
 800c1b2:	d103      	bne.n	800c1bc <__sfputc_r+0x1e>
 800c1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1b8:	f000 b932 	b.w	800c420 <__swbuf_r>
 800c1bc:	6813      	ldr	r3, [r2, #0]
 800c1be:	1c58      	adds	r0, r3, #1
 800c1c0:	6010      	str	r0, [r2, #0]
 800c1c2:	7019      	strb	r1, [r3, #0]
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <__sfputs_r>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	460f      	mov	r7, r1
 800c1d2:	4614      	mov	r4, r2
 800c1d4:	18d5      	adds	r5, r2, r3
 800c1d6:	42ac      	cmp	r4, r5
 800c1d8:	d101      	bne.n	800c1de <__sfputs_r+0x12>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	e007      	b.n	800c1ee <__sfputs_r+0x22>
 800c1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e2:	463a      	mov	r2, r7
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f7ff ffda 	bl	800c19e <__sfputc_r>
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	d1f3      	bne.n	800c1d6 <__sfputs_r+0xa>
 800c1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1f0 <_vfiprintf_r>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	460d      	mov	r5, r1
 800c1f6:	b09d      	sub	sp, #116	@ 0x74
 800c1f8:	4614      	mov	r4, r2
 800c1fa:	4698      	mov	r8, r3
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	b118      	cbz	r0, 800c208 <_vfiprintf_r+0x18>
 800c200:	6a03      	ldr	r3, [r0, #32]
 800c202:	b90b      	cbnz	r3, 800c208 <_vfiprintf_r+0x18>
 800c204:	f7fe f8f6 	bl	800a3f4 <__sinit>
 800c208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c20a:	07d9      	lsls	r1, r3, #31
 800c20c:	d405      	bmi.n	800c21a <_vfiprintf_r+0x2a>
 800c20e:	89ab      	ldrh	r3, [r5, #12]
 800c210:	059a      	lsls	r2, r3, #22
 800c212:	d402      	bmi.n	800c21a <_vfiprintf_r+0x2a>
 800c214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c216:	f7fe fa14 	bl	800a642 <__retarget_lock_acquire_recursive>
 800c21a:	89ab      	ldrh	r3, [r5, #12]
 800c21c:	071b      	lsls	r3, r3, #28
 800c21e:	d501      	bpl.n	800c224 <_vfiprintf_r+0x34>
 800c220:	692b      	ldr	r3, [r5, #16]
 800c222:	b99b      	cbnz	r3, 800c24c <_vfiprintf_r+0x5c>
 800c224:	4629      	mov	r1, r5
 800c226:	4630      	mov	r0, r6
 800c228:	f000 f938 	bl	800c49c <__swsetup_r>
 800c22c:	b170      	cbz	r0, 800c24c <_vfiprintf_r+0x5c>
 800c22e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c230:	07dc      	lsls	r4, r3, #31
 800c232:	d504      	bpl.n	800c23e <_vfiprintf_r+0x4e>
 800c234:	f04f 30ff 	mov.w	r0, #4294967295
 800c238:	b01d      	add	sp, #116	@ 0x74
 800c23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23e:	89ab      	ldrh	r3, [r5, #12]
 800c240:	0598      	lsls	r0, r3, #22
 800c242:	d4f7      	bmi.n	800c234 <_vfiprintf_r+0x44>
 800c244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c246:	f7fe f9fd 	bl	800a644 <__retarget_lock_release_recursive>
 800c24a:	e7f3      	b.n	800c234 <_vfiprintf_r+0x44>
 800c24c:	2300      	movs	r3, #0
 800c24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c250:	2320      	movs	r3, #32
 800c252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c256:	f8cd 800c 	str.w	r8, [sp, #12]
 800c25a:	2330      	movs	r3, #48	@ 0x30
 800c25c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c40c <_vfiprintf_r+0x21c>
 800c260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c264:	f04f 0901 	mov.w	r9, #1
 800c268:	4623      	mov	r3, r4
 800c26a:	469a      	mov	sl, r3
 800c26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c270:	b10a      	cbz	r2, 800c276 <_vfiprintf_r+0x86>
 800c272:	2a25      	cmp	r2, #37	@ 0x25
 800c274:	d1f9      	bne.n	800c26a <_vfiprintf_r+0x7a>
 800c276:	ebba 0b04 	subs.w	fp, sl, r4
 800c27a:	d00b      	beq.n	800c294 <_vfiprintf_r+0xa4>
 800c27c:	465b      	mov	r3, fp
 800c27e:	4622      	mov	r2, r4
 800c280:	4629      	mov	r1, r5
 800c282:	4630      	mov	r0, r6
 800c284:	f7ff ffa2 	bl	800c1cc <__sfputs_r>
 800c288:	3001      	adds	r0, #1
 800c28a:	f000 80a7 	beq.w	800c3dc <_vfiprintf_r+0x1ec>
 800c28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c290:	445a      	add	r2, fp
 800c292:	9209      	str	r2, [sp, #36]	@ 0x24
 800c294:	f89a 3000 	ldrb.w	r3, [sl]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 809f 	beq.w	800c3dc <_vfiprintf_r+0x1ec>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2a8:	f10a 0a01 	add.w	sl, sl, #1
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	9307      	str	r3, [sp, #28]
 800c2b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2b6:	4654      	mov	r4, sl
 800c2b8:	2205      	movs	r2, #5
 800c2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2be:	4853      	ldr	r0, [pc, #332]	@ (800c40c <_vfiprintf_r+0x21c>)
 800c2c0:	f7f3 ffa6 	bl	8000210 <memchr>
 800c2c4:	9a04      	ldr	r2, [sp, #16]
 800c2c6:	b9d8      	cbnz	r0, 800c300 <_vfiprintf_r+0x110>
 800c2c8:	06d1      	lsls	r1, r2, #27
 800c2ca:	bf44      	itt	mi
 800c2cc:	2320      	movmi	r3, #32
 800c2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2d2:	0713      	lsls	r3, r2, #28
 800c2d4:	bf44      	itt	mi
 800c2d6:	232b      	movmi	r3, #43	@ 0x2b
 800c2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2e2:	d015      	beq.n	800c310 <_vfiprintf_r+0x120>
 800c2e4:	9a07      	ldr	r2, [sp, #28]
 800c2e6:	4654      	mov	r4, sl
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	f04f 0c0a 	mov.w	ip, #10
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2f4:	3b30      	subs	r3, #48	@ 0x30
 800c2f6:	2b09      	cmp	r3, #9
 800c2f8:	d94b      	bls.n	800c392 <_vfiprintf_r+0x1a2>
 800c2fa:	b1b0      	cbz	r0, 800c32a <_vfiprintf_r+0x13a>
 800c2fc:	9207      	str	r2, [sp, #28]
 800c2fe:	e014      	b.n	800c32a <_vfiprintf_r+0x13a>
 800c300:	eba0 0308 	sub.w	r3, r0, r8
 800c304:	fa09 f303 	lsl.w	r3, r9, r3
 800c308:	4313      	orrs	r3, r2
 800c30a:	9304      	str	r3, [sp, #16]
 800c30c:	46a2      	mov	sl, r4
 800c30e:	e7d2      	b.n	800c2b6 <_vfiprintf_r+0xc6>
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	1d19      	adds	r1, r3, #4
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	9103      	str	r1, [sp, #12]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	bfbb      	ittet	lt
 800c31c:	425b      	neglt	r3, r3
 800c31e:	f042 0202 	orrlt.w	r2, r2, #2
 800c322:	9307      	strge	r3, [sp, #28]
 800c324:	9307      	strlt	r3, [sp, #28]
 800c326:	bfb8      	it	lt
 800c328:	9204      	strlt	r2, [sp, #16]
 800c32a:	7823      	ldrb	r3, [r4, #0]
 800c32c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c32e:	d10a      	bne.n	800c346 <_vfiprintf_r+0x156>
 800c330:	7863      	ldrb	r3, [r4, #1]
 800c332:	2b2a      	cmp	r3, #42	@ 0x2a
 800c334:	d132      	bne.n	800c39c <_vfiprintf_r+0x1ac>
 800c336:	9b03      	ldr	r3, [sp, #12]
 800c338:	1d1a      	adds	r2, r3, #4
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	9203      	str	r2, [sp, #12]
 800c33e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c342:	3402      	adds	r4, #2
 800c344:	9305      	str	r3, [sp, #20]
 800c346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c41c <_vfiprintf_r+0x22c>
 800c34a:	7821      	ldrb	r1, [r4, #0]
 800c34c:	2203      	movs	r2, #3
 800c34e:	4650      	mov	r0, sl
 800c350:	f7f3 ff5e 	bl	8000210 <memchr>
 800c354:	b138      	cbz	r0, 800c366 <_vfiprintf_r+0x176>
 800c356:	9b04      	ldr	r3, [sp, #16]
 800c358:	eba0 000a 	sub.w	r0, r0, sl
 800c35c:	2240      	movs	r2, #64	@ 0x40
 800c35e:	4082      	lsls	r2, r0
 800c360:	4313      	orrs	r3, r2
 800c362:	3401      	adds	r4, #1
 800c364:	9304      	str	r3, [sp, #16]
 800c366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36a:	4829      	ldr	r0, [pc, #164]	@ (800c410 <_vfiprintf_r+0x220>)
 800c36c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c370:	2206      	movs	r2, #6
 800c372:	f7f3 ff4d 	bl	8000210 <memchr>
 800c376:	2800      	cmp	r0, #0
 800c378:	d03f      	beq.n	800c3fa <_vfiprintf_r+0x20a>
 800c37a:	4b26      	ldr	r3, [pc, #152]	@ (800c414 <_vfiprintf_r+0x224>)
 800c37c:	bb1b      	cbnz	r3, 800c3c6 <_vfiprintf_r+0x1d6>
 800c37e:	9b03      	ldr	r3, [sp, #12]
 800c380:	3307      	adds	r3, #7
 800c382:	f023 0307 	bic.w	r3, r3, #7
 800c386:	3308      	adds	r3, #8
 800c388:	9303      	str	r3, [sp, #12]
 800c38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c38c:	443b      	add	r3, r7
 800c38e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c390:	e76a      	b.n	800c268 <_vfiprintf_r+0x78>
 800c392:	fb0c 3202 	mla	r2, ip, r2, r3
 800c396:	460c      	mov	r4, r1
 800c398:	2001      	movs	r0, #1
 800c39a:	e7a8      	b.n	800c2ee <_vfiprintf_r+0xfe>
 800c39c:	2300      	movs	r3, #0
 800c39e:	3401      	adds	r4, #1
 800c3a0:	9305      	str	r3, [sp, #20]
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	f04f 0c0a 	mov.w	ip, #10
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ae:	3a30      	subs	r2, #48	@ 0x30
 800c3b0:	2a09      	cmp	r2, #9
 800c3b2:	d903      	bls.n	800c3bc <_vfiprintf_r+0x1cc>
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0c6      	beq.n	800c346 <_vfiprintf_r+0x156>
 800c3b8:	9105      	str	r1, [sp, #20]
 800c3ba:	e7c4      	b.n	800c346 <_vfiprintf_r+0x156>
 800c3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e7f0      	b.n	800c3a8 <_vfiprintf_r+0x1b8>
 800c3c6:	ab03      	add	r3, sp, #12
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4b12      	ldr	r3, [pc, #72]	@ (800c418 <_vfiprintf_r+0x228>)
 800c3ce:	a904      	add	r1, sp, #16
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7fd fbcb 	bl	8009b6c <_printf_float>
 800c3d6:	4607      	mov	r7, r0
 800c3d8:	1c78      	adds	r0, r7, #1
 800c3da:	d1d6      	bne.n	800c38a <_vfiprintf_r+0x19a>
 800c3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3de:	07d9      	lsls	r1, r3, #31
 800c3e0:	d405      	bmi.n	800c3ee <_vfiprintf_r+0x1fe>
 800c3e2:	89ab      	ldrh	r3, [r5, #12]
 800c3e4:	059a      	lsls	r2, r3, #22
 800c3e6:	d402      	bmi.n	800c3ee <_vfiprintf_r+0x1fe>
 800c3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3ea:	f7fe f92b 	bl	800a644 <__retarget_lock_release_recursive>
 800c3ee:	89ab      	ldrh	r3, [r5, #12]
 800c3f0:	065b      	lsls	r3, r3, #25
 800c3f2:	f53f af1f 	bmi.w	800c234 <_vfiprintf_r+0x44>
 800c3f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3f8:	e71e      	b.n	800c238 <_vfiprintf_r+0x48>
 800c3fa:	ab03      	add	r3, sp, #12
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	462a      	mov	r2, r5
 800c400:	4b05      	ldr	r3, [pc, #20]	@ (800c418 <_vfiprintf_r+0x228>)
 800c402:	a904      	add	r1, sp, #16
 800c404:	4630      	mov	r0, r6
 800c406:	f7fd fe49 	bl	800a09c <_printf_i>
 800c40a:	e7e4      	b.n	800c3d6 <_vfiprintf_r+0x1e6>
 800c40c:	080207d8 	.word	0x080207d8
 800c410:	080207e2 	.word	0x080207e2
 800c414:	08009b6d 	.word	0x08009b6d
 800c418:	0800c1cd 	.word	0x0800c1cd
 800c41c:	080207de 	.word	0x080207de

0800c420 <__swbuf_r>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	460e      	mov	r6, r1
 800c424:	4614      	mov	r4, r2
 800c426:	4605      	mov	r5, r0
 800c428:	b118      	cbz	r0, 800c432 <__swbuf_r+0x12>
 800c42a:	6a03      	ldr	r3, [r0, #32]
 800c42c:	b90b      	cbnz	r3, 800c432 <__swbuf_r+0x12>
 800c42e:	f7fd ffe1 	bl	800a3f4 <__sinit>
 800c432:	69a3      	ldr	r3, [r4, #24]
 800c434:	60a3      	str	r3, [r4, #8]
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	071a      	lsls	r2, r3, #28
 800c43a:	d501      	bpl.n	800c440 <__swbuf_r+0x20>
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	b943      	cbnz	r3, 800c452 <__swbuf_r+0x32>
 800c440:	4621      	mov	r1, r4
 800c442:	4628      	mov	r0, r5
 800c444:	f000 f82a 	bl	800c49c <__swsetup_r>
 800c448:	b118      	cbz	r0, 800c452 <__swbuf_r+0x32>
 800c44a:	f04f 37ff 	mov.w	r7, #4294967295
 800c44e:	4638      	mov	r0, r7
 800c450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	6922      	ldr	r2, [r4, #16]
 800c456:	1a98      	subs	r0, r3, r2
 800c458:	6963      	ldr	r3, [r4, #20]
 800c45a:	b2f6      	uxtb	r6, r6
 800c45c:	4283      	cmp	r3, r0
 800c45e:	4637      	mov	r7, r6
 800c460:	dc05      	bgt.n	800c46e <__swbuf_r+0x4e>
 800c462:	4621      	mov	r1, r4
 800c464:	4628      	mov	r0, r5
 800c466:	f7ff fd99 	bl	800bf9c <_fflush_r>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d1ed      	bne.n	800c44a <__swbuf_r+0x2a>
 800c46e:	68a3      	ldr	r3, [r4, #8]
 800c470:	3b01      	subs	r3, #1
 800c472:	60a3      	str	r3, [r4, #8]
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	6022      	str	r2, [r4, #0]
 800c47a:	701e      	strb	r6, [r3, #0]
 800c47c:	6962      	ldr	r2, [r4, #20]
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	429a      	cmp	r2, r3
 800c482:	d004      	beq.n	800c48e <__swbuf_r+0x6e>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	07db      	lsls	r3, r3, #31
 800c488:	d5e1      	bpl.n	800c44e <__swbuf_r+0x2e>
 800c48a:	2e0a      	cmp	r6, #10
 800c48c:	d1df      	bne.n	800c44e <__swbuf_r+0x2e>
 800c48e:	4621      	mov	r1, r4
 800c490:	4628      	mov	r0, r5
 800c492:	f7ff fd83 	bl	800bf9c <_fflush_r>
 800c496:	2800      	cmp	r0, #0
 800c498:	d0d9      	beq.n	800c44e <__swbuf_r+0x2e>
 800c49a:	e7d6      	b.n	800c44a <__swbuf_r+0x2a>

0800c49c <__swsetup_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4b29      	ldr	r3, [pc, #164]	@ (800c544 <__swsetup_r+0xa8>)
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	6818      	ldr	r0, [r3, #0]
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	b118      	cbz	r0, 800c4b0 <__swsetup_r+0x14>
 800c4a8:	6a03      	ldr	r3, [r0, #32]
 800c4aa:	b90b      	cbnz	r3, 800c4b0 <__swsetup_r+0x14>
 800c4ac:	f7fd ffa2 	bl	800a3f4 <__sinit>
 800c4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b4:	0719      	lsls	r1, r3, #28
 800c4b6:	d422      	bmi.n	800c4fe <__swsetup_r+0x62>
 800c4b8:	06da      	lsls	r2, r3, #27
 800c4ba:	d407      	bmi.n	800c4cc <__swsetup_r+0x30>
 800c4bc:	2209      	movs	r2, #9
 800c4be:	602a      	str	r2, [r5, #0]
 800c4c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4c4:	81a3      	strh	r3, [r4, #12]
 800c4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ca:	e033      	b.n	800c534 <__swsetup_r+0x98>
 800c4cc:	0758      	lsls	r0, r3, #29
 800c4ce:	d512      	bpl.n	800c4f6 <__swsetup_r+0x5a>
 800c4d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4d2:	b141      	cbz	r1, 800c4e6 <__swsetup_r+0x4a>
 800c4d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4d8:	4299      	cmp	r1, r3
 800c4da:	d002      	beq.n	800c4e2 <__swsetup_r+0x46>
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f7fe feff 	bl	800b2e0 <_free_r>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4e6:	89a3      	ldrh	r3, [r4, #12]
 800c4e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4ec:	81a3      	strh	r3, [r4, #12]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	6063      	str	r3, [r4, #4]
 800c4f2:	6923      	ldr	r3, [r4, #16]
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	89a3      	ldrh	r3, [r4, #12]
 800c4f8:	f043 0308 	orr.w	r3, r3, #8
 800c4fc:	81a3      	strh	r3, [r4, #12]
 800c4fe:	6923      	ldr	r3, [r4, #16]
 800c500:	b94b      	cbnz	r3, 800c516 <__swsetup_r+0x7a>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c50c:	d003      	beq.n	800c516 <__swsetup_r+0x7a>
 800c50e:	4621      	mov	r1, r4
 800c510:	4628      	mov	r0, r5
 800c512:	f000 f883 	bl	800c61c <__smakebuf_r>
 800c516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c51a:	f013 0201 	ands.w	r2, r3, #1
 800c51e:	d00a      	beq.n	800c536 <__swsetup_r+0x9a>
 800c520:	2200      	movs	r2, #0
 800c522:	60a2      	str	r2, [r4, #8]
 800c524:	6962      	ldr	r2, [r4, #20]
 800c526:	4252      	negs	r2, r2
 800c528:	61a2      	str	r2, [r4, #24]
 800c52a:	6922      	ldr	r2, [r4, #16]
 800c52c:	b942      	cbnz	r2, 800c540 <__swsetup_r+0xa4>
 800c52e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c532:	d1c5      	bne.n	800c4c0 <__swsetup_r+0x24>
 800c534:	bd38      	pop	{r3, r4, r5, pc}
 800c536:	0799      	lsls	r1, r3, #30
 800c538:	bf58      	it	pl
 800c53a:	6962      	ldrpl	r2, [r4, #20]
 800c53c:	60a2      	str	r2, [r4, #8]
 800c53e:	e7f4      	b.n	800c52a <__swsetup_r+0x8e>
 800c540:	2000      	movs	r0, #0
 800c542:	e7f7      	b.n	800c534 <__swsetup_r+0x98>
 800c544:	20000018 	.word	0x20000018

0800c548 <_raise_r>:
 800c548:	291f      	cmp	r1, #31
 800c54a:	b538      	push	{r3, r4, r5, lr}
 800c54c:	4605      	mov	r5, r0
 800c54e:	460c      	mov	r4, r1
 800c550:	d904      	bls.n	800c55c <_raise_r+0x14>
 800c552:	2316      	movs	r3, #22
 800c554:	6003      	str	r3, [r0, #0]
 800c556:	f04f 30ff 	mov.w	r0, #4294967295
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c55e:	b112      	cbz	r2, 800c566 <_raise_r+0x1e>
 800c560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c564:	b94b      	cbnz	r3, 800c57a <_raise_r+0x32>
 800c566:	4628      	mov	r0, r5
 800c568:	f000 f830 	bl	800c5cc <_getpid_r>
 800c56c:	4622      	mov	r2, r4
 800c56e:	4601      	mov	r1, r0
 800c570:	4628      	mov	r0, r5
 800c572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c576:	f000 b817 	b.w	800c5a8 <_kill_r>
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d00a      	beq.n	800c594 <_raise_r+0x4c>
 800c57e:	1c59      	adds	r1, r3, #1
 800c580:	d103      	bne.n	800c58a <_raise_r+0x42>
 800c582:	2316      	movs	r3, #22
 800c584:	6003      	str	r3, [r0, #0]
 800c586:	2001      	movs	r0, #1
 800c588:	e7e7      	b.n	800c55a <_raise_r+0x12>
 800c58a:	2100      	movs	r1, #0
 800c58c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c590:	4620      	mov	r0, r4
 800c592:	4798      	blx	r3
 800c594:	2000      	movs	r0, #0
 800c596:	e7e0      	b.n	800c55a <_raise_r+0x12>

0800c598 <raise>:
 800c598:	4b02      	ldr	r3, [pc, #8]	@ (800c5a4 <raise+0xc>)
 800c59a:	4601      	mov	r1, r0
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	f7ff bfd3 	b.w	800c548 <_raise_r>
 800c5a2:	bf00      	nop
 800c5a4:	20000018 	.word	0x20000018

0800c5a8 <_kill_r>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	4d07      	ldr	r5, [pc, #28]	@ (800c5c8 <_kill_r+0x20>)
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	4608      	mov	r0, r1
 800c5b2:	4611      	mov	r1, r2
 800c5b4:	602b      	str	r3, [r5, #0]
 800c5b6:	f7f6 fae7 	bl	8002b88 <_kill>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	d102      	bne.n	800c5c4 <_kill_r+0x1c>
 800c5be:	682b      	ldr	r3, [r5, #0]
 800c5c0:	b103      	cbz	r3, 800c5c4 <_kill_r+0x1c>
 800c5c2:	6023      	str	r3, [r4, #0]
 800c5c4:	bd38      	pop	{r3, r4, r5, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20018e68 	.word	0x20018e68

0800c5cc <_getpid_r>:
 800c5cc:	f7f6 bad4 	b.w	8002b78 <_getpid>

0800c5d0 <__swhatbuf_r>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d8:	2900      	cmp	r1, #0
 800c5da:	b096      	sub	sp, #88	@ 0x58
 800c5dc:	4615      	mov	r5, r2
 800c5de:	461e      	mov	r6, r3
 800c5e0:	da0d      	bge.n	800c5fe <__swhatbuf_r+0x2e>
 800c5e2:	89a3      	ldrh	r3, [r4, #12]
 800c5e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5e8:	f04f 0100 	mov.w	r1, #0
 800c5ec:	bf14      	ite	ne
 800c5ee:	2340      	movne	r3, #64	@ 0x40
 800c5f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	6031      	str	r1, [r6, #0]
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	b016      	add	sp, #88	@ 0x58
 800c5fc:	bd70      	pop	{r4, r5, r6, pc}
 800c5fe:	466a      	mov	r2, sp
 800c600:	f000 f848 	bl	800c694 <_fstat_r>
 800c604:	2800      	cmp	r0, #0
 800c606:	dbec      	blt.n	800c5e2 <__swhatbuf_r+0x12>
 800c608:	9901      	ldr	r1, [sp, #4]
 800c60a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c60e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c612:	4259      	negs	r1, r3
 800c614:	4159      	adcs	r1, r3
 800c616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c61a:	e7eb      	b.n	800c5f4 <__swhatbuf_r+0x24>

0800c61c <__smakebuf_r>:
 800c61c:	898b      	ldrh	r3, [r1, #12]
 800c61e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c620:	079d      	lsls	r5, r3, #30
 800c622:	4606      	mov	r6, r0
 800c624:	460c      	mov	r4, r1
 800c626:	d507      	bpl.n	800c638 <__smakebuf_r+0x1c>
 800c628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	6123      	str	r3, [r4, #16]
 800c630:	2301      	movs	r3, #1
 800c632:	6163      	str	r3, [r4, #20]
 800c634:	b003      	add	sp, #12
 800c636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c638:	ab01      	add	r3, sp, #4
 800c63a:	466a      	mov	r2, sp
 800c63c:	f7ff ffc8 	bl	800c5d0 <__swhatbuf_r>
 800c640:	9f00      	ldr	r7, [sp, #0]
 800c642:	4605      	mov	r5, r0
 800c644:	4639      	mov	r1, r7
 800c646:	4630      	mov	r0, r6
 800c648:	f7fe febe 	bl	800b3c8 <_malloc_r>
 800c64c:	b948      	cbnz	r0, 800c662 <__smakebuf_r+0x46>
 800c64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c652:	059a      	lsls	r2, r3, #22
 800c654:	d4ee      	bmi.n	800c634 <__smakebuf_r+0x18>
 800c656:	f023 0303 	bic.w	r3, r3, #3
 800c65a:	f043 0302 	orr.w	r3, r3, #2
 800c65e:	81a3      	strh	r3, [r4, #12]
 800c660:	e7e2      	b.n	800c628 <__smakebuf_r+0xc>
 800c662:	89a3      	ldrh	r3, [r4, #12]
 800c664:	6020      	str	r0, [r4, #0]
 800c666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c66a:	81a3      	strh	r3, [r4, #12]
 800c66c:	9b01      	ldr	r3, [sp, #4]
 800c66e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c672:	b15b      	cbz	r3, 800c68c <__smakebuf_r+0x70>
 800c674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c678:	4630      	mov	r0, r6
 800c67a:	f000 f81d 	bl	800c6b8 <_isatty_r>
 800c67e:	b128      	cbz	r0, 800c68c <__smakebuf_r+0x70>
 800c680:	89a3      	ldrh	r3, [r4, #12]
 800c682:	f023 0303 	bic.w	r3, r3, #3
 800c686:	f043 0301 	orr.w	r3, r3, #1
 800c68a:	81a3      	strh	r3, [r4, #12]
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	431d      	orrs	r5, r3
 800c690:	81a5      	strh	r5, [r4, #12]
 800c692:	e7cf      	b.n	800c634 <__smakebuf_r+0x18>

0800c694 <_fstat_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4d07      	ldr	r5, [pc, #28]	@ (800c6b4 <_fstat_r+0x20>)
 800c698:	2300      	movs	r3, #0
 800c69a:	4604      	mov	r4, r0
 800c69c:	4608      	mov	r0, r1
 800c69e:	4611      	mov	r1, r2
 800c6a0:	602b      	str	r3, [r5, #0]
 800c6a2:	f7f6 fad1 	bl	8002c48 <_fstat>
 800c6a6:	1c43      	adds	r3, r0, #1
 800c6a8:	d102      	bne.n	800c6b0 <_fstat_r+0x1c>
 800c6aa:	682b      	ldr	r3, [r5, #0]
 800c6ac:	b103      	cbz	r3, 800c6b0 <_fstat_r+0x1c>
 800c6ae:	6023      	str	r3, [r4, #0]
 800c6b0:	bd38      	pop	{r3, r4, r5, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20018e68 	.word	0x20018e68

0800c6b8 <_isatty_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4d06      	ldr	r5, [pc, #24]	@ (800c6d4 <_isatty_r+0x1c>)
 800c6bc:	2300      	movs	r3, #0
 800c6be:	4604      	mov	r4, r0
 800c6c0:	4608      	mov	r0, r1
 800c6c2:	602b      	str	r3, [r5, #0]
 800c6c4:	f7f6 fad0 	bl	8002c68 <_isatty>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_isatty_r+0x1a>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_isatty_r+0x1a>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	20018e68 	.word	0x20018e68

0800c6d8 <hypot>:
 800c6d8:	b508      	push	{r3, lr}
 800c6da:	ed2d 8b06 	vpush	{d8-d10}
 800c6de:	eeb0 aa40 	vmov.f32	s20, s0
 800c6e2:	eef0 aa60 	vmov.f32	s21, s1
 800c6e6:	eeb0 9a41 	vmov.f32	s18, s2
 800c6ea:	eef0 9a61 	vmov.f32	s19, s3
 800c6ee:	f000 f9d3 	bl	800ca98 <__ieee754_hypot>
 800c6f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c6f6:	eef0 8a60 	vmov.f32	s17, s1
 800c6fa:	f000 f9c1 	bl	800ca80 <finite>
 800c6fe:	b998      	cbnz	r0, 800c728 <hypot+0x50>
 800c700:	eeb0 0a4a 	vmov.f32	s0, s20
 800c704:	eef0 0a6a 	vmov.f32	s1, s21
 800c708:	f000 f9ba 	bl	800ca80 <finite>
 800c70c:	b160      	cbz	r0, 800c728 <hypot+0x50>
 800c70e:	eeb0 0a49 	vmov.f32	s0, s18
 800c712:	eef0 0a69 	vmov.f32	s1, s19
 800c716:	f000 f9b3 	bl	800ca80 <finite>
 800c71a:	b128      	cbz	r0, 800c728 <hypot+0x50>
 800c71c:	f7fd ff66 	bl	800a5ec <__errno>
 800c720:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800c738 <hypot+0x60>
 800c724:	2322      	movs	r3, #34	@ 0x22
 800c726:	6003      	str	r3, [r0, #0]
 800c728:	eeb0 0a48 	vmov.f32	s0, s16
 800c72c:	eef0 0a68 	vmov.f32	s1, s17
 800c730:	ecbd 8b06 	vpop	{d8-d10}
 800c734:	bd08      	pop	{r3, pc}
 800c736:	bf00      	nop
 800c738:	00000000 	.word	0x00000000
 800c73c:	7ff00000 	.word	0x7ff00000

0800c740 <atan>:
 800c740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	ec55 4b10 	vmov	r4, r5, d0
 800c748:	4bbf      	ldr	r3, [pc, #764]	@ (800ca48 <atan+0x308>)
 800c74a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c74e:	429e      	cmp	r6, r3
 800c750:	46ab      	mov	fp, r5
 800c752:	d918      	bls.n	800c786 <atan+0x46>
 800c754:	4bbd      	ldr	r3, [pc, #756]	@ (800ca4c <atan+0x30c>)
 800c756:	429e      	cmp	r6, r3
 800c758:	d801      	bhi.n	800c75e <atan+0x1e>
 800c75a:	d109      	bne.n	800c770 <atan+0x30>
 800c75c:	b144      	cbz	r4, 800c770 <atan+0x30>
 800c75e:	4622      	mov	r2, r4
 800c760:	462b      	mov	r3, r5
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	f7f3 fdb1 	bl	80002cc <__adddf3>
 800c76a:	4604      	mov	r4, r0
 800c76c:	460d      	mov	r5, r1
 800c76e:	e006      	b.n	800c77e <atan+0x3e>
 800c770:	f1bb 0f00 	cmp.w	fp, #0
 800c774:	f340 812b 	ble.w	800c9ce <atan+0x28e>
 800c778:	a597      	add	r5, pc, #604	@ (adr r5, 800c9d8 <atan+0x298>)
 800c77a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c77e:	ec45 4b10 	vmov	d0, r4, r5
 800c782:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c786:	4bb2      	ldr	r3, [pc, #712]	@ (800ca50 <atan+0x310>)
 800c788:	429e      	cmp	r6, r3
 800c78a:	d813      	bhi.n	800c7b4 <atan+0x74>
 800c78c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c790:	429e      	cmp	r6, r3
 800c792:	d80c      	bhi.n	800c7ae <atan+0x6e>
 800c794:	a392      	add	r3, pc, #584	@ (adr r3, 800c9e0 <atan+0x2a0>)
 800c796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79a:	4620      	mov	r0, r4
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7f3 fd95 	bl	80002cc <__adddf3>
 800c7a2:	4bac      	ldr	r3, [pc, #688]	@ (800ca54 <atan+0x314>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f7f4 f9d7 	bl	8000b58 <__aeabi_dcmpgt>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d1e7      	bne.n	800c77e <atan+0x3e>
 800c7ae:	f04f 3aff 	mov.w	sl, #4294967295
 800c7b2:	e029      	b.n	800c808 <atan+0xc8>
 800c7b4:	f000 f95c 	bl	800ca70 <fabs>
 800c7b8:	4ba7      	ldr	r3, [pc, #668]	@ (800ca58 <atan+0x318>)
 800c7ba:	429e      	cmp	r6, r3
 800c7bc:	ec55 4b10 	vmov	r4, r5, d0
 800c7c0:	f200 80bc 	bhi.w	800c93c <atan+0x1fc>
 800c7c4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c7c8:	429e      	cmp	r6, r3
 800c7ca:	f200 809e 	bhi.w	800c90a <atan+0x1ca>
 800c7ce:	4622      	mov	r2, r4
 800c7d0:	462b      	mov	r3, r5
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	f7f3 fd79 	bl	80002cc <__adddf3>
 800c7da:	4b9e      	ldr	r3, [pc, #632]	@ (800ca54 <atan+0x314>)
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f7f3 fd73 	bl	80002c8 <__aeabi_dsub>
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	460f      	mov	r7, r1
 800c7e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	f7f3 fd6c 	bl	80002cc <__adddf3>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f4 f846 	bl	800088c <__aeabi_ddiv>
 800c800:	f04f 0a00 	mov.w	sl, #0
 800c804:	4604      	mov	r4, r0
 800c806:	460d      	mov	r5, r1
 800c808:	4622      	mov	r2, r4
 800c80a:	462b      	mov	r3, r5
 800c80c:	4620      	mov	r0, r4
 800c80e:	4629      	mov	r1, r5
 800c810:	f7f3 ff12 	bl	8000638 <__aeabi_dmul>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4680      	mov	r8, r0
 800c81a:	4689      	mov	r9, r1
 800c81c:	f7f3 ff0c 	bl	8000638 <__aeabi_dmul>
 800c820:	a371      	add	r3, pc, #452	@ (adr r3, 800c9e8 <atan+0x2a8>)
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c826:	4606      	mov	r6, r0
 800c828:	460f      	mov	r7, r1
 800c82a:	f7f3 ff05 	bl	8000638 <__aeabi_dmul>
 800c82e:	a370      	add	r3, pc, #448	@ (adr r3, 800c9f0 <atan+0x2b0>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7f3 fd4a 	bl	80002cc <__adddf3>
 800c838:	4632      	mov	r2, r6
 800c83a:	463b      	mov	r3, r7
 800c83c:	f7f3 fefc 	bl	8000638 <__aeabi_dmul>
 800c840:	a36d      	add	r3, pc, #436	@ (adr r3, 800c9f8 <atan+0x2b8>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7f3 fd41 	bl	80002cc <__adddf3>
 800c84a:	4632      	mov	r2, r6
 800c84c:	463b      	mov	r3, r7
 800c84e:	f7f3 fef3 	bl	8000638 <__aeabi_dmul>
 800c852:	a36b      	add	r3, pc, #428	@ (adr r3, 800ca00 <atan+0x2c0>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f3 fd38 	bl	80002cc <__adddf3>
 800c85c:	4632      	mov	r2, r6
 800c85e:	463b      	mov	r3, r7
 800c860:	f7f3 feea 	bl	8000638 <__aeabi_dmul>
 800c864:	a368      	add	r3, pc, #416	@ (adr r3, 800ca08 <atan+0x2c8>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f7f3 fd2f 	bl	80002cc <__adddf3>
 800c86e:	4632      	mov	r2, r6
 800c870:	463b      	mov	r3, r7
 800c872:	f7f3 fee1 	bl	8000638 <__aeabi_dmul>
 800c876:	a366      	add	r3, pc, #408	@ (adr r3, 800ca10 <atan+0x2d0>)
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f7f3 fd26 	bl	80002cc <__adddf3>
 800c880:	4642      	mov	r2, r8
 800c882:	464b      	mov	r3, r9
 800c884:	f7f3 fed8 	bl	8000638 <__aeabi_dmul>
 800c888:	a363      	add	r3, pc, #396	@ (adr r3, 800ca18 <atan+0x2d8>)
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	4680      	mov	r8, r0
 800c890:	4689      	mov	r9, r1
 800c892:	4630      	mov	r0, r6
 800c894:	4639      	mov	r1, r7
 800c896:	f7f3 fecf 	bl	8000638 <__aeabi_dmul>
 800c89a:	a361      	add	r3, pc, #388	@ (adr r3, 800ca20 <atan+0x2e0>)
 800c89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a0:	f7f3 fd12 	bl	80002c8 <__aeabi_dsub>
 800c8a4:	4632      	mov	r2, r6
 800c8a6:	463b      	mov	r3, r7
 800c8a8:	f7f3 fec6 	bl	8000638 <__aeabi_dmul>
 800c8ac:	a35e      	add	r3, pc, #376	@ (adr r3, 800ca28 <atan+0x2e8>)
 800c8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b2:	f7f3 fd09 	bl	80002c8 <__aeabi_dsub>
 800c8b6:	4632      	mov	r2, r6
 800c8b8:	463b      	mov	r3, r7
 800c8ba:	f7f3 febd 	bl	8000638 <__aeabi_dmul>
 800c8be:	a35c      	add	r3, pc, #368	@ (adr r3, 800ca30 <atan+0x2f0>)
 800c8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c4:	f7f3 fd00 	bl	80002c8 <__aeabi_dsub>
 800c8c8:	4632      	mov	r2, r6
 800c8ca:	463b      	mov	r3, r7
 800c8cc:	f7f3 feb4 	bl	8000638 <__aeabi_dmul>
 800c8d0:	a359      	add	r3, pc, #356	@ (adr r3, 800ca38 <atan+0x2f8>)
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f7f3 fcf7 	bl	80002c8 <__aeabi_dsub>
 800c8da:	4632      	mov	r2, r6
 800c8dc:	463b      	mov	r3, r7
 800c8de:	f7f3 feab 	bl	8000638 <__aeabi_dmul>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	4649      	mov	r1, r9
 800c8ea:	f7f3 fcef 	bl	80002cc <__adddf3>
 800c8ee:	4622      	mov	r2, r4
 800c8f0:	462b      	mov	r3, r5
 800c8f2:	f7f3 fea1 	bl	8000638 <__aeabi_dmul>
 800c8f6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	d148      	bne.n	800c992 <atan+0x252>
 800c900:	4620      	mov	r0, r4
 800c902:	4629      	mov	r1, r5
 800c904:	f7f3 fce0 	bl	80002c8 <__aeabi_dsub>
 800c908:	e72f      	b.n	800c76a <atan+0x2a>
 800c90a:	4b52      	ldr	r3, [pc, #328]	@ (800ca54 <atan+0x314>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	4620      	mov	r0, r4
 800c910:	4629      	mov	r1, r5
 800c912:	f7f3 fcd9 	bl	80002c8 <__aeabi_dsub>
 800c916:	4b4f      	ldr	r3, [pc, #316]	@ (800ca54 <atan+0x314>)
 800c918:	4606      	mov	r6, r0
 800c91a:	460f      	mov	r7, r1
 800c91c:	2200      	movs	r2, #0
 800c91e:	4620      	mov	r0, r4
 800c920:	4629      	mov	r1, r5
 800c922:	f7f3 fcd3 	bl	80002cc <__adddf3>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 ffad 	bl	800088c <__aeabi_ddiv>
 800c932:	f04f 0a01 	mov.w	sl, #1
 800c936:	4604      	mov	r4, r0
 800c938:	460d      	mov	r5, r1
 800c93a:	e765      	b.n	800c808 <atan+0xc8>
 800c93c:	4b47      	ldr	r3, [pc, #284]	@ (800ca5c <atan+0x31c>)
 800c93e:	429e      	cmp	r6, r3
 800c940:	d21c      	bcs.n	800c97c <atan+0x23c>
 800c942:	4b47      	ldr	r3, [pc, #284]	@ (800ca60 <atan+0x320>)
 800c944:	2200      	movs	r2, #0
 800c946:	4620      	mov	r0, r4
 800c948:	4629      	mov	r1, r5
 800c94a:	f7f3 fcbd 	bl	80002c8 <__aeabi_dsub>
 800c94e:	4b44      	ldr	r3, [pc, #272]	@ (800ca60 <atan+0x320>)
 800c950:	4606      	mov	r6, r0
 800c952:	460f      	mov	r7, r1
 800c954:	2200      	movs	r2, #0
 800c956:	4620      	mov	r0, r4
 800c958:	4629      	mov	r1, r5
 800c95a:	f7f3 fe6d 	bl	8000638 <__aeabi_dmul>
 800c95e:	4b3d      	ldr	r3, [pc, #244]	@ (800ca54 <atan+0x314>)
 800c960:	2200      	movs	r2, #0
 800c962:	f7f3 fcb3 	bl	80002cc <__adddf3>
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	4630      	mov	r0, r6
 800c96c:	4639      	mov	r1, r7
 800c96e:	f7f3 ff8d 	bl	800088c <__aeabi_ddiv>
 800c972:	f04f 0a02 	mov.w	sl, #2
 800c976:	4604      	mov	r4, r0
 800c978:	460d      	mov	r5, r1
 800c97a:	e745      	b.n	800c808 <atan+0xc8>
 800c97c:	4622      	mov	r2, r4
 800c97e:	462b      	mov	r3, r5
 800c980:	4938      	ldr	r1, [pc, #224]	@ (800ca64 <atan+0x324>)
 800c982:	2000      	movs	r0, #0
 800c984:	f7f3 ff82 	bl	800088c <__aeabi_ddiv>
 800c988:	f04f 0a03 	mov.w	sl, #3
 800c98c:	4604      	mov	r4, r0
 800c98e:	460d      	mov	r5, r1
 800c990:	e73a      	b.n	800c808 <atan+0xc8>
 800c992:	4b35      	ldr	r3, [pc, #212]	@ (800ca68 <atan+0x328>)
 800c994:	4e35      	ldr	r6, [pc, #212]	@ (800ca6c <atan+0x32c>)
 800c996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7f3 fc93 	bl	80002c8 <__aeabi_dsub>
 800c9a2:	4622      	mov	r2, r4
 800c9a4:	462b      	mov	r3, r5
 800c9a6:	f7f3 fc8f 	bl	80002c8 <__aeabi_dsub>
 800c9aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c9b6:	f7f3 fc87 	bl	80002c8 <__aeabi_dsub>
 800c9ba:	f1bb 0f00 	cmp.w	fp, #0
 800c9be:	4604      	mov	r4, r0
 800c9c0:	460d      	mov	r5, r1
 800c9c2:	f6bf aedc 	bge.w	800c77e <atan+0x3e>
 800c9c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c9ca:	461d      	mov	r5, r3
 800c9cc:	e6d7      	b.n	800c77e <atan+0x3e>
 800c9ce:	a51c      	add	r5, pc, #112	@ (adr r5, 800ca40 <atan+0x300>)
 800c9d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c9d4:	e6d3      	b.n	800c77e <atan+0x3e>
 800c9d6:	bf00      	nop
 800c9d8:	54442d18 	.word	0x54442d18
 800c9dc:	3ff921fb 	.word	0x3ff921fb
 800c9e0:	8800759c 	.word	0x8800759c
 800c9e4:	7e37e43c 	.word	0x7e37e43c
 800c9e8:	e322da11 	.word	0xe322da11
 800c9ec:	3f90ad3a 	.word	0x3f90ad3a
 800c9f0:	24760deb 	.word	0x24760deb
 800c9f4:	3fa97b4b 	.word	0x3fa97b4b
 800c9f8:	a0d03d51 	.word	0xa0d03d51
 800c9fc:	3fb10d66 	.word	0x3fb10d66
 800ca00:	c54c206e 	.word	0xc54c206e
 800ca04:	3fb745cd 	.word	0x3fb745cd
 800ca08:	920083ff 	.word	0x920083ff
 800ca0c:	3fc24924 	.word	0x3fc24924
 800ca10:	5555550d 	.word	0x5555550d
 800ca14:	3fd55555 	.word	0x3fd55555
 800ca18:	2c6a6c2f 	.word	0x2c6a6c2f
 800ca1c:	bfa2b444 	.word	0xbfa2b444
 800ca20:	52defd9a 	.word	0x52defd9a
 800ca24:	3fadde2d 	.word	0x3fadde2d
 800ca28:	af749a6d 	.word	0xaf749a6d
 800ca2c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ca30:	fe231671 	.word	0xfe231671
 800ca34:	3fbc71c6 	.word	0x3fbc71c6
 800ca38:	9998ebc4 	.word	0x9998ebc4
 800ca3c:	3fc99999 	.word	0x3fc99999
 800ca40:	54442d18 	.word	0x54442d18
 800ca44:	bff921fb 	.word	0xbff921fb
 800ca48:	440fffff 	.word	0x440fffff
 800ca4c:	7ff00000 	.word	0x7ff00000
 800ca50:	3fdbffff 	.word	0x3fdbffff
 800ca54:	3ff00000 	.word	0x3ff00000
 800ca58:	3ff2ffff 	.word	0x3ff2ffff
 800ca5c:	40038000 	.word	0x40038000
 800ca60:	3ff80000 	.word	0x3ff80000
 800ca64:	bff00000 	.word	0xbff00000
 800ca68:	08020930 	.word	0x08020930
 800ca6c:	08020950 	.word	0x08020950

0800ca70 <fabs>:
 800ca70:	ec51 0b10 	vmov	r0, r1, d0
 800ca74:	4602      	mov	r2, r0
 800ca76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ca7a:	ec43 2b10 	vmov	d0, r2, r3
 800ca7e:	4770      	bx	lr

0800ca80 <finite>:
 800ca80:	b082      	sub	sp, #8
 800ca82:	ed8d 0b00 	vstr	d0, [sp]
 800ca86:	9801      	ldr	r0, [sp, #4]
 800ca88:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ca8c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ca90:	0fc0      	lsrs	r0, r0, #31
 800ca92:	b002      	add	sp, #8
 800ca94:	4770      	bx	lr
	...

0800ca98 <__ieee754_hypot>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	ec51 0b10 	vmov	r0, r1, d0
 800caa0:	ec53 2b11 	vmov	r2, r3, d1
 800caa4:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800caa8:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800caac:	42a5      	cmp	r5, r4
 800caae:	b087      	sub	sp, #28
 800cab0:	da05      	bge.n	800cabe <__ieee754_hypot+0x26>
 800cab2:	462e      	mov	r6, r5
 800cab4:	4625      	mov	r5, r4
 800cab6:	4634      	mov	r4, r6
 800cab8:	4606      	mov	r6, r0
 800caba:	4610      	mov	r0, r2
 800cabc:	4632      	mov	r2, r6
 800cabe:	1b2b      	subs	r3, r5, r4
 800cac0:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800cac4:	4629      	mov	r1, r5
 800cac6:	4682      	mov	sl, r0
 800cac8:	46ab      	mov	fp, r5
 800caca:	4616      	mov	r6, r2
 800cacc:	4627      	mov	r7, r4
 800cace:	dd05      	ble.n	800cadc <__ieee754_hypot+0x44>
 800cad0:	4623      	mov	r3, r4
 800cad2:	f7f3 fbfb 	bl	80002cc <__adddf3>
 800cad6:	4682      	mov	sl, r0
 800cad8:	468b      	mov	fp, r1
 800cada:	e016      	b.n	800cb0a <__ieee754_hypot+0x72>
 800cadc:	4b75      	ldr	r3, [pc, #468]	@ (800ccb4 <__ieee754_hypot+0x21c>)
 800cade:	429d      	cmp	r5, r3
 800cae0:	f340 8096 	ble.w	800cc10 <__ieee754_hypot+0x178>
 800cae4:	4b74      	ldr	r3, [pc, #464]	@ (800ccb8 <__ieee754_hypot+0x220>)
 800cae6:	429d      	cmp	r5, r3
 800cae8:	dd14      	ble.n	800cb14 <__ieee754_hypot+0x7c>
 800caea:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800caee:	4305      	orrs	r5, r0
 800caf0:	d004      	beq.n	800cafc <__ieee754_hypot+0x64>
 800caf2:	4623      	mov	r3, r4
 800caf4:	f7f3 fbea 	bl	80002cc <__adddf3>
 800caf8:	4682      	mov	sl, r0
 800cafa:	468b      	mov	fp, r1
 800cafc:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800cb00:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800cb04:	4334      	orrs	r4, r6
 800cb06:	f000 80d2 	beq.w	800ccae <__ieee754_hypot+0x216>
 800cb0a:	ec4b ab10 	vmov	d0, sl, fp
 800cb0e:	b007      	add	sp, #28
 800cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb14:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800cb18:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800cb1c:	46ab      	mov	fp, r5
 800cb1e:	4627      	mov	r7, r4
 800cb20:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	4b65      	ldr	r3, [pc, #404]	@ (800ccbc <__ieee754_hypot+0x224>)
 800cb28:	429c      	cmp	r4, r3
 800cb2a:	dc19      	bgt.n	800cb60 <__ieee754_hypot+0xc8>
 800cb2c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800cb30:	da70      	bge.n	800cc14 <__ieee754_hypot+0x17c>
 800cb32:	4633      	mov	r3, r6
 800cb34:	4323      	orrs	r3, r4
 800cb36:	d0e8      	beq.n	800cb0a <__ieee754_hypot+0x72>
 800cb38:	4b61      	ldr	r3, [pc, #388]	@ (800ccc0 <__ieee754_hypot+0x228>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	4639      	mov	r1, r7
 800cb40:	f7f3 fd7a 	bl	8000638 <__aeabi_dmul>
 800cb44:	4b5e      	ldr	r3, [pc, #376]	@ (800ccc0 <__ieee754_hypot+0x228>)
 800cb46:	4606      	mov	r6, r0
 800cb48:	460f      	mov	r7, r1
 800cb4a:	4650      	mov	r0, sl
 800cb4c:	4659      	mov	r1, fp
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f7f3 fd72 	bl	8000638 <__aeabi_dmul>
 800cb54:	9b01      	ldr	r3, [sp, #4]
 800cb56:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800cb5a:	4682      	mov	sl, r0
 800cb5c:	468b      	mov	fp, r1
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	4632      	mov	r2, r6
 800cb62:	463b      	mov	r3, r7
 800cb64:	4650      	mov	r0, sl
 800cb66:	4659      	mov	r1, fp
 800cb68:	f7f3 fbae 	bl	80002c8 <__aeabi_dsub>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4680      	mov	r8, r0
 800cb72:	4689      	mov	r9, r1
 800cb74:	4630      	mov	r0, r6
 800cb76:	4639      	mov	r1, r7
 800cb78:	f7f3 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d053      	beq.n	800cc2a <__ieee754_hypot+0x192>
 800cb82:	462b      	mov	r3, r5
 800cb84:	4610      	mov	r0, r2
 800cb86:	4629      	mov	r1, r5
 800cb88:	4614      	mov	r4, r2
 800cb8a:	f7f3 fd55 	bl	8000638 <__aeabi_dmul>
 800cb8e:	4632      	mov	r2, r6
 800cb90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb94:	463b      	mov	r3, r7
 800cb96:	4630      	mov	r0, r6
 800cb98:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800cb9c:	f7f3 fd4c 	bl	8000638 <__aeabi_dmul>
 800cba0:	4622      	mov	r2, r4
 800cba2:	4606      	mov	r6, r0
 800cba4:	460f      	mov	r7, r1
 800cba6:	462b      	mov	r3, r5
 800cba8:	4650      	mov	r0, sl
 800cbaa:	4659      	mov	r1, fp
 800cbac:	f7f3 fb8e 	bl	80002cc <__adddf3>
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	4680      	mov	r8, r0
 800cbb4:	4689      	mov	r9, r1
 800cbb6:	462b      	mov	r3, r5
 800cbb8:	4650      	mov	r0, sl
 800cbba:	4659      	mov	r1, fp
 800cbbc:	f7f3 fb84 	bl	80002c8 <__aeabi_dsub>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	f7f3 fd36 	bl	8000638 <__aeabi_dmul>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	f7f3 fb78 	bl	80002c8 <__aeabi_dsub>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe0:	f7f3 fb72 	bl	80002c8 <__aeabi_dsub>
 800cbe4:	ec41 0b10 	vmov	d0, r0, r1
 800cbe8:	f000 f86c 	bl	800ccc4 <__ieee754_sqrt>
 800cbec:	9b01      	ldr	r3, [sp, #4]
 800cbee:	ec5b ab10 	vmov	sl, fp, d0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d089      	beq.n	800cb0a <__ieee754_hypot+0x72>
 800cbf6:	051b      	lsls	r3, r3, #20
 800cbf8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4650      	mov	r0, sl
 800cc08:	4659      	mov	r1, fp
 800cc0a:	f7f3 fd15 	bl	8000638 <__aeabi_dmul>
 800cc0e:	e762      	b.n	800cad6 <__ieee754_hypot+0x3e>
 800cc10:	2300      	movs	r3, #0
 800cc12:	e787      	b.n	800cb24 <__ieee754_hypot+0x8c>
 800cc14:	9b01      	ldr	r3, [sp, #4]
 800cc16:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800cc1a:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800cc1e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800cc22:	9301      	str	r3, [sp, #4]
 800cc24:	46ab      	mov	fp, r5
 800cc26:	4627      	mov	r7, r4
 800cc28:	e79a      	b.n	800cb60 <__ieee754_hypot+0xc8>
 800cc2a:	4623      	mov	r3, r4
 800cc2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc34:	2200      	movs	r2, #0
 800cc36:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800cc3a:	4614      	mov	r4, r2
 800cc3c:	461d      	mov	r5, r3
 800cc3e:	f7f3 fcfb 	bl	8000638 <__aeabi_dmul>
 800cc42:	4642      	mov	r2, r8
 800cc44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc48:	464b      	mov	r3, r9
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800cc50:	f7f3 fcf2 	bl	8000638 <__aeabi_dmul>
 800cc54:	4652      	mov	r2, sl
 800cc56:	465b      	mov	r3, fp
 800cc58:	4680      	mov	r8, r0
 800cc5a:	4689      	mov	r9, r1
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	4659      	mov	r1, fp
 800cc60:	f7f3 fb34 	bl	80002cc <__adddf3>
 800cc64:	4622      	mov	r2, r4
 800cc66:	462b      	mov	r3, r5
 800cc68:	f7f3 fb2e 	bl	80002c8 <__aeabi_dsub>
 800cc6c:	4632      	mov	r2, r6
 800cc6e:	463b      	mov	r3, r7
 800cc70:	f7f3 fce2 	bl	8000638 <__aeabi_dmul>
 800cc74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc78:	4682      	mov	sl, r0
 800cc7a:	468b      	mov	fp, r1
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	4639      	mov	r1, r7
 800cc80:	f7f3 fb22 	bl	80002c8 <__aeabi_dsub>
 800cc84:	4622      	mov	r2, r4
 800cc86:	462b      	mov	r3, r5
 800cc88:	f7f3 fcd6 	bl	8000638 <__aeabi_dmul>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4650      	mov	r0, sl
 800cc92:	4659      	mov	r1, fp
 800cc94:	f7f3 fb1a 	bl	80002cc <__adddf3>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	4649      	mov	r1, r9
 800cca0:	f7f3 fb12 	bl	80002c8 <__aeabi_dsub>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccac:	e798      	b.n	800cbe0 <__ieee754_hypot+0x148>
 800ccae:	46b2      	mov	sl, r6
 800ccb0:	46bb      	mov	fp, r7
 800ccb2:	e72a      	b.n	800cb0a <__ieee754_hypot+0x72>
 800ccb4:	5f300000 	.word	0x5f300000
 800ccb8:	7fefffff 	.word	0x7fefffff
 800ccbc:	20afffff 	.word	0x20afffff
 800ccc0:	7fd00000 	.word	0x7fd00000

0800ccc4 <__ieee754_sqrt>:
 800ccc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	4a68      	ldr	r2, [pc, #416]	@ (800ce6c <__ieee754_sqrt+0x1a8>)
 800ccca:	ec55 4b10 	vmov	r4, r5, d0
 800ccce:	43aa      	bics	r2, r5
 800ccd0:	462b      	mov	r3, r5
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	d110      	bne.n	800ccf8 <__ieee754_sqrt+0x34>
 800ccd6:	4622      	mov	r2, r4
 800ccd8:	4620      	mov	r0, r4
 800ccda:	4629      	mov	r1, r5
 800ccdc:	f7f3 fcac 	bl	8000638 <__aeabi_dmul>
 800cce0:	4602      	mov	r2, r0
 800cce2:	460b      	mov	r3, r1
 800cce4:	4620      	mov	r0, r4
 800cce6:	4629      	mov	r1, r5
 800cce8:	f7f3 faf0 	bl	80002cc <__adddf3>
 800ccec:	4604      	mov	r4, r0
 800ccee:	460d      	mov	r5, r1
 800ccf0:	ec45 4b10 	vmov	d0, r4, r5
 800ccf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf8:	2d00      	cmp	r5, #0
 800ccfa:	dc0e      	bgt.n	800cd1a <__ieee754_sqrt+0x56>
 800ccfc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cd00:	4322      	orrs	r2, r4
 800cd02:	d0f5      	beq.n	800ccf0 <__ieee754_sqrt+0x2c>
 800cd04:	b19d      	cbz	r5, 800cd2e <__ieee754_sqrt+0x6a>
 800cd06:	4622      	mov	r2, r4
 800cd08:	4620      	mov	r0, r4
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	f7f3 fadc 	bl	80002c8 <__aeabi_dsub>
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	f7f3 fdba 	bl	800088c <__aeabi_ddiv>
 800cd18:	e7e8      	b.n	800ccec <__ieee754_sqrt+0x28>
 800cd1a:	152a      	asrs	r2, r5, #20
 800cd1c:	d115      	bne.n	800cd4a <__ieee754_sqrt+0x86>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	e009      	b.n	800cd36 <__ieee754_sqrt+0x72>
 800cd22:	0acb      	lsrs	r3, r1, #11
 800cd24:	3a15      	subs	r2, #21
 800cd26:	0549      	lsls	r1, r1, #21
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d0fa      	beq.n	800cd22 <__ieee754_sqrt+0x5e>
 800cd2c:	e7f7      	b.n	800cd1e <__ieee754_sqrt+0x5a>
 800cd2e:	462a      	mov	r2, r5
 800cd30:	e7fa      	b.n	800cd28 <__ieee754_sqrt+0x64>
 800cd32:	005b      	lsls	r3, r3, #1
 800cd34:	3001      	adds	r0, #1
 800cd36:	02dc      	lsls	r4, r3, #11
 800cd38:	d5fb      	bpl.n	800cd32 <__ieee754_sqrt+0x6e>
 800cd3a:	1e44      	subs	r4, r0, #1
 800cd3c:	1b12      	subs	r2, r2, r4
 800cd3e:	f1c0 0420 	rsb	r4, r0, #32
 800cd42:	fa21 f404 	lsr.w	r4, r1, r4
 800cd46:	4323      	orrs	r3, r4
 800cd48:	4081      	lsls	r1, r0
 800cd4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd4e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cd52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd56:	07d2      	lsls	r2, r2, #31
 800cd58:	bf5c      	itt	pl
 800cd5a:	005b      	lslpl	r3, r3, #1
 800cd5c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cd60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd64:	bf58      	it	pl
 800cd66:	0049      	lslpl	r1, r1, #1
 800cd68:	2600      	movs	r6, #0
 800cd6a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cd6e:	106d      	asrs	r5, r5, #1
 800cd70:	0049      	lsls	r1, r1, #1
 800cd72:	2016      	movs	r0, #22
 800cd74:	4632      	mov	r2, r6
 800cd76:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cd7a:	1917      	adds	r7, r2, r4
 800cd7c:	429f      	cmp	r7, r3
 800cd7e:	bfde      	ittt	le
 800cd80:	193a      	addle	r2, r7, r4
 800cd82:	1bdb      	suble	r3, r3, r7
 800cd84:	1936      	addle	r6, r6, r4
 800cd86:	0fcf      	lsrs	r7, r1, #31
 800cd88:	3801      	subs	r0, #1
 800cd8a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800cd8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cd92:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cd96:	d1f0      	bne.n	800cd7a <__ieee754_sqrt+0xb6>
 800cd98:	4604      	mov	r4, r0
 800cd9a:	2720      	movs	r7, #32
 800cd9c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cda0:	429a      	cmp	r2, r3
 800cda2:	eb00 0e0c 	add.w	lr, r0, ip
 800cda6:	db02      	blt.n	800cdae <__ieee754_sqrt+0xea>
 800cda8:	d113      	bne.n	800cdd2 <__ieee754_sqrt+0x10e>
 800cdaa:	458e      	cmp	lr, r1
 800cdac:	d811      	bhi.n	800cdd2 <__ieee754_sqrt+0x10e>
 800cdae:	f1be 0f00 	cmp.w	lr, #0
 800cdb2:	eb0e 000c 	add.w	r0, lr, ip
 800cdb6:	da42      	bge.n	800ce3e <__ieee754_sqrt+0x17a>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	db40      	blt.n	800ce3e <__ieee754_sqrt+0x17a>
 800cdbc:	f102 0801 	add.w	r8, r2, #1
 800cdc0:	1a9b      	subs	r3, r3, r2
 800cdc2:	458e      	cmp	lr, r1
 800cdc4:	bf88      	it	hi
 800cdc6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cdca:	eba1 010e 	sub.w	r1, r1, lr
 800cdce:	4464      	add	r4, ip
 800cdd0:	4642      	mov	r2, r8
 800cdd2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cdd6:	3f01      	subs	r7, #1
 800cdd8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cddc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cde0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cde4:	d1dc      	bne.n	800cda0 <__ieee754_sqrt+0xdc>
 800cde6:	4319      	orrs	r1, r3
 800cde8:	d01b      	beq.n	800ce22 <__ieee754_sqrt+0x15e>
 800cdea:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ce70 <__ieee754_sqrt+0x1ac>
 800cdee:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ce74 <__ieee754_sqrt+0x1b0>
 800cdf2:	e9da 0100 	ldrd	r0, r1, [sl]
 800cdf6:	e9db 2300 	ldrd	r2, r3, [fp]
 800cdfa:	f7f3 fa65 	bl	80002c8 <__aeabi_dsub>
 800cdfe:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	4640      	mov	r0, r8
 800ce08:	4649      	mov	r1, r9
 800ce0a:	f7f3 fe91 	bl	8000b30 <__aeabi_dcmple>
 800ce0e:	b140      	cbz	r0, 800ce22 <__ieee754_sqrt+0x15e>
 800ce10:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ce14:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce18:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce1c:	d111      	bne.n	800ce42 <__ieee754_sqrt+0x17e>
 800ce1e:	3601      	adds	r6, #1
 800ce20:	463c      	mov	r4, r7
 800ce22:	1072      	asrs	r2, r6, #1
 800ce24:	0863      	lsrs	r3, r4, #1
 800ce26:	07f1      	lsls	r1, r6, #31
 800ce28:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ce2c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ce30:	bf48      	it	mi
 800ce32:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ce36:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	e756      	b.n	800ccec <__ieee754_sqrt+0x28>
 800ce3e:	4690      	mov	r8, r2
 800ce40:	e7be      	b.n	800cdc0 <__ieee754_sqrt+0xfc>
 800ce42:	f7f3 fa43 	bl	80002cc <__adddf3>
 800ce46:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4640      	mov	r0, r8
 800ce50:	4649      	mov	r1, r9
 800ce52:	f7f3 fe63 	bl	8000b1c <__aeabi_dcmplt>
 800ce56:	b120      	cbz	r0, 800ce62 <__ieee754_sqrt+0x19e>
 800ce58:	1ca0      	adds	r0, r4, #2
 800ce5a:	bf08      	it	eq
 800ce5c:	3601      	addeq	r6, #1
 800ce5e:	3402      	adds	r4, #2
 800ce60:	e7df      	b.n	800ce22 <__ieee754_sqrt+0x15e>
 800ce62:	1c63      	adds	r3, r4, #1
 800ce64:	f023 0401 	bic.w	r4, r3, #1
 800ce68:	e7db      	b.n	800ce22 <__ieee754_sqrt+0x15e>
 800ce6a:	bf00      	nop
 800ce6c:	7ff00000 	.word	0x7ff00000
 800ce70:	200001e0 	.word	0x200001e0
 800ce74:	200001d8 	.word	0x200001d8

0800ce78 <_init>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	bf00      	nop
 800ce7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7e:	bc08      	pop	{r3}
 800ce80:	469e      	mov	lr, r3
 800ce82:	4770      	bx	lr

0800ce84 <_fini>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr
