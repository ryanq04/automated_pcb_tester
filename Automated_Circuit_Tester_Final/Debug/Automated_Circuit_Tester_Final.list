
Automated_Circuit_Tester_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d510  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013ac8  0800d6e0  0800d6e0  0000e6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080211a8  080211a8  000231e8  2**0
                  CONTENTS
  4 .ARM          00000008  080211a8  080211a8  000221a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080211b0  080211b0  000231e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080211b0  080211b0  000221b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080211b4  080211b4  000221b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080211b8  00023000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018c8c  200001e8  080213a0  000231e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20018e74  080213a0  00023e74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000231e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c95  00000000  00000000  00023218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b0a  00000000  00000000  0003cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  000409b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001028  00000000  00000000  00041ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ab  00000000  00000000  00042ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d927  00000000  00000000  0004857b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e56d2  00000000  00000000  00065ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0014b574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  0014b628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00151f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001a6  00000000  00000000  00151fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00152187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d6c8 	.word	0x0800d6c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800d6c8 	.word	0x0800d6c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <send_img>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}
}


void send_img(){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n"; 
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <send_img+0x8c>)
 8000f80:	463c      	mov	r4, r7
 8000f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f84:	c407      	stmia	r4!, {r0, r1, r2}
 8000f86:	8023      	strh	r3, [r4, #0]

	uint8_t* byte_ptr = (uint8_t*)snapshot_buff;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <send_img+0x90>)
 8000f8a:	613b      	str	r3, [r7, #16]

	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8000f8c:	f24c 33bf 	movw	r3, #50111	@ 0xc3bf
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	e00e      	b.n	8000fb6 <send_img+0x3e>
    	send_ptr[j] = byte_ptr[i];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	7819      	ldrb	r1, [r3, #0]
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800100c <send_img+0x94>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db04      	blt.n	8000fc6 <send_img+0x4e>
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f24c 32be 	movw	r2, #50110	@ 0xc3be
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	dde8      	ble.n	8000f98 <send_img+0x20>
	#else
		#define LOG() do { } while (0)
	#endif

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){ 
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e00b      	b.n	8000fe4 <send_img+0x6c>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 8000fcc:	463a      	mov	r2, r7
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	18d1      	adds	r1, r2, r3
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	480d      	ldr	r0, [pc, #52]	@ (8001010 <send_img+0x98>)
 8000fda:	f008 f8c5 	bl	8009168 <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){ 
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	ddf0      	ble.n	8000fcc <send_img+0x54>
	}
	
	// Send image data through serial port.
	
	HAL_UART_Transmit(&huart3, send_ptr, FRAMESIZE*2, HAL_MAX_DELAY);
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	f24c 32c0 	movw	r2, #50112	@ 0xc3c0
 8000ff2:	4906      	ldr	r1, [pc, #24]	@ (800100c <send_img+0x94>)
 8000ff4:	4806      	ldr	r0, [pc, #24]	@ (8001010 <send_img+0x98>)
 8000ff6:	f008 f8b7 	bl	8009168 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, &send_ptr[FRAMESIZE], FRAMESIZE, HAL_MAX_DELAY);
	
}
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	0800d78c 	.word	0x0800d78c
 8001008:	20000560 	.word	0x20000560
 800100c:	2000c920 	.word	0x2000c920
 8001010:	20000500 	.word	0x20000500

08001014 <p3>:


void p3(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	ov7670_snapshot(snapshot_buff);
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <p3+0x30>)
 800101a:	f001 f85f 	bl	80020dc <ov7670_snapshot>
		while(!dma_flag)
 800101e:	e002      	b.n	8001026 <p3+0x12>
		{
			HAL_Delay(10);	
 8001020:	200a      	movs	r0, #10
 8001022:	f002 f82b 	bl	800307c <HAL_Delay>
		while(!dma_flag)
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <p3+0x34>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f8      	beq.n	8001020 <p3+0xc>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <p3+0x38>)
 8001032:	f004 fd6e 	bl	8005b12 <HAL_GPIO_TogglePin>
		dma_flag = 0;
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <p3+0x34>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		//print_ss(); 
		send_img(); 
 800103c:	f7ff ff9c 	bl	8000f78 <send_img>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000560 	.word	0x20000560
 8001048:	20018ce0 	.word	0x20018ce0
 800104c:	40020400 	.word	0x40020400

08001050 <print_msg>:
#include <string.h>
#include <stdio.h>



void print_msg(char * msg) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f929 	bl	80002b0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <print_msg+0x24>)
 8001068:	f008 f87e 	bl	8009168 <HAL_UART_Transmit>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000500 	.word	0x20000500

08001078 <flashLED>:

void flashLED(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, uint32_t delay_ms, uint8_t toggles) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	460b      	mov	r3, r1
 8001086:	817b      	strh	r3, [r7, #10]
 8001088:	4613      	mov	r3, r2
 800108a:	727b      	strb	r3, [r7, #9]
    for (uint8_t i = 0; i < toggles; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
 8001090:	e00a      	b.n	80010a8 <flashLED+0x30>
        HAL_GPIO_TogglePin(GPIO_Port, GPIO_Pin);
 8001092:	897b      	ldrh	r3, [r7, #10]
 8001094:	4619      	mov	r1, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f004 fd3b 	bl	8005b12 <HAL_GPIO_TogglePin>
        HAL_Delay(delay_ms);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 ffed 	bl	800307c <HAL_Delay>
    for (uint8_t i = 0; i < toggles; i++) {
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	3301      	adds	r3, #1
 80010a6:	75fb      	strb	r3, [r7, #23]
 80010a8:	7dfa      	ldrb	r2, [r7, #23]
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3f0      	bcc.n	8001092 <flashLED+0x1a>
    }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2234      	movs	r2, #52	@ 0x34
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f009 fe63 	bl	800ad96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <SystemClock_Config+0xd0>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	4a28      	ldr	r2, [pc, #160]	@ (800118c <SystemClock_Config+0xd0>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <SystemClock_Config+0xd4>)
 8001106:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <SystemClock_Config+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800111c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001120:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800112a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001130:	23a8      	movs	r3, #168	@ 0xa8
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001138:	2307      	movs	r3, #7
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4618      	mov	r0, r3
 8001146:	f006 fd11 	bl	8007b6c <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001150:	f000 fb70 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001160:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2105      	movs	r1, #5
 8001172:	4618      	mov	r0, r3
 8001174:	f006 f9b0 	bl	80074d8 <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800117e:	f000 fb59 	bl	8001834 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011a6:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <MX_ADC1_Init+0xa0>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011fa:	f001 ff63 	bl	80030c4 <HAL_ADC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001204:	f000 fb16 	bl	8001834 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_ADC1_Init+0x9c>)
 800121a:	f001 ff97 	bl	800314c <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001224:	f000 fb06 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000228 	.word	0x20000228
 8001234:	40012000 	.word	0x40012000

08001238 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
 void MX_DCMI_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_DCMI_Init+0x60>)
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <MX_DCMI_Init+0x64>)
 8001240:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_DCMI_Init+0x60>)
 800124a:	2220      	movs	r2, #32
 800124c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001250:	2280      	movs	r2, #128	@ 0x80
 8001252:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_DCMI_Init+0x60>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_DCMI_Init+0x60>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_DCMI_Init+0x60>)
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001286:	f002 fc93 	bl	8003bb0 <HAL_DCMI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fad0 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002d0 	.word	0x200002d0
 800129c:	50050000 	.word	0x50050000

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f004 fc57 	bl	8005b90 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 faa4 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000380 	.word	0x20000380
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C2_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <MX_I2C2_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C2_Init+0x50>)
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_I2C2_Init+0x58>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C2_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_I2C2_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_I2C2_Init+0x50>)
 800131a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_I2C2_Init+0x50>)
 800133a:	f004 fc29 	bl	8005b90 <HAL_I2C_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001344:	f000 fa76 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200003d4 	.word	0x200003d4
 8001350:	40005800 	.word	0x40005800
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b092      	sub	sp, #72	@ 0x48
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2220      	movs	r2, #32
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f009 fd07 	bl	800ad96 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001388:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <MX_TIM1_Init+0xfc>)
 800138a:	4a33      	ldr	r2, [pc, #204]	@ (8001458 <MX_TIM1_Init+0x100>)
 800138c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800138e:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 800139a:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <MX_TIM1_Init+0xfc>)
 800139c:	2214      	movs	r2, #20
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b2:	4828      	ldr	r0, [pc, #160]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013b4:	f006 fec7 	bl	8008146 <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80013be:	f000 fa39 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ce:	4619      	mov	r1, r3
 80013d0:	4820      	ldr	r0, [pc, #128]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013d2:	f007 fd97 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80013dc:	f000 fa2a 	bl	8001834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	@ 0x60
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 80013e4:	230a      	movs	r3, #10
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4813      	ldr	r0, [pc, #76]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001406:	f007 f8a5 	bl	8008554 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001410:	f000 fa10 	bl	8001834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001438:	f007 fde0 	bl	8008ffc <HAL_TIMEx_ConfigBreakDeadTime>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001442:	f000 f9f7 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001446:	4803      	ldr	r0, [pc, #12]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001448:	f001 fbac 	bl	8002ba4 <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3748      	adds	r7, #72	@ 0x48
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000428 	.word	0x20000428
 8001458:	40010000 	.word	0x40010000

0800145c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800147a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800148e:	2253      	movs	r2, #83	@ 0x53
 8001490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149e:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014a0:	f006 fe02 	bl	80080a8 <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80014aa:	f000 f9c3 	bl	8001834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014bc:	f007 f90c 	bl	80086d8 <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 f9b5 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ca:	2320      	movs	r3, #32
 80014cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014d8:	f007 fd14 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014e2:	f000 f9a7 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000470 	.word	0x20000470

080014f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM6_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001504:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_TIM6_Init+0x68>)
 8001506:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_TIM6_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001514:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800151a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_TIM6_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001524:	f006 fdc0 	bl	80080a8 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800152e:	f000 f981 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001540:	f007 fce0 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800154a:	f000 f973 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200004b8 	.word	0x200004b8
 800155c:	40001000 	.word	0x40001000

08001560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001566:	4a16      	ldr	r2, [pc, #88]	@ (80015c0 <MX_USART3_UART_Init+0x60>)
 8001568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4809      	ldr	r0, [pc, #36]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001598:	f007 fd96 	bl	80090c8 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f947 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000500 	.word	0x20000500
 80015c0:	40004800 	.word	0x40004800

080015c4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
 void MX_USB_OTG_FS_USB_Init(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
 void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2038      	movs	r0, #56	@ 0x38
 80015fc:	f002 f8af 	bl	800375e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001600:	2038      	movs	r0, #56	@ 0x38
 8001602:	f002 f8c8 	bl	8003796 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2039      	movs	r0, #57	@ 0x39
 800160c:	f002 f8a7 	bl	800375e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001610:	2039      	movs	r0, #57	@ 0x39
 8001612:	f002 f8c0 	bl	8003796 <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	4b77      	ldr	r3, [pc, #476]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a76      	ldr	r2, [pc, #472]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b74      	ldr	r3, [pc, #464]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	4b70      	ldr	r3, [pc, #448]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a6f      	ldr	r2, [pc, #444]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b6d      	ldr	r3, [pc, #436]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	4b69      	ldr	r3, [pc, #420]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a68      	ldr	r2, [pc, #416]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b66      	ldr	r3, [pc, #408]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b62      	ldr	r3, [pc, #392]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a61      	ldr	r2, [pc, #388]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b58      	ldr	r3, [pc, #352]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b54      	ldr	r3, [pc, #336]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a53      	ldr	r2, [pc, #332]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b51      	ldr	r3, [pc, #324]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a4c      	ldr	r2, [pc, #304]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b4a      	ldr	r3, [pc, #296]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b46      	ldr	r3, [pc, #280]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a45      	ldr	r2, [pc, #276]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001720:	483f      	ldr	r0, [pc, #252]	@ (8001820 <MX_GPIO_Init+0x1fc>)
 8001722:	f004 f9dd 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800172c:	483d      	ldr	r0, [pc, #244]	@ (8001824 <MX_GPIO_Init+0x200>)
 800172e:	f004 f9d7 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2140      	movs	r1, #64	@ 0x40
 8001736:	483c      	ldr	r0, [pc, #240]	@ (8001828 <MX_GPIO_Init+0x204>)
 8001738:	f004 f9d2 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4836      	ldr	r0, [pc, #216]	@ (800182c <MX_GPIO_Init+0x208>)
 8001754:	f004 f830 	bl	80057b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001758:	f244 0381 	movw	r3, #16513	@ 0x4081
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	482b      	ldr	r0, [pc, #172]	@ (8001820 <MX_GPIO_Init+0x1fc>)
 8001772:	f004 f821 	bl	80057b8 <HAL_GPIO_Init>


  //MOTOR PINS
  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001776:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4825      	ldr	r0, [pc, #148]	@ (8001824 <MX_GPIO_Init+0x200>)
 8001790:	f004 f812 	bl	80057b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001794:	2340      	movs	r3, #64	@ 0x40
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	481f      	ldr	r0, [pc, #124]	@ (8001828 <MX_GPIO_Init+0x204>)
 80017ac:	f004 f804 	bl	80057b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4819      	ldr	r0, [pc, #100]	@ (8001828 <MX_GPIO_Init+0x204>)
 80017c4:	f003 fff8 	bl	80057b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017da:	230a      	movs	r3, #10
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4812      	ldr	r0, [pc, #72]	@ (8001830 <MX_GPIO_Init+0x20c>)
 80017e6:	f003 ffe7 	bl	80057b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	480c      	ldr	r0, [pc, #48]	@ (8001830 <MX_GPIO_Init+0x20c>)
 8001800:	f003 ffda 	bl	80057b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2028      	movs	r0, #40	@ 0x28
 800180a:	f001 ffa8 	bl	800375e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800180e:	2028      	movs	r0, #40	@ 0x28
 8001810:	f001 ffc1 	bl	8003796 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	@ 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40020800 	.word	0x40020800
 8001830:	40020000 	.word	0x40020000

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <HAL_UART_RxCpltCallback>:
float posY = 0.0f;

extern arm_rfft_fast_instance_f32 fftHandler;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

    if (!(huart->Instance == USART3)) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <HAL_UART_RxCpltCallback+0xbc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d14f      	bne.n	80018f2 <HAL_UART_RxCpltCallback+0xb2>
        return; // Not from USART3, ignore
    }

    switch (state) {
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_UART_RxCpltCallback+0xc0>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_UART_RxCpltCallback+0x20>
 800185a:	2b03      	cmp	r3, #3
 800185c:	d02b      	beq.n	80018b6 <HAL_UART_RxCpltCallback+0x76>
 800185e:	e03c      	b.n	80018da <HAL_UART_RxCpltCallback+0x9a>
        case STATE_LISTEN:
            if (match_command(rx_data_arr, CMD_TAKEPIC)) {
 8001860:	4928      	ldr	r1, [pc, #160]	@ (8001904 <HAL_UART_RxCpltCallback+0xc4>)
 8001862:	4829      	ldr	r0, [pc, #164]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 8001864:	f000 f8f9 	bl	8001a5a <match_command>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_UART_RxCpltCallback+0x36>
                ptr_state = State_Picture; //next state 
 800186e:	4b27      	ldr	r3, [pc, #156]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 8001870:	4a27      	ldr	r2, [pc, #156]	@ (8001910 <HAL_UART_RxCpltCallback+0xd0>)
 8001872:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
            } else {

                ptr_state = State_Listen;
            }
            break;
 8001874:	e03e      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
            } else if (match_command(rx_data_arr, CMD_COORDS)) {
 8001876:	4927      	ldr	r1, [pc, #156]	@ (8001914 <HAL_UART_RxCpltCallback+0xd4>)
 8001878:	4823      	ldr	r0, [pc, #140]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 800187a:	f000 f8ee 	bl	8001a5a <match_command>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_UART_RxCpltCallback+0x4c>
                ptr_state = State_Coord_RX;
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 8001886:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <HAL_UART_RxCpltCallback+0xd8>)
 8001888:	601a      	str	r2, [r3, #0]
            break;
 800188a:	e033      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
            } else if (match_command(rx_data_arr, CMD_ADCFFT)) {
 800188c:	4923      	ldr	r1, [pc, #140]	@ (800191c <HAL_UART_RxCpltCallback+0xdc>)
 800188e:	481e      	ldr	r0, [pc, #120]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 8001890:	f000 f8e3 	bl	8001a5a <match_command>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_UART_RxCpltCallback+0x6e>
                ptr_state = State_ADC_FFT;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 800189c:	4a20      	ldr	r2, [pc, #128]	@ (8001920 <HAL_UART_RxCpltCallback+0xe0>)
 800189e:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
 80018a0:	2364      	movs	r3, #100	@ 0x64
 80018a2:	2208      	movs	r2, #8
 80018a4:	491d      	ldr	r1, [pc, #116]	@ (800191c <HAL_UART_RxCpltCallback+0xdc>)
 80018a6:	481f      	ldr	r0, [pc, #124]	@ (8001924 <HAL_UART_RxCpltCallback+0xe4>)
 80018a8:	f007 fc5e 	bl	8009168 <HAL_UART_Transmit>
            break;
 80018ac:	e022      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
                ptr_state = State_Listen;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <HAL_UART_RxCpltCallback+0xe8>)
 80018b2:	601a      	str	r2, [r3, #0]
            break;
 80018b4:	e01e      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>

        case STATE_COORDS:
        	
            memcpy(&posX, &rx_data_arr[0], 4);
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <HAL_UART_RxCpltCallback+0xec>)
 80018bc:	6013      	str	r3, [r2, #0]
            memcpy(&posY, &rx_data_arr[4], 4);
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001930 <HAL_UART_RxCpltCallback+0xf0>)
 80018c4:	6013      	str	r3, [r2, #0]
            ptr_state = State_Motors;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001934 <HAL_UART_RxCpltCallback+0xf4>)
 80018ca:	601a      	str	r2, [r3, #0]
//            posY = 1.0;
//
//            HAL_UART_Transmit(&huart3, (uint8_t*) &posX, 4, 100);
//            HAL_UART_Transmit(&huart3, (uint8_t*) &posY, 4, 100);

            HAL_UART_Transmit(&huart3, rx_data_arr, 8, 100); //return received coords
 80018cc:	2364      	movs	r3, #100	@ 0x64
 80018ce:	2208      	movs	r2, #8
 80018d0:	490d      	ldr	r1, [pc, #52]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <HAL_UART_RxCpltCallback+0xe4>)
 80018d4:	f007 fc48 	bl	8009168 <HAL_UART_Transmit>
            break;
 80018d8:	e00c      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>

        default:
            // Unexpected state in UART callback
        	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80018da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018de:	4816      	ldr	r0, [pc, #88]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 80018e0:	f004 f917 	bl	8005b12 <HAL_GPIO_TogglePin>
            state = STATE_LISTEN;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_UART_RxCpltCallback+0xc0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
            ptr_state = State_Listen;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001928 <HAL_UART_RxCpltCallback+0xe8>)
 80018ee:	601a      	str	r2, [r3, #0]
            break;
 80018f0:	e000      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
        return; // Not from USART3, ignore
 80018f2:	bf00      	nop
    }
}
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40004800 	.word	0x40004800
 8001900:	20018ce8 	.word	0x20018ce8
 8001904:	0800d858 	.word	0x0800d858
 8001908:	20000204 	.word	0x20000204
 800190c:	20018ce4 	.word	0x20018ce4
 8001910:	0800196d 	.word	0x0800196d
 8001914:	0800d870 	.word	0x0800d870
 8001918:	080019a5 	.word	0x080019a5
 800191c:	0800d864 	.word	0x0800d864
 8001920:	08001a4d 	.word	0x08001a4d
 8001924:	20000500 	.word	0x20000500
 8001928:	0800193d 	.word	0x0800193d
 800192c:	20000220 	.word	0x20000220
 8001930:	20000224 	.word	0x20000224
 8001934:	080019e5 	.word	0x080019e5
 8001938:	40020400 	.word	0x40020400

0800193c <State_Listen>:

void State_Listen(void){
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    state = STATE_LISTEN;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <State_Listen+0x20>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <State_Listen+0x24>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
    //flashLED(LD1_GPIO_Port, LD1_Pin, 100, 5);
    //State listen will blink LED1 and wait for UART communications to determine the next state to go into 
    //it will wait for certain preambles
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for preamble
 800194c:	2208      	movs	r2, #8
 800194e:	4905      	ldr	r1, [pc, #20]	@ (8001964 <State_Listen+0x28>)
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <State_Listen+0x2c>)
 8001952:	f007 fc94 	bl	800927e <HAL_UART_Receive_IT>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20018ce8 	.word	0x20018ce8
 8001960:	20018ce4 	.word	0x20018ce4
 8001964:	20000204 	.word	0x20000204
 8001968:	20000500 	.word	0x20000500

0800196c <State_Picture>:

void State_Picture(void){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, CMD_TAKEPIC, 8, 100); //ack state entry
 8001970:	2364      	movs	r3, #100	@ 0x64
 8001972:	2208      	movs	r2, #8
 8001974:	4906      	ldr	r1, [pc, #24]	@ (8001990 <State_Picture+0x24>)
 8001976:	4807      	ldr	r0, [pc, #28]	@ (8001994 <State_Picture+0x28>)
 8001978:	f007 fbf6 	bl	8009168 <HAL_UART_Transmit>
    state = STATE_TAKEPIC;
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <State_Picture+0x2c>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
    p3();
 8001982:	f7ff fb47 	bl	8001014 <p3>
    ptr_state = State_Listen;
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <State_Picture+0x30>)
 8001988:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <State_Picture+0x34>)
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	0800d858 	.word	0x0800d858
 8001994:	20000500 	.word	0x20000500
 8001998:	20018ce8 	.word	0x20018ce8
 800199c:	20018ce4 	.word	0x20018ce4
 80019a0:	0800193d 	.word	0x0800193d

080019a4 <State_Coord_RX>:

void State_Coord_RX(void){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    state = STATE_COORDS;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <State_Coord_RX+0x2c>)
 80019aa:	2203      	movs	r2, #3
 80019ac:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <State_Coord_RX+0x30>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for 2 floats
 80019b4:	2208      	movs	r2, #8
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <State_Coord_RX+0x34>)
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <State_Coord_RX+0x38>)
 80019ba:	f007 fc60 	bl	800927e <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart3, CMD_COORDS, 8, 100); //ack ready for coords
 80019be:	2364      	movs	r3, #100	@ 0x64
 80019c0:	2208      	movs	r2, #8
 80019c2:	4907      	ldr	r1, [pc, #28]	@ (80019e0 <State_Coord_RX+0x3c>)
 80019c4:	4805      	ldr	r0, [pc, #20]	@ (80019dc <State_Coord_RX+0x38>)
 80019c6:	f007 fbcf 	bl	8009168 <HAL_UART_Transmit>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20018ce8 	.word	0x20018ce8
 80019d4:	20018ce4 	.word	0x20018ce4
 80019d8:	20000204 	.word	0x20000204
 80019dc:	20000500 	.word	0x20000500
 80019e0:	0800d870 	.word	0x0800d870

080019e4 <State_Motors>:

void State_Motors(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
    state = STATE_MOTORS;
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <State_Motors+0x50>)
 80019ec:	2204      	movs	r2, #4
 80019ee:	701a      	strb	r2, [r3, #0]
    init_home(&myProbe);
 80019f0:	4811      	ldr	r0, [pc, #68]	@ (8001a38 <State_Motors+0x54>)
 80019f2:	f000 fa8c 	bl	8001f0e <init_home>
    Position test = {posX, posY, 0.0};
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <State_Motors+0x58>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <State_Motors+0x5c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
    moveProbe_test(&myProbe, test);
 8001a08:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a0c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a14:	eeb0 0a66 	vmov.f32	s0, s13
 8001a18:	eef0 0a47 	vmov.f32	s1, s14
 8001a1c:	eeb0 1a67 	vmov.f32	s2, s15
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <State_Motors+0x54>)
 8001a22:	f000 fa1d 	bl	8001e60 <moveProbe_test>
    ptr_state = State_Listen;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <State_Motors+0x60>)
 8001a28:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <State_Motors+0x64>)
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20018ce8 	.word	0x20018ce8
 8001a38:	20018cec 	.word	0x20018cec
 8001a3c:	20000220 	.word	0x20000220
 8001a40:	20000224 	.word	0x20000224
 8001a44:	20018ce4 	.word	0x20018ce4
 8001a48:	0800193d 	.word	0x0800193d

08001a4c <State_ADC_FFT>:
    //basically a blocker to motor actuate until it receives a go. If receives anything other than go it indicates a problem and should force you to reset.
    ptr_state = NULL;
}


void State_ADC_FFT(void){
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
    //         sendADC_UART();
    //         sendFFT_UART();
    //     }
    // }
    // ptr_state = State_Listen;
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <match_command>:
 * @brief Compare fixed-length 8-byte command strings.
 * @param input     Pointer to received buffer (must be at least 8 bytes)
 * @param command   Pointer to expected command (8-byte string)
 * @return 1 if match, 0 if not
 */
uint8_t match_command(const uint8_t* input, const uint8_t* command) {
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
    return (memcmp(input, command, 8) == 0);
 8001a64:	2208      	movs	r2, #8
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f009 f984 	bl	800ad76 <memcmp>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <main>:

const Position HOME = {6.0, 6.0, 12.2};
	

int main(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	HAL_Init();
 8001a88:	f001 fa86 	bl	8002f98 <HAL_Init>
  	SystemClock_Config();
 8001a8c:	f7ff fb16 	bl	80010bc <SystemClock_Config>
	MX_GPIO_Init();
 8001a90:	f7ff fdc8 	bl	8001624 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a94:	f7ff fd9e 	bl	80015d4 <MX_DMA_Init>
	MX_DCMI_Init();
 8001a98:	f7ff fbce 	bl	8001238 <MX_DCMI_Init>
	MX_USART3_UART_Init();
 8001a9c:	f7ff fd60 	bl	8001560 <MX_USART3_UART_Init>
	MX_I2C2_Init();
 8001aa0:	f7ff fc2c 	bl	80012fc <MX_I2C2_Init>
	MX_TIM1_Init();
 8001aa4:	f7ff fc58 	bl	8001358 <MX_TIM1_Init>
	MX_TIM6_Init();
 8001aa8:	f7ff fd24 	bl	80014f4 <MX_TIM6_Init>
	MX_ADC1_Init();
 8001aac:	f7ff fb72 	bl	8001194 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001ab0:	f7ff fbf6 	bl	80012a0 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001ab4:	f7ff fcd2 	bl	800145c <MX_TIM2_Init>
	MX_USB_OTG_FS_USB_Init();
 8001ab8:	f7ff fd84 	bl	80015c4 <MX_USB_OTG_FS_USB_Init>
	
	//init FFT
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8001abc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ac0:	4829      	ldr	r0, [pc, #164]	@ (8001b68 <main+0xe4>)
 8001ac2:	f008 fb57 	bl	800a174 <arm_rfft_fast_init_f32>


	//init PCA
	PCA9685_Init(50); // 50Hz for servo
 8001ac6:	2032      	movs	r0, #50	@ 0x32
 8001ac8:	f000 fbb8 	bl	800223c <PCA9685_Init>
	//init probe
	myProbe.lin = &lin;
 8001acc:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <main+0xe8>)
 8001ace:	4a28      	ldr	r2, [pc, #160]	@ (8001b70 <main+0xec>)
 8001ad0:	60da      	str	r2, [r3, #12]
	myProbe.rot = &rot;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <main+0xe8>)
 8001ad4:	4a27      	ldr	r2, [pc, #156]	@ (8001b74 <main+0xf0>)
 8001ad6:	611a      	str	r2, [r3, #16]
	myProbe.nema = &nema;
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <main+0xe8>)
 8001ada:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <main+0xf4>)
 8001adc:	615a      	str	r2, [r3, #20]
	
    myProbe.probePos = HOME; 
 8001ade:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <main+0xe8>)
 8001ae0:	4a26      	ldr	r2, [pc, #152]	@ (8001b7c <main+0xf8>)
 8001ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    myProbe.lin->Channel = 0;
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <main+0xe8>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	721a      	strb	r2, [r3, #8]
    myProbe.lin->currAngle = 0;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <main+0xe8>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
    myProbe.lin->homeAngle = 0;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <main+0xe8>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]

    myProbe.rot->Channel = 15;
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <main+0xe8>)
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	220f      	movs	r2, #15
 8001b0a:	721a      	strb	r2, [r3, #8]
    myProbe.rot->currAngle = 0;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <main+0xe8>)
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
    myProbe.rot->homeAngle = 0;
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <main+0xe8>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]

    myProbe.nema->currAngle = 0;
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <main+0xe8>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
	
	ptr_state = State_Listen;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <main+0xfc>)
 8001b2c:	4a15      	ldr	r2, [pc, #84]	@ (8001b84 <main+0x100>)
 8001b2e:	601a      	str	r2, [r3, #0]

	__HAL_DMA_ENABLE_IT(&hdma_dcmi, DMA_IT_TC);
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <main+0x104>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <main+0x104>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0210 	orr.w	r2, r2, #16
 8001b3e:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b40:	2039      	movs	r0, #57	@ 0x39
 8001b42:	f001 fe28 	bl	8003796 <HAL_NVIC_EnableIRQ>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b46:	2100      	movs	r1, #0
 8001b48:	4810      	ldr	r0, [pc, #64]	@ (8001b8c <main+0x108>)
 8001b4a:	f006 fb4b 	bl	80081e4 <HAL_TIM_PWM_Start>
	ov7670_init();
 8001b4e:	f000 fa01 	bl	8001f54 <ov7670_init>
	ov7_config();
 8001b52:	f000 fa31 	bl	8001fb8 <ov7_config>

	while(1){

		if (ptr_state != NULL) {
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <main+0xfc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0fb      	beq.n	8001b56 <main+0xd2>
            ptr_state();       // Run the state logic
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <main+0xfc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4798      	blx	r3
		if (ptr_state != NULL) {
 8001b64:	e7f7      	b.n	8001b56 <main+0xd2>
 8001b66:	bf00      	nop
 8001b68:	20000548 	.word	0x20000548
 8001b6c:	20018cec 	.word	0x20018cec
 8001b70:	20018d04 	.word	0x20018d04
 8001b74:	20018d10 	.word	0x20018d10
 8001b78:	20018d1c 	.word	0x20018d1c
 8001b7c:	0800d87c 	.word	0x0800d87c
 8001b80:	20018ce4 	.word	0x20018ce4
 8001b84:	0800193d 	.word	0x0800193d
 8001b88:	20000320 	.word	0x20000320
 8001b8c:	20000428 	.word	0x20000428

08001b90 <home_Align>:
#include <math.h>

extern const Position HOME;

// Calculates the motor position based on given (x, y) coords
void home_Align(Probe* myProbe){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    // 1. retract the motor
    setServoAngle(myProbe->lin, myProbe->lin->homeAngle);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	4610      	mov	r0, r2
 8001baa:	f000 fb8d 	bl	80022c8 <setServoAngle>
    myProbe->lin->currAngle = myProbe->rot->homeAngle; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	6852      	ldr	r2, [r2, #4]
 8001bb8:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); 
 8001bba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bbe:	f001 fa5d 	bl	800307c <HAL_Delay>

    // 2. rotate to home angle
    setServoAngle(myProbe->rot, myProbe->rot->homeAngle);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bce:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 fb78 	bl	80022c8 <setServoAngle>
    myProbe->rot->currAngle = myProbe->rot->homeAngle; 
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	6852      	ldr	r2, [r2, #4]
 8001be2:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); 
 8001be4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001be8:	f001 fa48 	bl	800307c <HAL_Delay>

    // 3. retract to home direction in stepper
    float move_cm =  -1 * myProbe->nema->currAngle; // move left
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	eef1 7a67 	vneg.f32	s15, s15
 8001bf8:	edc7 7a03 	vstr	s15, [r7, #12]
    if(move_cm == 0.0){
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	d106      	bne.n	8001c18 <home_Align+0x88>
        flashLED(LD1_GPIO_Port, LD1_Pin, 500, 10);
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c10:	2101      	movs	r1, #1
 8001c12:	480b      	ldr	r0, [pc, #44]	@ (8001c40 <home_Align+0xb0>)
 8001c14:	f7ff fa30 	bl	8001078 <flashLED>
    }
    stp_moveDistance((myProbe->nema), move_cm);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fcf7 	bl	8002614 <stp_moveDistance>
    myProbe->nema->currAngle = 0.0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); 
 8001c30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c34:	f001 fa22 	bl	800307c <HAL_Delay>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40020400 	.word	0x40020400

08001c44 <x_align>:

void x_align(Probe* myProbe, Position desiredLoc){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	eef0 6a40 	vmov.f32	s13, s0
 8001c50:	eeb0 7a60 	vmov.f32	s14, s1
 8001c54:	eef0 7a41 	vmov.f32	s15, s2
 8001c58:	edc7 6a00 	vstr	s13, [r7]
 8001c5c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001c60:	edc7 7a02 	vstr	s15, [r7, #8]

    float move_cm = fabsf(HOME.x - desiredLoc.x); //move right
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <x_align+0x6c>)
 8001c66:	ed93 7a00 	vldr	s14, [r3]
 8001c6a:	edd7 7a00 	vldr	s15, [r7]
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c72:	eef0 7ae7 	vabs.f32	s15, s15
 8001c76:	edc7 7a05 	vstr	s15, [r7, #20]
    if(move_cm > X_MAX){
 8001c7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c7e:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8001c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	dd01      	ble.n	8001c90 <x_align+0x4c>
        move_cm = X_MAX;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <x_align+0x70>)
 8001c8e:	617b      	str	r3, [r7, #20]
    }
    myProbe->nema->currAngle = move_cm; 
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]
    stp_moveDistance(((myProbe->nema)), move_cm);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fcb7 	bl	8002614 <stp_moveDistance>
    
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	0800d87c 	.word	0x0800d87c
 8001cb4:	41500000 	.word	0x41500000

08001cb8 <theta_align>:

void theta_align(Probe* myProbe, Position desiredLoc){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	eef0 6a40 	vmov.f32	s13, s0
 8001cc4:	eeb0 7a60 	vmov.f32	s14, s1
 8001cc8:	eef0 7a41 	vmov.f32	s15, s2
 8001ccc:	edc7 6a00 	vstr	s13, [r7]
 8001cd0:	ed87 7a01 	vstr	s14, [r7, #4]
 8001cd4:	edc7 7a02 	vstr	s15, [r7, #8]
    float theta_rad = atan(fabsf(HOME.y -desiredLoc.y) / H);
 8001cd8:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <theta_align+0xc8>)
 8001cda:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce6:	eef0 7ae7 	vabs.f32	s15, s15
 8001cea:	ee17 0a90 	vmov	r0, s15
 8001cee:	f7fe fc4b 	bl	8000588 <__aeabi_f2d>
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <theta_align+0xcc>)
 8001cf8:	f7fe fdc8 	bl	800088c <__aeabi_ddiv>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	ec43 2b17 	vmov	d7, r2, r3
 8001d04:	eeb0 0a47 	vmov.f32	s0, s14
 8001d08:	eef0 0a67 	vmov.f32	s1, s15
 8001d0c:	f00b f940 	bl	800cf90 <atan>
 8001d10:	ec53 2b10 	vmov	r2, r3, d0
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe ff66 	bl	8000be8 <__aeabi_d2f>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	613b      	str	r3, [r7, #16]
    float theta_deg = theta_rad * DEGREE_CONVERSION;
 8001d20:	6938      	ldr	r0, [r7, #16]
 8001d22:	f7fe fc31 	bl	8000588 <__aeabi_f2d>
 8001d26:	a314      	add	r3, pc, #80	@ (adr r3, 8001d78 <theta_align+0xc0>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fc84 	bl	8000638 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe ff56 	bl	8000be8 <__aeabi_d2f>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	617b      	str	r3, [r7, #20]
    if(theta_deg > THETA_MAX){
 8001d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d44:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001d88 <theta_align+0xd0>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	dd01      	ble.n	8001d56 <theta_align+0x9e>
        theta_deg = THETA_MAX;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <theta_align+0xd4>)
 8001d54:	617b      	str	r3, [r7, #20]
    }
    setServoAngle(myProbe->rot, theta_deg);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fab2 	bl	80022c8 <setServoAngle>
    myProbe->rot->currAngle = theta_deg;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	f3af 8000 	nop.w
 8001d78:	1a63c1f8 	.word	0x1a63c1f8
 8001d7c:	404ca5dc 	.word	0x404ca5dc
 8001d80:	0800d87c 	.word	0x0800d87c
 8001d84:	40290000 	.word	0x40290000
 8001d88:	42080000 	.word	0x42080000
 8001d8c:	42080000 	.word	0x42080000

08001d90 <R_align>:

void R_align(Probe* myProbe, Position desiredLoc){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	eef0 6a40 	vmov.f32	s13, s0
 8001d9c:	eeb0 7a60 	vmov.f32	s14, s1
 8001da0:	eef0 7a41 	vmov.f32	s15, s2
 8001da4:	edc7 6a00 	vstr	s13, [r7]
 8001da8:	ed87 7a01 	vstr	s14, [r7, #4]
 8001dac:	edc7 7a02 	vstr	s15, [r7, #8]
    float hypotenuse = hypot(H, fabsf(HOME.y - desiredLoc.y));
 8001db0:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <R_align+0xc8>)
 8001db2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dbe:	eef0 7ae7 	vabs.f32	s15, s15
 8001dc2:	ee17 0a90 	vmov	r0, s15
 8001dc6:	f7fe fbdf 	bl	8000588 <__aeabi_f2d>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	ec43 2b11 	vmov	d1, r2, r3
 8001dd2:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001e40 <R_align+0xb0>
 8001dd6:	f00b f8a7 	bl	800cf28 <hypot>
 8001dda:	ec53 2b10 	vmov	r2, r3, d0
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe ff01 	bl	8000be8 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]
    float move_cm = hypotenuse - PROBE_LEN;
 8001dea:	6938      	ldr	r0, [r7, #16]
 8001dec:	f7fe fbcc 	bl	8000588 <__aeabi_f2d>
 8001df0:	a315      	add	r3, pc, #84	@ (adr r3, 8001e48 <R_align+0xb8>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fa67 	bl	80002c8 <__aeabi_dsub>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f7fe fef1 	bl	8000be8 <__aeabi_d2f>
 8001e06:	4603      	mov	r3, r0
 8001e08:	617b      	str	r3, [r7, #20]
    if(move_cm > DR_MAX){
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7fe fbbc 	bl	8000588 <__aeabi_f2d>
 8001e10:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e50 <R_align+0xc0>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fe9f 	bl	8000b58 <__aeabi_dcmpgt>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <R_align+0x94>
        move_cm = DR_MAX; 
 8001e20:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <R_align+0xcc>)
 8001e22:	617b      	str	r3, [r7, #20]
    }
    sv_moveDistance(myProbe->lin, move_cm); // automatically updates cur_angle
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fab3 	bl	8002398 <sv_moveDistance>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	00000000 	.word	0x00000000
 8001e44:	40290000 	.word	0x40290000
 8001e48:	9999999a 	.word	0x9999999a
 8001e4c:	40289999 	.word	0x40289999
 8001e50:	9999999a 	.word	0x9999999a
 8001e54:	40059999 	.word	0x40059999
 8001e58:	0800d87c 	.word	0x0800d87c
 8001e5c:	402ccccd 	.word	0x402ccccd

08001e60 <moveProbe_test>:

// assume probe at home
void moveProbe_test(Probe* myProbe, Position desiredLoc){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	eef0 6a40 	vmov.f32	s13, s0
 8001e6c:	eeb0 7a60 	vmov.f32	s14, s1
 8001e70:	eef0 7a41 	vmov.f32	s15, s2
 8001e74:	edc7 6a00 	vstr	s13, [r7]
 8001e78:	ed87 7a01 	vstr	s14, [r7, #4]
 8001e7c:	edc7 7a02 	vstr	s15, [r7, #8]

    // 1. send home
    home_Align(myProbe);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff fe85 	bl	8001b90 <home_Align>

    // 2. align stepper, theta, R in order
    x_align(myProbe, desiredLoc);
 8001e86:	edd7 6a00 	vldr	s13, [r7]
 8001e8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e92:	eeb0 0a66 	vmov.f32	s0, s13
 8001e96:	eef0 0a47 	vmov.f32	s1, s14
 8001e9a:	eeb0 1a67 	vmov.f32	s2, s15
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff fed0 	bl	8001c44 <x_align>
    HAL_Delay(500); 
 8001ea4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ea8:	f001 f8e8 	bl	800307c <HAL_Delay>
    theta_align(myProbe, desiredLoc);
 8001eac:	edd7 6a00 	vldr	s13, [r7]
 8001eb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb8:	eeb0 0a66 	vmov.f32	s0, s13
 8001ebc:	eef0 0a47 	vmov.f32	s1, s14
 8001ec0:	eeb0 1a67 	vmov.f32	s2, s15
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff fef7 	bl	8001cb8 <theta_align>
    HAL_Delay(500); 
 8001eca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ece:	f001 f8d5 	bl	800307c <HAL_Delay>
    R_align(myProbe, desiredLoc);
 8001ed2:	edd7 6a00 	vldr	s13, [r7]
 8001ed6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ede:	eeb0 0a66 	vmov.f32	s0, s13
 8001ee2:	eef0 0a47 	vmov.f32	s1, s14
 8001ee6:	eeb0 1a67 	vmov.f32	s2, s15
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff ff50 	bl	8001d90 <R_align>
    HAL_Delay(500); 
 8001ef0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ef4:	f001 f8c2 	bl	800307c <HAL_Delay>

    // 3. wait
    HAL_Delay(3000); 
 8001ef8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001efc:	f001 f8be 	bl	800307c <HAL_Delay>

    // 4. Align back home
    home_Align(myProbe);
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff fe45 	bl	8001b90 <home_Align>

}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <init_home>:

void init_home(Probe* myProbe){
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
    myProbe->nema->currAngle = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

    myProbe->lin->currAngle = 0; 
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
    myProbe->lin->homeAngle = 0; 
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
    myProbe->rot->currAngle = 0; 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    myProbe->rot->homeAngle = 0; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]

}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b09a      	sub	sp, #104	@ 0x68
 8001f58:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 8001f5a:	4814      	ldr	r0, [pc, #80]	@ (8001fac <ov7670_init+0x58>)
 8001f5c:	f7ff f878 	bl	8001050 <print_msg>
  val = ov7670_read(0x0A);
 8001f60:	200a      	movs	r0, #10
 8001f62:	f000 f875 	bl	8002050 <ov7670_read>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if (val != 0x76) {
 8001f6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001f70:	2b76      	cmp	r3, #118	@ 0x76
 8001f72:	d00c      	beq.n	8001f8e <ov7670_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8001f74:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001f78:	463b      	mov	r3, r7
 8001f7a:	490d      	ldr	r1, [pc, #52]	@ (8001fb0 <ov7670_init+0x5c>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f008 fe97 	bl	800acb0 <siprintf>
    print_msg(msg);
 8001f82:	463b      	mov	r3, r7
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f863 	bl	8001050 <print_msg>
    return 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e009      	b.n	8001fa2 <ov7670_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 8001f8e:	463b      	mov	r3, r7
 8001f90:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <ov7670_init+0x60>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 fe8c 	bl	800acb0 <siprintf>
    print_msg(msg);
 8001f98:	463b      	mov	r3, r7
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f858 	bl	8001050 <print_msg>

  // Your code here

  //

  return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3768      	adds	r7, #104	@ 0x68
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	0800d7a8 	.word	0x0800d7a8
 8001fb0:	0800d7b4 	.word	0x0800d7b4
 8001fb4:	0800d7d0 	.word	0x0800d7d0

08001fb8 <ov7_config>:
    }

    print_msg("OV7670 Register Read Complete.\n");
}

void ov7_config(){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af02      	add	r7, sp, #8
	char msg[20];
	uint8_t data[2];
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e037      	b.n	8002034 <ov7_config+0x7c>
		data[0] = OV7670_reg[i][0]; 
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002044 <ov7_config+0x8c>)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001fcc:	703b      	strb	r3, [r7, #0]
		data[1] = OV7670_reg[i][1];
 8001fce:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <ov7_config+0x8c>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	707b      	strb	r3, [r7, #1]
		HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); //send address frame
 8001fda:	463a      	mov	r2, r7
 8001fdc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	2142      	movs	r1, #66	@ 0x42
 8001fe6:	4818      	ldr	r0, [pc, #96]	@ (8002048 <ov7_config+0x90>)
 8001fe8:	f003 ff16 	bl	8005e18 <HAL_I2C_Master_Transmit>
 8001fec:	4603      	mov	r3, r0
 8001fee:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8001ff0:	e017      	b.n	8002022 <ov7_config+0x6a>
			 sprintf(msg, "Error hi\n");
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	4915      	ldr	r1, [pc, #84]	@ (800204c <ov7_config+0x94>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f008 fe5a 	bl	800acb0 <siprintf>
       print_msg(msg);
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f826 	bl	8001050 <print_msg>
       HAL_Delay(1000);
 8002004:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002008:	f001 f838 	bl	800307c <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); 
 800200c:	463a      	mov	r2, r7
 800200e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2302      	movs	r3, #2
 8002016:	2142      	movs	r1, #66	@ 0x42
 8002018:	480b      	ldr	r0, [pc, #44]	@ (8002048 <ov7_config+0x90>)
 800201a:	f003 fefd 	bl	8005e18 <HAL_I2C_Master_Transmit>
 800201e:	4603      	mov	r3, r0
 8002020:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8002022:	7efb      	ldrb	r3, [r7, #27]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e4      	bne.n	8001ff2 <ov7_config+0x3a>
    }
		HAL_Delay(10);
 8002028:	200a      	movs	r0, #10
 800202a:	f001 f827 	bl	800307c <HAL_Delay>
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b79      	cmp	r3, #121	@ 0x79
 8002038:	ddc4      	ble.n	8001fc4 <ov7_config+0xc>
	}
}
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	0800d888 	.word	0x0800d888
 8002048:	200003d4 	.word	0x200003d4
 800204c:	0800d830 	.word	0x0800d830

08002050 <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8002050:	b580      	push	{r7, lr}
 8002052:	b09e      	sub	sp, #120	@ 0x78
 8002054:	af02      	add	r7, sp, #8
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
		char msg[100];
    // Transmit register
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 800205a:	1dfa      	adds	r2, r7, #7
 800205c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2301      	movs	r3, #1
 8002064:	2142      	movs	r1, #66	@ 0x42
 8002066:	481b      	ldr	r0, [pc, #108]	@ (80020d4 <ov7670_read+0x84>)
 8002068:	f003 fed6 	bl	8005e18 <HAL_I2C_Master_Transmit>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8002072:	e01a      	b.n	80020aa <ov7670_read+0x5a>
			 sprintf(msg, "Error\n");
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	4917      	ldr	r1, [pc, #92]	@ (80020d8 <ov7670_read+0x88>)
 800207a:	4618      	mov	r0, r3
 800207c:	f008 fe18 	bl	800acb0 <siprintf>
       print_msg(msg);
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe ffe3 	bl	8001050 <print_msg>
       HAL_Delay(1000);
 800208a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208e:	f000 fff5 	bl	800307c <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 8002092:	1dfa      	adds	r2, r7, #7
 8002094:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2301      	movs	r3, #1
 800209c:	2142      	movs	r1, #66	@ 0x42
 800209e:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <ov7670_read+0x84>)
 80020a0:	f003 feba 	bl	8005e18 <HAL_I2C_Master_Transmit>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 80020aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1e0      	bne.n	8002074 <ov7670_read+0x24>
    }
    // Read data
    HAL_I2C_Master_Receive(&hi2c2, (reADDR_OV7670), &data, 1, HAL_MAX_DELAY);
 80020b2:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2301      	movs	r3, #1
 80020be:	2143      	movs	r1, #67	@ 0x43
 80020c0:	4804      	ldr	r0, [pc, #16]	@ (80020d4 <ov7670_read+0x84>)
 80020c2:	f003 ffa7 	bl	8006014 <HAL_I2C_Master_Receive>
    return data;
 80020c6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3770      	adds	r7, #112	@ 0x70
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200003d4 	.word	0x200003d4
 80020d8:	0800d83c 	.word	0x0800d83c

080020dc <ov7670_snapshot>:




void ov7670_snapshot(uint16_t *buff){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b09c      	sub	sp, #112	@ 0x70
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  // Your code here
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 80020e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002120 <ov7670_snapshot+0x44>)
 80020e6:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 80020ea:	2102      	movs	r1, #2
 80020ec:	480d      	ldr	r0, [pc, #52]	@ (8002124 <ov7670_snapshot+0x48>)
 80020ee:	f001 fb6d 	bl	80037cc <HAL_DCMI_Start_DMA>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 80020f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <ov7670_snapshot+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	4908      	ldr	r1, [pc, #32]	@ (8002128 <ov7670_snapshot+0x4c>)
 8002106:	4618      	mov	r0, r3
 8002108:	f008 fdd2 	bl	800acb0 <siprintf>
       print_msg(msg);
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe ff9d 	bl	8001050 <print_msg>
    }
}//goes back to main for waiting for interrupt
 8002116:	bf00      	nop
 8002118:	3770      	adds	r7, #112	@ 0x70
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000560 	.word	0x20000560
 8002124:	200002d0 	.word	0x200002d0
 8002128:	0800d844 	.word	0x0800d844

0800212c <PCA9685_SetBit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af04      	add	r7, sp, #16
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	460b      	mov	r3, r1
 8002138:	71bb      	strb	r3, [r7, #6]
 800213a:	4613      	mov	r3, r2
 800213c:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	b29a      	uxth	r2, r3
 8002142:	230a      	movs	r3, #10
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	f107 030f 	add.w	r3, r7, #15
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2301      	movs	r3, #1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	4819      	ldr	r0, [pc, #100]	@ (80021bc <PCA9685_SetBit+0x90>)
 8002156:	f004 fa89 	bl	800666c <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 800215a:	797b      	ldrb	r3, [r7, #5]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10d      	bne.n	800217c <PCA9685_SetBit+0x50>
 8002160:	79bb      	ldrb	r3, [r7, #6]
 8002162:	2201      	movs	r2, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	b25b      	sxtb	r3, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	b25a      	sxtb	r2, r3
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	4013      	ands	r3, r2
 8002174:	b25b      	sxtb	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	e00a      	b.n	8002192 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	2201      	movs	r2, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	b25a      	sxtb	r2, r3
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	b25b      	sxtb	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b25b      	sxtb	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	b29a      	uxth	r2, r3
 8002196:	230a      	movs	r3, #10
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	2301      	movs	r3, #1
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	f107 030f 	add.w	r3, r7, #15
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2301      	movs	r3, #1
 80021a6:	2180      	movs	r1, #128	@ 0x80
 80021a8:	4804      	ldr	r0, [pc, #16]	@ (80021bc <PCA9685_SetBit+0x90>)
 80021aa:	f004 f965 	bl	8006478 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 ff64 	bl	800307c <HAL_Delay>
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000380 	.word	0x20000380

080021c0 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af04      	add	r7, sp, #16
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03; // why?
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d902      	bls.n	80021da <PCA9685_SetPWMFrequency+0x1a>
 80021d4:	2303      	movs	r3, #3
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e00c      	b.n	80021f4 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b18      	cmp	r3, #24
 80021de:	d802      	bhi.n	80021e6 <PCA9685_SetPWMFrequency+0x26>
 80021e0:	23ff      	movs	r3, #255	@ 0xff
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e006      	b.n	80021f4 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	031b      	lsls	r3, r3, #12
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <PCA9685_SetPWMFrequency+0x74>)
 80021ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2104      	movs	r1, #4
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7ff ff97 	bl	800212c <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 80021fe:	230a      	movs	r3, #10
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	2301      	movs	r3, #1
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	f107 030f 	add.w	r3, r7, #15
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	22fe      	movs	r2, #254	@ 0xfe
 8002210:	2180      	movs	r1, #128	@ 0x80
 8002212:	4809      	ldr	r0, [pc, #36]	@ (8002238 <PCA9685_SetPWMFrequency+0x78>)
 8002214:	f004 f930 	bl	8006478 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2104      	movs	r1, #4
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff ff85 	bl	800212c <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8002222:	2201      	movs	r2, #1
 8002224:	2107      	movs	r1, #7
 8002226:	2000      	movs	r0, #0
 8002228:	f7ff ff80 	bl	800212c <PCA9685_SetBit>
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	017d7840 	.word	0x017d7840
 8002238:	20000380 	.word	0x20000380

0800223c <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ffb9 	bl	80021c0 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800224e:	2201      	movs	r2, #1
 8002250:	2105      	movs	r1, #5
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff ff6a 	bl	800212c <PCA9685_SetBit>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af04      	add	r7, sp, #16
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	460b      	mov	r3, r1
 800226c:	80bb      	strh	r3, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3306      	adds	r3, #6
 800227a:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8002282:	88bb      	ldrh	r3, [r7, #4]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29b      	uxth	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	230a      	movs	r3, #10
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2304      	movs	r3, #4
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	2180      	movs	r1, #128	@ 0x80
 80022b2:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <PCA9685_SetPWM+0x60>)
 80022b4:	f004 f8e0 	bl	8006478 <HAL_I2C_Mem_Write>
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000380 	.word	0x20000380
 80022c4:	00000000 	.word	0x00000000

080022c8 <setServoAngle>:
  Value = (205.0 + (Angle / 180.0) * (410.0 - 205.0));
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
}

void setServoAngle(Servo* sv, float Angle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	ed87 0a00 	vstr	s0, [r7]
  // this one is for the position
  float Value;
    if (Angle < 0) Angle = 0;
 80022d4:	edd7 7a00 	vldr	s15, [r7]
 80022d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	d502      	bpl.n	80022e8 <setServoAngle+0x20>
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	603b      	str	r3, [r7, #0]
    if (Angle > 180) Angle = 180;
 80022e8:	edd7 7a00 	vldr	s15, [r7]
 80022ec:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002388 <setServoAngle+0xc0>
 80022f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f8:	dd01      	ble.n	80022fe <setServoAngle+0x36>
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <setServoAngle+0xc4>)
 80022fc:	603b      	str	r3, [r7, #0]

    float Rev_Angle = 180 - Angle; //in order to make positive values forward and negative values backwards ;)
 80022fe:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002388 <setServoAngle+0xc0>
 8002302:	edd7 7a00 	vldr	s15, [r7]
 8002306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230a:	edc7 7a03 	vstr	s15, [r7, #12]

  Value = (Rev_Angle * (511.9 - 102.4) / 180.0) + 102.4;
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7fe f93a 	bl	8000588 <__aeabi_f2d>
 8002314:	a318      	add	r3, pc, #96	@ (adr r3, 8002378 <setServoAngle+0xb0>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f98d 	bl	8000638 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <setServoAngle+0xc8>)
 800232c:	f7fe faae 	bl	800088c <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	a311      	add	r3, pc, #68	@ (adr r3, 8002380 <setServoAngle+0xb8>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fd ffc5 	bl	80002cc <__adddf3>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc4d 	bl	8000be8 <__aeabi_d2f>
 800234e:	4603      	mov	r3, r0
 8002350:	60bb      	str	r3, [r7, #8]
  PCA9685_SetPWM(sv->Channel, 0, (uint16_t)Value);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7a1b      	ldrb	r3, [r3, #8]
 8002356:	edd7 7a02 	vldr	s15, [r7, #8]
 800235a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235e:	ee17 2a90 	vmov	r2, s15
 8002362:	b292      	uxth	r2, r2
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff7a 	bl	8002260 <PCA9685_SetPWM>
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	f3af 8000 	nop.w
 8002378:	00000000 	.word	0x00000000
 800237c:	40799800 	.word	0x40799800
 8002380:	9999999a 	.word	0x9999999a
 8002384:	40599999 	.word	0x40599999
 8002388:	43340000 	.word	0x43340000
 800238c:	43340000 	.word	0x43340000
 8002390:	40668000 	.word	0x40668000
 8002394:	00000000 	.word	0x00000000

08002398 <sv_moveDistance>:
  sv->homeAngle = homeAngle;
  setServoAngle(sv, homeAngle);
}

//pass in the current Angle of the servo, and modify that value by its angle equivalent of the distance 
void sv_moveDistance(Servo* sv, float distance_cm) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	ed87 0a00 	vstr	s0, [r7]

  //theoretically we have around 2.8cm per 180 deg
  //experimentally we have around 2.52cm per 180 deg. 

    float delta_angle = distance_cm / 0.01544; // (0.014)
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f7fe f8ef 	bl	8000588 <__aeabi_f2d>
 80023aa:	a323      	add	r3, pc, #140	@ (adr r3, 8002438 <sv_moveDistance+0xa0>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe fa6c 	bl	800088c <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc14 	bl	8000be8 <__aeabi_d2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]


    
    if(delta_angle + sv->currAngle > 0 && delta_angle + sv->currAngle <= 180){
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	ed93 7a00 	vldr	s14, [r3]
 80023ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	dd18      	ble.n	800240e <sv_moveDistance+0x76>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	ed93 7a00 	vldr	s14, [r3]
 80023e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ea:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002430 <sv_moveDistance+0x98>
 80023ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d80a      	bhi.n	800240e <sv_moveDistance+0x76>
      sv->currAngle += delta_angle;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	ed93 7a00 	vldr	s14, [r3]
 80023fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	edc3 7a00 	vstr	s15, [r3]
 800240c:	e003      	b.n	8002416 <sv_moveDistance+0x7e>
    }else{
      //print_msg("Angle change request exceeded bounds");
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800240e:	2101      	movs	r1, #1
 8002410:	4808      	ldr	r0, [pc, #32]	@ (8002434 <sv_moveDistance+0x9c>)
 8002412:	f003 fb7e 	bl	8005b12 <HAL_GPIO_TogglePin>

    }

    setServoAngle(sv, sv->currAngle);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eeb0 0a67 	vmov.f32	s0, s15
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff51 	bl	80022c8 <setServoAngle>
  
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	43340000 	.word	0x43340000
 8002434:	40020400 	.word	0x40020400
 8002438:	b866e43b 	.word	0xb866e43b
 800243c:	3f8f9f01 	.word	0x3f8f9f01

08002440 <stp_Step>:

#include "steppermotors.h"
#include "stdlib.h"


void stp_Step(Stepper* motor, int step) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
   switch(step % 4) {
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	425a      	negs	r2, r3
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	bf58      	it	pl
 8002458:	4253      	negpl	r3, r2
 800245a:	2b03      	cmp	r3, #3
 800245c:	d86e      	bhi.n	800253c <stp_Step+0xfc>
 800245e:	a201      	add	r2, pc, #4	@ (adr r2, 8002464 <stp_Step+0x24>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	080024a7 	.word	0x080024a7
 800246c:	080024d9 	.word	0x080024d9
 8002470:	0800250b 	.word	0x0800250b
       case 0:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 8002474:	2201      	movs	r2, #1
 8002476:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800247a:	4832      	ldr	r0, [pc, #200]	@ (8002544 <stp_Step+0x104>)
 800247c:	f003 fb30 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002486:	482f      	ldr	r0, [pc, #188]	@ (8002544 <stp_Step+0x104>)
 8002488:	f003 fb2a 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 800248c:	2201      	movs	r2, #1
 800248e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002492:	482c      	ldr	r0, [pc, #176]	@ (8002544 <stp_Step+0x104>)
 8002494:	f003 fb24 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800249e:	4829      	ldr	r0, [pc, #164]	@ (8002544 <stp_Step+0x104>)
 80024a0:	f003 fb1e 	bl	8005ae0 <HAL_GPIO_WritePin>
           break;
 80024a4:	e04a      	b.n	800253c <stp_Step+0xfc>
       case 1:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024ac:	4825      	ldr	r0, [pc, #148]	@ (8002544 <stp_Step+0x104>)
 80024ae:	f003 fb17 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 80024b2:	2201      	movs	r2, #1
 80024b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024b8:	4822      	ldr	r0, [pc, #136]	@ (8002544 <stp_Step+0x104>)
 80024ba:	f003 fb11 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024c4:	481f      	ldr	r0, [pc, #124]	@ (8002544 <stp_Step+0x104>)
 80024c6:	f003 fb0b 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024d0:	481c      	ldr	r0, [pc, #112]	@ (8002544 <stp_Step+0x104>)
 80024d2:	f003 fb05 	bl	8005ae0 <HAL_GPIO_WritePin>
           break;
 80024d6:	e031      	b.n	800253c <stp_Step+0xfc>
       case 2:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024de:	4819      	ldr	r0, [pc, #100]	@ (8002544 <stp_Step+0x104>)
 80024e0:	f003 fafe 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 80024e4:	2201      	movs	r2, #1
 80024e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024ea:	4816      	ldr	r0, [pc, #88]	@ (8002544 <stp_Step+0x104>)
 80024ec:	f003 faf8 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024f6:	4813      	ldr	r0, [pc, #76]	@ (8002544 <stp_Step+0x104>)
 80024f8:	f003 faf2 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 80024fc:	2201      	movs	r2, #1
 80024fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002502:	4810      	ldr	r0, [pc, #64]	@ (8002544 <stp_Step+0x104>)
 8002504:	f003 faec 	bl	8005ae0 <HAL_GPIO_WritePin>
           break;
 8002508:	e018      	b.n	800253c <stp_Step+0xfc>
       case 3:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 800250a:	2201      	movs	r2, #1
 800250c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <stp_Step+0x104>)
 8002512:	f003 fae5 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800251c:	4809      	ldr	r0, [pc, #36]	@ (8002544 <stp_Step+0x104>)
 800251e:	f003 fadf 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002522:	2200      	movs	r2, #0
 8002524:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002528:	4806      	ldr	r0, [pc, #24]	@ (8002544 <stp_Step+0x104>)
 800252a:	f003 fad9 	bl	8005ae0 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002534:	4803      	ldr	r0, [pc, #12]	@ (8002544 <stp_Step+0x104>)
 8002536:	f003 fad3 	bl	8005ae0 <HAL_GPIO_WritePin>
           break;
 800253a:	bf00      	nop
   }
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021400 	.word	0x40021400

08002548 <stp_Stop>:
void stp_init(Stepper* nema){
   nema->currAngle = 0;
}


void stp_Stop(Stepper* motor) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002556:	480c      	ldr	r0, [pc, #48]	@ (8002588 <stp_Stop+0x40>)
 8002558:	f003 fac2 	bl	8005ae0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 800255c:	2200      	movs	r2, #0
 800255e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002562:	4809      	ldr	r0, [pc, #36]	@ (8002588 <stp_Stop+0x40>)
 8002564:	f003 fabc 	bl	8005ae0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800256e:	4806      	ldr	r0, [pc, #24]	@ (8002588 <stp_Stop+0x40>)
 8002570:	f003 fab6 	bl	8005ae0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800257a:	4803      	ldr	r0, [pc, #12]	@ (8002588 <stp_Stop+0x40>)
 800257c:	f003 fab0 	bl	8005ae0 <HAL_GPIO_WritePin>

}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021400 	.word	0x40021400

0800258c <stp_Move>:

void stp_Move(Stepper* motor, int steps, int delay) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
   int direction = (steps > 0) ? 1 : -1; // Determine direction
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	dd01      	ble.n	80025a2 <stp_Move+0x16>
 800259e:	2301      	movs	r3, #1
 80025a0:	e001      	b.n	80025a6 <stp_Move+0x1a>
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	61bb      	str	r3, [r7, #24]
   int stepCount = abs(steps);  // Get absolute step count
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bfb8      	it	lt
 80025ae:	425b      	neglt	r3, r3
 80025b0:	617b      	str	r3, [r7, #20]

   for (int i = 0; i < stepCount; i++) {
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e021      	b.n	80025fc <stp_Move+0x70>
       int stepIndex = (direction > 0) ? (i % 4) : (3 - (i % 4));
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	dd08      	ble.n	80025d0 <stp_Move+0x44>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	425a      	negs	r2, r3
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	f002 0203 	and.w	r2, r2, #3
 80025ca:	bf58      	it	pl
 80025cc:	4253      	negpl	r3, r2
 80025ce:	e009      	b.n	80025e4 <stp_Move+0x58>
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	425a      	negs	r2, r3
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	f002 0203 	and.w	r2, r2, #3
 80025dc:	bf58      	it	pl
 80025de:	4253      	negpl	r3, r2
 80025e0:	f1c3 0303 	rsb	r3, r3, #3
 80025e4:	613b      	str	r3, [r7, #16]
       stp_Step(motor, stepIndex);
 80025e6:	6939      	ldr	r1, [r7, #16]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff ff29 	bl	8002440 <stp_Step>
       HAL_Delay(delay); // Speed control
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fd43 	bl	800307c <HAL_Delay>
   for (int i = 0; i < stepCount; i++) {
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbd9      	blt.n	80025b8 <stp_Move+0x2c>
   }
   stp_Stop(motor);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff ff9f 	bl	8002548 <stp_Stop>
}
 800260a:	bf00      	nop
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <stp_moveDistance>:

void stp_moveDistance(Stepper* motor, float distance_cm){
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	ed87 0a00 	vstr	s0, [r7]
	int sign = 1;
 8002620:	2301      	movs	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
    if(distance_cm < 0.0){
 8002624:	edd7 7a00 	vldr	s15, [r7]
 8002628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	d50a      	bpl.n	8002648 <stp_moveDistance+0x34>
        sign = -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	60fb      	str	r3, [r7, #12]
        flashLED(LD3_GPIO_Port, LD3_Pin, 500, 10);
 8002638:	230a      	movs	r3, #10
 800263a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800263e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002642:	480f      	ldr	r0, [pc, #60]	@ (8002680 <stp_moveDistance+0x6c>)
 8002644:	f7fe fd18 	bl	8001078 <flashLED>
    }
    
   int convertedSteps = sign * abs(distance_cm * NEMA_DISTANCE_TO_STEPS);
 8002648:	edd7 7a00 	vldr	s15, [r7]
 800264c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002684 <stp_moveDistance+0x70>
 8002650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002658:	ee17 3a90 	vmov	r3, s15
 800265c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002660:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	60bb      	str	r3, [r7, #8]
   stp_Move(motor, convertedSteps, 5);
 800266c:	2205      	movs	r2, #5
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff8b 	bl	800258c <stp_Move>
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40020400 	.word	0x40020400
 8002684:	42440000 	.word	0x42440000

08002688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <HAL_MspInit+0x4c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4a0f      	ldr	r2, [pc, #60]	@ (80026d4 <HAL_MspInit+0x4c>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269c:	6453      	str	r3, [r2, #68]	@ 0x44
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <HAL_MspInit+0x4c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <HAL_MspInit+0x4c>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	4a08      	ldr	r2, [pc, #32]	@ (80026d4 <HAL_MspInit+0x4c>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_MspInit+0x4c>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	@ 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2f      	ldr	r2, [pc, #188]	@ (80027b4 <HAL_ADC_MspInit+0xdc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d158      	bne.n	80027ac <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <HAL_ADC_MspInit+0xe0>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <HAL_ADC_MspInit+0xe0>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002708:	6453      	str	r3, [r2, #68]	@ 0x44
 800270a:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <HAL_ADC_MspInit+0xe0>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b27      	ldr	r3, [pc, #156]	@ (80027b8 <HAL_ADC_MspInit+0xe0>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4a26      	ldr	r2, [pc, #152]	@ (80027b8 <HAL_ADC_MspInit+0xe0>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_ADC_MspInit+0xe0>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002736:	2303      	movs	r3, #3
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	481d      	ldr	r0, [pc, #116]	@ (80027bc <HAL_ADC_MspInit+0xe4>)
 8002746:	f003 f837 	bl	80057b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800274a:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 800274c:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <HAL_ADC_MspInit+0xec>)
 800274e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002750:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002756:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800275c:	4b18      	ldr	r3, [pc, #96]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002764:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002768:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 800276c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002770:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002772:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002774:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002778:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800277a:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 800277c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002780:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002782:	4b0f      	ldr	r3, [pc, #60]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002784:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002788:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 800278c:	2200      	movs	r2, #0
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002790:	480b      	ldr	r0, [pc, #44]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 8002792:	f001 fa87 	bl	8003ca4 <HAL_DMA_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800279c:	f7ff f84a 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a07      	ldr	r2, [pc, #28]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 80027a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80027a6:	4a06      	ldr	r2, [pc, #24]	@ (80027c0 <HAL_ADC_MspInit+0xe8>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	@ 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40012000 	.word	0x40012000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	20000270 	.word	0x20000270
 80027c4:	40026410 	.word	0x40026410

080027c8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	@ 0x38
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a78      	ldr	r2, [pc, #480]	@ (80029c8 <HAL_DCMI_MspInit+0x200>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	f040 80e9 	bne.w	80029be <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	4b76      	ldr	r3, [pc, #472]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 80027f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f4:	4a75      	ldr	r2, [pc, #468]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6353      	str	r3, [r2, #52]	@ 0x34
 80027fc:	4b73      	ldr	r3, [pc, #460]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	4b6f      	ldr	r3, [pc, #444]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002810:	4a6e      	ldr	r2, [pc, #440]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	6313      	str	r3, [r2, #48]	@ 0x30
 8002818:	4b6c      	ldr	r3, [pc, #432]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	4b68      	ldr	r3, [pc, #416]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	4a67      	ldr	r2, [pc, #412]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6313      	str	r3, [r2, #48]	@ 0x30
 8002834:	4b65      	ldr	r3, [pc, #404]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	4b61      	ldr	r3, [pc, #388]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	4a60      	ldr	r2, [pc, #384]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002850:	4b5e      	ldr	r3, [pc, #376]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	4b5a      	ldr	r3, [pc, #360]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	4a59      	ldr	r2, [pc, #356]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 8002866:	f043 0308 	orr.w	r3, r3, #8
 800286a:	6313      	str	r3, [r2, #48]	@ 0x30
 800286c:	4b57      	ldr	r3, [pc, #348]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	4b53      	ldr	r3, [pc, #332]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	4a52      	ldr	r2, [pc, #328]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 8002882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002886:	6313      	str	r3, [r2, #48]	@ 0x30
 8002888:	4b50      	ldr	r3, [pc, #320]	@ (80029cc <HAL_DCMI_MspInit+0x204>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002894:	2370      	movs	r3, #112	@ 0x70
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028a4:	230d      	movs	r3, #13
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ac:	4619      	mov	r1, r3
 80028ae:	4848      	ldr	r0, [pc, #288]	@ (80029d0 <HAL_DCMI_MspInit+0x208>)
 80028b0:	f002 ff82 	bl	80057b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80028b4:	2350      	movs	r3, #80	@ 0x50
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028c4:	230d      	movs	r3, #13
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028cc:	4619      	mov	r1, r3
 80028ce:	4841      	ldr	r0, [pc, #260]	@ (80029d4 <HAL_DCMI_MspInit+0x20c>)
 80028d0:	f002 ff72 	bl	80057b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028d4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028e6:	230d      	movs	r3, #13
 80028e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ee:	4619      	mov	r1, r3
 80028f0:	4839      	ldr	r0, [pc, #228]	@ (80029d8 <HAL_DCMI_MspInit+0x210>)
 80028f2:	f002 ff61 	bl	80057b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028f6:	2308      	movs	r3, #8
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002906:	230d      	movs	r3, #13
 8002908:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800290a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800290e:	4619      	mov	r1, r3
 8002910:	4832      	ldr	r0, [pc, #200]	@ (80029dc <HAL_DCMI_MspInit+0x214>)
 8002912:	f002 ff51 	bl	80057b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002928:	230d      	movs	r3, #13
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800292c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	482b      	ldr	r0, [pc, #172]	@ (80029e0 <HAL_DCMI_MspInit+0x218>)
 8002934:	f002 ff40 	bl	80057b8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002938:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 800293a:	4a2b      	ldr	r2, [pc, #172]	@ (80029e8 <HAL_DCMI_MspInit+0x220>)
 800293c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800293e:	4b29      	ldr	r3, [pc, #164]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 8002940:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002944:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002946:	4b27      	ldr	r3, [pc, #156]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002952:	4b24      	ldr	r3, [pc, #144]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 8002954:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002958:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800295a:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 800295c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002960:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002962:	4b20      	ldr	r3, [pc, #128]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 8002964:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002968:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800296a:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 800296c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002970:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002972:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 8002974:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002978:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 800297c:	2204      	movs	r2, #4
 800297e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002980:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 8002982:	2203      	movs	r2, #3
 8002984:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002986:	4b17      	ldr	r3, [pc, #92]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 8002988:	2200      	movs	r2, #0
 800298a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 800298e:	2200      	movs	r2, #0
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002992:	4814      	ldr	r0, [pc, #80]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 8002994:	f001 f986 	bl	8003ca4 <HAL_DMA_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 800299e:	f7fe ff49 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0f      	ldr	r2, [pc, #60]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 80029a6:	649a      	str	r2, [r3, #72]	@ 0x48
 80029a8:	4a0e      	ldr	r2, [pc, #56]	@ (80029e4 <HAL_DCMI_MspInit+0x21c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	204e      	movs	r0, #78	@ 0x4e
 80029b4:	f000 fed3 	bl	800375e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80029b8:	204e      	movs	r0, #78	@ 0x4e
 80029ba:	f000 feec 	bl	8003796 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 80029be:	bf00      	nop
 80029c0:	3738      	adds	r7, #56	@ 0x38
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	50050000 	.word	0x50050000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021800 	.word	0x40021800
 80029e4:	20000320 	.word	0x20000320
 80029e8:	40026428 	.word	0x40026428

080029ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	@ 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a32      	ldr	r2, [pc, #200]	@ (8002ad4 <HAL_I2C_MspInit+0xe8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d12d      	bne.n	8002a6a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	4a30      	ldr	r2, [pc, #192]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002a2a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a30:	2312      	movs	r3, #18
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	4825      	ldr	r0, [pc, #148]	@ (8002adc <HAL_I2C_MspInit+0xf0>)
 8002a48:	f002 feb6 	bl	80057b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	4a20      	ldr	r2, [pc, #128]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a68:	e030      	b.n	8002acc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <HAL_I2C_MspInit+0xf4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d12b      	bne.n	8002acc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	4a16      	ldr	r2, [pc, #88]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a7e:	f043 0320 	orr.w	r3, r3, #32
 8002a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a84:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a90:	2303      	movs	r3, #3
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a94:	2312      	movs	r3, #18
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	480e      	ldr	r0, [pc, #56]	@ (8002ae4 <HAL_I2C_MspInit+0xf8>)
 8002aac:	f002 fe84 	bl	80057b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	4a07      	ldr	r2, [pc, #28]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002aba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002abe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3730      	adds	r7, #48	@ 0x30
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40005400 	.word	0x40005400
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	40005800 	.word	0x40005800
 8002ae4:	40021400 	.word	0x40021400

08002ae8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b24 <HAL_TIM_PWM_MspInit+0x3c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10d      	bne.n	8002b16 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x40>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	4a09      	ldr	r2, [pc, #36]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x40>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x40>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40023800 	.word	0x40023800

08002b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d10e      	bne.n	8002b5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b16      	ldr	r3, [pc, #88]	@ (8002b9c <HAL_TIM_Base_MspInit+0x70>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	4a15      	ldr	r2, [pc, #84]	@ (8002b9c <HAL_TIM_Base_MspInit+0x70>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4e:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <HAL_TIM_Base_MspInit+0x70>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b5a:	e01a      	b.n	8002b92 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba0 <HAL_TIM_Base_MspInit+0x74>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d115      	bne.n	8002b92 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <HAL_TIM_Base_MspInit+0x70>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b9c <HAL_TIM_Base_MspInit+0x70>)
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_TIM_Base_MspInit+0x70>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	2036      	movs	r0, #54	@ 0x36
 8002b88:	f000 fde9 	bl	800375e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b8c:	2036      	movs	r0, #54	@ 0x36
 8002b8e:	f000 fe02 	bl	8003796 <HAL_NVIC_EnableIRQ>
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40001000 	.word	0x40001000

08002ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a12      	ldr	r2, [pc, #72]	@ (8002c0c <HAL_TIM_MspPostInit+0x68>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d11e      	bne.n	8002c04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <HAL_TIM_MspPostInit+0x6c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	4a10      	ldr	r2, [pc, #64]	@ (8002c10 <HAL_TIM_MspPostInit+0x6c>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <HAL_TIM_MspPostInit+0x6c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002be2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4805      	ldr	r0, [pc, #20]	@ (8002c14 <HAL_TIM_MspPostInit+0x70>)
 8002c00:	f002 fdda 	bl	80057b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c04:	bf00      	nop
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	@ (8002cac <HAL_UART_MspInit+0x94>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d134      	bne.n	8002ca4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <HAL_UART_MspInit+0x98>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb0 <HAL_UART_MspInit+0x98>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4a:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <HAL_UART_MspInit+0x98>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <HAL_UART_MspInit+0x98>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <HAL_UART_MspInit+0x98>)
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c66:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_UART_MspInit+0x98>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c84:	2307      	movs	r3, #7
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4809      	ldr	r0, [pc, #36]	@ (8002cb4 <HAL_UART_MspInit+0x9c>)
 8002c90:	f002 fd92 	bl	80057b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2100      	movs	r1, #0
 8002c98:	2027      	movs	r0, #39	@ 0x27
 8002c9a:	f000 fd60 	bl	800375e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c9e:	2027      	movs	r0, #39	@ 0x27
 8002ca0:	f000 fd79 	bl	8003796 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	@ 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40004800 	.word	0x40004800
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020c00 	.word	0x40020c00

08002cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <NMI_Handler+0x4>

08002cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <HardFault_Handler+0x4>

08002cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <MemManage_Handler+0x4>

08002cd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <BusFault_Handler+0x4>

08002cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <UsageFault_Handler+0x4>

08002ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d0e:	f000 f995 	bl	800303c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d1c:	4802      	ldr	r0, [pc, #8]	@ (8002d28 <USART3_IRQHandler+0x10>)
 8002d1e:	f006 fad3 	bl	80092c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000500 	.word	0x20000500

08002d2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002d30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d34:	f002 ff08 	bl	8005b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d40:	4802      	ldr	r0, [pc, #8]	@ (8002d4c <TIM6_DAC_IRQHandler+0x10>)
 8002d42:	f005 fb17 	bl	8008374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200004b8 	.word	0x200004b8

08002d50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d54:	4802      	ldr	r0, [pc, #8]	@ (8002d60 <DMA2_Stream0_IRQHandler+0x10>)
 8002d56:	f001 f93d 	bl	8003fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000270 	.word	0x20000270

08002d64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002d68:	4803      	ldr	r0, [pc, #12]	@ (8002d78 <DMA2_Stream1_IRQHandler+0x14>)
 8002d6a:	f001 f933 	bl	8003fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	dma_flag = 1;
 8002d6e:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <DMA2_Stream1_IRQHandler+0x18>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000320 	.word	0x20000320
 8002d7c:	20018ce0 	.word	0x20018ce0

08002d80 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002d84:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <DCMI_IRQHandler+0x10>)
 8002d86:	f000 fdc1 	bl	800390c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200002d0 	.word	0x200002d0

08002d94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return 1;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <_kill>:

int _kill(int pid, int sig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dae:	f008 f845 	bl	800ae3c <__errno>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2216      	movs	r2, #22
 8002db6:	601a      	str	r2, [r3, #0]
  return -1;
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_exit>:

void _exit (int status)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffe7 	bl	8002da4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <_exit+0x12>

08002dda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e00a      	b.n	8002e02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dec:	f3af 8000 	nop.w
 8002df0:	4601      	mov	r1, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	60ba      	str	r2, [r7, #8]
 8002df8:	b2ca      	uxtb	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	dbf0      	blt.n	8002dec <_read+0x12>
  }

  return len;
 8002e0a:	687b      	ldr	r3, [r7, #4]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e009      	b.n	8002e3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	60ba      	str	r2, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbf1      	blt.n	8002e26 <_write+0x12>
  }
  return len;
 8002e42:	687b      	ldr	r3, [r7, #4]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_close>:

int _close(int file)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e74:	605a      	str	r2, [r3, #4]
  return 0;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_isatty>:

int _isatty(int file)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e8c:	2301      	movs	r3, #1
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	@ (8002f10 <_sbrk+0x5c>)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <_sbrk+0x60>)
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <_sbrk+0x64>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <_sbrk+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee4:	f007 ffaa 	bl	800ae3c <__errno>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	220c      	movs	r2, #12
 8002eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e009      	b.n	8002f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <_sbrk+0x64>)
 8002f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20020000 	.word	0x20020000
 8002f14:	00000400 	.word	0x00000400
 8002f18:	20018d20 	.word	0x20018d20
 8002f1c:	20018e78 	.word	0x20018e78

08002f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <SystemInit+0x20>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2a:	4a05      	ldr	r2, [pc, #20]	@ (8002f40 <SystemInit+0x20>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f48:	f7ff ffea 	bl	8002f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f4c:	480c      	ldr	r0, [pc, #48]	@ (8002f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f4e:	490d      	ldr	r1, [pc, #52]	@ (8002f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f54:	e002      	b.n	8002f5c <LoopCopyDataInit>

08002f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5a:	3304      	adds	r3, #4

08002f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f60:	d3f9      	bcc.n	8002f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f62:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f64:	4c0a      	ldr	r4, [pc, #40]	@ (8002f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f68:	e001      	b.n	8002f6e <LoopFillZerobss>

08002f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f6c:	3204      	adds	r2, #4

08002f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f70:	d3fb      	bcc.n	8002f6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f72:	f007 ff69 	bl	800ae48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f76:	f7fe fd85 	bl	8001a84 <main>
  bx  lr    
 8002f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f88:	080211b8 	.word	0x080211b8
  ldr r2, =_sbss
 8002f8c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f90:	20018e74 	.word	0x20018e74

08002f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC_IRQHandler>
	...

08002f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd8 <HAL_Init+0x40>)
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <HAL_Init+0x40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd8 <HAL_Init+0x40>)
 8002fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb4:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <HAL_Init+0x40>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f000 fbc1 	bl	8003748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f000 f808 	bl	8002fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fcc:	f7ff fb5c 	bl	8002688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023c00 	.word	0x40023c00

08002fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe4:	4b12      	ldr	r3, [pc, #72]	@ (8003030 <HAL_InitTick+0x54>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <HAL_InitTick+0x58>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fbd9 	bl	80037b2 <HAL_SYSTICK_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e00e      	b.n	8003028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d80a      	bhi.n	8003026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003010:	2200      	movs	r2, #0
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f000 fba1 	bl	800375e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800301c:	4a06      	ldr	r2, [pc, #24]	@ (8003038 <HAL_InitTick+0x5c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000000 	.word	0x20000000
 8003034:	20000008 	.word	0x20000008
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_IncTick+0x20>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_IncTick+0x24>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4413      	add	r3, r2
 800304c:	4a04      	ldr	r2, [pc, #16]	@ (8003060 <HAL_IncTick+0x24>)
 800304e:	6013      	str	r3, [r2, #0]
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000008 	.word	0x20000008
 8003060:	20018d24 	.word	0x20018d24

08003064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return uwTick;
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <HAL_GetTick+0x14>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20018d24 	.word	0x20018d24

0800307c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003084:	f7ff ffee 	bl	8003064 <HAL_GetTick>
 8003088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d005      	beq.n	80030a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_Delay+0x44>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030a2:	bf00      	nop
 80030a4:	f7ff ffde 	bl	8003064 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d8f7      	bhi.n	80030a4 <HAL_Delay+0x28>
  {
  }
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000008 	.word	0x20000008

080030c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e033      	b.n	8003142 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff faf8 	bl	80026d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800310a:	f023 0302 	bic.w	r3, r3, #2
 800310e:	f043 0202 	orr.w	r2, r3, #2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f94a 	bl	80033b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	@ 0x40
 8003132:	e001      	b.n	8003138 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x1c>
 8003164:	2302      	movs	r3, #2
 8003166:	e113      	b.n	8003390 <HAL_ADC_ConfigChannel+0x244>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b09      	cmp	r3, #9
 8003176:	d925      	bls.n	80031c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	3b1e      	subs	r3, #30
 800318e:	2207      	movs	r2, #7
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43da      	mvns	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	400a      	ands	r2, r1
 800319c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68d9      	ldr	r1, [r3, #12]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	4603      	mov	r3, r0
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4403      	add	r3, r0
 80031b6:	3b1e      	subs	r3, #30
 80031b8:	409a      	lsls	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	e022      	b.n	800320a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6919      	ldr	r1, [r3, #16]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	2207      	movs	r2, #7
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	400a      	ands	r2, r1
 80031e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6919      	ldr	r1, [r3, #16]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4618      	mov	r0, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4403      	add	r3, r0
 8003200:	409a      	lsls	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b06      	cmp	r3, #6
 8003210:	d824      	bhi.n	800325c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	3b05      	subs	r3, #5
 8003224:	221f      	movs	r2, #31
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	400a      	ands	r2, r1
 8003232:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	4618      	mov	r0, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b05      	subs	r3, #5
 800324e:	fa00 f203 	lsl.w	r2, r0, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	635a      	str	r2, [r3, #52]	@ 0x34
 800325a:	e04c      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d824      	bhi.n	80032ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b23      	subs	r3, #35	@ 0x23
 8003276:	221f      	movs	r2, #31
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43da      	mvns	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	400a      	ands	r2, r1
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3b23      	subs	r3, #35	@ 0x23
 80032a0:	fa00 f203 	lsl.w	r2, r0, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80032ac:	e023      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	3b41      	subs	r3, #65	@ 0x41
 80032c0:	221f      	movs	r2, #31
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	3b41      	subs	r3, #65	@ 0x41
 80032ea:	fa00 f203 	lsl.w	r2, r0, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f6:	4b29      	ldr	r3, [pc, #164]	@ (800339c <HAL_ADC_ConfigChannel+0x250>)
 80032f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a28      	ldr	r2, [pc, #160]	@ (80033a0 <HAL_ADC_ConfigChannel+0x254>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10f      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1d8>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b12      	cmp	r3, #18
 800330a:	d10b      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1d      	ldr	r2, [pc, #116]	@ (80033a0 <HAL_ADC_ConfigChannel+0x254>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d12b      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x23a>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1c      	ldr	r2, [pc, #112]	@ (80033a4 <HAL_ADC_ConfigChannel+0x258>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x1f4>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b11      	cmp	r3, #17
 800333e:	d122      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a11      	ldr	r2, [pc, #68]	@ (80033a4 <HAL_ADC_ConfigChannel+0x258>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d111      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003362:	4b11      	ldr	r3, [pc, #68]	@ (80033a8 <HAL_ADC_ConfigChannel+0x25c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a11      	ldr	r2, [pc, #68]	@ (80033ac <HAL_ADC_ConfigChannel+0x260>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	0c9a      	lsrs	r2, r3, #18
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003378:	e002      	b.n	8003380 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3b01      	subs	r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f9      	bne.n	800337a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40012300 	.word	0x40012300
 80033a0:	40012000 	.word	0x40012000
 80033a4:	10000012 	.word	0x10000012
 80033a8:	20000000 	.word	0x20000000
 80033ac:	431bde83 	.word	0x431bde83

080033b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b8:	4b79      	ldr	r3, [pc, #484]	@ (80035a0 <ADC_Init+0x1f0>)
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	021a      	lsls	r2, r3, #8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800342a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	4a58      	ldr	r2, [pc, #352]	@ (80035a4 <ADC_Init+0x1f4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d022      	beq.n	800348e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6899      	ldr	r1, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e00f      	b.n	80034ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800349c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0202 	bic.w	r2, r2, #2
 80034bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6899      	ldr	r1, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7e1b      	ldrb	r3, [r3, #24]
 80034c8:	005a      	lsls	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6859      	ldr	r1, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	3b01      	subs	r3, #1
 8003508:	035a      	lsls	r2, r3, #13
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	e007      	b.n	8003524 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003532:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	3b01      	subs	r3, #1
 8003540:	051a      	lsls	r2, r3, #20
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003566:	025a      	lsls	r2, r3, #9
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800357e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6899      	ldr	r1, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	029a      	lsls	r2, r3, #10
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40012300 	.word	0x40012300
 80035a4:	0f000001 	.word	0x0f000001

080035a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b8:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035c4:	4013      	ands	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035da:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	60d3      	str	r3, [r2, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f4:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <__NVIC_GetPriorityGrouping+0x18>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	f003 0307 	and.w	r3, r3, #7
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	2b00      	cmp	r3, #0
 800361c:	db0b      	blt.n	8003636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4907      	ldr	r1, [pc, #28]	@ (8003644 <__NVIC_EnableIRQ+0x38>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2001      	movs	r0, #1
 800362e:	fa00 f202 	lsl.w	r2, r0, r2
 8003632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000e100 	.word	0xe000e100

08003648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	db0a      	blt.n	8003672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	490c      	ldr	r1, [pc, #48]	@ (8003694 <__NVIC_SetPriority+0x4c>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	440b      	add	r3, r1
 800366c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003670:	e00a      	b.n	8003688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4908      	ldr	r1, [pc, #32]	@ (8003698 <__NVIC_SetPriority+0x50>)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	3b04      	subs	r3, #4
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	440b      	add	r3, r1
 8003686:	761a      	strb	r2, [r3, #24]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000e100 	.word	0xe000e100
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	@ 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f1c3 0307 	rsb	r3, r3, #7
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf28      	it	cs
 80036ba:	2304      	movcs	r3, #4
 80036bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d902      	bls.n	80036cc <NVIC_EncodePriority+0x30>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3b03      	subs	r3, #3
 80036ca:	e000      	b.n	80036ce <NVIC_EncodePriority+0x32>
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e4:	f04f 31ff 	mov.w	r1, #4294967295
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43d9      	mvns	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	4313      	orrs	r3, r2
         );
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	@ 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003714:	d301      	bcc.n	800371a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003716:	2301      	movs	r3, #1
 8003718:	e00f      	b.n	800373a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800371a:	4a0a      	ldr	r2, [pc, #40]	@ (8003744 <SysTick_Config+0x40>)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3b01      	subs	r3, #1
 8003720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003722:	210f      	movs	r1, #15
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	f7ff ff8e 	bl	8003648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800372c:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <SysTick_Config+0x40>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003732:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <SysTick_Config+0x40>)
 8003734:	2207      	movs	r2, #7
 8003736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	e000e010 	.word	0xe000e010

08003748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff29 	bl	80035a8 <__NVIC_SetPriorityGrouping>
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003770:	f7ff ff3e 	bl	80035f0 <__NVIC_GetPriorityGrouping>
 8003774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f7ff ff8e 	bl	800369c <NVIC_EncodePriority>
 8003780:	4602      	mov	r2, r0
 8003782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ff5d 	bl	8003648 <__NVIC_SetPriority>
}
 800378e:	bf00      	nop
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	4603      	mov	r3, r0
 800379e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff31 	bl	800360c <__NVIC_EnableIRQ>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffa2 	bl	8003704 <SysTick_Config>
 80037c0:	4603      	mov	r3, r0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_DCMI_Start_DMA+0x20>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e086      	b.n	80038fa <HAL_DCMI_Start_DMA+0x12e>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800380a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0202 	bic.w	r2, r2, #2
 800381a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003830:	4a34      	ldr	r2, [pc, #208]	@ (8003904 <HAL_DCMI_Start_DMA+0x138>)
 8003832:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003838:	4a33      	ldr	r2, [pc, #204]	@ (8003908 <HAL_DCMI_Start_DMA+0x13c>)
 800383a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003840:	2200      	movs	r2, #0
 8003842:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003856:	d20a      	bcs.n	800386e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3328      	adds	r3, #40	@ 0x28
 8003862:	4619      	mov	r1, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	f000 faca 	bl	8003e00 <HAL_DMA_Start_IT>
 800386c:	e038      	b.n	80038e0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003872:	4a24      	ldr	r2, [pc, #144]	@ (8003904 <HAL_DCMI_Start_DMA+0x138>)
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8003888:	e009      	b.n	800389e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388e:	085a      	lsrs	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	005a      	lsls	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a6:	d2f0      	bcs.n	800388a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	1e9a      	subs	r2, r3, #2
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3328      	adds	r3, #40	@ 0x28
 80038d0:	4619      	mov	r1, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	f000 fde4 	bl	80044a8 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	08003a59 	.word	0x08003a59
 8003908:	08003b83 	.word	0x08003b83

0800390c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2204      	movs	r2, #4
 800392c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	f043 0202 	orr.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2204      	movs	r2, #4
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	4a2f      	ldr	r2, [pc, #188]	@ (8003a04 <HAL_DCMI_IRQHandler+0xf8>)
 8003948:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fb1e 	bl	8003f90 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2202      	movs	r2, #2
 8003964:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2204      	movs	r2, #4
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397e:	4a21      	ldr	r2, [pc, #132]	@ (8003a04 <HAL_DCMI_IRQHandler+0xf8>)
 8003980:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fb02 	bl	8003f90 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2210      	movs	r2, #16
 800399c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f83c 	bl	8003a1c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2208      	movs	r2, #8
 80039b4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f83a 	bl	8003a30 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d019      	beq.n	80039fa <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d107      	bne.n	80039e4 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 021e 	bic.w	r2, r2, #30
 80039e2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f825 	bl	8003a44 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	08003b83 	.word	0x08003b83

08003a08 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d043      	beq.n	8003afa <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a7e:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d118      	bne.n	8003abe <DCMI_DMAXferCplt+0x66>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d015      	beq.n	8003abe <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa4:	00da      	lsls	r2, r3, #3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4619      	mov	r1, r3
 8003aae:	f001 fe43 	bl	8005738 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8003abc:	e044      	b.n	8003b48 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d13c      	bne.n	8003b48 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	00da      	lsls	r2, r3, #3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f001 fe25 	bl	8005738 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	1e5a      	subs	r2, r3, #1
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	639a      	str	r2, [r3, #56]	@ 0x38
 8003af8:	e026      	b.n	8003b48 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	e017      	b.n	8003b48 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10f      	bne.n	8003b48 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2c:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d112      	bne.n	8003b7a <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d103      	bne.n	8003b7a <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d003      	beq.n	8003ba2 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff ff30 	bl	8003a08 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e069      	b.n	8003c96 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fe fdf6 	bl	80027c8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fe fdf3 	bl	80027c8 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca0 <HAL_DCMI_Init+0xf0>)
 8003bf6:	400b      	ands	r3, r1
 8003bf8:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003c0e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003c1a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003c26:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8003c32:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c3e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d112      	bne.n	8003c76 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7f1b      	ldrb	r3, [r3, #28]
 8003c54:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7f5b      	ldrb	r3, [r3, #29]
 8003c5a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c5c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7f9b      	ldrb	r3, [r3, #30]
 8003c62:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003c64:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7fdb      	ldrb	r3, [r3, #31]
 8003c6c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003c72:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003c74:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 021e 	orr.w	r2, r2, #30
 8003c84:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	ffe0f007 	.word	0xffe0f007

08003ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff f9d8 	bl	8003064 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e099      	b.n	8003df4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce0:	e00f      	b.n	8003d02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ce2:	f7ff f9bf 	bl	8003064 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d908      	bls.n	8003d02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e078      	b.n	8003df4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e8      	bne.n	8003ce2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4b38      	ldr	r3, [pc, #224]	@ (8003dfc <HAL_DMA_Init+0x158>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d107      	bne.n	8003d6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	4313      	orrs	r3, r2
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d117      	bne.n	8003dc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fb01 	bl	80043b0 <DMA_CheckFifoParam>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2240      	movs	r2, #64	@ 0x40
 8003db8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e016      	b.n	8003df4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fab8 	bl	8004344 <DMA_CalcBaseAndBitshift>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	223f      	movs	r2, #63	@ 0x3f
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	f010803f 	.word	0xf010803f

08003e00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_DMA_Start_IT+0x26>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e040      	b.n	8003ea8 <HAL_DMA_Start_IT+0xa8>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d12f      	bne.n	8003e9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa4a 	bl	80042e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	223f      	movs	r2, #63	@ 0x3f
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0216 	orr.w	r2, r2, #22
 8003e6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0208 	orr.w	r2, r2, #8
 8003e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e005      	b.n	8003ea6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ebe:	f7ff f8d1 	bl	8003064 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d008      	beq.n	8003ee2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2280      	movs	r2, #128	@ 0x80
 8003ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e052      	b.n	8003f88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0216 	bic.w	r2, r2, #22
 8003ef0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_DMA_Abort+0x62>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0208 	bic.w	r2, r2, #8
 8003f20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f32:	e013      	b.n	8003f5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f34:	f7ff f896 	bl	8003064 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d90c      	bls.n	8003f5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e015      	b.n	8003f88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e4      	bne.n	8003f34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	223f      	movs	r2, #63	@ 0x3f
 8003f70:	409a      	lsls	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d004      	beq.n	8003fae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2280      	movs	r2, #128	@ 0x80
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e00c      	b.n	8003fc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2205      	movs	r2, #5
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fe0:	4b8e      	ldr	r3, [pc, #568]	@ (800421c <HAL_DMA_IRQHandler+0x248>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a8e      	ldr	r2, [pc, #568]	@ (8004220 <HAL_DMA_IRQHandler+0x24c>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	0a9b      	lsrs	r3, r3, #10
 8003fec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffe:	2208      	movs	r2, #8
 8004000:	409a      	lsls	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01a      	beq.n	8004040 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402c:	2208      	movs	r2, #8
 800402e:	409a      	lsls	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004044:	2201      	movs	r2, #1
 8004046:	409a      	lsls	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d012      	beq.n	8004076 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004062:	2201      	movs	r2, #1
 8004064:	409a      	lsls	r2, r3
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	f043 0202 	orr.w	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407a:	2204      	movs	r2, #4
 800407c:	409a      	lsls	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d012      	beq.n	80040ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	2204      	movs	r2, #4
 800409a:	409a      	lsls	r2, r3
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a4:	f043 0204 	orr.w	r2, r3, #4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	2210      	movs	r2, #16
 80040b2:	409a      	lsls	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d043      	beq.n	8004144 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d03c      	beq.n	8004144 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ce:	2210      	movs	r2, #16
 80040d0:	409a      	lsls	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d018      	beq.n	8004116 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d024      	beq.n	8004144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
 8004102:	e01f      	b.n	8004144 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01b      	beq.n	8004144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
 8004114:	e016      	b.n	8004144 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0208 	bic.w	r2, r2, #8
 8004132:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004148:	2220      	movs	r2, #32
 800414a:	409a      	lsls	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 808f 	beq.w	8004274 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8087 	beq.w	8004274 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416a:	2220      	movs	r2, #32
 800416c:	409a      	lsls	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b05      	cmp	r3, #5
 800417c:	d136      	bne.n	80041ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0216 	bic.w	r2, r2, #22
 800418c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800419c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <HAL_DMA_IRQHandler+0x1da>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0208 	bic.w	r2, r2, #8
 80041bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c2:	223f      	movs	r2, #63	@ 0x3f
 80041c4:	409a      	lsls	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d07e      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
        }
        return;
 80041ea:	e079      	b.n	80042e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01d      	beq.n	8004236 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10d      	bne.n	8004224 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420c:	2b00      	cmp	r3, #0
 800420e:	d031      	beq.n	8004274 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
 8004218:	e02c      	b.n	8004274 <HAL_DMA_IRQHandler+0x2a0>
 800421a:	bf00      	nop
 800421c:	20000000 	.word	0x20000000
 8004220:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d023      	beq.n	8004274 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
 8004234:	e01e      	b.n	8004274 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10f      	bne.n	8004264 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0210 	bic.w	r2, r2, #16
 8004252:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004278:	2b00      	cmp	r3, #0
 800427a:	d032      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d022      	beq.n	80042ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2205      	movs	r2, #5
 800428c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d307      	bcc.n	80042bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f2      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x2cc>
 80042ba:	e000      	b.n	80042be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	4798      	blx	r3
 80042de:	e000      	b.n	80042e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042e0:	bf00      	nop
    }
  }
}
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004304:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b40      	cmp	r3, #64	@ 0x40
 8004314:	d108      	bne.n	8004328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004326:	e007      	b.n	8004338 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	3b10      	subs	r3, #16
 8004354:	4a14      	ldr	r2, [pc, #80]	@ (80043a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800435e:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <DMA_CalcBaseAndBitshift+0x68>)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b03      	cmp	r3, #3
 8004370:	d909      	bls.n	8004386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	659a      	str	r2, [r3, #88]	@ 0x58
 8004384:	e007      	b.n	8004396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	aaaaaaab 	.word	0xaaaaaaab
 80043ac:	0800d994 	.word	0x0800d994

080043b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d11f      	bne.n	800440a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d856      	bhi.n	800447e <DMA_CheckFifoParam+0xce>
 80043d0:	a201      	add	r2, pc, #4	@ (adr r2, 80043d8 <DMA_CheckFifoParam+0x28>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043fb 	.word	0x080043fb
 80043e0:	080043e9 	.word	0x080043e9
 80043e4:	0800447f 	.word	0x0800447f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d046      	beq.n	8004482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f8:	e043      	b.n	8004482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004402:	d140      	bne.n	8004486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004408:	e03d      	b.n	8004486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004412:	d121      	bne.n	8004458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d837      	bhi.n	800448a <DMA_CheckFifoParam+0xda>
 800441a:	a201      	add	r2, pc, #4	@ (adr r2, 8004420 <DMA_CheckFifoParam+0x70>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004431 	.word	0x08004431
 8004424:	08004437 	.word	0x08004437
 8004428:	08004431 	.word	0x08004431
 800442c:	08004449 	.word	0x08004449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      break;
 8004434:	e030      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d025      	beq.n	800448e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004446:	e022      	b.n	800448e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004450:	d11f      	bne.n	8004492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004456:	e01c      	b.n	8004492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d903      	bls.n	8004466 <DMA_CheckFifoParam+0xb6>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d003      	beq.n	800446c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004464:	e018      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
      break;
 800446a:	e015      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00e      	beq.n	8004496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e00b      	b.n	8004496 <DMA_CheckFifoParam+0xe6>
      break;
 800447e:	bf00      	nop
 8004480:	e00a      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
      break;
 8004482:	bf00      	nop
 8004484:	e008      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
      break;
 8004486:	bf00      	nop
 8004488:	e006      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
      break;
 800448a:	bf00      	nop
 800448c:	e004      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
      break;
 800448e:	bf00      	nop
 8004490:	e002      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
      break;   
 8004492:	bf00      	nop
 8004494:	e000      	b.n	8004498 <DMA_CheckFifoParam+0xe8>
      break;
 8004496:	bf00      	nop
    }
  } 
  
  return status; 
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop

080044a8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b80      	cmp	r3, #128	@ 0x80
 80044c0:	d106      	bne.n	80044d0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f001 b911 	b.w	80056f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2240      	movs	r2, #64	@ 0x40
 80044ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f001 b8ff 	b.w	80056f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d102      	bne.n	8004504 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80044fe:	2302      	movs	r3, #2
 8004500:	f001 b8f7 	b.w	80056f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	f041 80e5 	bne.w	80056e4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004536:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f001 f910 	bl	800576c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	4b8d      	ldr	r3, [pc, #564]	@ (8004788 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d960      	bls.n	800461a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a8b      	ldr	r2, [pc, #556]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d057      	beq.n	8004612 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a8a      	ldr	r2, [pc, #552]	@ (8004790 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d050      	beq.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a88      	ldr	r2, [pc, #544]	@ (8004794 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d049      	beq.n	800460a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a87      	ldr	r2, [pc, #540]	@ (8004798 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d042      	beq.n	8004606 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a85      	ldr	r2, [pc, #532]	@ (800479c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d03a      	beq.n	8004600 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a84      	ldr	r2, [pc, #528]	@ (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d032      	beq.n	80045fa <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a82      	ldr	r2, [pc, #520]	@ (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02a      	beq.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a81      	ldr	r2, [pc, #516]	@ (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d022      	beq.n	80045ee <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a7f      	ldr	r2, [pc, #508]	@ (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01a      	beq.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7e      	ldr	r2, [pc, #504]	@ (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d012      	beq.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a7c      	ldr	r2, [pc, #496]	@ (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00a      	beq.n	80045dc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7b      	ldr	r2, [pc, #492]	@ (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d102      	bne.n	80045d6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80045d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045d4:	e01e      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045da:	e01b      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045e0:	e018      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045e6:	e015      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045ec:	e012      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045f2:	e00f      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045f8:	e00c      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80045fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045fe:	e009      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004600:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004604:	e006      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004606:	2320      	movs	r3, #32
 8004608:	e004      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800460a:	2320      	movs	r3, #32
 800460c:	e002      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800460e:	2320      	movs	r3, #32
 8004610:	e000      	b.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004612:	2320      	movs	r3, #32
 8004614:	4a69      	ldr	r2, [pc, #420]	@ (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004616:	60d3      	str	r3, [r2, #12]
 8004618:	e14f      	b.n	80048ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	4b67      	ldr	r3, [pc, #412]	@ (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004622:	429a      	cmp	r2, r3
 8004624:	d960      	bls.n	80046e8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a58      	ldr	r2, [pc, #352]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d057      	beq.n	80046e0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a56      	ldr	r2, [pc, #344]	@ (8004790 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d050      	beq.n	80046dc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a55      	ldr	r2, [pc, #340]	@ (8004794 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d049      	beq.n	80046d8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a53      	ldr	r2, [pc, #332]	@ (8004798 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d042      	beq.n	80046d4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a52      	ldr	r2, [pc, #328]	@ (800479c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d03a      	beq.n	80046ce <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a50      	ldr	r2, [pc, #320]	@ (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d032      	beq.n	80046c8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a4f      	ldr	r2, [pc, #316]	@ (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d02a      	beq.n	80046c2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a4d      	ldr	r2, [pc, #308]	@ (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d022      	beq.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4c      	ldr	r2, [pc, #304]	@ (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d01a      	beq.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a4a      	ldr	r2, [pc, #296]	@ (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d012      	beq.n	80046b0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a49      	ldr	r2, [pc, #292]	@ (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00a      	beq.n	80046aa <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a47      	ldr	r2, [pc, #284]	@ (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d102      	bne.n	80046a4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800469e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046a2:	e01e      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046a8:	e01b      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046ae:	e018      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046b4:	e015      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046ba:	e012      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046c0:	e00f      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046c6:	e00c      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046cc:	e009      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046d2:	e006      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046d4:	2320      	movs	r3, #32
 80046d6:	e004      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046d8:	2320      	movs	r3, #32
 80046da:	e002      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046dc:	2320      	movs	r3, #32
 80046de:	e000      	b.n	80046e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80046e0:	2320      	movs	r3, #32
 80046e2:	4a36      	ldr	r2, [pc, #216]	@ (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80046e4:	6093      	str	r3, [r2, #8]
 80046e6:	e0e8      	b.n	80048ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	4b35      	ldr	r3, [pc, #212]	@ (80047c4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80046f0:	429a      	cmp	r2, r3
 80046f2:	f240 8082 	bls.w	80047fa <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a24      	ldr	r2, [pc, #144]	@ (800478c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d078      	beq.n	80047f2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a22      	ldr	r2, [pc, #136]	@ (8004790 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d071      	beq.n	80047ee <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a21      	ldr	r2, [pc, #132]	@ (8004794 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d06a      	beq.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1f      	ldr	r2, [pc, #124]	@ (8004798 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d063      	beq.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1e      	ldr	r2, [pc, #120]	@ (800479c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d05b      	beq.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1c      	ldr	r2, [pc, #112]	@ (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d053      	beq.n	80047da <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1b      	ldr	r2, [pc, #108]	@ (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d04b      	beq.n	80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d043      	beq.n	80047ce <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a18      	ldr	r2, [pc, #96]	@ (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d03b      	beq.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a16      	ldr	r2, [pc, #88]	@ (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d012      	beq.n	8004780 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a15      	ldr	r2, [pc, #84]	@ (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00a      	beq.n	800477a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a13      	ldr	r2, [pc, #76]	@ (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d102      	bne.n	8004774 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800476e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004772:	e03f      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004774:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004778:	e03c      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800477a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800477e:	e039      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004780:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004784:	e036      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004786:	bf00      	nop
 8004788:	40026458 	.word	0x40026458
 800478c:	40026010 	.word	0x40026010
 8004790:	40026410 	.word	0x40026410
 8004794:	40026070 	.word	0x40026070
 8004798:	40026470 	.word	0x40026470
 800479c:	40026028 	.word	0x40026028
 80047a0:	40026428 	.word	0x40026428
 80047a4:	40026088 	.word	0x40026088
 80047a8:	40026488 	.word	0x40026488
 80047ac:	40026040 	.word	0x40026040
 80047b0:	40026440 	.word	0x40026440
 80047b4:	400260a0 	.word	0x400260a0
 80047b8:	400264a0 	.word	0x400264a0
 80047bc:	40026400 	.word	0x40026400
 80047c0:	400260b8 	.word	0x400260b8
 80047c4:	40026058 	.word	0x40026058
 80047c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80047cc:	e012      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047d2:	e00f      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047d8:	e00c      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047de:	e009      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047e4:	e006      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047e6:	2320      	movs	r3, #32
 80047e8:	e004      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047ea:	2320      	movs	r3, #32
 80047ec:	e002      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047ee:	2320      	movs	r3, #32
 80047f0:	e000      	b.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80047f2:	2320      	movs	r3, #32
 80047f4:	4a8c      	ldr	r2, [pc, #560]	@ (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80047f6:	60d3      	str	r3, [r2, #12]
 80047f8:	e05f      	b.n	80048ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a8b      	ldr	r2, [pc, #556]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d057      	beq.n	80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a89      	ldr	r2, [pc, #548]	@ (8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d050      	beq.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a88      	ldr	r2, [pc, #544]	@ (8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d049      	beq.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a86      	ldr	r2, [pc, #536]	@ (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d042      	beq.n	80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a85      	ldr	r2, [pc, #532]	@ (8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d03a      	beq.n	80048a2 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a83      	ldr	r2, [pc, #524]	@ (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d032      	beq.n	800489c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a82      	ldr	r2, [pc, #520]	@ (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d02a      	beq.n	8004896 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a80      	ldr	r2, [pc, #512]	@ (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d022      	beq.n	8004890 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7f      	ldr	r2, [pc, #508]	@ (8004a4c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d01a      	beq.n	800488a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a7d      	ldr	r2, [pc, #500]	@ (8004a50 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d012      	beq.n	8004884 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a7c      	ldr	r2, [pc, #496]	@ (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00a      	beq.n	800487e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a7a      	ldr	r2, [pc, #488]	@ (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d102      	bne.n	8004878 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004872:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004876:	e01e      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004878:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800487c:	e01b      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800487e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004882:	e018      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004884:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004888:	e015      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800488a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800488e:	e012      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004890:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004894:	e00f      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800489a:	e00c      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800489c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048a0:	e009      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80048a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048a6:	e006      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80048a8:	2320      	movs	r3, #32
 80048aa:	e004      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80048ac:	2320      	movs	r3, #32
 80048ae:	e002      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80048b0:	2320      	movs	r3, #32
 80048b2:	e000      	b.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80048b4:	2320      	movs	r3, #32
 80048b6:	4a5c      	ldr	r2, [pc, #368]	@ (8004a28 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80048b8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	4b66      	ldr	r3, [pc, #408]	@ (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d960      	bls.n	8004988 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a58      	ldr	r2, [pc, #352]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d057      	beq.n	8004980 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a56      	ldr	r2, [pc, #344]	@ (8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d050      	beq.n	800497c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a55      	ldr	r2, [pc, #340]	@ (8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d049      	beq.n	8004978 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a53      	ldr	r2, [pc, #332]	@ (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d042      	beq.n	8004974 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a52      	ldr	r2, [pc, #328]	@ (8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d03a      	beq.n	800496e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a50      	ldr	r2, [pc, #320]	@ (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d032      	beq.n	8004968 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a4f      	ldr	r2, [pc, #316]	@ (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d02a      	beq.n	8004962 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a4d      	ldr	r2, [pc, #308]	@ (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d022      	beq.n	800495c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a4c      	ldr	r2, [pc, #304]	@ (8004a4c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d01a      	beq.n	8004956 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a4a      	ldr	r2, [pc, #296]	@ (8004a50 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d012      	beq.n	8004950 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a49      	ldr	r2, [pc, #292]	@ (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00a      	beq.n	800494a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a47      	ldr	r2, [pc, #284]	@ (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d102      	bne.n	8004944 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800493e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004942:	e01e      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004944:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004948:	e01b      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800494a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800494e:	e018      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004950:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004954:	e015      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004956:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800495a:	e012      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800495c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004960:	e00f      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004966:	e00c      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800496c:	e009      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800496e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004972:	e006      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004974:	2310      	movs	r3, #16
 8004976:	e004      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004978:	2310      	movs	r3, #16
 800497a:	e002      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800497c:	2310      	movs	r3, #16
 800497e:	e000      	b.n	8004982 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004980:	2310      	movs	r3, #16
 8004982:	4a37      	ldr	r2, [pc, #220]	@ (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004984:	60d3      	str	r3, [r2, #12]
 8004986:	e14f      	b.n	8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	4b35      	ldr	r3, [pc, #212]	@ (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004990:	429a      	cmp	r2, r3
 8004992:	f240 8082 	bls.w	8004a9a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a24      	ldr	r2, [pc, #144]	@ (8004a2c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d078      	beq.n	8004a92 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a22      	ldr	r2, [pc, #136]	@ (8004a30 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d071      	beq.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a21      	ldr	r2, [pc, #132]	@ (8004a34 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d06a      	beq.n	8004a8a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d063      	beq.n	8004a86 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a3c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d05b      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d053      	beq.n	8004a7a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d04b      	beq.n	8004a74 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a19      	ldr	r2, [pc, #100]	@ (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d043      	beq.n	8004a6e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a18      	ldr	r2, [pc, #96]	@ (8004a4c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d03b      	beq.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a16      	ldr	r2, [pc, #88]	@ (8004a50 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d012      	beq.n	8004a20 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a15      	ldr	r2, [pc, #84]	@ (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00a      	beq.n	8004a1a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a13      	ldr	r2, [pc, #76]	@ (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d102      	bne.n	8004a14 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8004a0e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a12:	e03f      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a14:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a18:	e03c      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a1a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a1e:	e039      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a24:	e036      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a26:	bf00      	nop
 8004a28:	40026000 	.word	0x40026000
 8004a2c:	40026010 	.word	0x40026010
 8004a30:	40026410 	.word	0x40026410
 8004a34:	40026070 	.word	0x40026070
 8004a38:	40026470 	.word	0x40026470
 8004a3c:	40026028 	.word	0x40026028
 8004a40:	40026428 	.word	0x40026428
 8004a44:	40026088 	.word	0x40026088
 8004a48:	40026488 	.word	0x40026488
 8004a4c:	40026040 	.word	0x40026040
 8004a50:	40026440 	.word	0x40026440
 8004a54:	400260a0 	.word	0x400260a0
 8004a58:	400264a0 	.word	0x400264a0
 8004a5c:	40026458 	.word	0x40026458
 8004a60:	40026400 	.word	0x40026400
 8004a64:	400260b8 	.word	0x400260b8
 8004a68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a6c:	e012      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a72:	e00f      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a78:	e00c      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a7e:	e009      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a84:	e006      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a86:	2310      	movs	r3, #16
 8004a88:	e004      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a8a:	2310      	movs	r3, #16
 8004a8c:	e002      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a8e:	2310      	movs	r3, #16
 8004a90:	e000      	b.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004a92:	2310      	movs	r3, #16
 8004a94:	4a8c      	ldr	r2, [pc, #560]	@ (8004cc8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004a96:	6093      	str	r3, [r2, #8]
 8004a98:	e0c6      	b.n	8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4b8a      	ldr	r3, [pc, #552]	@ (8004ccc <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d960      	bls.n	8004b68 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a89      	ldr	r2, [pc, #548]	@ (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d057      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a87      	ldr	r2, [pc, #540]	@ (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d050      	beq.n	8004b5c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a86      	ldr	r2, [pc, #536]	@ (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d049      	beq.n	8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a84      	ldr	r2, [pc, #528]	@ (8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d042      	beq.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a83      	ldr	r2, [pc, #524]	@ (8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d03a      	beq.n	8004b4e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a81      	ldr	r2, [pc, #516]	@ (8004ce4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d032      	beq.n	8004b48 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a80      	ldr	r2, [pc, #512]	@ (8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d02a      	beq.n	8004b42 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a7e      	ldr	r2, [pc, #504]	@ (8004cec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d022      	beq.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a7d      	ldr	r2, [pc, #500]	@ (8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d01a      	beq.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a7b      	ldr	r2, [pc, #492]	@ (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d012      	beq.n	8004b30 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a7a      	ldr	r2, [pc, #488]	@ (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00a      	beq.n	8004b2a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a78      	ldr	r2, [pc, #480]	@ (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d102      	bne.n	8004b24 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8004b1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b22:	e01e      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b24:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004b28:	e01b      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b2a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b2e:	e018      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b34:	e015      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b36:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b3a:	e012      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b40:	e00f      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b46:	e00c      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b4c:	e009      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b52:	e006      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b54:	2310      	movs	r3, #16
 8004b56:	e004      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	e002      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	e000      	b.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004b60:	2310      	movs	r3, #16
 8004b62:	4a67      	ldr	r2, [pc, #412]	@ (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004b64:	60d3      	str	r3, [r2, #12]
 8004b66:	e05f      	b.n	8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	@ (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d057      	beq.n	8004c22 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a57      	ldr	r2, [pc, #348]	@ (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d050      	beq.n	8004c1e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a55      	ldr	r2, [pc, #340]	@ (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d049      	beq.n	8004c1a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a54      	ldr	r2, [pc, #336]	@ (8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d042      	beq.n	8004c16 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a52      	ldr	r2, [pc, #328]	@ (8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d03a      	beq.n	8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a51      	ldr	r2, [pc, #324]	@ (8004ce4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d032      	beq.n	8004c0a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a4f      	ldr	r2, [pc, #316]	@ (8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d02a      	beq.n	8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a4e      	ldr	r2, [pc, #312]	@ (8004cec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d022      	beq.n	8004bfe <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01a      	beq.n	8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4b      	ldr	r2, [pc, #300]	@ (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d012      	beq.n	8004bf2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a49      	ldr	r2, [pc, #292]	@ (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00a      	beq.n	8004bec <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a48      	ldr	r2, [pc, #288]	@ (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d102      	bne.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8004be0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004be4:	e01e      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004be6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004bea:	e01b      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bf0:	e018      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bf2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bf6:	e015      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bf8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bfc:	e012      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004bfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c02:	e00f      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c08:	e00c      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c0e:	e009      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c14:	e006      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004c16:	2310      	movs	r3, #16
 8004c18:	e004      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	e002      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004c1e:	2310      	movs	r3, #16
 8004c20:	e000      	b.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004c22:	2310      	movs	r3, #16
 8004c24:	4a36      	ldr	r2, [pc, #216]	@ (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004c26:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4b35      	ldr	r3, [pc, #212]	@ (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004c30:	429a      	cmp	r2, r3
 8004c32:	f240 8082 	bls.w	8004d3a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a25      	ldr	r2, [pc, #148]	@ (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d078      	beq.n	8004d32 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a23      	ldr	r2, [pc, #140]	@ (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d071      	beq.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a22      	ldr	r2, [pc, #136]	@ (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d06a      	beq.n	8004d2a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a20      	ldr	r2, [pc, #128]	@ (8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d063      	beq.n	8004d26 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d05b      	beq.n	8004d20 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d053      	beq.n	8004d1a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d04b      	beq.n	8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1a      	ldr	r2, [pc, #104]	@ (8004cec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d043      	beq.n	8004d0e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a19      	ldr	r2, [pc, #100]	@ (8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d03b      	beq.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a17      	ldr	r2, [pc, #92]	@ (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d012      	beq.n	8004cc0 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a16      	ldr	r2, [pc, #88]	@ (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00a      	beq.n	8004cba <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a14      	ldr	r2, [pc, #80]	@ (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d102      	bne.n	8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8004cae:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004cb2:	e03f      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004cb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cb8:	e03c      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004cba:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004cbe:	e039      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004cc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004cc4:	e036      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004cc6:	bf00      	nop
 8004cc8:	40026400 	.word	0x40026400
 8004ccc:	40026058 	.word	0x40026058
 8004cd0:	40026010 	.word	0x40026010
 8004cd4:	40026410 	.word	0x40026410
 8004cd8:	40026070 	.word	0x40026070
 8004cdc:	40026470 	.word	0x40026470
 8004ce0:	40026028 	.word	0x40026028
 8004ce4:	40026428 	.word	0x40026428
 8004ce8:	40026088 	.word	0x40026088
 8004cec:	40026488 	.word	0x40026488
 8004cf0:	40026040 	.word	0x40026040
 8004cf4:	40026440 	.word	0x40026440
 8004cf8:	400260a0 	.word	0x400260a0
 8004cfc:	400264a0 	.word	0x400264a0
 8004d00:	40026000 	.word	0x40026000
 8004d04:	40026458 	.word	0x40026458
 8004d08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d0c:	e012      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d12:	e00f      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d18:	e00c      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d1e:	e009      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d24:	e006      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d26:	2308      	movs	r3, #8
 8004d28:	e004      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	e002      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d2e:	2308      	movs	r3, #8
 8004d30:	e000      	b.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004d32:	2308      	movs	r3, #8
 8004d34:	4a8c      	ldr	r2, [pc, #560]	@ (8004f68 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004d36:	60d3      	str	r3, [r2, #12]
 8004d38:	e14e      	b.n	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b8a      	ldr	r3, [pc, #552]	@ (8004f6c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d960      	bls.n	8004e08 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a89      	ldr	r2, [pc, #548]	@ (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d057      	beq.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a87      	ldr	r2, [pc, #540]	@ (8004f74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d050      	beq.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a86      	ldr	r2, [pc, #536]	@ (8004f78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d049      	beq.n	8004df8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a84      	ldr	r2, [pc, #528]	@ (8004f7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d042      	beq.n	8004df4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a83      	ldr	r2, [pc, #524]	@ (8004f80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d03a      	beq.n	8004dee <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a81      	ldr	r2, [pc, #516]	@ (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d032      	beq.n	8004de8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a80      	ldr	r2, [pc, #512]	@ (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d02a      	beq.n	8004de2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a7e      	ldr	r2, [pc, #504]	@ (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d022      	beq.n	8004ddc <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d01a      	beq.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a7b      	ldr	r2, [pc, #492]	@ (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d012      	beq.n	8004dd0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a7a      	ldr	r2, [pc, #488]	@ (8004f98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00a      	beq.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a78      	ldr	r2, [pc, #480]	@ (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d102      	bne.n	8004dc4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8004dbe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dc2:	e01e      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc8:	e01b      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dca:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dce:	e018      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dd4:	e015      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dd6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dda:	e012      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004de0:	e00f      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004de6:	e00c      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dec:	e009      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004df2:	e006      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004df4:	2308      	movs	r3, #8
 8004df6:	e004      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	e002      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	e000      	b.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004e00:	2308      	movs	r3, #8
 8004e02:	4a59      	ldr	r2, [pc, #356]	@ (8004f68 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004e04:	6093      	str	r3, [r2, #8]
 8004e06:	e0e7      	b.n	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b64      	ldr	r3, [pc, #400]	@ (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d960      	bls.n	8004ed6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a55      	ldr	r2, [pc, #340]	@ (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d057      	beq.n	8004ece <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a54      	ldr	r2, [pc, #336]	@ (8004f74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d050      	beq.n	8004eca <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a52      	ldr	r2, [pc, #328]	@ (8004f78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d049      	beq.n	8004ec6 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a51      	ldr	r2, [pc, #324]	@ (8004f7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d042      	beq.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a4f      	ldr	r2, [pc, #316]	@ (8004f80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d03a      	beq.n	8004ebc <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d032      	beq.n	8004eb6 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a4c      	ldr	r2, [pc, #304]	@ (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02a      	beq.n	8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a49      	ldr	r2, [pc, #292]	@ (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01a      	beq.n	8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a48      	ldr	r2, [pc, #288]	@ (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d012      	beq.n	8004e9e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a46      	ldr	r2, [pc, #280]	@ (8004f98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00a      	beq.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a45      	ldr	r2, [pc, #276]	@ (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d102      	bne.n	8004e92 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8004e8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e90:	e01e      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e96:	e01b      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e9c:	e018      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004e9e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004ea2:	e015      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004ea4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004ea8:	e012      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eae:	e00f      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eb4:	e00c      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004eb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eba:	e009      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ec0:	e006      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	e004      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	e002      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	e000      	b.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004ece:	2308      	movs	r3, #8
 8004ed0:	4a34      	ldr	r2, [pc, #208]	@ (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004ed2:	60d3      	str	r3, [r2, #12]
 8004ed4:	e080      	b.n	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a25      	ldr	r2, [pc, #148]	@ (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d078      	beq.n	8004fd2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a23      	ldr	r2, [pc, #140]	@ (8004f74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d071      	beq.n	8004fce <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d06a      	beq.n	8004fca <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a20      	ldr	r2, [pc, #128]	@ (8004f7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d063      	beq.n	8004fc6 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1f      	ldr	r2, [pc, #124]	@ (8004f80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d05b      	beq.n	8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d053      	beq.n	8004fba <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	@ (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d04b      	beq.n	8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1a      	ldr	r2, [pc, #104]	@ (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d043      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a19      	ldr	r2, [pc, #100]	@ (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d03b      	beq.n	8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d012      	beq.n	8004f60 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00a      	beq.n	8004f5a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a14      	ldr	r2, [pc, #80]	@ (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d102      	bne.n	8004f54 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8004f4e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004f52:	e03f      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f58:	e03c      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f5a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004f5e:	e039      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004f64:	e036      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004f66:	bf00      	nop
 8004f68:	40026400 	.word	0x40026400
 8004f6c:	400260b8 	.word	0x400260b8
 8004f70:	40026010 	.word	0x40026010
 8004f74:	40026410 	.word	0x40026410
 8004f78:	40026070 	.word	0x40026070
 8004f7c:	40026470 	.word	0x40026470
 8004f80:	40026028 	.word	0x40026028
 8004f84:	40026428 	.word	0x40026428
 8004f88:	40026088 	.word	0x40026088
 8004f8c:	40026488 	.word	0x40026488
 8004f90:	40026040 	.word	0x40026040
 8004f94:	40026440 	.word	0x40026440
 8004f98:	400260a0 	.word	0x400260a0
 8004f9c:	400264a0 	.word	0x400264a0
 8004fa0:	40026058 	.word	0x40026058
 8004fa4:	40026000 	.word	0x40026000
 8004fa8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004fac:	e012      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fb2:	e00f      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fb8:	e00c      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fbe:	e009      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fc4:	e006      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	e004      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fca:	2308      	movs	r3, #8
 8004fcc:	e002      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	e000      	b.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	4a8a      	ldr	r2, [pc, #552]	@ (8005200 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004fd6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b89      	ldr	r3, [pc, #548]	@ (8005204 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d960      	bls.n	80050a6 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a87      	ldr	r2, [pc, #540]	@ (8005208 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d057      	beq.n	800509e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a86      	ldr	r2, [pc, #536]	@ (800520c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d050      	beq.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a84      	ldr	r2, [pc, #528]	@ (8005210 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d049      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a83      	ldr	r2, [pc, #524]	@ (8005214 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d042      	beq.n	8005092 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a81      	ldr	r2, [pc, #516]	@ (8005218 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d03a      	beq.n	800508c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a80      	ldr	r2, [pc, #512]	@ (800521c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d032      	beq.n	8005086 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a7e      	ldr	r2, [pc, #504]	@ (8005220 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02a      	beq.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a7d      	ldr	r2, [pc, #500]	@ (8005224 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d022      	beq.n	800507a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a7b      	ldr	r2, [pc, #492]	@ (8005228 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01a      	beq.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a7a      	ldr	r2, [pc, #488]	@ (800522c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d012      	beq.n	800506e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a78      	ldr	r2, [pc, #480]	@ (8005230 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00a      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a77      	ldr	r2, [pc, #476]	@ (8005234 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d102      	bne.n	8005062 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 800505c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005060:	e01e      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005062:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005066:	e01b      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005068:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800506c:	e018      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800506e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005072:	e015      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005074:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005078:	e012      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800507a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800507e:	e00f      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005084:	e00c      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800508a:	e009      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800508c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005090:	e006      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005092:	2304      	movs	r3, #4
 8005094:	e004      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8005096:	2304      	movs	r3, #4
 8005098:	e002      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800509a:	2304      	movs	r3, #4
 800509c:	e000      	b.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800509e:	2304      	movs	r3, #4
 80050a0:	4a65      	ldr	r2, [pc, #404]	@ (8005238 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80050a2:	60d3      	str	r3, [r2, #12]
 80050a4:	e150      	b.n	8005348 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b63      	ldr	r3, [pc, #396]	@ (800523c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d960      	bls.n	8005174 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a54      	ldr	r2, [pc, #336]	@ (8005208 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d057      	beq.n	800516c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a52      	ldr	r2, [pc, #328]	@ (800520c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d050      	beq.n	8005168 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a51      	ldr	r2, [pc, #324]	@ (8005210 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d049      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a4f      	ldr	r2, [pc, #316]	@ (8005214 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d042      	beq.n	8005160 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a4e      	ldr	r2, [pc, #312]	@ (8005218 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d03a      	beq.n	800515a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a4c      	ldr	r2, [pc, #304]	@ (800521c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d032      	beq.n	8005154 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a4b      	ldr	r2, [pc, #300]	@ (8005220 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d02a      	beq.n	800514e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a49      	ldr	r2, [pc, #292]	@ (8005224 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a48      	ldr	r2, [pc, #288]	@ (8005228 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01a      	beq.n	8005142 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a46      	ldr	r2, [pc, #280]	@ (800522c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d012      	beq.n	800513c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a45      	ldr	r2, [pc, #276]	@ (8005230 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00a      	beq.n	8005136 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a43      	ldr	r2, [pc, #268]	@ (8005234 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d102      	bne.n	8005130 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800512a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800512e:	e01e      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005134:	e01b      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005136:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800513a:	e018      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800513c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005140:	e015      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005142:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005146:	e012      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800514c:	e00f      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800514e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005152:	e00c      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005158:	e009      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800515a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800515e:	e006      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005160:	2304      	movs	r3, #4
 8005162:	e004      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005164:	2304      	movs	r3, #4
 8005166:	e002      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005168:	2304      	movs	r3, #4
 800516a:	e000      	b.n	800516e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800516c:	2304      	movs	r3, #4
 800516e:	4a32      	ldr	r2, [pc, #200]	@ (8005238 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8005170:	6093      	str	r3, [r2, #8]
 8005172:	e0e9      	b.n	8005348 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	4b31      	ldr	r3, [pc, #196]	@ (8005240 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800517c:	429a      	cmp	r2, r3
 800517e:	f240 8083 	bls.w	8005288 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a20      	ldr	r2, [pc, #128]	@ (8005208 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d079      	beq.n	8005280 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1e      	ldr	r2, [pc, #120]	@ (800520c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d072      	beq.n	800527c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1d      	ldr	r2, [pc, #116]	@ (8005210 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d06b      	beq.n	8005278 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005214 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d064      	beq.n	8005274 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005218 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d05c      	beq.n	800526e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a18      	ldr	r2, [pc, #96]	@ (800521c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d054      	beq.n	8005268 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a17      	ldr	r2, [pc, #92]	@ (8005220 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d04c      	beq.n	8005262 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a15      	ldr	r2, [pc, #84]	@ (8005224 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d044      	beq.n	800525c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a14      	ldr	r2, [pc, #80]	@ (8005228 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d03c      	beq.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a12      	ldr	r2, [pc, #72]	@ (800522c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d034      	beq.n	8005250 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d02c      	beq.n	800524a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005234 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d124      	bne.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80051fa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80051fe:	e040      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005200:	40026000 	.word	0x40026000
 8005204:	40026458 	.word	0x40026458
 8005208:	40026010 	.word	0x40026010
 800520c:	40026410 	.word	0x40026410
 8005210:	40026070 	.word	0x40026070
 8005214:	40026470 	.word	0x40026470
 8005218:	40026028 	.word	0x40026028
 800521c:	40026428 	.word	0x40026428
 8005220:	40026088 	.word	0x40026088
 8005224:	40026488 	.word	0x40026488
 8005228:	40026040 	.word	0x40026040
 800522c:	40026440 	.word	0x40026440
 8005230:	400260a0 	.word	0x400260a0
 8005234:	400264a0 	.word	0x400264a0
 8005238:	40026400 	.word	0x40026400
 800523c:	400260b8 	.word	0x400260b8
 8005240:	40026058 	.word	0x40026058
 8005244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005248:	e01b      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800524a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800524e:	e018      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005250:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005254:	e015      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005256:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800525a:	e012      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800525c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005260:	e00f      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005262:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005266:	e00c      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800526c:	e009      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800526e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005272:	e006      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005274:	2304      	movs	r3, #4
 8005276:	e004      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005278:	2304      	movs	r3, #4
 800527a:	e002      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800527c:	2304      	movs	r3, #4
 800527e:	e000      	b.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005280:	2304      	movs	r3, #4
 8005282:	4a8b      	ldr	r2, [pc, #556]	@ (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8005284:	60d3      	str	r3, [r2, #12]
 8005286:	e05f      	b.n	8005348 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a89      	ldr	r2, [pc, #548]	@ (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d057      	beq.n	8005342 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a88      	ldr	r2, [pc, #544]	@ (80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d050      	beq.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a86      	ldr	r2, [pc, #536]	@ (80054bc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d049      	beq.n	800533a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a85      	ldr	r2, [pc, #532]	@ (80054c0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d042      	beq.n	8005336 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a83      	ldr	r2, [pc, #524]	@ (80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d03a      	beq.n	8005330 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a82      	ldr	r2, [pc, #520]	@ (80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d032      	beq.n	800532a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a80      	ldr	r2, [pc, #512]	@ (80054cc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d02a      	beq.n	8005324 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a7f      	ldr	r2, [pc, #508]	@ (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d022      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a7d      	ldr	r2, [pc, #500]	@ (80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01a      	beq.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a7c      	ldr	r2, [pc, #496]	@ (80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d012      	beq.n	8005312 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a7a      	ldr	r2, [pc, #488]	@ (80054dc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00a      	beq.n	800530c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a79      	ldr	r2, [pc, #484]	@ (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d102      	bne.n	8005306 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8005300:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005304:	e01e      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005306:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800530a:	e01b      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800530c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005310:	e018      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005312:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005316:	e015      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005318:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800531c:	e012      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800531e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005322:	e00f      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005328:	e00c      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800532a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800532e:	e009      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005334:	e006      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005336:	2304      	movs	r3, #4
 8005338:	e004      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800533a:	2304      	movs	r3, #4
 800533c:	e002      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800533e:	2304      	movs	r3, #4
 8005340:	e000      	b.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005342:	2304      	movs	r3, #4
 8005344:	4a5a      	ldr	r2, [pc, #360]	@ (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8005346:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	4b65      	ldr	r3, [pc, #404]	@ (80054e4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005350:	429a      	cmp	r2, r3
 8005352:	d95c      	bls.n	800540e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a56      	ldr	r2, [pc, #344]	@ (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d053      	beq.n	8005406 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a55      	ldr	r2, [pc, #340]	@ (80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d04c      	beq.n	8005402 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a53      	ldr	r2, [pc, #332]	@ (80054bc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d045      	beq.n	80053fe <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a52      	ldr	r2, [pc, #328]	@ (80054c0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d03e      	beq.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a50      	ldr	r2, [pc, #320]	@ (80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d037      	beq.n	80053f6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a4f      	ldr	r2, [pc, #316]	@ (80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d030      	beq.n	80053f2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a4d      	ldr	r2, [pc, #308]	@ (80054cc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d029      	beq.n	80053ee <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a4c      	ldr	r2, [pc, #304]	@ (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a4a      	ldr	r2, [pc, #296]	@ (80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01a      	beq.n	80053e4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a49      	ldr	r2, [pc, #292]	@ (80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d012      	beq.n	80053de <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a47      	ldr	r2, [pc, #284]	@ (80054dc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00a      	beq.n	80053d8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a46      	ldr	r2, [pc, #280]	@ (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d102      	bne.n	80053d2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80053cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053d0:	e01a      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80053d6:	e017      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053dc:	e014      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053e2:	e011      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053e8:	e00e      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053ea:	2340      	movs	r3, #64	@ 0x40
 80053ec:	e00c      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053ee:	2340      	movs	r3, #64	@ 0x40
 80053f0:	e00a      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053f2:	2340      	movs	r3, #64	@ 0x40
 80053f4:	e008      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053f6:	2340      	movs	r3, #64	@ 0x40
 80053f8:	e006      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e004      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80053fe:	2301      	movs	r3, #1
 8005400:	e002      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005406:	2301      	movs	r3, #1
 8005408:	4a37      	ldr	r2, [pc, #220]	@ (80054e8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800540a:	60d3      	str	r3, [r2, #12]
 800540c:	e141      	b.n	8005692 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	4b35      	ldr	r3, [pc, #212]	@ (80054ec <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8005416:	429a      	cmp	r2, r3
 8005418:	d97c      	bls.n	8005514 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a25      	ldr	r2, [pc, #148]	@ (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d073      	beq.n	800550c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a23      	ldr	r2, [pc, #140]	@ (80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d06c      	beq.n	8005508 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a22      	ldr	r2, [pc, #136]	@ (80054bc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d065      	beq.n	8005504 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a20      	ldr	r2, [pc, #128]	@ (80054c0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d05e      	beq.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1f      	ldr	r2, [pc, #124]	@ (80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d057      	beq.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1d      	ldr	r2, [pc, #116]	@ (80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d050      	beq.n	80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1c      	ldr	r2, [pc, #112]	@ (80054cc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d049      	beq.n	80054f4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1a      	ldr	r2, [pc, #104]	@ (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d042      	beq.n	80054f0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a19      	ldr	r2, [pc, #100]	@ (80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d01a      	beq.n	80054aa <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a17      	ldr	r2, [pc, #92]	@ (80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d012      	beq.n	80054a4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a16      	ldr	r2, [pc, #88]	@ (80054dc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00a      	beq.n	800549e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a14      	ldr	r2, [pc, #80]	@ (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d102      	bne.n	8005498 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8005492:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005496:	e03a      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005498:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800549c:	e037      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800549e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054a2:	e034      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054a8:	e031      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054ae:	e02e      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054b0:	40026000 	.word	0x40026000
 80054b4:	40026010 	.word	0x40026010
 80054b8:	40026410 	.word	0x40026410
 80054bc:	40026070 	.word	0x40026070
 80054c0:	40026470 	.word	0x40026470
 80054c4:	40026028 	.word	0x40026028
 80054c8:	40026428 	.word	0x40026428
 80054cc:	40026088 	.word	0x40026088
 80054d0:	40026488 	.word	0x40026488
 80054d4:	40026040 	.word	0x40026040
 80054d8:	40026440 	.word	0x40026440
 80054dc:	400260a0 	.word	0x400260a0
 80054e0:	400264a0 	.word	0x400264a0
 80054e4:	40026458 	.word	0x40026458
 80054e8:	40026400 	.word	0x40026400
 80054ec:	400260b8 	.word	0x400260b8
 80054f0:	2340      	movs	r3, #64	@ 0x40
 80054f2:	e00c      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054f4:	2340      	movs	r3, #64	@ 0x40
 80054f6:	e00a      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054f8:	2340      	movs	r3, #64	@ 0x40
 80054fa:	e008      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80054fc:	2340      	movs	r3, #64	@ 0x40
 80054fe:	e006      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005500:	2301      	movs	r3, #1
 8005502:	e004      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005504:	2301      	movs	r3, #1
 8005506:	e002      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800550c:	2301      	movs	r3, #1
 800550e:	4a7b      	ldr	r2, [pc, #492]	@ (80056fc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005510:	6093      	str	r3, [r2, #8]
 8005512:	e0be      	b.n	8005692 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	4b79      	ldr	r3, [pc, #484]	@ (8005700 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800551c:	429a      	cmp	r2, r3
 800551e:	d95c      	bls.n	80055da <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a77      	ldr	r2, [pc, #476]	@ (8005704 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d053      	beq.n	80055d2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a76      	ldr	r2, [pc, #472]	@ (8005708 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d04c      	beq.n	80055ce <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a74      	ldr	r2, [pc, #464]	@ (800570c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d045      	beq.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a73      	ldr	r2, [pc, #460]	@ (8005710 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d03e      	beq.n	80055c6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a71      	ldr	r2, [pc, #452]	@ (8005714 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d037      	beq.n	80055c2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a70      	ldr	r2, [pc, #448]	@ (8005718 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d030      	beq.n	80055be <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a6e      	ldr	r2, [pc, #440]	@ (800571c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d029      	beq.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6d      	ldr	r2, [pc, #436]	@ (8005720 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a6b      	ldr	r2, [pc, #428]	@ (8005724 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01a      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a6a      	ldr	r2, [pc, #424]	@ (8005728 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d012      	beq.n	80055aa <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a68      	ldr	r2, [pc, #416]	@ (800572c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00a      	beq.n	80055a4 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a67      	ldr	r2, [pc, #412]	@ (8005730 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d102      	bne.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8005598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800559c:	e01a      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800559e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80055a2:	e017      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055a8:	e014      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055ae:	e011      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055b4:	e00e      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055b6:	2340      	movs	r3, #64	@ 0x40
 80055b8:	e00c      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055ba:	2340      	movs	r3, #64	@ 0x40
 80055bc:	e00a      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055be:	2340      	movs	r3, #64	@ 0x40
 80055c0:	e008      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055c2:	2340      	movs	r3, #64	@ 0x40
 80055c4:	e006      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e004      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e002      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4a57      	ldr	r2, [pc, #348]	@ (8005734 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80055d6:	60d3      	str	r3, [r2, #12]
 80055d8:	e05b      	b.n	8005692 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a49      	ldr	r2, [pc, #292]	@ (8005704 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d053      	beq.n	800568c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a47      	ldr	r2, [pc, #284]	@ (8005708 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d04c      	beq.n	8005688 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a46      	ldr	r2, [pc, #280]	@ (800570c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d045      	beq.n	8005684 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a44      	ldr	r2, [pc, #272]	@ (8005710 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d03e      	beq.n	8005680 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a43      	ldr	r2, [pc, #268]	@ (8005714 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d037      	beq.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a41      	ldr	r2, [pc, #260]	@ (8005718 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d030      	beq.n	8005678 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a40      	ldr	r2, [pc, #256]	@ (800571c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d029      	beq.n	8005674 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a3e      	ldr	r2, [pc, #248]	@ (8005720 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d022      	beq.n	8005670 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a3d      	ldr	r2, [pc, #244]	@ (8005724 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d01a      	beq.n	800566a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a3b      	ldr	r2, [pc, #236]	@ (8005728 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d012      	beq.n	8005664 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a3a      	ldr	r2, [pc, #232]	@ (800572c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00a      	beq.n	800565e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a38      	ldr	r2, [pc, #224]	@ (8005730 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d102      	bne.n	8005658 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8005652:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005656:	e01a      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005658:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800565c:	e017      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800565e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005662:	e014      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005668:	e011      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800566a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800566e:	e00e      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005670:	2340      	movs	r3, #64	@ 0x40
 8005672:	e00c      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005674:	2340      	movs	r3, #64	@ 0x40
 8005676:	e00a      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005678:	2340      	movs	r3, #64	@ 0x40
 800567a:	e008      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800567c:	2340      	movs	r3, #64	@ 0x40
 800567e:	e006      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005680:	2301      	movs	r3, #1
 8005682:	e004      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005684:	2301      	movs	r3, #1
 8005686:	e002      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800568c:	2301      	movs	r3, #1
 800568e:	4a29      	ldr	r2, [pc, #164]	@ (8005734 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8005690:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0216 	orr.w	r2, r2, #22
 80056a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0208 	orr.w	r2, r2, #8
 80056d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0201 	orr.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e005      	b.n	80056f0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
 80056ee:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40026400 	.word	0x40026400
 8005700:	40026058 	.word	0x40026058
 8005704:	40026010 	.word	0x40026010
 8005708:	40026410 	.word	0x40026410
 800570c:	40026070 	.word	0x40026070
 8005710:	40026470 	.word	0x40026470
 8005714:	40026028 	.word	0x40026028
 8005718:	40026428 	.word	0x40026428
 800571c:	40026088 	.word	0x40026088
 8005720:	40026488 	.word	0x40026488
 8005724:	40026040 	.word	0x40026040
 8005728:	40026440 	.word	0x40026440
 800572c:	400260a0 	.word	0x400260a0
 8005730:	400264a0 	.word	0x400264a0
 8005734:	40026000 	.word	0x40026000

08005738 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	60da      	str	r2, [r3, #12]
 8005754:	e003      	b.n	800575e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b40      	cmp	r3, #64	@ 0x40
 8005788:	d108      	bne.n	800579c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800579a:	e007      	b.n	80057ac <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	@ 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ce:	2300      	movs	r3, #0
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	e165      	b.n	8005aa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057d4:	2201      	movs	r2, #1
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4013      	ands	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	f040 8154 	bne.w	8005a9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d005      	beq.n	800580a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005806:	2b02      	cmp	r3, #2
 8005808:	d130      	bne.n	800586c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	2203      	movs	r2, #3
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4013      	ands	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005840:	2201      	movs	r2, #1
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	f003 0201 	and.w	r2, r3, #1
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	2b03      	cmp	r3, #3
 8005876:	d017      	beq.n	80058a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	2203      	movs	r2, #3
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4313      	orrs	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d123      	bne.n	80058fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	08da      	lsrs	r2, r3, #3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3208      	adds	r2, #8
 80058bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	220f      	movs	r2, #15
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	08da      	lsrs	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3208      	adds	r2, #8
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	2203      	movs	r2, #3
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	43db      	mvns	r3, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4013      	ands	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 0203 	and.w	r2, r3, #3
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4313      	orrs	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 80ae 	beq.w	8005a9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	4b5d      	ldr	r3, [pc, #372]	@ (8005ab8 <HAL_GPIO_Init+0x300>)
 8005944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005946:	4a5c      	ldr	r2, [pc, #368]	@ (8005ab8 <HAL_GPIO_Init+0x300>)
 8005948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800594c:	6453      	str	r3, [r2, #68]	@ 0x44
 800594e:	4b5a      	ldr	r3, [pc, #360]	@ (8005ab8 <HAL_GPIO_Init+0x300>)
 8005950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800595a:	4a58      	ldr	r2, [pc, #352]	@ (8005abc <HAL_GPIO_Init+0x304>)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	089b      	lsrs	r3, r3, #2
 8005960:	3302      	adds	r3, #2
 8005962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	220f      	movs	r2, #15
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43db      	mvns	r3, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a4f      	ldr	r2, [pc, #316]	@ (8005ac0 <HAL_GPIO_Init+0x308>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d025      	beq.n	80059d2 <HAL_GPIO_Init+0x21a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a4e      	ldr	r2, [pc, #312]	@ (8005ac4 <HAL_GPIO_Init+0x30c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01f      	beq.n	80059ce <HAL_GPIO_Init+0x216>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a4d      	ldr	r2, [pc, #308]	@ (8005ac8 <HAL_GPIO_Init+0x310>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d019      	beq.n	80059ca <HAL_GPIO_Init+0x212>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a4c      	ldr	r2, [pc, #304]	@ (8005acc <HAL_GPIO_Init+0x314>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d013      	beq.n	80059c6 <HAL_GPIO_Init+0x20e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ad0 <HAL_GPIO_Init+0x318>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00d      	beq.n	80059c2 <HAL_GPIO_Init+0x20a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a4a      	ldr	r2, [pc, #296]	@ (8005ad4 <HAL_GPIO_Init+0x31c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d007      	beq.n	80059be <HAL_GPIO_Init+0x206>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a49      	ldr	r2, [pc, #292]	@ (8005ad8 <HAL_GPIO_Init+0x320>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d101      	bne.n	80059ba <HAL_GPIO_Init+0x202>
 80059b6:	2306      	movs	r3, #6
 80059b8:	e00c      	b.n	80059d4 <HAL_GPIO_Init+0x21c>
 80059ba:	2307      	movs	r3, #7
 80059bc:	e00a      	b.n	80059d4 <HAL_GPIO_Init+0x21c>
 80059be:	2305      	movs	r3, #5
 80059c0:	e008      	b.n	80059d4 <HAL_GPIO_Init+0x21c>
 80059c2:	2304      	movs	r3, #4
 80059c4:	e006      	b.n	80059d4 <HAL_GPIO_Init+0x21c>
 80059c6:	2303      	movs	r3, #3
 80059c8:	e004      	b.n	80059d4 <HAL_GPIO_Init+0x21c>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e002      	b.n	80059d4 <HAL_GPIO_Init+0x21c>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <HAL_GPIO_Init+0x21c>
 80059d2:	2300      	movs	r3, #0
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	f002 0203 	and.w	r2, r2, #3
 80059da:	0092      	lsls	r2, r2, #2
 80059dc:	4093      	lsls	r3, r2
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059e4:	4935      	ldr	r1, [pc, #212]	@ (8005abc <HAL_GPIO_Init+0x304>)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	089b      	lsrs	r3, r3, #2
 80059ea:	3302      	adds	r3, #2
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059f2:	4b3a      	ldr	r3, [pc, #232]	@ (8005adc <HAL_GPIO_Init+0x324>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	43db      	mvns	r3, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4013      	ands	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a16:	4a31      	ldr	r2, [pc, #196]	@ (8005adc <HAL_GPIO_Init+0x324>)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005adc <HAL_GPIO_Init+0x324>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a40:	4a26      	ldr	r2, [pc, #152]	@ (8005adc <HAL_GPIO_Init+0x324>)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a46:	4b25      	ldr	r3, [pc, #148]	@ (8005adc <HAL_GPIO_Init+0x324>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <HAL_GPIO_Init+0x324>)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a70:	4b1a      	ldr	r3, [pc, #104]	@ (8005adc <HAL_GPIO_Init+0x324>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a94:	4a11      	ldr	r2, [pc, #68]	@ (8005adc <HAL_GPIO_Init+0x324>)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	f67f ae96 	bls.w	80057d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3724      	adds	r7, #36	@ 0x24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	40013800 	.word	0x40013800
 8005ac0:	40020000 	.word	0x40020000
 8005ac4:	40020400 	.word	0x40020400
 8005ac8:	40020800 	.word	0x40020800
 8005acc:	40020c00 	.word	0x40020c00
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	40021400 	.word	0x40021400
 8005ad8:	40021800 	.word	0x40021800
 8005adc:	40013c00 	.word	0x40013c00

08005ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	807b      	strh	r3, [r7, #2]
 8005aec:	4613      	mov	r3, r2
 8005aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005af0:	787b      	ldrb	r3, [r7, #1]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005afc:	e003      	b.n	8005b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005afe:	887b      	ldrh	r3, [r7, #2]
 8005b00:	041a      	lsls	r2, r3, #16
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	619a      	str	r2, [r3, #24]
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b24:	887a      	ldrh	r2, [r7, #2]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	041a      	lsls	r2, r3, #16
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	43d9      	mvns	r1, r3
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	400b      	ands	r3, r1
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	619a      	str	r2, [r3, #24]
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b52:	4b08      	ldr	r3, [pc, #32]	@ (8005b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d006      	beq.n	8005b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b5e:	4a05      	ldr	r2, [pc, #20]	@ (8005b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f806 	bl	8005b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40013c00 	.word	0x40013c00

08005b78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e12b      	b.n	8005dfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc ff18 	bl	80029ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2224      	movs	r2, #36	@ 0x24
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f001 fd62 	bl	80076bc <HAL_RCC_GetPCLK1Freq>
 8005bf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	4a81      	ldr	r2, [pc, #516]	@ (8005e04 <HAL_I2C_Init+0x274>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d807      	bhi.n	8005c14 <HAL_I2C_Init+0x84>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4a80      	ldr	r2, [pc, #512]	@ (8005e08 <HAL_I2C_Init+0x278>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	bf94      	ite	ls
 8005c0c:	2301      	movls	r3, #1
 8005c0e:	2300      	movhi	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e006      	b.n	8005c22 <HAL_I2C_Init+0x92>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a7d      	ldr	r2, [pc, #500]	@ (8005e0c <HAL_I2C_Init+0x27c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	bf94      	ite	ls
 8005c1c:	2301      	movls	r3, #1
 8005c1e:	2300      	movhi	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e0e7      	b.n	8005dfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a78      	ldr	r2, [pc, #480]	@ (8005e10 <HAL_I2C_Init+0x280>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	0c9b      	lsrs	r3, r3, #18
 8005c34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4a6a      	ldr	r2, [pc, #424]	@ (8005e04 <HAL_I2C_Init+0x274>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d802      	bhi.n	8005c64 <HAL_I2C_Init+0xd4>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	3301      	adds	r3, #1
 8005c62:	e009      	b.n	8005c78 <HAL_I2C_Init+0xe8>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c6a:	fb02 f303 	mul.w	r3, r2, r3
 8005c6e:	4a69      	ldr	r2, [pc, #420]	@ (8005e14 <HAL_I2C_Init+0x284>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	099b      	lsrs	r3, r3, #6
 8005c76:	3301      	adds	r3, #1
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005c8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	495c      	ldr	r1, [pc, #368]	@ (8005e04 <HAL_I2C_Init+0x274>)
 8005c94:	428b      	cmp	r3, r1
 8005c96:	d819      	bhi.n	8005ccc <HAL_I2C_Init+0x13c>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1e59      	subs	r1, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ca6:	1c59      	adds	r1, r3, #1
 8005ca8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005cac:	400b      	ands	r3, r1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_I2C_Init+0x138>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1e59      	subs	r1, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc6:	e051      	b.n	8005d6c <HAL_I2C_Init+0x1dc>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	e04f      	b.n	8005d6c <HAL_I2C_Init+0x1dc>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d111      	bne.n	8005cf8 <HAL_I2C_Init+0x168>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1e58      	subs	r0, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	440b      	add	r3, r1
 8005ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf0c      	ite	eq
 8005cf0:	2301      	moveq	r3, #1
 8005cf2:	2300      	movne	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	e012      	b.n	8005d1e <HAL_I2C_Init+0x18e>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1e58      	subs	r0, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6859      	ldr	r1, [r3, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	0099      	lsls	r1, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d0e:	3301      	adds	r3, #1
 8005d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_I2C_Init+0x196>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e022      	b.n	8005d6c <HAL_I2C_Init+0x1dc>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10e      	bne.n	8005d4c <HAL_I2C_Init+0x1bc>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1e58      	subs	r0, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6859      	ldr	r1, [r3, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	440b      	add	r3, r1
 8005d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d40:	3301      	adds	r3, #1
 8005d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d4a:	e00f      	b.n	8005d6c <HAL_I2C_Init+0x1dc>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1e58      	subs	r0, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	0099      	lsls	r1, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d62:	3301      	adds	r3, #1
 8005d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	6809      	ldr	r1, [r1, #0]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69da      	ldr	r2, [r3, #28]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6911      	ldr	r1, [r2, #16]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	68d2      	ldr	r2, [r2, #12]
 8005da6:	4311      	orrs	r1, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	000186a0 	.word	0x000186a0
 8005e08:	001e847f 	.word	0x001e847f
 8005e0c:	003d08ff 	.word	0x003d08ff
 8005e10:	431bde83 	.word	0x431bde83
 8005e14:	10624dd3 	.word	0x10624dd3

08005e18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	461a      	mov	r2, r3
 8005e24:	460b      	mov	r3, r1
 8005e26:	817b      	strh	r3, [r7, #10]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e2c:	f7fd f91a 	bl	8003064 <HAL_GetTick>
 8005e30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	f040 80e0 	bne.w	8006000 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	2319      	movs	r3, #25
 8005e46:	2201      	movs	r2, #1
 8005e48:	4970      	ldr	r1, [pc, #448]	@ (800600c <HAL_I2C_Master_Transmit+0x1f4>)
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f001 f90e 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
 8005e58:	e0d3      	b.n	8006002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_I2C_Master_Transmit+0x50>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e0cc      	b.n	8006002 <HAL_I2C_Master_Transmit+0x1ea>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d007      	beq.n	8005e8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2221      	movs	r2, #33	@ 0x21
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2210      	movs	r2, #16
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	893a      	ldrh	r2, [r7, #8]
 8005ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a50      	ldr	r2, [pc, #320]	@ (8006010 <HAL_I2C_Master_Transmit+0x1f8>)
 8005ece:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ed0:	8979      	ldrh	r1, [r7, #10]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	6a3a      	ldr	r2, [r7, #32]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fdfa 	bl	8006ad0 <I2C_MasterRequestWrite>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e08d      	b.n	8006002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005efc:	e066      	b.n	8005fcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	6a39      	ldr	r1, [r7, #32]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f001 f9cc 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00d      	beq.n	8005f2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d107      	bne.n	8005f26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e06b      	b.n	8006002 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d11b      	bne.n	8005fa0 <HAL_I2C_Master_Transmit+0x188>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d017      	beq.n	8005fa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	6a39      	ldr	r1, [r7, #32]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f001 f9c3 	bl	8007330 <I2C_WaitOnBTFFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d107      	bne.n	8005fc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e01a      	b.n	8006002 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d194      	bne.n	8005efe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e000      	b.n	8006002 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006000:	2302      	movs	r3, #2
  }
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	00100002 	.word	0x00100002
 8006010:	ffff0000 	.word	0xffff0000

08006014 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08c      	sub	sp, #48	@ 0x30
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	461a      	mov	r2, r3
 8006020:	460b      	mov	r3, r1
 8006022:	817b      	strh	r3, [r7, #10]
 8006024:	4613      	mov	r3, r2
 8006026:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006028:	f7fd f81c 	bl	8003064 <HAL_GetTick>
 800602c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b20      	cmp	r3, #32
 8006038:	f040 8217 	bne.w	800646a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	2319      	movs	r3, #25
 8006042:	2201      	movs	r2, #1
 8006044:	497c      	ldr	r1, [pc, #496]	@ (8006238 <HAL_I2C_Master_Receive+0x224>)
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f001 f810 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006052:	2302      	movs	r3, #2
 8006054:	e20a      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_I2C_Master_Receive+0x50>
 8006060:	2302      	movs	r3, #2
 8006062:	e203      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b01      	cmp	r3, #1
 8006078:	d007      	beq.n	800608a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006098:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2222      	movs	r2, #34	@ 0x22
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2210      	movs	r2, #16
 80060a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	893a      	ldrh	r2, [r7, #8]
 80060ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a5c      	ldr	r2, [pc, #368]	@ (800623c <HAL_I2C_Master_Receive+0x228>)
 80060ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060cc:	8979      	ldrh	r1, [r7, #10]
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fd7e 	bl	8006bd4 <I2C_MasterRequestRead>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e1c4      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d113      	bne.n	8006112 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ea:	2300      	movs	r3, #0
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	623b      	str	r3, [r7, #32]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	623b      	str	r3, [r7, #32]
 80060fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e198      	b.n	8006444 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006116:	2b01      	cmp	r3, #1
 8006118:	d11b      	bne.n	8006152 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e178      	b.n	8006444 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006156:	2b02      	cmp	r3, #2
 8006158:	d11b      	bne.n	8006192 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006168:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	e158      	b.n	8006444 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061b8:	e144      	b.n	8006444 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061be:	2b03      	cmp	r3, #3
 80061c0:	f200 80f1 	bhi.w	80063a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d123      	bne.n	8006214 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f001 f8f5 	bl	80073c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e145      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006212:	e117      	b.n	8006444 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006218:	2b02      	cmp	r3, #2
 800621a:	d14e      	bne.n	80062ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	2200      	movs	r2, #0
 8006224:	4906      	ldr	r1, [pc, #24]	@ (8006240 <HAL_I2C_Master_Receive+0x22c>)
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 ff20 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e11a      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
 8006236:	bf00      	nop
 8006238:	00100002 	.word	0x00100002
 800623c:	ffff0000 	.word	0xffff0000
 8006240:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062b8:	e0c4      	b.n	8006444 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c0:	2200      	movs	r2, #0
 80062c2:	496c      	ldr	r1, [pc, #432]	@ (8006474 <HAL_I2C_Master_Receive+0x460>)
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 fed1 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0cb      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631c:	2200      	movs	r2, #0
 800631e:	4955      	ldr	r1, [pc, #340]	@ (8006474 <HAL_I2C_Master_Receive+0x460>)
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fea3 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e09d      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800633e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063a4:	e04e      	b.n	8006444 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f001 f808 	bl	80073c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e058      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d124      	bne.n	8006444 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d107      	bne.n	8006412 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006410:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691a      	ldr	r2, [r3, #16]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f aeb6 	bne.w	80061ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	e000      	b.n	800646c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800646a:	2302      	movs	r3, #2
  }
}
 800646c:	4618      	mov	r0, r3
 800646e:	3728      	adds	r7, #40	@ 0x28
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	00010004 	.word	0x00010004

08006478 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4603      	mov	r3, r0
 8006488:	817b      	strh	r3, [r7, #10]
 800648a:	460b      	mov	r3, r1
 800648c:	813b      	strh	r3, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006492:	f7fc fde7 	bl	8003064 <HAL_GetTick>
 8006496:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	f040 80d9 	bne.w	8006658 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	2319      	movs	r3, #25
 80064ac:	2201      	movs	r2, #1
 80064ae:	496d      	ldr	r1, [pc, #436]	@ (8006664 <HAL_I2C_Mem_Write+0x1ec>)
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fddb 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
 80064be:	e0cc      	b.n	800665a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_I2C_Mem_Write+0x56>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e0c5      	b.n	800665a <HAL_I2C_Mem_Write+0x1e2>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d007      	beq.n	80064f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2221      	movs	r2, #33	@ 0x21
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2240      	movs	r2, #64	@ 0x40
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a3a      	ldr	r2, [r7, #32]
 800651e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006524:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a4d      	ldr	r2, [pc, #308]	@ (8006668 <HAL_I2C_Mem_Write+0x1f0>)
 8006534:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006536:	88f8      	ldrh	r0, [r7, #6]
 8006538:	893a      	ldrh	r2, [r7, #8]
 800653a:	8979      	ldrh	r1, [r7, #10]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	4603      	mov	r3, r0
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fc12 	bl	8006d70 <I2C_RequestMemoryWrite>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d052      	beq.n	80065f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e081      	b.n	800665a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fea0 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00d      	beq.n	8006582 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	2b04      	cmp	r3, #4
 800656c:	d107      	bne.n	800657e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800657c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e06b      	b.n	800665a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d11b      	bne.n	80065f8 <HAL_I2C_Mem_Write+0x180>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d017      	beq.n	80065f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1aa      	bne.n	8006556 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fe93 	bl	8007330 <I2C_WaitOnBTFFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00d      	beq.n	800662c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	2b04      	cmp	r3, #4
 8006616:	d107      	bne.n	8006628 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006626:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e016      	b.n	800665a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800663a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	e000      	b.n	800665a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006658:	2302      	movs	r3, #2
  }
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	00100002 	.word	0x00100002
 8006668:	ffff0000 	.word	0xffff0000

0800666c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08c      	sub	sp, #48	@ 0x30
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	4608      	mov	r0, r1
 8006676:	4611      	mov	r1, r2
 8006678:	461a      	mov	r2, r3
 800667a:	4603      	mov	r3, r0
 800667c:	817b      	strh	r3, [r7, #10]
 800667e:	460b      	mov	r3, r1
 8006680:	813b      	strh	r3, [r7, #8]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006686:	f7fc fced 	bl	8003064 <HAL_GetTick>
 800668a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b20      	cmp	r3, #32
 8006696:	f040 8214 	bne.w	8006ac2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	2319      	movs	r3, #25
 80066a0:	2201      	movs	r2, #1
 80066a2:	497b      	ldr	r1, [pc, #492]	@ (8006890 <HAL_I2C_Mem_Read+0x224>)
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 fce1 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80066b0:	2302      	movs	r3, #2
 80066b2:	e207      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_I2C_Mem_Read+0x56>
 80066be:	2302      	movs	r3, #2
 80066c0:	e200      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d007      	beq.n	80066e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2222      	movs	r2, #34	@ 0x22
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2240      	movs	r2, #64	@ 0x40
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a5b      	ldr	r2, [pc, #364]	@ (8006894 <HAL_I2C_Mem_Read+0x228>)
 8006728:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800672a:	88f8      	ldrh	r0, [r7, #6]
 800672c:	893a      	ldrh	r2, [r7, #8]
 800672e:	8979      	ldrh	r1, [r7, #10]
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	4603      	mov	r3, r0
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fbae 	bl	8006e9c <I2C_RequestMemoryRead>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e1bc      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d113      	bne.n	800677a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006752:	2300      	movs	r3, #0
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	623b      	str	r3, [r7, #32]
 8006766:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e190      	b.n	8006a9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800677e:	2b01      	cmp	r3, #1
 8006780:	d11b      	bne.n	80067ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006792:	2300      	movs	r3, #0
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	e170      	b.n	8006a9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d11b      	bne.n	80067fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	e150      	b.n	8006a9c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006810:	e144      	b.n	8006a9c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006816:	2b03      	cmp	r3, #3
 8006818:	f200 80f1 	bhi.w	80069fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006820:	2b01      	cmp	r3, #1
 8006822:	d123      	bne.n	800686c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006826:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 fdc9 	bl	80073c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e145      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800686a:	e117      	b.n	8006a9c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006870:	2b02      	cmp	r3, #2
 8006872:	d14e      	bne.n	8006912 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687a:	2200      	movs	r2, #0
 800687c:	4906      	ldr	r1, [pc, #24]	@ (8006898 <HAL_I2C_Mem_Read+0x22c>)
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fbf4 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d008      	beq.n	800689c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e11a      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
 800688e:	bf00      	nop
 8006890:	00100002 	.word	0x00100002
 8006894:	ffff0000 	.word	0xffff0000
 8006898:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006910:	e0c4      	b.n	8006a9c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006918:	2200      	movs	r2, #0
 800691a:	496c      	ldr	r1, [pc, #432]	@ (8006acc <HAL_I2C_Mem_Read+0x460>)
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 fba5 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0cb      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800693a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691a      	ldr	r2, [r3, #16]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	2200      	movs	r2, #0
 8006976:	4955      	ldr	r1, [pc, #340]	@ (8006acc <HAL_I2C_Mem_Read+0x460>)
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fb77 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e09d      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069fc:	e04e      	b.n	8006a9c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fcdc 	bl	80073c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e058      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d124      	bne.n	8006a9c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d107      	bne.n	8006a6a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f47f aeb6 	bne.w	8006812 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e000      	b.n	8006ac4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006ac2:	2302      	movs	r3, #2
  }
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3728      	adds	r7, #40	@ 0x28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	00010004 	.word	0x00010004

08006ad0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	607a      	str	r2, [r7, #4]
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	460b      	mov	r3, r1
 8006ade:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d006      	beq.n	8006afa <I2C_MasterRequestWrite+0x2a>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d003      	beq.n	8006afa <I2C_MasterRequestWrite+0x2a>
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006af8:	d108      	bne.n	8006b0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	e00b      	b.n	8006b24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	2b12      	cmp	r3, #18
 8006b12:	d107      	bne.n	8006b24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fa9b 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00d      	beq.n	8006b58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b4a:	d103      	bne.n	8006b54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e035      	b.n	8006bc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b60:	d108      	bne.n	8006b74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b62:	897b      	ldrh	r3, [r7, #10]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b70:	611a      	str	r2, [r3, #16]
 8006b72:	e01b      	b.n	8006bac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b74:	897b      	ldrh	r3, [r7, #10]
 8006b76:	11db      	asrs	r3, r3, #7
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	f003 0306 	and.w	r3, r3, #6
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	f063 030f 	orn	r3, r3, #15
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	490e      	ldr	r1, [pc, #56]	@ (8006bcc <I2C_MasterRequestWrite+0xfc>)
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fae4 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e010      	b.n	8006bc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	4907      	ldr	r1, [pc, #28]	@ (8006bd0 <I2C_MasterRequestWrite+0x100>)
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fad4 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	00010008 	.word	0x00010008
 8006bd0:	00010002 	.word	0x00010002

08006bd4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	607a      	str	r2, [r7, #4]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	460b      	mov	r3, r1
 8006be2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bf8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d006      	beq.n	8006c0e <I2C_MasterRequestRead+0x3a>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d003      	beq.n	8006c0e <I2C_MasterRequestRead+0x3a>
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c0c:	d108      	bne.n	8006c20 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e00b      	b.n	8006c38 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c24:	2b11      	cmp	r3, #17
 8006c26:	d107      	bne.n	8006c38 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fa11 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00d      	beq.n	8006c6c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5e:	d103      	bne.n	8006c68 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e079      	b.n	8006d60 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c74:	d108      	bne.n	8006c88 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c76:	897b      	ldrh	r3, [r7, #10]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	611a      	str	r2, [r3, #16]
 8006c86:	e05f      	b.n	8006d48 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c88:	897b      	ldrh	r3, [r7, #10]
 8006c8a:	11db      	asrs	r3, r3, #7
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 0306 	and.w	r3, r3, #6
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f063 030f 	orn	r3, r3, #15
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4930      	ldr	r1, [pc, #192]	@ (8006d68 <I2C_MasterRequestRead+0x194>)
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fa5a 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e054      	b.n	8006d60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006cb6:	897b      	ldrh	r3, [r7, #10]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4929      	ldr	r1, [pc, #164]	@ (8006d6c <I2C_MasterRequestRead+0x198>)
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fa4a 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e044      	b.n	8006d60 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	613b      	str	r3, [r7, #16]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f9af 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00d      	beq.n	8006d30 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d22:	d103      	bne.n	8006d2c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d2a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e017      	b.n	8006d60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006d30:	897b      	ldrh	r3, [r7, #10]
 8006d32:	11db      	asrs	r3, r3, #7
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	f003 0306 	and.w	r3, r3, #6
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f063 030e 	orn	r3, r3, #14
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4907      	ldr	r1, [pc, #28]	@ (8006d6c <I2C_MasterRequestRead+0x198>)
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fa06 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	00010008 	.word	0x00010008
 8006d6c:	00010002 	.word	0x00010002

08006d70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	817b      	strh	r3, [r7, #10]
 8006d82:	460b      	mov	r3, r1
 8006d84:	813b      	strh	r3, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f960 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00d      	beq.n	8006dce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc0:	d103      	bne.n	8006dca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e05f      	b.n	8006e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dce:	897b      	ldrh	r3, [r7, #10]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	492d      	ldr	r1, [pc, #180]	@ (8006e98 <I2C_RequestMemoryWrite+0x128>)
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f9bb 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e04c      	b.n	8006e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0c:	6a39      	ldr	r1, [r7, #32]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fa46 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00d      	beq.n	8006e36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d107      	bne.n	8006e32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e02b      	b.n	8006e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d105      	bne.n	8006e48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e3c:	893b      	ldrh	r3, [r7, #8]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	611a      	str	r2, [r3, #16]
 8006e46:	e021      	b.n	8006e8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e48:	893b      	ldrh	r3, [r7, #8]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e58:	6a39      	ldr	r1, [r7, #32]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fa20 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00d      	beq.n	8006e82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d107      	bne.n	8006e7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e005      	b.n	8006e8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e82:	893b      	ldrh	r3, [r7, #8]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	00010002 	.word	0x00010002

08006e9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	817b      	strh	r3, [r7, #10]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	813b      	strh	r3, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ec4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f8c2 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00d      	beq.n	8006f0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006efc:	d103      	bne.n	8006f06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e0aa      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f0a:	897b      	ldrh	r3, [r7, #10]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	4952      	ldr	r1, [pc, #328]	@ (8007068 <I2C_RequestMemoryRead+0x1cc>)
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f91d 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e097      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f48:	6a39      	ldr	r1, [r7, #32]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 f9a8 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d107      	bne.n	8006f6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e076      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d105      	bne.n	8006f84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f78:	893b      	ldrh	r3, [r7, #8]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	611a      	str	r2, [r3, #16]
 8006f82:	e021      	b.n	8006fc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f84:	893b      	ldrh	r3, [r7, #8]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f94:	6a39      	ldr	r1, [r7, #32]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f982 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d107      	bne.n	8006fba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e050      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fbe:	893b      	ldrh	r3, [r7, #8]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fca:	6a39      	ldr	r1, [r7, #32]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f967 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00d      	beq.n	8006ff4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d107      	bne.n	8006ff0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e035      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007002:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	2200      	movs	r2, #0
 800700c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f82b 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800702a:	d103      	bne.n	8007034 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007032:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e013      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007038:	897b      	ldrh	r3, [r7, #10]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f043 0301 	orr.w	r3, r3, #1
 8007040:	b2da      	uxtb	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	4906      	ldr	r1, [pc, #24]	@ (8007068 <I2C_RequestMemoryRead+0x1cc>)
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f886 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	00010002 	.word	0x00010002

0800706c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800707c:	e048      	b.n	8007110 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d044      	beq.n	8007110 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007086:	f7fb ffed 	bl	8003064 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d302      	bcc.n	800709c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d139      	bne.n	8007110 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	0c1b      	lsrs	r3, r3, #16
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d10d      	bne.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	43da      	mvns	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4013      	ands	r3, r2
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	e00c      	b.n	80070dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	43da      	mvns	r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4013      	ands	r3, r2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d116      	bne.n	8007110 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fc:	f043 0220 	orr.w	r2, r3, #32
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e023      	b.n	8007158 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	0c1b      	lsrs	r3, r3, #16
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b01      	cmp	r3, #1
 8007118:	d10d      	bne.n	8007136 <I2C_WaitOnFlagUntilTimeout+0xca>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	43da      	mvns	r2, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	4013      	ands	r3, r2
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	e00c      	b.n	8007150 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	43da      	mvns	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	429a      	cmp	r2, r3
 8007154:	d093      	beq.n	800707e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800716e:	e071      	b.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800717e:	d123      	bne.n	80071c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800718e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b4:	f043 0204 	orr.w	r2, r3, #4
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e067      	b.n	8007298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d041      	beq.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d0:	f7fb ff48 	bl	8003064 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d302      	bcc.n	80071e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d136      	bne.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10c      	bne.n	800720a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	43da      	mvns	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4013      	ands	r3, r2
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bf14      	ite	ne
 8007202:	2301      	movne	r3, #1
 8007204:	2300      	moveq	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	e00b      	b.n	8007222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	43da      	mvns	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4013      	ands	r3, r2
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d016      	beq.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	f043 0220 	orr.w	r2, r3, #32
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e021      	b.n	8007298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	0c1b      	lsrs	r3, r3, #16
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10c      	bne.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	43da      	mvns	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4013      	ands	r3, r2
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e00b      	b.n	8007290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	43da      	mvns	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4013      	ands	r3, r2
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	bf14      	ite	ne
 800728a:	2301      	movne	r3, #1
 800728c:	2300      	moveq	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	f47f af6d 	bne.w	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072ac:	e034      	b.n	8007318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f8e3 	bl	800747a <I2C_IsAcknowledgeFailed>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e034      	b.n	8007328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d028      	beq.n	8007318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c6:	f7fb fecd 	bl	8003064 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d11d      	bne.n	8007318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e6:	2b80      	cmp	r3, #128	@ 0x80
 80072e8:	d016      	beq.n	8007318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007304:	f043 0220 	orr.w	r2, r3, #32
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e007      	b.n	8007328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007322:	2b80      	cmp	r3, #128	@ 0x80
 8007324:	d1c3      	bne.n	80072ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800733c:	e034      	b.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f89b 	bl	800747a <I2C_IsAcknowledgeFailed>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e034      	b.n	80073b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d028      	beq.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007356:	f7fb fe85 	bl	8003064 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	429a      	cmp	r2, r3
 8007364:	d302      	bcc.n	800736c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d11d      	bne.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b04      	cmp	r3, #4
 8007378:	d016      	beq.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e007      	b.n	80073b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d1c3      	bne.n	800733e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073cc:	e049      	b.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b10      	cmp	r3, #16
 80073da:	d119      	bne.n	8007410 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0210 	mvn.w	r2, #16
 80073e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e030      	b.n	8007472 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007410:	f7fb fe28 	bl	8003064 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	429a      	cmp	r2, r3
 800741e:	d302      	bcc.n	8007426 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11d      	bne.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007430:	2b40      	cmp	r3, #64	@ 0x40
 8007432:	d016      	beq.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744e:	f043 0220 	orr.w	r2, r3, #32
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e007      	b.n	8007472 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746c:	2b40      	cmp	r3, #64	@ 0x40
 800746e:	d1ae      	bne.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800748c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007490:	d11b      	bne.n	80074ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800749a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b6:	f043 0204 	orr.w	r2, r3, #4
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0cc      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074ec:	4b68      	ldr	r3, [pc, #416]	@ (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d90c      	bls.n	8007514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fa:	4b65      	ldr	r3, [pc, #404]	@ (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007502:	4b63      	ldr	r3, [pc, #396]	@ (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 030f 	and.w	r3, r3, #15
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e0b8      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d020      	beq.n	8007562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800752c:	4b59      	ldr	r3, [pc, #356]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4a58      	ldr	r2, [pc, #352]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007532:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007536:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007544:	4b53      	ldr	r3, [pc, #332]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4a52      	ldr	r2, [pc, #328]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800754e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007550:	4b50      	ldr	r3, [pc, #320]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	494d      	ldr	r1, [pc, #308]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d044      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d107      	bne.n	8007586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007576:	4b47      	ldr	r3, [pc, #284]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d119      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e07f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d003      	beq.n	8007596 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007592:	2b03      	cmp	r3, #3
 8007594:	d107      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007596:	4b3f      	ldr	r3, [pc, #252]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e06f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e067      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075b6:	4b37      	ldr	r3, [pc, #220]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f023 0203 	bic.w	r2, r3, #3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	4934      	ldr	r1, [pc, #208]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c8:	f7fb fd4c 	bl	8003064 <HAL_GetTick>
 80075cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ce:	e00a      	b.n	80075e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075d0:	f7fb fd48 	bl	8003064 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e04f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e6:	4b2b      	ldr	r3, [pc, #172]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 020c 	and.w	r2, r3, #12
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d1eb      	bne.n	80075d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075f8:	4b25      	ldr	r3, [pc, #148]	@ (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 030f 	and.w	r3, r3, #15
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d20c      	bcs.n	8007620 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007606:	4b22      	ldr	r3, [pc, #136]	@ (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800760e:	4b20      	ldr	r3, [pc, #128]	@ (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e032      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d008      	beq.n	800763e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800762c:	4b19      	ldr	r3, [pc, #100]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4916      	ldr	r1, [pc, #88]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	4313      	orrs	r3, r2
 800763c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800764a:	4b12      	ldr	r3, [pc, #72]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	490e      	ldr	r1, [pc, #56]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	4313      	orrs	r3, r2
 800765c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800765e:	f000 f855 	bl	800770c <HAL_RCC_GetSysClockFreq>
 8007662:	4602      	mov	r2, r0
 8007664:	4b0b      	ldr	r3, [pc, #44]	@ (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	490a      	ldr	r1, [pc, #40]	@ (8007698 <HAL_RCC_ClockConfig+0x1c0>)
 8007670:	5ccb      	ldrb	r3, [r1, r3]
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	4a09      	ldr	r2, [pc, #36]	@ (800769c <HAL_RCC_ClockConfig+0x1c4>)
 8007678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800767a:	4b09      	ldr	r3, [pc, #36]	@ (80076a0 <HAL_RCC_ClockConfig+0x1c8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f7fb fcac 	bl	8002fdc <HAL_InitTick>

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40023c00 	.word	0x40023c00
 8007694:	40023800 	.word	0x40023800
 8007698:	0800d97c 	.word	0x0800d97c
 800769c:	20000000 	.word	0x20000000
 80076a0:	20000004 	.word	0x20000004

080076a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076a8:	4b03      	ldr	r3, [pc, #12]	@ (80076b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80076aa:	681b      	ldr	r3, [r3, #0]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	20000000 	.word	0x20000000

080076bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076c0:	f7ff fff0 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 80076c4:	4602      	mov	r2, r0
 80076c6:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	0a9b      	lsrs	r3, r3, #10
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	4903      	ldr	r1, [pc, #12]	@ (80076e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076d2:	5ccb      	ldrb	r3, [r1, r3]
 80076d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d8:	4618      	mov	r0, r3
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40023800 	.word	0x40023800
 80076e0:	0800d98c 	.word	0x0800d98c

080076e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076e8:	f7ff ffdc 	bl	80076a4 <HAL_RCC_GetHCLKFreq>
 80076ec:	4602      	mov	r2, r0
 80076ee:	4b05      	ldr	r3, [pc, #20]	@ (8007704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	0b5b      	lsrs	r3, r3, #13
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	4903      	ldr	r1, [pc, #12]	@ (8007708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076fa:	5ccb      	ldrb	r3, [r1, r3]
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007700:	4618      	mov	r0, r3
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40023800 	.word	0x40023800
 8007708:	0800d98c 	.word	0x0800d98c

0800770c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800770c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007710:	b0ae      	sub	sp, #184	@ 0xb8
 8007712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007732:	4bcb      	ldr	r3, [pc, #812]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 030c 	and.w	r3, r3, #12
 800773a:	2b0c      	cmp	r3, #12
 800773c:	f200 8206 	bhi.w	8007b4c <HAL_RCC_GetSysClockFreq+0x440>
 8007740:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	0800777d 	.word	0x0800777d
 800774c:	08007b4d 	.word	0x08007b4d
 8007750:	08007b4d 	.word	0x08007b4d
 8007754:	08007b4d 	.word	0x08007b4d
 8007758:	08007785 	.word	0x08007785
 800775c:	08007b4d 	.word	0x08007b4d
 8007760:	08007b4d 	.word	0x08007b4d
 8007764:	08007b4d 	.word	0x08007b4d
 8007768:	0800778d 	.word	0x0800778d
 800776c:	08007b4d 	.word	0x08007b4d
 8007770:	08007b4d 	.word	0x08007b4d
 8007774:	08007b4d 	.word	0x08007b4d
 8007778:	0800797d 	.word	0x0800797d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800777c:	4bb9      	ldr	r3, [pc, #740]	@ (8007a64 <HAL_RCC_GetSysClockFreq+0x358>)
 800777e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007782:	e1e7      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007784:	4bb8      	ldr	r3, [pc, #736]	@ (8007a68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800778a:	e1e3      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800778c:	4bb4      	ldr	r3, [pc, #720]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007798:	4bb1      	ldr	r3, [pc, #708]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d071      	beq.n	8007888 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077a4:	4bae      	ldr	r3, [pc, #696]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	099b      	lsrs	r3, r3, #6
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80077b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077ca:	4622      	mov	r2, r4
 80077cc:	462b      	mov	r3, r5
 80077ce:	f04f 0000 	mov.w	r0, #0
 80077d2:	f04f 0100 	mov.w	r1, #0
 80077d6:	0159      	lsls	r1, r3, #5
 80077d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077dc:	0150      	lsls	r0, r2, #5
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4621      	mov	r1, r4
 80077e4:	1a51      	subs	r1, r2, r1
 80077e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80077e8:	4629      	mov	r1, r5
 80077ea:	eb63 0301 	sbc.w	r3, r3, r1
 80077ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80077fc:	4649      	mov	r1, r9
 80077fe:	018b      	lsls	r3, r1, #6
 8007800:	4641      	mov	r1, r8
 8007802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007806:	4641      	mov	r1, r8
 8007808:	018a      	lsls	r2, r1, #6
 800780a:	4641      	mov	r1, r8
 800780c:	1a51      	subs	r1, r2, r1
 800780e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007810:	4649      	mov	r1, r9
 8007812:	eb63 0301 	sbc.w	r3, r3, r1
 8007816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007824:	4649      	mov	r1, r9
 8007826:	00cb      	lsls	r3, r1, #3
 8007828:	4641      	mov	r1, r8
 800782a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800782e:	4641      	mov	r1, r8
 8007830:	00ca      	lsls	r2, r1, #3
 8007832:	4610      	mov	r0, r2
 8007834:	4619      	mov	r1, r3
 8007836:	4603      	mov	r3, r0
 8007838:	4622      	mov	r2, r4
 800783a:	189b      	adds	r3, r3, r2
 800783c:	633b      	str	r3, [r7, #48]	@ 0x30
 800783e:	462b      	mov	r3, r5
 8007840:	460a      	mov	r2, r1
 8007842:	eb42 0303 	adc.w	r3, r2, r3
 8007846:	637b      	str	r3, [r7, #52]	@ 0x34
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007854:	4629      	mov	r1, r5
 8007856:	024b      	lsls	r3, r1, #9
 8007858:	4621      	mov	r1, r4
 800785a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800785e:	4621      	mov	r1, r4
 8007860:	024a      	lsls	r2, r1, #9
 8007862:	4610      	mov	r0, r2
 8007864:	4619      	mov	r1, r3
 8007866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800786a:	2200      	movs	r2, #0
 800786c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007874:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007878:	f7f9 fa06 	bl	8000c88 <__aeabi_uldivmod>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4613      	mov	r3, r2
 8007882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007886:	e067      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007888:	4b75      	ldr	r3, [pc, #468]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	099b      	lsrs	r3, r3, #6
 800788e:	2200      	movs	r2, #0
 8007890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007894:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007898:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800789c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078a2:	2300      	movs	r3, #0
 80078a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80078aa:	4622      	mov	r2, r4
 80078ac:	462b      	mov	r3, r5
 80078ae:	f04f 0000 	mov.w	r0, #0
 80078b2:	f04f 0100 	mov.w	r1, #0
 80078b6:	0159      	lsls	r1, r3, #5
 80078b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078bc:	0150      	lsls	r0, r2, #5
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4621      	mov	r1, r4
 80078c4:	1a51      	subs	r1, r2, r1
 80078c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80078c8:	4629      	mov	r1, r5
 80078ca:	eb63 0301 	sbc.w	r3, r3, r1
 80078ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80078dc:	4649      	mov	r1, r9
 80078de:	018b      	lsls	r3, r1, #6
 80078e0:	4641      	mov	r1, r8
 80078e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078e6:	4641      	mov	r1, r8
 80078e8:	018a      	lsls	r2, r1, #6
 80078ea:	4641      	mov	r1, r8
 80078ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80078f0:	4649      	mov	r1, r9
 80078f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007902:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800790a:	4692      	mov	sl, r2
 800790c:	469b      	mov	fp, r3
 800790e:	4623      	mov	r3, r4
 8007910:	eb1a 0303 	adds.w	r3, sl, r3
 8007914:	623b      	str	r3, [r7, #32]
 8007916:	462b      	mov	r3, r5
 8007918:	eb4b 0303 	adc.w	r3, fp, r3
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800792a:	4629      	mov	r1, r5
 800792c:	028b      	lsls	r3, r1, #10
 800792e:	4621      	mov	r1, r4
 8007930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007934:	4621      	mov	r1, r4
 8007936:	028a      	lsls	r2, r1, #10
 8007938:	4610      	mov	r0, r2
 800793a:	4619      	mov	r1, r3
 800793c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007940:	2200      	movs	r2, #0
 8007942:	673b      	str	r3, [r7, #112]	@ 0x70
 8007944:	677a      	str	r2, [r7, #116]	@ 0x74
 8007946:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800794a:	f7f9 f99d 	bl	8000c88 <__aeabi_uldivmod>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4613      	mov	r3, r2
 8007954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007958:	4b41      	ldr	r3, [pc, #260]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	3301      	adds	r3, #1
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800796a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800796e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007972:	fbb2 f3f3 	udiv	r3, r2, r3
 8007976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800797a:	e0eb      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800797c:	4b38      	ldr	r3, [pc, #224]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007988:	4b35      	ldr	r3, [pc, #212]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d06b      	beq.n	8007a6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007994:	4b32      	ldr	r3, [pc, #200]	@ (8007a60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	099b      	lsrs	r3, r3, #6
 800799a:	2200      	movs	r2, #0
 800799c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800799e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80079a8:	2300      	movs	r3, #0
 80079aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80079ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80079b0:	4622      	mov	r2, r4
 80079b2:	462b      	mov	r3, r5
 80079b4:	f04f 0000 	mov.w	r0, #0
 80079b8:	f04f 0100 	mov.w	r1, #0
 80079bc:	0159      	lsls	r1, r3, #5
 80079be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c2:	0150      	lsls	r0, r2, #5
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4621      	mov	r1, r4
 80079ca:	1a51      	subs	r1, r2, r1
 80079cc:	61b9      	str	r1, [r7, #24]
 80079ce:	4629      	mov	r1, r5
 80079d0:	eb63 0301 	sbc.w	r3, r3, r1
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	f04f 0300 	mov.w	r3, #0
 80079de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80079e2:	4659      	mov	r1, fp
 80079e4:	018b      	lsls	r3, r1, #6
 80079e6:	4651      	mov	r1, sl
 80079e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079ec:	4651      	mov	r1, sl
 80079ee:	018a      	lsls	r2, r1, #6
 80079f0:	4651      	mov	r1, sl
 80079f2:	ebb2 0801 	subs.w	r8, r2, r1
 80079f6:	4659      	mov	r1, fp
 80079f8:	eb63 0901 	sbc.w	r9, r3, r1
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a10:	4690      	mov	r8, r2
 8007a12:	4699      	mov	r9, r3
 8007a14:	4623      	mov	r3, r4
 8007a16:	eb18 0303 	adds.w	r3, r8, r3
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	462b      	mov	r3, r5
 8007a1e:	eb49 0303 	adc.w	r3, r9, r3
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007a30:	4629      	mov	r1, r5
 8007a32:	024b      	lsls	r3, r1, #9
 8007a34:	4621      	mov	r1, r4
 8007a36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	024a      	lsls	r2, r1, #9
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4619      	mov	r1, r3
 8007a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a46:	2200      	movs	r2, #0
 8007a48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a4a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007a4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a50:	f7f9 f91a 	bl	8000c88 <__aeabi_uldivmod>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4613      	mov	r3, r2
 8007a5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a5e:	e065      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0x420>
 8007a60:	40023800 	.word	0x40023800
 8007a64:	00f42400 	.word	0x00f42400
 8007a68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x458>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	099b      	lsrs	r3, r3, #6
 8007a72:	2200      	movs	r2, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	4611      	mov	r1, r2
 8007a78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a7e:	2300      	movs	r3, #0
 8007a80:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007a86:	4642      	mov	r2, r8
 8007a88:	464b      	mov	r3, r9
 8007a8a:	f04f 0000 	mov.w	r0, #0
 8007a8e:	f04f 0100 	mov.w	r1, #0
 8007a92:	0159      	lsls	r1, r3, #5
 8007a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a98:	0150      	lsls	r0, r2, #5
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	1a51      	subs	r1, r2, r1
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	f04f 0300 	mov.w	r3, #0
 8007ab4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007ab8:	4659      	mov	r1, fp
 8007aba:	018b      	lsls	r3, r1, #6
 8007abc:	4651      	mov	r1, sl
 8007abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ac2:	4651      	mov	r1, sl
 8007ac4:	018a      	lsls	r2, r1, #6
 8007ac6:	4651      	mov	r1, sl
 8007ac8:	1a54      	subs	r4, r2, r1
 8007aca:	4659      	mov	r1, fp
 8007acc:	eb63 0501 	sbc.w	r5, r3, r1
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	00eb      	lsls	r3, r5, #3
 8007ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ade:	00e2      	lsls	r2, r4, #3
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	461d      	mov	r5, r3
 8007ae4:	4643      	mov	r3, r8
 8007ae6:	18e3      	adds	r3, r4, r3
 8007ae8:	603b      	str	r3, [r7, #0]
 8007aea:	464b      	mov	r3, r9
 8007aec:	eb45 0303 	adc.w	r3, r5, r3
 8007af0:	607b      	str	r3, [r7, #4]
 8007af2:	f04f 0200 	mov.w	r2, #0
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007afe:	4629      	mov	r1, r5
 8007b00:	028b      	lsls	r3, r1, #10
 8007b02:	4621      	mov	r1, r4
 8007b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b08:	4621      	mov	r1, r4
 8007b0a:	028a      	lsls	r2, r1, #10
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b14:	2200      	movs	r2, #0
 8007b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b18:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007b1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b1e:	f7f9 f8b3 	bl	8000c88 <__aeabi_uldivmod>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4613      	mov	r3, r2
 8007b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	0f1b      	lsrs	r3, r3, #28
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007b4a:	e003      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b4c:	4b06      	ldr	r3, [pc, #24]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007b52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	37b8      	adds	r7, #184	@ 0xb8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b62:	bf00      	nop
 8007b64:	40023800 	.word	0x40023800
 8007b68:	00f42400 	.word	0x00f42400

08007b6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e28d      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 8083 	beq.w	8007c92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007b8c:	4b94      	ldr	r3, [pc, #592]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 030c 	and.w	r3, r3, #12
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d019      	beq.n	8007bcc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007b98:	4b91      	ldr	r3, [pc, #580]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f003 030c 	and.w	r3, r3, #12
        || \
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d106      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bb0:	d00c      	beq.n	8007bcc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007bba:	2b0c      	cmp	r3, #12
 8007bbc:	d112      	bne.n	8007be4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bbe:	4b88      	ldr	r3, [pc, #544]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bca:	d10b      	bne.n	8007be4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bcc:	4b84      	ldr	r3, [pc, #528]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d05b      	beq.n	8007c90 <HAL_RCC_OscConfig+0x124>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d157      	bne.n	8007c90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e25a      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bec:	d106      	bne.n	8007bfc <HAL_RCC_OscConfig+0x90>
 8007bee:	4b7c      	ldr	r3, [pc, #496]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a7b      	ldr	r2, [pc, #492]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	e01d      	b.n	8007c38 <HAL_RCC_OscConfig+0xcc>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c04:	d10c      	bne.n	8007c20 <HAL_RCC_OscConfig+0xb4>
 8007c06:	4b76      	ldr	r3, [pc, #472]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a75      	ldr	r2, [pc, #468]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	4b73      	ldr	r3, [pc, #460]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a72      	ldr	r2, [pc, #456]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e00b      	b.n	8007c38 <HAL_RCC_OscConfig+0xcc>
 8007c20:	4b6f      	ldr	r3, [pc, #444]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a6e      	ldr	r2, [pc, #440]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a6b      	ldr	r2, [pc, #428]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d013      	beq.n	8007c68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c40:	f7fb fa10 	bl	8003064 <HAL_GetTick>
 8007c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c46:	e008      	b.n	8007c5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c48:	f7fb fa0c 	bl	8003064 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	2b64      	cmp	r3, #100	@ 0x64
 8007c54:	d901      	bls.n	8007c5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e21f      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c5a:	4b61      	ldr	r3, [pc, #388]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0f0      	beq.n	8007c48 <HAL_RCC_OscConfig+0xdc>
 8007c66:	e014      	b.n	8007c92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fb f9fc 	bl	8003064 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c70:	f7fb f9f8 	bl	8003064 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b64      	cmp	r3, #100	@ 0x64
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e20b      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c82:	4b57      	ldr	r3, [pc, #348]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f0      	bne.n	8007c70 <HAL_RCC_OscConfig+0x104>
 8007c8e:	e000      	b.n	8007c92 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d06f      	beq.n	8007d7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c9e:	4b50      	ldr	r3, [pc, #320]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 030c 	and.w	r3, r3, #12
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d017      	beq.n	8007cda <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007caa:	4b4d      	ldr	r3, [pc, #308]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 030c 	and.w	r3, r3, #12
        || \
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d105      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00b      	beq.n	8007cda <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cc2:	4b47      	ldr	r3, [pc, #284]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007cca:	2b0c      	cmp	r3, #12
 8007ccc:	d11c      	bne.n	8007d08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cce:	4b44      	ldr	r3, [pc, #272]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d116      	bne.n	8007d08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cda:	4b41      	ldr	r3, [pc, #260]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x186>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d001      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e1d3      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	4937      	ldr	r1, [pc, #220]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d06:	e03a      	b.n	8007d7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d020      	beq.n	8007d52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d10:	4b34      	ldr	r3, [pc, #208]	@ (8007de4 <HAL_RCC_OscConfig+0x278>)
 8007d12:	2201      	movs	r2, #1
 8007d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d16:	f7fb f9a5 	bl	8003064 <HAL_GetTick>
 8007d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d1c:	e008      	b.n	8007d30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d1e:	f7fb f9a1 	bl	8003064 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d901      	bls.n	8007d30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e1b4      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d30:	4b2b      	ldr	r3, [pc, #172]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0f0      	beq.n	8007d1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d3c:	4b28      	ldr	r3, [pc, #160]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4925      	ldr	r1, [pc, #148]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	600b      	str	r3, [r1, #0]
 8007d50:	e015      	b.n	8007d7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d52:	4b24      	ldr	r3, [pc, #144]	@ (8007de4 <HAL_RCC_OscConfig+0x278>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d58:	f7fb f984 	bl	8003064 <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d60:	f7fb f980 	bl	8003064 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e193      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d72:	4b1b      	ldr	r3, [pc, #108]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1f0      	bne.n	8007d60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d036      	beq.n	8007df8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d016      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d92:	4b15      	ldr	r3, [pc, #84]	@ (8007de8 <HAL_RCC_OscConfig+0x27c>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d98:	f7fb f964 	bl	8003064 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007da0:	f7fb f960 	bl	8003064 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e173      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007db2:	4b0b      	ldr	r3, [pc, #44]	@ (8007de0 <HAL_RCC_OscConfig+0x274>)
 8007db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f0      	beq.n	8007da0 <HAL_RCC_OscConfig+0x234>
 8007dbe:	e01b      	b.n	8007df8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dc0:	4b09      	ldr	r3, [pc, #36]	@ (8007de8 <HAL_RCC_OscConfig+0x27c>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc6:	f7fb f94d 	bl	8003064 <HAL_GetTick>
 8007dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dcc:	e00e      	b.n	8007dec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dce:	f7fb f949 	bl	8003064 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d907      	bls.n	8007dec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e15c      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
 8007de0:	40023800 	.word	0x40023800
 8007de4:	42470000 	.word	0x42470000
 8007de8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dec:	4b8a      	ldr	r3, [pc, #552]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1ea      	bne.n	8007dce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8097 	beq.w	8007f34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e0a:	4b83      	ldr	r3, [pc, #524]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10f      	bne.n	8007e36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e16:	2300      	movs	r3, #0
 8007e18:	60bb      	str	r3, [r7, #8]
 8007e1a:	4b7f      	ldr	r3, [pc, #508]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e26:	4b7c      	ldr	r3, [pc, #496]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e32:	2301      	movs	r3, #1
 8007e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e36:	4b79      	ldr	r3, [pc, #484]	@ (800801c <HAL_RCC_OscConfig+0x4b0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d118      	bne.n	8007e74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e42:	4b76      	ldr	r3, [pc, #472]	@ (800801c <HAL_RCC_OscConfig+0x4b0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a75      	ldr	r2, [pc, #468]	@ (800801c <HAL_RCC_OscConfig+0x4b0>)
 8007e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e4e:	f7fb f909 	bl	8003064 <HAL_GetTick>
 8007e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e54:	e008      	b.n	8007e68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e56:	f7fb f905 	bl	8003064 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e118      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e68:	4b6c      	ldr	r3, [pc, #432]	@ (800801c <HAL_RCC_OscConfig+0x4b0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0f0      	beq.n	8007e56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d106      	bne.n	8007e8a <HAL_RCC_OscConfig+0x31e>
 8007e7c:	4b66      	ldr	r3, [pc, #408]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e80:	4a65      	ldr	r2, [pc, #404]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e88:	e01c      	b.n	8007ec4 <HAL_RCC_OscConfig+0x358>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	d10c      	bne.n	8007eac <HAL_RCC_OscConfig+0x340>
 8007e92:	4b61      	ldr	r3, [pc, #388]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e96:	4a60      	ldr	r2, [pc, #384]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007e98:	f043 0304 	orr.w	r3, r3, #4
 8007e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ea2:	4a5d      	ldr	r2, [pc, #372]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007ea4:	f043 0301 	orr.w	r3, r3, #1
 8007ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eaa:	e00b      	b.n	8007ec4 <HAL_RCC_OscConfig+0x358>
 8007eac:	4b5a      	ldr	r3, [pc, #360]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb0:	4a59      	ldr	r2, [pc, #356]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eb8:	4b57      	ldr	r3, [pc, #348]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ebc:	4a56      	ldr	r2, [pc, #344]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007ebe:	f023 0304 	bic.w	r3, r3, #4
 8007ec2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d015      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ecc:	f7fb f8ca 	bl	8003064 <HAL_GetTick>
 8007ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed2:	e00a      	b.n	8007eea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ed4:	f7fb f8c6 	bl	8003064 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e0d7      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eea:	4b4b      	ldr	r3, [pc, #300]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0ee      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x368>
 8007ef6:	e014      	b.n	8007f22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef8:	f7fb f8b4 	bl	8003064 <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007efe:	e00a      	b.n	8007f16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f00:	f7fb f8b0 	bl	8003064 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e0c1      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f16:	4b40      	ldr	r3, [pc, #256]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1ee      	bne.n	8007f00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d105      	bne.n	8007f34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f28:	4b3b      	ldr	r3, [pc, #236]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2c:	4a3a      	ldr	r2, [pc, #232]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80ad 	beq.w	8008098 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f3e:	4b36      	ldr	r3, [pc, #216]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 030c 	and.w	r3, r3, #12
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d060      	beq.n	800800c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d145      	bne.n	8007fde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f52:	4b33      	ldr	r3, [pc, #204]	@ (8008020 <HAL_RCC_OscConfig+0x4b4>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f58:	f7fb f884 	bl	8003064 <HAL_GetTick>
 8007f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f60:	f7fb f880 	bl	8003064 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e093      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f72:	4b29      	ldr	r3, [pc, #164]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f0      	bne.n	8007f60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	69da      	ldr	r2, [r3, #28]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8c:	019b      	lsls	r3, r3, #6
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f94:	085b      	lsrs	r3, r3, #1
 8007f96:	3b01      	subs	r3, #1
 8007f98:	041b      	lsls	r3, r3, #16
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	061b      	lsls	r3, r3, #24
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa8:	071b      	lsls	r3, r3, #28
 8007faa:	491b      	ldr	r1, [pc, #108]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8008020 <HAL_RCC_OscConfig+0x4b4>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb6:	f7fb f855 	bl	8003064 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fbe:	f7fb f851 	bl	8003064 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e064      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fd0:	4b11      	ldr	r3, [pc, #68]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d0f0      	beq.n	8007fbe <HAL_RCC_OscConfig+0x452>
 8007fdc:	e05c      	b.n	8008098 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fde:	4b10      	ldr	r3, [pc, #64]	@ (8008020 <HAL_RCC_OscConfig+0x4b4>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe4:	f7fb f83e 	bl	8003064 <HAL_GetTick>
 8007fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fec:	f7fb f83a 	bl	8003064 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e04d      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ffe:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <HAL_RCC_OscConfig+0x4ac>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f0      	bne.n	8007fec <HAL_RCC_OscConfig+0x480>
 800800a:	e045      	b.n	8008098 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d107      	bne.n	8008024 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e040      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
 8008018:	40023800 	.word	0x40023800
 800801c:	40007000 	.word	0x40007000
 8008020:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008024:	4b1f      	ldr	r3, [pc, #124]	@ (80080a4 <HAL_RCC_OscConfig+0x538>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d030      	beq.n	8008094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800803c:	429a      	cmp	r2, r3
 800803e:	d129      	bne.n	8008094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800804a:	429a      	cmp	r2, r3
 800804c:	d122      	bne.n	8008094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008054:	4013      	ands	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800805a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800805c:	4293      	cmp	r3, r2
 800805e:	d119      	bne.n	8008094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806a:	085b      	lsrs	r3, r3, #1
 800806c:	3b01      	subs	r3, #1
 800806e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008070:	429a      	cmp	r2, r3
 8008072:	d10f      	bne.n	8008094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008080:	429a      	cmp	r2, r3
 8008082:	d107      	bne.n	8008094 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008090:	429a      	cmp	r2, r3
 8008092:	d001      	beq.n	8008098 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40023800 	.word	0x40023800

080080a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e041      	b.n	800813e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fa fd2c 	bl	8002b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f000 fbf0 	bl	80088cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e041      	b.n	80081dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7fa fcbb 	bl	8002ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3304      	adds	r3, #4
 8008182:	4619      	mov	r1, r3
 8008184:	4610      	mov	r0, r2
 8008186:	f000 fba1 	bl	80088cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d109      	bne.n	8008208 <HAL_TIM_PWM_Start+0x24>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	bf14      	ite	ne
 8008200:	2301      	movne	r3, #1
 8008202:	2300      	moveq	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	e022      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b04      	cmp	r3, #4
 800820c:	d109      	bne.n	8008222 <HAL_TIM_PWM_Start+0x3e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b01      	cmp	r3, #1
 8008218:	bf14      	ite	ne
 800821a:	2301      	movne	r3, #1
 800821c:	2300      	moveq	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	e015      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d109      	bne.n	800823c <HAL_TIM_PWM_Start+0x58>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b01      	cmp	r3, #1
 8008232:	bf14      	ite	ne
 8008234:	2301      	movne	r3, #1
 8008236:	2300      	moveq	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	e008      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b01      	cmp	r3, #1
 8008246:	bf14      	ite	ne
 8008248:	2301      	movne	r3, #1
 800824a:	2300      	moveq	r3, #0
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e07c      	b.n	8008350 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <HAL_TIM_PWM_Start+0x82>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008264:	e013      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b04      	cmp	r3, #4
 800826a:	d104      	bne.n	8008276 <HAL_TIM_PWM_Start+0x92>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008274:	e00b      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d104      	bne.n	8008286 <HAL_TIM_PWM_Start+0xa2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008284:	e003      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2201      	movs	r2, #1
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fe0e 	bl	8008eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008358 <HAL_TIM_PWM_Start+0x174>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d004      	beq.n	80082b0 <HAL_TIM_PWM_Start+0xcc>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2c      	ldr	r2, [pc, #176]	@ (800835c <HAL_TIM_PWM_Start+0x178>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d101      	bne.n	80082b4 <HAL_TIM_PWM_Start+0xd0>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <HAL_TIM_PWM_Start+0xd2>
 80082b4:	2300      	movs	r3, #0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d007      	beq.n	80082ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a22      	ldr	r2, [pc, #136]	@ (8008358 <HAL_TIM_PWM_Start+0x174>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d022      	beq.n	800831a <HAL_TIM_PWM_Start+0x136>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082dc:	d01d      	beq.n	800831a <HAL_TIM_PWM_Start+0x136>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008360 <HAL_TIM_PWM_Start+0x17c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d018      	beq.n	800831a <HAL_TIM_PWM_Start+0x136>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008364 <HAL_TIM_PWM_Start+0x180>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d013      	beq.n	800831a <HAL_TIM_PWM_Start+0x136>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008368 <HAL_TIM_PWM_Start+0x184>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00e      	beq.n	800831a <HAL_TIM_PWM_Start+0x136>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a16      	ldr	r2, [pc, #88]	@ (800835c <HAL_TIM_PWM_Start+0x178>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d009      	beq.n	800831a <HAL_TIM_PWM_Start+0x136>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a18      	ldr	r2, [pc, #96]	@ (800836c <HAL_TIM_PWM_Start+0x188>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d004      	beq.n	800831a <HAL_TIM_PWM_Start+0x136>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a16      	ldr	r2, [pc, #88]	@ (8008370 <HAL_TIM_PWM_Start+0x18c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d111      	bne.n	800833e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b06      	cmp	r3, #6
 800832a:	d010      	beq.n	800834e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833c:	e007      	b.n	800834e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0201 	orr.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40010000 	.word	0x40010000
 800835c:	40010400 	.word	0x40010400
 8008360:	40000400 	.word	0x40000400
 8008364:	40000800 	.word	0x40000800
 8008368:	40000c00 	.word	0x40000c00
 800836c:	40014000 	.word	0x40014000
 8008370:	40001800 	.word	0x40001800

08008374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d020      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01b      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0202 	mvn.w	r2, #2
 80083a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa65 	bl	800888e <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa57 	bl	800887a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fa68 	bl	80088a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d020      	beq.n	8008424 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01b      	beq.n	8008424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0204 	mvn.w	r2, #4
 80083f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2202      	movs	r2, #2
 80083fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa3f 	bl	800888e <HAL_TIM_IC_CaptureCallback>
 8008410:	e005      	b.n	800841e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa31 	bl	800887a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fa42 	bl	80088a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0208 	mvn.w	r2, #8
 8008440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2204      	movs	r2, #4
 8008446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fa19 	bl	800888e <HAL_TIM_IC_CaptureCallback>
 800845c:	e005      	b.n	800846a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fa0b 	bl	800887a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fa1c 	bl	80088a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0310 	and.w	r3, r3, #16
 8008476:	2b00      	cmp	r3, #0
 8008478:	d020      	beq.n	80084bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0310 	and.w	r3, r3, #16
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01b      	beq.n	80084bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0210 	mvn.w	r2, #16
 800848c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2208      	movs	r2, #8
 8008492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f9f3 	bl	800888e <HAL_TIM_IC_CaptureCallback>
 80084a8:	e005      	b.n	80084b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f9e5 	bl	800887a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f9f6 	bl	80088a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00c      	beq.n	80084e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0201 	mvn.w	r2, #1
 80084d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f9c3 	bl	8008866 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00c      	beq.n	8008504 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d007      	beq.n	8008504 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80084fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fdd8 	bl	80090b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f9c7 	bl	80088b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00c      	beq.n	800854c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d007      	beq.n	800854c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f06f 0220 	mvn.w	r2, #32
 8008544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fdaa 	bl	80090a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800854c:	bf00      	nop
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800856e:	2302      	movs	r3, #2
 8008570:	e0ae      	b.n	80086d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b0c      	cmp	r3, #12
 800857e:	f200 809f 	bhi.w	80086c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008582:	a201      	add	r2, pc, #4	@ (adr r2, 8008588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085bd 	.word	0x080085bd
 800858c:	080086c1 	.word	0x080086c1
 8008590:	080086c1 	.word	0x080086c1
 8008594:	080086c1 	.word	0x080086c1
 8008598:	080085fd 	.word	0x080085fd
 800859c:	080086c1 	.word	0x080086c1
 80085a0:	080086c1 	.word	0x080086c1
 80085a4:	080086c1 	.word	0x080086c1
 80085a8:	0800863f 	.word	0x0800863f
 80085ac:	080086c1 	.word	0x080086c1
 80085b0:	080086c1 	.word	0x080086c1
 80085b4:	080086c1 	.word	0x080086c1
 80085b8:	0800867f 	.word	0x0800867f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fa2e 	bl	8008a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0208 	orr.w	r2, r2, #8
 80085d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699a      	ldr	r2, [r3, #24]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0204 	bic.w	r2, r2, #4
 80085e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6999      	ldr	r1, [r3, #24]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	619a      	str	r2, [r3, #24]
      break;
 80085fa:	e064      	b.n	80086c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fa7e 	bl	8008b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6999      	ldr	r1, [r3, #24]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	021a      	lsls	r2, r3, #8
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	619a      	str	r2, [r3, #24]
      break;
 800863c:	e043      	b.n	80086c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fad3 	bl	8008bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69da      	ldr	r2, [r3, #28]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0208 	orr.w	r2, r2, #8
 8008658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0204 	bic.w	r2, r2, #4
 8008668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69d9      	ldr	r1, [r3, #28]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	691a      	ldr	r2, [r3, #16]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	61da      	str	r2, [r3, #28]
      break;
 800867c:	e023      	b.n	80086c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fb27 	bl	8008cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69da      	ldr	r2, [r3, #28]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69d9      	ldr	r1, [r3, #28]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	021a      	lsls	r2, r3, #8
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	61da      	str	r2, [r3, #28]
      break;
 80086be:	e002      	b.n	80086c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	75fb      	strb	r3, [r7, #23]
      break;
 80086c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d101      	bne.n	80086f4 <HAL_TIM_ConfigClockSource+0x1c>
 80086f0:	2302      	movs	r3, #2
 80086f2:	e0b4      	b.n	800885e <HAL_TIM_ConfigClockSource+0x186>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800871a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800872c:	d03e      	beq.n	80087ac <HAL_TIM_ConfigClockSource+0xd4>
 800872e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008732:	f200 8087 	bhi.w	8008844 <HAL_TIM_ConfigClockSource+0x16c>
 8008736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800873a:	f000 8086 	beq.w	800884a <HAL_TIM_ConfigClockSource+0x172>
 800873e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008742:	d87f      	bhi.n	8008844 <HAL_TIM_ConfigClockSource+0x16c>
 8008744:	2b70      	cmp	r3, #112	@ 0x70
 8008746:	d01a      	beq.n	800877e <HAL_TIM_ConfigClockSource+0xa6>
 8008748:	2b70      	cmp	r3, #112	@ 0x70
 800874a:	d87b      	bhi.n	8008844 <HAL_TIM_ConfigClockSource+0x16c>
 800874c:	2b60      	cmp	r3, #96	@ 0x60
 800874e:	d050      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0x11a>
 8008750:	2b60      	cmp	r3, #96	@ 0x60
 8008752:	d877      	bhi.n	8008844 <HAL_TIM_ConfigClockSource+0x16c>
 8008754:	2b50      	cmp	r3, #80	@ 0x50
 8008756:	d03c      	beq.n	80087d2 <HAL_TIM_ConfigClockSource+0xfa>
 8008758:	2b50      	cmp	r3, #80	@ 0x50
 800875a:	d873      	bhi.n	8008844 <HAL_TIM_ConfigClockSource+0x16c>
 800875c:	2b40      	cmp	r3, #64	@ 0x40
 800875e:	d058      	beq.n	8008812 <HAL_TIM_ConfigClockSource+0x13a>
 8008760:	2b40      	cmp	r3, #64	@ 0x40
 8008762:	d86f      	bhi.n	8008844 <HAL_TIM_ConfigClockSource+0x16c>
 8008764:	2b30      	cmp	r3, #48	@ 0x30
 8008766:	d064      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0x15a>
 8008768:	2b30      	cmp	r3, #48	@ 0x30
 800876a:	d86b      	bhi.n	8008844 <HAL_TIM_ConfigClockSource+0x16c>
 800876c:	2b20      	cmp	r3, #32
 800876e:	d060      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0x15a>
 8008770:	2b20      	cmp	r3, #32
 8008772:	d867      	bhi.n	8008844 <HAL_TIM_ConfigClockSource+0x16c>
 8008774:	2b00      	cmp	r3, #0
 8008776:	d05c      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0x15a>
 8008778:	2b10      	cmp	r3, #16
 800877a:	d05a      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0x15a>
 800877c:	e062      	b.n	8008844 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800878e:	f000 fb73 	bl	8008e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	609a      	str	r2, [r3, #8]
      break;
 80087aa:	e04f      	b.n	800884c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087bc:	f000 fb5c 	bl	8008e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087ce:	609a      	str	r2, [r3, #8]
      break;
 80087d0:	e03c      	b.n	800884c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087de:	461a      	mov	r2, r3
 80087e0:	f000 fad0 	bl	8008d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2150      	movs	r1, #80	@ 0x50
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fb29 	bl	8008e42 <TIM_ITRx_SetConfig>
      break;
 80087f0:	e02c      	b.n	800884c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087fe:	461a      	mov	r2, r3
 8008800:	f000 faef 	bl	8008de2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2160      	movs	r1, #96	@ 0x60
 800880a:	4618      	mov	r0, r3
 800880c:	f000 fb19 	bl	8008e42 <TIM_ITRx_SetConfig>
      break;
 8008810:	e01c      	b.n	800884c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800881e:	461a      	mov	r2, r3
 8008820:	f000 fab0 	bl	8008d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2140      	movs	r1, #64	@ 0x40
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fb09 	bl	8008e42 <TIM_ITRx_SetConfig>
      break;
 8008830:	e00c      	b.n	800884c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4619      	mov	r1, r3
 800883c:	4610      	mov	r0, r2
 800883e:	f000 fb00 	bl	8008e42 <TIM_ITRx_SetConfig>
      break;
 8008842:	e003      	b.n	800884c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	73fb      	strb	r3, [r7, #15]
      break;
 8008848:	e000      	b.n	800884c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800884a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800886e:	bf00      	nop
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a46      	ldr	r2, [pc, #280]	@ (80089f8 <TIM_Base_SetConfig+0x12c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d013      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ea:	d00f      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a43      	ldr	r2, [pc, #268]	@ (80089fc <TIM_Base_SetConfig+0x130>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00b      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a42      	ldr	r2, [pc, #264]	@ (8008a00 <TIM_Base_SetConfig+0x134>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d007      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a41      	ldr	r2, [pc, #260]	@ (8008a04 <TIM_Base_SetConfig+0x138>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d003      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a40      	ldr	r2, [pc, #256]	@ (8008a08 <TIM_Base_SetConfig+0x13c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d108      	bne.n	800891e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a35      	ldr	r2, [pc, #212]	@ (80089f8 <TIM_Base_SetConfig+0x12c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d02b      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800892c:	d027      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a32      	ldr	r2, [pc, #200]	@ (80089fc <TIM_Base_SetConfig+0x130>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d023      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a31      	ldr	r2, [pc, #196]	@ (8008a00 <TIM_Base_SetConfig+0x134>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d01f      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a30      	ldr	r2, [pc, #192]	@ (8008a04 <TIM_Base_SetConfig+0x138>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d01b      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2f      	ldr	r2, [pc, #188]	@ (8008a08 <TIM_Base_SetConfig+0x13c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d017      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a2e      	ldr	r2, [pc, #184]	@ (8008a0c <TIM_Base_SetConfig+0x140>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d013      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a2d      	ldr	r2, [pc, #180]	@ (8008a10 <TIM_Base_SetConfig+0x144>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00f      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a2c      	ldr	r2, [pc, #176]	@ (8008a14 <TIM_Base_SetConfig+0x148>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00b      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a2b      	ldr	r2, [pc, #172]	@ (8008a18 <TIM_Base_SetConfig+0x14c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d007      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a2a      	ldr	r2, [pc, #168]	@ (8008a1c <TIM_Base_SetConfig+0x150>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d003      	beq.n	800897e <TIM_Base_SetConfig+0xb2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a29      	ldr	r2, [pc, #164]	@ (8008a20 <TIM_Base_SetConfig+0x154>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d108      	bne.n	8008990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	4313      	orrs	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a10      	ldr	r2, [pc, #64]	@ (80089f8 <TIM_Base_SetConfig+0x12c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d003      	beq.n	80089c4 <TIM_Base_SetConfig+0xf8>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a12      	ldr	r2, [pc, #72]	@ (8008a08 <TIM_Base_SetConfig+0x13c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d103      	bne.n	80089cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	691a      	ldr	r2, [r3, #16]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d105      	bne.n	80089ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f023 0201 	bic.w	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	611a      	str	r2, [r3, #16]
  }
}
 80089ea:	bf00      	nop
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	40010000 	.word	0x40010000
 80089fc:	40000400 	.word	0x40000400
 8008a00:	40000800 	.word	0x40000800
 8008a04:	40000c00 	.word	0x40000c00
 8008a08:	40010400 	.word	0x40010400
 8008a0c:	40014000 	.word	0x40014000
 8008a10:	40014400 	.word	0x40014400
 8008a14:	40014800 	.word	0x40014800
 8008a18:	40001800 	.word	0x40001800
 8008a1c:	40001c00 	.word	0x40001c00
 8008a20:	40002000 	.word	0x40002000

08008a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	f023 0201 	bic.w	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f023 0302 	bic.w	r3, r3, #2
 8008a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a20      	ldr	r2, [pc, #128]	@ (8008afc <TIM_OC1_SetConfig+0xd8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d003      	beq.n	8008a88 <TIM_OC1_SetConfig+0x64>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a1f      	ldr	r2, [pc, #124]	@ (8008b00 <TIM_OC1_SetConfig+0xdc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d10c      	bne.n	8008aa2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f023 0308 	bic.w	r3, r3, #8
 8008a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f023 0304 	bic.w	r3, r3, #4
 8008aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a15      	ldr	r2, [pc, #84]	@ (8008afc <TIM_OC1_SetConfig+0xd8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <TIM_OC1_SetConfig+0x8e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a14      	ldr	r2, [pc, #80]	@ (8008b00 <TIM_OC1_SetConfig+0xdc>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d111      	bne.n	8008ad6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	621a      	str	r2, [r3, #32]
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	40010000 	.word	0x40010000
 8008b00:	40010400 	.word	0x40010400

08008b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	f023 0210 	bic.w	r2, r3, #16
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f023 0320 	bic.w	r3, r3, #32
 8008b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a22      	ldr	r2, [pc, #136]	@ (8008be8 <TIM_OC2_SetConfig+0xe4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d003      	beq.n	8008b6c <TIM_OC2_SetConfig+0x68>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a21      	ldr	r2, [pc, #132]	@ (8008bec <TIM_OC2_SetConfig+0xe8>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d10d      	bne.n	8008b88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a17      	ldr	r2, [pc, #92]	@ (8008be8 <TIM_OC2_SetConfig+0xe4>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_OC2_SetConfig+0x94>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a16      	ldr	r2, [pc, #88]	@ (8008bec <TIM_OC2_SetConfig+0xe8>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d113      	bne.n	8008bc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40010000 	.word	0x40010000
 8008bec:	40010400 	.word	0x40010400

08008bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0303 	bic.w	r3, r3, #3
 8008c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	021b      	lsls	r3, r3, #8
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a21      	ldr	r2, [pc, #132]	@ (8008cd0 <TIM_OC3_SetConfig+0xe0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d003      	beq.n	8008c56 <TIM_OC3_SetConfig+0x66>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a20      	ldr	r2, [pc, #128]	@ (8008cd4 <TIM_OC3_SetConfig+0xe4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d10d      	bne.n	8008c72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	021b      	lsls	r3, r3, #8
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a16      	ldr	r2, [pc, #88]	@ (8008cd0 <TIM_OC3_SetConfig+0xe0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d003      	beq.n	8008c82 <TIM_OC3_SetConfig+0x92>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a15      	ldr	r2, [pc, #84]	@ (8008cd4 <TIM_OC3_SetConfig+0xe4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d113      	bne.n	8008caa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	621a      	str	r2, [r3, #32]
}
 8008cc4:	bf00      	nop
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40010400 	.word	0x40010400

08008cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	031b      	lsls	r3, r3, #12
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a12      	ldr	r2, [pc, #72]	@ (8008d7c <TIM_OC4_SetConfig+0xa4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d003      	beq.n	8008d40 <TIM_OC4_SetConfig+0x68>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a11      	ldr	r2, [pc, #68]	@ (8008d80 <TIM_OC4_SetConfig+0xa8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d109      	bne.n	8008d54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	019b      	lsls	r3, r3, #6
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	621a      	str	r2, [r3, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	40010000 	.word	0x40010000
 8008d80:	40010400 	.word	0x40010400

08008d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	f023 0201 	bic.w	r2, r3, #1
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	011b      	lsls	r3, r3, #4
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f023 030a 	bic.w	r3, r3, #10
 8008dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	621a      	str	r2, [r3, #32]
}
 8008dd6:	bf00      	nop
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b087      	sub	sp, #28
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	f023 0210 	bic.w	r2, r3, #16
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	031b      	lsls	r3, r3, #12
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	621a      	str	r2, [r3, #32]
}
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f043 0307 	orr.w	r3, r3, #7
 8008e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	609a      	str	r2, [r3, #8]
}
 8008e6c:	bf00      	nop
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	021a      	lsls	r2, r3, #8
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	609a      	str	r2, [r3, #8]
}
 8008eac:	bf00      	nop
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f003 031f 	and.w	r3, r3, #31
 8008eca:	2201      	movs	r2, #1
 8008ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a1a      	ldr	r2, [r3, #32]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	43db      	mvns	r3, r3
 8008eda:	401a      	ands	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a1a      	ldr	r2, [r3, #32]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f003 031f 	and.w	r3, r3, #31
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	621a      	str	r2, [r3, #32]
}
 8008ef6:	bf00      	nop
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
	...

08008f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e05a      	b.n	8008fd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a21      	ldr	r2, [pc, #132]	@ (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d022      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f68:	d01d      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d018      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a1b      	ldr	r2, [pc, #108]	@ (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d013      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a1a      	ldr	r2, [pc, #104]	@ (8008fec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00e      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a18      	ldr	r2, [pc, #96]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d009      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a17      	ldr	r2, [pc, #92]	@ (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d004      	beq.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a15      	ldr	r2, [pc, #84]	@ (8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d10c      	bne.n	8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	40010000 	.word	0x40010000
 8008fe4:	40000400 	.word	0x40000400
 8008fe8:	40000800 	.word	0x40000800
 8008fec:	40000c00 	.word	0x40000c00
 8008ff0:	40010400 	.word	0x40010400
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	40001800 	.word	0x40001800

08008ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009014:	2302      	movs	r3, #2
 8009016:	e03d      	b.n	8009094 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	4313      	orrs	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e042      	b.n	8009160 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d106      	bne.n	80090f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7f9 fd92 	bl	8002c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2224      	movs	r2, #36	@ 0x24
 80090f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800910a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fdbd 	bl	8009c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	695a      	ldr	r2, [r3, #20]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2220      	movs	r2, #32
 800914c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	@ 0x28
 800916c:	af02      	add	r7, sp, #8
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	4613      	mov	r3, r2
 8009176:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b20      	cmp	r3, #32
 8009186:	d175      	bne.n	8009274 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <HAL_UART_Transmit+0x2c>
 800918e:	88fb      	ldrh	r3, [r7, #6]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e06e      	b.n	8009276 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2221      	movs	r2, #33	@ 0x21
 80091a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091a6:	f7f9 ff5d 	bl	8003064 <HAL_GetTick>
 80091aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	88fa      	ldrh	r2, [r7, #6]
 80091b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	88fa      	ldrh	r2, [r7, #6]
 80091b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091c0:	d108      	bne.n	80091d4 <HAL_UART_Transmit+0x6c>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d104      	bne.n	80091d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	e003      	b.n	80091dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091dc:	e02e      	b.n	800923c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2200      	movs	r2, #0
 80091e6:	2180      	movs	r1, #128	@ 0x80
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 fb1f 	bl	800982c <UART_WaitOnFlagUntilTimeout>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e03a      	b.n	8009276 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10b      	bne.n	800921e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009214:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	3302      	adds	r3, #2
 800921a:	61bb      	str	r3, [r7, #24]
 800921c:	e007      	b.n	800922e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	781a      	ldrb	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	3301      	adds	r3, #1
 800922c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009232:	b29b      	uxth	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009240:	b29b      	uxth	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1cb      	bne.n	80091de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2200      	movs	r2, #0
 800924e:	2140      	movs	r1, #64	@ 0x40
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 faeb 	bl	800982c <UART_WaitOnFlagUntilTimeout>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2220      	movs	r2, #32
 8009260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e006      	b.n	8009276 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2220      	movs	r2, #32
 800926c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	e000      	b.n	8009276 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009274:	2302      	movs	r3, #2
  }
}
 8009276:	4618      	mov	r0, r3
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	4613      	mov	r3, r2
 800928a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b20      	cmp	r3, #32
 8009296:	d112      	bne.n	80092be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <HAL_UART_Receive_IT+0x26>
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e00b      	b.n	80092c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	461a      	mov	r2, r3
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 fb12 	bl	80098de <UART_Start_Receive_IT>
 80092ba:	4603      	mov	r3, r0
 80092bc:	e000      	b.n	80092c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80092be:	2302      	movs	r3, #2
  }
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b0ba      	sub	sp, #232	@ 0xe8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80092f4:	2300      	movs	r3, #0
 80092f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80092fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fe:	f003 030f 	and.w	r3, r3, #15
 8009302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10f      	bne.n	800932e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800930e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b00      	cmp	r3, #0
 8009318:	d009      	beq.n	800932e <HAL_UART_IRQHandler+0x66>
 800931a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fbf2 	bl	8009b10 <UART_Receive_IT>
      return;
 800932c:	e25b      	b.n	80097e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800932e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80de 	beq.w	80094f4 <HAL_UART_IRQHandler+0x22c>
 8009338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d106      	bne.n	8009352 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009348:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80d1 	beq.w	80094f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00b      	beq.n	8009376 <HAL_UART_IRQHandler+0xae>
 800935e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009366:	2b00      	cmp	r3, #0
 8009368:	d005      	beq.n	8009376 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800936e:	f043 0201 	orr.w	r2, r3, #1
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00b      	beq.n	800939a <HAL_UART_IRQHandler+0xd2>
 8009382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d005      	beq.n	800939a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009392:	f043 0202 	orr.w	r2, r3, #2
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800939a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00b      	beq.n	80093be <HAL_UART_IRQHandler+0xf6>
 80093a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b6:	f043 0204 	orr.w	r2, r3, #4
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c2:	f003 0308 	and.w	r3, r3, #8
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d011      	beq.n	80093ee <HAL_UART_IRQHandler+0x126>
 80093ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ce:	f003 0320 	and.w	r3, r3, #32
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d105      	bne.n	80093e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80093d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d005      	beq.n	80093ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e6:	f043 0208 	orr.w	r2, r3, #8
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 81f2 	beq.w	80097dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093fc:	f003 0320 	and.w	r3, r3, #32
 8009400:	2b00      	cmp	r3, #0
 8009402:	d008      	beq.n	8009416 <HAL_UART_IRQHandler+0x14e>
 8009404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009408:	f003 0320 	and.w	r3, r3, #32
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fb7d 	bl	8009b10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009420:	2b40      	cmp	r3, #64	@ 0x40
 8009422:	bf0c      	ite	eq
 8009424:	2301      	moveq	r3, #1
 8009426:	2300      	movne	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d103      	bne.n	8009442 <HAL_UART_IRQHandler+0x17a>
 800943a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800943e:	2b00      	cmp	r3, #0
 8009440:	d04f      	beq.n	80094e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fa85 	bl	8009952 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009452:	2b40      	cmp	r3, #64	@ 0x40
 8009454:	d141      	bne.n	80094da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3314      	adds	r3, #20
 800945c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800946c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3314      	adds	r3, #20
 800947e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009482:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800948e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800949a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1d9      	bne.n	8009456 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d013      	beq.n	80094d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ae:	4a7e      	ldr	r2, [pc, #504]	@ (80096a8 <HAL_UART_IRQHandler+0x3e0>)
 80094b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fa fd6a 	bl	8003f90 <HAL_DMA_Abort_IT>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d016      	beq.n	80094f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d0:	e00e      	b.n	80094f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f994 	bl	8009800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d8:	e00a      	b.n	80094f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f990 	bl	8009800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e0:	e006      	b.n	80094f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f98c 	bl	8009800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80094ee:	e175      	b.n	80097dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f0:	bf00      	nop
    return;
 80094f2:	e173      	b.n	80097dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	f040 814f 	bne.w	800979c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80094fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 8148 	beq.w	800979c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800950c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009510:	f003 0310 	and.w	r3, r3, #16
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8141 	beq.w	800979c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800951a:	2300      	movs	r3, #0
 800951c:	60bb      	str	r3, [r7, #8]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	60bb      	str	r3, [r7, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	60bb      	str	r3, [r7, #8]
 800952e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800953a:	2b40      	cmp	r3, #64	@ 0x40
 800953c:	f040 80b6 	bne.w	80096ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800954c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8145 	beq.w	80097e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800955a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800955e:	429a      	cmp	r2, r3
 8009560:	f080 813e 	bcs.w	80097e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800956a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009576:	f000 8088 	beq.w	800968a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009590:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	330c      	adds	r3, #12
 80095a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80095a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80095b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80095be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1d9      	bne.n	800957a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3314      	adds	r3, #20
 80095cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095d0:	e853 3f00 	ldrex	r3, [r3]
 80095d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095d8:	f023 0301 	bic.w	r3, r3, #1
 80095dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3314      	adds	r3, #20
 80095e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80095ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80095ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80095fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e1      	bne.n	80095c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3314      	adds	r3, #20
 8009608:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3314      	adds	r3, #20
 8009622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009626:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009628:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800962c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e3      	bne.n	8009602 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	330c      	adds	r3, #12
 800964e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009652:	e853 3f00 	ldrex	r3, [r3]
 8009656:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800965a:	f023 0310 	bic.w	r3, r3, #16
 800965e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	330c      	adds	r3, #12
 8009668:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800966c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800966e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009672:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800967a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e3      	bne.n	8009648 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009684:	4618      	mov	r0, r3
 8009686:	f7fa fc13 	bl	8003eb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2202      	movs	r2, #2
 800968e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009698:	b29b      	uxth	r3, r3
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	b29b      	uxth	r3, r3
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f8b7 	bl	8009814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096a6:	e09b      	b.n	80097e0 <HAL_UART_IRQHandler+0x518>
 80096a8:	08009a19 	.word	0x08009a19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 808e 	beq.w	80097e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80096c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 8089 	beq.w	80097e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	330c      	adds	r3, #12
 80096d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	330c      	adds	r3, #12
 80096f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80096f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80096f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e3      	bne.n	80096d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3314      	adds	r3, #20
 8009710:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009714:	e853 3f00 	ldrex	r3, [r3]
 8009718:	623b      	str	r3, [r7, #32]
   return(result);
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	f023 0301 	bic.w	r3, r3, #1
 8009720:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3314      	adds	r3, #20
 800972a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800972e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009736:	e841 2300 	strex	r3, r2, [r1]
 800973a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800973c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1e3      	bne.n	800970a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	330c      	adds	r3, #12
 8009756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 0310 	bic.w	r3, r3, #16
 8009766:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	330c      	adds	r3, #12
 8009770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009774:	61fa      	str	r2, [r7, #28]
 8009776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	69b9      	ldr	r1, [r7, #24]
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	617b      	str	r3, [r7, #20]
   return(result);
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e3      	bne.n	8009750 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800978e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f83d 	bl	8009814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800979a:	e023      	b.n	80097e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800979c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d009      	beq.n	80097bc <HAL_UART_IRQHandler+0x4f4>
 80097a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d003      	beq.n	80097bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f943 	bl	8009a40 <UART_Transmit_IT>
    return;
 80097ba:	e014      	b.n	80097e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00e      	beq.n	80097e6 <HAL_UART_IRQHandler+0x51e>
 80097c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d008      	beq.n	80097e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f983 	bl	8009ae0 <UART_EndTransmit_IT>
    return;
 80097da:	e004      	b.n	80097e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80097dc:	bf00      	nop
 80097de:	e002      	b.n	80097e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80097e0:	bf00      	nop
 80097e2:	e000      	b.n	80097e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80097e4:	bf00      	nop
  }
}
 80097e6:	37e8      	adds	r7, #232	@ 0xe8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	603b      	str	r3, [r7, #0]
 8009838:	4613      	mov	r3, r2
 800983a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800983c:	e03b      	b.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009844:	d037      	beq.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009846:	f7f9 fc0d 	bl	8003064 <HAL_GetTick>
 800984a:	4602      	mov	r2, r0
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	6a3a      	ldr	r2, [r7, #32]
 8009852:	429a      	cmp	r2, r3
 8009854:	d302      	bcc.n	800985c <UART_WaitOnFlagUntilTimeout+0x30>
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e03a      	b.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f003 0304 	and.w	r3, r3, #4
 800986a:	2b00      	cmp	r3, #0
 800986c:	d023      	beq.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b80      	cmp	r3, #128	@ 0x80
 8009872:	d020      	beq.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b40      	cmp	r3, #64	@ 0x40
 8009878:	d01d      	beq.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b08      	cmp	r3, #8
 8009886:	d116      	bne.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	617b      	str	r3, [r7, #20]
 800989c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 f857 	bl	8009952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2208      	movs	r2, #8
 80098a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e00f      	b.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	4013      	ands	r3, r2
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	bf0c      	ite	eq
 80098c6:	2301      	moveq	r3, #1
 80098c8:	2300      	movne	r3, #0
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	461a      	mov	r2, r3
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d0b4      	beq.n	800983e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	4613      	mov	r3, r2
 80098ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	88fa      	ldrh	r2, [r7, #6]
 80098f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	88fa      	ldrh	r2, [r7, #6]
 80098fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2222      	movs	r2, #34	@ 0x22
 8009908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009922:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	695a      	ldr	r2, [r3, #20]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f042 0220 	orr.w	r2, r2, #32
 8009942:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009952:	b480      	push	{r7}
 8009954:	b095      	sub	sp, #84	@ 0x54
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	330c      	adds	r3, #12
 8009960:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009970:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	330c      	adds	r3, #12
 8009978:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800997a:	643a      	str	r2, [r7, #64]	@ 0x40
 800997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009980:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e5      	bne.n	800995a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3314      	adds	r3, #20
 8009994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	61fb      	str	r3, [r7, #28]
   return(result);
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	f023 0301 	bic.w	r3, r3, #1
 80099a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3314      	adds	r3, #20
 80099ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e5      	bne.n	800998e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d119      	bne.n	80099fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	330c      	adds	r3, #12
 80099d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	e853 3f00 	ldrex	r3, [r3]
 80099d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f023 0310 	bic.w	r3, r3, #16
 80099e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	330c      	adds	r3, #12
 80099e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099ea:	61ba      	str	r2, [r7, #24]
 80099ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ee:	6979      	ldr	r1, [r7, #20]
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	613b      	str	r3, [r7, #16]
   return(result);
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1e5      	bne.n	80099ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009a0c:	bf00      	nop
 8009a0e:	3754      	adds	r7, #84	@ 0x54
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f7ff fee4 	bl	8009800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b21      	cmp	r3, #33	@ 0x21
 8009a52:	d13e      	bne.n	8009ad2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a5c:	d114      	bne.n	8009a88 <UART_Transmit_IT+0x48>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d110      	bne.n	8009a88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a1b      	ldr	r3, [r3, #32]
 8009a80:	1c9a      	adds	r2, r3, #2
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	621a      	str	r2, [r3, #32]
 8009a86:	e008      	b.n	8009a9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a1b      	ldr	r3, [r3, #32]
 8009a8c:	1c59      	adds	r1, r3, #1
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	6211      	str	r1, [r2, #32]
 8009a92:	781a      	ldrb	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10f      	bne.n	8009ace <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009abc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009acc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e000      	b.n	8009ad4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ad2:	2302      	movs	r3, #2
  }
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009af6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff fe73 	bl	80097ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08c      	sub	sp, #48	@ 0x30
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b22      	cmp	r3, #34	@ 0x22
 8009b22:	f040 80ae 	bne.w	8009c82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b2e:	d117      	bne.n	8009b60 <UART_Receive_IT+0x50>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d113      	bne.n	8009b60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b40:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b58:	1c9a      	adds	r2, r3, #2
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b5e:	e026      	b.n	8009bae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b72:	d007      	beq.n	8009b84 <UART_Receive_IT+0x74>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <UART_Receive_IT+0x82>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d106      	bne.n	8009b92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	e008      	b.n	8009ba4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d15d      	bne.n	8009c7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0220 	bic.w	r2, r2, #32
 8009bd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68da      	ldr	r2, [r3, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009be0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	695a      	ldr	r2, [r3, #20]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f022 0201 	bic.w	r2, r2, #1
 8009bf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d135      	bne.n	8009c74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	330c      	adds	r3, #12
 8009c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f023 0310 	bic.w	r3, r3, #16
 8009c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	330c      	adds	r3, #12
 8009c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c2e:	623a      	str	r2, [r7, #32]
 8009c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	69f9      	ldr	r1, [r7, #28]
 8009c34:	6a3a      	ldr	r2, [r7, #32]
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e5      	bne.n	8009c0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d10a      	bne.n	8009c66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c50:	2300      	movs	r3, #0
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff fdd1 	bl	8009814 <HAL_UARTEx_RxEventCallback>
 8009c72:	e002      	b.n	8009c7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7f7 fde3 	bl	8001840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e002      	b.n	8009c84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e000      	b.n	8009c84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009c82:	2302      	movs	r3, #2
  }
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3730      	adds	r7, #48	@ 0x30
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c90:	b0c0      	sub	sp, #256	@ 0x100
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca8:	68d9      	ldr	r1, [r3, #12]
 8009caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	ea40 0301 	orr.w	r3, r0, r1
 8009cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cba:	689a      	ldr	r2, [r3, #8]
 8009cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009ce4:	f021 010c 	bic.w	r1, r1, #12
 8009ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cf2:	430b      	orrs	r3, r1
 8009cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d06:	6999      	ldr	r1, [r3, #24]
 8009d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	ea40 0301 	orr.w	r3, r0, r1
 8009d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8009f58 <UART_SetConfig+0x2cc>)
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d005      	beq.n	8009d2c <UART_SetConfig+0xa0>
 8009d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	4b8d      	ldr	r3, [pc, #564]	@ (8009f5c <UART_SetConfig+0x2d0>)
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d104      	bne.n	8009d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d2c:	f7fd fcda 	bl	80076e4 <HAL_RCC_GetPCLK2Freq>
 8009d30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009d34:	e003      	b.n	8009d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d36:	f7fd fcc1 	bl	80076bc <HAL_RCC_GetPCLK1Freq>
 8009d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d48:	f040 810c 	bne.w	8009f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009d5e:	4622      	mov	r2, r4
 8009d60:	462b      	mov	r3, r5
 8009d62:	1891      	adds	r1, r2, r2
 8009d64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009d66:	415b      	adcs	r3, r3
 8009d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009d6e:	4621      	mov	r1, r4
 8009d70:	eb12 0801 	adds.w	r8, r2, r1
 8009d74:	4629      	mov	r1, r5
 8009d76:	eb43 0901 	adc.w	r9, r3, r1
 8009d7a:	f04f 0200 	mov.w	r2, #0
 8009d7e:	f04f 0300 	mov.w	r3, #0
 8009d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d8e:	4690      	mov	r8, r2
 8009d90:	4699      	mov	r9, r3
 8009d92:	4623      	mov	r3, r4
 8009d94:	eb18 0303 	adds.w	r3, r8, r3
 8009d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d9c:	462b      	mov	r3, r5
 8009d9e:	eb49 0303 	adc.w	r3, r9, r3
 8009da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009db2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009dba:	460b      	mov	r3, r1
 8009dbc:	18db      	adds	r3, r3, r3
 8009dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	eb42 0303 	adc.w	r3, r2, r3
 8009dc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009dd0:	f7f6 ff5a 	bl	8000c88 <__aeabi_uldivmod>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4b61      	ldr	r3, [pc, #388]	@ (8009f60 <UART_SetConfig+0x2d4>)
 8009dda:	fba3 2302 	umull	r2, r3, r3, r2
 8009dde:	095b      	lsrs	r3, r3, #5
 8009de0:	011c      	lsls	r4, r3, #4
 8009de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009dec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009df4:	4642      	mov	r2, r8
 8009df6:	464b      	mov	r3, r9
 8009df8:	1891      	adds	r1, r2, r2
 8009dfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009dfc:	415b      	adcs	r3, r3
 8009dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009e04:	4641      	mov	r1, r8
 8009e06:	eb12 0a01 	adds.w	sl, r2, r1
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	f04f 0300 	mov.w	r3, #0
 8009e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e24:	4692      	mov	sl, r2
 8009e26:	469b      	mov	fp, r3
 8009e28:	4643      	mov	r3, r8
 8009e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8009e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e32:	464b      	mov	r3, r9
 8009e34:	eb4b 0303 	adc.w	r3, fp, r3
 8009e38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009e50:	460b      	mov	r3, r1
 8009e52:	18db      	adds	r3, r3, r3
 8009e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e56:	4613      	mov	r3, r2
 8009e58:	eb42 0303 	adc.w	r3, r2, r3
 8009e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009e66:	f7f6 ff0f 	bl	8000c88 <__aeabi_uldivmod>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4611      	mov	r1, r2
 8009e70:	4b3b      	ldr	r3, [pc, #236]	@ (8009f60 <UART_SetConfig+0x2d4>)
 8009e72:	fba3 2301 	umull	r2, r3, r3, r1
 8009e76:	095b      	lsrs	r3, r3, #5
 8009e78:	2264      	movs	r2, #100	@ 0x64
 8009e7a:	fb02 f303 	mul.w	r3, r2, r3
 8009e7e:	1acb      	subs	r3, r1, r3
 8009e80:	00db      	lsls	r3, r3, #3
 8009e82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009e86:	4b36      	ldr	r3, [pc, #216]	@ (8009f60 <UART_SetConfig+0x2d4>)
 8009e88:	fba3 2302 	umull	r2, r3, r3, r2
 8009e8c:	095b      	lsrs	r3, r3, #5
 8009e8e:	005b      	lsls	r3, r3, #1
 8009e90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e94:	441c      	add	r4, r3
 8009e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	464b      	mov	r3, r9
 8009eac:	1891      	adds	r1, r2, r2
 8009eae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009eb0:	415b      	adcs	r3, r3
 8009eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009eb8:	4641      	mov	r1, r8
 8009eba:	1851      	adds	r1, r2, r1
 8009ebc:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	414b      	adcs	r3, r1
 8009ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	f04f 0300 	mov.w	r3, #0
 8009ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ed0:	4659      	mov	r1, fp
 8009ed2:	00cb      	lsls	r3, r1, #3
 8009ed4:	4651      	mov	r1, sl
 8009ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eda:	4651      	mov	r1, sl
 8009edc:	00ca      	lsls	r2, r1, #3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	189b      	adds	r3, r3, r2
 8009ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009eec:	464b      	mov	r3, r9
 8009eee:	460a      	mov	r2, r1
 8009ef0:	eb42 0303 	adc.w	r3, r2, r3
 8009ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	18db      	adds	r3, r3, r3
 8009f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f12:	4613      	mov	r3, r2
 8009f14:	eb42 0303 	adc.w	r3, r2, r3
 8009f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009f22:	f7f6 feb1 	bl	8000c88 <__aeabi_uldivmod>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f60 <UART_SetConfig+0x2d4>)
 8009f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f30:	095b      	lsrs	r3, r3, #5
 8009f32:	2164      	movs	r1, #100	@ 0x64
 8009f34:	fb01 f303 	mul.w	r3, r1, r3
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	3332      	adds	r3, #50	@ 0x32
 8009f3e:	4a08      	ldr	r2, [pc, #32]	@ (8009f60 <UART_SetConfig+0x2d4>)
 8009f40:	fba2 2303 	umull	r2, r3, r2, r3
 8009f44:	095b      	lsrs	r3, r3, #5
 8009f46:	f003 0207 	and.w	r2, r3, #7
 8009f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4422      	add	r2, r4
 8009f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f54:	e106      	b.n	800a164 <UART_SetConfig+0x4d8>
 8009f56:	bf00      	nop
 8009f58:	40011000 	.word	0x40011000
 8009f5c:	40011400 	.word	0x40011400
 8009f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009f76:	4642      	mov	r2, r8
 8009f78:	464b      	mov	r3, r9
 8009f7a:	1891      	adds	r1, r2, r2
 8009f7c:	6239      	str	r1, [r7, #32]
 8009f7e:	415b      	adcs	r3, r3
 8009f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f86:	4641      	mov	r1, r8
 8009f88:	1854      	adds	r4, r2, r1
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	eb43 0501 	adc.w	r5, r3, r1
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	00eb      	lsls	r3, r5, #3
 8009f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f9e:	00e2      	lsls	r2, r4, #3
 8009fa0:	4614      	mov	r4, r2
 8009fa2:	461d      	mov	r5, r3
 8009fa4:	4643      	mov	r3, r8
 8009fa6:	18e3      	adds	r3, r4, r3
 8009fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009fac:	464b      	mov	r3, r9
 8009fae:	eb45 0303 	adc.w	r3, r5, r3
 8009fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009fc6:	f04f 0200 	mov.w	r2, #0
 8009fca:	f04f 0300 	mov.w	r3, #0
 8009fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	008b      	lsls	r3, r1, #2
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fdc:	4621      	mov	r1, r4
 8009fde:	008a      	lsls	r2, r1, #2
 8009fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009fe4:	f7f6 fe50 	bl	8000c88 <__aeabi_uldivmod>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4b60      	ldr	r3, [pc, #384]	@ (800a170 <UART_SetConfig+0x4e4>)
 8009fee:	fba3 2302 	umull	r2, r3, r3, r2
 8009ff2:	095b      	lsrs	r3, r3, #5
 8009ff4:	011c      	lsls	r4, r3, #4
 8009ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a000:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a008:	4642      	mov	r2, r8
 800a00a:	464b      	mov	r3, r9
 800a00c:	1891      	adds	r1, r2, r2
 800a00e:	61b9      	str	r1, [r7, #24]
 800a010:	415b      	adcs	r3, r3
 800a012:	61fb      	str	r3, [r7, #28]
 800a014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a018:	4641      	mov	r1, r8
 800a01a:	1851      	adds	r1, r2, r1
 800a01c:	6139      	str	r1, [r7, #16]
 800a01e:	4649      	mov	r1, r9
 800a020:	414b      	adcs	r3, r1
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	f04f 0200 	mov.w	r2, #0
 800a028:	f04f 0300 	mov.w	r3, #0
 800a02c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a030:	4659      	mov	r1, fp
 800a032:	00cb      	lsls	r3, r1, #3
 800a034:	4651      	mov	r1, sl
 800a036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a03a:	4651      	mov	r1, sl
 800a03c:	00ca      	lsls	r2, r1, #3
 800a03e:	4610      	mov	r0, r2
 800a040:	4619      	mov	r1, r3
 800a042:	4603      	mov	r3, r0
 800a044:	4642      	mov	r2, r8
 800a046:	189b      	adds	r3, r3, r2
 800a048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a04c:	464b      	mov	r3, r9
 800a04e:	460a      	mov	r2, r1
 800a050:	eb42 0303 	adc.w	r3, r2, r3
 800a054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a062:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a064:	f04f 0200 	mov.w	r2, #0
 800a068:	f04f 0300 	mov.w	r3, #0
 800a06c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a070:	4649      	mov	r1, r9
 800a072:	008b      	lsls	r3, r1, #2
 800a074:	4641      	mov	r1, r8
 800a076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a07a:	4641      	mov	r1, r8
 800a07c:	008a      	lsls	r2, r1, #2
 800a07e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a082:	f7f6 fe01 	bl	8000c88 <__aeabi_uldivmod>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	4611      	mov	r1, r2
 800a08c:	4b38      	ldr	r3, [pc, #224]	@ (800a170 <UART_SetConfig+0x4e4>)
 800a08e:	fba3 2301 	umull	r2, r3, r3, r1
 800a092:	095b      	lsrs	r3, r3, #5
 800a094:	2264      	movs	r2, #100	@ 0x64
 800a096:	fb02 f303 	mul.w	r3, r2, r3
 800a09a:	1acb      	subs	r3, r1, r3
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	3332      	adds	r3, #50	@ 0x32
 800a0a0:	4a33      	ldr	r2, [pc, #204]	@ (800a170 <UART_SetConfig+0x4e4>)
 800a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a6:	095b      	lsrs	r3, r3, #5
 800a0a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a0ac:	441c      	add	r4, r3
 800a0ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0b6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a0b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a0bc:	4642      	mov	r2, r8
 800a0be:	464b      	mov	r3, r9
 800a0c0:	1891      	adds	r1, r2, r2
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	415b      	adcs	r3, r3
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0cc:	4641      	mov	r1, r8
 800a0ce:	1851      	adds	r1, r2, r1
 800a0d0:	6039      	str	r1, [r7, #0]
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	414b      	adcs	r3, r1
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	f04f 0200 	mov.w	r2, #0
 800a0dc:	f04f 0300 	mov.w	r3, #0
 800a0e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0e4:	4659      	mov	r1, fp
 800a0e6:	00cb      	lsls	r3, r1, #3
 800a0e8:	4651      	mov	r1, sl
 800a0ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0ee:	4651      	mov	r1, sl
 800a0f0:	00ca      	lsls	r2, r1, #3
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4642      	mov	r2, r8
 800a0fa:	189b      	adds	r3, r3, r2
 800a0fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0fe:	464b      	mov	r3, r9
 800a100:	460a      	mov	r2, r1
 800a102:	eb42 0303 	adc.w	r3, r2, r3
 800a106:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	663b      	str	r3, [r7, #96]	@ 0x60
 800a112:	667a      	str	r2, [r7, #100]	@ 0x64
 800a114:	f04f 0200 	mov.w	r2, #0
 800a118:	f04f 0300 	mov.w	r3, #0
 800a11c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a120:	4649      	mov	r1, r9
 800a122:	008b      	lsls	r3, r1, #2
 800a124:	4641      	mov	r1, r8
 800a126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a12a:	4641      	mov	r1, r8
 800a12c:	008a      	lsls	r2, r1, #2
 800a12e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a132:	f7f6 fda9 	bl	8000c88 <__aeabi_uldivmod>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	4b0d      	ldr	r3, [pc, #52]	@ (800a170 <UART_SetConfig+0x4e4>)
 800a13c:	fba3 1302 	umull	r1, r3, r3, r2
 800a140:	095b      	lsrs	r3, r3, #5
 800a142:	2164      	movs	r1, #100	@ 0x64
 800a144:	fb01 f303 	mul.w	r3, r1, r3
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	3332      	adds	r3, #50	@ 0x32
 800a14e:	4a08      	ldr	r2, [pc, #32]	@ (800a170 <UART_SetConfig+0x4e4>)
 800a150:	fba2 2303 	umull	r2, r3, r2, r3
 800a154:	095b      	lsrs	r3, r3, #5
 800a156:	f003 020f 	and.w	r2, r3, #15
 800a15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4422      	add	r2, r4
 800a162:	609a      	str	r2, [r3, #8]
}
 800a164:	bf00      	nop
 800a166:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a16a:	46bd      	mov	sp, r7
 800a16c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a170:	51eb851f 	.word	0x51eb851f

0800a174 <arm_rfft_fast_init_f32>:
 800a174:	084b      	lsrs	r3, r1, #1
 800a176:	2b80      	cmp	r3, #128	@ 0x80
 800a178:	b410      	push	{r4}
 800a17a:	8201      	strh	r1, [r0, #16]
 800a17c:	8003      	strh	r3, [r0, #0]
 800a17e:	d047      	beq.n	800a210 <arm_rfft_fast_init_f32+0x9c>
 800a180:	d917      	bls.n	800a1b2 <arm_rfft_fast_init_f32+0x3e>
 800a182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a186:	d03d      	beq.n	800a204 <arm_rfft_fast_init_f32+0x90>
 800a188:	d929      	bls.n	800a1de <arm_rfft_fast_init_f32+0x6a>
 800a18a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a18e:	d020      	beq.n	800a1d2 <arm_rfft_fast_init_f32+0x5e>
 800a190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a194:	d113      	bne.n	800a1be <arm_rfft_fast_init_f32+0x4a>
 800a196:	4921      	ldr	r1, [pc, #132]	@ (800a21c <arm_rfft_fast_init_f32+0xa8>)
 800a198:	4a21      	ldr	r2, [pc, #132]	@ (800a220 <arm_rfft_fast_init_f32+0xac>)
 800a19a:	4b22      	ldr	r3, [pc, #136]	@ (800a224 <arm_rfft_fast_init_f32+0xb0>)
 800a19c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800a1a0:	8184      	strh	r4, [r0, #12]
 800a1a2:	6081      	str	r1, [r0, #8]
 800a1a4:	6042      	str	r2, [r0, #4]
 800a1a6:	6143      	str	r3, [r0, #20]
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	b240      	sxtb	r0, r0
 800a1ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d01c      	beq.n	800a1f0 <arm_rfft_fast_init_f32+0x7c>
 800a1b6:	2b40      	cmp	r3, #64	@ 0x40
 800a1b8:	d006      	beq.n	800a1c8 <arm_rfft_fast_init_f32+0x54>
 800a1ba:	2b10      	cmp	r3, #16
 800a1bc:	d01d      	beq.n	800a1fa <arm_rfft_fast_init_f32+0x86>
 800a1be:	20ff      	movs	r0, #255	@ 0xff
 800a1c0:	b240      	sxtb	r0, r0
 800a1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	2438      	movs	r4, #56	@ 0x38
 800a1ca:	4917      	ldr	r1, [pc, #92]	@ (800a228 <arm_rfft_fast_init_f32+0xb4>)
 800a1cc:	4a17      	ldr	r2, [pc, #92]	@ (800a22c <arm_rfft_fast_init_f32+0xb8>)
 800a1ce:	4b18      	ldr	r3, [pc, #96]	@ (800a230 <arm_rfft_fast_init_f32+0xbc>)
 800a1d0:	e7e6      	b.n	800a1a0 <arm_rfft_fast_init_f32+0x2c>
 800a1d2:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800a1d6:	4917      	ldr	r1, [pc, #92]	@ (800a234 <arm_rfft_fast_init_f32+0xc0>)
 800a1d8:	4a17      	ldr	r2, [pc, #92]	@ (800a238 <arm_rfft_fast_init_f32+0xc4>)
 800a1da:	4b18      	ldr	r3, [pc, #96]	@ (800a23c <arm_rfft_fast_init_f32+0xc8>)
 800a1dc:	e7e0      	b.n	800a1a0 <arm_rfft_fast_init_f32+0x2c>
 800a1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1e2:	d1ec      	bne.n	800a1be <arm_rfft_fast_init_f32+0x4a>
 800a1e4:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800a1e8:	4915      	ldr	r1, [pc, #84]	@ (800a240 <arm_rfft_fast_init_f32+0xcc>)
 800a1ea:	4a16      	ldr	r2, [pc, #88]	@ (800a244 <arm_rfft_fast_init_f32+0xd0>)
 800a1ec:	4b16      	ldr	r3, [pc, #88]	@ (800a248 <arm_rfft_fast_init_f32+0xd4>)
 800a1ee:	e7d7      	b.n	800a1a0 <arm_rfft_fast_init_f32+0x2c>
 800a1f0:	2430      	movs	r4, #48	@ 0x30
 800a1f2:	4916      	ldr	r1, [pc, #88]	@ (800a24c <arm_rfft_fast_init_f32+0xd8>)
 800a1f4:	4a16      	ldr	r2, [pc, #88]	@ (800a250 <arm_rfft_fast_init_f32+0xdc>)
 800a1f6:	4b17      	ldr	r3, [pc, #92]	@ (800a254 <arm_rfft_fast_init_f32+0xe0>)
 800a1f8:	e7d2      	b.n	800a1a0 <arm_rfft_fast_init_f32+0x2c>
 800a1fa:	2414      	movs	r4, #20
 800a1fc:	4916      	ldr	r1, [pc, #88]	@ (800a258 <arm_rfft_fast_init_f32+0xe4>)
 800a1fe:	4a17      	ldr	r2, [pc, #92]	@ (800a25c <arm_rfft_fast_init_f32+0xe8>)
 800a200:	4b17      	ldr	r3, [pc, #92]	@ (800a260 <arm_rfft_fast_init_f32+0xec>)
 800a202:	e7cd      	b.n	800a1a0 <arm_rfft_fast_init_f32+0x2c>
 800a204:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800a208:	4916      	ldr	r1, [pc, #88]	@ (800a264 <arm_rfft_fast_init_f32+0xf0>)
 800a20a:	4a17      	ldr	r2, [pc, #92]	@ (800a268 <arm_rfft_fast_init_f32+0xf4>)
 800a20c:	4b17      	ldr	r3, [pc, #92]	@ (800a26c <arm_rfft_fast_init_f32+0xf8>)
 800a20e:	e7c7      	b.n	800a1a0 <arm_rfft_fast_init_f32+0x2c>
 800a210:	24d0      	movs	r4, #208	@ 0xd0
 800a212:	4917      	ldr	r1, [pc, #92]	@ (800a270 <arm_rfft_fast_init_f32+0xfc>)
 800a214:	4a17      	ldr	r2, [pc, #92]	@ (800a274 <arm_rfft_fast_init_f32+0x100>)
 800a216:	4b18      	ldr	r3, [pc, #96]	@ (800a278 <arm_rfft_fast_init_f32+0x104>)
 800a218:	e7c2      	b.n	800a1a0 <arm_rfft_fast_init_f32+0x2c>
 800a21a:	bf00      	nop
 800a21c:	0801c7a4 	.word	0x0801c7a4
 800a220:	0800d99c 	.word	0x0800d99c
 800a224:	08013b0c 	.word	0x08013b0c
 800a228:	08011a9c 	.word	0x08011a9c
 800a22c:	0801e564 	.word	0x0801e564
 800a230:	08020a54 	.word	0x08020a54
 800a234:	0801a48c 	.word	0x0801a48c
 800a238:	0801838c 	.word	0x0801838c
 800a23c:	08011b0c 	.word	0x08011b0c
 800a240:	080206e4 	.word	0x080206e4
 800a244:	08017b0c 	.word	0x08017b0c
 800a248:	0801e764 	.word	0x0801e764
 800a24c:	0801b344 	.word	0x0801b344
 800a250:	0801a38c 	.word	0x0801a38c
 800a254:	0801199c 	.word	0x0801199c
 800a258:	0801b29c 	.word	0x0801b29c
 800a25c:	0801830c 	.word	0x0801830c
 800a260:	0801b2c4 	.word	0x0801b2c4
 800a264:	0801ef64 	.word	0x0801ef64
 800a268:	0801b7a4 	.word	0x0801b7a4
 800a26c:	0801f2e4 	.word	0x0801f2e4
 800a270:	08020c54 	.word	0x08020c54
 800a274:	0801b3a4 	.word	0x0801b3a4
 800a278:	080202e4 	.word	0x080202e4

0800a27c <__cvt>:
 800a27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	ec57 6b10 	vmov	r6, r7, d0
 800a284:	2f00      	cmp	r7, #0
 800a286:	460c      	mov	r4, r1
 800a288:	4619      	mov	r1, r3
 800a28a:	463b      	mov	r3, r7
 800a28c:	bfbb      	ittet	lt
 800a28e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a292:	461f      	movlt	r7, r3
 800a294:	2300      	movge	r3, #0
 800a296:	232d      	movlt	r3, #45	@ 0x2d
 800a298:	700b      	strb	r3, [r1, #0]
 800a29a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a29c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a2a0:	4691      	mov	r9, r2
 800a2a2:	f023 0820 	bic.w	r8, r3, #32
 800a2a6:	bfbc      	itt	lt
 800a2a8:	4632      	movlt	r2, r6
 800a2aa:	4616      	movlt	r6, r2
 800a2ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2b0:	d005      	beq.n	800a2be <__cvt+0x42>
 800a2b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a2b6:	d100      	bne.n	800a2ba <__cvt+0x3e>
 800a2b8:	3401      	adds	r4, #1
 800a2ba:	2102      	movs	r1, #2
 800a2bc:	e000      	b.n	800a2c0 <__cvt+0x44>
 800a2be:	2103      	movs	r1, #3
 800a2c0:	ab03      	add	r3, sp, #12
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	ab02      	add	r3, sp, #8
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	ec47 6b10 	vmov	d0, r6, r7
 800a2cc:	4653      	mov	r3, sl
 800a2ce:	4622      	mov	r2, r4
 800a2d0:	f000 fe6a 	bl	800afa8 <_dtoa_r>
 800a2d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a2d8:	4605      	mov	r5, r0
 800a2da:	d119      	bne.n	800a310 <__cvt+0x94>
 800a2dc:	f019 0f01 	tst.w	r9, #1
 800a2e0:	d00e      	beq.n	800a300 <__cvt+0x84>
 800a2e2:	eb00 0904 	add.w	r9, r0, r4
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	f7f6 fc0b 	bl	8000b08 <__aeabi_dcmpeq>
 800a2f2:	b108      	cbz	r0, 800a2f8 <__cvt+0x7c>
 800a2f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2f8:	2230      	movs	r2, #48	@ 0x30
 800a2fa:	9b03      	ldr	r3, [sp, #12]
 800a2fc:	454b      	cmp	r3, r9
 800a2fe:	d31e      	bcc.n	800a33e <__cvt+0xc2>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a304:	1b5b      	subs	r3, r3, r5
 800a306:	4628      	mov	r0, r5
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	b004      	add	sp, #16
 800a30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a310:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a314:	eb00 0904 	add.w	r9, r0, r4
 800a318:	d1e5      	bne.n	800a2e6 <__cvt+0x6a>
 800a31a:	7803      	ldrb	r3, [r0, #0]
 800a31c:	2b30      	cmp	r3, #48	@ 0x30
 800a31e:	d10a      	bne.n	800a336 <__cvt+0xba>
 800a320:	2200      	movs	r2, #0
 800a322:	2300      	movs	r3, #0
 800a324:	4630      	mov	r0, r6
 800a326:	4639      	mov	r1, r7
 800a328:	f7f6 fbee 	bl	8000b08 <__aeabi_dcmpeq>
 800a32c:	b918      	cbnz	r0, 800a336 <__cvt+0xba>
 800a32e:	f1c4 0401 	rsb	r4, r4, #1
 800a332:	f8ca 4000 	str.w	r4, [sl]
 800a336:	f8da 3000 	ldr.w	r3, [sl]
 800a33a:	4499      	add	r9, r3
 800a33c:	e7d3      	b.n	800a2e6 <__cvt+0x6a>
 800a33e:	1c59      	adds	r1, r3, #1
 800a340:	9103      	str	r1, [sp, #12]
 800a342:	701a      	strb	r2, [r3, #0]
 800a344:	e7d9      	b.n	800a2fa <__cvt+0x7e>

0800a346 <__exponent>:
 800a346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a348:	2900      	cmp	r1, #0
 800a34a:	bfba      	itte	lt
 800a34c:	4249      	neglt	r1, r1
 800a34e:	232d      	movlt	r3, #45	@ 0x2d
 800a350:	232b      	movge	r3, #43	@ 0x2b
 800a352:	2909      	cmp	r1, #9
 800a354:	7002      	strb	r2, [r0, #0]
 800a356:	7043      	strb	r3, [r0, #1]
 800a358:	dd29      	ble.n	800a3ae <__exponent+0x68>
 800a35a:	f10d 0307 	add.w	r3, sp, #7
 800a35e:	461d      	mov	r5, r3
 800a360:	270a      	movs	r7, #10
 800a362:	461a      	mov	r2, r3
 800a364:	fbb1 f6f7 	udiv	r6, r1, r7
 800a368:	fb07 1416 	mls	r4, r7, r6, r1
 800a36c:	3430      	adds	r4, #48	@ 0x30
 800a36e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a372:	460c      	mov	r4, r1
 800a374:	2c63      	cmp	r4, #99	@ 0x63
 800a376:	f103 33ff 	add.w	r3, r3, #4294967295
 800a37a:	4631      	mov	r1, r6
 800a37c:	dcf1      	bgt.n	800a362 <__exponent+0x1c>
 800a37e:	3130      	adds	r1, #48	@ 0x30
 800a380:	1e94      	subs	r4, r2, #2
 800a382:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a386:	1c41      	adds	r1, r0, #1
 800a388:	4623      	mov	r3, r4
 800a38a:	42ab      	cmp	r3, r5
 800a38c:	d30a      	bcc.n	800a3a4 <__exponent+0x5e>
 800a38e:	f10d 0309 	add.w	r3, sp, #9
 800a392:	1a9b      	subs	r3, r3, r2
 800a394:	42ac      	cmp	r4, r5
 800a396:	bf88      	it	hi
 800a398:	2300      	movhi	r3, #0
 800a39a:	3302      	adds	r3, #2
 800a39c:	4403      	add	r3, r0
 800a39e:	1a18      	subs	r0, r3, r0
 800a3a0:	b003      	add	sp, #12
 800a3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a3ac:	e7ed      	b.n	800a38a <__exponent+0x44>
 800a3ae:	2330      	movs	r3, #48	@ 0x30
 800a3b0:	3130      	adds	r1, #48	@ 0x30
 800a3b2:	7083      	strb	r3, [r0, #2]
 800a3b4:	70c1      	strb	r1, [r0, #3]
 800a3b6:	1d03      	adds	r3, r0, #4
 800a3b8:	e7f1      	b.n	800a39e <__exponent+0x58>
	...

0800a3bc <_printf_float>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	b08d      	sub	sp, #52	@ 0x34
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a3c8:	4616      	mov	r6, r2
 800a3ca:	461f      	mov	r7, r3
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	f000 fceb 	bl	800ada8 <_localeconv_r>
 800a3d2:	6803      	ldr	r3, [r0, #0]
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7f5 ff6a 	bl	80002b0 <strlen>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e4:	9005      	str	r0, [sp, #20]
 800a3e6:	3307      	adds	r3, #7
 800a3e8:	f023 0307 	bic.w	r3, r3, #7
 800a3ec:	f103 0208 	add.w	r2, r3, #8
 800a3f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a3f4:	f8d4 b000 	ldr.w	fp, [r4]
 800a3f8:	f8c8 2000 	str.w	r2, [r8]
 800a3fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a400:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a404:	9307      	str	r3, [sp, #28]
 800a406:	f8cd 8018 	str.w	r8, [sp, #24]
 800a40a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a40e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a412:	4b9c      	ldr	r3, [pc, #624]	@ (800a684 <_printf_float+0x2c8>)
 800a414:	f04f 32ff 	mov.w	r2, #4294967295
 800a418:	f7f6 fba8 	bl	8000b6c <__aeabi_dcmpun>
 800a41c:	bb70      	cbnz	r0, 800a47c <_printf_float+0xc0>
 800a41e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a422:	4b98      	ldr	r3, [pc, #608]	@ (800a684 <_printf_float+0x2c8>)
 800a424:	f04f 32ff 	mov.w	r2, #4294967295
 800a428:	f7f6 fb82 	bl	8000b30 <__aeabi_dcmple>
 800a42c:	bb30      	cbnz	r0, 800a47c <_printf_float+0xc0>
 800a42e:	2200      	movs	r2, #0
 800a430:	2300      	movs	r3, #0
 800a432:	4640      	mov	r0, r8
 800a434:	4649      	mov	r1, r9
 800a436:	f7f6 fb71 	bl	8000b1c <__aeabi_dcmplt>
 800a43a:	b110      	cbz	r0, 800a442 <_printf_float+0x86>
 800a43c:	232d      	movs	r3, #45	@ 0x2d
 800a43e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a442:	4a91      	ldr	r2, [pc, #580]	@ (800a688 <_printf_float+0x2cc>)
 800a444:	4b91      	ldr	r3, [pc, #580]	@ (800a68c <_printf_float+0x2d0>)
 800a446:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a44a:	bf94      	ite	ls
 800a44c:	4690      	movls	r8, r2
 800a44e:	4698      	movhi	r8, r3
 800a450:	2303      	movs	r3, #3
 800a452:	6123      	str	r3, [r4, #16]
 800a454:	f02b 0304 	bic.w	r3, fp, #4
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	f04f 0900 	mov.w	r9, #0
 800a45e:	9700      	str	r7, [sp, #0]
 800a460:	4633      	mov	r3, r6
 800a462:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a464:	4621      	mov	r1, r4
 800a466:	4628      	mov	r0, r5
 800a468:	f000 f9d2 	bl	800a810 <_printf_common>
 800a46c:	3001      	adds	r0, #1
 800a46e:	f040 808d 	bne.w	800a58c <_printf_float+0x1d0>
 800a472:	f04f 30ff 	mov.w	r0, #4294967295
 800a476:	b00d      	add	sp, #52	@ 0x34
 800a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47c:	4642      	mov	r2, r8
 800a47e:	464b      	mov	r3, r9
 800a480:	4640      	mov	r0, r8
 800a482:	4649      	mov	r1, r9
 800a484:	f7f6 fb72 	bl	8000b6c <__aeabi_dcmpun>
 800a488:	b140      	cbz	r0, 800a49c <_printf_float+0xe0>
 800a48a:	464b      	mov	r3, r9
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfbc      	itt	lt
 800a490:	232d      	movlt	r3, #45	@ 0x2d
 800a492:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a496:	4a7e      	ldr	r2, [pc, #504]	@ (800a690 <_printf_float+0x2d4>)
 800a498:	4b7e      	ldr	r3, [pc, #504]	@ (800a694 <_printf_float+0x2d8>)
 800a49a:	e7d4      	b.n	800a446 <_printf_float+0x8a>
 800a49c:	6863      	ldr	r3, [r4, #4]
 800a49e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a4a2:	9206      	str	r2, [sp, #24]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	d13b      	bne.n	800a520 <_printf_float+0x164>
 800a4a8:	2306      	movs	r3, #6
 800a4aa:	6063      	str	r3, [r4, #4]
 800a4ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	6022      	str	r2, [r4, #0]
 800a4b4:	9303      	str	r3, [sp, #12]
 800a4b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a4bc:	ab09      	add	r3, sp, #36	@ 0x24
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	6861      	ldr	r1, [r4, #4]
 800a4c2:	ec49 8b10 	vmov	d0, r8, r9
 800a4c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f7ff fed6 	bl	800a27c <__cvt>
 800a4d0:	9b06      	ldr	r3, [sp, #24]
 800a4d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4d4:	2b47      	cmp	r3, #71	@ 0x47
 800a4d6:	4680      	mov	r8, r0
 800a4d8:	d129      	bne.n	800a52e <_printf_float+0x172>
 800a4da:	1cc8      	adds	r0, r1, #3
 800a4dc:	db02      	blt.n	800a4e4 <_printf_float+0x128>
 800a4de:	6863      	ldr	r3, [r4, #4]
 800a4e0:	4299      	cmp	r1, r3
 800a4e2:	dd41      	ble.n	800a568 <_printf_float+0x1ac>
 800a4e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a4e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a4ec:	3901      	subs	r1, #1
 800a4ee:	4652      	mov	r2, sl
 800a4f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4f6:	f7ff ff26 	bl	800a346 <__exponent>
 800a4fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4fc:	1813      	adds	r3, r2, r0
 800a4fe:	2a01      	cmp	r2, #1
 800a500:	4681      	mov	r9, r0
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	dc02      	bgt.n	800a50c <_printf_float+0x150>
 800a506:	6822      	ldr	r2, [r4, #0]
 800a508:	07d2      	lsls	r2, r2, #31
 800a50a:	d501      	bpl.n	800a510 <_printf_float+0x154>
 800a50c:	3301      	adds	r3, #1
 800a50e:	6123      	str	r3, [r4, #16]
 800a510:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0a2      	beq.n	800a45e <_printf_float+0xa2>
 800a518:	232d      	movs	r3, #45	@ 0x2d
 800a51a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a51e:	e79e      	b.n	800a45e <_printf_float+0xa2>
 800a520:	9a06      	ldr	r2, [sp, #24]
 800a522:	2a47      	cmp	r2, #71	@ 0x47
 800a524:	d1c2      	bne.n	800a4ac <_printf_float+0xf0>
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1c0      	bne.n	800a4ac <_printf_float+0xf0>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e7bd      	b.n	800a4aa <_printf_float+0xee>
 800a52e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a532:	d9db      	bls.n	800a4ec <_printf_float+0x130>
 800a534:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a538:	d118      	bne.n	800a56c <_printf_float+0x1b0>
 800a53a:	2900      	cmp	r1, #0
 800a53c:	6863      	ldr	r3, [r4, #4]
 800a53e:	dd0b      	ble.n	800a558 <_printf_float+0x19c>
 800a540:	6121      	str	r1, [r4, #16]
 800a542:	b913      	cbnz	r3, 800a54a <_printf_float+0x18e>
 800a544:	6822      	ldr	r2, [r4, #0]
 800a546:	07d0      	lsls	r0, r2, #31
 800a548:	d502      	bpl.n	800a550 <_printf_float+0x194>
 800a54a:	3301      	adds	r3, #1
 800a54c:	440b      	add	r3, r1
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a552:	f04f 0900 	mov.w	r9, #0
 800a556:	e7db      	b.n	800a510 <_printf_float+0x154>
 800a558:	b913      	cbnz	r3, 800a560 <_printf_float+0x1a4>
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	07d2      	lsls	r2, r2, #31
 800a55e:	d501      	bpl.n	800a564 <_printf_float+0x1a8>
 800a560:	3302      	adds	r3, #2
 800a562:	e7f4      	b.n	800a54e <_printf_float+0x192>
 800a564:	2301      	movs	r3, #1
 800a566:	e7f2      	b.n	800a54e <_printf_float+0x192>
 800a568:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56e:	4299      	cmp	r1, r3
 800a570:	db05      	blt.n	800a57e <_printf_float+0x1c2>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	6121      	str	r1, [r4, #16]
 800a576:	07d8      	lsls	r0, r3, #31
 800a578:	d5ea      	bpl.n	800a550 <_printf_float+0x194>
 800a57a:	1c4b      	adds	r3, r1, #1
 800a57c:	e7e7      	b.n	800a54e <_printf_float+0x192>
 800a57e:	2900      	cmp	r1, #0
 800a580:	bfd4      	ite	le
 800a582:	f1c1 0202 	rsble	r2, r1, #2
 800a586:	2201      	movgt	r2, #1
 800a588:	4413      	add	r3, r2
 800a58a:	e7e0      	b.n	800a54e <_printf_float+0x192>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	055a      	lsls	r2, r3, #21
 800a590:	d407      	bmi.n	800a5a2 <_printf_float+0x1e6>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	4642      	mov	r2, r8
 800a596:	4631      	mov	r1, r6
 800a598:	4628      	mov	r0, r5
 800a59a:	47b8      	blx	r7
 800a59c:	3001      	adds	r0, #1
 800a59e:	d12b      	bne.n	800a5f8 <_printf_float+0x23c>
 800a5a0:	e767      	b.n	800a472 <_printf_float+0xb6>
 800a5a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5a6:	f240 80dd 	bls.w	800a764 <_printf_float+0x3a8>
 800a5aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f7f6 faa9 	bl	8000b08 <__aeabi_dcmpeq>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d033      	beq.n	800a622 <_printf_float+0x266>
 800a5ba:	4a37      	ldr	r2, [pc, #220]	@ (800a698 <_printf_float+0x2dc>)
 800a5bc:	2301      	movs	r3, #1
 800a5be:	4631      	mov	r1, r6
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	47b8      	blx	r7
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	f43f af54 	beq.w	800a472 <_printf_float+0xb6>
 800a5ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a5ce:	4543      	cmp	r3, r8
 800a5d0:	db02      	blt.n	800a5d8 <_printf_float+0x21c>
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	07d8      	lsls	r0, r3, #31
 800a5d6:	d50f      	bpl.n	800a5f8 <_printf_float+0x23c>
 800a5d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f af45 	beq.w	800a472 <_printf_float+0xb6>
 800a5e8:	f04f 0900 	mov.w	r9, #0
 800a5ec:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5f0:	f104 0a1a 	add.w	sl, r4, #26
 800a5f4:	45c8      	cmp	r8, r9
 800a5f6:	dc09      	bgt.n	800a60c <_printf_float+0x250>
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	079b      	lsls	r3, r3, #30
 800a5fc:	f100 8103 	bmi.w	800a806 <_printf_float+0x44a>
 800a600:	68e0      	ldr	r0, [r4, #12]
 800a602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a604:	4298      	cmp	r0, r3
 800a606:	bfb8      	it	lt
 800a608:	4618      	movlt	r0, r3
 800a60a:	e734      	b.n	800a476 <_printf_float+0xba>
 800a60c:	2301      	movs	r3, #1
 800a60e:	4652      	mov	r2, sl
 800a610:	4631      	mov	r1, r6
 800a612:	4628      	mov	r0, r5
 800a614:	47b8      	blx	r7
 800a616:	3001      	adds	r0, #1
 800a618:	f43f af2b 	beq.w	800a472 <_printf_float+0xb6>
 800a61c:	f109 0901 	add.w	r9, r9, #1
 800a620:	e7e8      	b.n	800a5f4 <_printf_float+0x238>
 800a622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a624:	2b00      	cmp	r3, #0
 800a626:	dc39      	bgt.n	800a69c <_printf_float+0x2e0>
 800a628:	4a1b      	ldr	r2, [pc, #108]	@ (800a698 <_printf_float+0x2dc>)
 800a62a:	2301      	movs	r3, #1
 800a62c:	4631      	mov	r1, r6
 800a62e:	4628      	mov	r0, r5
 800a630:	47b8      	blx	r7
 800a632:	3001      	adds	r0, #1
 800a634:	f43f af1d 	beq.w	800a472 <_printf_float+0xb6>
 800a638:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a63c:	ea59 0303 	orrs.w	r3, r9, r3
 800a640:	d102      	bne.n	800a648 <_printf_float+0x28c>
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	07d9      	lsls	r1, r3, #31
 800a646:	d5d7      	bpl.n	800a5f8 <_printf_float+0x23c>
 800a648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a64c:	4631      	mov	r1, r6
 800a64e:	4628      	mov	r0, r5
 800a650:	47b8      	blx	r7
 800a652:	3001      	adds	r0, #1
 800a654:	f43f af0d 	beq.w	800a472 <_printf_float+0xb6>
 800a658:	f04f 0a00 	mov.w	sl, #0
 800a65c:	f104 0b1a 	add.w	fp, r4, #26
 800a660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a662:	425b      	negs	r3, r3
 800a664:	4553      	cmp	r3, sl
 800a666:	dc01      	bgt.n	800a66c <_printf_float+0x2b0>
 800a668:	464b      	mov	r3, r9
 800a66a:	e793      	b.n	800a594 <_printf_float+0x1d8>
 800a66c:	2301      	movs	r3, #1
 800a66e:	465a      	mov	r2, fp
 800a670:	4631      	mov	r1, r6
 800a672:	4628      	mov	r0, r5
 800a674:	47b8      	blx	r7
 800a676:	3001      	adds	r0, #1
 800a678:	f43f aefb 	beq.w	800a472 <_printf_float+0xb6>
 800a67c:	f10a 0a01 	add.w	sl, sl, #1
 800a680:	e7ee      	b.n	800a660 <_printf_float+0x2a4>
 800a682:	bf00      	nop
 800a684:	7fefffff 	.word	0x7fefffff
 800a688:	08020df4 	.word	0x08020df4
 800a68c:	08020df8 	.word	0x08020df8
 800a690:	08020dfc 	.word	0x08020dfc
 800a694:	08020e00 	.word	0x08020e00
 800a698:	08020e04 	.word	0x08020e04
 800a69c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a69e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6a2:	4553      	cmp	r3, sl
 800a6a4:	bfa8      	it	ge
 800a6a6:	4653      	movge	r3, sl
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	4699      	mov	r9, r3
 800a6ac:	dc36      	bgt.n	800a71c <_printf_float+0x360>
 800a6ae:	f04f 0b00 	mov.w	fp, #0
 800a6b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6b6:	f104 021a 	add.w	r2, r4, #26
 800a6ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6bc:	9306      	str	r3, [sp, #24]
 800a6be:	eba3 0309 	sub.w	r3, r3, r9
 800a6c2:	455b      	cmp	r3, fp
 800a6c4:	dc31      	bgt.n	800a72a <_printf_float+0x36e>
 800a6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c8:	459a      	cmp	sl, r3
 800a6ca:	dc3a      	bgt.n	800a742 <_printf_float+0x386>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	07da      	lsls	r2, r3, #31
 800a6d0:	d437      	bmi.n	800a742 <_printf_float+0x386>
 800a6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6d4:	ebaa 0903 	sub.w	r9, sl, r3
 800a6d8:	9b06      	ldr	r3, [sp, #24]
 800a6da:	ebaa 0303 	sub.w	r3, sl, r3
 800a6de:	4599      	cmp	r9, r3
 800a6e0:	bfa8      	it	ge
 800a6e2:	4699      	movge	r9, r3
 800a6e4:	f1b9 0f00 	cmp.w	r9, #0
 800a6e8:	dc33      	bgt.n	800a752 <_printf_float+0x396>
 800a6ea:	f04f 0800 	mov.w	r8, #0
 800a6ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6f2:	f104 0b1a 	add.w	fp, r4, #26
 800a6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a6fc:	eba3 0309 	sub.w	r3, r3, r9
 800a700:	4543      	cmp	r3, r8
 800a702:	f77f af79 	ble.w	800a5f8 <_printf_float+0x23c>
 800a706:	2301      	movs	r3, #1
 800a708:	465a      	mov	r2, fp
 800a70a:	4631      	mov	r1, r6
 800a70c:	4628      	mov	r0, r5
 800a70e:	47b8      	blx	r7
 800a710:	3001      	adds	r0, #1
 800a712:	f43f aeae 	beq.w	800a472 <_printf_float+0xb6>
 800a716:	f108 0801 	add.w	r8, r8, #1
 800a71a:	e7ec      	b.n	800a6f6 <_printf_float+0x33a>
 800a71c:	4642      	mov	r2, r8
 800a71e:	4631      	mov	r1, r6
 800a720:	4628      	mov	r0, r5
 800a722:	47b8      	blx	r7
 800a724:	3001      	adds	r0, #1
 800a726:	d1c2      	bne.n	800a6ae <_printf_float+0x2f2>
 800a728:	e6a3      	b.n	800a472 <_printf_float+0xb6>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4631      	mov	r1, r6
 800a72e:	4628      	mov	r0, r5
 800a730:	9206      	str	r2, [sp, #24]
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	f43f ae9c 	beq.w	800a472 <_printf_float+0xb6>
 800a73a:	9a06      	ldr	r2, [sp, #24]
 800a73c:	f10b 0b01 	add.w	fp, fp, #1
 800a740:	e7bb      	b.n	800a6ba <_printf_float+0x2fe>
 800a742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a746:	4631      	mov	r1, r6
 800a748:	4628      	mov	r0, r5
 800a74a:	47b8      	blx	r7
 800a74c:	3001      	adds	r0, #1
 800a74e:	d1c0      	bne.n	800a6d2 <_printf_float+0x316>
 800a750:	e68f      	b.n	800a472 <_printf_float+0xb6>
 800a752:	9a06      	ldr	r2, [sp, #24]
 800a754:	464b      	mov	r3, r9
 800a756:	4442      	add	r2, r8
 800a758:	4631      	mov	r1, r6
 800a75a:	4628      	mov	r0, r5
 800a75c:	47b8      	blx	r7
 800a75e:	3001      	adds	r0, #1
 800a760:	d1c3      	bne.n	800a6ea <_printf_float+0x32e>
 800a762:	e686      	b.n	800a472 <_printf_float+0xb6>
 800a764:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a768:	f1ba 0f01 	cmp.w	sl, #1
 800a76c:	dc01      	bgt.n	800a772 <_printf_float+0x3b6>
 800a76e:	07db      	lsls	r3, r3, #31
 800a770:	d536      	bpl.n	800a7e0 <_printf_float+0x424>
 800a772:	2301      	movs	r3, #1
 800a774:	4642      	mov	r2, r8
 800a776:	4631      	mov	r1, r6
 800a778:	4628      	mov	r0, r5
 800a77a:	47b8      	blx	r7
 800a77c:	3001      	adds	r0, #1
 800a77e:	f43f ae78 	beq.w	800a472 <_printf_float+0xb6>
 800a782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a786:	4631      	mov	r1, r6
 800a788:	4628      	mov	r0, r5
 800a78a:	47b8      	blx	r7
 800a78c:	3001      	adds	r0, #1
 800a78e:	f43f ae70 	beq.w	800a472 <_printf_float+0xb6>
 800a792:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a796:	2200      	movs	r2, #0
 800a798:	2300      	movs	r3, #0
 800a79a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a79e:	f7f6 f9b3 	bl	8000b08 <__aeabi_dcmpeq>
 800a7a2:	b9c0      	cbnz	r0, 800a7d6 <_printf_float+0x41a>
 800a7a4:	4653      	mov	r3, sl
 800a7a6:	f108 0201 	add.w	r2, r8, #1
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b8      	blx	r7
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d10c      	bne.n	800a7ce <_printf_float+0x412>
 800a7b4:	e65d      	b.n	800a472 <_printf_float+0xb6>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	465a      	mov	r2, fp
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b8      	blx	r7
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	f43f ae56 	beq.w	800a472 <_printf_float+0xb6>
 800a7c6:	f108 0801 	add.w	r8, r8, #1
 800a7ca:	45d0      	cmp	r8, sl
 800a7cc:	dbf3      	blt.n	800a7b6 <_printf_float+0x3fa>
 800a7ce:	464b      	mov	r3, r9
 800a7d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a7d4:	e6df      	b.n	800a596 <_printf_float+0x1da>
 800a7d6:	f04f 0800 	mov.w	r8, #0
 800a7da:	f104 0b1a 	add.w	fp, r4, #26
 800a7de:	e7f4      	b.n	800a7ca <_printf_float+0x40e>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4642      	mov	r2, r8
 800a7e4:	e7e1      	b.n	800a7aa <_printf_float+0x3ee>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	464a      	mov	r2, r9
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	47b8      	blx	r7
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	f43f ae3e 	beq.w	800a472 <_printf_float+0xb6>
 800a7f6:	f108 0801 	add.w	r8, r8, #1
 800a7fa:	68e3      	ldr	r3, [r4, #12]
 800a7fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7fe:	1a5b      	subs	r3, r3, r1
 800a800:	4543      	cmp	r3, r8
 800a802:	dcf0      	bgt.n	800a7e6 <_printf_float+0x42a>
 800a804:	e6fc      	b.n	800a600 <_printf_float+0x244>
 800a806:	f04f 0800 	mov.w	r8, #0
 800a80a:	f104 0919 	add.w	r9, r4, #25
 800a80e:	e7f4      	b.n	800a7fa <_printf_float+0x43e>

0800a810 <_printf_common>:
 800a810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a814:	4616      	mov	r6, r2
 800a816:	4698      	mov	r8, r3
 800a818:	688a      	ldr	r2, [r1, #8]
 800a81a:	690b      	ldr	r3, [r1, #16]
 800a81c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a820:	4293      	cmp	r3, r2
 800a822:	bfb8      	it	lt
 800a824:	4613      	movlt	r3, r2
 800a826:	6033      	str	r3, [r6, #0]
 800a828:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a82c:	4607      	mov	r7, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	b10a      	cbz	r2, 800a836 <_printf_common+0x26>
 800a832:	3301      	adds	r3, #1
 800a834:	6033      	str	r3, [r6, #0]
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	0699      	lsls	r1, r3, #26
 800a83a:	bf42      	ittt	mi
 800a83c:	6833      	ldrmi	r3, [r6, #0]
 800a83e:	3302      	addmi	r3, #2
 800a840:	6033      	strmi	r3, [r6, #0]
 800a842:	6825      	ldr	r5, [r4, #0]
 800a844:	f015 0506 	ands.w	r5, r5, #6
 800a848:	d106      	bne.n	800a858 <_printf_common+0x48>
 800a84a:	f104 0a19 	add.w	sl, r4, #25
 800a84e:	68e3      	ldr	r3, [r4, #12]
 800a850:	6832      	ldr	r2, [r6, #0]
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	42ab      	cmp	r3, r5
 800a856:	dc26      	bgt.n	800a8a6 <_printf_common+0x96>
 800a858:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a85c:	6822      	ldr	r2, [r4, #0]
 800a85e:	3b00      	subs	r3, #0
 800a860:	bf18      	it	ne
 800a862:	2301      	movne	r3, #1
 800a864:	0692      	lsls	r2, r2, #26
 800a866:	d42b      	bmi.n	800a8c0 <_printf_common+0xb0>
 800a868:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a86c:	4641      	mov	r1, r8
 800a86e:	4638      	mov	r0, r7
 800a870:	47c8      	blx	r9
 800a872:	3001      	adds	r0, #1
 800a874:	d01e      	beq.n	800a8b4 <_printf_common+0xa4>
 800a876:	6823      	ldr	r3, [r4, #0]
 800a878:	6922      	ldr	r2, [r4, #16]
 800a87a:	f003 0306 	and.w	r3, r3, #6
 800a87e:	2b04      	cmp	r3, #4
 800a880:	bf02      	ittt	eq
 800a882:	68e5      	ldreq	r5, [r4, #12]
 800a884:	6833      	ldreq	r3, [r6, #0]
 800a886:	1aed      	subeq	r5, r5, r3
 800a888:	68a3      	ldr	r3, [r4, #8]
 800a88a:	bf0c      	ite	eq
 800a88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a890:	2500      	movne	r5, #0
 800a892:	4293      	cmp	r3, r2
 800a894:	bfc4      	itt	gt
 800a896:	1a9b      	subgt	r3, r3, r2
 800a898:	18ed      	addgt	r5, r5, r3
 800a89a:	2600      	movs	r6, #0
 800a89c:	341a      	adds	r4, #26
 800a89e:	42b5      	cmp	r5, r6
 800a8a0:	d11a      	bne.n	800a8d8 <_printf_common+0xc8>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	e008      	b.n	800a8b8 <_printf_common+0xa8>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	4641      	mov	r1, r8
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	47c8      	blx	r9
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	d103      	bne.n	800a8bc <_printf_common+0xac>
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8bc:	3501      	adds	r5, #1
 800a8be:	e7c6      	b.n	800a84e <_printf_common+0x3e>
 800a8c0:	18e1      	adds	r1, r4, r3
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	2030      	movs	r0, #48	@ 0x30
 800a8c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8ca:	4422      	add	r2, r4
 800a8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8d4:	3302      	adds	r3, #2
 800a8d6:	e7c7      	b.n	800a868 <_printf_common+0x58>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	4622      	mov	r2, r4
 800a8dc:	4641      	mov	r1, r8
 800a8de:	4638      	mov	r0, r7
 800a8e0:	47c8      	blx	r9
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	d0e6      	beq.n	800a8b4 <_printf_common+0xa4>
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	e7d9      	b.n	800a89e <_printf_common+0x8e>
	...

0800a8ec <_printf_i>:
 800a8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f0:	7e0f      	ldrb	r7, [r1, #24]
 800a8f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8f4:	2f78      	cmp	r7, #120	@ 0x78
 800a8f6:	4691      	mov	r9, r2
 800a8f8:	4680      	mov	r8, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	469a      	mov	sl, r3
 800a8fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a902:	d807      	bhi.n	800a914 <_printf_i+0x28>
 800a904:	2f62      	cmp	r7, #98	@ 0x62
 800a906:	d80a      	bhi.n	800a91e <_printf_i+0x32>
 800a908:	2f00      	cmp	r7, #0
 800a90a:	f000 80d2 	beq.w	800aab2 <_printf_i+0x1c6>
 800a90e:	2f58      	cmp	r7, #88	@ 0x58
 800a910:	f000 80b9 	beq.w	800aa86 <_printf_i+0x19a>
 800a914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a91c:	e03a      	b.n	800a994 <_printf_i+0xa8>
 800a91e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a922:	2b15      	cmp	r3, #21
 800a924:	d8f6      	bhi.n	800a914 <_printf_i+0x28>
 800a926:	a101      	add	r1, pc, #4	@ (adr r1, 800a92c <_printf_i+0x40>)
 800a928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a92c:	0800a985 	.word	0x0800a985
 800a930:	0800a999 	.word	0x0800a999
 800a934:	0800a915 	.word	0x0800a915
 800a938:	0800a915 	.word	0x0800a915
 800a93c:	0800a915 	.word	0x0800a915
 800a940:	0800a915 	.word	0x0800a915
 800a944:	0800a999 	.word	0x0800a999
 800a948:	0800a915 	.word	0x0800a915
 800a94c:	0800a915 	.word	0x0800a915
 800a950:	0800a915 	.word	0x0800a915
 800a954:	0800a915 	.word	0x0800a915
 800a958:	0800aa99 	.word	0x0800aa99
 800a95c:	0800a9c3 	.word	0x0800a9c3
 800a960:	0800aa53 	.word	0x0800aa53
 800a964:	0800a915 	.word	0x0800a915
 800a968:	0800a915 	.word	0x0800a915
 800a96c:	0800aabb 	.word	0x0800aabb
 800a970:	0800a915 	.word	0x0800a915
 800a974:	0800a9c3 	.word	0x0800a9c3
 800a978:	0800a915 	.word	0x0800a915
 800a97c:	0800a915 	.word	0x0800a915
 800a980:	0800aa5b 	.word	0x0800aa5b
 800a984:	6833      	ldr	r3, [r6, #0]
 800a986:	1d1a      	adds	r2, r3, #4
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	6032      	str	r2, [r6, #0]
 800a98c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a994:	2301      	movs	r3, #1
 800a996:	e09d      	b.n	800aad4 <_printf_i+0x1e8>
 800a998:	6833      	ldr	r3, [r6, #0]
 800a99a:	6820      	ldr	r0, [r4, #0]
 800a99c:	1d19      	adds	r1, r3, #4
 800a99e:	6031      	str	r1, [r6, #0]
 800a9a0:	0606      	lsls	r6, r0, #24
 800a9a2:	d501      	bpl.n	800a9a8 <_printf_i+0xbc>
 800a9a4:	681d      	ldr	r5, [r3, #0]
 800a9a6:	e003      	b.n	800a9b0 <_printf_i+0xc4>
 800a9a8:	0645      	lsls	r5, r0, #25
 800a9aa:	d5fb      	bpl.n	800a9a4 <_printf_i+0xb8>
 800a9ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	da03      	bge.n	800a9bc <_printf_i+0xd0>
 800a9b4:	232d      	movs	r3, #45	@ 0x2d
 800a9b6:	426d      	negs	r5, r5
 800a9b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9bc:	4859      	ldr	r0, [pc, #356]	@ (800ab24 <_printf_i+0x238>)
 800a9be:	230a      	movs	r3, #10
 800a9c0:	e011      	b.n	800a9e6 <_printf_i+0xfa>
 800a9c2:	6821      	ldr	r1, [r4, #0]
 800a9c4:	6833      	ldr	r3, [r6, #0]
 800a9c6:	0608      	lsls	r0, r1, #24
 800a9c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9cc:	d402      	bmi.n	800a9d4 <_printf_i+0xe8>
 800a9ce:	0649      	lsls	r1, r1, #25
 800a9d0:	bf48      	it	mi
 800a9d2:	b2ad      	uxthmi	r5, r5
 800a9d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9d6:	4853      	ldr	r0, [pc, #332]	@ (800ab24 <_printf_i+0x238>)
 800a9d8:	6033      	str	r3, [r6, #0]
 800a9da:	bf14      	ite	ne
 800a9dc:	230a      	movne	r3, #10
 800a9de:	2308      	moveq	r3, #8
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9e6:	6866      	ldr	r6, [r4, #4]
 800a9e8:	60a6      	str	r6, [r4, #8]
 800a9ea:	2e00      	cmp	r6, #0
 800a9ec:	bfa2      	ittt	ge
 800a9ee:	6821      	ldrge	r1, [r4, #0]
 800a9f0:	f021 0104 	bicge.w	r1, r1, #4
 800a9f4:	6021      	strge	r1, [r4, #0]
 800a9f6:	b90d      	cbnz	r5, 800a9fc <_printf_i+0x110>
 800a9f8:	2e00      	cmp	r6, #0
 800a9fa:	d04b      	beq.n	800aa94 <_printf_i+0x1a8>
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa02:	fb03 5711 	mls	r7, r3, r1, r5
 800aa06:	5dc7      	ldrb	r7, [r0, r7]
 800aa08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa0c:	462f      	mov	r7, r5
 800aa0e:	42bb      	cmp	r3, r7
 800aa10:	460d      	mov	r5, r1
 800aa12:	d9f4      	bls.n	800a9fe <_printf_i+0x112>
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d10b      	bne.n	800aa30 <_printf_i+0x144>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	07df      	lsls	r7, r3, #31
 800aa1c:	d508      	bpl.n	800aa30 <_printf_i+0x144>
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	6861      	ldr	r1, [r4, #4]
 800aa22:	4299      	cmp	r1, r3
 800aa24:	bfde      	ittt	le
 800aa26:	2330      	movle	r3, #48	@ 0x30
 800aa28:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa30:	1b92      	subs	r2, r2, r6
 800aa32:	6122      	str	r2, [r4, #16]
 800aa34:	f8cd a000 	str.w	sl, [sp]
 800aa38:	464b      	mov	r3, r9
 800aa3a:	aa03      	add	r2, sp, #12
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4640      	mov	r0, r8
 800aa40:	f7ff fee6 	bl	800a810 <_printf_common>
 800aa44:	3001      	adds	r0, #1
 800aa46:	d14a      	bne.n	800aade <_printf_i+0x1f2>
 800aa48:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4c:	b004      	add	sp, #16
 800aa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	f043 0320 	orr.w	r3, r3, #32
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	4833      	ldr	r0, [pc, #204]	@ (800ab28 <_printf_i+0x23c>)
 800aa5c:	2778      	movs	r7, #120	@ 0x78
 800aa5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	6831      	ldr	r1, [r6, #0]
 800aa66:	061f      	lsls	r7, r3, #24
 800aa68:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa6c:	d402      	bmi.n	800aa74 <_printf_i+0x188>
 800aa6e:	065f      	lsls	r7, r3, #25
 800aa70:	bf48      	it	mi
 800aa72:	b2ad      	uxthmi	r5, r5
 800aa74:	6031      	str	r1, [r6, #0]
 800aa76:	07d9      	lsls	r1, r3, #31
 800aa78:	bf44      	itt	mi
 800aa7a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa7e:	6023      	strmi	r3, [r4, #0]
 800aa80:	b11d      	cbz	r5, 800aa8a <_printf_i+0x19e>
 800aa82:	2310      	movs	r3, #16
 800aa84:	e7ac      	b.n	800a9e0 <_printf_i+0xf4>
 800aa86:	4827      	ldr	r0, [pc, #156]	@ (800ab24 <_printf_i+0x238>)
 800aa88:	e7e9      	b.n	800aa5e <_printf_i+0x172>
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	f023 0320 	bic.w	r3, r3, #32
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	e7f6      	b.n	800aa82 <_printf_i+0x196>
 800aa94:	4616      	mov	r6, r2
 800aa96:	e7bd      	b.n	800aa14 <_printf_i+0x128>
 800aa98:	6833      	ldr	r3, [r6, #0]
 800aa9a:	6825      	ldr	r5, [r4, #0]
 800aa9c:	6961      	ldr	r1, [r4, #20]
 800aa9e:	1d18      	adds	r0, r3, #4
 800aaa0:	6030      	str	r0, [r6, #0]
 800aaa2:	062e      	lsls	r6, r5, #24
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	d501      	bpl.n	800aaac <_printf_i+0x1c0>
 800aaa8:	6019      	str	r1, [r3, #0]
 800aaaa:	e002      	b.n	800aab2 <_printf_i+0x1c6>
 800aaac:	0668      	lsls	r0, r5, #25
 800aaae:	d5fb      	bpl.n	800aaa8 <_printf_i+0x1bc>
 800aab0:	8019      	strh	r1, [r3, #0]
 800aab2:	2300      	movs	r3, #0
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	4616      	mov	r6, r2
 800aab8:	e7bc      	b.n	800aa34 <_printf_i+0x148>
 800aaba:	6833      	ldr	r3, [r6, #0]
 800aabc:	1d1a      	adds	r2, r3, #4
 800aabe:	6032      	str	r2, [r6, #0]
 800aac0:	681e      	ldr	r6, [r3, #0]
 800aac2:	6862      	ldr	r2, [r4, #4]
 800aac4:	2100      	movs	r1, #0
 800aac6:	4630      	mov	r0, r6
 800aac8:	f7f5 fba2 	bl	8000210 <memchr>
 800aacc:	b108      	cbz	r0, 800aad2 <_printf_i+0x1e6>
 800aace:	1b80      	subs	r0, r0, r6
 800aad0:	6060      	str	r0, [r4, #4]
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	6123      	str	r3, [r4, #16]
 800aad6:	2300      	movs	r3, #0
 800aad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aadc:	e7aa      	b.n	800aa34 <_printf_i+0x148>
 800aade:	6923      	ldr	r3, [r4, #16]
 800aae0:	4632      	mov	r2, r6
 800aae2:	4649      	mov	r1, r9
 800aae4:	4640      	mov	r0, r8
 800aae6:	47d0      	blx	sl
 800aae8:	3001      	adds	r0, #1
 800aaea:	d0ad      	beq.n	800aa48 <_printf_i+0x15c>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	079b      	lsls	r3, r3, #30
 800aaf0:	d413      	bmi.n	800ab1a <_printf_i+0x22e>
 800aaf2:	68e0      	ldr	r0, [r4, #12]
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	4298      	cmp	r0, r3
 800aaf8:	bfb8      	it	lt
 800aafa:	4618      	movlt	r0, r3
 800aafc:	e7a6      	b.n	800aa4c <_printf_i+0x160>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4632      	mov	r2, r6
 800ab02:	4649      	mov	r1, r9
 800ab04:	4640      	mov	r0, r8
 800ab06:	47d0      	blx	sl
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d09d      	beq.n	800aa48 <_printf_i+0x15c>
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	68e3      	ldr	r3, [r4, #12]
 800ab10:	9903      	ldr	r1, [sp, #12]
 800ab12:	1a5b      	subs	r3, r3, r1
 800ab14:	42ab      	cmp	r3, r5
 800ab16:	dcf2      	bgt.n	800aafe <_printf_i+0x212>
 800ab18:	e7eb      	b.n	800aaf2 <_printf_i+0x206>
 800ab1a:	2500      	movs	r5, #0
 800ab1c:	f104 0619 	add.w	r6, r4, #25
 800ab20:	e7f5      	b.n	800ab0e <_printf_i+0x222>
 800ab22:	bf00      	nop
 800ab24:	08020e06 	.word	0x08020e06
 800ab28:	08020e17 	.word	0x08020e17

0800ab2c <std>:
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	4604      	mov	r4, r0
 800ab32:	e9c0 3300 	strd	r3, r3, [r0]
 800ab36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab3a:	6083      	str	r3, [r0, #8]
 800ab3c:	8181      	strh	r1, [r0, #12]
 800ab3e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab40:	81c2      	strh	r2, [r0, #14]
 800ab42:	6183      	str	r3, [r0, #24]
 800ab44:	4619      	mov	r1, r3
 800ab46:	2208      	movs	r2, #8
 800ab48:	305c      	adds	r0, #92	@ 0x5c
 800ab4a:	f000 f924 	bl	800ad96 <memset>
 800ab4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab84 <std+0x58>)
 800ab50:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab52:	4b0d      	ldr	r3, [pc, #52]	@ (800ab88 <std+0x5c>)
 800ab54:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab56:	4b0d      	ldr	r3, [pc, #52]	@ (800ab8c <std+0x60>)
 800ab58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab90 <std+0x64>)
 800ab5c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab94 <std+0x68>)
 800ab60:	6224      	str	r4, [r4, #32]
 800ab62:	429c      	cmp	r4, r3
 800ab64:	d006      	beq.n	800ab74 <std+0x48>
 800ab66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab6a:	4294      	cmp	r4, r2
 800ab6c:	d002      	beq.n	800ab74 <std+0x48>
 800ab6e:	33d0      	adds	r3, #208	@ 0xd0
 800ab70:	429c      	cmp	r4, r3
 800ab72:	d105      	bne.n	800ab80 <std+0x54>
 800ab74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab7c:	f000 b988 	b.w	800ae90 <__retarget_lock_init_recursive>
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	bf00      	nop
 800ab84:	0800acf1 	.word	0x0800acf1
 800ab88:	0800ad13 	.word	0x0800ad13
 800ab8c:	0800ad4b 	.word	0x0800ad4b
 800ab90:	0800ad6f 	.word	0x0800ad6f
 800ab94:	20018d28 	.word	0x20018d28

0800ab98 <stdio_exit_handler>:
 800ab98:	4a02      	ldr	r2, [pc, #8]	@ (800aba4 <stdio_exit_handler+0xc>)
 800ab9a:	4903      	ldr	r1, [pc, #12]	@ (800aba8 <stdio_exit_handler+0x10>)
 800ab9c:	4803      	ldr	r0, [pc, #12]	@ (800abac <stdio_exit_handler+0x14>)
 800ab9e:	f000 b869 	b.w	800ac74 <_fwalk_sglue>
 800aba2:	bf00      	nop
 800aba4:	2000000c 	.word	0x2000000c
 800aba8:	0800c7ed 	.word	0x0800c7ed
 800abac:	2000001c 	.word	0x2000001c

0800abb0 <cleanup_stdio>:
 800abb0:	6841      	ldr	r1, [r0, #4]
 800abb2:	4b0c      	ldr	r3, [pc, #48]	@ (800abe4 <cleanup_stdio+0x34>)
 800abb4:	4299      	cmp	r1, r3
 800abb6:	b510      	push	{r4, lr}
 800abb8:	4604      	mov	r4, r0
 800abba:	d001      	beq.n	800abc0 <cleanup_stdio+0x10>
 800abbc:	f001 fe16 	bl	800c7ec <_fflush_r>
 800abc0:	68a1      	ldr	r1, [r4, #8]
 800abc2:	4b09      	ldr	r3, [pc, #36]	@ (800abe8 <cleanup_stdio+0x38>)
 800abc4:	4299      	cmp	r1, r3
 800abc6:	d002      	beq.n	800abce <cleanup_stdio+0x1e>
 800abc8:	4620      	mov	r0, r4
 800abca:	f001 fe0f 	bl	800c7ec <_fflush_r>
 800abce:	68e1      	ldr	r1, [r4, #12]
 800abd0:	4b06      	ldr	r3, [pc, #24]	@ (800abec <cleanup_stdio+0x3c>)
 800abd2:	4299      	cmp	r1, r3
 800abd4:	d004      	beq.n	800abe0 <cleanup_stdio+0x30>
 800abd6:	4620      	mov	r0, r4
 800abd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abdc:	f001 be06 	b.w	800c7ec <_fflush_r>
 800abe0:	bd10      	pop	{r4, pc}
 800abe2:	bf00      	nop
 800abe4:	20018d28 	.word	0x20018d28
 800abe8:	20018d90 	.word	0x20018d90
 800abec:	20018df8 	.word	0x20018df8

0800abf0 <global_stdio_init.part.0>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ac20 <global_stdio_init.part.0+0x30>)
 800abf4:	4c0b      	ldr	r4, [pc, #44]	@ (800ac24 <global_stdio_init.part.0+0x34>)
 800abf6:	4a0c      	ldr	r2, [pc, #48]	@ (800ac28 <global_stdio_init.part.0+0x38>)
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	4620      	mov	r0, r4
 800abfc:	2200      	movs	r2, #0
 800abfe:	2104      	movs	r1, #4
 800ac00:	f7ff ff94 	bl	800ab2c <std>
 800ac04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac08:	2201      	movs	r2, #1
 800ac0a:	2109      	movs	r1, #9
 800ac0c:	f7ff ff8e 	bl	800ab2c <std>
 800ac10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac14:	2202      	movs	r2, #2
 800ac16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1a:	2112      	movs	r1, #18
 800ac1c:	f7ff bf86 	b.w	800ab2c <std>
 800ac20:	20018e60 	.word	0x20018e60
 800ac24:	20018d28 	.word	0x20018d28
 800ac28:	0800ab99 	.word	0x0800ab99

0800ac2c <__sfp_lock_acquire>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	@ (800ac34 <__sfp_lock_acquire+0x8>)
 800ac2e:	f000 b930 	b.w	800ae92 <__retarget_lock_acquire_recursive>
 800ac32:	bf00      	nop
 800ac34:	20018e69 	.word	0x20018e69

0800ac38 <__sfp_lock_release>:
 800ac38:	4801      	ldr	r0, [pc, #4]	@ (800ac40 <__sfp_lock_release+0x8>)
 800ac3a:	f000 b92b 	b.w	800ae94 <__retarget_lock_release_recursive>
 800ac3e:	bf00      	nop
 800ac40:	20018e69 	.word	0x20018e69

0800ac44 <__sinit>:
 800ac44:	b510      	push	{r4, lr}
 800ac46:	4604      	mov	r4, r0
 800ac48:	f7ff fff0 	bl	800ac2c <__sfp_lock_acquire>
 800ac4c:	6a23      	ldr	r3, [r4, #32]
 800ac4e:	b11b      	cbz	r3, 800ac58 <__sinit+0x14>
 800ac50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac54:	f7ff bff0 	b.w	800ac38 <__sfp_lock_release>
 800ac58:	4b04      	ldr	r3, [pc, #16]	@ (800ac6c <__sinit+0x28>)
 800ac5a:	6223      	str	r3, [r4, #32]
 800ac5c:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <__sinit+0x2c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1f5      	bne.n	800ac50 <__sinit+0xc>
 800ac64:	f7ff ffc4 	bl	800abf0 <global_stdio_init.part.0>
 800ac68:	e7f2      	b.n	800ac50 <__sinit+0xc>
 800ac6a:	bf00      	nop
 800ac6c:	0800abb1 	.word	0x0800abb1
 800ac70:	20018e60 	.word	0x20018e60

0800ac74 <_fwalk_sglue>:
 800ac74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac78:	4607      	mov	r7, r0
 800ac7a:	4688      	mov	r8, r1
 800ac7c:	4614      	mov	r4, r2
 800ac7e:	2600      	movs	r6, #0
 800ac80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac84:	f1b9 0901 	subs.w	r9, r9, #1
 800ac88:	d505      	bpl.n	800ac96 <_fwalk_sglue+0x22>
 800ac8a:	6824      	ldr	r4, [r4, #0]
 800ac8c:	2c00      	cmp	r4, #0
 800ac8e:	d1f7      	bne.n	800ac80 <_fwalk_sglue+0xc>
 800ac90:	4630      	mov	r0, r6
 800ac92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac96:	89ab      	ldrh	r3, [r5, #12]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d907      	bls.n	800acac <_fwalk_sglue+0x38>
 800ac9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aca0:	3301      	adds	r3, #1
 800aca2:	d003      	beq.n	800acac <_fwalk_sglue+0x38>
 800aca4:	4629      	mov	r1, r5
 800aca6:	4638      	mov	r0, r7
 800aca8:	47c0      	blx	r8
 800acaa:	4306      	orrs	r6, r0
 800acac:	3568      	adds	r5, #104	@ 0x68
 800acae:	e7e9      	b.n	800ac84 <_fwalk_sglue+0x10>

0800acb0 <siprintf>:
 800acb0:	b40e      	push	{r1, r2, r3}
 800acb2:	b500      	push	{lr}
 800acb4:	b09c      	sub	sp, #112	@ 0x70
 800acb6:	ab1d      	add	r3, sp, #116	@ 0x74
 800acb8:	9002      	str	r0, [sp, #8]
 800acba:	9006      	str	r0, [sp, #24]
 800acbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800acc0:	4809      	ldr	r0, [pc, #36]	@ (800ace8 <siprintf+0x38>)
 800acc2:	9107      	str	r1, [sp, #28]
 800acc4:	9104      	str	r1, [sp, #16]
 800acc6:	4909      	ldr	r1, [pc, #36]	@ (800acec <siprintf+0x3c>)
 800acc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800accc:	9105      	str	r1, [sp, #20]
 800acce:	6800      	ldr	r0, [r0, #0]
 800acd0:	9301      	str	r3, [sp, #4]
 800acd2:	a902      	add	r1, sp, #8
 800acd4:	f001 fc0a 	bl	800c4ec <_svfiprintf_r>
 800acd8:	9b02      	ldr	r3, [sp, #8]
 800acda:	2200      	movs	r2, #0
 800acdc:	701a      	strb	r2, [r3, #0]
 800acde:	b01c      	add	sp, #112	@ 0x70
 800ace0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ace4:	b003      	add	sp, #12
 800ace6:	4770      	bx	lr
 800ace8:	20000018 	.word	0x20000018
 800acec:	ffff0208 	.word	0xffff0208

0800acf0 <__sread>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	460c      	mov	r4, r1
 800acf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf8:	f000 f87c 	bl	800adf4 <_read_r>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	bfab      	itete	ge
 800ad00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad02:	89a3      	ldrhlt	r3, [r4, #12]
 800ad04:	181b      	addge	r3, r3, r0
 800ad06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad0a:	bfac      	ite	ge
 800ad0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad0e:	81a3      	strhlt	r3, [r4, #12]
 800ad10:	bd10      	pop	{r4, pc}

0800ad12 <__swrite>:
 800ad12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad16:	461f      	mov	r7, r3
 800ad18:	898b      	ldrh	r3, [r1, #12]
 800ad1a:	05db      	lsls	r3, r3, #23
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	460c      	mov	r4, r1
 800ad20:	4616      	mov	r6, r2
 800ad22:	d505      	bpl.n	800ad30 <__swrite+0x1e>
 800ad24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad28:	2302      	movs	r3, #2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f000 f850 	bl	800add0 <_lseek_r>
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	463b      	mov	r3, r7
 800ad40:	4628      	mov	r0, r5
 800ad42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad46:	f000 b867 	b.w	800ae18 <_write_r>

0800ad4a <__sseek>:
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad52:	f000 f83d 	bl	800add0 <_lseek_r>
 800ad56:	1c43      	adds	r3, r0, #1
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	bf15      	itete	ne
 800ad5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad66:	81a3      	strheq	r3, [r4, #12]
 800ad68:	bf18      	it	ne
 800ad6a:	81a3      	strhne	r3, [r4, #12]
 800ad6c:	bd10      	pop	{r4, pc}

0800ad6e <__sclose>:
 800ad6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad72:	f000 b81d 	b.w	800adb0 <_close_r>

0800ad76 <memcmp>:
 800ad76:	b510      	push	{r4, lr}
 800ad78:	3901      	subs	r1, #1
 800ad7a:	4402      	add	r2, r0
 800ad7c:	4290      	cmp	r0, r2
 800ad7e:	d101      	bne.n	800ad84 <memcmp+0xe>
 800ad80:	2000      	movs	r0, #0
 800ad82:	e005      	b.n	800ad90 <memcmp+0x1a>
 800ad84:	7803      	ldrb	r3, [r0, #0]
 800ad86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad8a:	42a3      	cmp	r3, r4
 800ad8c:	d001      	beq.n	800ad92 <memcmp+0x1c>
 800ad8e:	1b18      	subs	r0, r3, r4
 800ad90:	bd10      	pop	{r4, pc}
 800ad92:	3001      	adds	r0, #1
 800ad94:	e7f2      	b.n	800ad7c <memcmp+0x6>

0800ad96 <memset>:
 800ad96:	4402      	add	r2, r0
 800ad98:	4603      	mov	r3, r0
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d100      	bne.n	800ada0 <memset+0xa>
 800ad9e:	4770      	bx	lr
 800ada0:	f803 1b01 	strb.w	r1, [r3], #1
 800ada4:	e7f9      	b.n	800ad9a <memset+0x4>
	...

0800ada8 <_localeconv_r>:
 800ada8:	4800      	ldr	r0, [pc, #0]	@ (800adac <_localeconv_r+0x4>)
 800adaa:	4770      	bx	lr
 800adac:	20000158 	.word	0x20000158

0800adb0 <_close_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d06      	ldr	r5, [pc, #24]	@ (800adcc <_close_r+0x1c>)
 800adb4:	2300      	movs	r3, #0
 800adb6:	4604      	mov	r4, r0
 800adb8:	4608      	mov	r0, r1
 800adba:	602b      	str	r3, [r5, #0]
 800adbc:	f7f8 f846 	bl	8002e4c <_close>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_close_r+0x1a>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_close_r+0x1a>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	20018e64 	.word	0x20018e64

0800add0 <_lseek_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d07      	ldr	r5, [pc, #28]	@ (800adf0 <_lseek_r+0x20>)
 800add4:	4604      	mov	r4, r0
 800add6:	4608      	mov	r0, r1
 800add8:	4611      	mov	r1, r2
 800adda:	2200      	movs	r2, #0
 800addc:	602a      	str	r2, [r5, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	f7f8 f85b 	bl	8002e9a <_lseek>
 800ade4:	1c43      	adds	r3, r0, #1
 800ade6:	d102      	bne.n	800adee <_lseek_r+0x1e>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	b103      	cbz	r3, 800adee <_lseek_r+0x1e>
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	20018e64 	.word	0x20018e64

0800adf4 <_read_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d07      	ldr	r5, [pc, #28]	@ (800ae14 <_read_r+0x20>)
 800adf8:	4604      	mov	r4, r0
 800adfa:	4608      	mov	r0, r1
 800adfc:	4611      	mov	r1, r2
 800adfe:	2200      	movs	r2, #0
 800ae00:	602a      	str	r2, [r5, #0]
 800ae02:	461a      	mov	r2, r3
 800ae04:	f7f7 ffe9 	bl	8002dda <_read>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_read_r+0x1e>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_read_r+0x1e>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	20018e64 	.word	0x20018e64

0800ae18 <_write_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4d07      	ldr	r5, [pc, #28]	@ (800ae38 <_write_r+0x20>)
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	4608      	mov	r0, r1
 800ae20:	4611      	mov	r1, r2
 800ae22:	2200      	movs	r2, #0
 800ae24:	602a      	str	r2, [r5, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	f7f7 fff4 	bl	8002e14 <_write>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_write_r+0x1e>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_write_r+0x1e>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	20018e64 	.word	0x20018e64

0800ae3c <__errno>:
 800ae3c:	4b01      	ldr	r3, [pc, #4]	@ (800ae44 <__errno+0x8>)
 800ae3e:	6818      	ldr	r0, [r3, #0]
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20000018 	.word	0x20000018

0800ae48 <__libc_init_array>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	4d0d      	ldr	r5, [pc, #52]	@ (800ae80 <__libc_init_array+0x38>)
 800ae4c:	4c0d      	ldr	r4, [pc, #52]	@ (800ae84 <__libc_init_array+0x3c>)
 800ae4e:	1b64      	subs	r4, r4, r5
 800ae50:	10a4      	asrs	r4, r4, #2
 800ae52:	2600      	movs	r6, #0
 800ae54:	42a6      	cmp	r6, r4
 800ae56:	d109      	bne.n	800ae6c <__libc_init_array+0x24>
 800ae58:	4d0b      	ldr	r5, [pc, #44]	@ (800ae88 <__libc_init_array+0x40>)
 800ae5a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae8c <__libc_init_array+0x44>)
 800ae5c:	f002 fc34 	bl	800d6c8 <_init>
 800ae60:	1b64      	subs	r4, r4, r5
 800ae62:	10a4      	asrs	r4, r4, #2
 800ae64:	2600      	movs	r6, #0
 800ae66:	42a6      	cmp	r6, r4
 800ae68:	d105      	bne.n	800ae76 <__libc_init_array+0x2e>
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}
 800ae6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae70:	4798      	blx	r3
 800ae72:	3601      	adds	r6, #1
 800ae74:	e7ee      	b.n	800ae54 <__libc_init_array+0xc>
 800ae76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae7a:	4798      	blx	r3
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	e7f2      	b.n	800ae66 <__libc_init_array+0x1e>
 800ae80:	080211b0 	.word	0x080211b0
 800ae84:	080211b0 	.word	0x080211b0
 800ae88:	080211b0 	.word	0x080211b0
 800ae8c:	080211b4 	.word	0x080211b4

0800ae90 <__retarget_lock_init_recursive>:
 800ae90:	4770      	bx	lr

0800ae92 <__retarget_lock_acquire_recursive>:
 800ae92:	4770      	bx	lr

0800ae94 <__retarget_lock_release_recursive>:
 800ae94:	4770      	bx	lr

0800ae96 <quorem>:
 800ae96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9a:	6903      	ldr	r3, [r0, #16]
 800ae9c:	690c      	ldr	r4, [r1, #16]
 800ae9e:	42a3      	cmp	r3, r4
 800aea0:	4607      	mov	r7, r0
 800aea2:	db7e      	blt.n	800afa2 <quorem+0x10c>
 800aea4:	3c01      	subs	r4, #1
 800aea6:	f101 0814 	add.w	r8, r1, #20
 800aeaa:	00a3      	lsls	r3, r4, #2
 800aeac:	f100 0514 	add.w	r5, r0, #20
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aebc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aec0:	3301      	adds	r3, #1
 800aec2:	429a      	cmp	r2, r3
 800aec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aec8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aecc:	d32e      	bcc.n	800af2c <quorem+0x96>
 800aece:	f04f 0a00 	mov.w	sl, #0
 800aed2:	46c4      	mov	ip, r8
 800aed4:	46ae      	mov	lr, r5
 800aed6:	46d3      	mov	fp, sl
 800aed8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aedc:	b298      	uxth	r0, r3
 800aede:	fb06 a000 	mla	r0, r6, r0, sl
 800aee2:	0c02      	lsrs	r2, r0, #16
 800aee4:	0c1b      	lsrs	r3, r3, #16
 800aee6:	fb06 2303 	mla	r3, r6, r3, r2
 800aeea:	f8de 2000 	ldr.w	r2, [lr]
 800aeee:	b280      	uxth	r0, r0
 800aef0:	b292      	uxth	r2, r2
 800aef2:	1a12      	subs	r2, r2, r0
 800aef4:	445a      	add	r2, fp
 800aef6:	f8de 0000 	ldr.w	r0, [lr]
 800aefa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aefe:	b29b      	uxth	r3, r3
 800af00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af08:	b292      	uxth	r2, r2
 800af0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af0e:	45e1      	cmp	r9, ip
 800af10:	f84e 2b04 	str.w	r2, [lr], #4
 800af14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af18:	d2de      	bcs.n	800aed8 <quorem+0x42>
 800af1a:	9b00      	ldr	r3, [sp, #0]
 800af1c:	58eb      	ldr	r3, [r5, r3]
 800af1e:	b92b      	cbnz	r3, 800af2c <quorem+0x96>
 800af20:	9b01      	ldr	r3, [sp, #4]
 800af22:	3b04      	subs	r3, #4
 800af24:	429d      	cmp	r5, r3
 800af26:	461a      	mov	r2, r3
 800af28:	d32f      	bcc.n	800af8a <quorem+0xf4>
 800af2a:	613c      	str	r4, [r7, #16]
 800af2c:	4638      	mov	r0, r7
 800af2e:	f001 f979 	bl	800c224 <__mcmp>
 800af32:	2800      	cmp	r0, #0
 800af34:	db25      	blt.n	800af82 <quorem+0xec>
 800af36:	4629      	mov	r1, r5
 800af38:	2000      	movs	r0, #0
 800af3a:	f858 2b04 	ldr.w	r2, [r8], #4
 800af3e:	f8d1 c000 	ldr.w	ip, [r1]
 800af42:	fa1f fe82 	uxth.w	lr, r2
 800af46:	fa1f f38c 	uxth.w	r3, ip
 800af4a:	eba3 030e 	sub.w	r3, r3, lr
 800af4e:	4403      	add	r3, r0
 800af50:	0c12      	lsrs	r2, r2, #16
 800af52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af60:	45c1      	cmp	r9, r8
 800af62:	f841 3b04 	str.w	r3, [r1], #4
 800af66:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af6a:	d2e6      	bcs.n	800af3a <quorem+0xa4>
 800af6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af74:	b922      	cbnz	r2, 800af80 <quorem+0xea>
 800af76:	3b04      	subs	r3, #4
 800af78:	429d      	cmp	r5, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	d30b      	bcc.n	800af96 <quorem+0x100>
 800af7e:	613c      	str	r4, [r7, #16]
 800af80:	3601      	adds	r6, #1
 800af82:	4630      	mov	r0, r6
 800af84:	b003      	add	sp, #12
 800af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8a:	6812      	ldr	r2, [r2, #0]
 800af8c:	3b04      	subs	r3, #4
 800af8e:	2a00      	cmp	r2, #0
 800af90:	d1cb      	bne.n	800af2a <quorem+0x94>
 800af92:	3c01      	subs	r4, #1
 800af94:	e7c6      	b.n	800af24 <quorem+0x8e>
 800af96:	6812      	ldr	r2, [r2, #0]
 800af98:	3b04      	subs	r3, #4
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	d1ef      	bne.n	800af7e <quorem+0xe8>
 800af9e:	3c01      	subs	r4, #1
 800afa0:	e7ea      	b.n	800af78 <quorem+0xe2>
 800afa2:	2000      	movs	r0, #0
 800afa4:	e7ee      	b.n	800af84 <quorem+0xee>
	...

0800afa8 <_dtoa_r>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	69c7      	ldr	r7, [r0, #28]
 800afae:	b099      	sub	sp, #100	@ 0x64
 800afb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800afb4:	ec55 4b10 	vmov	r4, r5, d0
 800afb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800afba:	9109      	str	r1, [sp, #36]	@ 0x24
 800afbc:	4683      	mov	fp, r0
 800afbe:	920e      	str	r2, [sp, #56]	@ 0x38
 800afc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afc2:	b97f      	cbnz	r7, 800afe4 <_dtoa_r+0x3c>
 800afc4:	2010      	movs	r0, #16
 800afc6:	f000 fdfd 	bl	800bbc4 <malloc>
 800afca:	4602      	mov	r2, r0
 800afcc:	f8cb 001c 	str.w	r0, [fp, #28]
 800afd0:	b920      	cbnz	r0, 800afdc <_dtoa_r+0x34>
 800afd2:	4ba7      	ldr	r3, [pc, #668]	@ (800b270 <_dtoa_r+0x2c8>)
 800afd4:	21ef      	movs	r1, #239	@ 0xef
 800afd6:	48a7      	ldr	r0, [pc, #668]	@ (800b274 <_dtoa_r+0x2cc>)
 800afd8:	f001 fc68 	bl	800c8ac <__assert_func>
 800afdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800afe0:	6007      	str	r7, [r0, #0]
 800afe2:	60c7      	str	r7, [r0, #12]
 800afe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afe8:	6819      	ldr	r1, [r3, #0]
 800afea:	b159      	cbz	r1, 800b004 <_dtoa_r+0x5c>
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	604a      	str	r2, [r1, #4]
 800aff0:	2301      	movs	r3, #1
 800aff2:	4093      	lsls	r3, r2
 800aff4:	608b      	str	r3, [r1, #8]
 800aff6:	4658      	mov	r0, fp
 800aff8:	f000 feda 	bl	800bdb0 <_Bfree>
 800affc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	1e2b      	subs	r3, r5, #0
 800b006:	bfb9      	ittee	lt
 800b008:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b00c:	9303      	strlt	r3, [sp, #12]
 800b00e:	2300      	movge	r3, #0
 800b010:	6033      	strge	r3, [r6, #0]
 800b012:	9f03      	ldr	r7, [sp, #12]
 800b014:	4b98      	ldr	r3, [pc, #608]	@ (800b278 <_dtoa_r+0x2d0>)
 800b016:	bfbc      	itt	lt
 800b018:	2201      	movlt	r2, #1
 800b01a:	6032      	strlt	r2, [r6, #0]
 800b01c:	43bb      	bics	r3, r7
 800b01e:	d112      	bne.n	800b046 <_dtoa_r+0x9e>
 800b020:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b022:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b026:	6013      	str	r3, [r2, #0]
 800b028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b02c:	4323      	orrs	r3, r4
 800b02e:	f000 854d 	beq.w	800bacc <_dtoa_r+0xb24>
 800b032:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b034:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b28c <_dtoa_r+0x2e4>
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 854f 	beq.w	800badc <_dtoa_r+0xb34>
 800b03e:	f10a 0303 	add.w	r3, sl, #3
 800b042:	f000 bd49 	b.w	800bad8 <_dtoa_r+0xb30>
 800b046:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b04a:	2200      	movs	r2, #0
 800b04c:	ec51 0b17 	vmov	r0, r1, d7
 800b050:	2300      	movs	r3, #0
 800b052:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b056:	f7f5 fd57 	bl	8000b08 <__aeabi_dcmpeq>
 800b05a:	4680      	mov	r8, r0
 800b05c:	b158      	cbz	r0, 800b076 <_dtoa_r+0xce>
 800b05e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b060:	2301      	movs	r3, #1
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b066:	b113      	cbz	r3, 800b06e <_dtoa_r+0xc6>
 800b068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b06a:	4b84      	ldr	r3, [pc, #528]	@ (800b27c <_dtoa_r+0x2d4>)
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b290 <_dtoa_r+0x2e8>
 800b072:	f000 bd33 	b.w	800badc <_dtoa_r+0xb34>
 800b076:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b07a:	aa16      	add	r2, sp, #88	@ 0x58
 800b07c:	a917      	add	r1, sp, #92	@ 0x5c
 800b07e:	4658      	mov	r0, fp
 800b080:	f001 f980 	bl	800c384 <__d2b>
 800b084:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b088:	4681      	mov	r9, r0
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	d077      	beq.n	800b17e <_dtoa_r+0x1d6>
 800b08e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b090:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b09c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b0a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b0a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4b74      	ldr	r3, [pc, #464]	@ (800b280 <_dtoa_r+0x2d8>)
 800b0ae:	f7f5 f90b 	bl	80002c8 <__aeabi_dsub>
 800b0b2:	a369      	add	r3, pc, #420	@ (adr r3, 800b258 <_dtoa_r+0x2b0>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	f7f5 fabe 	bl	8000638 <__aeabi_dmul>
 800b0bc:	a368      	add	r3, pc, #416	@ (adr r3, 800b260 <_dtoa_r+0x2b8>)
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	f7f5 f903 	bl	80002cc <__adddf3>
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	460d      	mov	r5, r1
 800b0cc:	f7f5 fa4a 	bl	8000564 <__aeabi_i2d>
 800b0d0:	a365      	add	r3, pc, #404	@ (adr r3, 800b268 <_dtoa_r+0x2c0>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f7f5 faaf 	bl	8000638 <__aeabi_dmul>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	f7f5 f8f3 	bl	80002cc <__adddf3>
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	f7f5 fd55 	bl	8000b98 <__aeabi_d2iz>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4607      	mov	r7, r0
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f7f5 fd10 	bl	8000b1c <__aeabi_dcmplt>
 800b0fc:	b140      	cbz	r0, 800b110 <_dtoa_r+0x168>
 800b0fe:	4638      	mov	r0, r7
 800b100:	f7f5 fa30 	bl	8000564 <__aeabi_i2d>
 800b104:	4622      	mov	r2, r4
 800b106:	462b      	mov	r3, r5
 800b108:	f7f5 fcfe 	bl	8000b08 <__aeabi_dcmpeq>
 800b10c:	b900      	cbnz	r0, 800b110 <_dtoa_r+0x168>
 800b10e:	3f01      	subs	r7, #1
 800b110:	2f16      	cmp	r7, #22
 800b112:	d851      	bhi.n	800b1b8 <_dtoa_r+0x210>
 800b114:	4b5b      	ldr	r3, [pc, #364]	@ (800b284 <_dtoa_r+0x2dc>)
 800b116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b122:	f7f5 fcfb 	bl	8000b1c <__aeabi_dcmplt>
 800b126:	2800      	cmp	r0, #0
 800b128:	d048      	beq.n	800b1bc <_dtoa_r+0x214>
 800b12a:	3f01      	subs	r7, #1
 800b12c:	2300      	movs	r3, #0
 800b12e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b130:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b132:	1b9b      	subs	r3, r3, r6
 800b134:	1e5a      	subs	r2, r3, #1
 800b136:	bf44      	itt	mi
 800b138:	f1c3 0801 	rsbmi	r8, r3, #1
 800b13c:	2300      	movmi	r3, #0
 800b13e:	9208      	str	r2, [sp, #32]
 800b140:	bf54      	ite	pl
 800b142:	f04f 0800 	movpl.w	r8, #0
 800b146:	9308      	strmi	r3, [sp, #32]
 800b148:	2f00      	cmp	r7, #0
 800b14a:	db39      	blt.n	800b1c0 <_dtoa_r+0x218>
 800b14c:	9b08      	ldr	r3, [sp, #32]
 800b14e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b150:	443b      	add	r3, r7
 800b152:	9308      	str	r3, [sp, #32]
 800b154:	2300      	movs	r3, #0
 800b156:	930a      	str	r3, [sp, #40]	@ 0x28
 800b158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b15a:	2b09      	cmp	r3, #9
 800b15c:	d864      	bhi.n	800b228 <_dtoa_r+0x280>
 800b15e:	2b05      	cmp	r3, #5
 800b160:	bfc4      	itt	gt
 800b162:	3b04      	subgt	r3, #4
 800b164:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b168:	f1a3 0302 	sub.w	r3, r3, #2
 800b16c:	bfcc      	ite	gt
 800b16e:	2400      	movgt	r4, #0
 800b170:	2401      	movle	r4, #1
 800b172:	2b03      	cmp	r3, #3
 800b174:	d863      	bhi.n	800b23e <_dtoa_r+0x296>
 800b176:	e8df f003 	tbb	[pc, r3]
 800b17a:	372a      	.short	0x372a
 800b17c:	5535      	.short	0x5535
 800b17e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b182:	441e      	add	r6, r3
 800b184:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b188:	2b20      	cmp	r3, #32
 800b18a:	bfc1      	itttt	gt
 800b18c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b190:	409f      	lslgt	r7, r3
 800b192:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b196:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b19a:	bfd6      	itet	le
 800b19c:	f1c3 0320 	rsble	r3, r3, #32
 800b1a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b1a4:	fa04 f003 	lslle.w	r0, r4, r3
 800b1a8:	f7f5 f9cc 	bl	8000544 <__aeabi_ui2d>
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b1b2:	3e01      	subs	r6, #1
 800b1b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b1b6:	e777      	b.n	800b0a8 <_dtoa_r+0x100>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e7b8      	b.n	800b12e <_dtoa_r+0x186>
 800b1bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b1be:	e7b7      	b.n	800b130 <_dtoa_r+0x188>
 800b1c0:	427b      	negs	r3, r7
 800b1c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	eba8 0807 	sub.w	r8, r8, r7
 800b1ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1cc:	e7c4      	b.n	800b158 <_dtoa_r+0x1b0>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dc35      	bgt.n	800b244 <_dtoa_r+0x29c>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	9307      	str	r3, [sp, #28]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1e2:	e00b      	b.n	800b1fc <_dtoa_r+0x254>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e7f3      	b.n	800b1d0 <_dtoa_r+0x228>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ee:	18fb      	adds	r3, r7, r3
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	9307      	str	r3, [sp, #28]
 800b1f8:	bfb8      	it	lt
 800b1fa:	2301      	movlt	r3, #1
 800b1fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b200:	2100      	movs	r1, #0
 800b202:	2204      	movs	r2, #4
 800b204:	f102 0514 	add.w	r5, r2, #20
 800b208:	429d      	cmp	r5, r3
 800b20a:	d91f      	bls.n	800b24c <_dtoa_r+0x2a4>
 800b20c:	6041      	str	r1, [r0, #4]
 800b20e:	4658      	mov	r0, fp
 800b210:	f000 fd8e 	bl	800bd30 <_Balloc>
 800b214:	4682      	mov	sl, r0
 800b216:	2800      	cmp	r0, #0
 800b218:	d13c      	bne.n	800b294 <_dtoa_r+0x2ec>
 800b21a:	4b1b      	ldr	r3, [pc, #108]	@ (800b288 <_dtoa_r+0x2e0>)
 800b21c:	4602      	mov	r2, r0
 800b21e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b222:	e6d8      	b.n	800afd6 <_dtoa_r+0x2e>
 800b224:	2301      	movs	r3, #1
 800b226:	e7e0      	b.n	800b1ea <_dtoa_r+0x242>
 800b228:	2401      	movs	r4, #1
 800b22a:	2300      	movs	r3, #0
 800b22c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b22e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b230:	f04f 33ff 	mov.w	r3, #4294967295
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	9307      	str	r3, [sp, #28]
 800b238:	2200      	movs	r2, #0
 800b23a:	2312      	movs	r3, #18
 800b23c:	e7d0      	b.n	800b1e0 <_dtoa_r+0x238>
 800b23e:	2301      	movs	r3, #1
 800b240:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b242:	e7f5      	b.n	800b230 <_dtoa_r+0x288>
 800b244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	9307      	str	r3, [sp, #28]
 800b24a:	e7d7      	b.n	800b1fc <_dtoa_r+0x254>
 800b24c:	3101      	adds	r1, #1
 800b24e:	0052      	lsls	r2, r2, #1
 800b250:	e7d8      	b.n	800b204 <_dtoa_r+0x25c>
 800b252:	bf00      	nop
 800b254:	f3af 8000 	nop.w
 800b258:	636f4361 	.word	0x636f4361
 800b25c:	3fd287a7 	.word	0x3fd287a7
 800b260:	8b60c8b3 	.word	0x8b60c8b3
 800b264:	3fc68a28 	.word	0x3fc68a28
 800b268:	509f79fb 	.word	0x509f79fb
 800b26c:	3fd34413 	.word	0x3fd34413
 800b270:	08020e35 	.word	0x08020e35
 800b274:	08020e4c 	.word	0x08020e4c
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	08020e05 	.word	0x08020e05
 800b280:	3ff80000 	.word	0x3ff80000
 800b284:	08020f48 	.word	0x08020f48
 800b288:	08020ea4 	.word	0x08020ea4
 800b28c:	08020e31 	.word	0x08020e31
 800b290:	08020e04 	.word	0x08020e04
 800b294:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b298:	6018      	str	r0, [r3, #0]
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	2b0e      	cmp	r3, #14
 800b29e:	f200 80a4 	bhi.w	800b3ea <_dtoa_r+0x442>
 800b2a2:	2c00      	cmp	r4, #0
 800b2a4:	f000 80a1 	beq.w	800b3ea <_dtoa_r+0x442>
 800b2a8:	2f00      	cmp	r7, #0
 800b2aa:	dd33      	ble.n	800b314 <_dtoa_r+0x36c>
 800b2ac:	4bad      	ldr	r3, [pc, #692]	@ (800b564 <_dtoa_r+0x5bc>)
 800b2ae:	f007 020f 	and.w	r2, r7, #15
 800b2b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2b6:	ed93 7b00 	vldr	d7, [r3]
 800b2ba:	05f8      	lsls	r0, r7, #23
 800b2bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b2c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b2c4:	d516      	bpl.n	800b2f4 <_dtoa_r+0x34c>
 800b2c6:	4ba8      	ldr	r3, [pc, #672]	@ (800b568 <_dtoa_r+0x5c0>)
 800b2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2d0:	f7f5 fadc 	bl	800088c <__aeabi_ddiv>
 800b2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d8:	f004 040f 	and.w	r4, r4, #15
 800b2dc:	2603      	movs	r6, #3
 800b2de:	4da2      	ldr	r5, [pc, #648]	@ (800b568 <_dtoa_r+0x5c0>)
 800b2e0:	b954      	cbnz	r4, 800b2f8 <_dtoa_r+0x350>
 800b2e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ea:	f7f5 facf 	bl	800088c <__aeabi_ddiv>
 800b2ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f2:	e028      	b.n	800b346 <_dtoa_r+0x39e>
 800b2f4:	2602      	movs	r6, #2
 800b2f6:	e7f2      	b.n	800b2de <_dtoa_r+0x336>
 800b2f8:	07e1      	lsls	r1, r4, #31
 800b2fa:	d508      	bpl.n	800b30e <_dtoa_r+0x366>
 800b2fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b300:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b304:	f7f5 f998 	bl	8000638 <__aeabi_dmul>
 800b308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b30c:	3601      	adds	r6, #1
 800b30e:	1064      	asrs	r4, r4, #1
 800b310:	3508      	adds	r5, #8
 800b312:	e7e5      	b.n	800b2e0 <_dtoa_r+0x338>
 800b314:	f000 80d2 	beq.w	800b4bc <_dtoa_r+0x514>
 800b318:	427c      	negs	r4, r7
 800b31a:	4b92      	ldr	r3, [pc, #584]	@ (800b564 <_dtoa_r+0x5bc>)
 800b31c:	4d92      	ldr	r5, [pc, #584]	@ (800b568 <_dtoa_r+0x5c0>)
 800b31e:	f004 020f 	and.w	r2, r4, #15
 800b322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b32e:	f7f5 f983 	bl	8000638 <__aeabi_dmul>
 800b332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b336:	1124      	asrs	r4, r4, #4
 800b338:	2300      	movs	r3, #0
 800b33a:	2602      	movs	r6, #2
 800b33c:	2c00      	cmp	r4, #0
 800b33e:	f040 80b2 	bne.w	800b4a6 <_dtoa_r+0x4fe>
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1d3      	bne.n	800b2ee <_dtoa_r+0x346>
 800b346:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b348:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 80b7 	beq.w	800b4c0 <_dtoa_r+0x518>
 800b352:	4b86      	ldr	r3, [pc, #536]	@ (800b56c <_dtoa_r+0x5c4>)
 800b354:	2200      	movs	r2, #0
 800b356:	4620      	mov	r0, r4
 800b358:	4629      	mov	r1, r5
 800b35a:	f7f5 fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800b35e:	2800      	cmp	r0, #0
 800b360:	f000 80ae 	beq.w	800b4c0 <_dtoa_r+0x518>
 800b364:	9b07      	ldr	r3, [sp, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 80aa 	beq.w	800b4c0 <_dtoa_r+0x518>
 800b36c:	9b00      	ldr	r3, [sp, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	dd37      	ble.n	800b3e2 <_dtoa_r+0x43a>
 800b372:	1e7b      	subs	r3, r7, #1
 800b374:	9304      	str	r3, [sp, #16]
 800b376:	4620      	mov	r0, r4
 800b378:	4b7d      	ldr	r3, [pc, #500]	@ (800b570 <_dtoa_r+0x5c8>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	4629      	mov	r1, r5
 800b37e:	f7f5 f95b 	bl	8000638 <__aeabi_dmul>
 800b382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b386:	9c00      	ldr	r4, [sp, #0]
 800b388:	3601      	adds	r6, #1
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7f5 f8ea 	bl	8000564 <__aeabi_i2d>
 800b390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b394:	f7f5 f950 	bl	8000638 <__aeabi_dmul>
 800b398:	4b76      	ldr	r3, [pc, #472]	@ (800b574 <_dtoa_r+0x5cc>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f7f4 ff96 	bl	80002cc <__adddf3>
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b3a6:	2c00      	cmp	r4, #0
 800b3a8:	f040 808d 	bne.w	800b4c6 <_dtoa_r+0x51e>
 800b3ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3b0:	4b71      	ldr	r3, [pc, #452]	@ (800b578 <_dtoa_r+0x5d0>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f7f4 ff88 	bl	80002c8 <__aeabi_dsub>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3c0:	462a      	mov	r2, r5
 800b3c2:	4633      	mov	r3, r6
 800b3c4:	f7f5 fbc8 	bl	8000b58 <__aeabi_dcmpgt>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	f040 828b 	bne.w	800b8e4 <_dtoa_r+0x93c>
 800b3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b3d8:	f7f5 fba0 	bl	8000b1c <__aeabi_dcmplt>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f040 8128 	bne.w	800b632 <_dtoa_r+0x68a>
 800b3e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b3e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b3ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f2c0 815a 	blt.w	800b6a6 <_dtoa_r+0x6fe>
 800b3f2:	2f0e      	cmp	r7, #14
 800b3f4:	f300 8157 	bgt.w	800b6a6 <_dtoa_r+0x6fe>
 800b3f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b564 <_dtoa_r+0x5bc>)
 800b3fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3fe:	ed93 7b00 	vldr	d7, [r3]
 800b402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b404:	2b00      	cmp	r3, #0
 800b406:	ed8d 7b00 	vstr	d7, [sp]
 800b40a:	da03      	bge.n	800b414 <_dtoa_r+0x46c>
 800b40c:	9b07      	ldr	r3, [sp, #28]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f340 8101 	ble.w	800b616 <_dtoa_r+0x66e>
 800b414:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b418:	4656      	mov	r6, sl
 800b41a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b41e:	4620      	mov	r0, r4
 800b420:	4629      	mov	r1, r5
 800b422:	f7f5 fa33 	bl	800088c <__aeabi_ddiv>
 800b426:	f7f5 fbb7 	bl	8000b98 <__aeabi_d2iz>
 800b42a:	4680      	mov	r8, r0
 800b42c:	f7f5 f89a 	bl	8000564 <__aeabi_i2d>
 800b430:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b434:	f7f5 f900 	bl	8000638 <__aeabi_dmul>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b444:	f7f4 ff40 	bl	80002c8 <__aeabi_dsub>
 800b448:	f806 4b01 	strb.w	r4, [r6], #1
 800b44c:	9d07      	ldr	r5, [sp, #28]
 800b44e:	eba6 040a 	sub.w	r4, r6, sl
 800b452:	42a5      	cmp	r5, r4
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	f040 8117 	bne.w	800b68a <_dtoa_r+0x6e2>
 800b45c:	f7f4 ff36 	bl	80002cc <__adddf3>
 800b460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	f7f5 fb76 	bl	8000b58 <__aeabi_dcmpgt>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f040 80f9 	bne.w	800b664 <_dtoa_r+0x6bc>
 800b472:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f5 fb45 	bl	8000b08 <__aeabi_dcmpeq>
 800b47e:	b118      	cbz	r0, 800b488 <_dtoa_r+0x4e0>
 800b480:	f018 0f01 	tst.w	r8, #1
 800b484:	f040 80ee 	bne.w	800b664 <_dtoa_r+0x6bc>
 800b488:	4649      	mov	r1, r9
 800b48a:	4658      	mov	r0, fp
 800b48c:	f000 fc90 	bl	800bdb0 <_Bfree>
 800b490:	2300      	movs	r3, #0
 800b492:	7033      	strb	r3, [r6, #0]
 800b494:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b496:	3701      	adds	r7, #1
 800b498:	601f      	str	r7, [r3, #0]
 800b49a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 831d 	beq.w	800badc <_dtoa_r+0xb34>
 800b4a2:	601e      	str	r6, [r3, #0]
 800b4a4:	e31a      	b.n	800badc <_dtoa_r+0xb34>
 800b4a6:	07e2      	lsls	r2, r4, #31
 800b4a8:	d505      	bpl.n	800b4b6 <_dtoa_r+0x50e>
 800b4aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4ae:	f7f5 f8c3 	bl	8000638 <__aeabi_dmul>
 800b4b2:	3601      	adds	r6, #1
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	1064      	asrs	r4, r4, #1
 800b4b8:	3508      	adds	r5, #8
 800b4ba:	e73f      	b.n	800b33c <_dtoa_r+0x394>
 800b4bc:	2602      	movs	r6, #2
 800b4be:	e742      	b.n	800b346 <_dtoa_r+0x39e>
 800b4c0:	9c07      	ldr	r4, [sp, #28]
 800b4c2:	9704      	str	r7, [sp, #16]
 800b4c4:	e761      	b.n	800b38a <_dtoa_r+0x3e2>
 800b4c6:	4b27      	ldr	r3, [pc, #156]	@ (800b564 <_dtoa_r+0x5bc>)
 800b4c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4d2:	4454      	add	r4, sl
 800b4d4:	2900      	cmp	r1, #0
 800b4d6:	d053      	beq.n	800b580 <_dtoa_r+0x5d8>
 800b4d8:	4928      	ldr	r1, [pc, #160]	@ (800b57c <_dtoa_r+0x5d4>)
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f7f5 f9d6 	bl	800088c <__aeabi_ddiv>
 800b4e0:	4633      	mov	r3, r6
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	f7f4 fef0 	bl	80002c8 <__aeabi_dsub>
 800b4e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4ec:	4656      	mov	r6, sl
 800b4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4f2:	f7f5 fb51 	bl	8000b98 <__aeabi_d2iz>
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	f7f5 f834 	bl	8000564 <__aeabi_i2d>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b504:	f7f4 fee0 	bl	80002c8 <__aeabi_dsub>
 800b508:	3530      	adds	r5, #48	@ 0x30
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b512:	f806 5b01 	strb.w	r5, [r6], #1
 800b516:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b51a:	f7f5 faff 	bl	8000b1c <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d171      	bne.n	800b606 <_dtoa_r+0x65e>
 800b522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b526:	4911      	ldr	r1, [pc, #68]	@ (800b56c <_dtoa_r+0x5c4>)
 800b528:	2000      	movs	r0, #0
 800b52a:	f7f4 fecd 	bl	80002c8 <__aeabi_dsub>
 800b52e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b532:	f7f5 faf3 	bl	8000b1c <__aeabi_dcmplt>
 800b536:	2800      	cmp	r0, #0
 800b538:	f040 8095 	bne.w	800b666 <_dtoa_r+0x6be>
 800b53c:	42a6      	cmp	r6, r4
 800b53e:	f43f af50 	beq.w	800b3e2 <_dtoa_r+0x43a>
 800b542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b546:	4b0a      	ldr	r3, [pc, #40]	@ (800b570 <_dtoa_r+0x5c8>)
 800b548:	2200      	movs	r2, #0
 800b54a:	f7f5 f875 	bl	8000638 <__aeabi_dmul>
 800b54e:	4b08      	ldr	r3, [pc, #32]	@ (800b570 <_dtoa_r+0x5c8>)
 800b550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b554:	2200      	movs	r2, #0
 800b556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55a:	f7f5 f86d 	bl	8000638 <__aeabi_dmul>
 800b55e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b562:	e7c4      	b.n	800b4ee <_dtoa_r+0x546>
 800b564:	08020f48 	.word	0x08020f48
 800b568:	08020f20 	.word	0x08020f20
 800b56c:	3ff00000 	.word	0x3ff00000
 800b570:	40240000 	.word	0x40240000
 800b574:	401c0000 	.word	0x401c0000
 800b578:	40140000 	.word	0x40140000
 800b57c:	3fe00000 	.word	0x3fe00000
 800b580:	4631      	mov	r1, r6
 800b582:	4628      	mov	r0, r5
 800b584:	f7f5 f858 	bl	8000638 <__aeabi_dmul>
 800b588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b58c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b58e:	4656      	mov	r6, sl
 800b590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b594:	f7f5 fb00 	bl	8000b98 <__aeabi_d2iz>
 800b598:	4605      	mov	r5, r0
 800b59a:	f7f4 ffe3 	bl	8000564 <__aeabi_i2d>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5a6:	f7f4 fe8f 	bl	80002c8 <__aeabi_dsub>
 800b5aa:	3530      	adds	r5, #48	@ 0x30
 800b5ac:	f806 5b01 	strb.w	r5, [r6], #1
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	42a6      	cmp	r6, r4
 800b5b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5ba:	f04f 0200 	mov.w	r2, #0
 800b5be:	d124      	bne.n	800b60a <_dtoa_r+0x662>
 800b5c0:	4bac      	ldr	r3, [pc, #688]	@ (800b874 <_dtoa_r+0x8cc>)
 800b5c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b5c6:	f7f4 fe81 	bl	80002cc <__adddf3>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d2:	f7f5 fac1 	bl	8000b58 <__aeabi_dcmpgt>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d145      	bne.n	800b666 <_dtoa_r+0x6be>
 800b5da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5de:	49a5      	ldr	r1, [pc, #660]	@ (800b874 <_dtoa_r+0x8cc>)
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f7f4 fe71 	bl	80002c8 <__aeabi_dsub>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ee:	f7f5 fa95 	bl	8000b1c <__aeabi_dcmplt>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f aef5 	beq.w	800b3e2 <_dtoa_r+0x43a>
 800b5f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b5fa:	1e73      	subs	r3, r6, #1
 800b5fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b602:	2b30      	cmp	r3, #48	@ 0x30
 800b604:	d0f8      	beq.n	800b5f8 <_dtoa_r+0x650>
 800b606:	9f04      	ldr	r7, [sp, #16]
 800b608:	e73e      	b.n	800b488 <_dtoa_r+0x4e0>
 800b60a:	4b9b      	ldr	r3, [pc, #620]	@ (800b878 <_dtoa_r+0x8d0>)
 800b60c:	f7f5 f814 	bl	8000638 <__aeabi_dmul>
 800b610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b614:	e7bc      	b.n	800b590 <_dtoa_r+0x5e8>
 800b616:	d10c      	bne.n	800b632 <_dtoa_r+0x68a>
 800b618:	4b98      	ldr	r3, [pc, #608]	@ (800b87c <_dtoa_r+0x8d4>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b620:	f7f5 f80a 	bl	8000638 <__aeabi_dmul>
 800b624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b628:	f7f5 fa8c 	bl	8000b44 <__aeabi_dcmpge>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	f000 8157 	beq.w	800b8e0 <_dtoa_r+0x938>
 800b632:	2400      	movs	r4, #0
 800b634:	4625      	mov	r5, r4
 800b636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b638:	43db      	mvns	r3, r3
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	4656      	mov	r6, sl
 800b63e:	2700      	movs	r7, #0
 800b640:	4621      	mov	r1, r4
 800b642:	4658      	mov	r0, fp
 800b644:	f000 fbb4 	bl	800bdb0 <_Bfree>
 800b648:	2d00      	cmp	r5, #0
 800b64a:	d0dc      	beq.n	800b606 <_dtoa_r+0x65e>
 800b64c:	b12f      	cbz	r7, 800b65a <_dtoa_r+0x6b2>
 800b64e:	42af      	cmp	r7, r5
 800b650:	d003      	beq.n	800b65a <_dtoa_r+0x6b2>
 800b652:	4639      	mov	r1, r7
 800b654:	4658      	mov	r0, fp
 800b656:	f000 fbab 	bl	800bdb0 <_Bfree>
 800b65a:	4629      	mov	r1, r5
 800b65c:	4658      	mov	r0, fp
 800b65e:	f000 fba7 	bl	800bdb0 <_Bfree>
 800b662:	e7d0      	b.n	800b606 <_dtoa_r+0x65e>
 800b664:	9704      	str	r7, [sp, #16]
 800b666:	4633      	mov	r3, r6
 800b668:	461e      	mov	r6, r3
 800b66a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b66e:	2a39      	cmp	r2, #57	@ 0x39
 800b670:	d107      	bne.n	800b682 <_dtoa_r+0x6da>
 800b672:	459a      	cmp	sl, r3
 800b674:	d1f8      	bne.n	800b668 <_dtoa_r+0x6c0>
 800b676:	9a04      	ldr	r2, [sp, #16]
 800b678:	3201      	adds	r2, #1
 800b67a:	9204      	str	r2, [sp, #16]
 800b67c:	2230      	movs	r2, #48	@ 0x30
 800b67e:	f88a 2000 	strb.w	r2, [sl]
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	3201      	adds	r2, #1
 800b686:	701a      	strb	r2, [r3, #0]
 800b688:	e7bd      	b.n	800b606 <_dtoa_r+0x65e>
 800b68a:	4b7b      	ldr	r3, [pc, #492]	@ (800b878 <_dtoa_r+0x8d0>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	f7f4 ffd3 	bl	8000638 <__aeabi_dmul>
 800b692:	2200      	movs	r2, #0
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	460d      	mov	r5, r1
 800b69a:	f7f5 fa35 	bl	8000b08 <__aeabi_dcmpeq>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f43f aebb 	beq.w	800b41a <_dtoa_r+0x472>
 800b6a4:	e6f0      	b.n	800b488 <_dtoa_r+0x4e0>
 800b6a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6a8:	2a00      	cmp	r2, #0
 800b6aa:	f000 80db 	beq.w	800b864 <_dtoa_r+0x8bc>
 800b6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6b0:	2a01      	cmp	r2, #1
 800b6b2:	f300 80bf 	bgt.w	800b834 <_dtoa_r+0x88c>
 800b6b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	f000 80b7 	beq.w	800b82c <_dtoa_r+0x884>
 800b6be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b6c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6c4:	4646      	mov	r6, r8
 800b6c6:	9a08      	ldr	r2, [sp, #32]
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	441a      	add	r2, r3
 800b6cc:	4658      	mov	r0, fp
 800b6ce:	4498      	add	r8, r3
 800b6d0:	9208      	str	r2, [sp, #32]
 800b6d2:	f000 fc21 	bl	800bf18 <__i2b>
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	b15e      	cbz	r6, 800b6f2 <_dtoa_r+0x74a>
 800b6da:	9b08      	ldr	r3, [sp, #32]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dd08      	ble.n	800b6f2 <_dtoa_r+0x74a>
 800b6e0:	42b3      	cmp	r3, r6
 800b6e2:	9a08      	ldr	r2, [sp, #32]
 800b6e4:	bfa8      	it	ge
 800b6e6:	4633      	movge	r3, r6
 800b6e8:	eba8 0803 	sub.w	r8, r8, r3
 800b6ec:	1af6      	subs	r6, r6, r3
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	9308      	str	r3, [sp, #32]
 800b6f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6f4:	b1f3      	cbz	r3, 800b734 <_dtoa_r+0x78c>
 800b6f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 80b7 	beq.w	800b86c <_dtoa_r+0x8c4>
 800b6fe:	b18c      	cbz	r4, 800b724 <_dtoa_r+0x77c>
 800b700:	4629      	mov	r1, r5
 800b702:	4622      	mov	r2, r4
 800b704:	4658      	mov	r0, fp
 800b706:	f000 fcc7 	bl	800c098 <__pow5mult>
 800b70a:	464a      	mov	r2, r9
 800b70c:	4601      	mov	r1, r0
 800b70e:	4605      	mov	r5, r0
 800b710:	4658      	mov	r0, fp
 800b712:	f000 fc17 	bl	800bf44 <__multiply>
 800b716:	4649      	mov	r1, r9
 800b718:	9004      	str	r0, [sp, #16]
 800b71a:	4658      	mov	r0, fp
 800b71c:	f000 fb48 	bl	800bdb0 <_Bfree>
 800b720:	9b04      	ldr	r3, [sp, #16]
 800b722:	4699      	mov	r9, r3
 800b724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b726:	1b1a      	subs	r2, r3, r4
 800b728:	d004      	beq.n	800b734 <_dtoa_r+0x78c>
 800b72a:	4649      	mov	r1, r9
 800b72c:	4658      	mov	r0, fp
 800b72e:	f000 fcb3 	bl	800c098 <__pow5mult>
 800b732:	4681      	mov	r9, r0
 800b734:	2101      	movs	r1, #1
 800b736:	4658      	mov	r0, fp
 800b738:	f000 fbee 	bl	800bf18 <__i2b>
 800b73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73e:	4604      	mov	r4, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 81cf 	beq.w	800bae4 <_dtoa_r+0xb3c>
 800b746:	461a      	mov	r2, r3
 800b748:	4601      	mov	r1, r0
 800b74a:	4658      	mov	r0, fp
 800b74c:	f000 fca4 	bl	800c098 <__pow5mult>
 800b750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b752:	2b01      	cmp	r3, #1
 800b754:	4604      	mov	r4, r0
 800b756:	f300 8095 	bgt.w	800b884 <_dtoa_r+0x8dc>
 800b75a:	9b02      	ldr	r3, [sp, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f040 8087 	bne.w	800b870 <_dtoa_r+0x8c8>
 800b762:	9b03      	ldr	r3, [sp, #12]
 800b764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f040 8089 	bne.w	800b880 <_dtoa_r+0x8d8>
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b774:	0d1b      	lsrs	r3, r3, #20
 800b776:	051b      	lsls	r3, r3, #20
 800b778:	b12b      	cbz	r3, 800b786 <_dtoa_r+0x7de>
 800b77a:	9b08      	ldr	r3, [sp, #32]
 800b77c:	3301      	adds	r3, #1
 800b77e:	9308      	str	r3, [sp, #32]
 800b780:	f108 0801 	add.w	r8, r8, #1
 800b784:	2301      	movs	r3, #1
 800b786:	930a      	str	r3, [sp, #40]	@ 0x28
 800b788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 81b0 	beq.w	800baf0 <_dtoa_r+0xb48>
 800b790:	6923      	ldr	r3, [r4, #16]
 800b792:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b796:	6918      	ldr	r0, [r3, #16]
 800b798:	f000 fb72 	bl	800be80 <__hi0bits>
 800b79c:	f1c0 0020 	rsb	r0, r0, #32
 800b7a0:	9b08      	ldr	r3, [sp, #32]
 800b7a2:	4418      	add	r0, r3
 800b7a4:	f010 001f 	ands.w	r0, r0, #31
 800b7a8:	d077      	beq.n	800b89a <_dtoa_r+0x8f2>
 800b7aa:	f1c0 0320 	rsb	r3, r0, #32
 800b7ae:	2b04      	cmp	r3, #4
 800b7b0:	dd6b      	ble.n	800b88a <_dtoa_r+0x8e2>
 800b7b2:	9b08      	ldr	r3, [sp, #32]
 800b7b4:	f1c0 001c 	rsb	r0, r0, #28
 800b7b8:	4403      	add	r3, r0
 800b7ba:	4480      	add	r8, r0
 800b7bc:	4406      	add	r6, r0
 800b7be:	9308      	str	r3, [sp, #32]
 800b7c0:	f1b8 0f00 	cmp.w	r8, #0
 800b7c4:	dd05      	ble.n	800b7d2 <_dtoa_r+0x82a>
 800b7c6:	4649      	mov	r1, r9
 800b7c8:	4642      	mov	r2, r8
 800b7ca:	4658      	mov	r0, fp
 800b7cc:	f000 fcbe 	bl	800c14c <__lshift>
 800b7d0:	4681      	mov	r9, r0
 800b7d2:	9b08      	ldr	r3, [sp, #32]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	dd05      	ble.n	800b7e4 <_dtoa_r+0x83c>
 800b7d8:	4621      	mov	r1, r4
 800b7da:	461a      	mov	r2, r3
 800b7dc:	4658      	mov	r0, fp
 800b7de:	f000 fcb5 	bl	800c14c <__lshift>
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d059      	beq.n	800b89e <_dtoa_r+0x8f6>
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4648      	mov	r0, r9
 800b7ee:	f000 fd19 	bl	800c224 <__mcmp>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	da53      	bge.n	800b89e <_dtoa_r+0x8f6>
 800b7f6:	1e7b      	subs	r3, r7, #1
 800b7f8:	9304      	str	r3, [sp, #16]
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	220a      	movs	r2, #10
 800b800:	4658      	mov	r0, fp
 800b802:	f000 faf7 	bl	800bdf4 <__multadd>
 800b806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b808:	4681      	mov	r9, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f000 8172 	beq.w	800baf4 <_dtoa_r+0xb4c>
 800b810:	2300      	movs	r3, #0
 800b812:	4629      	mov	r1, r5
 800b814:	220a      	movs	r2, #10
 800b816:	4658      	mov	r0, fp
 800b818:	f000 faec 	bl	800bdf4 <__multadd>
 800b81c:	9b00      	ldr	r3, [sp, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	4605      	mov	r5, r0
 800b822:	dc67      	bgt.n	800b8f4 <_dtoa_r+0x94c>
 800b824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b826:	2b02      	cmp	r3, #2
 800b828:	dc41      	bgt.n	800b8ae <_dtoa_r+0x906>
 800b82a:	e063      	b.n	800b8f4 <_dtoa_r+0x94c>
 800b82c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b82e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b832:	e746      	b.n	800b6c2 <_dtoa_r+0x71a>
 800b834:	9b07      	ldr	r3, [sp, #28]
 800b836:	1e5c      	subs	r4, r3, #1
 800b838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	bfbf      	itttt	lt
 800b83e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b840:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b842:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b844:	1ae3      	sublt	r3, r4, r3
 800b846:	bfb4      	ite	lt
 800b848:	18d2      	addlt	r2, r2, r3
 800b84a:	1b1c      	subge	r4, r3, r4
 800b84c:	9b07      	ldr	r3, [sp, #28]
 800b84e:	bfbc      	itt	lt
 800b850:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b852:	2400      	movlt	r4, #0
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfb5      	itete	lt
 800b858:	eba8 0603 	sublt.w	r6, r8, r3
 800b85c:	9b07      	ldrge	r3, [sp, #28]
 800b85e:	2300      	movlt	r3, #0
 800b860:	4646      	movge	r6, r8
 800b862:	e730      	b.n	800b6c6 <_dtoa_r+0x71e>
 800b864:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b866:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b868:	4646      	mov	r6, r8
 800b86a:	e735      	b.n	800b6d8 <_dtoa_r+0x730>
 800b86c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b86e:	e75c      	b.n	800b72a <_dtoa_r+0x782>
 800b870:	2300      	movs	r3, #0
 800b872:	e788      	b.n	800b786 <_dtoa_r+0x7de>
 800b874:	3fe00000 	.word	0x3fe00000
 800b878:	40240000 	.word	0x40240000
 800b87c:	40140000 	.word	0x40140000
 800b880:	9b02      	ldr	r3, [sp, #8]
 800b882:	e780      	b.n	800b786 <_dtoa_r+0x7de>
 800b884:	2300      	movs	r3, #0
 800b886:	930a      	str	r3, [sp, #40]	@ 0x28
 800b888:	e782      	b.n	800b790 <_dtoa_r+0x7e8>
 800b88a:	d099      	beq.n	800b7c0 <_dtoa_r+0x818>
 800b88c:	9a08      	ldr	r2, [sp, #32]
 800b88e:	331c      	adds	r3, #28
 800b890:	441a      	add	r2, r3
 800b892:	4498      	add	r8, r3
 800b894:	441e      	add	r6, r3
 800b896:	9208      	str	r2, [sp, #32]
 800b898:	e792      	b.n	800b7c0 <_dtoa_r+0x818>
 800b89a:	4603      	mov	r3, r0
 800b89c:	e7f6      	b.n	800b88c <_dtoa_r+0x8e4>
 800b89e:	9b07      	ldr	r3, [sp, #28]
 800b8a0:	9704      	str	r7, [sp, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dc20      	bgt.n	800b8e8 <_dtoa_r+0x940>
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	dd1e      	ble.n	800b8ec <_dtoa_r+0x944>
 800b8ae:	9b00      	ldr	r3, [sp, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f47f aec0 	bne.w	800b636 <_dtoa_r+0x68e>
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	2205      	movs	r2, #5
 800b8ba:	4658      	mov	r0, fp
 800b8bc:	f000 fa9a 	bl	800bdf4 <__multadd>
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4648      	mov	r0, r9
 800b8c6:	f000 fcad 	bl	800c224 <__mcmp>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	f77f aeb3 	ble.w	800b636 <_dtoa_r+0x68e>
 800b8d0:	4656      	mov	r6, sl
 800b8d2:	2331      	movs	r3, #49	@ 0x31
 800b8d4:	f806 3b01 	strb.w	r3, [r6], #1
 800b8d8:	9b04      	ldr	r3, [sp, #16]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	9304      	str	r3, [sp, #16]
 800b8de:	e6ae      	b.n	800b63e <_dtoa_r+0x696>
 800b8e0:	9c07      	ldr	r4, [sp, #28]
 800b8e2:	9704      	str	r7, [sp, #16]
 800b8e4:	4625      	mov	r5, r4
 800b8e6:	e7f3      	b.n	800b8d0 <_dtoa_r+0x928>
 800b8e8:	9b07      	ldr	r3, [sp, #28]
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 8104 	beq.w	800bafc <_dtoa_r+0xb54>
 800b8f4:	2e00      	cmp	r6, #0
 800b8f6:	dd05      	ble.n	800b904 <_dtoa_r+0x95c>
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	4658      	mov	r0, fp
 800b8fe:	f000 fc25 	bl	800c14c <__lshift>
 800b902:	4605      	mov	r5, r0
 800b904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b906:	2b00      	cmp	r3, #0
 800b908:	d05a      	beq.n	800b9c0 <_dtoa_r+0xa18>
 800b90a:	6869      	ldr	r1, [r5, #4]
 800b90c:	4658      	mov	r0, fp
 800b90e:	f000 fa0f 	bl	800bd30 <_Balloc>
 800b912:	4606      	mov	r6, r0
 800b914:	b928      	cbnz	r0, 800b922 <_dtoa_r+0x97a>
 800b916:	4b84      	ldr	r3, [pc, #528]	@ (800bb28 <_dtoa_r+0xb80>)
 800b918:	4602      	mov	r2, r0
 800b91a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b91e:	f7ff bb5a 	b.w	800afd6 <_dtoa_r+0x2e>
 800b922:	692a      	ldr	r2, [r5, #16]
 800b924:	3202      	adds	r2, #2
 800b926:	0092      	lsls	r2, r2, #2
 800b928:	f105 010c 	add.w	r1, r5, #12
 800b92c:	300c      	adds	r0, #12
 800b92e:	f000 ffaf 	bl	800c890 <memcpy>
 800b932:	2201      	movs	r2, #1
 800b934:	4631      	mov	r1, r6
 800b936:	4658      	mov	r0, fp
 800b938:	f000 fc08 	bl	800c14c <__lshift>
 800b93c:	f10a 0301 	add.w	r3, sl, #1
 800b940:	9307      	str	r3, [sp, #28]
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	4453      	add	r3, sl
 800b946:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b948:	9b02      	ldr	r3, [sp, #8]
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	462f      	mov	r7, r5
 800b950:	930a      	str	r3, [sp, #40]	@ 0x28
 800b952:	4605      	mov	r5, r0
 800b954:	9b07      	ldr	r3, [sp, #28]
 800b956:	4621      	mov	r1, r4
 800b958:	3b01      	subs	r3, #1
 800b95a:	4648      	mov	r0, r9
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	f7ff fa9a 	bl	800ae96 <quorem>
 800b962:	4639      	mov	r1, r7
 800b964:	9002      	str	r0, [sp, #8]
 800b966:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b96a:	4648      	mov	r0, r9
 800b96c:	f000 fc5a 	bl	800c224 <__mcmp>
 800b970:	462a      	mov	r2, r5
 800b972:	9008      	str	r0, [sp, #32]
 800b974:	4621      	mov	r1, r4
 800b976:	4658      	mov	r0, fp
 800b978:	f000 fc70 	bl	800c25c <__mdiff>
 800b97c:	68c2      	ldr	r2, [r0, #12]
 800b97e:	4606      	mov	r6, r0
 800b980:	bb02      	cbnz	r2, 800b9c4 <_dtoa_r+0xa1c>
 800b982:	4601      	mov	r1, r0
 800b984:	4648      	mov	r0, r9
 800b986:	f000 fc4d 	bl	800c224 <__mcmp>
 800b98a:	4602      	mov	r2, r0
 800b98c:	4631      	mov	r1, r6
 800b98e:	4658      	mov	r0, fp
 800b990:	920e      	str	r2, [sp, #56]	@ 0x38
 800b992:	f000 fa0d 	bl	800bdb0 <_Bfree>
 800b996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b99a:	9e07      	ldr	r6, [sp, #28]
 800b99c:	ea43 0102 	orr.w	r1, r3, r2
 800b9a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9a2:	4319      	orrs	r1, r3
 800b9a4:	d110      	bne.n	800b9c8 <_dtoa_r+0xa20>
 800b9a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9aa:	d029      	beq.n	800ba00 <_dtoa_r+0xa58>
 800b9ac:	9b08      	ldr	r3, [sp, #32]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	dd02      	ble.n	800b9b8 <_dtoa_r+0xa10>
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b9b8:	9b00      	ldr	r3, [sp, #0]
 800b9ba:	f883 8000 	strb.w	r8, [r3]
 800b9be:	e63f      	b.n	800b640 <_dtoa_r+0x698>
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	e7bb      	b.n	800b93c <_dtoa_r+0x994>
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	e7e1      	b.n	800b98c <_dtoa_r+0x9e4>
 800b9c8:	9b08      	ldr	r3, [sp, #32]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	db04      	blt.n	800b9d8 <_dtoa_r+0xa30>
 800b9ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9d0:	430b      	orrs	r3, r1
 800b9d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9d4:	430b      	orrs	r3, r1
 800b9d6:	d120      	bne.n	800ba1a <_dtoa_r+0xa72>
 800b9d8:	2a00      	cmp	r2, #0
 800b9da:	dded      	ble.n	800b9b8 <_dtoa_r+0xa10>
 800b9dc:	4649      	mov	r1, r9
 800b9de:	2201      	movs	r2, #1
 800b9e0:	4658      	mov	r0, fp
 800b9e2:	f000 fbb3 	bl	800c14c <__lshift>
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	4681      	mov	r9, r0
 800b9ea:	f000 fc1b 	bl	800c224 <__mcmp>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	dc03      	bgt.n	800b9fa <_dtoa_r+0xa52>
 800b9f2:	d1e1      	bne.n	800b9b8 <_dtoa_r+0xa10>
 800b9f4:	f018 0f01 	tst.w	r8, #1
 800b9f8:	d0de      	beq.n	800b9b8 <_dtoa_r+0xa10>
 800b9fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9fe:	d1d8      	bne.n	800b9b2 <_dtoa_r+0xa0a>
 800ba00:	9a00      	ldr	r2, [sp, #0]
 800ba02:	2339      	movs	r3, #57	@ 0x39
 800ba04:	7013      	strb	r3, [r2, #0]
 800ba06:	4633      	mov	r3, r6
 800ba08:	461e      	mov	r6, r3
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba10:	2a39      	cmp	r2, #57	@ 0x39
 800ba12:	d052      	beq.n	800baba <_dtoa_r+0xb12>
 800ba14:	3201      	adds	r2, #1
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	e612      	b.n	800b640 <_dtoa_r+0x698>
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	dd07      	ble.n	800ba2e <_dtoa_r+0xa86>
 800ba1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba22:	d0ed      	beq.n	800ba00 <_dtoa_r+0xa58>
 800ba24:	9a00      	ldr	r2, [sp, #0]
 800ba26:	f108 0301 	add.w	r3, r8, #1
 800ba2a:	7013      	strb	r3, [r2, #0]
 800ba2c:	e608      	b.n	800b640 <_dtoa_r+0x698>
 800ba2e:	9b07      	ldr	r3, [sp, #28]
 800ba30:	9a07      	ldr	r2, [sp, #28]
 800ba32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d028      	beq.n	800ba8e <_dtoa_r+0xae6>
 800ba3c:	4649      	mov	r1, r9
 800ba3e:	2300      	movs	r3, #0
 800ba40:	220a      	movs	r2, #10
 800ba42:	4658      	mov	r0, fp
 800ba44:	f000 f9d6 	bl	800bdf4 <__multadd>
 800ba48:	42af      	cmp	r7, r5
 800ba4a:	4681      	mov	r9, r0
 800ba4c:	f04f 0300 	mov.w	r3, #0
 800ba50:	f04f 020a 	mov.w	r2, #10
 800ba54:	4639      	mov	r1, r7
 800ba56:	4658      	mov	r0, fp
 800ba58:	d107      	bne.n	800ba6a <_dtoa_r+0xac2>
 800ba5a:	f000 f9cb 	bl	800bdf4 <__multadd>
 800ba5e:	4607      	mov	r7, r0
 800ba60:	4605      	mov	r5, r0
 800ba62:	9b07      	ldr	r3, [sp, #28]
 800ba64:	3301      	adds	r3, #1
 800ba66:	9307      	str	r3, [sp, #28]
 800ba68:	e774      	b.n	800b954 <_dtoa_r+0x9ac>
 800ba6a:	f000 f9c3 	bl	800bdf4 <__multadd>
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4607      	mov	r7, r0
 800ba72:	2300      	movs	r3, #0
 800ba74:	220a      	movs	r2, #10
 800ba76:	4658      	mov	r0, fp
 800ba78:	f000 f9bc 	bl	800bdf4 <__multadd>
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	e7f0      	b.n	800ba62 <_dtoa_r+0xaba>
 800ba80:	9b00      	ldr	r3, [sp, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	bfcc      	ite	gt
 800ba86:	461e      	movgt	r6, r3
 800ba88:	2601      	movle	r6, #1
 800ba8a:	4456      	add	r6, sl
 800ba8c:	2700      	movs	r7, #0
 800ba8e:	4649      	mov	r1, r9
 800ba90:	2201      	movs	r2, #1
 800ba92:	4658      	mov	r0, fp
 800ba94:	f000 fb5a 	bl	800c14c <__lshift>
 800ba98:	4621      	mov	r1, r4
 800ba9a:	4681      	mov	r9, r0
 800ba9c:	f000 fbc2 	bl	800c224 <__mcmp>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	dcb0      	bgt.n	800ba06 <_dtoa_r+0xa5e>
 800baa4:	d102      	bne.n	800baac <_dtoa_r+0xb04>
 800baa6:	f018 0f01 	tst.w	r8, #1
 800baaa:	d1ac      	bne.n	800ba06 <_dtoa_r+0xa5e>
 800baac:	4633      	mov	r3, r6
 800baae:	461e      	mov	r6, r3
 800bab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bab4:	2a30      	cmp	r2, #48	@ 0x30
 800bab6:	d0fa      	beq.n	800baae <_dtoa_r+0xb06>
 800bab8:	e5c2      	b.n	800b640 <_dtoa_r+0x698>
 800baba:	459a      	cmp	sl, r3
 800babc:	d1a4      	bne.n	800ba08 <_dtoa_r+0xa60>
 800babe:	9b04      	ldr	r3, [sp, #16]
 800bac0:	3301      	adds	r3, #1
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	2331      	movs	r3, #49	@ 0x31
 800bac6:	f88a 3000 	strb.w	r3, [sl]
 800baca:	e5b9      	b.n	800b640 <_dtoa_r+0x698>
 800bacc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bace:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb2c <_dtoa_r+0xb84>
 800bad2:	b11b      	cbz	r3, 800badc <_dtoa_r+0xb34>
 800bad4:	f10a 0308 	add.w	r3, sl, #8
 800bad8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	4650      	mov	r0, sl
 800bade:	b019      	add	sp, #100	@ 0x64
 800bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	f77f ae37 	ble.w	800b75a <_dtoa_r+0x7b2>
 800baec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baee:	930a      	str	r3, [sp, #40]	@ 0x28
 800baf0:	2001      	movs	r0, #1
 800baf2:	e655      	b.n	800b7a0 <_dtoa_r+0x7f8>
 800baf4:	9b00      	ldr	r3, [sp, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f77f aed6 	ble.w	800b8a8 <_dtoa_r+0x900>
 800bafc:	4656      	mov	r6, sl
 800bafe:	4621      	mov	r1, r4
 800bb00:	4648      	mov	r0, r9
 800bb02:	f7ff f9c8 	bl	800ae96 <quorem>
 800bb06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb0a:	f806 8b01 	strb.w	r8, [r6], #1
 800bb0e:	9b00      	ldr	r3, [sp, #0]
 800bb10:	eba6 020a 	sub.w	r2, r6, sl
 800bb14:	4293      	cmp	r3, r2
 800bb16:	ddb3      	ble.n	800ba80 <_dtoa_r+0xad8>
 800bb18:	4649      	mov	r1, r9
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	220a      	movs	r2, #10
 800bb1e:	4658      	mov	r0, fp
 800bb20:	f000 f968 	bl	800bdf4 <__multadd>
 800bb24:	4681      	mov	r9, r0
 800bb26:	e7ea      	b.n	800bafe <_dtoa_r+0xb56>
 800bb28:	08020ea4 	.word	0x08020ea4
 800bb2c:	08020e28 	.word	0x08020e28

0800bb30 <_free_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4605      	mov	r5, r0
 800bb34:	2900      	cmp	r1, #0
 800bb36:	d041      	beq.n	800bbbc <_free_r+0x8c>
 800bb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb3c:	1f0c      	subs	r4, r1, #4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	bfb8      	it	lt
 800bb42:	18e4      	addlt	r4, r4, r3
 800bb44:	f000 f8e8 	bl	800bd18 <__malloc_lock>
 800bb48:	4a1d      	ldr	r2, [pc, #116]	@ (800bbc0 <_free_r+0x90>)
 800bb4a:	6813      	ldr	r3, [r2, #0]
 800bb4c:	b933      	cbnz	r3, 800bb5c <_free_r+0x2c>
 800bb4e:	6063      	str	r3, [r4, #4]
 800bb50:	6014      	str	r4, [r2, #0]
 800bb52:	4628      	mov	r0, r5
 800bb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb58:	f000 b8e4 	b.w	800bd24 <__malloc_unlock>
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d908      	bls.n	800bb72 <_free_r+0x42>
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	1821      	adds	r1, r4, r0
 800bb64:	428b      	cmp	r3, r1
 800bb66:	bf01      	itttt	eq
 800bb68:	6819      	ldreq	r1, [r3, #0]
 800bb6a:	685b      	ldreq	r3, [r3, #4]
 800bb6c:	1809      	addeq	r1, r1, r0
 800bb6e:	6021      	streq	r1, [r4, #0]
 800bb70:	e7ed      	b.n	800bb4e <_free_r+0x1e>
 800bb72:	461a      	mov	r2, r3
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	b10b      	cbz	r3, 800bb7c <_free_r+0x4c>
 800bb78:	42a3      	cmp	r3, r4
 800bb7a:	d9fa      	bls.n	800bb72 <_free_r+0x42>
 800bb7c:	6811      	ldr	r1, [r2, #0]
 800bb7e:	1850      	adds	r0, r2, r1
 800bb80:	42a0      	cmp	r0, r4
 800bb82:	d10b      	bne.n	800bb9c <_free_r+0x6c>
 800bb84:	6820      	ldr	r0, [r4, #0]
 800bb86:	4401      	add	r1, r0
 800bb88:	1850      	adds	r0, r2, r1
 800bb8a:	4283      	cmp	r3, r0
 800bb8c:	6011      	str	r1, [r2, #0]
 800bb8e:	d1e0      	bne.n	800bb52 <_free_r+0x22>
 800bb90:	6818      	ldr	r0, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	6053      	str	r3, [r2, #4]
 800bb96:	4408      	add	r0, r1
 800bb98:	6010      	str	r0, [r2, #0]
 800bb9a:	e7da      	b.n	800bb52 <_free_r+0x22>
 800bb9c:	d902      	bls.n	800bba4 <_free_r+0x74>
 800bb9e:	230c      	movs	r3, #12
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	e7d6      	b.n	800bb52 <_free_r+0x22>
 800bba4:	6820      	ldr	r0, [r4, #0]
 800bba6:	1821      	adds	r1, r4, r0
 800bba8:	428b      	cmp	r3, r1
 800bbaa:	bf04      	itt	eq
 800bbac:	6819      	ldreq	r1, [r3, #0]
 800bbae:	685b      	ldreq	r3, [r3, #4]
 800bbb0:	6063      	str	r3, [r4, #4]
 800bbb2:	bf04      	itt	eq
 800bbb4:	1809      	addeq	r1, r1, r0
 800bbb6:	6021      	streq	r1, [r4, #0]
 800bbb8:	6054      	str	r4, [r2, #4]
 800bbba:	e7ca      	b.n	800bb52 <_free_r+0x22>
 800bbbc:	bd38      	pop	{r3, r4, r5, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20018e70 	.word	0x20018e70

0800bbc4 <malloc>:
 800bbc4:	4b02      	ldr	r3, [pc, #8]	@ (800bbd0 <malloc+0xc>)
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	f000 b825 	b.w	800bc18 <_malloc_r>
 800bbce:	bf00      	nop
 800bbd0:	20000018 	.word	0x20000018

0800bbd4 <sbrk_aligned>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	4e0f      	ldr	r6, [pc, #60]	@ (800bc14 <sbrk_aligned+0x40>)
 800bbd8:	460c      	mov	r4, r1
 800bbda:	6831      	ldr	r1, [r6, #0]
 800bbdc:	4605      	mov	r5, r0
 800bbde:	b911      	cbnz	r1, 800bbe6 <sbrk_aligned+0x12>
 800bbe0:	f000 fe46 	bl	800c870 <_sbrk_r>
 800bbe4:	6030      	str	r0, [r6, #0]
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f000 fe41 	bl	800c870 <_sbrk_r>
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	d103      	bne.n	800bbfa <sbrk_aligned+0x26>
 800bbf2:	f04f 34ff 	mov.w	r4, #4294967295
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	bd70      	pop	{r4, r5, r6, pc}
 800bbfa:	1cc4      	adds	r4, r0, #3
 800bbfc:	f024 0403 	bic.w	r4, r4, #3
 800bc00:	42a0      	cmp	r0, r4
 800bc02:	d0f8      	beq.n	800bbf6 <sbrk_aligned+0x22>
 800bc04:	1a21      	subs	r1, r4, r0
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 fe32 	bl	800c870 <_sbrk_r>
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d1f2      	bne.n	800bbf6 <sbrk_aligned+0x22>
 800bc10:	e7ef      	b.n	800bbf2 <sbrk_aligned+0x1e>
 800bc12:	bf00      	nop
 800bc14:	20018e6c 	.word	0x20018e6c

0800bc18 <_malloc_r>:
 800bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	1ccd      	adds	r5, r1, #3
 800bc1e:	f025 0503 	bic.w	r5, r5, #3
 800bc22:	3508      	adds	r5, #8
 800bc24:	2d0c      	cmp	r5, #12
 800bc26:	bf38      	it	cc
 800bc28:	250c      	movcc	r5, #12
 800bc2a:	2d00      	cmp	r5, #0
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	db01      	blt.n	800bc34 <_malloc_r+0x1c>
 800bc30:	42a9      	cmp	r1, r5
 800bc32:	d904      	bls.n	800bc3e <_malloc_r+0x26>
 800bc34:	230c      	movs	r3, #12
 800bc36:	6033      	str	r3, [r6, #0]
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd14 <_malloc_r+0xfc>
 800bc42:	f000 f869 	bl	800bd18 <__malloc_lock>
 800bc46:	f8d8 3000 	ldr.w	r3, [r8]
 800bc4a:	461c      	mov	r4, r3
 800bc4c:	bb44      	cbnz	r4, 800bca0 <_malloc_r+0x88>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4630      	mov	r0, r6
 800bc52:	f7ff ffbf 	bl	800bbd4 <sbrk_aligned>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	4604      	mov	r4, r0
 800bc5a:	d158      	bne.n	800bd0e <_malloc_r+0xf6>
 800bc5c:	f8d8 4000 	ldr.w	r4, [r8]
 800bc60:	4627      	mov	r7, r4
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	d143      	bne.n	800bcee <_malloc_r+0xd6>
 800bc66:	2c00      	cmp	r4, #0
 800bc68:	d04b      	beq.n	800bd02 <_malloc_r+0xea>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	4639      	mov	r1, r7
 800bc6e:	4630      	mov	r0, r6
 800bc70:	eb04 0903 	add.w	r9, r4, r3
 800bc74:	f000 fdfc 	bl	800c870 <_sbrk_r>
 800bc78:	4581      	cmp	r9, r0
 800bc7a:	d142      	bne.n	800bd02 <_malloc_r+0xea>
 800bc7c:	6821      	ldr	r1, [r4, #0]
 800bc7e:	1a6d      	subs	r5, r5, r1
 800bc80:	4629      	mov	r1, r5
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7ff ffa6 	bl	800bbd4 <sbrk_aligned>
 800bc88:	3001      	adds	r0, #1
 800bc8a:	d03a      	beq.n	800bd02 <_malloc_r+0xea>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	442b      	add	r3, r5
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	f8d8 3000 	ldr.w	r3, [r8]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	bb62      	cbnz	r2, 800bcf4 <_malloc_r+0xdc>
 800bc9a:	f8c8 7000 	str.w	r7, [r8]
 800bc9e:	e00f      	b.n	800bcc0 <_malloc_r+0xa8>
 800bca0:	6822      	ldr	r2, [r4, #0]
 800bca2:	1b52      	subs	r2, r2, r5
 800bca4:	d420      	bmi.n	800bce8 <_malloc_r+0xd0>
 800bca6:	2a0b      	cmp	r2, #11
 800bca8:	d917      	bls.n	800bcda <_malloc_r+0xc2>
 800bcaa:	1961      	adds	r1, r4, r5
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	6025      	str	r5, [r4, #0]
 800bcb0:	bf18      	it	ne
 800bcb2:	6059      	strne	r1, [r3, #4]
 800bcb4:	6863      	ldr	r3, [r4, #4]
 800bcb6:	bf08      	it	eq
 800bcb8:	f8c8 1000 	streq.w	r1, [r8]
 800bcbc:	5162      	str	r2, [r4, r5]
 800bcbe:	604b      	str	r3, [r1, #4]
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f000 f82f 	bl	800bd24 <__malloc_unlock>
 800bcc6:	f104 000b 	add.w	r0, r4, #11
 800bcca:	1d23      	adds	r3, r4, #4
 800bccc:	f020 0007 	bic.w	r0, r0, #7
 800bcd0:	1ac2      	subs	r2, r0, r3
 800bcd2:	bf1c      	itt	ne
 800bcd4:	1a1b      	subne	r3, r3, r0
 800bcd6:	50a3      	strne	r3, [r4, r2]
 800bcd8:	e7af      	b.n	800bc3a <_malloc_r+0x22>
 800bcda:	6862      	ldr	r2, [r4, #4]
 800bcdc:	42a3      	cmp	r3, r4
 800bcde:	bf0c      	ite	eq
 800bce0:	f8c8 2000 	streq.w	r2, [r8]
 800bce4:	605a      	strne	r2, [r3, #4]
 800bce6:	e7eb      	b.n	800bcc0 <_malloc_r+0xa8>
 800bce8:	4623      	mov	r3, r4
 800bcea:	6864      	ldr	r4, [r4, #4]
 800bcec:	e7ae      	b.n	800bc4c <_malloc_r+0x34>
 800bcee:	463c      	mov	r4, r7
 800bcf0:	687f      	ldr	r7, [r7, #4]
 800bcf2:	e7b6      	b.n	800bc62 <_malloc_r+0x4a>
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	42a3      	cmp	r3, r4
 800bcfa:	d1fb      	bne.n	800bcf4 <_malloc_r+0xdc>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6053      	str	r3, [r2, #4]
 800bd00:	e7de      	b.n	800bcc0 <_malloc_r+0xa8>
 800bd02:	230c      	movs	r3, #12
 800bd04:	6033      	str	r3, [r6, #0]
 800bd06:	4630      	mov	r0, r6
 800bd08:	f000 f80c 	bl	800bd24 <__malloc_unlock>
 800bd0c:	e794      	b.n	800bc38 <_malloc_r+0x20>
 800bd0e:	6005      	str	r5, [r0, #0]
 800bd10:	e7d6      	b.n	800bcc0 <_malloc_r+0xa8>
 800bd12:	bf00      	nop
 800bd14:	20018e70 	.word	0x20018e70

0800bd18 <__malloc_lock>:
 800bd18:	4801      	ldr	r0, [pc, #4]	@ (800bd20 <__malloc_lock+0x8>)
 800bd1a:	f7ff b8ba 	b.w	800ae92 <__retarget_lock_acquire_recursive>
 800bd1e:	bf00      	nop
 800bd20:	20018e68 	.word	0x20018e68

0800bd24 <__malloc_unlock>:
 800bd24:	4801      	ldr	r0, [pc, #4]	@ (800bd2c <__malloc_unlock+0x8>)
 800bd26:	f7ff b8b5 	b.w	800ae94 <__retarget_lock_release_recursive>
 800bd2a:	bf00      	nop
 800bd2c:	20018e68 	.word	0x20018e68

0800bd30 <_Balloc>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	69c6      	ldr	r6, [r0, #28]
 800bd34:	4604      	mov	r4, r0
 800bd36:	460d      	mov	r5, r1
 800bd38:	b976      	cbnz	r6, 800bd58 <_Balloc+0x28>
 800bd3a:	2010      	movs	r0, #16
 800bd3c:	f7ff ff42 	bl	800bbc4 <malloc>
 800bd40:	4602      	mov	r2, r0
 800bd42:	61e0      	str	r0, [r4, #28]
 800bd44:	b920      	cbnz	r0, 800bd50 <_Balloc+0x20>
 800bd46:	4b18      	ldr	r3, [pc, #96]	@ (800bda8 <_Balloc+0x78>)
 800bd48:	4818      	ldr	r0, [pc, #96]	@ (800bdac <_Balloc+0x7c>)
 800bd4a:	216b      	movs	r1, #107	@ 0x6b
 800bd4c:	f000 fdae 	bl	800c8ac <__assert_func>
 800bd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd54:	6006      	str	r6, [r0, #0]
 800bd56:	60c6      	str	r6, [r0, #12]
 800bd58:	69e6      	ldr	r6, [r4, #28]
 800bd5a:	68f3      	ldr	r3, [r6, #12]
 800bd5c:	b183      	cbz	r3, 800bd80 <_Balloc+0x50>
 800bd5e:	69e3      	ldr	r3, [r4, #28]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd66:	b9b8      	cbnz	r0, 800bd98 <_Balloc+0x68>
 800bd68:	2101      	movs	r1, #1
 800bd6a:	fa01 f605 	lsl.w	r6, r1, r5
 800bd6e:	1d72      	adds	r2, r6, #5
 800bd70:	0092      	lsls	r2, r2, #2
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 fdb8 	bl	800c8e8 <_calloc_r>
 800bd78:	b160      	cbz	r0, 800bd94 <_Balloc+0x64>
 800bd7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd7e:	e00e      	b.n	800bd9e <_Balloc+0x6e>
 800bd80:	2221      	movs	r2, #33	@ 0x21
 800bd82:	2104      	movs	r1, #4
 800bd84:	4620      	mov	r0, r4
 800bd86:	f000 fdaf 	bl	800c8e8 <_calloc_r>
 800bd8a:	69e3      	ldr	r3, [r4, #28]
 800bd8c:	60f0      	str	r0, [r6, #12]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e4      	bne.n	800bd5e <_Balloc+0x2e>
 800bd94:	2000      	movs	r0, #0
 800bd96:	bd70      	pop	{r4, r5, r6, pc}
 800bd98:	6802      	ldr	r2, [r0, #0]
 800bd9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bda4:	e7f7      	b.n	800bd96 <_Balloc+0x66>
 800bda6:	bf00      	nop
 800bda8:	08020e35 	.word	0x08020e35
 800bdac:	08020eb5 	.word	0x08020eb5

0800bdb0 <_Bfree>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	69c6      	ldr	r6, [r0, #28]
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	b976      	cbnz	r6, 800bdd8 <_Bfree+0x28>
 800bdba:	2010      	movs	r0, #16
 800bdbc:	f7ff ff02 	bl	800bbc4 <malloc>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	61e8      	str	r0, [r5, #28]
 800bdc4:	b920      	cbnz	r0, 800bdd0 <_Bfree+0x20>
 800bdc6:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <_Bfree+0x3c>)
 800bdc8:	4809      	ldr	r0, [pc, #36]	@ (800bdf0 <_Bfree+0x40>)
 800bdca:	218f      	movs	r1, #143	@ 0x8f
 800bdcc:	f000 fd6e 	bl	800c8ac <__assert_func>
 800bdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd4:	6006      	str	r6, [r0, #0]
 800bdd6:	60c6      	str	r6, [r0, #12]
 800bdd8:	b13c      	cbz	r4, 800bdea <_Bfree+0x3a>
 800bdda:	69eb      	ldr	r3, [r5, #28]
 800bddc:	6862      	ldr	r2, [r4, #4]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bde4:	6021      	str	r1, [r4, #0]
 800bde6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdea:	bd70      	pop	{r4, r5, r6, pc}
 800bdec:	08020e35 	.word	0x08020e35
 800bdf0:	08020eb5 	.word	0x08020eb5

0800bdf4 <__multadd>:
 800bdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf8:	690d      	ldr	r5, [r1, #16]
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	461e      	mov	r6, r3
 800be00:	f101 0c14 	add.w	ip, r1, #20
 800be04:	2000      	movs	r0, #0
 800be06:	f8dc 3000 	ldr.w	r3, [ip]
 800be0a:	b299      	uxth	r1, r3
 800be0c:	fb02 6101 	mla	r1, r2, r1, r6
 800be10:	0c1e      	lsrs	r6, r3, #16
 800be12:	0c0b      	lsrs	r3, r1, #16
 800be14:	fb02 3306 	mla	r3, r2, r6, r3
 800be18:	b289      	uxth	r1, r1
 800be1a:	3001      	adds	r0, #1
 800be1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be20:	4285      	cmp	r5, r0
 800be22:	f84c 1b04 	str.w	r1, [ip], #4
 800be26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be2a:	dcec      	bgt.n	800be06 <__multadd+0x12>
 800be2c:	b30e      	cbz	r6, 800be72 <__multadd+0x7e>
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	42ab      	cmp	r3, r5
 800be32:	dc19      	bgt.n	800be68 <__multadd+0x74>
 800be34:	6861      	ldr	r1, [r4, #4]
 800be36:	4638      	mov	r0, r7
 800be38:	3101      	adds	r1, #1
 800be3a:	f7ff ff79 	bl	800bd30 <_Balloc>
 800be3e:	4680      	mov	r8, r0
 800be40:	b928      	cbnz	r0, 800be4e <__multadd+0x5a>
 800be42:	4602      	mov	r2, r0
 800be44:	4b0c      	ldr	r3, [pc, #48]	@ (800be78 <__multadd+0x84>)
 800be46:	480d      	ldr	r0, [pc, #52]	@ (800be7c <__multadd+0x88>)
 800be48:	21ba      	movs	r1, #186	@ 0xba
 800be4a:	f000 fd2f 	bl	800c8ac <__assert_func>
 800be4e:	6922      	ldr	r2, [r4, #16]
 800be50:	3202      	adds	r2, #2
 800be52:	f104 010c 	add.w	r1, r4, #12
 800be56:	0092      	lsls	r2, r2, #2
 800be58:	300c      	adds	r0, #12
 800be5a:	f000 fd19 	bl	800c890 <memcpy>
 800be5e:	4621      	mov	r1, r4
 800be60:	4638      	mov	r0, r7
 800be62:	f7ff ffa5 	bl	800bdb0 <_Bfree>
 800be66:	4644      	mov	r4, r8
 800be68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be6c:	3501      	adds	r5, #1
 800be6e:	615e      	str	r6, [r3, #20]
 800be70:	6125      	str	r5, [r4, #16]
 800be72:	4620      	mov	r0, r4
 800be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be78:	08020ea4 	.word	0x08020ea4
 800be7c:	08020eb5 	.word	0x08020eb5

0800be80 <__hi0bits>:
 800be80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be84:	4603      	mov	r3, r0
 800be86:	bf36      	itet	cc
 800be88:	0403      	lslcc	r3, r0, #16
 800be8a:	2000      	movcs	r0, #0
 800be8c:	2010      	movcc	r0, #16
 800be8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be92:	bf3c      	itt	cc
 800be94:	021b      	lslcc	r3, r3, #8
 800be96:	3008      	addcc	r0, #8
 800be98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be9c:	bf3c      	itt	cc
 800be9e:	011b      	lslcc	r3, r3, #4
 800bea0:	3004      	addcc	r0, #4
 800bea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bea6:	bf3c      	itt	cc
 800bea8:	009b      	lslcc	r3, r3, #2
 800beaa:	3002      	addcc	r0, #2
 800beac:	2b00      	cmp	r3, #0
 800beae:	db05      	blt.n	800bebc <__hi0bits+0x3c>
 800beb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800beb4:	f100 0001 	add.w	r0, r0, #1
 800beb8:	bf08      	it	eq
 800beba:	2020      	moveq	r0, #32
 800bebc:	4770      	bx	lr

0800bebe <__lo0bits>:
 800bebe:	6803      	ldr	r3, [r0, #0]
 800bec0:	4602      	mov	r2, r0
 800bec2:	f013 0007 	ands.w	r0, r3, #7
 800bec6:	d00b      	beq.n	800bee0 <__lo0bits+0x22>
 800bec8:	07d9      	lsls	r1, r3, #31
 800beca:	d421      	bmi.n	800bf10 <__lo0bits+0x52>
 800becc:	0798      	lsls	r0, r3, #30
 800bece:	bf49      	itett	mi
 800bed0:	085b      	lsrmi	r3, r3, #1
 800bed2:	089b      	lsrpl	r3, r3, #2
 800bed4:	2001      	movmi	r0, #1
 800bed6:	6013      	strmi	r3, [r2, #0]
 800bed8:	bf5c      	itt	pl
 800beda:	6013      	strpl	r3, [r2, #0]
 800bedc:	2002      	movpl	r0, #2
 800bede:	4770      	bx	lr
 800bee0:	b299      	uxth	r1, r3
 800bee2:	b909      	cbnz	r1, 800bee8 <__lo0bits+0x2a>
 800bee4:	0c1b      	lsrs	r3, r3, #16
 800bee6:	2010      	movs	r0, #16
 800bee8:	b2d9      	uxtb	r1, r3
 800beea:	b909      	cbnz	r1, 800bef0 <__lo0bits+0x32>
 800beec:	3008      	adds	r0, #8
 800beee:	0a1b      	lsrs	r3, r3, #8
 800bef0:	0719      	lsls	r1, r3, #28
 800bef2:	bf04      	itt	eq
 800bef4:	091b      	lsreq	r3, r3, #4
 800bef6:	3004      	addeq	r0, #4
 800bef8:	0799      	lsls	r1, r3, #30
 800befa:	bf04      	itt	eq
 800befc:	089b      	lsreq	r3, r3, #2
 800befe:	3002      	addeq	r0, #2
 800bf00:	07d9      	lsls	r1, r3, #31
 800bf02:	d403      	bmi.n	800bf0c <__lo0bits+0x4e>
 800bf04:	085b      	lsrs	r3, r3, #1
 800bf06:	f100 0001 	add.w	r0, r0, #1
 800bf0a:	d003      	beq.n	800bf14 <__lo0bits+0x56>
 800bf0c:	6013      	str	r3, [r2, #0]
 800bf0e:	4770      	bx	lr
 800bf10:	2000      	movs	r0, #0
 800bf12:	4770      	bx	lr
 800bf14:	2020      	movs	r0, #32
 800bf16:	4770      	bx	lr

0800bf18 <__i2b>:
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	f7ff ff07 	bl	800bd30 <_Balloc>
 800bf22:	4602      	mov	r2, r0
 800bf24:	b928      	cbnz	r0, 800bf32 <__i2b+0x1a>
 800bf26:	4b05      	ldr	r3, [pc, #20]	@ (800bf3c <__i2b+0x24>)
 800bf28:	4805      	ldr	r0, [pc, #20]	@ (800bf40 <__i2b+0x28>)
 800bf2a:	f240 1145 	movw	r1, #325	@ 0x145
 800bf2e:	f000 fcbd 	bl	800c8ac <__assert_func>
 800bf32:	2301      	movs	r3, #1
 800bf34:	6144      	str	r4, [r0, #20]
 800bf36:	6103      	str	r3, [r0, #16]
 800bf38:	bd10      	pop	{r4, pc}
 800bf3a:	bf00      	nop
 800bf3c:	08020ea4 	.word	0x08020ea4
 800bf40:	08020eb5 	.word	0x08020eb5

0800bf44 <__multiply>:
 800bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf48:	4614      	mov	r4, r2
 800bf4a:	690a      	ldr	r2, [r1, #16]
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	bfa8      	it	ge
 800bf52:	4623      	movge	r3, r4
 800bf54:	460f      	mov	r7, r1
 800bf56:	bfa4      	itt	ge
 800bf58:	460c      	movge	r4, r1
 800bf5a:	461f      	movge	r7, r3
 800bf5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bf60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bf64:	68a3      	ldr	r3, [r4, #8]
 800bf66:	6861      	ldr	r1, [r4, #4]
 800bf68:	eb0a 0609 	add.w	r6, sl, r9
 800bf6c:	42b3      	cmp	r3, r6
 800bf6e:	b085      	sub	sp, #20
 800bf70:	bfb8      	it	lt
 800bf72:	3101      	addlt	r1, #1
 800bf74:	f7ff fedc 	bl	800bd30 <_Balloc>
 800bf78:	b930      	cbnz	r0, 800bf88 <__multiply+0x44>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	4b44      	ldr	r3, [pc, #272]	@ (800c090 <__multiply+0x14c>)
 800bf7e:	4845      	ldr	r0, [pc, #276]	@ (800c094 <__multiply+0x150>)
 800bf80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf84:	f000 fc92 	bl	800c8ac <__assert_func>
 800bf88:	f100 0514 	add.w	r5, r0, #20
 800bf8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf90:	462b      	mov	r3, r5
 800bf92:	2200      	movs	r2, #0
 800bf94:	4543      	cmp	r3, r8
 800bf96:	d321      	bcc.n	800bfdc <__multiply+0x98>
 800bf98:	f107 0114 	add.w	r1, r7, #20
 800bf9c:	f104 0214 	add.w	r2, r4, #20
 800bfa0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bfa4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bfa8:	9302      	str	r3, [sp, #8]
 800bfaa:	1b13      	subs	r3, r2, r4
 800bfac:	3b15      	subs	r3, #21
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	3304      	adds	r3, #4
 800bfb4:	f104 0715 	add.w	r7, r4, #21
 800bfb8:	42ba      	cmp	r2, r7
 800bfba:	bf38      	it	cc
 800bfbc:	2304      	movcc	r3, #4
 800bfbe:	9301      	str	r3, [sp, #4]
 800bfc0:	9b02      	ldr	r3, [sp, #8]
 800bfc2:	9103      	str	r1, [sp, #12]
 800bfc4:	428b      	cmp	r3, r1
 800bfc6:	d80c      	bhi.n	800bfe2 <__multiply+0x9e>
 800bfc8:	2e00      	cmp	r6, #0
 800bfca:	dd03      	ble.n	800bfd4 <__multiply+0x90>
 800bfcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d05b      	beq.n	800c08c <__multiply+0x148>
 800bfd4:	6106      	str	r6, [r0, #16]
 800bfd6:	b005      	add	sp, #20
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	f843 2b04 	str.w	r2, [r3], #4
 800bfe0:	e7d8      	b.n	800bf94 <__multiply+0x50>
 800bfe2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bfe6:	f1ba 0f00 	cmp.w	sl, #0
 800bfea:	d024      	beq.n	800c036 <__multiply+0xf2>
 800bfec:	f104 0e14 	add.w	lr, r4, #20
 800bff0:	46a9      	mov	r9, r5
 800bff2:	f04f 0c00 	mov.w	ip, #0
 800bff6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bffa:	f8d9 3000 	ldr.w	r3, [r9]
 800bffe:	fa1f fb87 	uxth.w	fp, r7
 800c002:	b29b      	uxth	r3, r3
 800c004:	fb0a 330b 	mla	r3, sl, fp, r3
 800c008:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c00c:	f8d9 7000 	ldr.w	r7, [r9]
 800c010:	4463      	add	r3, ip
 800c012:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c016:	fb0a c70b 	mla	r7, sl, fp, ip
 800c01a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c01e:	b29b      	uxth	r3, r3
 800c020:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c024:	4572      	cmp	r2, lr
 800c026:	f849 3b04 	str.w	r3, [r9], #4
 800c02a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c02e:	d8e2      	bhi.n	800bff6 <__multiply+0xb2>
 800c030:	9b01      	ldr	r3, [sp, #4]
 800c032:	f845 c003 	str.w	ip, [r5, r3]
 800c036:	9b03      	ldr	r3, [sp, #12]
 800c038:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c03c:	3104      	adds	r1, #4
 800c03e:	f1b9 0f00 	cmp.w	r9, #0
 800c042:	d021      	beq.n	800c088 <__multiply+0x144>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	f104 0c14 	add.w	ip, r4, #20
 800c04a:	46ae      	mov	lr, r5
 800c04c:	f04f 0a00 	mov.w	sl, #0
 800c050:	f8bc b000 	ldrh.w	fp, [ip]
 800c054:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c058:	fb09 770b 	mla	r7, r9, fp, r7
 800c05c:	4457      	add	r7, sl
 800c05e:	b29b      	uxth	r3, r3
 800c060:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c064:	f84e 3b04 	str.w	r3, [lr], #4
 800c068:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c06c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c070:	f8be 3000 	ldrh.w	r3, [lr]
 800c074:	fb09 330a 	mla	r3, r9, sl, r3
 800c078:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c07c:	4562      	cmp	r2, ip
 800c07e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c082:	d8e5      	bhi.n	800c050 <__multiply+0x10c>
 800c084:	9f01      	ldr	r7, [sp, #4]
 800c086:	51eb      	str	r3, [r5, r7]
 800c088:	3504      	adds	r5, #4
 800c08a:	e799      	b.n	800bfc0 <__multiply+0x7c>
 800c08c:	3e01      	subs	r6, #1
 800c08e:	e79b      	b.n	800bfc8 <__multiply+0x84>
 800c090:	08020ea4 	.word	0x08020ea4
 800c094:	08020eb5 	.word	0x08020eb5

0800c098 <__pow5mult>:
 800c098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c09c:	4615      	mov	r5, r2
 800c09e:	f012 0203 	ands.w	r2, r2, #3
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	460e      	mov	r6, r1
 800c0a6:	d007      	beq.n	800c0b8 <__pow5mult+0x20>
 800c0a8:	4c25      	ldr	r4, [pc, #148]	@ (800c140 <__pow5mult+0xa8>)
 800c0aa:	3a01      	subs	r2, #1
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0b2:	f7ff fe9f 	bl	800bdf4 <__multadd>
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	10ad      	asrs	r5, r5, #2
 800c0ba:	d03d      	beq.n	800c138 <__pow5mult+0xa0>
 800c0bc:	69fc      	ldr	r4, [r7, #28]
 800c0be:	b97c      	cbnz	r4, 800c0e0 <__pow5mult+0x48>
 800c0c0:	2010      	movs	r0, #16
 800c0c2:	f7ff fd7f 	bl	800bbc4 <malloc>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	61f8      	str	r0, [r7, #28]
 800c0ca:	b928      	cbnz	r0, 800c0d8 <__pow5mult+0x40>
 800c0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c144 <__pow5mult+0xac>)
 800c0ce:	481e      	ldr	r0, [pc, #120]	@ (800c148 <__pow5mult+0xb0>)
 800c0d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c0d4:	f000 fbea 	bl	800c8ac <__assert_func>
 800c0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0dc:	6004      	str	r4, [r0, #0]
 800c0de:	60c4      	str	r4, [r0, #12]
 800c0e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0e8:	b94c      	cbnz	r4, 800c0fe <__pow5mult+0x66>
 800c0ea:	f240 2171 	movw	r1, #625	@ 0x271
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	f7ff ff12 	bl	800bf18 <__i2b>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	f04f 0900 	mov.w	r9, #0
 800c102:	07eb      	lsls	r3, r5, #31
 800c104:	d50a      	bpl.n	800c11c <__pow5mult+0x84>
 800c106:	4631      	mov	r1, r6
 800c108:	4622      	mov	r2, r4
 800c10a:	4638      	mov	r0, r7
 800c10c:	f7ff ff1a 	bl	800bf44 <__multiply>
 800c110:	4631      	mov	r1, r6
 800c112:	4680      	mov	r8, r0
 800c114:	4638      	mov	r0, r7
 800c116:	f7ff fe4b 	bl	800bdb0 <_Bfree>
 800c11a:	4646      	mov	r6, r8
 800c11c:	106d      	asrs	r5, r5, #1
 800c11e:	d00b      	beq.n	800c138 <__pow5mult+0xa0>
 800c120:	6820      	ldr	r0, [r4, #0]
 800c122:	b938      	cbnz	r0, 800c134 <__pow5mult+0x9c>
 800c124:	4622      	mov	r2, r4
 800c126:	4621      	mov	r1, r4
 800c128:	4638      	mov	r0, r7
 800c12a:	f7ff ff0b 	bl	800bf44 <__multiply>
 800c12e:	6020      	str	r0, [r4, #0]
 800c130:	f8c0 9000 	str.w	r9, [r0]
 800c134:	4604      	mov	r4, r0
 800c136:	e7e4      	b.n	800c102 <__pow5mult+0x6a>
 800c138:	4630      	mov	r0, r6
 800c13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c13e:	bf00      	nop
 800c140:	08020f10 	.word	0x08020f10
 800c144:	08020e35 	.word	0x08020e35
 800c148:	08020eb5 	.word	0x08020eb5

0800c14c <__lshift>:
 800c14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	460c      	mov	r4, r1
 800c152:	6849      	ldr	r1, [r1, #4]
 800c154:	6923      	ldr	r3, [r4, #16]
 800c156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	4607      	mov	r7, r0
 800c15e:	4691      	mov	r9, r2
 800c160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c164:	f108 0601 	add.w	r6, r8, #1
 800c168:	42b3      	cmp	r3, r6
 800c16a:	db0b      	blt.n	800c184 <__lshift+0x38>
 800c16c:	4638      	mov	r0, r7
 800c16e:	f7ff fddf 	bl	800bd30 <_Balloc>
 800c172:	4605      	mov	r5, r0
 800c174:	b948      	cbnz	r0, 800c18a <__lshift+0x3e>
 800c176:	4602      	mov	r2, r0
 800c178:	4b28      	ldr	r3, [pc, #160]	@ (800c21c <__lshift+0xd0>)
 800c17a:	4829      	ldr	r0, [pc, #164]	@ (800c220 <__lshift+0xd4>)
 800c17c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c180:	f000 fb94 	bl	800c8ac <__assert_func>
 800c184:	3101      	adds	r1, #1
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	e7ee      	b.n	800c168 <__lshift+0x1c>
 800c18a:	2300      	movs	r3, #0
 800c18c:	f100 0114 	add.w	r1, r0, #20
 800c190:	f100 0210 	add.w	r2, r0, #16
 800c194:	4618      	mov	r0, r3
 800c196:	4553      	cmp	r3, sl
 800c198:	db33      	blt.n	800c202 <__lshift+0xb6>
 800c19a:	6920      	ldr	r0, [r4, #16]
 800c19c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1a0:	f104 0314 	add.w	r3, r4, #20
 800c1a4:	f019 091f 	ands.w	r9, r9, #31
 800c1a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1b0:	d02b      	beq.n	800c20a <__lshift+0xbe>
 800c1b2:	f1c9 0e20 	rsb	lr, r9, #32
 800c1b6:	468a      	mov	sl, r1
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	fa00 f009 	lsl.w	r0, r0, r9
 800c1c0:	4310      	orrs	r0, r2
 800c1c2:	f84a 0b04 	str.w	r0, [sl], #4
 800c1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ca:	459c      	cmp	ip, r3
 800c1cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1d0:	d8f3      	bhi.n	800c1ba <__lshift+0x6e>
 800c1d2:	ebac 0304 	sub.w	r3, ip, r4
 800c1d6:	3b15      	subs	r3, #21
 800c1d8:	f023 0303 	bic.w	r3, r3, #3
 800c1dc:	3304      	adds	r3, #4
 800c1de:	f104 0015 	add.w	r0, r4, #21
 800c1e2:	4584      	cmp	ip, r0
 800c1e4:	bf38      	it	cc
 800c1e6:	2304      	movcc	r3, #4
 800c1e8:	50ca      	str	r2, [r1, r3]
 800c1ea:	b10a      	cbz	r2, 800c1f0 <__lshift+0xa4>
 800c1ec:	f108 0602 	add.w	r6, r8, #2
 800c1f0:	3e01      	subs	r6, #1
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	612e      	str	r6, [r5, #16]
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	f7ff fdda 	bl	800bdb0 <_Bfree>
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c202:	f842 0f04 	str.w	r0, [r2, #4]!
 800c206:	3301      	adds	r3, #1
 800c208:	e7c5      	b.n	800c196 <__lshift+0x4a>
 800c20a:	3904      	subs	r1, #4
 800c20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c210:	f841 2f04 	str.w	r2, [r1, #4]!
 800c214:	459c      	cmp	ip, r3
 800c216:	d8f9      	bhi.n	800c20c <__lshift+0xc0>
 800c218:	e7ea      	b.n	800c1f0 <__lshift+0xa4>
 800c21a:	bf00      	nop
 800c21c:	08020ea4 	.word	0x08020ea4
 800c220:	08020eb5 	.word	0x08020eb5

0800c224 <__mcmp>:
 800c224:	690a      	ldr	r2, [r1, #16]
 800c226:	4603      	mov	r3, r0
 800c228:	6900      	ldr	r0, [r0, #16]
 800c22a:	1a80      	subs	r0, r0, r2
 800c22c:	b530      	push	{r4, r5, lr}
 800c22e:	d10e      	bne.n	800c24e <__mcmp+0x2a>
 800c230:	3314      	adds	r3, #20
 800c232:	3114      	adds	r1, #20
 800c234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c23c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c244:	4295      	cmp	r5, r2
 800c246:	d003      	beq.n	800c250 <__mcmp+0x2c>
 800c248:	d205      	bcs.n	800c256 <__mcmp+0x32>
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	bd30      	pop	{r4, r5, pc}
 800c250:	42a3      	cmp	r3, r4
 800c252:	d3f3      	bcc.n	800c23c <__mcmp+0x18>
 800c254:	e7fb      	b.n	800c24e <__mcmp+0x2a>
 800c256:	2001      	movs	r0, #1
 800c258:	e7f9      	b.n	800c24e <__mcmp+0x2a>
	...

0800c25c <__mdiff>:
 800c25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	4689      	mov	r9, r1
 800c262:	4606      	mov	r6, r0
 800c264:	4611      	mov	r1, r2
 800c266:	4648      	mov	r0, r9
 800c268:	4614      	mov	r4, r2
 800c26a:	f7ff ffdb 	bl	800c224 <__mcmp>
 800c26e:	1e05      	subs	r5, r0, #0
 800c270:	d112      	bne.n	800c298 <__mdiff+0x3c>
 800c272:	4629      	mov	r1, r5
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff fd5b 	bl	800bd30 <_Balloc>
 800c27a:	4602      	mov	r2, r0
 800c27c:	b928      	cbnz	r0, 800c28a <__mdiff+0x2e>
 800c27e:	4b3f      	ldr	r3, [pc, #252]	@ (800c37c <__mdiff+0x120>)
 800c280:	f240 2137 	movw	r1, #567	@ 0x237
 800c284:	483e      	ldr	r0, [pc, #248]	@ (800c380 <__mdiff+0x124>)
 800c286:	f000 fb11 	bl	800c8ac <__assert_func>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c290:	4610      	mov	r0, r2
 800c292:	b003      	add	sp, #12
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	bfbc      	itt	lt
 800c29a:	464b      	movlt	r3, r9
 800c29c:	46a1      	movlt	r9, r4
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c2a4:	bfba      	itte	lt
 800c2a6:	461c      	movlt	r4, r3
 800c2a8:	2501      	movlt	r5, #1
 800c2aa:	2500      	movge	r5, #0
 800c2ac:	f7ff fd40 	bl	800bd30 <_Balloc>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	b918      	cbnz	r0, 800c2bc <__mdiff+0x60>
 800c2b4:	4b31      	ldr	r3, [pc, #196]	@ (800c37c <__mdiff+0x120>)
 800c2b6:	f240 2145 	movw	r1, #581	@ 0x245
 800c2ba:	e7e3      	b.n	800c284 <__mdiff+0x28>
 800c2bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c2c0:	6926      	ldr	r6, [r4, #16]
 800c2c2:	60c5      	str	r5, [r0, #12]
 800c2c4:	f109 0310 	add.w	r3, r9, #16
 800c2c8:	f109 0514 	add.w	r5, r9, #20
 800c2cc:	f104 0e14 	add.w	lr, r4, #20
 800c2d0:	f100 0b14 	add.w	fp, r0, #20
 800c2d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c2d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	46d9      	mov	r9, fp
 800c2e0:	f04f 0c00 	mov.w	ip, #0
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	fa1f f38a 	uxth.w	r3, sl
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	b283      	uxth	r3, r0
 800c2f8:	1acb      	subs	r3, r1, r3
 800c2fa:	0c00      	lsrs	r0, r0, #16
 800c2fc:	4463      	add	r3, ip
 800c2fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c302:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c306:	b29b      	uxth	r3, r3
 800c308:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c30c:	4576      	cmp	r6, lr
 800c30e:	f849 3b04 	str.w	r3, [r9], #4
 800c312:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c316:	d8e5      	bhi.n	800c2e4 <__mdiff+0x88>
 800c318:	1b33      	subs	r3, r6, r4
 800c31a:	3b15      	subs	r3, #21
 800c31c:	f023 0303 	bic.w	r3, r3, #3
 800c320:	3415      	adds	r4, #21
 800c322:	3304      	adds	r3, #4
 800c324:	42a6      	cmp	r6, r4
 800c326:	bf38      	it	cc
 800c328:	2304      	movcc	r3, #4
 800c32a:	441d      	add	r5, r3
 800c32c:	445b      	add	r3, fp
 800c32e:	461e      	mov	r6, r3
 800c330:	462c      	mov	r4, r5
 800c332:	4544      	cmp	r4, r8
 800c334:	d30e      	bcc.n	800c354 <__mdiff+0xf8>
 800c336:	f108 0103 	add.w	r1, r8, #3
 800c33a:	1b49      	subs	r1, r1, r5
 800c33c:	f021 0103 	bic.w	r1, r1, #3
 800c340:	3d03      	subs	r5, #3
 800c342:	45a8      	cmp	r8, r5
 800c344:	bf38      	it	cc
 800c346:	2100      	movcc	r1, #0
 800c348:	440b      	add	r3, r1
 800c34a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c34e:	b191      	cbz	r1, 800c376 <__mdiff+0x11a>
 800c350:	6117      	str	r7, [r2, #16]
 800c352:	e79d      	b.n	800c290 <__mdiff+0x34>
 800c354:	f854 1b04 	ldr.w	r1, [r4], #4
 800c358:	46e6      	mov	lr, ip
 800c35a:	0c08      	lsrs	r0, r1, #16
 800c35c:	fa1c fc81 	uxtah	ip, ip, r1
 800c360:	4471      	add	r1, lr
 800c362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c366:	b289      	uxth	r1, r1
 800c368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c36c:	f846 1b04 	str.w	r1, [r6], #4
 800c370:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c374:	e7dd      	b.n	800c332 <__mdiff+0xd6>
 800c376:	3f01      	subs	r7, #1
 800c378:	e7e7      	b.n	800c34a <__mdiff+0xee>
 800c37a:	bf00      	nop
 800c37c:	08020ea4 	.word	0x08020ea4
 800c380:	08020eb5 	.word	0x08020eb5

0800c384 <__d2b>:
 800c384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c388:	460f      	mov	r7, r1
 800c38a:	2101      	movs	r1, #1
 800c38c:	ec59 8b10 	vmov	r8, r9, d0
 800c390:	4616      	mov	r6, r2
 800c392:	f7ff fccd 	bl	800bd30 <_Balloc>
 800c396:	4604      	mov	r4, r0
 800c398:	b930      	cbnz	r0, 800c3a8 <__d2b+0x24>
 800c39a:	4602      	mov	r2, r0
 800c39c:	4b23      	ldr	r3, [pc, #140]	@ (800c42c <__d2b+0xa8>)
 800c39e:	4824      	ldr	r0, [pc, #144]	@ (800c430 <__d2b+0xac>)
 800c3a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c3a4:	f000 fa82 	bl	800c8ac <__assert_func>
 800c3a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3b0:	b10d      	cbz	r5, 800c3b6 <__d2b+0x32>
 800c3b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3b6:	9301      	str	r3, [sp, #4]
 800c3b8:	f1b8 0300 	subs.w	r3, r8, #0
 800c3bc:	d023      	beq.n	800c406 <__d2b+0x82>
 800c3be:	4668      	mov	r0, sp
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	f7ff fd7c 	bl	800bebe <__lo0bits>
 800c3c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c3ca:	b1d0      	cbz	r0, 800c402 <__d2b+0x7e>
 800c3cc:	f1c0 0320 	rsb	r3, r0, #32
 800c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d4:	430b      	orrs	r3, r1
 800c3d6:	40c2      	lsrs	r2, r0
 800c3d8:	6163      	str	r3, [r4, #20]
 800c3da:	9201      	str	r2, [sp, #4]
 800c3dc:	9b01      	ldr	r3, [sp, #4]
 800c3de:	61a3      	str	r3, [r4, #24]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	bf0c      	ite	eq
 800c3e4:	2201      	moveq	r2, #1
 800c3e6:	2202      	movne	r2, #2
 800c3e8:	6122      	str	r2, [r4, #16]
 800c3ea:	b1a5      	cbz	r5, 800c416 <__d2b+0x92>
 800c3ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c3f0:	4405      	add	r5, r0
 800c3f2:	603d      	str	r5, [r7, #0]
 800c3f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c3f8:	6030      	str	r0, [r6, #0]
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	b003      	add	sp, #12
 800c3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c402:	6161      	str	r1, [r4, #20]
 800c404:	e7ea      	b.n	800c3dc <__d2b+0x58>
 800c406:	a801      	add	r0, sp, #4
 800c408:	f7ff fd59 	bl	800bebe <__lo0bits>
 800c40c:	9b01      	ldr	r3, [sp, #4]
 800c40e:	6163      	str	r3, [r4, #20]
 800c410:	3020      	adds	r0, #32
 800c412:	2201      	movs	r2, #1
 800c414:	e7e8      	b.n	800c3e8 <__d2b+0x64>
 800c416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c41a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c41e:	6038      	str	r0, [r7, #0]
 800c420:	6918      	ldr	r0, [r3, #16]
 800c422:	f7ff fd2d 	bl	800be80 <__hi0bits>
 800c426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c42a:	e7e5      	b.n	800c3f8 <__d2b+0x74>
 800c42c:	08020ea4 	.word	0x08020ea4
 800c430:	08020eb5 	.word	0x08020eb5

0800c434 <__ssputs_r>:
 800c434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c438:	688e      	ldr	r6, [r1, #8]
 800c43a:	461f      	mov	r7, r3
 800c43c:	42be      	cmp	r6, r7
 800c43e:	680b      	ldr	r3, [r1, #0]
 800c440:	4682      	mov	sl, r0
 800c442:	460c      	mov	r4, r1
 800c444:	4690      	mov	r8, r2
 800c446:	d82d      	bhi.n	800c4a4 <__ssputs_r+0x70>
 800c448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c44c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c450:	d026      	beq.n	800c4a0 <__ssputs_r+0x6c>
 800c452:	6965      	ldr	r5, [r4, #20]
 800c454:	6909      	ldr	r1, [r1, #16]
 800c456:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c45a:	eba3 0901 	sub.w	r9, r3, r1
 800c45e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c462:	1c7b      	adds	r3, r7, #1
 800c464:	444b      	add	r3, r9
 800c466:	106d      	asrs	r5, r5, #1
 800c468:	429d      	cmp	r5, r3
 800c46a:	bf38      	it	cc
 800c46c:	461d      	movcc	r5, r3
 800c46e:	0553      	lsls	r3, r2, #21
 800c470:	d527      	bpl.n	800c4c2 <__ssputs_r+0x8e>
 800c472:	4629      	mov	r1, r5
 800c474:	f7ff fbd0 	bl	800bc18 <_malloc_r>
 800c478:	4606      	mov	r6, r0
 800c47a:	b360      	cbz	r0, 800c4d6 <__ssputs_r+0xa2>
 800c47c:	6921      	ldr	r1, [r4, #16]
 800c47e:	464a      	mov	r2, r9
 800c480:	f000 fa06 	bl	800c890 <memcpy>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c48a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	6126      	str	r6, [r4, #16]
 800c492:	6165      	str	r5, [r4, #20]
 800c494:	444e      	add	r6, r9
 800c496:	eba5 0509 	sub.w	r5, r5, r9
 800c49a:	6026      	str	r6, [r4, #0]
 800c49c:	60a5      	str	r5, [r4, #8]
 800c49e:	463e      	mov	r6, r7
 800c4a0:	42be      	cmp	r6, r7
 800c4a2:	d900      	bls.n	800c4a6 <__ssputs_r+0x72>
 800c4a4:	463e      	mov	r6, r7
 800c4a6:	6820      	ldr	r0, [r4, #0]
 800c4a8:	4632      	mov	r2, r6
 800c4aa:	4641      	mov	r1, r8
 800c4ac:	f000 f9c6 	bl	800c83c <memmove>
 800c4b0:	68a3      	ldr	r3, [r4, #8]
 800c4b2:	1b9b      	subs	r3, r3, r6
 800c4b4:	60a3      	str	r3, [r4, #8]
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	4433      	add	r3, r6
 800c4ba:	6023      	str	r3, [r4, #0]
 800c4bc:	2000      	movs	r0, #0
 800c4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c2:	462a      	mov	r2, r5
 800c4c4:	f000 fa36 	bl	800c934 <_realloc_r>
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d1e0      	bne.n	800c490 <__ssputs_r+0x5c>
 800c4ce:	6921      	ldr	r1, [r4, #16]
 800c4d0:	4650      	mov	r0, sl
 800c4d2:	f7ff fb2d 	bl	800bb30 <_free_r>
 800c4d6:	230c      	movs	r3, #12
 800c4d8:	f8ca 3000 	str.w	r3, [sl]
 800c4dc:	89a3      	ldrh	r3, [r4, #12]
 800c4de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4e2:	81a3      	strh	r3, [r4, #12]
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	e7e9      	b.n	800c4be <__ssputs_r+0x8a>
	...

0800c4ec <_svfiprintf_r>:
 800c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f0:	4698      	mov	r8, r3
 800c4f2:	898b      	ldrh	r3, [r1, #12]
 800c4f4:	061b      	lsls	r3, r3, #24
 800c4f6:	b09d      	sub	sp, #116	@ 0x74
 800c4f8:	4607      	mov	r7, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	d510      	bpl.n	800c522 <_svfiprintf_r+0x36>
 800c500:	690b      	ldr	r3, [r1, #16]
 800c502:	b973      	cbnz	r3, 800c522 <_svfiprintf_r+0x36>
 800c504:	2140      	movs	r1, #64	@ 0x40
 800c506:	f7ff fb87 	bl	800bc18 <_malloc_r>
 800c50a:	6028      	str	r0, [r5, #0]
 800c50c:	6128      	str	r0, [r5, #16]
 800c50e:	b930      	cbnz	r0, 800c51e <_svfiprintf_r+0x32>
 800c510:	230c      	movs	r3, #12
 800c512:	603b      	str	r3, [r7, #0]
 800c514:	f04f 30ff 	mov.w	r0, #4294967295
 800c518:	b01d      	add	sp, #116	@ 0x74
 800c51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51e:	2340      	movs	r3, #64	@ 0x40
 800c520:	616b      	str	r3, [r5, #20]
 800c522:	2300      	movs	r3, #0
 800c524:	9309      	str	r3, [sp, #36]	@ 0x24
 800c526:	2320      	movs	r3, #32
 800c528:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c52c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c530:	2330      	movs	r3, #48	@ 0x30
 800c532:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c6d0 <_svfiprintf_r+0x1e4>
 800c536:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c53a:	f04f 0901 	mov.w	r9, #1
 800c53e:	4623      	mov	r3, r4
 800c540:	469a      	mov	sl, r3
 800c542:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c546:	b10a      	cbz	r2, 800c54c <_svfiprintf_r+0x60>
 800c548:	2a25      	cmp	r2, #37	@ 0x25
 800c54a:	d1f9      	bne.n	800c540 <_svfiprintf_r+0x54>
 800c54c:	ebba 0b04 	subs.w	fp, sl, r4
 800c550:	d00b      	beq.n	800c56a <_svfiprintf_r+0x7e>
 800c552:	465b      	mov	r3, fp
 800c554:	4622      	mov	r2, r4
 800c556:	4629      	mov	r1, r5
 800c558:	4638      	mov	r0, r7
 800c55a:	f7ff ff6b 	bl	800c434 <__ssputs_r>
 800c55e:	3001      	adds	r0, #1
 800c560:	f000 80a7 	beq.w	800c6b2 <_svfiprintf_r+0x1c6>
 800c564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c566:	445a      	add	r2, fp
 800c568:	9209      	str	r2, [sp, #36]	@ 0x24
 800c56a:	f89a 3000 	ldrb.w	r3, [sl]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 809f 	beq.w	800c6b2 <_svfiprintf_r+0x1c6>
 800c574:	2300      	movs	r3, #0
 800c576:	f04f 32ff 	mov.w	r2, #4294967295
 800c57a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c57e:	f10a 0a01 	add.w	sl, sl, #1
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	9307      	str	r3, [sp, #28]
 800c586:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c58a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c58c:	4654      	mov	r4, sl
 800c58e:	2205      	movs	r2, #5
 800c590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c594:	484e      	ldr	r0, [pc, #312]	@ (800c6d0 <_svfiprintf_r+0x1e4>)
 800c596:	f7f3 fe3b 	bl	8000210 <memchr>
 800c59a:	9a04      	ldr	r2, [sp, #16]
 800c59c:	b9d8      	cbnz	r0, 800c5d6 <_svfiprintf_r+0xea>
 800c59e:	06d0      	lsls	r0, r2, #27
 800c5a0:	bf44      	itt	mi
 800c5a2:	2320      	movmi	r3, #32
 800c5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5a8:	0711      	lsls	r1, r2, #28
 800c5aa:	bf44      	itt	mi
 800c5ac:	232b      	movmi	r3, #43	@ 0x2b
 800c5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5b8:	d015      	beq.n	800c5e6 <_svfiprintf_r+0xfa>
 800c5ba:	9a07      	ldr	r2, [sp, #28]
 800c5bc:	4654      	mov	r4, sl
 800c5be:	2000      	movs	r0, #0
 800c5c0:	f04f 0c0a 	mov.w	ip, #10
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ca:	3b30      	subs	r3, #48	@ 0x30
 800c5cc:	2b09      	cmp	r3, #9
 800c5ce:	d94b      	bls.n	800c668 <_svfiprintf_r+0x17c>
 800c5d0:	b1b0      	cbz	r0, 800c600 <_svfiprintf_r+0x114>
 800c5d2:	9207      	str	r2, [sp, #28]
 800c5d4:	e014      	b.n	800c600 <_svfiprintf_r+0x114>
 800c5d6:	eba0 0308 	sub.w	r3, r0, r8
 800c5da:	fa09 f303 	lsl.w	r3, r9, r3
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	9304      	str	r3, [sp, #16]
 800c5e2:	46a2      	mov	sl, r4
 800c5e4:	e7d2      	b.n	800c58c <_svfiprintf_r+0xa0>
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	1d19      	adds	r1, r3, #4
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	9103      	str	r1, [sp, #12]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	bfbb      	ittet	lt
 800c5f2:	425b      	neglt	r3, r3
 800c5f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c5f8:	9307      	strge	r3, [sp, #28]
 800c5fa:	9307      	strlt	r3, [sp, #28]
 800c5fc:	bfb8      	it	lt
 800c5fe:	9204      	strlt	r2, [sp, #16]
 800c600:	7823      	ldrb	r3, [r4, #0]
 800c602:	2b2e      	cmp	r3, #46	@ 0x2e
 800c604:	d10a      	bne.n	800c61c <_svfiprintf_r+0x130>
 800c606:	7863      	ldrb	r3, [r4, #1]
 800c608:	2b2a      	cmp	r3, #42	@ 0x2a
 800c60a:	d132      	bne.n	800c672 <_svfiprintf_r+0x186>
 800c60c:	9b03      	ldr	r3, [sp, #12]
 800c60e:	1d1a      	adds	r2, r3, #4
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	9203      	str	r2, [sp, #12]
 800c614:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c618:	3402      	adds	r4, #2
 800c61a:	9305      	str	r3, [sp, #20]
 800c61c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c6e0 <_svfiprintf_r+0x1f4>
 800c620:	7821      	ldrb	r1, [r4, #0]
 800c622:	2203      	movs	r2, #3
 800c624:	4650      	mov	r0, sl
 800c626:	f7f3 fdf3 	bl	8000210 <memchr>
 800c62a:	b138      	cbz	r0, 800c63c <_svfiprintf_r+0x150>
 800c62c:	9b04      	ldr	r3, [sp, #16]
 800c62e:	eba0 000a 	sub.w	r0, r0, sl
 800c632:	2240      	movs	r2, #64	@ 0x40
 800c634:	4082      	lsls	r2, r0
 800c636:	4313      	orrs	r3, r2
 800c638:	3401      	adds	r4, #1
 800c63a:	9304      	str	r3, [sp, #16]
 800c63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c640:	4824      	ldr	r0, [pc, #144]	@ (800c6d4 <_svfiprintf_r+0x1e8>)
 800c642:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c646:	2206      	movs	r2, #6
 800c648:	f7f3 fde2 	bl	8000210 <memchr>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d036      	beq.n	800c6be <_svfiprintf_r+0x1d2>
 800c650:	4b21      	ldr	r3, [pc, #132]	@ (800c6d8 <_svfiprintf_r+0x1ec>)
 800c652:	bb1b      	cbnz	r3, 800c69c <_svfiprintf_r+0x1b0>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	3307      	adds	r3, #7
 800c658:	f023 0307 	bic.w	r3, r3, #7
 800c65c:	3308      	adds	r3, #8
 800c65e:	9303      	str	r3, [sp, #12]
 800c660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c662:	4433      	add	r3, r6
 800c664:	9309      	str	r3, [sp, #36]	@ 0x24
 800c666:	e76a      	b.n	800c53e <_svfiprintf_r+0x52>
 800c668:	fb0c 3202 	mla	r2, ip, r2, r3
 800c66c:	460c      	mov	r4, r1
 800c66e:	2001      	movs	r0, #1
 800c670:	e7a8      	b.n	800c5c4 <_svfiprintf_r+0xd8>
 800c672:	2300      	movs	r3, #0
 800c674:	3401      	adds	r4, #1
 800c676:	9305      	str	r3, [sp, #20]
 800c678:	4619      	mov	r1, r3
 800c67a:	f04f 0c0a 	mov.w	ip, #10
 800c67e:	4620      	mov	r0, r4
 800c680:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c684:	3a30      	subs	r2, #48	@ 0x30
 800c686:	2a09      	cmp	r2, #9
 800c688:	d903      	bls.n	800c692 <_svfiprintf_r+0x1a6>
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0c6      	beq.n	800c61c <_svfiprintf_r+0x130>
 800c68e:	9105      	str	r1, [sp, #20]
 800c690:	e7c4      	b.n	800c61c <_svfiprintf_r+0x130>
 800c692:	fb0c 2101 	mla	r1, ip, r1, r2
 800c696:	4604      	mov	r4, r0
 800c698:	2301      	movs	r3, #1
 800c69a:	e7f0      	b.n	800c67e <_svfiprintf_r+0x192>
 800c69c:	ab03      	add	r3, sp, #12
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	462a      	mov	r2, r5
 800c6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800c6dc <_svfiprintf_r+0x1f0>)
 800c6a4:	a904      	add	r1, sp, #16
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	f7fd fe88 	bl	800a3bc <_printf_float>
 800c6ac:	1c42      	adds	r2, r0, #1
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	d1d6      	bne.n	800c660 <_svfiprintf_r+0x174>
 800c6b2:	89ab      	ldrh	r3, [r5, #12]
 800c6b4:	065b      	lsls	r3, r3, #25
 800c6b6:	f53f af2d 	bmi.w	800c514 <_svfiprintf_r+0x28>
 800c6ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6bc:	e72c      	b.n	800c518 <_svfiprintf_r+0x2c>
 800c6be:	ab03      	add	r3, sp, #12
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	462a      	mov	r2, r5
 800c6c4:	4b05      	ldr	r3, [pc, #20]	@ (800c6dc <_svfiprintf_r+0x1f0>)
 800c6c6:	a904      	add	r1, sp, #16
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f7fe f90f 	bl	800a8ec <_printf_i>
 800c6ce:	e7ed      	b.n	800c6ac <_svfiprintf_r+0x1c0>
 800c6d0:	08021010 	.word	0x08021010
 800c6d4:	0802101a 	.word	0x0802101a
 800c6d8:	0800a3bd 	.word	0x0800a3bd
 800c6dc:	0800c435 	.word	0x0800c435
 800c6e0:	08021016 	.word	0x08021016

0800c6e4 <__sflush_r>:
 800c6e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ec:	0716      	lsls	r6, r2, #28
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	d454      	bmi.n	800c79e <__sflush_r+0xba>
 800c6f4:	684b      	ldr	r3, [r1, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dc02      	bgt.n	800c700 <__sflush_r+0x1c>
 800c6fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	dd48      	ble.n	800c792 <__sflush_r+0xae>
 800c700:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c702:	2e00      	cmp	r6, #0
 800c704:	d045      	beq.n	800c792 <__sflush_r+0xae>
 800c706:	2300      	movs	r3, #0
 800c708:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c70c:	682f      	ldr	r7, [r5, #0]
 800c70e:	6a21      	ldr	r1, [r4, #32]
 800c710:	602b      	str	r3, [r5, #0]
 800c712:	d030      	beq.n	800c776 <__sflush_r+0x92>
 800c714:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	0759      	lsls	r1, r3, #29
 800c71a:	d505      	bpl.n	800c728 <__sflush_r+0x44>
 800c71c:	6863      	ldr	r3, [r4, #4]
 800c71e:	1ad2      	subs	r2, r2, r3
 800c720:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c722:	b10b      	cbz	r3, 800c728 <__sflush_r+0x44>
 800c724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c726:	1ad2      	subs	r2, r2, r3
 800c728:	2300      	movs	r3, #0
 800c72a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c72c:	6a21      	ldr	r1, [r4, #32]
 800c72e:	4628      	mov	r0, r5
 800c730:	47b0      	blx	r6
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	d106      	bne.n	800c746 <__sflush_r+0x62>
 800c738:	6829      	ldr	r1, [r5, #0]
 800c73a:	291d      	cmp	r1, #29
 800c73c:	d82b      	bhi.n	800c796 <__sflush_r+0xb2>
 800c73e:	4a2a      	ldr	r2, [pc, #168]	@ (800c7e8 <__sflush_r+0x104>)
 800c740:	410a      	asrs	r2, r1
 800c742:	07d6      	lsls	r6, r2, #31
 800c744:	d427      	bmi.n	800c796 <__sflush_r+0xb2>
 800c746:	2200      	movs	r2, #0
 800c748:	6062      	str	r2, [r4, #4]
 800c74a:	04d9      	lsls	r1, r3, #19
 800c74c:	6922      	ldr	r2, [r4, #16]
 800c74e:	6022      	str	r2, [r4, #0]
 800c750:	d504      	bpl.n	800c75c <__sflush_r+0x78>
 800c752:	1c42      	adds	r2, r0, #1
 800c754:	d101      	bne.n	800c75a <__sflush_r+0x76>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	b903      	cbnz	r3, 800c75c <__sflush_r+0x78>
 800c75a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c75c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c75e:	602f      	str	r7, [r5, #0]
 800c760:	b1b9      	cbz	r1, 800c792 <__sflush_r+0xae>
 800c762:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c766:	4299      	cmp	r1, r3
 800c768:	d002      	beq.n	800c770 <__sflush_r+0x8c>
 800c76a:	4628      	mov	r0, r5
 800c76c:	f7ff f9e0 	bl	800bb30 <_free_r>
 800c770:	2300      	movs	r3, #0
 800c772:	6363      	str	r3, [r4, #52]	@ 0x34
 800c774:	e00d      	b.n	800c792 <__sflush_r+0xae>
 800c776:	2301      	movs	r3, #1
 800c778:	4628      	mov	r0, r5
 800c77a:	47b0      	blx	r6
 800c77c:	4602      	mov	r2, r0
 800c77e:	1c50      	adds	r0, r2, #1
 800c780:	d1c9      	bne.n	800c716 <__sflush_r+0x32>
 800c782:	682b      	ldr	r3, [r5, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0c6      	beq.n	800c716 <__sflush_r+0x32>
 800c788:	2b1d      	cmp	r3, #29
 800c78a:	d001      	beq.n	800c790 <__sflush_r+0xac>
 800c78c:	2b16      	cmp	r3, #22
 800c78e:	d11e      	bne.n	800c7ce <__sflush_r+0xea>
 800c790:	602f      	str	r7, [r5, #0]
 800c792:	2000      	movs	r0, #0
 800c794:	e022      	b.n	800c7dc <__sflush_r+0xf8>
 800c796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c79a:	b21b      	sxth	r3, r3
 800c79c:	e01b      	b.n	800c7d6 <__sflush_r+0xf2>
 800c79e:	690f      	ldr	r7, [r1, #16]
 800c7a0:	2f00      	cmp	r7, #0
 800c7a2:	d0f6      	beq.n	800c792 <__sflush_r+0xae>
 800c7a4:	0793      	lsls	r3, r2, #30
 800c7a6:	680e      	ldr	r6, [r1, #0]
 800c7a8:	bf08      	it	eq
 800c7aa:	694b      	ldreq	r3, [r1, #20]
 800c7ac:	600f      	str	r7, [r1, #0]
 800c7ae:	bf18      	it	ne
 800c7b0:	2300      	movne	r3, #0
 800c7b2:	eba6 0807 	sub.w	r8, r6, r7
 800c7b6:	608b      	str	r3, [r1, #8]
 800c7b8:	f1b8 0f00 	cmp.w	r8, #0
 800c7bc:	dde9      	ble.n	800c792 <__sflush_r+0xae>
 800c7be:	6a21      	ldr	r1, [r4, #32]
 800c7c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7c2:	4643      	mov	r3, r8
 800c7c4:	463a      	mov	r2, r7
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	47b0      	blx	r6
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	dc08      	bgt.n	800c7e0 <__sflush_r+0xfc>
 800c7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d6:	81a3      	strh	r3, [r4, #12]
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e0:	4407      	add	r7, r0
 800c7e2:	eba8 0800 	sub.w	r8, r8, r0
 800c7e6:	e7e7      	b.n	800c7b8 <__sflush_r+0xd4>
 800c7e8:	dfbffffe 	.word	0xdfbffffe

0800c7ec <_fflush_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	690b      	ldr	r3, [r1, #16]
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	b913      	cbnz	r3, 800c7fc <_fflush_r+0x10>
 800c7f6:	2500      	movs	r5, #0
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	b118      	cbz	r0, 800c806 <_fflush_r+0x1a>
 800c7fe:	6a03      	ldr	r3, [r0, #32]
 800c800:	b90b      	cbnz	r3, 800c806 <_fflush_r+0x1a>
 800c802:	f7fe fa1f 	bl	800ac44 <__sinit>
 800c806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0f3      	beq.n	800c7f6 <_fflush_r+0xa>
 800c80e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c810:	07d0      	lsls	r0, r2, #31
 800c812:	d404      	bmi.n	800c81e <_fflush_r+0x32>
 800c814:	0599      	lsls	r1, r3, #22
 800c816:	d402      	bmi.n	800c81e <_fflush_r+0x32>
 800c818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c81a:	f7fe fb3a 	bl	800ae92 <__retarget_lock_acquire_recursive>
 800c81e:	4628      	mov	r0, r5
 800c820:	4621      	mov	r1, r4
 800c822:	f7ff ff5f 	bl	800c6e4 <__sflush_r>
 800c826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c828:	07da      	lsls	r2, r3, #31
 800c82a:	4605      	mov	r5, r0
 800c82c:	d4e4      	bmi.n	800c7f8 <_fflush_r+0xc>
 800c82e:	89a3      	ldrh	r3, [r4, #12]
 800c830:	059b      	lsls	r3, r3, #22
 800c832:	d4e1      	bmi.n	800c7f8 <_fflush_r+0xc>
 800c834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c836:	f7fe fb2d 	bl	800ae94 <__retarget_lock_release_recursive>
 800c83a:	e7dd      	b.n	800c7f8 <_fflush_r+0xc>

0800c83c <memmove>:
 800c83c:	4288      	cmp	r0, r1
 800c83e:	b510      	push	{r4, lr}
 800c840:	eb01 0402 	add.w	r4, r1, r2
 800c844:	d902      	bls.n	800c84c <memmove+0x10>
 800c846:	4284      	cmp	r4, r0
 800c848:	4623      	mov	r3, r4
 800c84a:	d807      	bhi.n	800c85c <memmove+0x20>
 800c84c:	1e43      	subs	r3, r0, #1
 800c84e:	42a1      	cmp	r1, r4
 800c850:	d008      	beq.n	800c864 <memmove+0x28>
 800c852:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c85a:	e7f8      	b.n	800c84e <memmove+0x12>
 800c85c:	4402      	add	r2, r0
 800c85e:	4601      	mov	r1, r0
 800c860:	428a      	cmp	r2, r1
 800c862:	d100      	bne.n	800c866 <memmove+0x2a>
 800c864:	bd10      	pop	{r4, pc}
 800c866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c86a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c86e:	e7f7      	b.n	800c860 <memmove+0x24>

0800c870 <_sbrk_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d06      	ldr	r5, [pc, #24]	@ (800c88c <_sbrk_r+0x1c>)
 800c874:	2300      	movs	r3, #0
 800c876:	4604      	mov	r4, r0
 800c878:	4608      	mov	r0, r1
 800c87a:	602b      	str	r3, [r5, #0]
 800c87c:	f7f6 fb1a 	bl	8002eb4 <_sbrk>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_sbrk_r+0x1a>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_sbrk_r+0x1a>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20018e64 	.word	0x20018e64

0800c890 <memcpy>:
 800c890:	440a      	add	r2, r1
 800c892:	4291      	cmp	r1, r2
 800c894:	f100 33ff 	add.w	r3, r0, #4294967295
 800c898:	d100      	bne.n	800c89c <memcpy+0xc>
 800c89a:	4770      	bx	lr
 800c89c:	b510      	push	{r4, lr}
 800c89e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8a6:	4291      	cmp	r1, r2
 800c8a8:	d1f9      	bne.n	800c89e <memcpy+0xe>
 800c8aa:	bd10      	pop	{r4, pc}

0800c8ac <__assert_func>:
 800c8ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8ae:	4614      	mov	r4, r2
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	4b09      	ldr	r3, [pc, #36]	@ (800c8d8 <__assert_func+0x2c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	68d8      	ldr	r0, [r3, #12]
 800c8ba:	b954      	cbnz	r4, 800c8d2 <__assert_func+0x26>
 800c8bc:	4b07      	ldr	r3, [pc, #28]	@ (800c8dc <__assert_func+0x30>)
 800c8be:	461c      	mov	r4, r3
 800c8c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8c4:	9100      	str	r1, [sp, #0]
 800c8c6:	462b      	mov	r3, r5
 800c8c8:	4905      	ldr	r1, [pc, #20]	@ (800c8e0 <__assert_func+0x34>)
 800c8ca:	f000 f86f 	bl	800c9ac <fiprintf>
 800c8ce:	f000 f87f 	bl	800c9d0 <abort>
 800c8d2:	4b04      	ldr	r3, [pc, #16]	@ (800c8e4 <__assert_func+0x38>)
 800c8d4:	e7f4      	b.n	800c8c0 <__assert_func+0x14>
 800c8d6:	bf00      	nop
 800c8d8:	20000018 	.word	0x20000018
 800c8dc:	08021066 	.word	0x08021066
 800c8e0:	08021038 	.word	0x08021038
 800c8e4:	0802102b 	.word	0x0802102b

0800c8e8 <_calloc_r>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	fba1 5402 	umull	r5, r4, r1, r2
 800c8ee:	b93c      	cbnz	r4, 800c900 <_calloc_r+0x18>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	f7ff f991 	bl	800bc18 <_malloc_r>
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	b928      	cbnz	r0, 800c906 <_calloc_r+0x1e>
 800c8fa:	2600      	movs	r6, #0
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
 800c900:	220c      	movs	r2, #12
 800c902:	6002      	str	r2, [r0, #0]
 800c904:	e7f9      	b.n	800c8fa <_calloc_r+0x12>
 800c906:	462a      	mov	r2, r5
 800c908:	4621      	mov	r1, r4
 800c90a:	f7fe fa44 	bl	800ad96 <memset>
 800c90e:	e7f5      	b.n	800c8fc <_calloc_r+0x14>

0800c910 <__ascii_mbtowc>:
 800c910:	b082      	sub	sp, #8
 800c912:	b901      	cbnz	r1, 800c916 <__ascii_mbtowc+0x6>
 800c914:	a901      	add	r1, sp, #4
 800c916:	b142      	cbz	r2, 800c92a <__ascii_mbtowc+0x1a>
 800c918:	b14b      	cbz	r3, 800c92e <__ascii_mbtowc+0x1e>
 800c91a:	7813      	ldrb	r3, [r2, #0]
 800c91c:	600b      	str	r3, [r1, #0]
 800c91e:	7812      	ldrb	r2, [r2, #0]
 800c920:	1e10      	subs	r0, r2, #0
 800c922:	bf18      	it	ne
 800c924:	2001      	movne	r0, #1
 800c926:	b002      	add	sp, #8
 800c928:	4770      	bx	lr
 800c92a:	4610      	mov	r0, r2
 800c92c:	e7fb      	b.n	800c926 <__ascii_mbtowc+0x16>
 800c92e:	f06f 0001 	mvn.w	r0, #1
 800c932:	e7f8      	b.n	800c926 <__ascii_mbtowc+0x16>

0800c934 <_realloc_r>:
 800c934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c938:	4680      	mov	r8, r0
 800c93a:	4615      	mov	r5, r2
 800c93c:	460c      	mov	r4, r1
 800c93e:	b921      	cbnz	r1, 800c94a <_realloc_r+0x16>
 800c940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	4611      	mov	r1, r2
 800c946:	f7ff b967 	b.w	800bc18 <_malloc_r>
 800c94a:	b92a      	cbnz	r2, 800c958 <_realloc_r+0x24>
 800c94c:	f7ff f8f0 	bl	800bb30 <_free_r>
 800c950:	2400      	movs	r4, #0
 800c952:	4620      	mov	r0, r4
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c958:	f000 f841 	bl	800c9de <_malloc_usable_size_r>
 800c95c:	4285      	cmp	r5, r0
 800c95e:	4606      	mov	r6, r0
 800c960:	d802      	bhi.n	800c968 <_realloc_r+0x34>
 800c962:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c966:	d8f4      	bhi.n	800c952 <_realloc_r+0x1e>
 800c968:	4629      	mov	r1, r5
 800c96a:	4640      	mov	r0, r8
 800c96c:	f7ff f954 	bl	800bc18 <_malloc_r>
 800c970:	4607      	mov	r7, r0
 800c972:	2800      	cmp	r0, #0
 800c974:	d0ec      	beq.n	800c950 <_realloc_r+0x1c>
 800c976:	42b5      	cmp	r5, r6
 800c978:	462a      	mov	r2, r5
 800c97a:	4621      	mov	r1, r4
 800c97c:	bf28      	it	cs
 800c97e:	4632      	movcs	r2, r6
 800c980:	f7ff ff86 	bl	800c890 <memcpy>
 800c984:	4621      	mov	r1, r4
 800c986:	4640      	mov	r0, r8
 800c988:	f7ff f8d2 	bl	800bb30 <_free_r>
 800c98c:	463c      	mov	r4, r7
 800c98e:	e7e0      	b.n	800c952 <_realloc_r+0x1e>

0800c990 <__ascii_wctomb>:
 800c990:	4603      	mov	r3, r0
 800c992:	4608      	mov	r0, r1
 800c994:	b141      	cbz	r1, 800c9a8 <__ascii_wctomb+0x18>
 800c996:	2aff      	cmp	r2, #255	@ 0xff
 800c998:	d904      	bls.n	800c9a4 <__ascii_wctomb+0x14>
 800c99a:	228a      	movs	r2, #138	@ 0x8a
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a2:	4770      	bx	lr
 800c9a4:	700a      	strb	r2, [r1, #0]
 800c9a6:	2001      	movs	r0, #1
 800c9a8:	4770      	bx	lr
	...

0800c9ac <fiprintf>:
 800c9ac:	b40e      	push	{r1, r2, r3}
 800c9ae:	b503      	push	{r0, r1, lr}
 800c9b0:	4601      	mov	r1, r0
 800c9b2:	ab03      	add	r3, sp, #12
 800c9b4:	4805      	ldr	r0, [pc, #20]	@ (800c9cc <fiprintf+0x20>)
 800c9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ba:	6800      	ldr	r0, [r0, #0]
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	f000 f83f 	bl	800ca40 <_vfiprintf_r>
 800c9c2:	b002      	add	sp, #8
 800c9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9c8:	b003      	add	sp, #12
 800c9ca:	4770      	bx	lr
 800c9cc:	20000018 	.word	0x20000018

0800c9d0 <abort>:
 800c9d0:	b508      	push	{r3, lr}
 800c9d2:	2006      	movs	r0, #6
 800c9d4:	f000 fa08 	bl	800cde8 <raise>
 800c9d8:	2001      	movs	r0, #1
 800c9da:	f7f6 f9f3 	bl	8002dc4 <_exit>

0800c9de <_malloc_usable_size_r>:
 800c9de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9e2:	1f18      	subs	r0, r3, #4
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	bfbc      	itt	lt
 800c9e8:	580b      	ldrlt	r3, [r1, r0]
 800c9ea:	18c0      	addlt	r0, r0, r3
 800c9ec:	4770      	bx	lr

0800c9ee <__sfputc_r>:
 800c9ee:	6893      	ldr	r3, [r2, #8]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	b410      	push	{r4}
 800c9f6:	6093      	str	r3, [r2, #8]
 800c9f8:	da08      	bge.n	800ca0c <__sfputc_r+0x1e>
 800c9fa:	6994      	ldr	r4, [r2, #24]
 800c9fc:	42a3      	cmp	r3, r4
 800c9fe:	db01      	blt.n	800ca04 <__sfputc_r+0x16>
 800ca00:	290a      	cmp	r1, #10
 800ca02:	d103      	bne.n	800ca0c <__sfputc_r+0x1e>
 800ca04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca08:	f000 b932 	b.w	800cc70 <__swbuf_r>
 800ca0c:	6813      	ldr	r3, [r2, #0]
 800ca0e:	1c58      	adds	r0, r3, #1
 800ca10:	6010      	str	r0, [r2, #0]
 800ca12:	7019      	strb	r1, [r3, #0]
 800ca14:	4608      	mov	r0, r1
 800ca16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <__sfputs_r>:
 800ca1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1e:	4606      	mov	r6, r0
 800ca20:	460f      	mov	r7, r1
 800ca22:	4614      	mov	r4, r2
 800ca24:	18d5      	adds	r5, r2, r3
 800ca26:	42ac      	cmp	r4, r5
 800ca28:	d101      	bne.n	800ca2e <__sfputs_r+0x12>
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	e007      	b.n	800ca3e <__sfputs_r+0x22>
 800ca2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca32:	463a      	mov	r2, r7
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff ffda 	bl	800c9ee <__sfputc_r>
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	d1f3      	bne.n	800ca26 <__sfputs_r+0xa>
 800ca3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca40 <_vfiprintf_r>:
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	460d      	mov	r5, r1
 800ca46:	b09d      	sub	sp, #116	@ 0x74
 800ca48:	4614      	mov	r4, r2
 800ca4a:	4698      	mov	r8, r3
 800ca4c:	4606      	mov	r6, r0
 800ca4e:	b118      	cbz	r0, 800ca58 <_vfiprintf_r+0x18>
 800ca50:	6a03      	ldr	r3, [r0, #32]
 800ca52:	b90b      	cbnz	r3, 800ca58 <_vfiprintf_r+0x18>
 800ca54:	f7fe f8f6 	bl	800ac44 <__sinit>
 800ca58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca5a:	07d9      	lsls	r1, r3, #31
 800ca5c:	d405      	bmi.n	800ca6a <_vfiprintf_r+0x2a>
 800ca5e:	89ab      	ldrh	r3, [r5, #12]
 800ca60:	059a      	lsls	r2, r3, #22
 800ca62:	d402      	bmi.n	800ca6a <_vfiprintf_r+0x2a>
 800ca64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca66:	f7fe fa14 	bl	800ae92 <__retarget_lock_acquire_recursive>
 800ca6a:	89ab      	ldrh	r3, [r5, #12]
 800ca6c:	071b      	lsls	r3, r3, #28
 800ca6e:	d501      	bpl.n	800ca74 <_vfiprintf_r+0x34>
 800ca70:	692b      	ldr	r3, [r5, #16]
 800ca72:	b99b      	cbnz	r3, 800ca9c <_vfiprintf_r+0x5c>
 800ca74:	4629      	mov	r1, r5
 800ca76:	4630      	mov	r0, r6
 800ca78:	f000 f938 	bl	800ccec <__swsetup_r>
 800ca7c:	b170      	cbz	r0, 800ca9c <_vfiprintf_r+0x5c>
 800ca7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca80:	07dc      	lsls	r4, r3, #31
 800ca82:	d504      	bpl.n	800ca8e <_vfiprintf_r+0x4e>
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	b01d      	add	sp, #116	@ 0x74
 800ca8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8e:	89ab      	ldrh	r3, [r5, #12]
 800ca90:	0598      	lsls	r0, r3, #22
 800ca92:	d4f7      	bmi.n	800ca84 <_vfiprintf_r+0x44>
 800ca94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca96:	f7fe f9fd 	bl	800ae94 <__retarget_lock_release_recursive>
 800ca9a:	e7f3      	b.n	800ca84 <_vfiprintf_r+0x44>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800caa0:	2320      	movs	r3, #32
 800caa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800caa6:	f8cd 800c 	str.w	r8, [sp, #12]
 800caaa:	2330      	movs	r3, #48	@ 0x30
 800caac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc5c <_vfiprintf_r+0x21c>
 800cab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cab4:	f04f 0901 	mov.w	r9, #1
 800cab8:	4623      	mov	r3, r4
 800caba:	469a      	mov	sl, r3
 800cabc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cac0:	b10a      	cbz	r2, 800cac6 <_vfiprintf_r+0x86>
 800cac2:	2a25      	cmp	r2, #37	@ 0x25
 800cac4:	d1f9      	bne.n	800caba <_vfiprintf_r+0x7a>
 800cac6:	ebba 0b04 	subs.w	fp, sl, r4
 800caca:	d00b      	beq.n	800cae4 <_vfiprintf_r+0xa4>
 800cacc:	465b      	mov	r3, fp
 800cace:	4622      	mov	r2, r4
 800cad0:	4629      	mov	r1, r5
 800cad2:	4630      	mov	r0, r6
 800cad4:	f7ff ffa2 	bl	800ca1c <__sfputs_r>
 800cad8:	3001      	adds	r0, #1
 800cada:	f000 80a7 	beq.w	800cc2c <_vfiprintf_r+0x1ec>
 800cade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cae0:	445a      	add	r2, fp
 800cae2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cae4:	f89a 3000 	ldrb.w	r3, [sl]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f000 809f 	beq.w	800cc2c <_vfiprintf_r+0x1ec>
 800caee:	2300      	movs	r3, #0
 800caf0:	f04f 32ff 	mov.w	r2, #4294967295
 800caf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caf8:	f10a 0a01 	add.w	sl, sl, #1
 800cafc:	9304      	str	r3, [sp, #16]
 800cafe:	9307      	str	r3, [sp, #28]
 800cb00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb04:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb06:	4654      	mov	r4, sl
 800cb08:	2205      	movs	r2, #5
 800cb0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb0e:	4853      	ldr	r0, [pc, #332]	@ (800cc5c <_vfiprintf_r+0x21c>)
 800cb10:	f7f3 fb7e 	bl	8000210 <memchr>
 800cb14:	9a04      	ldr	r2, [sp, #16]
 800cb16:	b9d8      	cbnz	r0, 800cb50 <_vfiprintf_r+0x110>
 800cb18:	06d1      	lsls	r1, r2, #27
 800cb1a:	bf44      	itt	mi
 800cb1c:	2320      	movmi	r3, #32
 800cb1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb22:	0713      	lsls	r3, r2, #28
 800cb24:	bf44      	itt	mi
 800cb26:	232b      	movmi	r3, #43	@ 0x2b
 800cb28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb30:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb32:	d015      	beq.n	800cb60 <_vfiprintf_r+0x120>
 800cb34:	9a07      	ldr	r2, [sp, #28]
 800cb36:	4654      	mov	r4, sl
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f04f 0c0a 	mov.w	ip, #10
 800cb3e:	4621      	mov	r1, r4
 800cb40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb44:	3b30      	subs	r3, #48	@ 0x30
 800cb46:	2b09      	cmp	r3, #9
 800cb48:	d94b      	bls.n	800cbe2 <_vfiprintf_r+0x1a2>
 800cb4a:	b1b0      	cbz	r0, 800cb7a <_vfiprintf_r+0x13a>
 800cb4c:	9207      	str	r2, [sp, #28]
 800cb4e:	e014      	b.n	800cb7a <_vfiprintf_r+0x13a>
 800cb50:	eba0 0308 	sub.w	r3, r0, r8
 800cb54:	fa09 f303 	lsl.w	r3, r9, r3
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	9304      	str	r3, [sp, #16]
 800cb5c:	46a2      	mov	sl, r4
 800cb5e:	e7d2      	b.n	800cb06 <_vfiprintf_r+0xc6>
 800cb60:	9b03      	ldr	r3, [sp, #12]
 800cb62:	1d19      	adds	r1, r3, #4
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	9103      	str	r1, [sp, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	bfbb      	ittet	lt
 800cb6c:	425b      	neglt	r3, r3
 800cb6e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb72:	9307      	strge	r3, [sp, #28]
 800cb74:	9307      	strlt	r3, [sp, #28]
 800cb76:	bfb8      	it	lt
 800cb78:	9204      	strlt	r2, [sp, #16]
 800cb7a:	7823      	ldrb	r3, [r4, #0]
 800cb7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb7e:	d10a      	bne.n	800cb96 <_vfiprintf_r+0x156>
 800cb80:	7863      	ldrb	r3, [r4, #1]
 800cb82:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb84:	d132      	bne.n	800cbec <_vfiprintf_r+0x1ac>
 800cb86:	9b03      	ldr	r3, [sp, #12]
 800cb88:	1d1a      	adds	r2, r3, #4
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	9203      	str	r2, [sp, #12]
 800cb8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb92:	3402      	adds	r4, #2
 800cb94:	9305      	str	r3, [sp, #20]
 800cb96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc6c <_vfiprintf_r+0x22c>
 800cb9a:	7821      	ldrb	r1, [r4, #0]
 800cb9c:	2203      	movs	r2, #3
 800cb9e:	4650      	mov	r0, sl
 800cba0:	f7f3 fb36 	bl	8000210 <memchr>
 800cba4:	b138      	cbz	r0, 800cbb6 <_vfiprintf_r+0x176>
 800cba6:	9b04      	ldr	r3, [sp, #16]
 800cba8:	eba0 000a 	sub.w	r0, r0, sl
 800cbac:	2240      	movs	r2, #64	@ 0x40
 800cbae:	4082      	lsls	r2, r0
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	3401      	adds	r4, #1
 800cbb4:	9304      	str	r3, [sp, #16]
 800cbb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbba:	4829      	ldr	r0, [pc, #164]	@ (800cc60 <_vfiprintf_r+0x220>)
 800cbbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbc0:	2206      	movs	r2, #6
 800cbc2:	f7f3 fb25 	bl	8000210 <memchr>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d03f      	beq.n	800cc4a <_vfiprintf_r+0x20a>
 800cbca:	4b26      	ldr	r3, [pc, #152]	@ (800cc64 <_vfiprintf_r+0x224>)
 800cbcc:	bb1b      	cbnz	r3, 800cc16 <_vfiprintf_r+0x1d6>
 800cbce:	9b03      	ldr	r3, [sp, #12]
 800cbd0:	3307      	adds	r3, #7
 800cbd2:	f023 0307 	bic.w	r3, r3, #7
 800cbd6:	3308      	adds	r3, #8
 800cbd8:	9303      	str	r3, [sp, #12]
 800cbda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbdc:	443b      	add	r3, r7
 800cbde:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbe0:	e76a      	b.n	800cab8 <_vfiprintf_r+0x78>
 800cbe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	2001      	movs	r0, #1
 800cbea:	e7a8      	b.n	800cb3e <_vfiprintf_r+0xfe>
 800cbec:	2300      	movs	r3, #0
 800cbee:	3401      	adds	r4, #1
 800cbf0:	9305      	str	r3, [sp, #20]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	f04f 0c0a 	mov.w	ip, #10
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbfe:	3a30      	subs	r2, #48	@ 0x30
 800cc00:	2a09      	cmp	r2, #9
 800cc02:	d903      	bls.n	800cc0c <_vfiprintf_r+0x1cc>
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d0c6      	beq.n	800cb96 <_vfiprintf_r+0x156>
 800cc08:	9105      	str	r1, [sp, #20]
 800cc0a:	e7c4      	b.n	800cb96 <_vfiprintf_r+0x156>
 800cc0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc10:	4604      	mov	r4, r0
 800cc12:	2301      	movs	r3, #1
 800cc14:	e7f0      	b.n	800cbf8 <_vfiprintf_r+0x1b8>
 800cc16:	ab03      	add	r3, sp, #12
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	462a      	mov	r2, r5
 800cc1c:	4b12      	ldr	r3, [pc, #72]	@ (800cc68 <_vfiprintf_r+0x228>)
 800cc1e:	a904      	add	r1, sp, #16
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7fd fbcb 	bl	800a3bc <_printf_float>
 800cc26:	4607      	mov	r7, r0
 800cc28:	1c78      	adds	r0, r7, #1
 800cc2a:	d1d6      	bne.n	800cbda <_vfiprintf_r+0x19a>
 800cc2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc2e:	07d9      	lsls	r1, r3, #31
 800cc30:	d405      	bmi.n	800cc3e <_vfiprintf_r+0x1fe>
 800cc32:	89ab      	ldrh	r3, [r5, #12]
 800cc34:	059a      	lsls	r2, r3, #22
 800cc36:	d402      	bmi.n	800cc3e <_vfiprintf_r+0x1fe>
 800cc38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc3a:	f7fe f92b 	bl	800ae94 <__retarget_lock_release_recursive>
 800cc3e:	89ab      	ldrh	r3, [r5, #12]
 800cc40:	065b      	lsls	r3, r3, #25
 800cc42:	f53f af1f 	bmi.w	800ca84 <_vfiprintf_r+0x44>
 800cc46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc48:	e71e      	b.n	800ca88 <_vfiprintf_r+0x48>
 800cc4a:	ab03      	add	r3, sp, #12
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4b05      	ldr	r3, [pc, #20]	@ (800cc68 <_vfiprintf_r+0x228>)
 800cc52:	a904      	add	r1, sp, #16
 800cc54:	4630      	mov	r0, r6
 800cc56:	f7fd fe49 	bl	800a8ec <_printf_i>
 800cc5a:	e7e4      	b.n	800cc26 <_vfiprintf_r+0x1e6>
 800cc5c:	08021010 	.word	0x08021010
 800cc60:	0802101a 	.word	0x0802101a
 800cc64:	0800a3bd 	.word	0x0800a3bd
 800cc68:	0800ca1d 	.word	0x0800ca1d
 800cc6c:	08021016 	.word	0x08021016

0800cc70 <__swbuf_r>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	460e      	mov	r6, r1
 800cc74:	4614      	mov	r4, r2
 800cc76:	4605      	mov	r5, r0
 800cc78:	b118      	cbz	r0, 800cc82 <__swbuf_r+0x12>
 800cc7a:	6a03      	ldr	r3, [r0, #32]
 800cc7c:	b90b      	cbnz	r3, 800cc82 <__swbuf_r+0x12>
 800cc7e:	f7fd ffe1 	bl	800ac44 <__sinit>
 800cc82:	69a3      	ldr	r3, [r4, #24]
 800cc84:	60a3      	str	r3, [r4, #8]
 800cc86:	89a3      	ldrh	r3, [r4, #12]
 800cc88:	071a      	lsls	r2, r3, #28
 800cc8a:	d501      	bpl.n	800cc90 <__swbuf_r+0x20>
 800cc8c:	6923      	ldr	r3, [r4, #16]
 800cc8e:	b943      	cbnz	r3, 800cca2 <__swbuf_r+0x32>
 800cc90:	4621      	mov	r1, r4
 800cc92:	4628      	mov	r0, r5
 800cc94:	f000 f82a 	bl	800ccec <__swsetup_r>
 800cc98:	b118      	cbz	r0, 800cca2 <__swbuf_r+0x32>
 800cc9a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc9e:	4638      	mov	r0, r7
 800cca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	6922      	ldr	r2, [r4, #16]
 800cca6:	1a98      	subs	r0, r3, r2
 800cca8:	6963      	ldr	r3, [r4, #20]
 800ccaa:	b2f6      	uxtb	r6, r6
 800ccac:	4283      	cmp	r3, r0
 800ccae:	4637      	mov	r7, r6
 800ccb0:	dc05      	bgt.n	800ccbe <__swbuf_r+0x4e>
 800ccb2:	4621      	mov	r1, r4
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f7ff fd99 	bl	800c7ec <_fflush_r>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d1ed      	bne.n	800cc9a <__swbuf_r+0x2a>
 800ccbe:	68a3      	ldr	r3, [r4, #8]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	60a3      	str	r3, [r4, #8]
 800ccc4:	6823      	ldr	r3, [r4, #0]
 800ccc6:	1c5a      	adds	r2, r3, #1
 800ccc8:	6022      	str	r2, [r4, #0]
 800ccca:	701e      	strb	r6, [r3, #0]
 800cccc:	6962      	ldr	r2, [r4, #20]
 800ccce:	1c43      	adds	r3, r0, #1
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d004      	beq.n	800ccde <__swbuf_r+0x6e>
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	07db      	lsls	r3, r3, #31
 800ccd8:	d5e1      	bpl.n	800cc9e <__swbuf_r+0x2e>
 800ccda:	2e0a      	cmp	r6, #10
 800ccdc:	d1df      	bne.n	800cc9e <__swbuf_r+0x2e>
 800ccde:	4621      	mov	r1, r4
 800cce0:	4628      	mov	r0, r5
 800cce2:	f7ff fd83 	bl	800c7ec <_fflush_r>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d0d9      	beq.n	800cc9e <__swbuf_r+0x2e>
 800ccea:	e7d6      	b.n	800cc9a <__swbuf_r+0x2a>

0800ccec <__swsetup_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4b29      	ldr	r3, [pc, #164]	@ (800cd94 <__swsetup_r+0xa8>)
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	6818      	ldr	r0, [r3, #0]
 800ccf4:	460c      	mov	r4, r1
 800ccf6:	b118      	cbz	r0, 800cd00 <__swsetup_r+0x14>
 800ccf8:	6a03      	ldr	r3, [r0, #32]
 800ccfa:	b90b      	cbnz	r3, 800cd00 <__swsetup_r+0x14>
 800ccfc:	f7fd ffa2 	bl	800ac44 <__sinit>
 800cd00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd04:	0719      	lsls	r1, r3, #28
 800cd06:	d422      	bmi.n	800cd4e <__swsetup_r+0x62>
 800cd08:	06da      	lsls	r2, r3, #27
 800cd0a:	d407      	bmi.n	800cd1c <__swsetup_r+0x30>
 800cd0c:	2209      	movs	r2, #9
 800cd0e:	602a      	str	r2, [r5, #0]
 800cd10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1a:	e033      	b.n	800cd84 <__swsetup_r+0x98>
 800cd1c:	0758      	lsls	r0, r3, #29
 800cd1e:	d512      	bpl.n	800cd46 <__swsetup_r+0x5a>
 800cd20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd22:	b141      	cbz	r1, 800cd36 <__swsetup_r+0x4a>
 800cd24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd28:	4299      	cmp	r1, r3
 800cd2a:	d002      	beq.n	800cd32 <__swsetup_r+0x46>
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	f7fe feff 	bl	800bb30 <_free_r>
 800cd32:	2300      	movs	r3, #0
 800cd34:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd36:	89a3      	ldrh	r3, [r4, #12]
 800cd38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd3c:	81a3      	strh	r3, [r4, #12]
 800cd3e:	2300      	movs	r3, #0
 800cd40:	6063      	str	r3, [r4, #4]
 800cd42:	6923      	ldr	r3, [r4, #16]
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	89a3      	ldrh	r3, [r4, #12]
 800cd48:	f043 0308 	orr.w	r3, r3, #8
 800cd4c:	81a3      	strh	r3, [r4, #12]
 800cd4e:	6923      	ldr	r3, [r4, #16]
 800cd50:	b94b      	cbnz	r3, 800cd66 <__swsetup_r+0x7a>
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd5c:	d003      	beq.n	800cd66 <__swsetup_r+0x7a>
 800cd5e:	4621      	mov	r1, r4
 800cd60:	4628      	mov	r0, r5
 800cd62:	f000 f883 	bl	800ce6c <__smakebuf_r>
 800cd66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd6a:	f013 0201 	ands.w	r2, r3, #1
 800cd6e:	d00a      	beq.n	800cd86 <__swsetup_r+0x9a>
 800cd70:	2200      	movs	r2, #0
 800cd72:	60a2      	str	r2, [r4, #8]
 800cd74:	6962      	ldr	r2, [r4, #20]
 800cd76:	4252      	negs	r2, r2
 800cd78:	61a2      	str	r2, [r4, #24]
 800cd7a:	6922      	ldr	r2, [r4, #16]
 800cd7c:	b942      	cbnz	r2, 800cd90 <__swsetup_r+0xa4>
 800cd7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd82:	d1c5      	bne.n	800cd10 <__swsetup_r+0x24>
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	0799      	lsls	r1, r3, #30
 800cd88:	bf58      	it	pl
 800cd8a:	6962      	ldrpl	r2, [r4, #20]
 800cd8c:	60a2      	str	r2, [r4, #8]
 800cd8e:	e7f4      	b.n	800cd7a <__swsetup_r+0x8e>
 800cd90:	2000      	movs	r0, #0
 800cd92:	e7f7      	b.n	800cd84 <__swsetup_r+0x98>
 800cd94:	20000018 	.word	0x20000018

0800cd98 <_raise_r>:
 800cd98:	291f      	cmp	r1, #31
 800cd9a:	b538      	push	{r3, r4, r5, lr}
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	d904      	bls.n	800cdac <_raise_r+0x14>
 800cda2:	2316      	movs	r3, #22
 800cda4:	6003      	str	r3, [r0, #0]
 800cda6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdaa:	bd38      	pop	{r3, r4, r5, pc}
 800cdac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cdae:	b112      	cbz	r2, 800cdb6 <_raise_r+0x1e>
 800cdb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdb4:	b94b      	cbnz	r3, 800cdca <_raise_r+0x32>
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f000 f830 	bl	800ce1c <_getpid_r>
 800cdbc:	4622      	mov	r2, r4
 800cdbe:	4601      	mov	r1, r0
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdc6:	f000 b817 	b.w	800cdf8 <_kill_r>
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d00a      	beq.n	800cde4 <_raise_r+0x4c>
 800cdce:	1c59      	adds	r1, r3, #1
 800cdd0:	d103      	bne.n	800cdda <_raise_r+0x42>
 800cdd2:	2316      	movs	r3, #22
 800cdd4:	6003      	str	r3, [r0, #0]
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	e7e7      	b.n	800cdaa <_raise_r+0x12>
 800cdda:	2100      	movs	r1, #0
 800cddc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cde0:	4620      	mov	r0, r4
 800cde2:	4798      	blx	r3
 800cde4:	2000      	movs	r0, #0
 800cde6:	e7e0      	b.n	800cdaa <_raise_r+0x12>

0800cde8 <raise>:
 800cde8:	4b02      	ldr	r3, [pc, #8]	@ (800cdf4 <raise+0xc>)
 800cdea:	4601      	mov	r1, r0
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	f7ff bfd3 	b.w	800cd98 <_raise_r>
 800cdf2:	bf00      	nop
 800cdf4:	20000018 	.word	0x20000018

0800cdf8 <_kill_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	@ (800ce18 <_kill_r+0x20>)
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	4604      	mov	r4, r0
 800ce00:	4608      	mov	r0, r1
 800ce02:	4611      	mov	r1, r2
 800ce04:	602b      	str	r3, [r5, #0]
 800ce06:	f7f5 ffcd 	bl	8002da4 <_kill>
 800ce0a:	1c43      	adds	r3, r0, #1
 800ce0c:	d102      	bne.n	800ce14 <_kill_r+0x1c>
 800ce0e:	682b      	ldr	r3, [r5, #0]
 800ce10:	b103      	cbz	r3, 800ce14 <_kill_r+0x1c>
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	bd38      	pop	{r3, r4, r5, pc}
 800ce16:	bf00      	nop
 800ce18:	20018e64 	.word	0x20018e64

0800ce1c <_getpid_r>:
 800ce1c:	f7f5 bfba 	b.w	8002d94 <_getpid>

0800ce20 <__swhatbuf_r>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	460c      	mov	r4, r1
 800ce24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce28:	2900      	cmp	r1, #0
 800ce2a:	b096      	sub	sp, #88	@ 0x58
 800ce2c:	4615      	mov	r5, r2
 800ce2e:	461e      	mov	r6, r3
 800ce30:	da0d      	bge.n	800ce4e <__swhatbuf_r+0x2e>
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce38:	f04f 0100 	mov.w	r1, #0
 800ce3c:	bf14      	ite	ne
 800ce3e:	2340      	movne	r3, #64	@ 0x40
 800ce40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce44:	2000      	movs	r0, #0
 800ce46:	6031      	str	r1, [r6, #0]
 800ce48:	602b      	str	r3, [r5, #0]
 800ce4a:	b016      	add	sp, #88	@ 0x58
 800ce4c:	bd70      	pop	{r4, r5, r6, pc}
 800ce4e:	466a      	mov	r2, sp
 800ce50:	f000 f848 	bl	800cee4 <_fstat_r>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	dbec      	blt.n	800ce32 <__swhatbuf_r+0x12>
 800ce58:	9901      	ldr	r1, [sp, #4]
 800ce5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce62:	4259      	negs	r1, r3
 800ce64:	4159      	adcs	r1, r3
 800ce66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce6a:	e7eb      	b.n	800ce44 <__swhatbuf_r+0x24>

0800ce6c <__smakebuf_r>:
 800ce6c:	898b      	ldrh	r3, [r1, #12]
 800ce6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce70:	079d      	lsls	r5, r3, #30
 800ce72:	4606      	mov	r6, r0
 800ce74:	460c      	mov	r4, r1
 800ce76:	d507      	bpl.n	800ce88 <__smakebuf_r+0x1c>
 800ce78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce7c:	6023      	str	r3, [r4, #0]
 800ce7e:	6123      	str	r3, [r4, #16]
 800ce80:	2301      	movs	r3, #1
 800ce82:	6163      	str	r3, [r4, #20]
 800ce84:	b003      	add	sp, #12
 800ce86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce88:	ab01      	add	r3, sp, #4
 800ce8a:	466a      	mov	r2, sp
 800ce8c:	f7ff ffc8 	bl	800ce20 <__swhatbuf_r>
 800ce90:	9f00      	ldr	r7, [sp, #0]
 800ce92:	4605      	mov	r5, r0
 800ce94:	4639      	mov	r1, r7
 800ce96:	4630      	mov	r0, r6
 800ce98:	f7fe febe 	bl	800bc18 <_malloc_r>
 800ce9c:	b948      	cbnz	r0, 800ceb2 <__smakebuf_r+0x46>
 800ce9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea2:	059a      	lsls	r2, r3, #22
 800cea4:	d4ee      	bmi.n	800ce84 <__smakebuf_r+0x18>
 800cea6:	f023 0303 	bic.w	r3, r3, #3
 800ceaa:	f043 0302 	orr.w	r3, r3, #2
 800ceae:	81a3      	strh	r3, [r4, #12]
 800ceb0:	e7e2      	b.n	800ce78 <__smakebuf_r+0xc>
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	6020      	str	r0, [r4, #0]
 800ceb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceba:	81a3      	strh	r3, [r4, #12]
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cec2:	b15b      	cbz	r3, 800cedc <__smakebuf_r+0x70>
 800cec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec8:	4630      	mov	r0, r6
 800ceca:	f000 f81d 	bl	800cf08 <_isatty_r>
 800cece:	b128      	cbz	r0, 800cedc <__smakebuf_r+0x70>
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	f023 0303 	bic.w	r3, r3, #3
 800ced6:	f043 0301 	orr.w	r3, r3, #1
 800ceda:	81a3      	strh	r3, [r4, #12]
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	431d      	orrs	r5, r3
 800cee0:	81a5      	strh	r5, [r4, #12]
 800cee2:	e7cf      	b.n	800ce84 <__smakebuf_r+0x18>

0800cee4 <_fstat_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4d07      	ldr	r5, [pc, #28]	@ (800cf04 <_fstat_r+0x20>)
 800cee8:	2300      	movs	r3, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	4611      	mov	r1, r2
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	f7f5 ffb7 	bl	8002e64 <_fstat>
 800cef6:	1c43      	adds	r3, r0, #1
 800cef8:	d102      	bne.n	800cf00 <_fstat_r+0x1c>
 800cefa:	682b      	ldr	r3, [r5, #0]
 800cefc:	b103      	cbz	r3, 800cf00 <_fstat_r+0x1c>
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	bd38      	pop	{r3, r4, r5, pc}
 800cf02:	bf00      	nop
 800cf04:	20018e64 	.word	0x20018e64

0800cf08 <_isatty_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4d06      	ldr	r5, [pc, #24]	@ (800cf24 <_isatty_r+0x1c>)
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4604      	mov	r4, r0
 800cf10:	4608      	mov	r0, r1
 800cf12:	602b      	str	r3, [r5, #0]
 800cf14:	f7f5 ffb6 	bl	8002e84 <_isatty>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_isatty_r+0x1a>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_isatty_r+0x1a>
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	20018e64 	.word	0x20018e64

0800cf28 <hypot>:
 800cf28:	b508      	push	{r3, lr}
 800cf2a:	ed2d 8b06 	vpush	{d8-d10}
 800cf2e:	eeb0 aa40 	vmov.f32	s20, s0
 800cf32:	eef0 aa60 	vmov.f32	s21, s1
 800cf36:	eeb0 9a41 	vmov.f32	s18, s2
 800cf3a:	eef0 9a61 	vmov.f32	s19, s3
 800cf3e:	f000 f9d3 	bl	800d2e8 <__ieee754_hypot>
 800cf42:	eeb0 8a40 	vmov.f32	s16, s0
 800cf46:	eef0 8a60 	vmov.f32	s17, s1
 800cf4a:	f000 f9c1 	bl	800d2d0 <finite>
 800cf4e:	b998      	cbnz	r0, 800cf78 <hypot+0x50>
 800cf50:	eeb0 0a4a 	vmov.f32	s0, s20
 800cf54:	eef0 0a6a 	vmov.f32	s1, s21
 800cf58:	f000 f9ba 	bl	800d2d0 <finite>
 800cf5c:	b160      	cbz	r0, 800cf78 <hypot+0x50>
 800cf5e:	eeb0 0a49 	vmov.f32	s0, s18
 800cf62:	eef0 0a69 	vmov.f32	s1, s19
 800cf66:	f000 f9b3 	bl	800d2d0 <finite>
 800cf6a:	b128      	cbz	r0, 800cf78 <hypot+0x50>
 800cf6c:	f7fd ff66 	bl	800ae3c <__errno>
 800cf70:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800cf88 <hypot+0x60>
 800cf74:	2322      	movs	r3, #34	@ 0x22
 800cf76:	6003      	str	r3, [r0, #0]
 800cf78:	eeb0 0a48 	vmov.f32	s0, s16
 800cf7c:	eef0 0a68 	vmov.f32	s1, s17
 800cf80:	ecbd 8b06 	vpop	{d8-d10}
 800cf84:	bd08      	pop	{r3, pc}
 800cf86:	bf00      	nop
 800cf88:	00000000 	.word	0x00000000
 800cf8c:	7ff00000 	.word	0x7ff00000

0800cf90 <atan>:
 800cf90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	ec55 4b10 	vmov	r4, r5, d0
 800cf98:	4bbf      	ldr	r3, [pc, #764]	@ (800d298 <atan+0x308>)
 800cf9a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800cf9e:	429e      	cmp	r6, r3
 800cfa0:	46ab      	mov	fp, r5
 800cfa2:	d918      	bls.n	800cfd6 <atan+0x46>
 800cfa4:	4bbd      	ldr	r3, [pc, #756]	@ (800d29c <atan+0x30c>)
 800cfa6:	429e      	cmp	r6, r3
 800cfa8:	d801      	bhi.n	800cfae <atan+0x1e>
 800cfaa:	d109      	bne.n	800cfc0 <atan+0x30>
 800cfac:	b144      	cbz	r4, 800cfc0 <atan+0x30>
 800cfae:	4622      	mov	r2, r4
 800cfb0:	462b      	mov	r3, r5
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	4629      	mov	r1, r5
 800cfb6:	f7f3 f989 	bl	80002cc <__adddf3>
 800cfba:	4604      	mov	r4, r0
 800cfbc:	460d      	mov	r5, r1
 800cfbe:	e006      	b.n	800cfce <atan+0x3e>
 800cfc0:	f1bb 0f00 	cmp.w	fp, #0
 800cfc4:	f340 812b 	ble.w	800d21e <atan+0x28e>
 800cfc8:	a597      	add	r5, pc, #604	@ (adr r5, 800d228 <atan+0x298>)
 800cfca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cfce:	ec45 4b10 	vmov	d0, r4, r5
 800cfd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd6:	4bb2      	ldr	r3, [pc, #712]	@ (800d2a0 <atan+0x310>)
 800cfd8:	429e      	cmp	r6, r3
 800cfda:	d813      	bhi.n	800d004 <atan+0x74>
 800cfdc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800cfe0:	429e      	cmp	r6, r3
 800cfe2:	d80c      	bhi.n	800cffe <atan+0x6e>
 800cfe4:	a392      	add	r3, pc, #584	@ (adr r3, 800d230 <atan+0x2a0>)
 800cfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfea:	4620      	mov	r0, r4
 800cfec:	4629      	mov	r1, r5
 800cfee:	f7f3 f96d 	bl	80002cc <__adddf3>
 800cff2:	4bac      	ldr	r3, [pc, #688]	@ (800d2a4 <atan+0x314>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	f7f3 fdaf 	bl	8000b58 <__aeabi_dcmpgt>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d1e7      	bne.n	800cfce <atan+0x3e>
 800cffe:	f04f 3aff 	mov.w	sl, #4294967295
 800d002:	e029      	b.n	800d058 <atan+0xc8>
 800d004:	f000 f95c 	bl	800d2c0 <fabs>
 800d008:	4ba7      	ldr	r3, [pc, #668]	@ (800d2a8 <atan+0x318>)
 800d00a:	429e      	cmp	r6, r3
 800d00c:	ec55 4b10 	vmov	r4, r5, d0
 800d010:	f200 80bc 	bhi.w	800d18c <atan+0x1fc>
 800d014:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d018:	429e      	cmp	r6, r3
 800d01a:	f200 809e 	bhi.w	800d15a <atan+0x1ca>
 800d01e:	4622      	mov	r2, r4
 800d020:	462b      	mov	r3, r5
 800d022:	4620      	mov	r0, r4
 800d024:	4629      	mov	r1, r5
 800d026:	f7f3 f951 	bl	80002cc <__adddf3>
 800d02a:	4b9e      	ldr	r3, [pc, #632]	@ (800d2a4 <atan+0x314>)
 800d02c:	2200      	movs	r2, #0
 800d02e:	f7f3 f94b 	bl	80002c8 <__aeabi_dsub>
 800d032:	2200      	movs	r2, #0
 800d034:	4606      	mov	r6, r0
 800d036:	460f      	mov	r7, r1
 800d038:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d03c:	4620      	mov	r0, r4
 800d03e:	4629      	mov	r1, r5
 800d040:	f7f3 f944 	bl	80002cc <__adddf3>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4630      	mov	r0, r6
 800d04a:	4639      	mov	r1, r7
 800d04c:	f7f3 fc1e 	bl	800088c <__aeabi_ddiv>
 800d050:	f04f 0a00 	mov.w	sl, #0
 800d054:	4604      	mov	r4, r0
 800d056:	460d      	mov	r5, r1
 800d058:	4622      	mov	r2, r4
 800d05a:	462b      	mov	r3, r5
 800d05c:	4620      	mov	r0, r4
 800d05e:	4629      	mov	r1, r5
 800d060:	f7f3 faea 	bl	8000638 <__aeabi_dmul>
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	4680      	mov	r8, r0
 800d06a:	4689      	mov	r9, r1
 800d06c:	f7f3 fae4 	bl	8000638 <__aeabi_dmul>
 800d070:	a371      	add	r3, pc, #452	@ (adr r3, 800d238 <atan+0x2a8>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	4606      	mov	r6, r0
 800d078:	460f      	mov	r7, r1
 800d07a:	f7f3 fadd 	bl	8000638 <__aeabi_dmul>
 800d07e:	a370      	add	r3, pc, #448	@ (adr r3, 800d240 <atan+0x2b0>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	f7f3 f922 	bl	80002cc <__adddf3>
 800d088:	4632      	mov	r2, r6
 800d08a:	463b      	mov	r3, r7
 800d08c:	f7f3 fad4 	bl	8000638 <__aeabi_dmul>
 800d090:	a36d      	add	r3, pc, #436	@ (adr r3, 800d248 <atan+0x2b8>)
 800d092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d096:	f7f3 f919 	bl	80002cc <__adddf3>
 800d09a:	4632      	mov	r2, r6
 800d09c:	463b      	mov	r3, r7
 800d09e:	f7f3 facb 	bl	8000638 <__aeabi_dmul>
 800d0a2:	a36b      	add	r3, pc, #428	@ (adr r3, 800d250 <atan+0x2c0>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f7f3 f910 	bl	80002cc <__adddf3>
 800d0ac:	4632      	mov	r2, r6
 800d0ae:	463b      	mov	r3, r7
 800d0b0:	f7f3 fac2 	bl	8000638 <__aeabi_dmul>
 800d0b4:	a368      	add	r3, pc, #416	@ (adr r3, 800d258 <atan+0x2c8>)
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	f7f3 f907 	bl	80002cc <__adddf3>
 800d0be:	4632      	mov	r2, r6
 800d0c0:	463b      	mov	r3, r7
 800d0c2:	f7f3 fab9 	bl	8000638 <__aeabi_dmul>
 800d0c6:	a366      	add	r3, pc, #408	@ (adr r3, 800d260 <atan+0x2d0>)
 800d0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0cc:	f7f3 f8fe 	bl	80002cc <__adddf3>
 800d0d0:	4642      	mov	r2, r8
 800d0d2:	464b      	mov	r3, r9
 800d0d4:	f7f3 fab0 	bl	8000638 <__aeabi_dmul>
 800d0d8:	a363      	add	r3, pc, #396	@ (adr r3, 800d268 <atan+0x2d8>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	4680      	mov	r8, r0
 800d0e0:	4689      	mov	r9, r1
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	f7f3 faa7 	bl	8000638 <__aeabi_dmul>
 800d0ea:	a361      	add	r3, pc, #388	@ (adr r3, 800d270 <atan+0x2e0>)
 800d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f0:	f7f3 f8ea 	bl	80002c8 <__aeabi_dsub>
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	f7f3 fa9e 	bl	8000638 <__aeabi_dmul>
 800d0fc:	a35e      	add	r3, pc, #376	@ (adr r3, 800d278 <atan+0x2e8>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f8e1 	bl	80002c8 <__aeabi_dsub>
 800d106:	4632      	mov	r2, r6
 800d108:	463b      	mov	r3, r7
 800d10a:	f7f3 fa95 	bl	8000638 <__aeabi_dmul>
 800d10e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d280 <atan+0x2f0>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7f3 f8d8 	bl	80002c8 <__aeabi_dsub>
 800d118:	4632      	mov	r2, r6
 800d11a:	463b      	mov	r3, r7
 800d11c:	f7f3 fa8c 	bl	8000638 <__aeabi_dmul>
 800d120:	a359      	add	r3, pc, #356	@ (adr r3, 800d288 <atan+0x2f8>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7f3 f8cf 	bl	80002c8 <__aeabi_dsub>
 800d12a:	4632      	mov	r2, r6
 800d12c:	463b      	mov	r3, r7
 800d12e:	f7f3 fa83 	bl	8000638 <__aeabi_dmul>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	4640      	mov	r0, r8
 800d138:	4649      	mov	r1, r9
 800d13a:	f7f3 f8c7 	bl	80002cc <__adddf3>
 800d13e:	4622      	mov	r2, r4
 800d140:	462b      	mov	r3, r5
 800d142:	f7f3 fa79 	bl	8000638 <__aeabi_dmul>
 800d146:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d14a:	4602      	mov	r2, r0
 800d14c:	460b      	mov	r3, r1
 800d14e:	d148      	bne.n	800d1e2 <atan+0x252>
 800d150:	4620      	mov	r0, r4
 800d152:	4629      	mov	r1, r5
 800d154:	f7f3 f8b8 	bl	80002c8 <__aeabi_dsub>
 800d158:	e72f      	b.n	800cfba <atan+0x2a>
 800d15a:	4b52      	ldr	r3, [pc, #328]	@ (800d2a4 <atan+0x314>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	4620      	mov	r0, r4
 800d160:	4629      	mov	r1, r5
 800d162:	f7f3 f8b1 	bl	80002c8 <__aeabi_dsub>
 800d166:	4b4f      	ldr	r3, [pc, #316]	@ (800d2a4 <atan+0x314>)
 800d168:	4606      	mov	r6, r0
 800d16a:	460f      	mov	r7, r1
 800d16c:	2200      	movs	r2, #0
 800d16e:	4620      	mov	r0, r4
 800d170:	4629      	mov	r1, r5
 800d172:	f7f3 f8ab 	bl	80002cc <__adddf3>
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	4630      	mov	r0, r6
 800d17c:	4639      	mov	r1, r7
 800d17e:	f7f3 fb85 	bl	800088c <__aeabi_ddiv>
 800d182:	f04f 0a01 	mov.w	sl, #1
 800d186:	4604      	mov	r4, r0
 800d188:	460d      	mov	r5, r1
 800d18a:	e765      	b.n	800d058 <atan+0xc8>
 800d18c:	4b47      	ldr	r3, [pc, #284]	@ (800d2ac <atan+0x31c>)
 800d18e:	429e      	cmp	r6, r3
 800d190:	d21c      	bcs.n	800d1cc <atan+0x23c>
 800d192:	4b47      	ldr	r3, [pc, #284]	@ (800d2b0 <atan+0x320>)
 800d194:	2200      	movs	r2, #0
 800d196:	4620      	mov	r0, r4
 800d198:	4629      	mov	r1, r5
 800d19a:	f7f3 f895 	bl	80002c8 <__aeabi_dsub>
 800d19e:	4b44      	ldr	r3, [pc, #272]	@ (800d2b0 <atan+0x320>)
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	460f      	mov	r7, r1
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	f7f3 fa45 	bl	8000638 <__aeabi_dmul>
 800d1ae:	4b3d      	ldr	r3, [pc, #244]	@ (800d2a4 <atan+0x314>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f7f3 f88b 	bl	80002cc <__adddf3>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	4639      	mov	r1, r7
 800d1be:	f7f3 fb65 	bl	800088c <__aeabi_ddiv>
 800d1c2:	f04f 0a02 	mov.w	sl, #2
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	460d      	mov	r5, r1
 800d1ca:	e745      	b.n	800d058 <atan+0xc8>
 800d1cc:	4622      	mov	r2, r4
 800d1ce:	462b      	mov	r3, r5
 800d1d0:	4938      	ldr	r1, [pc, #224]	@ (800d2b4 <atan+0x324>)
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	f7f3 fb5a 	bl	800088c <__aeabi_ddiv>
 800d1d8:	f04f 0a03 	mov.w	sl, #3
 800d1dc:	4604      	mov	r4, r0
 800d1de:	460d      	mov	r5, r1
 800d1e0:	e73a      	b.n	800d058 <atan+0xc8>
 800d1e2:	4b35      	ldr	r3, [pc, #212]	@ (800d2b8 <atan+0x328>)
 800d1e4:	4e35      	ldr	r6, [pc, #212]	@ (800d2bc <atan+0x32c>)
 800d1e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ee:	f7f3 f86b 	bl	80002c8 <__aeabi_dsub>
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	462b      	mov	r3, r5
 800d1f6:	f7f3 f867 	bl	80002c8 <__aeabi_dsub>
 800d1fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d206:	f7f3 f85f 	bl	80002c8 <__aeabi_dsub>
 800d20a:	f1bb 0f00 	cmp.w	fp, #0
 800d20e:	4604      	mov	r4, r0
 800d210:	460d      	mov	r5, r1
 800d212:	f6bf aedc 	bge.w	800cfce <atan+0x3e>
 800d216:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d21a:	461d      	mov	r5, r3
 800d21c:	e6d7      	b.n	800cfce <atan+0x3e>
 800d21e:	a51c      	add	r5, pc, #112	@ (adr r5, 800d290 <atan+0x300>)
 800d220:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d224:	e6d3      	b.n	800cfce <atan+0x3e>
 800d226:	bf00      	nop
 800d228:	54442d18 	.word	0x54442d18
 800d22c:	3ff921fb 	.word	0x3ff921fb
 800d230:	8800759c 	.word	0x8800759c
 800d234:	7e37e43c 	.word	0x7e37e43c
 800d238:	e322da11 	.word	0xe322da11
 800d23c:	3f90ad3a 	.word	0x3f90ad3a
 800d240:	24760deb 	.word	0x24760deb
 800d244:	3fa97b4b 	.word	0x3fa97b4b
 800d248:	a0d03d51 	.word	0xa0d03d51
 800d24c:	3fb10d66 	.word	0x3fb10d66
 800d250:	c54c206e 	.word	0xc54c206e
 800d254:	3fb745cd 	.word	0x3fb745cd
 800d258:	920083ff 	.word	0x920083ff
 800d25c:	3fc24924 	.word	0x3fc24924
 800d260:	5555550d 	.word	0x5555550d
 800d264:	3fd55555 	.word	0x3fd55555
 800d268:	2c6a6c2f 	.word	0x2c6a6c2f
 800d26c:	bfa2b444 	.word	0xbfa2b444
 800d270:	52defd9a 	.word	0x52defd9a
 800d274:	3fadde2d 	.word	0x3fadde2d
 800d278:	af749a6d 	.word	0xaf749a6d
 800d27c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d280:	fe231671 	.word	0xfe231671
 800d284:	3fbc71c6 	.word	0x3fbc71c6
 800d288:	9998ebc4 	.word	0x9998ebc4
 800d28c:	3fc99999 	.word	0x3fc99999
 800d290:	54442d18 	.word	0x54442d18
 800d294:	bff921fb 	.word	0xbff921fb
 800d298:	440fffff 	.word	0x440fffff
 800d29c:	7ff00000 	.word	0x7ff00000
 800d2a0:	3fdbffff 	.word	0x3fdbffff
 800d2a4:	3ff00000 	.word	0x3ff00000
 800d2a8:	3ff2ffff 	.word	0x3ff2ffff
 800d2ac:	40038000 	.word	0x40038000
 800d2b0:	3ff80000 	.word	0x3ff80000
 800d2b4:	bff00000 	.word	0xbff00000
 800d2b8:	08021168 	.word	0x08021168
 800d2bc:	08021188 	.word	0x08021188

0800d2c0 <fabs>:
 800d2c0:	ec51 0b10 	vmov	r0, r1, d0
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d2ca:	ec43 2b10 	vmov	d0, r2, r3
 800d2ce:	4770      	bx	lr

0800d2d0 <finite>:
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	ed8d 0b00 	vstr	d0, [sp]
 800d2d6:	9801      	ldr	r0, [sp, #4]
 800d2d8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d2dc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d2e0:	0fc0      	lsrs	r0, r0, #31
 800d2e2:	b002      	add	sp, #8
 800d2e4:	4770      	bx	lr
	...

0800d2e8 <__ieee754_hypot>:
 800d2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ec:	ec51 0b10 	vmov	r0, r1, d0
 800d2f0:	ec53 2b11 	vmov	r2, r3, d1
 800d2f4:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800d2f8:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800d2fc:	42a5      	cmp	r5, r4
 800d2fe:	b087      	sub	sp, #28
 800d300:	da05      	bge.n	800d30e <__ieee754_hypot+0x26>
 800d302:	462e      	mov	r6, r5
 800d304:	4625      	mov	r5, r4
 800d306:	4634      	mov	r4, r6
 800d308:	4606      	mov	r6, r0
 800d30a:	4610      	mov	r0, r2
 800d30c:	4632      	mov	r2, r6
 800d30e:	1b2b      	subs	r3, r5, r4
 800d310:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800d314:	4629      	mov	r1, r5
 800d316:	4682      	mov	sl, r0
 800d318:	46ab      	mov	fp, r5
 800d31a:	4616      	mov	r6, r2
 800d31c:	4627      	mov	r7, r4
 800d31e:	dd05      	ble.n	800d32c <__ieee754_hypot+0x44>
 800d320:	4623      	mov	r3, r4
 800d322:	f7f2 ffd3 	bl	80002cc <__adddf3>
 800d326:	4682      	mov	sl, r0
 800d328:	468b      	mov	fp, r1
 800d32a:	e016      	b.n	800d35a <__ieee754_hypot+0x72>
 800d32c:	4b75      	ldr	r3, [pc, #468]	@ (800d504 <__ieee754_hypot+0x21c>)
 800d32e:	429d      	cmp	r5, r3
 800d330:	f340 8096 	ble.w	800d460 <__ieee754_hypot+0x178>
 800d334:	4b74      	ldr	r3, [pc, #464]	@ (800d508 <__ieee754_hypot+0x220>)
 800d336:	429d      	cmp	r5, r3
 800d338:	dd14      	ble.n	800d364 <__ieee754_hypot+0x7c>
 800d33a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d33e:	4305      	orrs	r5, r0
 800d340:	d004      	beq.n	800d34c <__ieee754_hypot+0x64>
 800d342:	4623      	mov	r3, r4
 800d344:	f7f2 ffc2 	bl	80002cc <__adddf3>
 800d348:	4682      	mov	sl, r0
 800d34a:	468b      	mov	fp, r1
 800d34c:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800d350:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800d354:	4334      	orrs	r4, r6
 800d356:	f000 80d2 	beq.w	800d4fe <__ieee754_hypot+0x216>
 800d35a:	ec4b ab10 	vmov	d0, sl, fp
 800d35e:	b007      	add	sp, #28
 800d360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d364:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800d368:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800d36c:	46ab      	mov	fp, r5
 800d36e:	4627      	mov	r7, r4
 800d370:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	4b65      	ldr	r3, [pc, #404]	@ (800d50c <__ieee754_hypot+0x224>)
 800d378:	429c      	cmp	r4, r3
 800d37a:	dc19      	bgt.n	800d3b0 <__ieee754_hypot+0xc8>
 800d37c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800d380:	da70      	bge.n	800d464 <__ieee754_hypot+0x17c>
 800d382:	4633      	mov	r3, r6
 800d384:	4323      	orrs	r3, r4
 800d386:	d0e8      	beq.n	800d35a <__ieee754_hypot+0x72>
 800d388:	4b61      	ldr	r3, [pc, #388]	@ (800d510 <__ieee754_hypot+0x228>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	4630      	mov	r0, r6
 800d38e:	4639      	mov	r1, r7
 800d390:	f7f3 f952 	bl	8000638 <__aeabi_dmul>
 800d394:	4b5e      	ldr	r3, [pc, #376]	@ (800d510 <__ieee754_hypot+0x228>)
 800d396:	4606      	mov	r6, r0
 800d398:	460f      	mov	r7, r1
 800d39a:	4650      	mov	r0, sl
 800d39c:	4659      	mov	r1, fp
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f7f3 f94a 	bl	8000638 <__aeabi_dmul>
 800d3a4:	9b01      	ldr	r3, [sp, #4]
 800d3a6:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800d3aa:	4682      	mov	sl, r0
 800d3ac:	468b      	mov	fp, r1
 800d3ae:	9301      	str	r3, [sp, #4]
 800d3b0:	4632      	mov	r2, r6
 800d3b2:	463b      	mov	r3, r7
 800d3b4:	4650      	mov	r0, sl
 800d3b6:	4659      	mov	r1, fp
 800d3b8:	f7f2 ff86 	bl	80002c8 <__aeabi_dsub>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	4680      	mov	r8, r0
 800d3c2:	4689      	mov	r9, r1
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	f7f3 fba8 	bl	8000b1c <__aeabi_dcmplt>
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d053      	beq.n	800d47a <__ieee754_hypot+0x192>
 800d3d2:	462b      	mov	r3, r5
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4614      	mov	r4, r2
 800d3da:	f7f3 f92d 	bl	8000638 <__aeabi_dmul>
 800d3de:	4632      	mov	r2, r6
 800d3e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3e4:	463b      	mov	r3, r7
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800d3ec:	f7f3 f924 	bl	8000638 <__aeabi_dmul>
 800d3f0:	4622      	mov	r2, r4
 800d3f2:	4606      	mov	r6, r0
 800d3f4:	460f      	mov	r7, r1
 800d3f6:	462b      	mov	r3, r5
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	4659      	mov	r1, fp
 800d3fc:	f7f2 ff66 	bl	80002cc <__adddf3>
 800d400:	4622      	mov	r2, r4
 800d402:	4680      	mov	r8, r0
 800d404:	4689      	mov	r9, r1
 800d406:	462b      	mov	r3, r5
 800d408:	4650      	mov	r0, sl
 800d40a:	4659      	mov	r1, fp
 800d40c:	f7f2 ff5c 	bl	80002c8 <__aeabi_dsub>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4640      	mov	r0, r8
 800d416:	4649      	mov	r1, r9
 800d418:	f7f3 f90e 	bl	8000638 <__aeabi_dmul>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4630      	mov	r0, r6
 800d422:	4639      	mov	r1, r7
 800d424:	f7f2 ff50 	bl	80002c8 <__aeabi_dsub>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d430:	f7f2 ff4a 	bl	80002c8 <__aeabi_dsub>
 800d434:	ec41 0b10 	vmov	d0, r0, r1
 800d438:	f000 f86c 	bl	800d514 <__ieee754_sqrt>
 800d43c:	9b01      	ldr	r3, [sp, #4]
 800d43e:	ec5b ab10 	vmov	sl, fp, d0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d089      	beq.n	800d35a <__ieee754_hypot+0x72>
 800d446:	051b      	lsls	r3, r3, #20
 800d448:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d44c:	2000      	movs	r0, #0
 800d44e:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4650      	mov	r0, sl
 800d458:	4659      	mov	r1, fp
 800d45a:	f7f3 f8ed 	bl	8000638 <__aeabi_dmul>
 800d45e:	e762      	b.n	800d326 <__ieee754_hypot+0x3e>
 800d460:	2300      	movs	r3, #0
 800d462:	e787      	b.n	800d374 <__ieee754_hypot+0x8c>
 800d464:	9b01      	ldr	r3, [sp, #4]
 800d466:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800d46a:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800d46e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800d472:	9301      	str	r3, [sp, #4]
 800d474:	46ab      	mov	fp, r5
 800d476:	4627      	mov	r7, r4
 800d478:	e79a      	b.n	800d3b0 <__ieee754_hypot+0xc8>
 800d47a:	4623      	mov	r3, r4
 800d47c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d484:	2200      	movs	r2, #0
 800d486:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800d48a:	4614      	mov	r4, r2
 800d48c:	461d      	mov	r5, r3
 800d48e:	f7f3 f8d3 	bl	8000638 <__aeabi_dmul>
 800d492:	4642      	mov	r2, r8
 800d494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d498:	464b      	mov	r3, r9
 800d49a:	4640      	mov	r0, r8
 800d49c:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800d4a0:	f7f3 f8ca 	bl	8000638 <__aeabi_dmul>
 800d4a4:	4652      	mov	r2, sl
 800d4a6:	465b      	mov	r3, fp
 800d4a8:	4680      	mov	r8, r0
 800d4aa:	4689      	mov	r9, r1
 800d4ac:	4650      	mov	r0, sl
 800d4ae:	4659      	mov	r1, fp
 800d4b0:	f7f2 ff0c 	bl	80002cc <__adddf3>
 800d4b4:	4622      	mov	r2, r4
 800d4b6:	462b      	mov	r3, r5
 800d4b8:	f7f2 ff06 	bl	80002c8 <__aeabi_dsub>
 800d4bc:	4632      	mov	r2, r6
 800d4be:	463b      	mov	r3, r7
 800d4c0:	f7f3 f8ba 	bl	8000638 <__aeabi_dmul>
 800d4c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4c8:	4682      	mov	sl, r0
 800d4ca:	468b      	mov	fp, r1
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	4639      	mov	r1, r7
 800d4d0:	f7f2 fefa 	bl	80002c8 <__aeabi_dsub>
 800d4d4:	4622      	mov	r2, r4
 800d4d6:	462b      	mov	r3, r5
 800d4d8:	f7f3 f8ae 	bl	8000638 <__aeabi_dmul>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	4650      	mov	r0, sl
 800d4e2:	4659      	mov	r1, fp
 800d4e4:	f7f2 fef2 	bl	80002cc <__adddf3>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4640      	mov	r0, r8
 800d4ee:	4649      	mov	r1, r9
 800d4f0:	f7f2 feea 	bl	80002c8 <__aeabi_dsub>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4fc:	e798      	b.n	800d430 <__ieee754_hypot+0x148>
 800d4fe:	46b2      	mov	sl, r6
 800d500:	46bb      	mov	fp, r7
 800d502:	e72a      	b.n	800d35a <__ieee754_hypot+0x72>
 800d504:	5f300000 	.word	0x5f300000
 800d508:	7fefffff 	.word	0x7fefffff
 800d50c:	20afffff 	.word	0x20afffff
 800d510:	7fd00000 	.word	0x7fd00000

0800d514 <__ieee754_sqrt>:
 800d514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	4a68      	ldr	r2, [pc, #416]	@ (800d6bc <__ieee754_sqrt+0x1a8>)
 800d51a:	ec55 4b10 	vmov	r4, r5, d0
 800d51e:	43aa      	bics	r2, r5
 800d520:	462b      	mov	r3, r5
 800d522:	4621      	mov	r1, r4
 800d524:	d110      	bne.n	800d548 <__ieee754_sqrt+0x34>
 800d526:	4622      	mov	r2, r4
 800d528:	4620      	mov	r0, r4
 800d52a:	4629      	mov	r1, r5
 800d52c:	f7f3 f884 	bl	8000638 <__aeabi_dmul>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	4620      	mov	r0, r4
 800d536:	4629      	mov	r1, r5
 800d538:	f7f2 fec8 	bl	80002cc <__adddf3>
 800d53c:	4604      	mov	r4, r0
 800d53e:	460d      	mov	r5, r1
 800d540:	ec45 4b10 	vmov	d0, r4, r5
 800d544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d548:	2d00      	cmp	r5, #0
 800d54a:	dc0e      	bgt.n	800d56a <__ieee754_sqrt+0x56>
 800d54c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d550:	4322      	orrs	r2, r4
 800d552:	d0f5      	beq.n	800d540 <__ieee754_sqrt+0x2c>
 800d554:	b19d      	cbz	r5, 800d57e <__ieee754_sqrt+0x6a>
 800d556:	4622      	mov	r2, r4
 800d558:	4620      	mov	r0, r4
 800d55a:	4629      	mov	r1, r5
 800d55c:	f7f2 feb4 	bl	80002c8 <__aeabi_dsub>
 800d560:	4602      	mov	r2, r0
 800d562:	460b      	mov	r3, r1
 800d564:	f7f3 f992 	bl	800088c <__aeabi_ddiv>
 800d568:	e7e8      	b.n	800d53c <__ieee754_sqrt+0x28>
 800d56a:	152a      	asrs	r2, r5, #20
 800d56c:	d115      	bne.n	800d59a <__ieee754_sqrt+0x86>
 800d56e:	2000      	movs	r0, #0
 800d570:	e009      	b.n	800d586 <__ieee754_sqrt+0x72>
 800d572:	0acb      	lsrs	r3, r1, #11
 800d574:	3a15      	subs	r2, #21
 800d576:	0549      	lsls	r1, r1, #21
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d0fa      	beq.n	800d572 <__ieee754_sqrt+0x5e>
 800d57c:	e7f7      	b.n	800d56e <__ieee754_sqrt+0x5a>
 800d57e:	462a      	mov	r2, r5
 800d580:	e7fa      	b.n	800d578 <__ieee754_sqrt+0x64>
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	3001      	adds	r0, #1
 800d586:	02dc      	lsls	r4, r3, #11
 800d588:	d5fb      	bpl.n	800d582 <__ieee754_sqrt+0x6e>
 800d58a:	1e44      	subs	r4, r0, #1
 800d58c:	1b12      	subs	r2, r2, r4
 800d58e:	f1c0 0420 	rsb	r4, r0, #32
 800d592:	fa21 f404 	lsr.w	r4, r1, r4
 800d596:	4323      	orrs	r3, r4
 800d598:	4081      	lsls	r1, r0
 800d59a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d59e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d5a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d5a6:	07d2      	lsls	r2, r2, #31
 800d5a8:	bf5c      	itt	pl
 800d5aa:	005b      	lslpl	r3, r3, #1
 800d5ac:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d5b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5b4:	bf58      	it	pl
 800d5b6:	0049      	lslpl	r1, r1, #1
 800d5b8:	2600      	movs	r6, #0
 800d5ba:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d5be:	106d      	asrs	r5, r5, #1
 800d5c0:	0049      	lsls	r1, r1, #1
 800d5c2:	2016      	movs	r0, #22
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d5ca:	1917      	adds	r7, r2, r4
 800d5cc:	429f      	cmp	r7, r3
 800d5ce:	bfde      	ittt	le
 800d5d0:	193a      	addle	r2, r7, r4
 800d5d2:	1bdb      	suble	r3, r3, r7
 800d5d4:	1936      	addle	r6, r6, r4
 800d5d6:	0fcf      	lsrs	r7, r1, #31
 800d5d8:	3801      	subs	r0, #1
 800d5da:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d5de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d5e6:	d1f0      	bne.n	800d5ca <__ieee754_sqrt+0xb6>
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	2720      	movs	r7, #32
 800d5ec:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	eb00 0e0c 	add.w	lr, r0, ip
 800d5f6:	db02      	blt.n	800d5fe <__ieee754_sqrt+0xea>
 800d5f8:	d113      	bne.n	800d622 <__ieee754_sqrt+0x10e>
 800d5fa:	458e      	cmp	lr, r1
 800d5fc:	d811      	bhi.n	800d622 <__ieee754_sqrt+0x10e>
 800d5fe:	f1be 0f00 	cmp.w	lr, #0
 800d602:	eb0e 000c 	add.w	r0, lr, ip
 800d606:	da42      	bge.n	800d68e <__ieee754_sqrt+0x17a>
 800d608:	2800      	cmp	r0, #0
 800d60a:	db40      	blt.n	800d68e <__ieee754_sqrt+0x17a>
 800d60c:	f102 0801 	add.w	r8, r2, #1
 800d610:	1a9b      	subs	r3, r3, r2
 800d612:	458e      	cmp	lr, r1
 800d614:	bf88      	it	hi
 800d616:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d61a:	eba1 010e 	sub.w	r1, r1, lr
 800d61e:	4464      	add	r4, ip
 800d620:	4642      	mov	r2, r8
 800d622:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d626:	3f01      	subs	r7, #1
 800d628:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d62c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d630:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d634:	d1dc      	bne.n	800d5f0 <__ieee754_sqrt+0xdc>
 800d636:	4319      	orrs	r1, r3
 800d638:	d01b      	beq.n	800d672 <__ieee754_sqrt+0x15e>
 800d63a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d6c0 <__ieee754_sqrt+0x1ac>
 800d63e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d6c4 <__ieee754_sqrt+0x1b0>
 800d642:	e9da 0100 	ldrd	r0, r1, [sl]
 800d646:	e9db 2300 	ldrd	r2, r3, [fp]
 800d64a:	f7f2 fe3d 	bl	80002c8 <__aeabi_dsub>
 800d64e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d652:	4602      	mov	r2, r0
 800d654:	460b      	mov	r3, r1
 800d656:	4640      	mov	r0, r8
 800d658:	4649      	mov	r1, r9
 800d65a:	f7f3 fa69 	bl	8000b30 <__aeabi_dcmple>
 800d65e:	b140      	cbz	r0, 800d672 <__ieee754_sqrt+0x15e>
 800d660:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d664:	e9da 0100 	ldrd	r0, r1, [sl]
 800d668:	e9db 2300 	ldrd	r2, r3, [fp]
 800d66c:	d111      	bne.n	800d692 <__ieee754_sqrt+0x17e>
 800d66e:	3601      	adds	r6, #1
 800d670:	463c      	mov	r4, r7
 800d672:	1072      	asrs	r2, r6, #1
 800d674:	0863      	lsrs	r3, r4, #1
 800d676:	07f1      	lsls	r1, r6, #31
 800d678:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d67c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d680:	bf48      	it	mi
 800d682:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d686:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d68a:	4618      	mov	r0, r3
 800d68c:	e756      	b.n	800d53c <__ieee754_sqrt+0x28>
 800d68e:	4690      	mov	r8, r2
 800d690:	e7be      	b.n	800d610 <__ieee754_sqrt+0xfc>
 800d692:	f7f2 fe1b 	bl	80002cc <__adddf3>
 800d696:	e9da 8900 	ldrd	r8, r9, [sl]
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	4640      	mov	r0, r8
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	f7f3 fa3b 	bl	8000b1c <__aeabi_dcmplt>
 800d6a6:	b120      	cbz	r0, 800d6b2 <__ieee754_sqrt+0x19e>
 800d6a8:	1ca0      	adds	r0, r4, #2
 800d6aa:	bf08      	it	eq
 800d6ac:	3601      	addeq	r6, #1
 800d6ae:	3402      	adds	r4, #2
 800d6b0:	e7df      	b.n	800d672 <__ieee754_sqrt+0x15e>
 800d6b2:	1c63      	adds	r3, r4, #1
 800d6b4:	f023 0401 	bic.w	r4, r3, #1
 800d6b8:	e7db      	b.n	800d672 <__ieee754_sqrt+0x15e>
 800d6ba:	bf00      	nop
 800d6bc:	7ff00000 	.word	0x7ff00000
 800d6c0:	200001e0 	.word	0x200001e0
 800d6c4:	200001d8 	.word	0x200001d8

0800d6c8 <_init>:
 800d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ca:	bf00      	nop
 800d6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ce:	bc08      	pop	{r3}
 800d6d0:	469e      	mov	lr, r3
 800d6d2:	4770      	bx	lr

0800d6d4 <_fini>:
 800d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d6:	bf00      	nop
 800d6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6da:	bc08      	pop	{r3}
 800d6dc:	469e      	mov	lr, r3
 800d6de:	4770      	bx	lr
