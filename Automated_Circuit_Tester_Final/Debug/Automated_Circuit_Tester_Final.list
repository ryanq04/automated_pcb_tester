
Automated_Circuit_Tester_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd58  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013ad0  0800cf28  0800cf28  0000df28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080209f8  080209f8  000221e8  2**0
                  CONTENTS
  4 .ARM          00000008  080209f8  080209f8  000219f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020a00  08020a00  000221e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020a00  08020a00  00021a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020a04  08020a04  00021a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08020a08  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018c90  200001e8  08020bf0  000221e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018e78  08020bf0  00022e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c8d  00000000  00000000  00022218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af7  00000000  00000000  0003bea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001029  00000000  00000000  00040e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056b1  00000000  00000000  00041eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d917  00000000  00000000  0004756a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e56d8  00000000  00000000  00064e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0014a559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  0014a60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00150f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001a6  00000000  00000000  00150fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0015116b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf10 	.word	0x0800cf10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800cf10 	.word	0x0800cf10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <send_img>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}
}


void send_img(){
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n"; 
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <send_img+0x8c>)
 8000f80:	463c      	mov	r4, r7
 8000f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f84:	c407      	stmia	r4!, {r0, r1, r2}
 8000f86:	8023      	strh	r3, [r4, #0]

	uint8_t* byte_ptr = (uint8_t*)snapshot_buff;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <send_img+0x90>)
 8000f8a:	613b      	str	r3, [r7, #16]

	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8000f8c:	f24c 33bf 	movw	r3, #50111	@ 0xc3bf
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	e00e      	b.n	8000fb6 <send_img+0x3e>
    	send_ptr[j] = byte_ptr[i];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	7819      	ldrb	r1, [r3, #0]
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800100c <send_img+0x94>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db04      	blt.n	8000fc6 <send_img+0x4e>
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f24c 32be 	movw	r2, #50110	@ 0xc3be
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	dde8      	ble.n	8000f98 <send_img+0x20>
	#else
		#define LOG() do { } while (0)
	#endif

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){ 
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e00b      	b.n	8000fe4 <send_img+0x6c>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 8000fcc:	463a      	mov	r2, r7
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	18d1      	adds	r1, r2, r3
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	480d      	ldr	r0, [pc, #52]	@ (8001010 <send_img+0x98>)
 8000fda:	f007 fce9 	bl	80089b0 <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){ 
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	ddf0      	ble.n	8000fcc <send_img+0x54>
	}
	
	// Send image data through serial port.
	
	HAL_UART_Transmit(&huart3, send_ptr, FRAMESIZE*2, HAL_MAX_DELAY);
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	f24c 32c0 	movw	r2, #50112	@ 0xc3c0
 8000ff2:	4906      	ldr	r1, [pc, #24]	@ (800100c <send_img+0x94>)
 8000ff4:	4806      	ldr	r0, [pc, #24]	@ (8001010 <send_img+0x98>)
 8000ff6:	f007 fcdb 	bl	80089b0 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, &send_ptr[FRAMESIZE], FRAMESIZE, HAL_MAX_DELAY);
	
}
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	@ 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	0800cfd4 	.word	0x0800cfd4
 8001008:	20000560 	.word	0x20000560
 800100c:	2000c920 	.word	0x2000c920
 8001010:	20000500 	.word	0x20000500

08001014 <p3>:


void p3(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	ov7670_snapshot(snapshot_buff);
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <p3+0x30>)
 800101a:	f001 f857 	bl	80020cc <ov7670_snapshot>
		while(!dma_flag)
 800101e:	e002      	b.n	8001026 <p3+0x12>
		{
			HAL_Delay(10);	
 8001020:	200a      	movs	r0, #10
 8001022:	f001 ff69 	bl	8002ef8 <HAL_Delay>
		while(!dma_flag)
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <p3+0x34>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f8      	beq.n	8001020 <p3+0xc>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <p3+0x38>)
 8001032:	f004 fcac 	bl	800598e <HAL_GPIO_TogglePin>
		dma_flag = 0;
 8001036:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <p3+0x34>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		//print_ss(); 
		send_img(); 
 800103c:	f7ff ff9c 	bl	8000f78 <send_img>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000560 	.word	0x20000560
 8001048:	20018ce0 	.word	0x20018ce0
 800104c:	40020400 	.word	0x40020400

08001050 <print_msg>:
#include <string.h>
#include <stdio.h>



void print_msg(char * msg) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f929 	bl	80002b0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <print_msg+0x24>)
 8001068:	f007 fca2 	bl	80089b0 <HAL_UART_Transmit>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000500 	.word	0x20000500

08001078 <flashLED>:

void flashLED(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, uint32_t delay_ms, uint8_t toggles) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	460b      	mov	r3, r1
 8001086:	817b      	strh	r3, [r7, #10]
 8001088:	4613      	mov	r3, r2
 800108a:	727b      	strb	r3, [r7, #9]
    for (uint8_t i = 0; i < toggles; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	75fb      	strb	r3, [r7, #23]
 8001090:	e00a      	b.n	80010a8 <flashLED+0x30>
        HAL_GPIO_TogglePin(GPIO_Port, GPIO_Pin);
 8001092:	897b      	ldrh	r3, [r7, #10]
 8001094:	4619      	mov	r1, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f004 fc79 	bl	800598e <HAL_GPIO_TogglePin>
        HAL_Delay(delay_ms);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 ff2b 	bl	8002ef8 <HAL_Delay>
    for (uint8_t i = 0; i < toggles; i++) {
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	3301      	adds	r3, #1
 80010a6:	75fb      	strb	r3, [r7, #23]
 80010a8:	7dfa      	ldrb	r2, [r7, #23]
 80010aa:	7a7b      	ldrb	r3, [r7, #9]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3f0      	bcc.n	8001092 <flashLED+0x1a>
    }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2234      	movs	r2, #52	@ 0x34
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f009 fa87 	bl	800a5de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <SystemClock_Config+0xd0>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	4a28      	ldr	r2, [pc, #160]	@ (800118c <SystemClock_Config+0xd0>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <SystemClock_Config+0xd4>)
 8001106:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <SystemClock_Config+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800111c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001120:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800112a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001130:	23a8      	movs	r3, #168	@ 0xa8
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001138:	2307      	movs	r3, #7
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4618      	mov	r0, r3
 8001146:	f006 f935 	bl	80073b4 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001150:	f000 fb70 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001160:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2105      	movs	r1, #5
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fdd4 	bl	8006d20 <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800117e:	f000 fb59 	bl	8001834 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011a6:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <MX_ADC1_Init+0xa0>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_ADC1_Init+0x9c>)
 80011fa:	f001 fea1 	bl	8002f40 <HAL_ADC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001204:	f000 fb16 	bl	8001834 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_ADC1_Init+0x9c>)
 800121a:	f001 fed5 	bl	8002fc8 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001224:	f000 fb06 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000228 	.word	0x20000228
 8001234:	40012000 	.word	0x40012000

08001238 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
 void MX_DCMI_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_DCMI_Init+0x60>)
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <MX_DCMI_Init+0x64>)
 8001240:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_DCMI_Init+0x60>)
 800124a:	2220      	movs	r2, #32
 800124c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001250:	2280      	movs	r2, #128	@ 0x80
 8001252:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_DCMI_Init+0x60>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_DCMI_Init+0x60>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_DCMI_Init+0x60>)
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_DCMI_Init+0x60>)
 8001286:	f002 fbd1 	bl	8003a2c <HAL_DCMI_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fad0 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200002d0 	.word	0x200002d0
 800129c:	50050000 	.word	0x50050000

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f004 fb95 	bl	8005a0c <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 faa4 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000380 	.word	0x20000380
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C2_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <MX_I2C2_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C2_Init+0x50>)
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_I2C2_Init+0x58>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C2_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_I2C2_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_I2C2_Init+0x50>)
 800131a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_I2C2_Init+0x50>)
 800133a:	f004 fb67 	bl	8005a0c <HAL_I2C_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001344:	f000 fa76 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200003d4 	.word	0x200003d4
 8001350:	40005800 	.word	0x40005800
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b092      	sub	sp, #72	@ 0x48
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2220      	movs	r2, #32
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f009 f92b 	bl	800a5de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001388:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <MX_TIM1_Init+0xfc>)
 800138a:	4a33      	ldr	r2, [pc, #204]	@ (8001458 <MX_TIM1_Init+0x100>)
 800138c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800138e:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 800139a:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <MX_TIM1_Init+0xfc>)
 800139c:	2214      	movs	r2, #20
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013ae:	2280      	movs	r2, #128	@ 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b2:	4828      	ldr	r0, [pc, #160]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013b4:	f006 faeb 	bl	800798e <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80013be:	f000 fa39 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ce:	4619      	mov	r1, r3
 80013d0:	4820      	ldr	r0, [pc, #128]	@ (8001454 <MX_TIM1_Init+0xfc>)
 80013d2:	f007 f9bb 	bl	800874c <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80013dc:	f000 fa2a 	bl	8001834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	@ 0x60
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 80013e4:	230a      	movs	r3, #10
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4813      	ldr	r0, [pc, #76]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001406:	f006 fcc9 	bl	8007d9c <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001410:	f000 fa10 	bl	8001834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001438:	f007 fa04 	bl	8008844 <HAL_TIMEx_ConfigBreakDeadTime>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001442:	f000 f9f7 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001446:	4803      	ldr	r0, [pc, #12]	@ (8001454 <MX_TIM1_Init+0xfc>)
 8001448:	f001 faea 	bl	8002a20 <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3748      	adds	r7, #72	@ 0x48
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000428 	.word	0x20000428
 8001458:	40010000 	.word	0x40010000

0800145c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800147a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800148e:	2253      	movs	r2, #83	@ 0x53
 8001490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_TIM2_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_TIM2_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149e:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014a0:	f006 fa26 	bl	80078f0 <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80014aa:	f000 f9c3 	bl	8001834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014bc:	f006 fd30 	bl	8007f20 <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 f9b5 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ca:	2320      	movs	r3, #32
 80014cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <MX_TIM2_Init+0x94>)
 80014d8:	f007 f938 	bl	800874c <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014e2:	f000 f9a7 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000470 	.word	0x20000470

080014f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM6_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001504:	4a15      	ldr	r2, [pc, #84]	@ (800155c <MX_TIM6_Init+0x68>)
 8001506:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_TIM6_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001514:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800151a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_TIM6_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001524:	f006 f9e4 	bl	80078f0 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800152e:	f000 f981 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800153a:	463b      	mov	r3, r7
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM6_Init+0x64>)
 8001540:	f007 f904 	bl	800874c <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800154a:	f000 f973 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200004b8 	.word	0x200004b8
 800155c:	40001000 	.word	0x40001000

08001560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001566:	4a16      	ldr	r2, [pc, #88]	@ (80015c0 <MX_USART3_UART_Init+0x60>)
 8001568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001596:	4809      	ldr	r0, [pc, #36]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 8001598:	f007 f9ba 	bl	8008910 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f947 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <MX_USART3_UART_Init+0x5c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000500 	.word	0x20000500
 80015c0:	40004800 	.word	0x40004800

080015c4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
 void MX_USB_OTG_FS_USB_Init(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
 void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MX_DMA_Init+0x4c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2038      	movs	r0, #56	@ 0x38
 80015fc:	f001 ffed 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001600:	2038      	movs	r0, #56	@ 0x38
 8001602:	f002 f806 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2039      	movs	r0, #57	@ 0x39
 800160c:	f001 ffe5 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001610:	2039      	movs	r0, #57	@ 0x39
 8001612:	f001 fffe 	bl	8003612 <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	4b77      	ldr	r3, [pc, #476]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a76      	ldr	r2, [pc, #472]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b74      	ldr	r3, [pc, #464]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	4b70      	ldr	r3, [pc, #448]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a6f      	ldr	r2, [pc, #444]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b6d      	ldr	r3, [pc, #436]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	4b69      	ldr	r3, [pc, #420]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a68      	ldr	r2, [pc, #416]	@ (800181c <MX_GPIO_Init+0x1f8>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b66      	ldr	r3, [pc, #408]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b62      	ldr	r3, [pc, #392]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a61      	ldr	r2, [pc, #388]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b5b      	ldr	r3, [pc, #364]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a5a      	ldr	r2, [pc, #360]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b58      	ldr	r3, [pc, #352]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b54      	ldr	r3, [pc, #336]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a53      	ldr	r2, [pc, #332]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b51      	ldr	r3, [pc, #324]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a4c      	ldr	r2, [pc, #304]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b4a      	ldr	r3, [pc, #296]	@ (800181c <MX_GPIO_Init+0x1f8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b46      	ldr	r3, [pc, #280]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a45      	ldr	r2, [pc, #276]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <MX_GPIO_Init+0x1f8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001720:	483f      	ldr	r0, [pc, #252]	@ (8001820 <MX_GPIO_Init+0x1fc>)
 8001722:	f004 f91b 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800172c:	483d      	ldr	r0, [pc, #244]	@ (8001824 <MX_GPIO_Init+0x200>)
 800172e:	f004 f915 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2140      	movs	r1, #64	@ 0x40
 8001736:	483c      	ldr	r0, [pc, #240]	@ (8001828 <MX_GPIO_Init+0x204>)
 8001738:	f004 f910 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4836      	ldr	r0, [pc, #216]	@ (800182c <MX_GPIO_Init+0x208>)
 8001754:	f003 ff6e 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001758:	f244 0381 	movw	r3, #16513	@ 0x4081
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	482b      	ldr	r0, [pc, #172]	@ (8001820 <MX_GPIO_Init+0x1fc>)
 8001772:	f003 ff5f 	bl	8005634 <HAL_GPIO_Init>


  //MOTOR PINS
  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001776:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4825      	ldr	r0, [pc, #148]	@ (8001824 <MX_GPIO_Init+0x200>)
 8001790:	f003 ff50 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001794:	2340      	movs	r3, #64	@ 0x40
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	481f      	ldr	r0, [pc, #124]	@ (8001828 <MX_GPIO_Init+0x204>)
 80017ac:	f003 ff42 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4819      	ldr	r0, [pc, #100]	@ (8001828 <MX_GPIO_Init+0x204>)
 80017c4:	f003 ff36 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017da:	230a      	movs	r3, #10
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4812      	ldr	r0, [pc, #72]	@ (8001830 <MX_GPIO_Init+0x20c>)
 80017e6:	f003 ff25 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	480c      	ldr	r0, [pc, #48]	@ (8001830 <MX_GPIO_Init+0x20c>)
 8001800:	f003 ff18 	bl	8005634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2028      	movs	r0, #40	@ 0x28
 800180a:	f001 fee6 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800180e:	2028      	movs	r0, #40	@ 0x28
 8001810:	f001 feff 	bl	8003612 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	@ 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40020800 	.word	0x40020800
 8001830:	40020000 	.word	0x40020000

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <HAL_UART_RxCpltCallback>:
float posY = 0.0f;

extern arm_rfft_fast_instance_f32 fftHandler;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

    if (!(huart->Instance == USART3)) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <HAL_UART_RxCpltCallback+0xbc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d14f      	bne.n	80018f2 <HAL_UART_RxCpltCallback+0xb2>
        return; // Not from USART3, ignore
    }

    switch (state) {
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_UART_RxCpltCallback+0xc0>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_UART_RxCpltCallback+0x20>
 800185a:	2b03      	cmp	r3, #3
 800185c:	d02b      	beq.n	80018b6 <HAL_UART_RxCpltCallback+0x76>
 800185e:	e03c      	b.n	80018da <HAL_UART_RxCpltCallback+0x9a>
        case STATE_LISTEN:
            if (match_command(rx_data_arr, CMD_TAKEPIC)) {
 8001860:	4928      	ldr	r1, [pc, #160]	@ (8001904 <HAL_UART_RxCpltCallback+0xc4>)
 8001862:	4829      	ldr	r0, [pc, #164]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 8001864:	f000 f8fb 	bl	8001a5e <match_command>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_UART_RxCpltCallback+0x36>
                ptr_state = State_Picture; //next state 
 800186e:	4b27      	ldr	r3, [pc, #156]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 8001870:	4a27      	ldr	r2, [pc, #156]	@ (8001910 <HAL_UART_RxCpltCallback+0xd0>)
 8001872:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
            } else {

                ptr_state = State_Listen;
            }
            break;
 8001874:	e03e      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
            } else if (match_command(rx_data_arr, CMD_COORDS)) {
 8001876:	4927      	ldr	r1, [pc, #156]	@ (8001914 <HAL_UART_RxCpltCallback+0xd4>)
 8001878:	4823      	ldr	r0, [pc, #140]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 800187a:	f000 f8f0 	bl	8001a5e <match_command>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_UART_RxCpltCallback+0x4c>
                ptr_state = State_Coord_RX;
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 8001886:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <HAL_UART_RxCpltCallback+0xd8>)
 8001888:	601a      	str	r2, [r3, #0]
            break;
 800188a:	e033      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
            } else if (match_command(rx_data_arr, CMD_ADCFFT)) {
 800188c:	4923      	ldr	r1, [pc, #140]	@ (800191c <HAL_UART_RxCpltCallback+0xdc>)
 800188e:	481e      	ldr	r0, [pc, #120]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 8001890:	f000 f8e5 	bl	8001a5e <match_command>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_UART_RxCpltCallback+0x6e>
                ptr_state = State_ADC_FFT;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 800189c:	4a20      	ldr	r2, [pc, #128]	@ (8001920 <HAL_UART_RxCpltCallback+0xe0>)
 800189e:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
 80018a0:	2364      	movs	r3, #100	@ 0x64
 80018a2:	2208      	movs	r2, #8
 80018a4:	491d      	ldr	r1, [pc, #116]	@ (800191c <HAL_UART_RxCpltCallback+0xdc>)
 80018a6:	481f      	ldr	r0, [pc, #124]	@ (8001924 <HAL_UART_RxCpltCallback+0xe4>)
 80018a8:	f007 f882 	bl	80089b0 <HAL_UART_Transmit>
            break;
 80018ac:	e022      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
                ptr_state = State_Listen;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <HAL_UART_RxCpltCallback+0xe8>)
 80018b2:	601a      	str	r2, [r3, #0]
            break;
 80018b4:	e01e      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>

        case STATE_COORDS:
        	
            memcpy(&posX, &rx_data_arr[0], 4);
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <HAL_UART_RxCpltCallback+0xec>)
 80018bc:	6013      	str	r3, [r2, #0]
            memcpy(&posY, &rx_data_arr[4], 4);
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001930 <HAL_UART_RxCpltCallback+0xf0>)
 80018c4:	6013      	str	r3, [r2, #0]
            ptr_state = State_Motors;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001934 <HAL_UART_RxCpltCallback+0xf4>)
 80018ca:	601a      	str	r2, [r3, #0]
//            posY = 1.0;
//
//            HAL_UART_Transmit(&huart3, (uint8_t*) &posX, 4, 100);
//            HAL_UART_Transmit(&huart3, (uint8_t*) &posY, 4, 100);

            HAL_UART_Transmit(&huart3, rx_data_arr, 8, 100); //return received coords
 80018cc:	2364      	movs	r3, #100	@ 0x64
 80018ce:	2208      	movs	r2, #8
 80018d0:	490d      	ldr	r1, [pc, #52]	@ (8001908 <HAL_UART_RxCpltCallback+0xc8>)
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <HAL_UART_RxCpltCallback+0xe4>)
 80018d4:	f007 f86c 	bl	80089b0 <HAL_UART_Transmit>
            break;
 80018d8:	e00c      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>

        default:
            // Unexpected state in UART callback
        	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80018da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018de:	4816      	ldr	r0, [pc, #88]	@ (8001938 <HAL_UART_RxCpltCallback+0xf8>)
 80018e0:	f004 f855 	bl	800598e <HAL_GPIO_TogglePin>
            state = STATE_LISTEN;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_UART_RxCpltCallback+0xc0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
            ptr_state = State_Listen;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_UART_RxCpltCallback+0xcc>)
 80018ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001928 <HAL_UART_RxCpltCallback+0xe8>)
 80018ee:	601a      	str	r2, [r3, #0]
            break;
 80018f0:	e000      	b.n	80018f4 <HAL_UART_RxCpltCallback+0xb4>
        return; // Not from USART3, ignore
 80018f2:	bf00      	nop
    }
}
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40004800 	.word	0x40004800
 8001900:	20018ce8 	.word	0x20018ce8
 8001904:	0800d0ac 	.word	0x0800d0ac
 8001908:	20000204 	.word	0x20000204
 800190c:	20018ce4 	.word	0x20018ce4
 8001910:	0800196d 	.word	0x0800196d
 8001914:	0800d0c4 	.word	0x0800d0c4
 8001918:	080019a5 	.word	0x080019a5
 800191c:	0800d0b8 	.word	0x0800d0b8
 8001920:	08001a51 	.word	0x08001a51
 8001924:	20000500 	.word	0x20000500
 8001928:	0800193d 	.word	0x0800193d
 800192c:	20000220 	.word	0x20000220
 8001930:	20000224 	.word	0x20000224
 8001934:	080019e5 	.word	0x080019e5
 8001938:	40020400 	.word	0x40020400

0800193c <State_Listen>:

void State_Listen(void){
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    state = STATE_LISTEN;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <State_Listen+0x20>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <State_Listen+0x24>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
    //flashLED(LD1_GPIO_Port, LD1_Pin, 100, 5);
    //State listen will blink LED1 and wait for UART communications to determine the next state to go into 
    //it will wait for certain preambles
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for preamble
 800194c:	2208      	movs	r2, #8
 800194e:	4905      	ldr	r1, [pc, #20]	@ (8001964 <State_Listen+0x28>)
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <State_Listen+0x2c>)
 8001952:	f007 f8b8 	bl	8008ac6 <HAL_UART_Receive_IT>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20018ce8 	.word	0x20018ce8
 8001960:	20018ce4 	.word	0x20018ce4
 8001964:	20000204 	.word	0x20000204
 8001968:	20000500 	.word	0x20000500

0800196c <State_Picture>:

void State_Picture(void){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, CMD_TAKEPIC, 8, 100); //ack state entry
 8001970:	2364      	movs	r3, #100	@ 0x64
 8001972:	2208      	movs	r2, #8
 8001974:	4906      	ldr	r1, [pc, #24]	@ (8001990 <State_Picture+0x24>)
 8001976:	4807      	ldr	r0, [pc, #28]	@ (8001994 <State_Picture+0x28>)
 8001978:	f007 f81a 	bl	80089b0 <HAL_UART_Transmit>
    state = STATE_TAKEPIC;
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <State_Picture+0x2c>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
    p3();
 8001982:	f7ff fb47 	bl	8001014 <p3>
    ptr_state = State_Listen;
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <State_Picture+0x30>)
 8001988:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <State_Picture+0x34>)
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	0800d0ac 	.word	0x0800d0ac
 8001994:	20000500 	.word	0x20000500
 8001998:	20018ce8 	.word	0x20018ce8
 800199c:	20018ce4 	.word	0x20018ce4
 80019a0:	0800193d 	.word	0x0800193d

080019a4 <State_Coord_RX>:

void State_Coord_RX(void){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    state = STATE_COORDS;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <State_Coord_RX+0x2c>)
 80019aa:	2203      	movs	r2, #3
 80019ac:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <State_Coord_RX+0x30>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for 2 floats
 80019b4:	2208      	movs	r2, #8
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <State_Coord_RX+0x34>)
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <State_Coord_RX+0x38>)
 80019ba:	f007 f884 	bl	8008ac6 <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart3, CMD_COORDS, 8, 100); //ack ready for coords
 80019be:	2364      	movs	r3, #100	@ 0x64
 80019c0:	2208      	movs	r2, #8
 80019c2:	4907      	ldr	r1, [pc, #28]	@ (80019e0 <State_Coord_RX+0x3c>)
 80019c4:	4805      	ldr	r0, [pc, #20]	@ (80019dc <State_Coord_RX+0x38>)
 80019c6:	f006 fff3 	bl	80089b0 <HAL_UART_Transmit>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20018ce8 	.word	0x20018ce8
 80019d4:	20018ce4 	.word	0x20018ce4
 80019d8:	20000204 	.word	0x20000204
 80019dc:	20000500 	.word	0x20000500
 80019e0:	0800d0c4 	.word	0x0800d0c4

080019e4 <State_Motors>:

void State_Motors(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
    flashLED(LD2_GPIO_Port, LD2_Pin, 200, 10);
 80019ea:	230a      	movs	r3, #10
 80019ec:	22c8      	movs	r2, #200	@ 0xc8
 80019ee:	2180      	movs	r1, #128	@ 0x80
 80019f0:	4811      	ldr	r0, [pc, #68]	@ (8001a38 <State_Motors+0x54>)
 80019f2:	f7ff fb41 	bl	8001078 <flashLED>
    state = STATE_MOTORS;
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <State_Motors+0x58>)
 80019f8:	2204      	movs	r2, #4
 80019fa:	701a      	strb	r2, [r3, #0]
    init_home(&myProbe);
 80019fc:	4810      	ldr	r0, [pc, #64]	@ (8001a40 <State_Motors+0x5c>)
 80019fe:	f000 fa75 	bl	8001eec <init_home>
    Position test = {3, 3, 0};
 8001a02:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <State_Motors+0x60>)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    moveProbe_test(&myProbe, test);
 8001a0c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a10:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a18:	eeb0 0a66 	vmov.f32	s0, s13
 8001a1c:	eef0 0a47 	vmov.f32	s1, s14
 8001a20:	eeb0 1a67 	vmov.f32	s2, s15
 8001a24:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <State_Motors+0x5c>)
 8001a26:	f000 fa05 	bl	8001e34 <moveProbe_test>
    ptr_state = State_Listen;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <State_Motors+0x64>)
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <State_Motors+0x68>)
 8001a2e:	601a      	str	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	20018ce8 	.word	0x20018ce8
 8001a40:	20018cec 	.word	0x20018cec
 8001a44:	0800cff0 	.word	0x0800cff0
 8001a48:	20018ce4 	.word	0x20018ce4
 8001a4c:	0800193d 	.word	0x0800193d

08001a50 <State_ADC_FFT>:
    //basically a blocker to motor actuate until it receives a go. If receives anything other than go it indicates a problem and should force you to reset.
    ptr_state = NULL;
}


void State_ADC_FFT(void){
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
    //         sendADC_UART();
    //         sendFFT_UART();
    //     }
    // }
    // ptr_state = State_Listen;
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <match_command>:
 * @brief Compare fixed-length 8-byte command strings.
 * @param input     Pointer to received buffer (must be at least 8 bytes)
 * @param command   Pointer to expected command (8-byte string)
 * @return 1 if match, 0 if not
 */
uint8_t match_command(const uint8_t* input, const uint8_t* command) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
    return (memcmp(input, command, 8) == 0);
 8001a68:	2208      	movs	r2, #8
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f008 fda6 	bl	800a5be <memcmp>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <main>:

const Position HOME = {9.0, 8.0, 12.2};
	

int main(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	HAL_Init();
 8001a8c:	f001 f9c2 	bl	8002e14 <HAL_Init>
  	SystemClock_Config();
 8001a90:	f7ff fb14 	bl	80010bc <SystemClock_Config>
	MX_GPIO_Init();
 8001a94:	f7ff fdc6 	bl	8001624 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a98:	f7ff fd9c 	bl	80015d4 <MX_DMA_Init>
	MX_DCMI_Init();
 8001a9c:	f7ff fbcc 	bl	8001238 <MX_DCMI_Init>
	MX_USART3_UART_Init();
 8001aa0:	f7ff fd5e 	bl	8001560 <MX_USART3_UART_Init>
	MX_I2C2_Init();
 8001aa4:	f7ff fc2a 	bl	80012fc <MX_I2C2_Init>
	MX_TIM1_Init();
 8001aa8:	f7ff fc56 	bl	8001358 <MX_TIM1_Init>
	MX_TIM6_Init();
 8001aac:	f7ff fd22 	bl	80014f4 <MX_TIM6_Init>
	MX_ADC1_Init();
 8001ab0:	f7ff fb70 	bl	8001194 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001ab4:	f7ff fbf4 	bl	80012a0 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001ab8:	f7ff fcd0 	bl	800145c <MX_TIM2_Init>
	MX_USB_OTG_FS_USB_Init();
 8001abc:	f7ff fd82 	bl	80015c4 <MX_USB_OTG_FS_USB_Init>
	
	//init FFT
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8001ac0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ac4:	4829      	ldr	r0, [pc, #164]	@ (8001b6c <main+0xe4>)
 8001ac6:	f007 ff79 	bl	80099bc <arm_rfft_fast_init_f32>

	//init probe
	myProbe.lin = &lin;
 8001aca:	4b29      	ldr	r3, [pc, #164]	@ (8001b70 <main+0xe8>)
 8001acc:	4a29      	ldr	r2, [pc, #164]	@ (8001b74 <main+0xec>)
 8001ace:	60da      	str	r2, [r3, #12]
	myProbe.rot = &rot;
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <main+0xe8>)
 8001ad2:	4a29      	ldr	r2, [pc, #164]	@ (8001b78 <main+0xf0>)
 8001ad4:	611a      	str	r2, [r3, #16]
	myProbe.nema = &nema;
 8001ad6:	4b26      	ldr	r3, [pc, #152]	@ (8001b70 <main+0xe8>)
 8001ad8:	4a28      	ldr	r2, [pc, #160]	@ (8001b7c <main+0xf4>)
 8001ada:	615a      	str	r2, [r3, #20]
	
    myProbe.probePos = HOME; 
 8001adc:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <main+0xe8>)
 8001ade:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <main+0xf8>)
 8001ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    myProbe.lin->Channel = 0;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <main+0xe8>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	721a      	strb	r2, [r3, #8]
    myProbe.lin->currAngle = 0;
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <main+0xe8>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
    myProbe.lin->homeAngle = 0;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <main+0xe8>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]

    myProbe.rot->Channel = 15;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <main+0xe8>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	220f      	movs	r2, #15
 8001b08:	721a      	strb	r2, [r3, #8]
    myProbe.rot->currAngle = 0;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <main+0xe8>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
    myProbe.rot->homeAngle = 0;
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <main+0xe8>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]

    myProbe.nema->currAngle = HOME.x;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <main+0xe8>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <main+0xfc>)
 8001b24:	605a      	str	r2, [r3, #4]
    myProbe.nema->homeAngle = HOME.x;
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <main+0xe8>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <main+0xfc>)
 8001b2c:	601a      	str	r2, [r3, #0]
	
	ptr_state = State_Listen;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <main+0x100>)
 8001b30:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <main+0x104>)
 8001b32:	601a      	str	r2, [r3, #0]

	__HAL_DMA_ENABLE_IT(&hdma_dcmi, DMA_IT_TC);
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <main+0x108>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <main+0x108>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0210 	orr.w	r2, r2, #16
 8001b42:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b44:	2039      	movs	r0, #57	@ 0x39
 8001b46:	f001 fd64 	bl	8003612 <HAL_NVIC_EnableIRQ>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4811      	ldr	r0, [pc, #68]	@ (8001b94 <main+0x10c>)
 8001b4e:	f005 ff6d 	bl	8007a2c <HAL_TIM_PWM_Start>
	ov7670_init();
 8001b52:	f000 f9f7 	bl	8001f44 <ov7670_init>
	ov7_config();
 8001b56:	f000 fa27 	bl	8001fa8 <ov7_config>

	while(1){

		if (ptr_state != NULL) {
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <main+0x100>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0fb      	beq.n	8001b5a <main+0xd2>
            ptr_state();       // Run the state logic
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <main+0x100>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4798      	blx	r3
		if (ptr_state != NULL) {
 8001b68:	e7f7      	b.n	8001b5a <main+0xd2>
 8001b6a:	bf00      	nop
 8001b6c:	20000548 	.word	0x20000548
 8001b70:	20018cec 	.word	0x20018cec
 8001b74:	20018d04 	.word	0x20018d04
 8001b78:	20018d10 	.word	0x20018d10
 8001b7c:	20018d1c 	.word	0x20018d1c
 8001b80:	0800d0d0 	.word	0x0800d0d0
 8001b84:	41100000 	.word	0x41100000
 8001b88:	20018ce4 	.word	0x20018ce4
 8001b8c:	0800193d 	.word	0x0800193d
 8001b90:	20000320 	.word	0x20000320
 8001b94:	20000428 	.word	0x20000428

08001b98 <home_Align>:
#include <math.h>

extern const Position HOME;

// Calculates the motor position based on given (x, y) coords
void home_Align(Probe* myProbe){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    // 1. retract the motor
    setServoAngle(myProbe->lin, 0);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001c20 <home_Align+0x88>
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fae9 	bl	8002180 <setServoAngle>
    myProbe->lin->currAngle = 0; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
    HAL_Delay(10); 
 8001bb8:	200a      	movs	r0, #10
 8001bba:	f001 f99d 	bl	8002ef8 <HAL_Delay>

    // 2. rotate to home angle
    setServoAngle(myProbe->rot, 0);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001c20 <home_Align+0x88>
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fada 	bl	8002180 <setServoAngle>
    myProbe->rot->currAngle = 0; 
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
    HAL_Delay(10); 
 8001bd6:	200a      	movs	r0, #10
 8001bd8:	f001 f98e 	bl	8002ef8 <HAL_Delay>

    // 3. retract to home direction in stepper
    float move_cm = -(myProbe->nema->currAngle - HOME.x); // move right
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <home_Align+0x8c>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bee:	eef1 7a67 	vneg.f32	s15, s15
 8001bf2:	edc7 7a03 	vstr	s15, [r7, #12]
    stp_moveDistance((myProbe->nema), move_cm);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	ed97 0a03 	vldr	s0, [r7, #12]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fc64 	bl	80024cc <stp_moveDistance>
    myProbe->nema->currAngle = myProbe->nema->homeAngle;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
    HAL_Delay(10); 
 8001c10:	200a      	movs	r0, #10
 8001c12:	f001 f971 	bl	8002ef8 <HAL_Delay>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	00000000 	.word	0x00000000
 8001c24:	0800d0d0 	.word	0x0800d0d0

08001c28 <x_align>:

void x_align(Probe* myProbe, Position desiredLoc){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	eef0 6a40 	vmov.f32	s13, s0
 8001c34:	eeb0 7a60 	vmov.f32	s14, s1
 8001c38:	eef0 7a41 	vmov.f32	s15, s2
 8001c3c:	edc7 6a00 	vstr	s13, [r7]
 8001c40:	ed87 7a01 	vstr	s14, [r7, #4]
 8001c44:	edc7 7a02 	vstr	s15, [r7, #8]
    flashLED(LD1_GPIO_Port, LD1_Pin, 1000, 5);
 8001c48:	2305      	movs	r3, #5
 8001c4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4813      	ldr	r0, [pc, #76]	@ (8001ca0 <x_align+0x78>)
 8001c52:	f7ff fa11 	bl	8001078 <flashLED>
    float move_cm = -(HOME.x - desiredLoc.x);
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <x_align+0x7c>)
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	edd7 7a00 	vldr	s15, [r7]
 8001c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c64:	eef1 7a67 	vneg.f32	s15, s15
 8001c68:	edc7 7a05 	vstr	s15, [r7, #20]
    if(move_cm > X_MAX){
 8001c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c70:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8001c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	dd01      	ble.n	8001c82 <x_align+0x5a>
        move_cm = X_MAX;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <x_align+0x80>)
 8001c80:	617b      	str	r3, [r7, #20]
    }
    stp_moveDistance(((myProbe->nema)), move_cm);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	ed97 0a05 	vldr	s0, [r7, #20]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fc1e 	bl	80024cc <stp_moveDistance>
    myProbe->nema->currAngle = move_cm; 
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	605a      	str	r2, [r3, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	0800d0d0 	.word	0x0800d0d0
 8001ca8:	41500000 	.word	0x41500000
 8001cac:	00000000 	.word	0x00000000

08001cb0 <theta_align>:

void theta_align(Probe* myProbe, Position desiredLoc){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	eef0 6a40 	vmov.f32	s13, s0
 8001cbc:	eeb0 7a60 	vmov.f32	s14, s1
 8001cc0:	eef0 7a41 	vmov.f32	s15, s2
 8001cc4:	edc7 6a00 	vstr	s13, [r7]
 8001cc8:	ed87 7a01 	vstr	s14, [r7, #4]
 8001ccc:	edc7 7a02 	vstr	s15, [r7, #8]
    float theta_rad = atan(desiredLoc.x / H);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc58 	bl	8000588 <__aeabi_f2d>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <theta_align+0xb8>)
 8001cde:	f7fe fdd5 	bl	800088c <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	ec43 2b17 	vmov	d7, r2, r3
 8001cea:	eeb0 0a47 	vmov.f32	s0, s14
 8001cee:	eef0 0a67 	vmov.f32	s1, s15
 8001cf2:	f00a fd71 	bl	800c7d8 <atan>
 8001cf6:	ec53 2b10 	vmov	r2, r3, d0
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe ff73 	bl	8000be8 <__aeabi_d2f>
 8001d02:	4603      	mov	r3, r0
 8001d04:	613b      	str	r3, [r7, #16]
    float theta_deg = theta_rad * DEGREE_CONVERSION;
 8001d06:	6938      	ldr	r0, [r7, #16]
 8001d08:	f7fe fc3e 	bl	8000588 <__aeabi_f2d>
 8001d0c:	a314      	add	r3, pc, #80	@ (adr r3, 8001d60 <theta_align+0xb0>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fc91 	bl	8000638 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe ff63 	bl	8000be8 <__aeabi_d2f>
 8001d22:	4603      	mov	r3, r0
 8001d24:	617b      	str	r3, [r7, #20]
    if(theta_deg > THETA_MAX){
 8001d26:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d2a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001d6c <theta_align+0xbc>
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	dd01      	ble.n	8001d3c <theta_align+0x8c>
        theta_deg = THETA_MAX;
 8001d38:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <theta_align+0xc0>)
 8001d3a:	617b      	str	r3, [r7, #20]
    }
    setServoAngle(myProbe->rot, theta_deg);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fa1b 	bl	8002180 <setServoAngle>
    myProbe->rot->currAngle = theta_deg;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	f3af 8000 	nop.w
 8001d60:	1a63c1f8 	.word	0x1a63c1f8
 8001d64:	404ca5dc 	.word	0x404ca5dc
 8001d68:	40290000 	.word	0x40290000
 8001d6c:	42080000 	.word	0x42080000
 8001d70:	42080000 	.word	0x42080000
 8001d74:	00000000 	.word	0x00000000

08001d78 <R_align>:

void R_align(Probe* myProbe, Position desiredLoc){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	eef0 6a40 	vmov.f32	s13, s0
 8001d84:	eeb0 7a60 	vmov.f32	s14, s1
 8001d88:	eef0 7a41 	vmov.f32	s15, s2
 8001d8c:	edc7 6a00 	vstr	s13, [r7]
 8001d90:	ed87 7a01 	vstr	s14, [r7, #4]
 8001d94:	edc7 7a02 	vstr	s15, [r7, #8]
    float hypotenuse = hypot(H, desiredLoc.y);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbf4 	bl	8000588 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	ec43 2b11 	vmov	d1, r2, r3
 8001da8:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001e18 <R_align+0xa0>
 8001dac:	f00a fce0 	bl	800c770 <hypot>
 8001db0:	ec53 2b10 	vmov	r2, r3, d0
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe ff16 	bl	8000be8 <__aeabi_d2f>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	617b      	str	r3, [r7, #20]
    float move_cm = hypotenuse - PROBE_LEN;
 8001dc0:	6978      	ldr	r0, [r7, #20]
 8001dc2:	f7fe fbe1 	bl	8000588 <__aeabi_f2d>
 8001dc6:	a317      	add	r3, pc, #92	@ (adr r3, 8001e24 <R_align+0xac>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fa7c 	bl	80002c8 <__aeabi_dsub>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe ff06 	bl	8000be8 <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]
    sv_moveDistance(myProbe->lin, move_cm); // automatically updates cur_angle
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fa31 	bl	8002250 <sv_moveDistance>
    if(move_cm > DR_MAX){
 8001dee:	6938      	ldr	r0, [r7, #16]
 8001df0:	f7fe fbca 	bl	8000588 <__aeabi_f2d>
 8001df4:	a30d      	add	r3, pc, #52	@ (adr r3, 8001e2c <R_align+0xb4>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f7fe fead 	bl	8000b58 <__aeabi_dcmpgt>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <R_align+0x8e>
        move_cm = DR_MAX; 
    }
}
 8001e04:	e001      	b.n	8001e0a <R_align+0x92>
        move_cm = DR_MAX; 
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <R_align+0xa8>)
 8001e08:	613b      	str	r3, [r7, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	f3af 8000 	nop.w
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40290000 	.word	0x40290000
 8001e20:	402ccccd 	.word	0x402ccccd
 8001e24:	9999999a 	.word	0x9999999a
 8001e28:	40289999 	.word	0x40289999
 8001e2c:	9999999a 	.word	0x9999999a
 8001e30:	40059999 	.word	0x40059999

08001e34 <moveProbe_test>:

// assume probe at home
void moveProbe_test(Probe* myProbe, Position desiredLoc){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	eef0 6a40 	vmov.f32	s13, s0
 8001e40:	eeb0 7a60 	vmov.f32	s14, s1
 8001e44:	eef0 7a41 	vmov.f32	s15, s2
 8001e48:	edc7 6a00 	vstr	s13, [r7]
 8001e4c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001e50:	edc7 7a02 	vstr	s15, [r7, #8]

    // 1. send home
    //home_Align(myProbe);

    // 2. align stepper, theta, R in order
    flashLED(LD3_GPIO_Port, LD3_Pin, 1000, 5);
 8001e54:	2305      	movs	r3, #5
 8001e56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e5e:	4822      	ldr	r0, [pc, #136]	@ (8001ee8 <moveProbe_test+0xb4>)
 8001e60:	f7ff f90a 	bl	8001078 <flashLED>
    x_align(myProbe, desiredLoc);
 8001e64:	edd7 6a00 	vldr	s13, [r7]
 8001e68:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e70:	eeb0 0a66 	vmov.f32	s0, s13
 8001e74:	eef0 0a47 	vmov.f32	s1, s14
 8001e78:	eeb0 1a67 	vmov.f32	s2, s15
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f7ff fed3 	bl	8001c28 <x_align>
    HAL_Delay(100); 
 8001e82:	2064      	movs	r0, #100	@ 0x64
 8001e84:	f001 f838 	bl	8002ef8 <HAL_Delay>
    theta_align(myProbe, desiredLoc);
 8001e88:	edd7 6a00 	vldr	s13, [r7]
 8001e8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e94:	eeb0 0a66 	vmov.f32	s0, s13
 8001e98:	eef0 0a47 	vmov.f32	s1, s14
 8001e9c:	eeb0 1a67 	vmov.f32	s2, s15
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7ff ff05 	bl	8001cb0 <theta_align>
    HAL_Delay(100); 
 8001ea6:	2064      	movs	r0, #100	@ 0x64
 8001ea8:	f001 f826 	bl	8002ef8 <HAL_Delay>
    R_align(myProbe, desiredLoc);
 8001eac:	edd7 6a00 	vldr	s13, [r7]
 8001eb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb8:	eeb0 0a66 	vmov.f32	s0, s13
 8001ebc:	eef0 0a47 	vmov.f32	s1, s14
 8001ec0:	eeb0 1a67 	vmov.f32	s2, s15
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff ff57 	bl	8001d78 <R_align>
    HAL_Delay(100); 
 8001eca:	2064      	movs	r0, #100	@ 0x64
 8001ecc:	f001 f814 	bl	8002ef8 <HAL_Delay>

    // 3. wait
    HAL_Delay(3000); 
 8001ed0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ed4:	f001 f810 	bl	8002ef8 <HAL_Delay>

    // 4. Align back home
    home_Align(myProbe);
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f7ff fe5d 	bl	8001b98 <home_Align>

}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40020400 	.word	0x40020400

08001eec <init_home>:

void init_home(Probe* myProbe){
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    myProbe->nema->homeAngle = HOME.x;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <init_home+0x54>)
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	601a      	str	r2, [r3, #0]
    myProbe->nema->currAngle = myProbe->nema->homeAngle;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	605a      	str	r2, [r3, #4]

    myProbe->lin->currAngle = 0; 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
    myProbe->lin->homeAngle = 0; 
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
    myProbe->rot->currAngle = 0; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
    myProbe->rot->homeAngle = 0; 
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	605a      	str	r2, [r3, #4]

}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	0800d0d0 	.word	0x0800d0d0

08001f44 <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b09a      	sub	sp, #104	@ 0x68
 8001f48:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 8001f4a:	4814      	ldr	r0, [pc, #80]	@ (8001f9c <ov7670_init+0x58>)
 8001f4c:	f7ff f880 	bl	8001050 <print_msg>
  val = ov7670_read(0x0A);
 8001f50:	200a      	movs	r0, #10
 8001f52:	f000 f875 	bl	8002040 <ov7670_read>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if (val != 0x76) {
 8001f5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001f60:	2b76      	cmp	r3, #118	@ 0x76
 8001f62:	d00c      	beq.n	8001f7e <ov7670_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 8001f64:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001f68:	463b      	mov	r3, r7
 8001f6a:	490d      	ldr	r1, [pc, #52]	@ (8001fa0 <ov7670_init+0x5c>)
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f008 fac3 	bl	800a4f8 <siprintf>
    print_msg(msg);
 8001f72:	463b      	mov	r3, r7
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f86b 	bl	8001050 <print_msg>
    return 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e009      	b.n	8001f92 <ov7670_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 8001f7e:	463b      	mov	r3, r7
 8001f80:	4908      	ldr	r1, [pc, #32]	@ (8001fa4 <ov7670_init+0x60>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f008 fab8 	bl	800a4f8 <siprintf>
    print_msg(msg);
 8001f88:	463b      	mov	r3, r7
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f860 	bl	8001050 <print_msg>

  // Your code here

  //

  return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3768      	adds	r7, #104	@ 0x68
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	0800cffc 	.word	0x0800cffc
 8001fa0:	0800d008 	.word	0x0800d008
 8001fa4:	0800d024 	.word	0x0800d024

08001fa8 <ov7_config>:
    }

    print_msg("OV7670 Register Read Complete.\n");
}

void ov7_config(){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af02      	add	r7, sp, #8
	char msg[20];
	uint8_t data[2];
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e037      	b.n	8002024 <ov7_config+0x7c>
		data[0] = OV7670_reg[i][0]; 
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <ov7_config+0x8c>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001fbc:	703b      	strb	r3, [r7, #0]
		data[1] = OV7670_reg[i][1];
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002034 <ov7_config+0x8c>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	707b      	strb	r3, [r7, #1]
		HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); //send address frame
 8001fca:	463a      	mov	r2, r7
 8001fcc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	2142      	movs	r1, #66	@ 0x42
 8001fd6:	4818      	ldr	r0, [pc, #96]	@ (8002038 <ov7_config+0x90>)
 8001fd8:	f003 fe5c 	bl	8005c94 <HAL_I2C_Master_Transmit>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8001fe0:	e017      	b.n	8002012 <ov7_config+0x6a>
			 sprintf(msg, "Error hi\n");
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4915      	ldr	r1, [pc, #84]	@ (800203c <ov7_config+0x94>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f008 fa86 	bl	800a4f8 <siprintf>
       print_msg(msg);
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f82e 	bl	8001050 <print_msg>
       HAL_Delay(1000);
 8001ff4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ff8:	f000 ff7e 	bl	8002ef8 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); 
 8001ffc:	463a      	mov	r2, r7
 8001ffe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2302      	movs	r3, #2
 8002006:	2142      	movs	r1, #66	@ 0x42
 8002008:	480b      	ldr	r0, [pc, #44]	@ (8002038 <ov7_config+0x90>)
 800200a:	f003 fe43 	bl	8005c94 <HAL_I2C_Master_Transmit>
 800200e:	4603      	mov	r3, r0
 8002010:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8002012:	7efb      	ldrb	r3, [r7, #27]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e4      	bne.n	8001fe2 <ov7_config+0x3a>
    }
		HAL_Delay(10);
 8002018:	200a      	movs	r0, #10
 800201a:	f000 ff6d 	bl	8002ef8 <HAL_Delay>
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b79      	cmp	r3, #121	@ 0x79
 8002028:	ddc4      	ble.n	8001fb4 <ov7_config+0xc>
	}
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	0800d0dc 	.word	0x0800d0dc
 8002038:	200003d4 	.word	0x200003d4
 800203c:	0800d084 	.word	0x0800d084

08002040 <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 8002040:	b580      	push	{r7, lr}
 8002042:	b09e      	sub	sp, #120	@ 0x78
 8002044:	af02      	add	r7, sp, #8
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
		char msg[100];
    // Transmit register
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 800204a:	1dfa      	adds	r2, r7, #7
 800204c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2301      	movs	r3, #1
 8002054:	2142      	movs	r1, #66	@ 0x42
 8002056:	481b      	ldr	r0, [pc, #108]	@ (80020c4 <ov7670_read+0x84>)
 8002058:	f003 fe1c 	bl	8005c94 <HAL_I2C_Master_Transmit>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 8002062:	e01a      	b.n	800209a <ov7670_read+0x5a>
			 sprintf(msg, "Error\n");
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	4917      	ldr	r1, [pc, #92]	@ (80020c8 <ov7670_read+0x88>)
 800206a:	4618      	mov	r0, r3
 800206c:	f008 fa44 	bl	800a4f8 <siprintf>
       print_msg(msg);
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe ffeb 	bl	8001050 <print_msg>
       HAL_Delay(1000);
 800207a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800207e:	f000 ff3b 	bl	8002ef8 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 8002082:	1dfa      	adds	r2, r7, #7
 8002084:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	2142      	movs	r1, #66	@ 0x42
 800208e:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <ov7670_read+0x84>)
 8002090:	f003 fe00 	bl	8005c94 <HAL_I2C_Master_Transmit>
 8002094:	4603      	mov	r3, r0
 8002096:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 800209a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1e0      	bne.n	8002064 <ov7670_read+0x24>
    }
    // Read data
    HAL_I2C_Master_Receive(&hi2c2, (reADDR_OV7670), &data, 1, HAL_MAX_DELAY);
 80020a2:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2301      	movs	r3, #1
 80020ae:	2143      	movs	r1, #67	@ 0x43
 80020b0:	4804      	ldr	r0, [pc, #16]	@ (80020c4 <ov7670_read+0x84>)
 80020b2:	f003 feed 	bl	8005e90 <HAL_I2C_Master_Receive>
    return data;
 80020b6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3770      	adds	r7, #112	@ 0x70
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200003d4 	.word	0x200003d4
 80020c8:	0800d090 	.word	0x0800d090

080020cc <ov7670_snapshot>:




void ov7670_snapshot(uint16_t *buff){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b09c      	sub	sp, #112	@ 0x70
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  // Your code here
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 80020d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002110 <ov7670_snapshot+0x44>)
 80020d6:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 80020da:	2102      	movs	r1, #2
 80020dc:	480d      	ldr	r0, [pc, #52]	@ (8002114 <ov7670_snapshot+0x48>)
 80020de:	f001 fab3 	bl	8003648 <HAL_DCMI_Start_DMA>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 80020e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <ov7670_snapshot+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	4908      	ldr	r1, [pc, #32]	@ (8002118 <ov7670_snapshot+0x4c>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f008 f9fe 	bl	800a4f8 <siprintf>
       print_msg(msg);
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe ffa5 	bl	8001050 <print_msg>
    }
}//goes back to main for waiting for interrupt
 8002106:	bf00      	nop
 8002108:	3770      	adds	r7, #112	@ 0x70
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000560 	.word	0x20000560
 8002114:	200002d0 	.word	0x200002d0
 8002118:	0800d098 	.word	0x0800d098

0800211c <PCA9685_SetPWM>:
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
}

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af04      	add	r7, sp, #16
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	460b      	mov	r3, r1
 8002128:	80bb      	strh	r3, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3306      	adds	r3, #6
 8002136:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8002138:	88bb      	ldrh	r3, [r7, #4]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b29b      	uxth	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b29b      	uxth	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	b29a      	uxth	r2, r3
 800215c:	230a      	movs	r3, #10
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	2304      	movs	r3, #4
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2301      	movs	r3, #1
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	4803      	ldr	r0, [pc, #12]	@ (800217c <PCA9685_SetPWM+0x60>)
 8002170:	f004 f8c0 	bl	80062f4 <HAL_I2C_Mem_Write>
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200003d4 	.word	0x200003d4

08002180 <setServoAngle>:
  Value = (205.0 + (Angle / 180.0) * (410.0 - 205.0));
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
}

void setServoAngle(Servo* sv, float Angle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	ed87 0a00 	vstr	s0, [r7]
  // this one is for the position
  float Value;
    if (Angle < 0) Angle = 0;
 800218c:	edd7 7a00 	vldr	s15, [r7]
 8002190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	d502      	bpl.n	80021a0 <setServoAngle+0x20>
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
    if (Angle > 180) Angle = 180;
 80021a0:	edd7 7a00 	vldr	s15, [r7]
 80021a4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002240 <setServoAngle+0xc0>
 80021a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	dd01      	ble.n	80021b6 <setServoAngle+0x36>
 80021b2:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <setServoAngle+0xc4>)
 80021b4:	603b      	str	r3, [r7, #0]

    float Rev_Angle = 180 - Angle; //in order to make positive values forward and negative values backwards ;)
 80021b6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002240 <setServoAngle+0xc0>
 80021ba:	edd7 7a00 	vldr	s15, [r7]
 80021be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c2:	edc7 7a03 	vstr	s15, [r7, #12]

  Value = (Rev_Angle * (511.9 - 102.4) / 180.0) + 102.4;
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7fe f9de 	bl	8000588 <__aeabi_f2d>
 80021cc:	a318      	add	r3, pc, #96	@ (adr r3, 8002230 <setServoAngle+0xb0>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe fa31 	bl	8000638 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <setServoAngle+0xc8>)
 80021e4:	f7fe fb52 	bl	800088c <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	a311      	add	r3, pc, #68	@ (adr r3, 8002238 <setServoAngle+0xb8>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f869 	bl	80002cc <__adddf3>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fcf1 	bl	8000be8 <__aeabi_d2f>
 8002206:	4603      	mov	r3, r0
 8002208:	60bb      	str	r3, [r7, #8]
  PCA9685_SetPWM(sv->Channel, 0, (uint16_t)Value);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7a1b      	ldrb	r3, [r3, #8]
 800220e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002216:	ee17 2a90 	vmov	r2, s15
 800221a:	b292      	uxth	r2, r2
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff7c 	bl	800211c <PCA9685_SetPWM>
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	f3af 8000 	nop.w
 8002230:	00000000 	.word	0x00000000
 8002234:	40799800 	.word	0x40799800
 8002238:	9999999a 	.word	0x9999999a
 800223c:	40599999 	.word	0x40599999
 8002240:	43340000 	.word	0x43340000
 8002244:	43340000 	.word	0x43340000
 8002248:	40668000 	.word	0x40668000
 800224c:	00000000 	.word	0x00000000

08002250 <sv_moveDistance>:
  sv->homeAngle = homeAngle;
  setServoAngle(sv, homeAngle);
}

//pass in the current Angle of the servo, and modify that value by its angle equivalent of the distance 
void sv_moveDistance(Servo* sv, float distance_cm) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	ed87 0a00 	vstr	s0, [r7]

  //theoretically we have around 2.8cm per 180 deg
  //experimentally we have around 2.52cm per 180 deg. 

    float delta_angle = distance_cm / 0.01544; // (0.014)
 800225c:	6838      	ldr	r0, [r7, #0]
 800225e:	f7fe f993 	bl	8000588 <__aeabi_f2d>
 8002262:	a323      	add	r3, pc, #140	@ (adr r3, 80022f0 <sv_moveDistance+0xa0>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe fb10 	bl	800088c <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fcb8 	bl	8000be8 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]


    
    if(delta_angle + sv->currAngle > 0 && delta_angle + sv->currAngle <= 180){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	edd7 7a03 	vldr	s15, [r7, #12]
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dd18      	ble.n	80022c6 <sv_moveDistance+0x76>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	edd7 7a03 	vldr	s15, [r7, #12]
 800229e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80022e8 <sv_moveDistance+0x98>
 80022a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ae:	d80a      	bhi.n	80022c6 <sv_moveDistance+0x76>
      sv->currAngle += delta_angle;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	ed93 7a00 	vldr	s14, [r3]
 80022b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	edc3 7a00 	vstr	s15, [r3]
 80022c4:	e003      	b.n	80022ce <sv_moveDistance+0x7e>
    }else{
      //print_msg("Angle change request exceeded bounds");
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80022c6:	2101      	movs	r1, #1
 80022c8:	4808      	ldr	r0, [pc, #32]	@ (80022ec <sv_moveDistance+0x9c>)
 80022ca:	f003 fb60 	bl	800598e <HAL_GPIO_TogglePin>

    }

    setServoAngle(sv, sv->currAngle);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	eeb0 0a67 	vmov.f32	s0, s15
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff51 	bl	8002180 <setServoAngle>
  
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	43340000 	.word	0x43340000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	b866e43b 	.word	0xb866e43b
 80022f4:	3f8f9f01 	.word	0x3f8f9f01

080022f8 <stp_Step>:

#include "steppermotors.h"
#include "stdlib.h"


void stp_Step(Stepper* motor, int step) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
   switch(step % 4) {
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	425a      	negs	r2, r3
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	bf58      	it	pl
 8002310:	4253      	negpl	r3, r2
 8002312:	2b03      	cmp	r3, #3
 8002314:	d86e      	bhi.n	80023f4 <stp_Step+0xfc>
 8002316:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <stp_Step+0x24>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	0800232d 	.word	0x0800232d
 8002320:	0800235f 	.word	0x0800235f
 8002324:	08002391 	.word	0x08002391
 8002328:	080023c3 	.word	0x080023c3
       case 0:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 800232c:	2201      	movs	r2, #1
 800232e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002332:	4832      	ldr	r0, [pc, #200]	@ (80023fc <stp_Step+0x104>)
 8002334:	f003 fb12 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800233e:	482f      	ldr	r0, [pc, #188]	@ (80023fc <stp_Step+0x104>)
 8002340:	f003 fb0c 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 8002344:	2201      	movs	r2, #1
 8002346:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800234a:	482c      	ldr	r0, [pc, #176]	@ (80023fc <stp_Step+0x104>)
 800234c:	f003 fb06 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002356:	4829      	ldr	r0, [pc, #164]	@ (80023fc <stp_Step+0x104>)
 8002358:	f003 fb00 	bl	800595c <HAL_GPIO_WritePin>
           break;
 800235c:	e04a      	b.n	80023f4 <stp_Step+0xfc>
       case 1:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002364:	4825      	ldr	r0, [pc, #148]	@ (80023fc <stp_Step+0x104>)
 8002366:	f003 faf9 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 800236a:	2201      	movs	r2, #1
 800236c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002370:	4822      	ldr	r0, [pc, #136]	@ (80023fc <stp_Step+0x104>)
 8002372:	f003 faf3 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 8002376:	2201      	movs	r2, #1
 8002378:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800237c:	481f      	ldr	r0, [pc, #124]	@ (80023fc <stp_Step+0x104>)
 800237e:	f003 faed 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002388:	481c      	ldr	r0, [pc, #112]	@ (80023fc <stp_Step+0x104>)
 800238a:	f003 fae7 	bl	800595c <HAL_GPIO_WritePin>
           break;
 800238e:	e031      	b.n	80023f4 <stp_Step+0xfc>
       case 2:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002396:	4819      	ldr	r0, [pc, #100]	@ (80023fc <stp_Step+0x104>)
 8002398:	f003 fae0 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 800239c:	2201      	movs	r2, #1
 800239e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023a2:	4816      	ldr	r0, [pc, #88]	@ (80023fc <stp_Step+0x104>)
 80023a4:	f003 fada 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 80023a8:	2200      	movs	r2, #0
 80023aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023ae:	4813      	ldr	r0, [pc, #76]	@ (80023fc <stp_Step+0x104>)
 80023b0:	f003 fad4 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 80023b4:	2201      	movs	r2, #1
 80023b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ba:	4810      	ldr	r0, [pc, #64]	@ (80023fc <stp_Step+0x104>)
 80023bc:	f003 face 	bl	800595c <HAL_GPIO_WritePin>
           break;
 80023c0:	e018      	b.n	80023f4 <stp_Step+0xfc>
       case 3:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023c8:	480c      	ldr	r0, [pc, #48]	@ (80023fc <stp_Step+0x104>)
 80023ca:	f003 fac7 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023d4:	4809      	ldr	r0, [pc, #36]	@ (80023fc <stp_Step+0x104>)
 80023d6:	f003 fac1 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023e0:	4806      	ldr	r0, [pc, #24]	@ (80023fc <stp_Step+0x104>)
 80023e2:	f003 fabb 	bl	800595c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 80023e6:	2201      	movs	r2, #1
 80023e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ec:	4803      	ldr	r0, [pc, #12]	@ (80023fc <stp_Step+0x104>)
 80023ee:	f003 fab5 	bl	800595c <HAL_GPIO_WritePin>
           break;
 80023f2:	bf00      	nop
   }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021400 	.word	0x40021400

08002400 <stp_Stop>:
   nema->homeAngle = 0;
   nema->currAngle = 0;
}


void stp_Stop(Stepper* motor) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800240e:	480c      	ldr	r0, [pc, #48]	@ (8002440 <stp_Stop+0x40>)
 8002410:	f003 faa4 	bl	800595c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002414:	2200      	movs	r2, #0
 8002416:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800241a:	4809      	ldr	r0, [pc, #36]	@ (8002440 <stp_Stop+0x40>)
 800241c:	f003 fa9e 	bl	800595c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002426:	4806      	ldr	r0, [pc, #24]	@ (8002440 <stp_Stop+0x40>)
 8002428:	f003 fa98 	bl	800595c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002432:	4803      	ldr	r0, [pc, #12]	@ (8002440 <stp_Stop+0x40>)
 8002434:	f003 fa92 	bl	800595c <HAL_GPIO_WritePin>

}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021400 	.word	0x40021400

08002444 <stp_Move>:

void stp_Move(Stepper* motor, int steps, int delay) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
   int direction = (steps > 0) ? 1 : -1; // Determine direction
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	dd01      	ble.n	800245a <stp_Move+0x16>
 8002456:	2301      	movs	r3, #1
 8002458:	e001      	b.n	800245e <stp_Move+0x1a>
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	61bb      	str	r3, [r7, #24]
   int stepCount = abs(steps);  // Get absolute step count
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	bfb8      	it	lt
 8002466:	425b      	neglt	r3, r3
 8002468:	617b      	str	r3, [r7, #20]

   for (int i = 0; i < stepCount; i++) {
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e021      	b.n	80024b4 <stp_Move+0x70>
       int stepIndex = (direction > 0) ? (i % 4) : (3 - (i % 4));
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	dd08      	ble.n	8002488 <stp_Move+0x44>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	425a      	negs	r2, r3
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	f002 0203 	and.w	r2, r2, #3
 8002482:	bf58      	it	pl
 8002484:	4253      	negpl	r3, r2
 8002486:	e009      	b.n	800249c <stp_Move+0x58>
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	425a      	negs	r2, r3
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	f002 0203 	and.w	r2, r2, #3
 8002494:	bf58      	it	pl
 8002496:	4253      	negpl	r3, r2
 8002498:	f1c3 0303 	rsb	r3, r3, #3
 800249c:	613b      	str	r3, [r7, #16]
       stp_Step(motor, stepIndex);
 800249e:	6939      	ldr	r1, [r7, #16]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff ff29 	bl	80022f8 <stp_Step>
       HAL_Delay(delay); // Speed control
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fd25 	bl	8002ef8 <HAL_Delay>
   for (int i = 0; i < stepCount; i++) {
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dbd9      	blt.n	8002470 <stp_Move+0x2c>
   }
   stp_Stop(motor);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff ff9f 	bl	8002400 <stp_Stop>
}
 80024c2:	bf00      	nop
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <stp_moveDistance>:

void stp_moveDistance(Stepper* motor, float distance_cm){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	ed87 0a00 	vstr	s0, [r7]

   int convertedSteps = distance_cm * NEMA_DISTANCE_TO_STEPS;
 80024d8:	edd7 7a00 	vldr	s15, [r7]
 80024dc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002500 <stp_moveDistance+0x34>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 3a90 	vmov	r3, s15
 80024ec:	60fb      	str	r3, [r7, #12]
   stp_Move(motor, convertedSteps, 5);
 80024ee:	2205      	movs	r2, #5
 80024f0:	68f9      	ldr	r1, [r7, #12]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ffa6 	bl	8002444 <stp_Move>

}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	42440000 	.word	0x42440000

08002504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <HAL_MspInit+0x4c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	4a0f      	ldr	r2, [pc, #60]	@ (8002550 <HAL_MspInit+0x4c>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002518:	6453      	str	r3, [r2, #68]	@ 0x44
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <HAL_MspInit+0x4c>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_MspInit+0x4c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <HAL_MspInit+0x4c>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_MspInit+0x4c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800

08002554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2f      	ldr	r2, [pc, #188]	@ (8002630 <HAL_ADC_MspInit+0xdc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d158      	bne.n	8002628 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b2e      	ldr	r3, [pc, #184]	@ (8002634 <HAL_ADC_MspInit+0xe0>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	4a2d      	ldr	r2, [pc, #180]	@ (8002634 <HAL_ADC_MspInit+0xe0>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002584:	6453      	str	r3, [r2, #68]	@ 0x44
 8002586:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <HAL_ADC_MspInit+0xe0>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b27      	ldr	r3, [pc, #156]	@ (8002634 <HAL_ADC_MspInit+0xe0>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	4a26      	ldr	r2, [pc, #152]	@ (8002634 <HAL_ADC_MspInit+0xe0>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a2:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <HAL_ADC_MspInit+0xe0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ae:	2301      	movs	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025b2:	2303      	movs	r3, #3
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	481d      	ldr	r0, [pc, #116]	@ (8002638 <HAL_ADC_MspInit+0xe4>)
 80025c2:	f003 f837 	bl	8005634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025c6:	4b1d      	ldr	r3, [pc, #116]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 80025c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002640 <HAL_ADC_MspInit+0xec>)
 80025ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d8:	4b18      	ldr	r3, [pc, #96]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025de:	4b17      	ldr	r3, [pc, #92]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 80025e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 80025e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 80025f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025f6:	4b11      	ldr	r3, [pc, #68]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 80025f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025fe:	4b0f      	ldr	r3, [pc, #60]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 8002600:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002604:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 8002608:	2200      	movs	r2, #0
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800260c:	480b      	ldr	r0, [pc, #44]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 800260e:	f001 fa87 	bl	8003b20 <HAL_DMA_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002618:	f7ff f90c 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a07      	ldr	r2, [pc, #28]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 8002620:	639a      	str	r2, [r3, #56]	@ 0x38
 8002622:	4a06      	ldr	r2, [pc, #24]	@ (800263c <HAL_ADC_MspInit+0xe8>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002628:	bf00      	nop
 800262a:	3728      	adds	r7, #40	@ 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40012000 	.word	0x40012000
 8002634:	40023800 	.word	0x40023800
 8002638:	40020000 	.word	0x40020000
 800263c:	20000270 	.word	0x20000270
 8002640:	40026410 	.word	0x40026410

08002644 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	@ 0x38
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a78      	ldr	r2, [pc, #480]	@ (8002844 <HAL_DCMI_MspInit+0x200>)
 8002662:	4293      	cmp	r3, r2
 8002664:	f040 80e9 	bne.w	800283a <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	4b76      	ldr	r3, [pc, #472]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 800266e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002670:	4a75      	ldr	r2, [pc, #468]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6353      	str	r3, [r2, #52]	@ 0x34
 8002678:	4b73      	ldr	r3, [pc, #460]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	4b6f      	ldr	r3, [pc, #444]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4a6e      	ldr	r2, [pc, #440]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 800268e:	f043 0310 	orr.w	r3, r3, #16
 8002692:	6313      	str	r3, [r2, #48]	@ 0x30
 8002694:	4b6c      	ldr	r3, [pc, #432]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	4b68      	ldr	r3, [pc, #416]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	4a67      	ldr	r2, [pc, #412]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b0:	4b65      	ldr	r3, [pc, #404]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	4b61      	ldr	r3, [pc, #388]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	4a60      	ldr	r2, [pc, #384]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80026cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e0:	4a59      	ldr	r2, [pc, #356]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e8:	4b57      	ldr	r3, [pc, #348]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	4a52      	ldr	r2, [pc, #328]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 80026fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002702:	6313      	str	r3, [r2, #48]	@ 0x30
 8002704:	4b50      	ldr	r3, [pc, #320]	@ (8002848 <HAL_DCMI_MspInit+0x204>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002710:	2370      	movs	r3, #112	@ 0x70
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002720:	230d      	movs	r3, #13
 8002722:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002728:	4619      	mov	r1, r3
 800272a:	4848      	ldr	r0, [pc, #288]	@ (800284c <HAL_DCMI_MspInit+0x208>)
 800272c:	f002 ff82 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002730:	2350      	movs	r3, #80	@ 0x50
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002740:	230d      	movs	r3, #13
 8002742:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002748:	4619      	mov	r1, r3
 800274a:	4841      	ldr	r0, [pc, #260]	@ (8002850 <HAL_DCMI_MspInit+0x20c>)
 800274c:	f002 ff72 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002750:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002762:	230d      	movs	r3, #13
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	4839      	ldr	r0, [pc, #228]	@ (8002854 <HAL_DCMI_MspInit+0x210>)
 800276e:	f002 ff61 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002772:	2308      	movs	r3, #8
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002782:	230d      	movs	r3, #13
 8002784:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278a:	4619      	mov	r1, r3
 800278c:	4832      	ldr	r0, [pc, #200]	@ (8002858 <HAL_DCMI_MspInit+0x214>)
 800278e:	f002 ff51 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002792:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027a4:	230d      	movs	r3, #13
 80027a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ac:	4619      	mov	r1, r3
 80027ae:	482b      	ldr	r0, [pc, #172]	@ (800285c <HAL_DCMI_MspInit+0x218>)
 80027b0:	f002 ff40 	bl	8005634 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80027b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002864 <HAL_DCMI_MspInit+0x220>)
 80027b8:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80027ba:	4b29      	ldr	r3, [pc, #164]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c2:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c8:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80027ce:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027d6:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027dc:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027e4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027ec:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027f4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027f8:	2204      	movs	r2, #4
 80027fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 80027fe:	2203      	movs	r2, #3
 8002800:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002802:	4b17      	ldr	r3, [pc, #92]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 8002804:	2200      	movs	r2, #0
 8002806:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002808:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800280e:	4814      	ldr	r0, [pc, #80]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 8002810:	f001 f986 	bl	8003b20 <HAL_DMA_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 800281a:	f7ff f80b 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 8002822:	649a      	str	r2, [r3, #72]	@ 0x48
 8002824:	4a0e      	ldr	r2, [pc, #56]	@ (8002860 <HAL_DCMI_MspInit+0x21c>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	204e      	movs	r0, #78	@ 0x4e
 8002830:	f000 fed3 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002834:	204e      	movs	r0, #78	@ 0x4e
 8002836:	f000 feec 	bl	8003612 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 800283a:	bf00      	nop
 800283c:	3738      	adds	r7, #56	@ 0x38
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	50050000 	.word	0x50050000
 8002848:	40023800 	.word	0x40023800
 800284c:	40021000 	.word	0x40021000
 8002850:	40020000 	.word	0x40020000
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021800 	.word	0x40021800
 8002860:	20000320 	.word	0x20000320
 8002864:	40026428 	.word	0x40026428

08002868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	@ 0x30
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a32      	ldr	r2, [pc, #200]	@ (8002950 <HAL_I2C_MspInit+0xe8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d12d      	bne.n	80028e6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	4a30      	ldr	r2, [pc, #192]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	6313      	str	r3, [r2, #48]	@ 0x30
 800289a:	4b2e      	ldr	r3, [pc, #184]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80028a6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ac:	2312      	movs	r3, #18
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028b8:	2304      	movs	r3, #4
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4825      	ldr	r0, [pc, #148]	@ (8002958 <HAL_I2C_MspInit+0xf0>)
 80028c4:	f002 feb6 	bl	8005634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	4a20      	ldr	r2, [pc, #128]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 80028d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028e4:	e030      	b.n	8002948 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1c      	ldr	r2, [pc, #112]	@ (800295c <HAL_I2C_MspInit+0xf4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d12b      	bne.n	8002948 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	4b17      	ldr	r3, [pc, #92]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	4a16      	ldr	r2, [pc, #88]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 80028fa:	f043 0320 	orr.w	r3, r3, #32
 80028fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002900:	4b14      	ldr	r3, [pc, #80]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800290c:	2303      	movs	r3, #3
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002910:	2312      	movs	r3, #18
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800291c:	2304      	movs	r3, #4
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	480e      	ldr	r0, [pc, #56]	@ (8002960 <HAL_I2C_MspInit+0xf8>)
 8002928:	f002 fe84 	bl	8005634 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	4a07      	ldr	r2, [pc, #28]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 8002936:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800293a:	6413      	str	r3, [r2, #64]	@ 0x40
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <HAL_I2C_MspInit+0xec>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	bf00      	nop
 800294a:	3730      	adds	r7, #48	@ 0x30
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40005400 	.word	0x40005400
 8002954:	40023800 	.word	0x40023800
 8002958:	40020400 	.word	0x40020400
 800295c:	40005800 	.word	0x40005800
 8002960:	40021400 	.word	0x40021400

08002964 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0b      	ldr	r2, [pc, #44]	@ (80029a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10d      	bne.n	8002992 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <HAL_TIM_PWM_MspInit+0x40>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <HAL_TIM_PWM_MspInit+0x40>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6453      	str	r3, [r2, #68]	@ 0x44
 8002986:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <HAL_TIM_PWM_MspInit+0x40>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b8:	d10e      	bne.n	80029d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_TIM_Base_MspInit+0x70>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	4a15      	ldr	r2, [pc, #84]	@ (8002a18 <HAL_TIM_Base_MspInit+0x70>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <HAL_TIM_Base_MspInit+0x70>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80029d6:	e01a      	b.n	8002a0e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0f      	ldr	r2, [pc, #60]	@ (8002a1c <HAL_TIM_Base_MspInit+0x74>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d115      	bne.n	8002a0e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <HAL_TIM_Base_MspInit+0x70>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002a18 <HAL_TIM_Base_MspInit+0x70>)
 80029ec:	f043 0310 	orr.w	r3, r3, #16
 80029f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_TIM_Base_MspInit+0x70>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	2036      	movs	r0, #54	@ 0x36
 8002a04:	f000 fde9 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a08:	2036      	movs	r0, #54	@ 0x36
 8002a0a:	f000 fe02 	bl	8003612 <HAL_NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40001000 	.word	0x40001000

08002a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a12      	ldr	r2, [pc, #72]	@ (8002a88 <HAL_TIM_MspPostInit+0x68>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11e      	bne.n	8002a80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_TIM_MspPostInit+0x6c>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	4a10      	ldr	r2, [pc, #64]	@ (8002a8c <HAL_TIM_MspPostInit+0x6c>)
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_TIM_MspPostInit+0x6c>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4805      	ldr	r0, [pc, #20]	@ (8002a90 <HAL_TIM_MspPostInit+0x70>)
 8002a7c:	f002 fdda 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a80:	bf00      	nop
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021000 	.word	0x40021000

08002a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	@ 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <HAL_UART_MspInit+0x94>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d134      	bne.n	8002b20 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <HAL_UART_MspInit+0x98>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <HAL_UART_MspInit+0x98>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_UART_MspInit+0x98>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b15      	ldr	r3, [pc, #84]	@ (8002b2c <HAL_UART_MspInit+0x98>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a14      	ldr	r2, [pc, #80]	@ (8002b2c <HAL_UART_MspInit+0x98>)
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_UART_MspInit+0x98>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002aee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b00:	2307      	movs	r3, #7
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4809      	ldr	r0, [pc, #36]	@ (8002b30 <HAL_UART_MspInit+0x9c>)
 8002b0c:	f002 fd92 	bl	8005634 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2100      	movs	r1, #0
 8002b14:	2027      	movs	r0, #39	@ 0x27
 8002b16:	f000 fd60 	bl	80035da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b1a:	2027      	movs	r0, #39	@ 0x27
 8002b1c:	f000 fd79 	bl	8003612 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002b20:	bf00      	nop
 8002b22:	3728      	adds	r7, #40	@ 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40004800 	.word	0x40004800
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020c00 	.word	0x40020c00

08002b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <NMI_Handler+0x4>

08002b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <HardFault_Handler+0x4>

08002b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <MemManage_Handler+0x4>

08002b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8a:	f000 f995 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <USART3_IRQHandler+0x10>)
 8002b9a:	f005 ffb9 	bl	8008b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000500 	.word	0x20000500

08002ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002bac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bb0:	f002 ff08 	bl	80059c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bbc:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <TIM6_DAC_IRQHandler+0x10>)
 8002bbe:	f004 fffd 	bl	8007bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200004b8 	.word	0x200004b8

08002bcc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <DMA2_Stream0_IRQHandler+0x10>)
 8002bd2:	f001 f93d 	bl	8003e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000270 	.word	0x20000270

08002be0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002be4:	4803      	ldr	r0, [pc, #12]	@ (8002bf4 <DMA2_Stream1_IRQHandler+0x14>)
 8002be6:	f001 f933 	bl	8003e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	dma_flag = 1;
 8002bea:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <DMA2_Stream1_IRQHandler+0x18>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000320 	.word	0x20000320
 8002bf8:	20018ce0 	.word	0x20018ce0

08002bfc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <DCMI_IRQHandler+0x10>)
 8002c02:	f000 fdc1 	bl	8003788 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200002d0 	.word	0x200002d0

08002c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return 1;
 8002c14:	2301      	movs	r3, #1
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <_kill>:

int _kill(int pid, int sig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c2a:	f007 fd2b 	bl	800a684 <__errno>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2216      	movs	r2, #22
 8002c32:	601a      	str	r2, [r3, #0]
  return -1;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_exit>:

void _exit (int status)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ffe7 	bl	8002c20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c52:	bf00      	nop
 8002c54:	e7fd      	b.n	8002c52 <_exit+0x12>

08002c56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e00a      	b.n	8002c7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c68:	f3af 8000 	nop.w
 8002c6c:	4601      	mov	r1, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	60ba      	str	r2, [r7, #8]
 8002c74:	b2ca      	uxtb	r2, r1
 8002c76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dbf0      	blt.n	8002c68 <_read+0x12>
  }

  return len;
 8002c86:	687b      	ldr	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e009      	b.n	8002cb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	60ba      	str	r2, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	dbf1      	blt.n	8002ca2 <_write+0x12>
  }
  return len;
 8002cbe:	687b      	ldr	r3, [r7, #4]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_close>:

int _close(int file)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cf0:	605a      	str	r2, [r3, #4]
  return 0;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_isatty>:

int _isatty(int file)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d08:	2301      	movs	r3, #1
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d38:	4a14      	ldr	r2, [pc, #80]	@ (8002d8c <_sbrk+0x5c>)
 8002d3a:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <_sbrk+0x60>)
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d44:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <_sbrk+0x64>)
 8002d4e:	4a12      	ldr	r2, [pc, #72]	@ (8002d98 <_sbrk+0x68>)
 8002d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d52:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d207      	bcs.n	8002d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d60:	f007 fc90 	bl	800a684 <__errno>
 8002d64:	4603      	mov	r3, r0
 8002d66:	220c      	movs	r2, #12
 8002d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	e009      	b.n	8002d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d70:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <_sbrk+0x64>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d76:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <_sbrk+0x64>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <_sbrk+0x64>)
 8002d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d82:	68fb      	ldr	r3, [r7, #12]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20020000 	.word	0x20020000
 8002d90:	00000400 	.word	0x00000400
 8002d94:	20018d24 	.word	0x20018d24
 8002d98:	20018e78 	.word	0x20018e78

08002d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <SystemInit+0x20>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	4a05      	ldr	r2, [pc, #20]	@ (8002dbc <SystemInit+0x20>)
 8002da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002df8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002dc4:	f7ff ffea 	bl	8002d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dc8:	480c      	ldr	r0, [pc, #48]	@ (8002dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dca:	490d      	ldr	r1, [pc, #52]	@ (8002e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd0:	e002      	b.n	8002dd8 <LoopCopyDataInit>

08002dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd6:	3304      	adds	r3, #4

08002dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ddc:	d3f9      	bcc.n	8002dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dde:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002de0:	4c0a      	ldr	r4, [pc, #40]	@ (8002e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de4:	e001      	b.n	8002dea <LoopFillZerobss>

08002de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de8:	3204      	adds	r2, #4

08002dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dec:	d3fb      	bcc.n	8002de6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002dee:	f007 fc4f 	bl	800a690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002df2:	f7fe fe49 	bl	8001a88 <main>
  bx  lr    
 8002df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e00:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002e04:	08020a08 	.word	0x08020a08
  ldr r2, =_sbss
 8002e08:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002e0c:	20018e78 	.word	0x20018e78

08002e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <ADC_IRQHandler>
	...

08002e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <HAL_Init+0x40>)
 8002e1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_Init+0x40>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <HAL_Init+0x40>)
 8002e2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e30:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <HAL_Init+0x40>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a07      	ldr	r2, [pc, #28]	@ (8002e54 <HAL_Init+0x40>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	f000 fbc1 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f000 f808 	bl	8002e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e48:	f7ff fb5c 	bl	8002504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023c00 	.word	0x40023c00

08002e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e60:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <HAL_InitTick+0x54>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_InitTick+0x58>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fbd9 	bl	800362e <HAL_SYSTICK_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00e      	b.n	8002ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d80a      	bhi.n	8002ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	f000 fba1 	bl	80035da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e98:	4a06      	ldr	r2, [pc, #24]	@ (8002eb4 <HAL_InitTick+0x5c>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e000      	b.n	8002ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_IncTick+0x20>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_IncTick+0x24>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <HAL_IncTick+0x24>)
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000008 	.word	0x20000008
 8002edc:	20018d28 	.word	0x20018d28

08002ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <HAL_GetTick+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20018d28 	.word	0x20018d28

08002ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff ffee 	bl	8002ee0 <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d005      	beq.n	8002f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f12:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <HAL_Delay+0x44>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f1e:	bf00      	nop
 8002f20:	f7ff ffde 	bl	8002ee0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d8f7      	bhi.n	8002f20 <HAL_Delay+0x28>
  {
  }
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000008 	.word	0x20000008

08002f40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e033      	b.n	8002fbe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff faf8 	bl	8002554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d118      	bne.n	8002fb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f86:	f023 0302 	bic.w	r3, r3, #2
 8002f8a:	f043 0202 	orr.w	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f94a 	bl	800322c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fae:	e001      	b.n	8002fb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e113      	b.n	800320c <HAL_ADC_ConfigChannel+0x244>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b09      	cmp	r3, #9
 8002ff2:	d925      	bls.n	8003040 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68d9      	ldr	r1, [r3, #12]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	3b1e      	subs	r3, #30
 800300a:	2207      	movs	r2, #7
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43da      	mvns	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	400a      	ands	r2, r1
 8003018:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68d9      	ldr	r1, [r3, #12]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	4618      	mov	r0, r3
 800302c:	4603      	mov	r3, r0
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4403      	add	r3, r0
 8003032:	3b1e      	subs	r3, #30
 8003034:	409a      	lsls	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	e022      	b.n	8003086 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6919      	ldr	r1, [r3, #16]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	2207      	movs	r2, #7
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	400a      	ands	r2, r1
 8003062:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6919      	ldr	r1, [r3, #16]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	4618      	mov	r0, r3
 8003076:	4603      	mov	r3, r0
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4403      	add	r3, r0
 800307c:	409a      	lsls	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d824      	bhi.n	80030d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	3b05      	subs	r3, #5
 80030a0:	221f      	movs	r2, #31
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	400a      	ands	r2, r1
 80030ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	3b05      	subs	r3, #5
 80030ca:	fa00 f203 	lsl.w	r2, r0, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80030d6:	e04c      	b.n	8003172 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	d824      	bhi.n	800312a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3b23      	subs	r3, #35	@ 0x23
 80030f2:	221f      	movs	r2, #31
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43da      	mvns	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	400a      	ands	r2, r1
 8003100:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	4618      	mov	r0, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	3b23      	subs	r3, #35	@ 0x23
 800311c:	fa00 f203 	lsl.w	r2, r0, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
 8003128:	e023      	b.n	8003172 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	3b41      	subs	r3, #65	@ 0x41
 800313c:	221f      	movs	r2, #31
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43da      	mvns	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	400a      	ands	r2, r1
 800314a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	4618      	mov	r0, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	3b41      	subs	r3, #65	@ 0x41
 8003166:	fa00 f203 	lsl.w	r2, r0, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003172:	4b29      	ldr	r3, [pc, #164]	@ (8003218 <HAL_ADC_ConfigChannel+0x250>)
 8003174:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a28      	ldr	r2, [pc, #160]	@ (800321c <HAL_ADC_ConfigChannel+0x254>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10f      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x1d8>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b12      	cmp	r3, #18
 8003186:	d10b      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1d      	ldr	r2, [pc, #116]	@ (800321c <HAL_ADC_ConfigChannel+0x254>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d12b      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x23a>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003220 <HAL_ADC_ConfigChannel+0x258>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d003      	beq.n	80031bc <HAL_ADC_ConfigChannel+0x1f4>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b11      	cmp	r3, #17
 80031ba:	d122      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a11      	ldr	r2, [pc, #68]	@ (8003220 <HAL_ADC_ConfigChannel+0x258>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d111      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_ADC_ConfigChannel+0x25c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <HAL_ADC_ConfigChannel+0x260>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	0c9a      	lsrs	r2, r3, #18
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031f4:	e002      	b.n	80031fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f9      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40012300 	.word	0x40012300
 800321c:	40012000 	.word	0x40012000
 8003220:	10000012 	.word	0x10000012
 8003224:	20000000 	.word	0x20000000
 8003228:	431bde83 	.word	0x431bde83

0800322c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003234:	4b79      	ldr	r3, [pc, #484]	@ (800341c <ADC_Init+0x1f0>)
 8003236:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	431a      	orrs	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	021a      	lsls	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	4a58      	ldr	r2, [pc, #352]	@ (8003420 <ADC_Init+0x1f4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d022      	beq.n	800330a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6899      	ldr	r1, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6899      	ldr	r1, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	e00f      	b.n	800332a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003328:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0202 	bic.w	r2, r2, #2
 8003338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7e1b      	ldrb	r3, [r3, #24]
 8003344:	005a      	lsls	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01b      	beq.n	8003390 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003366:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003376:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	3b01      	subs	r3, #1
 8003384:	035a      	lsls	r2, r3, #13
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	e007      	b.n	80033a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	051a      	lsls	r2, r3, #20
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6899      	ldr	r1, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033e2:	025a      	lsls	r2, r3, #9
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	029a      	lsls	r2, r3, #10
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40012300 	.word	0x40012300
 8003420:	0f000001 	.word	0x0f000001

08003424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003434:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003440:	4013      	ands	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800344c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003456:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	60d3      	str	r3, [r2, #12]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003470:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <__NVIC_GetPriorityGrouping+0x18>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f003 0307 	and.w	r3, r3, #7
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db0b      	blt.n	80034b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	4907      	ldr	r1, [pc, #28]	@ (80034c0 <__NVIC_EnableIRQ+0x38>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2001      	movs	r0, #1
 80034aa:	fa00 f202 	lsl.w	r2, r0, r2
 80034ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db0a      	blt.n	80034ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	490c      	ldr	r1, [pc, #48]	@ (8003510 <__NVIC_SetPriority+0x4c>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	440b      	add	r3, r1
 80034e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ec:	e00a      	b.n	8003504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4908      	ldr	r1, [pc, #32]	@ (8003514 <__NVIC_SetPriority+0x50>)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3b04      	subs	r3, #4
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	440b      	add	r3, r1
 8003502:	761a      	strb	r2, [r3, #24]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	@ 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f1c3 0307 	rsb	r3, r3, #7
 8003532:	2b04      	cmp	r3, #4
 8003534:	bf28      	it	cs
 8003536:	2304      	movcs	r3, #4
 8003538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3304      	adds	r3, #4
 800353e:	2b06      	cmp	r3, #6
 8003540:	d902      	bls.n	8003548 <NVIC_EncodePriority+0x30>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3b03      	subs	r3, #3
 8003546:	e000      	b.n	800354a <NVIC_EncodePriority+0x32>
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	401a      	ands	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	43d9      	mvns	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	4313      	orrs	r3, r2
         );
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	@ 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003590:	d301      	bcc.n	8003596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003596:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <SysTick_Config+0x40>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359e:	210f      	movs	r1, #15
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f7ff ff8e 	bl	80034c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <SysTick_Config+0x40>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <SysTick_Config+0x40>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff29 	bl	8003424 <__NVIC_SetPriorityGrouping>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ec:	f7ff ff3e 	bl	800346c <__NVIC_GetPriorityGrouping>
 80035f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f7ff ff8e 	bl	8003518 <NVIC_EncodePriority>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff5d 	bl	80034c4 <__NVIC_SetPriority>
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ff31 	bl	8003488 <__NVIC_EnableIRQ>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ffa2 	bl	8003580 <SysTick_Config>
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_DCMI_Start_DMA+0x20>
 8003664:	2302      	movs	r3, #2
 8003666:	e086      	b.n	8003776 <HAL_DCMI_Start_DMA+0x12e>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003686:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0202 	bic.w	r2, r2, #2
 8003696:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ac:	4a34      	ldr	r2, [pc, #208]	@ (8003780 <HAL_DCMI_Start_DMA+0x138>)
 80036ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b4:	4a33      	ldr	r2, [pc, #204]	@ (8003784 <HAL_DCMI_Start_DMA+0x13c>)
 80036b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036bc:	2200      	movs	r2, #0
 80036be:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d2:	d20a      	bcs.n	80036ea <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3328      	adds	r3, #40	@ 0x28
 80036de:	4619      	mov	r1, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	f000 faca 	bl	8003c7c <HAL_DMA_Start_IT>
 80036e8:	e038      	b.n	800375c <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ee:	4a24      	ldr	r2, [pc, #144]	@ (8003780 <HAL_DCMI_Start_DMA+0x138>)
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8003704:	e009      	b.n	800371a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370a:	085a      	lsrs	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	005a      	lsls	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003722:	d2f0      	bcs.n	8003706 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003728:	1e9a      	subs	r2, r3, #2
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3328      	adds	r3, #40	@ 0x28
 800374c:	4619      	mov	r1, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	f000 fde4 	bl	8004324 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	080038d5 	.word	0x080038d5
 8003784:	080039ff 	.word	0x080039ff

08003788 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2204      	movs	r2, #4
 80037a8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2204      	movs	r2, #4
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003880 <HAL_DCMI_IRQHandler+0xf8>)
 80037c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fb1e 	bl	8003e0c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2202      	movs	r2, #2
 80037e0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e6:	f043 0201 	orr.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fa:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <HAL_DCMI_IRQHandler+0xf8>)
 80037fc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fb02 	bl	8003e0c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2210      	movs	r2, #16
 8003818:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f83c 	bl	8003898 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2208      	movs	r2, #8
 8003830:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f83a 	bl	80038ac <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d019      	beq.n	8003876 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d107      	bne.n	8003860 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 021e 	bic.w	r2, r2, #30
 800385e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f825 	bl	80038c0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	080039ff 	.word	0x080039ff

08003884 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d043      	beq.n	8003976 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038fa:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d118      	bne.n	800393a <DCMI_DMAXferCplt+0x66>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d015      	beq.n	800393a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	00da      	lsls	r2, r3, #3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	2200      	movs	r2, #0
 8003928:	4619      	mov	r1, r3
 800392a:	f001 fe43 	bl	80055b4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	1e5a      	subs	r2, r3, #1
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38
 8003938:	e044      	b.n	80039c4 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d13c      	bne.n	80039c4 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	00da      	lsls	r2, r3, #3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4413      	add	r3, r2
 8003962:	2201      	movs	r2, #1
 8003964:	4619      	mov	r1, r3
 8003966:	f001 fe25 	bl	80055b4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	639a      	str	r2, [r3, #56]	@ 0x38
 8003974:	e026      	b.n	80039c4 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d006      	beq.n	8003994 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	e017      	b.n	80039c4 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10f      	bne.n	80039c4 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a8:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ae:	0099      	lsls	r1, r3, #2
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	440a      	add	r2, r1
 80039ba:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d112      	bne.n	80039f6 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d103      	bne.n	80039f6 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0a:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d003      	beq.n	8003a1e <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff ff30 	bl	8003884 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e069      	b.n	8003b12 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe fdf6 	bl	8002644 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7fe fdf3 	bl	8002644 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6819      	ldr	r1, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b2a      	ldr	r3, [pc, #168]	@ (8003b1c <HAL_DCMI_Init+0xf0>)
 8003a72:	400b      	ands	r3, r1
 8003a74:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003a8a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003a96:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003aa2:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8003aae:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003aba:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d112      	bne.n	8003af2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7f1b      	ldrb	r3, [r3, #28]
 8003ad0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7f5b      	ldrb	r3, [r3, #29]
 8003ad6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003ad8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7f9b      	ldrb	r3, [r3, #30]
 8003ade:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8003ae0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7fdb      	ldrb	r3, [r3, #31]
 8003ae8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8003aee:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8003af0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 021e 	orr.w	r2, r2, #30
 8003b00:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	ffe0f007 	.word	0xffe0f007

08003b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7ff f9d8 	bl	8002ee0 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e099      	b.n	8003c70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b5c:	e00f      	b.n	8003b7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b5e:	f7ff f9bf 	bl	8002ee0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d908      	bls.n	8003b7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2203      	movs	r2, #3
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e078      	b.n	8003c70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e8      	bne.n	8003b5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4b38      	ldr	r3, [pc, #224]	@ (8003c78 <HAL_DMA_Init+0x158>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d107      	bne.n	8003be8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	4313      	orrs	r3, r2
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0307 	bic.w	r3, r3, #7
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d117      	bne.n	8003c42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fb01 	bl	800422c <DMA_CheckFifoParam>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2240      	movs	r2, #64	@ 0x40
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e016      	b.n	8003c70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fab8 	bl	80041c0 <DMA_CalcBaseAndBitshift>
 8003c50:	4603      	mov	r3, r0
 8003c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	223f      	movs	r2, #63	@ 0x3f
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	f010803f 	.word	0xf010803f

08003c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_DMA_Start_IT+0x26>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e040      	b.n	8003d24 <HAL_DMA_Start_IT+0xa8>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d12f      	bne.n	8003d16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fa4a 	bl	8004164 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	223f      	movs	r2, #63	@ 0x3f
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0216 	orr.w	r2, r2, #22
 8003cea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0208 	orr.w	r2, r2, #8
 8003d02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e005      	b.n	8003d22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d3a:	f7ff f8d1 	bl	8002ee0 <HAL_GetTick>
 8003d3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d008      	beq.n	8003d5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2280      	movs	r2, #128	@ 0x80
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e052      	b.n	8003e04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0216 	bic.w	r2, r2, #22
 8003d6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d103      	bne.n	8003d8e <HAL_DMA_Abort+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0208 	bic.w	r2, r2, #8
 8003d9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dae:	e013      	b.n	8003dd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003db0:	f7ff f896 	bl	8002ee0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d90c      	bls.n	8003dd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e015      	b.n	8003e04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e4      	bne.n	8003db0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dea:	223f      	movs	r2, #63	@ 0x3f
 8003dec:	409a      	lsls	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d004      	beq.n	8003e2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2280      	movs	r2, #128	@ 0x80
 8003e24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e00c      	b.n	8003e44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2205      	movs	r2, #5
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e5c:	4b8e      	ldr	r3, [pc, #568]	@ (8004098 <HAL_DMA_IRQHandler+0x248>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a8e      	ldr	r2, [pc, #568]	@ (800409c <HAL_DMA_IRQHandler+0x24c>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01a      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0204 	bic.w	r2, r2, #4
 8003ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	f043 0201 	orr.w	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d012      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eea:	f043 0202 	orr.w	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d012      	beq.n	8003f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	2204      	movs	r2, #4
 8003f16:	409a      	lsls	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f043 0204 	orr.w	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d043      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d03c      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d018      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d108      	bne.n	8003f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d024      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
 8003f7e:	e01f      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01b      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e016      	b.n	8003fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d107      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0208 	bic.w	r2, r2, #8
 8003fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 808f 	beq.w	80040f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8087 	beq.w	80040f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d136      	bne.n	8004068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0216 	bic.w	r2, r2, #22
 8004008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <HAL_DMA_IRQHandler+0x1da>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0208 	bic.w	r2, r2, #8
 8004038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403e:	223f      	movs	r2, #63	@ 0x3f
 8004040:	409a      	lsls	r2, r3
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405a:	2b00      	cmp	r3, #0
 800405c:	d07e      	beq.n	800415c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
        }
        return;
 8004066:	e079      	b.n	800415c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01d      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10d      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	2b00      	cmp	r3, #0
 800408a:	d031      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
 8004094:	e02c      	b.n	80040f0 <HAL_DMA_IRQHandler+0x2a0>
 8004096:	bf00      	nop
 8004098:	20000000 	.word	0x20000000
 800409c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d023      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
 80040b0:	e01e      	b.n	80040f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10f      	bne.n	80040e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0210 	bic.w	r2, r2, #16
 80040ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d032      	beq.n	800415e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d022      	beq.n	800414a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2205      	movs	r2, #5
 8004108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3301      	adds	r3, #1
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	429a      	cmp	r2, r3
 8004126:	d307      	bcc.n	8004138 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f2      	bne.n	800411c <HAL_DMA_IRQHandler+0x2cc>
 8004136:	e000      	b.n	800413a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004138:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
 800415a:	e000      	b.n	800415e <HAL_DMA_IRQHandler+0x30e>
        return;
 800415c:	bf00      	nop
    }
  }
}
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004180:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b40      	cmp	r3, #64	@ 0x40
 8004190:	d108      	bne.n	80041a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041a2:	e007      	b.n	80041b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	3b10      	subs	r3, #16
 80041d0:	4a14      	ldr	r2, [pc, #80]	@ (8004224 <DMA_CalcBaseAndBitshift+0x64>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041da:	4a13      	ldr	r2, [pc, #76]	@ (8004228 <DMA_CalcBaseAndBitshift+0x68>)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d909      	bls.n	8004202 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	1d1a      	adds	r2, r3, #4
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8004200:	e007      	b.n	8004212 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	aaaaaaab 	.word	0xaaaaaaab
 8004228:	0800d1e8 	.word	0x0800d1e8

0800422c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d11f      	bne.n	8004286 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d856      	bhi.n	80042fa <DMA_CheckFifoParam+0xce>
 800424c:	a201      	add	r2, pc, #4	@ (adr r2, 8004254 <DMA_CheckFifoParam+0x28>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004265 	.word	0x08004265
 8004258:	08004277 	.word	0x08004277
 800425c:	08004265 	.word	0x08004265
 8004260:	080042fb 	.word	0x080042fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d046      	beq.n	80042fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004274:	e043      	b.n	80042fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800427e:	d140      	bne.n	8004302 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004284:	e03d      	b.n	8004302 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428e:	d121      	bne.n	80042d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d837      	bhi.n	8004306 <DMA_CheckFifoParam+0xda>
 8004296:	a201      	add	r2, pc, #4	@ (adr r2, 800429c <DMA_CheckFifoParam+0x70>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042ad 	.word	0x080042ad
 80042a0:	080042b3 	.word	0x080042b3
 80042a4:	080042ad 	.word	0x080042ad
 80042a8:	080042c5 	.word	0x080042c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e030      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d025      	beq.n	800430a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c2:	e022      	b.n	800430a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042cc:	d11f      	bne.n	800430e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042d2:	e01c      	b.n	800430e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d903      	bls.n	80042e2 <DMA_CheckFifoParam+0xb6>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d003      	beq.n	80042e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042e0:	e018      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
      break;
 80042e6:	e015      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00e      	beq.n	8004312 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e00b      	b.n	8004312 <DMA_CheckFifoParam+0xe6>
      break;
 80042fa:	bf00      	nop
 80042fc:	e00a      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
      break;
 80042fe:	bf00      	nop
 8004300:	e008      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
      break;
 8004302:	bf00      	nop
 8004304:	e006      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
 8004308:	e004      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
      break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
      break;   
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <DMA_CheckFifoParam+0xe8>
      break;
 8004312:	bf00      	nop
    }
  } 
  
  return status; 
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop

08004324 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b80      	cmp	r3, #128	@ 0x80
 800433c:	d106      	bne.n	800434c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004344:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f001 b911 	b.w	800556e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	@ 0x40
 8004368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f001 b8ff 	b.w	800556e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800437a:	2302      	movs	r3, #2
 800437c:	f001 b8f7 	b.w	800556e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	f041 80e5 	bne.w	8005560 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80043b2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f001 f910 	bl	80055e8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004604 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d960      	bls.n	8004496 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a8b      	ldr	r2, [pc, #556]	@ (8004608 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d057      	beq.n	800448e <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a8a      	ldr	r2, [pc, #552]	@ (800460c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d050      	beq.n	800448a <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a88      	ldr	r2, [pc, #544]	@ (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d049      	beq.n	8004486 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a87      	ldr	r2, [pc, #540]	@ (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d042      	beq.n	8004482 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a85      	ldr	r2, [pc, #532]	@ (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d03a      	beq.n	800447c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a84      	ldr	r2, [pc, #528]	@ (800461c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d032      	beq.n	8004476 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a82      	ldr	r2, [pc, #520]	@ (8004620 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d02a      	beq.n	8004470 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a81      	ldr	r2, [pc, #516]	@ (8004624 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d022      	beq.n	800446a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7f      	ldr	r2, [pc, #508]	@ (8004628 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01a      	beq.n	8004464 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7e      	ldr	r2, [pc, #504]	@ (800462c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d012      	beq.n	800445e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a7c      	ldr	r2, [pc, #496]	@ (8004630 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00a      	beq.n	8004458 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a7b      	ldr	r2, [pc, #492]	@ (8004634 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d102      	bne.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800444c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004450:	e01e      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004452:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004456:	e01b      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004458:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800445c:	e018      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800445e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004462:	e015      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004464:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004468:	e012      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800446a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800446e:	e00f      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004470:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004474:	e00c      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004476:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800447a:	e009      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800447c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004480:	e006      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004482:	2320      	movs	r3, #32
 8004484:	e004      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004486:	2320      	movs	r3, #32
 8004488:	e002      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800448a:	2320      	movs	r3, #32
 800448c:	e000      	b.n	8004490 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800448e:	2320      	movs	r3, #32
 8004490:	4a69      	ldr	r2, [pc, #420]	@ (8004638 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004492:	60d3      	str	r3, [r2, #12]
 8004494:	e14f      	b.n	8004736 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	4b67      	ldr	r3, [pc, #412]	@ (800463c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800449e:	429a      	cmp	r2, r3
 80044a0:	d960      	bls.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a58      	ldr	r2, [pc, #352]	@ (8004608 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d057      	beq.n	800455c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a56      	ldr	r2, [pc, #344]	@ (800460c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d050      	beq.n	8004558 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a55      	ldr	r2, [pc, #340]	@ (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d049      	beq.n	8004554 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a53      	ldr	r2, [pc, #332]	@ (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d042      	beq.n	8004550 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a52      	ldr	r2, [pc, #328]	@ (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d03a      	beq.n	800454a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a50      	ldr	r2, [pc, #320]	@ (800461c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d032      	beq.n	8004544 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a4f      	ldr	r2, [pc, #316]	@ (8004620 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d02a      	beq.n	800453e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a4d      	ldr	r2, [pc, #308]	@ (8004624 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d022      	beq.n	8004538 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004628 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d01a      	beq.n	8004532 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a4a      	ldr	r2, [pc, #296]	@ (800462c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d012      	beq.n	800452c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a49      	ldr	r2, [pc, #292]	@ (8004630 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00a      	beq.n	8004526 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a47      	ldr	r2, [pc, #284]	@ (8004634 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d102      	bne.n	8004520 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800451a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800451e:	e01e      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004524:	e01b      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004526:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800452a:	e018      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800452c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004530:	e015      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004532:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004536:	e012      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004538:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800453c:	e00f      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800453e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004542:	e00c      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004544:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004548:	e009      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800454a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800454e:	e006      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004550:	2320      	movs	r3, #32
 8004552:	e004      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004554:	2320      	movs	r3, #32
 8004556:	e002      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004558:	2320      	movs	r3, #32
 800455a:	e000      	b.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800455c:	2320      	movs	r3, #32
 800455e:	4a36      	ldr	r2, [pc, #216]	@ (8004638 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004560:	6093      	str	r3, [r2, #8]
 8004562:	e0e8      	b.n	8004736 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	4b35      	ldr	r3, [pc, #212]	@ (8004640 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800456c:	429a      	cmp	r2, r3
 800456e:	f240 8082 	bls.w	8004676 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a24      	ldr	r2, [pc, #144]	@ (8004608 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d078      	beq.n	800466e <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a22      	ldr	r2, [pc, #136]	@ (800460c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d071      	beq.n	800466a <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d06a      	beq.n	8004666 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1f      	ldr	r2, [pc, #124]	@ (8004614 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d063      	beq.n	8004662 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1e      	ldr	r2, [pc, #120]	@ (8004618 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d05b      	beq.n	800465c <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d053      	beq.n	8004656 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004620 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d04b      	beq.n	8004650 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a19      	ldr	r2, [pc, #100]	@ (8004624 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d043      	beq.n	800464a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d03b      	beq.n	8004644 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a16      	ldr	r2, [pc, #88]	@ (800462c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d012      	beq.n	80045fc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a15      	ldr	r2, [pc, #84]	@ (8004630 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00a      	beq.n	80045f6 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a13      	ldr	r2, [pc, #76]	@ (8004634 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d102      	bne.n	80045f0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80045ea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045ee:	e03f      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045f4:	e03c      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045fa:	e039      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80045fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004600:	e036      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004602:	bf00      	nop
 8004604:	40026458 	.word	0x40026458
 8004608:	40026010 	.word	0x40026010
 800460c:	40026410 	.word	0x40026410
 8004610:	40026070 	.word	0x40026070
 8004614:	40026470 	.word	0x40026470
 8004618:	40026028 	.word	0x40026028
 800461c:	40026428 	.word	0x40026428
 8004620:	40026088 	.word	0x40026088
 8004624:	40026488 	.word	0x40026488
 8004628:	40026040 	.word	0x40026040
 800462c:	40026440 	.word	0x40026440
 8004630:	400260a0 	.word	0x400260a0
 8004634:	400264a0 	.word	0x400264a0
 8004638:	40026400 	.word	0x40026400
 800463c:	400260b8 	.word	0x400260b8
 8004640:	40026058 	.word	0x40026058
 8004644:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004648:	e012      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800464a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800464e:	e00f      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004650:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004654:	e00c      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004656:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800465a:	e009      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800465c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004660:	e006      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004662:	2320      	movs	r3, #32
 8004664:	e004      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004666:	2320      	movs	r3, #32
 8004668:	e002      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800466a:	2320      	movs	r3, #32
 800466c:	e000      	b.n	8004670 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800466e:	2320      	movs	r3, #32
 8004670:	4a8c      	ldr	r2, [pc, #560]	@ (80048a4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004672:	60d3      	str	r3, [r2, #12]
 8004674:	e05f      	b.n	8004736 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a8b      	ldr	r2, [pc, #556]	@ (80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d057      	beq.n	8004730 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a89      	ldr	r2, [pc, #548]	@ (80048ac <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d050      	beq.n	800472c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a88      	ldr	r2, [pc, #544]	@ (80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d049      	beq.n	8004728 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a86      	ldr	r2, [pc, #536]	@ (80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d042      	beq.n	8004724 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a85      	ldr	r2, [pc, #532]	@ (80048b8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d03a      	beq.n	800471e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a83      	ldr	r2, [pc, #524]	@ (80048bc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d032      	beq.n	8004718 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a82      	ldr	r2, [pc, #520]	@ (80048c0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02a      	beq.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a80      	ldr	r2, [pc, #512]	@ (80048c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d022      	beq.n	800470c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a7f      	ldr	r2, [pc, #508]	@ (80048c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d01a      	beq.n	8004706 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a7d      	ldr	r2, [pc, #500]	@ (80048cc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d012      	beq.n	8004700 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7c      	ldr	r2, [pc, #496]	@ (80048d0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00a      	beq.n	80046fa <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a7a      	ldr	r2, [pc, #488]	@ (80048d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d102      	bne.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80046ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046f2:	e01e      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80046f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046f8:	e01b      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80046fa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046fe:	e018      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004700:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004704:	e015      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004706:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800470a:	e012      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800470c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004710:	e00f      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004712:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004716:	e00c      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004718:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800471c:	e009      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800471e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004722:	e006      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004724:	2320      	movs	r3, #32
 8004726:	e004      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004728:	2320      	movs	r3, #32
 800472a:	e002      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800472c:	2320      	movs	r3, #32
 800472e:	e000      	b.n	8004732 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004730:	2320      	movs	r3, #32
 8004732:	4a5c      	ldr	r2, [pc, #368]	@ (80048a4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004734:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	4b66      	ldr	r3, [pc, #408]	@ (80048d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800473e:	429a      	cmp	r2, r3
 8004740:	d960      	bls.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a58      	ldr	r2, [pc, #352]	@ (80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d057      	beq.n	80047fc <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a56      	ldr	r2, [pc, #344]	@ (80048ac <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d050      	beq.n	80047f8 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a55      	ldr	r2, [pc, #340]	@ (80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d049      	beq.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a53      	ldr	r2, [pc, #332]	@ (80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d042      	beq.n	80047f0 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a52      	ldr	r2, [pc, #328]	@ (80048b8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d03a      	beq.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a50      	ldr	r2, [pc, #320]	@ (80048bc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d032      	beq.n	80047e4 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a4f      	ldr	r2, [pc, #316]	@ (80048c0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d02a      	beq.n	80047de <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a4d      	ldr	r2, [pc, #308]	@ (80048c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4c      	ldr	r2, [pc, #304]	@ (80048c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01a      	beq.n	80047d2 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a4a      	ldr	r2, [pc, #296]	@ (80048cc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d012      	beq.n	80047cc <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a49      	ldr	r2, [pc, #292]	@ (80048d0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00a      	beq.n	80047c6 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a47      	ldr	r2, [pc, #284]	@ (80048d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d102      	bne.n	80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80047ba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80047be:	e01e      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047c0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80047c4:	e01b      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047c6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80047ca:	e018      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80047d0:	e015      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047d2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80047d6:	e012      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047dc:	e00f      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047e2:	e00c      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047e8:	e009      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047ee:	e006      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047f0:	2310      	movs	r3, #16
 80047f2:	e004      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047f4:	2310      	movs	r3, #16
 80047f6:	e002      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047f8:	2310      	movs	r3, #16
 80047fa:	e000      	b.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80047fc:	2310      	movs	r3, #16
 80047fe:	4a37      	ldr	r2, [pc, #220]	@ (80048dc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004800:	60d3      	str	r3, [r2, #12]
 8004802:	e14f      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	4b35      	ldr	r3, [pc, #212]	@ (80048e0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800480c:	429a      	cmp	r2, r3
 800480e:	f240 8082 	bls.w	8004916 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a24      	ldr	r2, [pc, #144]	@ (80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d078      	beq.n	800490e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a22      	ldr	r2, [pc, #136]	@ (80048ac <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d071      	beq.n	800490a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a21      	ldr	r2, [pc, #132]	@ (80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d06a      	beq.n	8004906 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1f      	ldr	r2, [pc, #124]	@ (80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d063      	beq.n	8004902 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1e      	ldr	r2, [pc, #120]	@ (80048b8 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d05b      	beq.n	80048fc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1c      	ldr	r2, [pc, #112]	@ (80048bc <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d053      	beq.n	80048f6 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1b      	ldr	r2, [pc, #108]	@ (80048c0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04b      	beq.n	80048f0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a19      	ldr	r2, [pc, #100]	@ (80048c4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d043      	beq.n	80048ea <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a18      	ldr	r2, [pc, #96]	@ (80048c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d03b      	beq.n	80048e4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a16      	ldr	r2, [pc, #88]	@ (80048cc <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d012      	beq.n	800489c <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a15      	ldr	r2, [pc, #84]	@ (80048d0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00a      	beq.n	8004896 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a13      	ldr	r2, [pc, #76]	@ (80048d4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d102      	bne.n	8004890 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800488a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800488e:	e03f      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004890:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004894:	e03c      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004896:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800489a:	e039      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800489c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80048a0:	e036      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80048a2:	bf00      	nop
 80048a4:	40026000 	.word	0x40026000
 80048a8:	40026010 	.word	0x40026010
 80048ac:	40026410 	.word	0x40026410
 80048b0:	40026070 	.word	0x40026070
 80048b4:	40026470 	.word	0x40026470
 80048b8:	40026028 	.word	0x40026028
 80048bc:	40026428 	.word	0x40026428
 80048c0:	40026088 	.word	0x40026088
 80048c4:	40026488 	.word	0x40026488
 80048c8:	40026040 	.word	0x40026040
 80048cc:	40026440 	.word	0x40026440
 80048d0:	400260a0 	.word	0x400260a0
 80048d4:	400264a0 	.word	0x400264a0
 80048d8:	40026458 	.word	0x40026458
 80048dc:	40026400 	.word	0x40026400
 80048e0:	400260b8 	.word	0x400260b8
 80048e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80048e8:	e012      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80048ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048ee:	e00f      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80048f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048f4:	e00c      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80048f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048fa:	e009      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80048fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004900:	e006      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004902:	2310      	movs	r3, #16
 8004904:	e004      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004906:	2310      	movs	r3, #16
 8004908:	e002      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800490a:	2310      	movs	r3, #16
 800490c:	e000      	b.n	8004910 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800490e:	2310      	movs	r3, #16
 8004910:	4a8c      	ldr	r2, [pc, #560]	@ (8004b44 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004912:	6093      	str	r3, [r2, #8]
 8004914:	e0c6      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	4b8a      	ldr	r3, [pc, #552]	@ (8004b48 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800491e:	429a      	cmp	r2, r3
 8004920:	d960      	bls.n	80049e4 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a89      	ldr	r2, [pc, #548]	@ (8004b4c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d057      	beq.n	80049dc <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a87      	ldr	r2, [pc, #540]	@ (8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d050      	beq.n	80049d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a86      	ldr	r2, [pc, #536]	@ (8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d049      	beq.n	80049d4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a84      	ldr	r2, [pc, #528]	@ (8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d042      	beq.n	80049d0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a83      	ldr	r2, [pc, #524]	@ (8004b5c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d03a      	beq.n	80049ca <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a81      	ldr	r2, [pc, #516]	@ (8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d032      	beq.n	80049c4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a80      	ldr	r2, [pc, #512]	@ (8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02a      	beq.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a7e      	ldr	r2, [pc, #504]	@ (8004b68 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7d      	ldr	r2, [pc, #500]	@ (8004b6c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01a      	beq.n	80049b2 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a7b      	ldr	r2, [pc, #492]	@ (8004b70 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d012      	beq.n	80049ac <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a7a      	ldr	r2, [pc, #488]	@ (8004b74 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00a      	beq.n	80049a6 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a78      	ldr	r2, [pc, #480]	@ (8004b78 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d102      	bne.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800499a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800499e:	e01e      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80049a4:	e01b      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049aa:	e018      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049b0:	e015      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80049b6:	e012      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049bc:	e00f      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049c2:	e00c      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049c8:	e009      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ce:	e006      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049d0:	2310      	movs	r3, #16
 80049d2:	e004      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049d4:	2310      	movs	r3, #16
 80049d6:	e002      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049d8:	2310      	movs	r3, #16
 80049da:	e000      	b.n	80049de <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80049dc:	2310      	movs	r3, #16
 80049de:	4a67      	ldr	r2, [pc, #412]	@ (8004b7c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80049e0:	60d3      	str	r3, [r2, #12]
 80049e2:	e05f      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a58      	ldr	r2, [pc, #352]	@ (8004b4c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d057      	beq.n	8004a9e <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a57      	ldr	r2, [pc, #348]	@ (8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d050      	beq.n	8004a9a <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a55      	ldr	r2, [pc, #340]	@ (8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d049      	beq.n	8004a96 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a54      	ldr	r2, [pc, #336]	@ (8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d042      	beq.n	8004a92 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a52      	ldr	r2, [pc, #328]	@ (8004b5c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d03a      	beq.n	8004a8c <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a51      	ldr	r2, [pc, #324]	@ (8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d032      	beq.n	8004a86 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a4f      	ldr	r2, [pc, #316]	@ (8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02a      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004b68 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a4c      	ldr	r2, [pc, #304]	@ (8004b6c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01a      	beq.n	8004a74 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a4b      	ldr	r2, [pc, #300]	@ (8004b70 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d012      	beq.n	8004a6e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a49      	ldr	r2, [pc, #292]	@ (8004b74 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00a      	beq.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a48      	ldr	r2, [pc, #288]	@ (8004b78 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d102      	bne.n	8004a62 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8004a5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a60:	e01e      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a62:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a66:	e01b      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a6c:	e018      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a6e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a72:	e015      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a78:	e012      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a7e:	e00f      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a84:	e00c      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a8a:	e009      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a90:	e006      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a92:	2310      	movs	r3, #16
 8004a94:	e004      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a96:	2310      	movs	r3, #16
 8004a98:	e002      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	e000      	b.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	4a36      	ldr	r2, [pc, #216]	@ (8004b7c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004aa2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b35      	ldr	r3, [pc, #212]	@ (8004b80 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8004aac:	429a      	cmp	r2, r3
 8004aae:	f240 8082 	bls.w	8004bb6 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a25      	ldr	r2, [pc, #148]	@ (8004b4c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d078      	beq.n	8004bae <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a23      	ldr	r2, [pc, #140]	@ (8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d071      	beq.n	8004baa <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a22      	ldr	r2, [pc, #136]	@ (8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d06a      	beq.n	8004ba6 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a20      	ldr	r2, [pc, #128]	@ (8004b58 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d063      	beq.n	8004ba2 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1f      	ldr	r2, [pc, #124]	@ (8004b5c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d05b      	beq.n	8004b9c <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b60 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d053      	beq.n	8004b96 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04b      	beq.n	8004b90 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b68 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d043      	beq.n	8004b8a <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a19      	ldr	r2, [pc, #100]	@ (8004b6c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d03b      	beq.n	8004b84 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a17      	ldr	r2, [pc, #92]	@ (8004b70 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d012      	beq.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a16      	ldr	r2, [pc, #88]	@ (8004b74 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00a      	beq.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d102      	bne.n	8004b30 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8004b2a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004b2e:	e03f      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b34:	e03c      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b36:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004b3a:	e039      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004b40:	e036      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b42:	bf00      	nop
 8004b44:	40026400 	.word	0x40026400
 8004b48:	40026058 	.word	0x40026058
 8004b4c:	40026010 	.word	0x40026010
 8004b50:	40026410 	.word	0x40026410
 8004b54:	40026070 	.word	0x40026070
 8004b58:	40026470 	.word	0x40026470
 8004b5c:	40026028 	.word	0x40026028
 8004b60:	40026428 	.word	0x40026428
 8004b64:	40026088 	.word	0x40026088
 8004b68:	40026488 	.word	0x40026488
 8004b6c:	40026040 	.word	0x40026040
 8004b70:	40026440 	.word	0x40026440
 8004b74:	400260a0 	.word	0x400260a0
 8004b78:	400264a0 	.word	0x400264a0
 8004b7c:	40026000 	.word	0x40026000
 8004b80:	40026458 	.word	0x40026458
 8004b84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004b88:	e012      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b8e:	e00f      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b94:	e00c      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b9a:	e009      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ba0:	e006      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	e004      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	e002      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004baa:	2308      	movs	r3, #8
 8004bac:	e000      	b.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8004bae:	2308      	movs	r3, #8
 8004bb0:	4a8c      	ldr	r2, [pc, #560]	@ (8004de4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004bb2:	60d3      	str	r3, [r2, #12]
 8004bb4:	e14e      	b.n	8004e54 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4b8a      	ldr	r3, [pc, #552]	@ (8004de8 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d960      	bls.n	8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a89      	ldr	r2, [pc, #548]	@ (8004dec <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d057      	beq.n	8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a87      	ldr	r2, [pc, #540]	@ (8004df0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d050      	beq.n	8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a86      	ldr	r2, [pc, #536]	@ (8004df4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d049      	beq.n	8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a84      	ldr	r2, [pc, #528]	@ (8004df8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d042      	beq.n	8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a83      	ldr	r2, [pc, #524]	@ (8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d03a      	beq.n	8004c6a <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a81      	ldr	r2, [pc, #516]	@ (8004e00 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d032      	beq.n	8004c64 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a80      	ldr	r2, [pc, #512]	@ (8004e04 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d02a      	beq.n	8004c5e <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a7e      	ldr	r2, [pc, #504]	@ (8004e08 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d022      	beq.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a7d      	ldr	r2, [pc, #500]	@ (8004e0c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d01a      	beq.n	8004c52 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a7b      	ldr	r2, [pc, #492]	@ (8004e10 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d012      	beq.n	8004c4c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7a      	ldr	r2, [pc, #488]	@ (8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00a      	beq.n	8004c46 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a78      	ldr	r2, [pc, #480]	@ (8004e18 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d102      	bne.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8004c3a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c3e:	e01e      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c44:	e01b      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c46:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c4a:	e018      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c50:	e015      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c52:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c56:	e012      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c5c:	e00f      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c62:	e00c      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c68:	e009      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c6e:	e006      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c70:	2308      	movs	r3, #8
 8004c72:	e004      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c74:	2308      	movs	r3, #8
 8004c76:	e002      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	e000      	b.n	8004c7e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	4a59      	ldr	r2, [pc, #356]	@ (8004de4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004c80:	6093      	str	r3, [r2, #8]
 8004c82:	e0e7      	b.n	8004e54 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b64      	ldr	r3, [pc, #400]	@ (8004e1c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d960      	bls.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a55      	ldr	r2, [pc, #340]	@ (8004dec <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d057      	beq.n	8004d4a <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a54      	ldr	r2, [pc, #336]	@ (8004df0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d050      	beq.n	8004d46 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a52      	ldr	r2, [pc, #328]	@ (8004df4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d049      	beq.n	8004d42 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a51      	ldr	r2, [pc, #324]	@ (8004df8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d042      	beq.n	8004d3e <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d03a      	beq.n	8004d38 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8004e00 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d032      	beq.n	8004d32 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8004e04 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02a      	beq.n	8004d2c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a4b      	ldr	r2, [pc, #300]	@ (8004e08 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d022      	beq.n	8004d26 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a49      	ldr	r2, [pc, #292]	@ (8004e0c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01a      	beq.n	8004d20 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a48      	ldr	r2, [pc, #288]	@ (8004e10 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d012      	beq.n	8004d1a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a46      	ldr	r2, [pc, #280]	@ (8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00a      	beq.n	8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a45      	ldr	r2, [pc, #276]	@ (8004e18 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d102      	bne.n	8004d0e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8004d08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d0c:	e01e      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d12:	e01b      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d18:	e018      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d1a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d1e:	e015      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d24:	e012      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d2a:	e00f      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d30:	e00c      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d36:	e009      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d3c:	e006      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	e004      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d42:	2308      	movs	r3, #8
 8004d44:	e002      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d46:	2308      	movs	r3, #8
 8004d48:	e000      	b.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	4a34      	ldr	r2, [pc, #208]	@ (8004e20 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8004d4e:	60d3      	str	r3, [r2, #12]
 8004d50:	e080      	b.n	8004e54 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a25      	ldr	r2, [pc, #148]	@ (8004dec <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d078      	beq.n	8004e4e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a23      	ldr	r2, [pc, #140]	@ (8004df0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d071      	beq.n	8004e4a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a22      	ldr	r2, [pc, #136]	@ (8004df4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d06a      	beq.n	8004e46 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a20      	ldr	r2, [pc, #128]	@ (8004df8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d063      	beq.n	8004e42 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d05b      	beq.n	8004e3c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d053      	beq.n	8004e36 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1c      	ldr	r2, [pc, #112]	@ (8004e04 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d04b      	beq.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004e08 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d043      	beq.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a19      	ldr	r2, [pc, #100]	@ (8004e0c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d03b      	beq.n	8004e24 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a17      	ldr	r2, [pc, #92]	@ (8004e10 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d012      	beq.n	8004ddc <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a16      	ldr	r2, [pc, #88]	@ (8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a14      	ldr	r2, [pc, #80]	@ (8004e18 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d102      	bne.n	8004dd0 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8004dca:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dce:	e03f      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dd4:	e03c      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004dd6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dda:	e039      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004ddc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004de0:	e036      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004de2:	bf00      	nop
 8004de4:	40026400 	.word	0x40026400
 8004de8:	400260b8 	.word	0x400260b8
 8004dec:	40026010 	.word	0x40026010
 8004df0:	40026410 	.word	0x40026410
 8004df4:	40026070 	.word	0x40026070
 8004df8:	40026470 	.word	0x40026470
 8004dfc:	40026028 	.word	0x40026028
 8004e00:	40026428 	.word	0x40026428
 8004e04:	40026088 	.word	0x40026088
 8004e08:	40026488 	.word	0x40026488
 8004e0c:	40026040 	.word	0x40026040
 8004e10:	40026440 	.word	0x40026440
 8004e14:	400260a0 	.word	0x400260a0
 8004e18:	400264a0 	.word	0x400264a0
 8004e1c:	40026058 	.word	0x40026058
 8004e20:	40026000 	.word	0x40026000
 8004e24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e28:	e012      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004e2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e2e:	e00f      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004e30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e34:	e00c      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004e36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e3a:	e009      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004e3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e40:	e006      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004e42:	2308      	movs	r3, #8
 8004e44:	e004      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004e46:	2308      	movs	r3, #8
 8004e48:	e002      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	e000      	b.n	8004e50 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8004e4e:	2308      	movs	r3, #8
 8004e50:	4a8a      	ldr	r2, [pc, #552]	@ (800507c <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004e52:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b89      	ldr	r3, [pc, #548]	@ (8005080 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d960      	bls.n	8004f22 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a87      	ldr	r2, [pc, #540]	@ (8005084 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d057      	beq.n	8004f1a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a86      	ldr	r2, [pc, #536]	@ (8005088 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d050      	beq.n	8004f16 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a84      	ldr	r2, [pc, #528]	@ (800508c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d049      	beq.n	8004f12 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a83      	ldr	r2, [pc, #524]	@ (8005090 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d042      	beq.n	8004f0e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a81      	ldr	r2, [pc, #516]	@ (8005094 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03a      	beq.n	8004f08 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a80      	ldr	r2, [pc, #512]	@ (8005098 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d032      	beq.n	8004f02 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a7e      	ldr	r2, [pc, #504]	@ (800509c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02a      	beq.n	8004efc <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a7d      	ldr	r2, [pc, #500]	@ (80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d022      	beq.n	8004ef6 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a7b      	ldr	r2, [pc, #492]	@ (80050a4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01a      	beq.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a7a      	ldr	r2, [pc, #488]	@ (80050a8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d012      	beq.n	8004eea <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a78      	ldr	r2, [pc, #480]	@ (80050ac <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a77      	ldr	r2, [pc, #476]	@ (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d102      	bne.n	8004ede <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8004ed8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004edc:	e01e      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004ede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ee2:	e01b      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004ee4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004ee8:	e018      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004eea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004eee:	e015      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004ef0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004ef4:	e012      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004efa:	e00f      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f00:	e00c      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004f02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f06:	e009      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f0c:	e006      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004f0e:	2304      	movs	r3, #4
 8004f10:	e004      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004f12:	2304      	movs	r3, #4
 8004f14:	e002      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e000      	b.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8004f1a:	2304      	movs	r3, #4
 8004f1c:	4a65      	ldr	r2, [pc, #404]	@ (80050b4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004f1e:	60d3      	str	r3, [r2, #12]
 8004f20:	e150      	b.n	80051c4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	4b63      	ldr	r3, [pc, #396]	@ (80050b8 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d960      	bls.n	8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a54      	ldr	r2, [pc, #336]	@ (8005084 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d057      	beq.n	8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a52      	ldr	r2, [pc, #328]	@ (8005088 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d050      	beq.n	8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a51      	ldr	r2, [pc, #324]	@ (800508c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d049      	beq.n	8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a4f      	ldr	r2, [pc, #316]	@ (8005090 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d042      	beq.n	8004fdc <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8005094 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d03a      	beq.n	8004fd6 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a4c      	ldr	r2, [pc, #304]	@ (8005098 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d032      	beq.n	8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a4b      	ldr	r2, [pc, #300]	@ (800509c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d02a      	beq.n	8004fca <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a49      	ldr	r2, [pc, #292]	@ (80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a48      	ldr	r2, [pc, #288]	@ (80050a4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01a      	beq.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a46      	ldr	r2, [pc, #280]	@ (80050a8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d012      	beq.n	8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a45      	ldr	r2, [pc, #276]	@ (80050ac <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a43      	ldr	r2, [pc, #268]	@ (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d102      	bne.n	8004fac <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8004fa6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004faa:	e01e      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fb0:	e01b      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fb2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004fb6:	e018      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fb8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004fbc:	e015      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fbe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004fc2:	e012      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fc8:	e00f      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fce:	e00c      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fd4:	e009      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fda:	e006      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	e004      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	e002      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	e000      	b.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	4a32      	ldr	r2, [pc, #200]	@ (80050b4 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8004fec:	6093      	str	r3, [r2, #8]
 8004fee:	e0e9      	b.n	80051c4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	f240 8083 	bls.w	8005104 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a20      	ldr	r2, [pc, #128]	@ (8005084 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d079      	beq.n	80050fc <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1e      	ldr	r2, [pc, #120]	@ (8005088 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d072      	beq.n	80050f8 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1d      	ldr	r2, [pc, #116]	@ (800508c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d06b      	beq.n	80050f4 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1b      	ldr	r2, [pc, #108]	@ (8005090 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d064      	beq.n	80050f0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d05c      	beq.n	80050ea <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d054      	beq.n	80050e4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a17      	ldr	r2, [pc, #92]	@ (800509c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04c      	beq.n	80050de <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d044      	beq.n	80050d8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a14      	ldr	r2, [pc, #80]	@ (80050a4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d03c      	beq.n	80050d2 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a12      	ldr	r2, [pc, #72]	@ (80050a8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d034      	beq.n	80050cc <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a11      	ldr	r2, [pc, #68]	@ (80050ac <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d02c      	beq.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0f      	ldr	r2, [pc, #60]	@ (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d124      	bne.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8005076:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800507a:	e040      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800507c:	40026000 	.word	0x40026000
 8005080:	40026458 	.word	0x40026458
 8005084:	40026010 	.word	0x40026010
 8005088:	40026410 	.word	0x40026410
 800508c:	40026070 	.word	0x40026070
 8005090:	40026470 	.word	0x40026470
 8005094:	40026028 	.word	0x40026028
 8005098:	40026428 	.word	0x40026428
 800509c:	40026088 	.word	0x40026088
 80050a0:	40026488 	.word	0x40026488
 80050a4:	40026040 	.word	0x40026040
 80050a8:	40026440 	.word	0x40026440
 80050ac:	400260a0 	.word	0x400260a0
 80050b0:	400264a0 	.word	0x400264a0
 80050b4:	40026400 	.word	0x40026400
 80050b8:	400260b8 	.word	0x400260b8
 80050bc:	40026058 	.word	0x40026058
 80050c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050c4:	e01b      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050c6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050ca:	e018      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050d0:	e015      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050d2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050d6:	e012      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050dc:	e00f      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050e2:	e00c      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050e8:	e009      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050ee:	e006      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050f0:	2304      	movs	r3, #4
 80050f2:	e004      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050f4:	2304      	movs	r3, #4
 80050f6:	e002      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050f8:	2304      	movs	r3, #4
 80050fa:	e000      	b.n	80050fe <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80050fc:	2304      	movs	r3, #4
 80050fe:	4a8b      	ldr	r2, [pc, #556]	@ (800532c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8005100:	60d3      	str	r3, [r2, #12]
 8005102:	e05f      	b.n	80051c4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a89      	ldr	r2, [pc, #548]	@ (8005330 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d057      	beq.n	80051be <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a88      	ldr	r2, [pc, #544]	@ (8005334 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d050      	beq.n	80051ba <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a86      	ldr	r2, [pc, #536]	@ (8005338 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d049      	beq.n	80051b6 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a85      	ldr	r2, [pc, #532]	@ (800533c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d042      	beq.n	80051b2 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a83      	ldr	r2, [pc, #524]	@ (8005340 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d03a      	beq.n	80051ac <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a82      	ldr	r2, [pc, #520]	@ (8005344 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d032      	beq.n	80051a6 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a80      	ldr	r2, [pc, #512]	@ (8005348 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d02a      	beq.n	80051a0 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a7f      	ldr	r2, [pc, #508]	@ (800534c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a7d      	ldr	r2, [pc, #500]	@ (8005350 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01a      	beq.n	8005194 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a7c      	ldr	r2, [pc, #496]	@ (8005354 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d012      	beq.n	800518e <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a7a      	ldr	r2, [pc, #488]	@ (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00a      	beq.n	8005188 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a79      	ldr	r2, [pc, #484]	@ (800535c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d102      	bne.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 800517c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005180:	e01e      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005182:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005186:	e01b      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005188:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800518c:	e018      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800518e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005192:	e015      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005194:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005198:	e012      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800519a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800519e:	e00f      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80051a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051a4:	e00c      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80051a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051aa:	e009      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80051ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051b0:	e006      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80051b2:	2304      	movs	r3, #4
 80051b4:	e004      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80051b6:	2304      	movs	r3, #4
 80051b8:	e002      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80051ba:	2304      	movs	r3, #4
 80051bc:	e000      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80051be:	2304      	movs	r3, #4
 80051c0:	4a5a      	ldr	r2, [pc, #360]	@ (800532c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80051c2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	4b65      	ldr	r3, [pc, #404]	@ (8005360 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d95c      	bls.n	800528a <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a56      	ldr	r2, [pc, #344]	@ (8005330 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d053      	beq.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a55      	ldr	r2, [pc, #340]	@ (8005334 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d04c      	beq.n	800527e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a53      	ldr	r2, [pc, #332]	@ (8005338 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d045      	beq.n	800527a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a52      	ldr	r2, [pc, #328]	@ (800533c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d03e      	beq.n	8005276 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a50      	ldr	r2, [pc, #320]	@ (8005340 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d037      	beq.n	8005272 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a4f      	ldr	r2, [pc, #316]	@ (8005344 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d030      	beq.n	800526e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a4d      	ldr	r2, [pc, #308]	@ (8005348 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d029      	beq.n	800526a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a4c      	ldr	r2, [pc, #304]	@ (800534c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d022      	beq.n	8005266 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a4a      	ldr	r2, [pc, #296]	@ (8005350 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01a      	beq.n	8005260 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a49      	ldr	r2, [pc, #292]	@ (8005354 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d012      	beq.n	800525a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a47      	ldr	r2, [pc, #284]	@ (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00a      	beq.n	8005254 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a46      	ldr	r2, [pc, #280]	@ (800535c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d102      	bne.n	800524e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8005248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800524c:	e01a      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800524e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005252:	e017      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005258:	e014      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800525a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800525e:	e011      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005264:	e00e      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005266:	2340      	movs	r3, #64	@ 0x40
 8005268:	e00c      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800526a:	2340      	movs	r3, #64	@ 0x40
 800526c:	e00a      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800526e:	2340      	movs	r3, #64	@ 0x40
 8005270:	e008      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005272:	2340      	movs	r3, #64	@ 0x40
 8005274:	e006      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005276:	2301      	movs	r3, #1
 8005278:	e004      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800527a:	2301      	movs	r3, #1
 800527c:	e002      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005282:	2301      	movs	r3, #1
 8005284:	4a37      	ldr	r2, [pc, #220]	@ (8005364 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8005286:	60d3      	str	r3, [r2, #12]
 8005288:	e141      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	4b35      	ldr	r3, [pc, #212]	@ (8005368 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8005292:	429a      	cmp	r2, r3
 8005294:	d97c      	bls.n	8005390 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a25      	ldr	r2, [pc, #148]	@ (8005330 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d073      	beq.n	8005388 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a23      	ldr	r2, [pc, #140]	@ (8005334 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d06c      	beq.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a22      	ldr	r2, [pc, #136]	@ (8005338 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d065      	beq.n	8005380 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a20      	ldr	r2, [pc, #128]	@ (800533c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d05e      	beq.n	800537c <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005340 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d057      	beq.n	8005378 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d050      	beq.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005348 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d049      	beq.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1a      	ldr	r2, [pc, #104]	@ (800534c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d042      	beq.n	800536c <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a19      	ldr	r2, [pc, #100]	@ (8005350 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d01a      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a17      	ldr	r2, [pc, #92]	@ (8005354 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d012      	beq.n	8005320 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a16      	ldr	r2, [pc, #88]	@ (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00a      	beq.n	800531a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a14      	ldr	r2, [pc, #80]	@ (800535c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d102      	bne.n	8005314 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800530e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005312:	e03a      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005314:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005318:	e037      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800531a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800531e:	e034      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005320:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005324:	e031      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005326:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800532a:	e02e      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800532c:	40026000 	.word	0x40026000
 8005330:	40026010 	.word	0x40026010
 8005334:	40026410 	.word	0x40026410
 8005338:	40026070 	.word	0x40026070
 800533c:	40026470 	.word	0x40026470
 8005340:	40026028 	.word	0x40026028
 8005344:	40026428 	.word	0x40026428
 8005348:	40026088 	.word	0x40026088
 800534c:	40026488 	.word	0x40026488
 8005350:	40026040 	.word	0x40026040
 8005354:	40026440 	.word	0x40026440
 8005358:	400260a0 	.word	0x400260a0
 800535c:	400264a0 	.word	0x400264a0
 8005360:	40026458 	.word	0x40026458
 8005364:	40026400 	.word	0x40026400
 8005368:	400260b8 	.word	0x400260b8
 800536c:	2340      	movs	r3, #64	@ 0x40
 800536e:	e00c      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005370:	2340      	movs	r3, #64	@ 0x40
 8005372:	e00a      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005374:	2340      	movs	r3, #64	@ 0x40
 8005376:	e008      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005378:	2340      	movs	r3, #64	@ 0x40
 800537a:	e006      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800537c:	2301      	movs	r3, #1
 800537e:	e004      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005380:	2301      	movs	r3, #1
 8005382:	e002      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005388:	2301      	movs	r3, #1
 800538a:	4a7b      	ldr	r2, [pc, #492]	@ (8005578 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800538c:	6093      	str	r3, [r2, #8]
 800538e:	e0be      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	4b79      	ldr	r3, [pc, #484]	@ (800557c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005398:	429a      	cmp	r2, r3
 800539a:	d95c      	bls.n	8005456 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a77      	ldr	r2, [pc, #476]	@ (8005580 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d053      	beq.n	800544e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a76      	ldr	r2, [pc, #472]	@ (8005584 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d04c      	beq.n	800544a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a74      	ldr	r2, [pc, #464]	@ (8005588 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d045      	beq.n	8005446 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a73      	ldr	r2, [pc, #460]	@ (800558c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d03e      	beq.n	8005442 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a71      	ldr	r2, [pc, #452]	@ (8005590 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d037      	beq.n	800543e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a70      	ldr	r2, [pc, #448]	@ (8005594 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d030      	beq.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005598 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d029      	beq.n	8005436 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a6d      	ldr	r2, [pc, #436]	@ (800559c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d022      	beq.n	8005432 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a6b      	ldr	r2, [pc, #428]	@ (80055a0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01a      	beq.n	800542c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a6a      	ldr	r2, [pc, #424]	@ (80055a4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d012      	beq.n	8005426 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a68      	ldr	r2, [pc, #416]	@ (80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00a      	beq.n	8005420 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a67      	ldr	r2, [pc, #412]	@ (80055ac <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d102      	bne.n	800541a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8005414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005418:	e01a      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800541a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800541e:	e017      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005420:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005424:	e014      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005426:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800542a:	e011      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800542c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005430:	e00e      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005432:	2340      	movs	r3, #64	@ 0x40
 8005434:	e00c      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005436:	2340      	movs	r3, #64	@ 0x40
 8005438:	e00a      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800543a:	2340      	movs	r3, #64	@ 0x40
 800543c:	e008      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800543e:	2340      	movs	r3, #64	@ 0x40
 8005440:	e006      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005442:	2301      	movs	r3, #1
 8005444:	e004      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005446:	2301      	movs	r3, #1
 8005448:	e002      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800544e:	2301      	movs	r3, #1
 8005450:	4a57      	ldr	r2, [pc, #348]	@ (80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8005452:	60d3      	str	r3, [r2, #12]
 8005454:	e05b      	b.n	800550e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a49      	ldr	r2, [pc, #292]	@ (8005580 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d053      	beq.n	8005508 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a47      	ldr	r2, [pc, #284]	@ (8005584 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d04c      	beq.n	8005504 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a46      	ldr	r2, [pc, #280]	@ (8005588 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d045      	beq.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a44      	ldr	r2, [pc, #272]	@ (800558c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d03e      	beq.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a43      	ldr	r2, [pc, #268]	@ (8005590 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d037      	beq.n	80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a41      	ldr	r2, [pc, #260]	@ (8005594 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d030      	beq.n	80054f4 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a40      	ldr	r2, [pc, #256]	@ (8005598 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d029      	beq.n	80054f0 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a3e      	ldr	r2, [pc, #248]	@ (800559c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d022      	beq.n	80054ec <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a3d      	ldr	r2, [pc, #244]	@ (80055a0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d01a      	beq.n	80054e6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3b      	ldr	r2, [pc, #236]	@ (80055a4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d012      	beq.n	80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a3a      	ldr	r2, [pc, #232]	@ (80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00a      	beq.n	80054da <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a38      	ldr	r2, [pc, #224]	@ (80055ac <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d102      	bne.n	80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80054ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054d2:	e01a      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80054d8:	e017      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054de:	e014      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054e4:	e011      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054ea:	e00e      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054ec:	2340      	movs	r3, #64	@ 0x40
 80054ee:	e00c      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054f0:	2340      	movs	r3, #64	@ 0x40
 80054f2:	e00a      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054f4:	2340      	movs	r3, #64	@ 0x40
 80054f6:	e008      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054f8:	2340      	movs	r3, #64	@ 0x40
 80054fa:	e006      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e004      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005500:	2301      	movs	r3, #1
 8005502:	e002      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005508:	2301      	movs	r3, #1
 800550a:	4a29      	ldr	r2, [pc, #164]	@ (80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800550c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0216 	orr.w	r2, r2, #22
 800551c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800552c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d103      	bne.n	800553e <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e005      	b.n	800556c <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005568:	2302      	movs	r3, #2
 800556a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800556c:	7dfb      	ldrb	r3, [r7, #23]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40026400 	.word	0x40026400
 800557c:	40026058 	.word	0x40026058
 8005580:	40026010 	.word	0x40026010
 8005584:	40026410 	.word	0x40026410
 8005588:	40026070 	.word	0x40026070
 800558c:	40026470 	.word	0x40026470
 8005590:	40026028 	.word	0x40026028
 8005594:	40026428 	.word	0x40026428
 8005598:	40026088 	.word	0x40026088
 800559c:	40026488 	.word	0x40026488
 80055a0:	40026040 	.word	0x40026040
 80055a4:	40026440 	.word	0x40026440
 80055a8:	400260a0 	.word	0x400260a0
 80055ac:	400264a0 	.word	0x400264a0
 80055b0:	40026000 	.word	0x40026000

080055b4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	60da      	str	r2, [r3, #12]
 80055d0:	e003      	b.n	80055da <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b40      	cmp	r3, #64	@ 0x40
 8005604:	d108      	bne.n	8005618 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005616:	e007      	b.n	8005628 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	@ 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e165      	b.n	800591c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005650:	2201      	movs	r2, #1
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	429a      	cmp	r2, r3
 800566a:	f040 8154 	bne.w	8005916 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b01      	cmp	r3, #1
 8005678:	d005      	beq.n	8005686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005682:	2b02      	cmp	r3, #2
 8005684:	d130      	bne.n	80056e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	2203      	movs	r2, #3
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056bc:	2201      	movs	r2, #1
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 0201 	and.w	r2, r3, #1
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4313      	orrs	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d017      	beq.n	8005724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	2203      	movs	r2, #3
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d123      	bne.n	8005778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	08da      	lsrs	r2, r3, #3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3208      	adds	r2, #8
 8005738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	220f      	movs	r2, #15
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4013      	ands	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	08da      	lsrs	r2, r3, #3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3208      	adds	r2, #8
 8005772:	69b9      	ldr	r1, [r7, #24]
 8005774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0203 	and.w	r2, r3, #3
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80ae 	beq.w	8005916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4b5d      	ldr	r3, [pc, #372]	@ (8005934 <HAL_GPIO_Init+0x300>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005934 <HAL_GPIO_Init+0x300>)
 80057c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80057ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005934 <HAL_GPIO_Init+0x300>)
 80057cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057d6:	4a58      	ldr	r2, [pc, #352]	@ (8005938 <HAL_GPIO_Init+0x304>)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	3302      	adds	r3, #2
 80057de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a4f      	ldr	r2, [pc, #316]	@ (800593c <HAL_GPIO_Init+0x308>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d025      	beq.n	800584e <HAL_GPIO_Init+0x21a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a4e      	ldr	r2, [pc, #312]	@ (8005940 <HAL_GPIO_Init+0x30c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01f      	beq.n	800584a <HAL_GPIO_Init+0x216>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a4d      	ldr	r2, [pc, #308]	@ (8005944 <HAL_GPIO_Init+0x310>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d019      	beq.n	8005846 <HAL_GPIO_Init+0x212>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a4c      	ldr	r2, [pc, #304]	@ (8005948 <HAL_GPIO_Init+0x314>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_GPIO_Init+0x20e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a4b      	ldr	r2, [pc, #300]	@ (800594c <HAL_GPIO_Init+0x318>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00d      	beq.n	800583e <HAL_GPIO_Init+0x20a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a4a      	ldr	r2, [pc, #296]	@ (8005950 <HAL_GPIO_Init+0x31c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <HAL_GPIO_Init+0x206>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a49      	ldr	r2, [pc, #292]	@ (8005954 <HAL_GPIO_Init+0x320>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d101      	bne.n	8005836 <HAL_GPIO_Init+0x202>
 8005832:	2306      	movs	r3, #6
 8005834:	e00c      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 8005836:	2307      	movs	r3, #7
 8005838:	e00a      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 800583a:	2305      	movs	r3, #5
 800583c:	e008      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 800583e:	2304      	movs	r3, #4
 8005840:	e006      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 8005842:	2303      	movs	r3, #3
 8005844:	e004      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 8005846:	2302      	movs	r3, #2
 8005848:	e002      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 800584e:	2300      	movs	r3, #0
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	f002 0203 	and.w	r2, r2, #3
 8005856:	0092      	lsls	r2, r2, #2
 8005858:	4093      	lsls	r3, r2
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005860:	4935      	ldr	r1, [pc, #212]	@ (8005938 <HAL_GPIO_Init+0x304>)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	3302      	adds	r3, #2
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800586e:	4b3a      	ldr	r3, [pc, #232]	@ (8005958 <HAL_GPIO_Init+0x324>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005892:	4a31      	ldr	r2, [pc, #196]	@ (8005958 <HAL_GPIO_Init+0x324>)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005898:	4b2f      	ldr	r3, [pc, #188]	@ (8005958 <HAL_GPIO_Init+0x324>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4013      	ands	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058bc:	4a26      	ldr	r2, [pc, #152]	@ (8005958 <HAL_GPIO_Init+0x324>)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058c2:	4b25      	ldr	r3, [pc, #148]	@ (8005958 <HAL_GPIO_Init+0x324>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	43db      	mvns	r3, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4013      	ands	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_GPIO_Init+0x324>)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <HAL_GPIO_Init+0x324>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005910:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <HAL_GPIO_Init+0x324>)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3301      	adds	r3, #1
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b0f      	cmp	r3, #15
 8005920:	f67f ae96 	bls.w	8005650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3724      	adds	r7, #36	@ 0x24
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800
 8005938:	40013800 	.word	0x40013800
 800593c:	40020000 	.word	0x40020000
 8005940:	40020400 	.word	0x40020400
 8005944:	40020800 	.word	0x40020800
 8005948:	40020c00 	.word	0x40020c00
 800594c:	40021000 	.word	0x40021000
 8005950:	40021400 	.word	0x40021400
 8005954:	40021800 	.word	0x40021800
 8005958:	40013c00 	.word	0x40013c00

0800595c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
 8005968:	4613      	mov	r3, r2
 800596a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800596c:	787b      	ldrb	r3, [r7, #1]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005972:	887a      	ldrh	r2, [r7, #2]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005978:	e003      	b.n	8005982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	041a      	lsls	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059a0:	887a      	ldrh	r2, [r7, #2]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4013      	ands	r3, r2
 80059a6:	041a      	lsls	r2, r3, #16
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	43d9      	mvns	r1, r3
 80059ac:	887b      	ldrh	r3, [r7, #2]
 80059ae:	400b      	ands	r3, r1
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	619a      	str	r2, [r3, #24]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059ce:	4b08      	ldr	r3, [pc, #32]	@ (80059f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d006      	beq.n	80059e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059da:	4a05      	ldr	r2, [pc, #20]	@ (80059f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f806 	bl	80059f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40013c00 	.word	0x40013c00

080059f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e12b      	b.n	8005c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc ff18 	bl	8002868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	@ 0x24
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a70:	f001 fa48 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8005a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4a81      	ldr	r2, [pc, #516]	@ (8005c80 <HAL_I2C_Init+0x274>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d807      	bhi.n	8005a90 <HAL_I2C_Init+0x84>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a80      	ldr	r2, [pc, #512]	@ (8005c84 <HAL_I2C_Init+0x278>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	bf94      	ite	ls
 8005a88:	2301      	movls	r3, #1
 8005a8a:	2300      	movhi	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	e006      	b.n	8005a9e <HAL_I2C_Init+0x92>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a7d      	ldr	r2, [pc, #500]	@ (8005c88 <HAL_I2C_Init+0x27c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	bf94      	ite	ls
 8005a98:	2301      	movls	r3, #1
 8005a9a:	2300      	movhi	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e0e7      	b.n	8005c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4a78      	ldr	r2, [pc, #480]	@ (8005c8c <HAL_I2C_Init+0x280>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	0c9b      	lsrs	r3, r3, #18
 8005ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8005c80 <HAL_I2C_Init+0x274>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d802      	bhi.n	8005ae0 <HAL_I2C_Init+0xd4>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3301      	adds	r3, #1
 8005ade:	e009      	b.n	8005af4 <HAL_I2C_Init+0xe8>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
 8005aea:	4a69      	ldr	r2, [pc, #420]	@ (8005c90 <HAL_I2C_Init+0x284>)
 8005aec:	fba2 2303 	umull	r2, r3, r2, r3
 8005af0:	099b      	lsrs	r3, r3, #6
 8005af2:	3301      	adds	r3, #1
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	430b      	orrs	r3, r1
 8005afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	495c      	ldr	r1, [pc, #368]	@ (8005c80 <HAL_I2C_Init+0x274>)
 8005b10:	428b      	cmp	r3, r1
 8005b12:	d819      	bhi.n	8005b48 <HAL_I2C_Init+0x13c>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	1e59      	subs	r1, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b22:	1c59      	adds	r1, r3, #1
 8005b24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b28:	400b      	ands	r3, r1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_I2C_Init+0x138>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1e59      	subs	r1, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b42:	e051      	b.n	8005be8 <HAL_I2C_Init+0x1dc>
 8005b44:	2304      	movs	r3, #4
 8005b46:	e04f      	b.n	8005be8 <HAL_I2C_Init+0x1dc>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d111      	bne.n	8005b74 <HAL_I2C_Init+0x168>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1e58      	subs	r0, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	440b      	add	r3, r1
 8005b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b62:	3301      	adds	r3, #1
 8005b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e012      	b.n	8005b9a <HAL_I2C_Init+0x18e>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1e58      	subs	r0, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6859      	ldr	r1, [r3, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	0099      	lsls	r1, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_Init+0x196>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e022      	b.n	8005be8 <HAL_I2C_Init+0x1dc>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_I2C_Init+0x1bc>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1e58      	subs	r0, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6859      	ldr	r1, [r3, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	440b      	add	r3, r1
 8005bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc6:	e00f      	b.n	8005be8 <HAL_I2C_Init+0x1dc>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	1e58      	subs	r0, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	0099      	lsls	r1, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bde:	3301      	adds	r3, #1
 8005be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	6809      	ldr	r1, [r1, #0]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6911      	ldr	r1, [r2, #16]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68d2      	ldr	r2, [r2, #12]
 8005c22:	4311      	orrs	r1, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	000186a0 	.word	0x000186a0
 8005c84:	001e847f 	.word	0x001e847f
 8005c88:	003d08ff 	.word	0x003d08ff
 8005c8c:	431bde83 	.word	0x431bde83
 8005c90:	10624dd3 	.word	0x10624dd3

08005c94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	817b      	strh	r3, [r7, #10]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ca8:	f7fd f91a 	bl	8002ee0 <HAL_GetTick>
 8005cac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	f040 80e0 	bne.w	8005e7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	2319      	movs	r3, #25
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4970      	ldr	r1, [pc, #448]	@ (8005e88 <HAL_I2C_Master_Transmit+0x1f4>)
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fdf4 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e0d3      	b.n	8005e7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_I2C_Master_Transmit+0x50>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e0cc      	b.n	8005e7e <HAL_I2C_Master_Transmit+0x1ea>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d007      	beq.n	8005d0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2221      	movs	r2, #33	@ 0x21
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2210      	movs	r2, #16
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	893a      	ldrh	r2, [r7, #8]
 8005d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a50      	ldr	r2, [pc, #320]	@ (8005e8c <HAL_I2C_Master_Transmit+0x1f8>)
 8005d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d4c:	8979      	ldrh	r1, [r7, #10]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fbc8 	bl	80064e8 <I2C_MasterRequestWrite>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e08d      	b.n	8005e7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d78:	e066      	b.n	8005e48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	6a39      	ldr	r1, [r7, #32]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 feb2 	bl	8006ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d107      	bne.n	8005da2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e06b      	b.n	8005e7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	781a      	ldrb	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d11b      	bne.n	8005e1c <HAL_I2C_Master_Transmit+0x188>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	6a39      	ldr	r1, [r7, #32]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fea9 	bl	8006b78 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00d      	beq.n	8005e48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d107      	bne.n	8005e44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e01a      	b.n	8005e7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d194      	bne.n	8005d7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	00100002 	.word	0x00100002
 8005e8c:	ffff0000 	.word	0xffff0000

08005e90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	@ 0x30
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	817b      	strh	r3, [r7, #10]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ea4:	f7fd f81c 	bl	8002ee0 <HAL_GetTick>
 8005ea8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	f040 8217 	bne.w	80062e6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	2319      	movs	r3, #25
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	497c      	ldr	r1, [pc, #496]	@ (80060b4 <HAL_I2C_Master_Receive+0x224>)
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fcf6 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e20a      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_I2C_Master_Receive+0x50>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e203      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d007      	beq.n	8005f06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0201 	orr.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2222      	movs	r2, #34	@ 0x22
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2210      	movs	r2, #16
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	893a      	ldrh	r2, [r7, #8]
 8005f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a5c      	ldr	r2, [pc, #368]	@ (80060b8 <HAL_I2C_Master_Receive+0x228>)
 8005f46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f48:	8979      	ldrh	r1, [r7, #10]
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fb4c 	bl	80065ec <I2C_MasterRequestRead>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e1c4      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d113      	bne.n	8005f8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f66:	2300      	movs	r3, #0
 8005f68:	623b      	str	r3, [r7, #32]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	623b      	str	r3, [r7, #32]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	623b      	str	r3, [r7, #32]
 8005f7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	e198      	b.n	80062c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d11b      	bne.n	8005fce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	e178      	b.n	80062c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d11b      	bne.n	800600e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fe4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	e158      	b.n	80062c0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800601c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006034:	e144      	b.n	80062c0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	2b03      	cmp	r3, #3
 800603c:	f200 80f1 	bhi.w	8006222 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006044:	2b01      	cmp	r3, #1
 8006046:	d123      	bne.n	8006090 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fddb 	bl	8006c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e145      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800608e:	e117      	b.n	80062c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006094:	2b02      	cmp	r3, #2
 8006096:	d14e      	bne.n	8006136 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609e:	2200      	movs	r2, #0
 80060a0:	4906      	ldr	r1, [pc, #24]	@ (80060bc <HAL_I2C_Master_Receive+0x22c>)
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fc06 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e11a      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
 80060b2:	bf00      	nop
 80060b4:	00100002 	.word	0x00100002
 80060b8:	ffff0000 	.word	0xffff0000
 80060bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006134:	e0c4      	b.n	80062c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	2200      	movs	r2, #0
 800613e:	496c      	ldr	r1, [pc, #432]	@ (80062f0 <HAL_I2C_Master_Receive+0x460>)
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fbb7 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0cb      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800615e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	2200      	movs	r2, #0
 800619a:	4955      	ldr	r1, [pc, #340]	@ (80062f0 <HAL_I2C_Master_Receive+0x460>)
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fb89 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e09d      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006220:	e04e      	b.n	80062c0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fcee 	bl	8006c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e058      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b04      	cmp	r3, #4
 8006274:	d124      	bne.n	80062c0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627a:	2b03      	cmp	r3, #3
 800627c:	d107      	bne.n	800628e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800628c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f47f aeb6 	bne.w	8006036 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e000      	b.n	80062e8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
  }
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3728      	adds	r7, #40	@ 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	00010004 	.word	0x00010004

080062f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	4608      	mov	r0, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	461a      	mov	r2, r3
 8006302:	4603      	mov	r3, r0
 8006304:	817b      	strh	r3, [r7, #10]
 8006306:	460b      	mov	r3, r1
 8006308:	813b      	strh	r3, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800630e:	f7fc fde7 	bl	8002ee0 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b20      	cmp	r3, #32
 800631e:	f040 80d9 	bne.w	80064d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	2319      	movs	r3, #25
 8006328:	2201      	movs	r2, #1
 800632a:	496d      	ldr	r1, [pc, #436]	@ (80064e0 <HAL_I2C_Mem_Write+0x1ec>)
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fac1 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
 800633a:	e0cc      	b.n	80064d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_I2C_Mem_Write+0x56>
 8006346:	2302      	movs	r3, #2
 8006348:	e0c5      	b.n	80064d6 <HAL_I2C_Mem_Write+0x1e2>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d007      	beq.n	8006370 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800637e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2221      	movs	r2, #33	@ 0x21
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2240      	movs	r2, #64	@ 0x40
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80063a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4a4d      	ldr	r2, [pc, #308]	@ (80064e4 <HAL_I2C_Mem_Write+0x1f0>)
 80063b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063b2:	88f8      	ldrh	r0, [r7, #6]
 80063b4:	893a      	ldrh	r2, [r7, #8]
 80063b6:	8979      	ldrh	r1, [r7, #10]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	4603      	mov	r3, r0
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f9e0 	bl	8006788 <I2C_RequestMemoryWrite>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d052      	beq.n	8006474 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e081      	b.n	80064d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 fb86 	bl	8006ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d107      	bne.n	80063fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e06b      	b.n	80064d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b04      	cmp	r3, #4
 800643a:	d11b      	bne.n	8006474 <HAL_I2C_Mem_Write+0x180>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d017      	beq.n	8006474 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1aa      	bne.n	80063d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fb79 	bl	8006b78 <I2C_WaitOnBTFFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00d      	beq.n	80064a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006490:	2b04      	cmp	r3, #4
 8006492:	d107      	bne.n	80064a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e016      	b.n	80064d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e000      	b.n	80064d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	00100002 	.word	0x00100002
 80064e4:	ffff0000 	.word	0xffff0000

080064e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	460b      	mov	r3, r1
 80064f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d006      	beq.n	8006512 <I2C_MasterRequestWrite+0x2a>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d003      	beq.n	8006512 <I2C_MasterRequestWrite+0x2a>
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006510:	d108      	bne.n	8006524 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e00b      	b.n	800653c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006528:	2b12      	cmp	r3, #18
 800652a:	d107      	bne.n	800653c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800653a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f9b3 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00d      	beq.n	8006570 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006562:	d103      	bne.n	800656c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800656a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e035      	b.n	80065dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006578:	d108      	bne.n	800658c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800657a:	897b      	ldrh	r3, [r7, #10]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006588:	611a      	str	r2, [r3, #16]
 800658a:	e01b      	b.n	80065c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800658c:	897b      	ldrh	r3, [r7, #10]
 800658e:	11db      	asrs	r3, r3, #7
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f063 030f 	orn	r3, r3, #15
 800659c:	b2da      	uxtb	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	490e      	ldr	r1, [pc, #56]	@ (80065e4 <I2C_MasterRequestWrite+0xfc>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f9fc 	bl	80069a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e010      	b.n	80065dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065ba:	897b      	ldrh	r3, [r7, #10]
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	4907      	ldr	r1, [pc, #28]	@ (80065e8 <I2C_MasterRequestWrite+0x100>)
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f9ec 	bl	80069a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	00010008 	.word	0x00010008
 80065e8:	00010002 	.word	0x00010002

080065ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	460b      	mov	r3, r1
 80065fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006610:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b08      	cmp	r3, #8
 8006616:	d006      	beq.n	8006626 <I2C_MasterRequestRead+0x3a>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d003      	beq.n	8006626 <I2C_MasterRequestRead+0x3a>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006624:	d108      	bne.n	8006638 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e00b      	b.n	8006650 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663c:	2b11      	cmp	r3, #17
 800663e:	d107      	bne.n	8006650 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800664e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f929 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00d      	beq.n	8006684 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006676:	d103      	bne.n	8006680 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800667e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e079      	b.n	8006778 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800668c:	d108      	bne.n	80066a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800668e:	897b      	ldrh	r3, [r7, #10]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	b2da      	uxtb	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	611a      	str	r2, [r3, #16]
 800669e:	e05f      	b.n	8006760 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066a0:	897b      	ldrh	r3, [r7, #10]
 80066a2:	11db      	asrs	r3, r3, #7
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	f003 0306 	and.w	r3, r3, #6
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f063 030f 	orn	r3, r3, #15
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4930      	ldr	r1, [pc, #192]	@ (8006780 <I2C_MasterRequestRead+0x194>)
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f972 	bl	80069a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e054      	b.n	8006778 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066ce:	897b      	ldrh	r3, [r7, #10]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	4929      	ldr	r1, [pc, #164]	@ (8006784 <I2C_MasterRequestRead+0x198>)
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f962 	bl	80069a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e044      	b.n	8006778 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ee:	2300      	movs	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006712:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f8c7 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800673a:	d103      	bne.n	8006744 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006742:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e017      	b.n	8006778 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006748:	897b      	ldrh	r3, [r7, #10]
 800674a:	11db      	asrs	r3, r3, #7
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0306 	and.w	r3, r3, #6
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f063 030e 	orn	r3, r3, #14
 8006758:	b2da      	uxtb	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	4907      	ldr	r1, [pc, #28]	@ (8006784 <I2C_MasterRequestRead+0x198>)
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f91e 	bl	80069a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	00010008 	.word	0x00010008
 8006784:	00010002 	.word	0x00010002

08006788 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	461a      	mov	r2, r3
 8006796:	4603      	mov	r3, r0
 8006798:	817b      	strh	r3, [r7, #10]
 800679a:	460b      	mov	r3, r1
 800679c:	813b      	strh	r3, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f878 	bl	80068b4 <I2C_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00d      	beq.n	80067e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d8:	d103      	bne.n	80067e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e05f      	b.n	80068a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067e6:	897b      	ldrh	r3, [r7, #10]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	6a3a      	ldr	r2, [r7, #32]
 80067fa:	492d      	ldr	r1, [pc, #180]	@ (80068b0 <I2C_RequestMemoryWrite+0x128>)
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f8d3 	bl	80069a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e04c      	b.n	80068a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006824:	6a39      	ldr	r1, [r7, #32]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f95e 	bl	8006ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	2b04      	cmp	r3, #4
 8006838:	d107      	bne.n	800684a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006848:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e02b      	b.n	80068a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d105      	bne.n	8006860 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006854:	893b      	ldrh	r3, [r7, #8]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	611a      	str	r2, [r3, #16]
 800685e:	e021      	b.n	80068a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006860:	893b      	ldrh	r3, [r7, #8]
 8006862:	0a1b      	lsrs	r3, r3, #8
 8006864:	b29b      	uxth	r3, r3
 8006866:	b2da      	uxtb	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800686e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006870:	6a39      	ldr	r1, [r7, #32]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f938 	bl	8006ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	2b04      	cmp	r3, #4
 8006884:	d107      	bne.n	8006896 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006894:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e005      	b.n	80068a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800689a:	893b      	ldrh	r3, [r7, #8]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	00010002 	.word	0x00010002

080068b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c4:	e048      	b.n	8006958 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d044      	beq.n	8006958 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fc fb07 	bl	8002ee0 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d139      	bne.n	8006958 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d10d      	bne.n	800690a <I2C_WaitOnFlagUntilTimeout+0x56>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	43da      	mvns	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	e00c      	b.n	8006924 <I2C_WaitOnFlagUntilTimeout+0x70>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	43da      	mvns	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4013      	ands	r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	429a      	cmp	r2, r3
 8006928:	d116      	bne.n	8006958 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006944:	f043 0220 	orr.w	r2, r3, #32
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e023      	b.n	80069a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	0c1b      	lsrs	r3, r3, #16
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b01      	cmp	r3, #1
 8006960:	d10d      	bne.n	800697e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	43da      	mvns	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4013      	ands	r3, r2
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	e00c      	b.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	43da      	mvns	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4013      	ands	r3, r2
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	429a      	cmp	r2, r3
 800699c:	d093      	beq.n	80068c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069b6:	e071      	b.n	8006a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c6:	d123      	bne.n	8006a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fc:	f043 0204 	orr.w	r2, r3, #4
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e067      	b.n	8006ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	d041      	beq.n	8006a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a18:	f7fc fa62 	bl	8002ee0 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d136      	bne.n	8006a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	0c1b      	lsrs	r3, r3, #16
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d10c      	bne.n	8006a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	43da      	mvns	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4013      	ands	r3, r2
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bf14      	ite	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	2300      	moveq	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	e00b      	b.n	8006a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	43da      	mvns	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bf14      	ite	ne
 8006a64:	2301      	movne	r3, #1
 8006a66:	2300      	moveq	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d016      	beq.n	8006a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a88:	f043 0220 	orr.w	r2, r3, #32
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e021      	b.n	8006ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	0c1b      	lsrs	r3, r3, #16
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d10c      	bne.n	8006ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	43da      	mvns	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bf14      	ite	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2300      	moveq	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e00b      	b.n	8006ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	43da      	mvns	r2, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4013      	ands	r3, r2
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bf14      	ite	ne
 8006ad2:	2301      	movne	r3, #1
 8006ad4:	2300      	moveq	r3, #0
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f47f af6d 	bne.w	80069b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006af4:	e034      	b.n	8006b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f8e3 	bl	8006cc2 <I2C_IsAcknowledgeFailed>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e034      	b.n	8006b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d028      	beq.n	8006b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fc f9e7 	bl	8002ee0 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11d      	bne.n	8006b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b2e:	2b80      	cmp	r3, #128	@ 0x80
 8006b30:	d016      	beq.n	8006b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4c:	f043 0220 	orr.w	r2, r3, #32
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e007      	b.n	8006b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6a:	2b80      	cmp	r3, #128	@ 0x80
 8006b6c:	d1c3      	bne.n	8006af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b84:	e034      	b.n	8006bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f89b 	bl	8006cc2 <I2C_IsAcknowledgeFailed>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e034      	b.n	8006c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d028      	beq.n	8006bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9e:	f7fc f99f 	bl	8002ee0 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d302      	bcc.n	8006bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11d      	bne.n	8006bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d016      	beq.n	8006bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	f043 0220 	orr.w	r2, r3, #32
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e007      	b.n	8006c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d1c3      	bne.n	8006b86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c14:	e049      	b.n	8006caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d119      	bne.n	8006c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0210 	mvn.w	r2, #16
 8006c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e030      	b.n	8006cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c58:	f7fc f942 	bl	8002ee0 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d302      	bcc.n	8006c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d11d      	bne.n	8006caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c78:	2b40      	cmp	r3, #64	@ 0x40
 8006c7a:	d016      	beq.n	8006caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e007      	b.n	8006cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb4:	2b40      	cmp	r3, #64	@ 0x40
 8006cb6:	d1ae      	bne.n	8006c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd8:	d11b      	bne.n	8006d12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ce2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	f043 0204 	orr.w	r2, r3, #4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0cc      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d34:	4b68      	ldr	r3, [pc, #416]	@ (8006ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d90c      	bls.n	8006d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b65      	ldr	r3, [pc, #404]	@ (8006ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b63      	ldr	r3, [pc, #396]	@ (8006ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0b8      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d020      	beq.n	8006daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d74:	4b59      	ldr	r3, [pc, #356]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4a58      	ldr	r2, [pc, #352]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d8c:	4b53      	ldr	r3, [pc, #332]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	4a52      	ldr	r2, [pc, #328]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d98:	4b50      	ldr	r3, [pc, #320]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	494d      	ldr	r1, [pc, #308]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d044      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d107      	bne.n	8006dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dbe:	4b47      	ldr	r3, [pc, #284]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d119      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e07f      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d003      	beq.n	8006dde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d107      	bne.n	8006dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dde:	4b3f      	ldr	r3, [pc, #252]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e06f      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dee:	4b3b      	ldr	r3, [pc, #236]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e067      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dfe:	4b37      	ldr	r3, [pc, #220]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f023 0203 	bic.w	r2, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	4934      	ldr	r1, [pc, #208]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e10:	f7fc f866 	bl	8002ee0 <HAL_GetTick>
 8006e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e16:	e00a      	b.n	8006e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e18:	f7fc f862 	bl	8002ee0 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e04f      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 020c 	and.w	r2, r3, #12
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d1eb      	bne.n	8006e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e40:	4b25      	ldr	r3, [pc, #148]	@ (8006ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d20c      	bcs.n	8006e68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b22      	ldr	r3, [pc, #136]	@ (8006ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b20      	ldr	r3, [pc, #128]	@ (8006ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d001      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e032      	b.n	8006ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e74:	4b19      	ldr	r3, [pc, #100]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4916      	ldr	r1, [pc, #88]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e92:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	490e      	ldr	r1, [pc, #56]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ea6:	f000 f855 	bl	8006f54 <HAL_RCC_GetSysClockFreq>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4b0b      	ldr	r3, [pc, #44]	@ (8006edc <HAL_RCC_ClockConfig+0x1bc>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	490a      	ldr	r1, [pc, #40]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8006eb8:	5ccb      	ldrb	r3, [r1, r3]
 8006eba:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebe:	4a09      	ldr	r2, [pc, #36]	@ (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ec2:	4b09      	ldr	r3, [pc, #36]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fb ffc6 	bl	8002e58 <HAL_InitTick>

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40023c00 	.word	0x40023c00
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	0800d1d0 	.word	0x0800d1d0
 8006ee4:	20000000 	.word	0x20000000
 8006ee8:	20000004 	.word	0x20000004

08006eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	@ (8006f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000000 	.word	0x20000000

08006f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f08:	f7ff fff0 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0a9b      	lsrs	r3, r3, #10
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4903      	ldr	r1, [pc, #12]	@ (8006f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40023800 	.word	0x40023800
 8006f28:	0800d1e0 	.word	0x0800d1e0

08006f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f30:	f7ff ffdc 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0b5b      	lsrs	r3, r3, #13
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4903      	ldr	r1, [pc, #12]	@ (8006f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	0800d1e0 	.word	0x0800d1e0

08006f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f58:	b0ae      	sub	sp, #184	@ 0xb8
 8006f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f7a:	4bcb      	ldr	r3, [pc, #812]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	2b0c      	cmp	r3, #12
 8006f84:	f200 8206 	bhi.w	8007394 <HAL_RCC_GetSysClockFreq+0x440>
 8006f88:	a201      	add	r2, pc, #4	@ (adr r2, 8006f90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fc5 	.word	0x08006fc5
 8006f94:	08007395 	.word	0x08007395
 8006f98:	08007395 	.word	0x08007395
 8006f9c:	08007395 	.word	0x08007395
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	08007395 	.word	0x08007395
 8006fa8:	08007395 	.word	0x08007395
 8006fac:	08007395 	.word	0x08007395
 8006fb0:	08006fd5 	.word	0x08006fd5
 8006fb4:	08007395 	.word	0x08007395
 8006fb8:	08007395 	.word	0x08007395
 8006fbc:	08007395 	.word	0x08007395
 8006fc0:	080071c5 	.word	0x080071c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x358>)
 8006fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006fca:	e1e7      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fcc:	4bb8      	ldr	r3, [pc, #736]	@ (80072b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006fd2:	e1e3      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fd4:	4bb4      	ldr	r3, [pc, #720]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fe0:	4bb1      	ldr	r3, [pc, #708]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d071      	beq.n	80070d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fec:	4bae      	ldr	r3, [pc, #696]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	099b      	lsrs	r3, r3, #6
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ff8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007004:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007008:	2300      	movs	r3, #0
 800700a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800700e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007012:	4622      	mov	r2, r4
 8007014:	462b      	mov	r3, r5
 8007016:	f04f 0000 	mov.w	r0, #0
 800701a:	f04f 0100 	mov.w	r1, #0
 800701e:	0159      	lsls	r1, r3, #5
 8007020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007024:	0150      	lsls	r0, r2, #5
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4621      	mov	r1, r4
 800702c:	1a51      	subs	r1, r2, r1
 800702e:	6439      	str	r1, [r7, #64]	@ 0x40
 8007030:	4629      	mov	r1, r5
 8007032:	eb63 0301 	sbc.w	r3, r3, r1
 8007036:	647b      	str	r3, [r7, #68]	@ 0x44
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007044:	4649      	mov	r1, r9
 8007046:	018b      	lsls	r3, r1, #6
 8007048:	4641      	mov	r1, r8
 800704a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800704e:	4641      	mov	r1, r8
 8007050:	018a      	lsls	r2, r1, #6
 8007052:	4641      	mov	r1, r8
 8007054:	1a51      	subs	r1, r2, r1
 8007056:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007058:	4649      	mov	r1, r9
 800705a:	eb63 0301 	sbc.w	r3, r3, r1
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800706c:	4649      	mov	r1, r9
 800706e:	00cb      	lsls	r3, r1, #3
 8007070:	4641      	mov	r1, r8
 8007072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007076:	4641      	mov	r1, r8
 8007078:	00ca      	lsls	r2, r1, #3
 800707a:	4610      	mov	r0, r2
 800707c:	4619      	mov	r1, r3
 800707e:	4603      	mov	r3, r0
 8007080:	4622      	mov	r2, r4
 8007082:	189b      	adds	r3, r3, r2
 8007084:	633b      	str	r3, [r7, #48]	@ 0x30
 8007086:	462b      	mov	r3, r5
 8007088:	460a      	mov	r2, r1
 800708a:	eb42 0303 	adc.w	r3, r2, r3
 800708e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800709c:	4629      	mov	r1, r5
 800709e:	024b      	lsls	r3, r1, #9
 80070a0:	4621      	mov	r1, r4
 80070a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070a6:	4621      	mov	r1, r4
 80070a8:	024a      	lsls	r2, r1, #9
 80070aa:	4610      	mov	r0, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80070c0:	f7f9 fde2 	bl	8000c88 <__aeabi_uldivmod>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4613      	mov	r3, r2
 80070ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070ce:	e067      	b.n	80071a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070d0:	4b75      	ldr	r3, [pc, #468]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	099b      	lsrs	r3, r3, #6
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80070e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070ea:	2300      	movs	r3, #0
 80070ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80070f2:	4622      	mov	r2, r4
 80070f4:	462b      	mov	r3, r5
 80070f6:	f04f 0000 	mov.w	r0, #0
 80070fa:	f04f 0100 	mov.w	r1, #0
 80070fe:	0159      	lsls	r1, r3, #5
 8007100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007104:	0150      	lsls	r0, r2, #5
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4621      	mov	r1, r4
 800710c:	1a51      	subs	r1, r2, r1
 800710e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007110:	4629      	mov	r1, r5
 8007112:	eb63 0301 	sbc.w	r3, r3, r1
 8007116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007124:	4649      	mov	r1, r9
 8007126:	018b      	lsls	r3, r1, #6
 8007128:	4641      	mov	r1, r8
 800712a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800712e:	4641      	mov	r1, r8
 8007130:	018a      	lsls	r2, r1, #6
 8007132:	4641      	mov	r1, r8
 8007134:	ebb2 0a01 	subs.w	sl, r2, r1
 8007138:	4649      	mov	r1, r9
 800713a:	eb63 0b01 	sbc.w	fp, r3, r1
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800714a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800714e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007152:	4692      	mov	sl, r2
 8007154:	469b      	mov	fp, r3
 8007156:	4623      	mov	r3, r4
 8007158:	eb1a 0303 	adds.w	r3, sl, r3
 800715c:	623b      	str	r3, [r7, #32]
 800715e:	462b      	mov	r3, r5
 8007160:	eb4b 0303 	adc.w	r3, fp, r3
 8007164:	627b      	str	r3, [r7, #36]	@ 0x24
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007172:	4629      	mov	r1, r5
 8007174:	028b      	lsls	r3, r1, #10
 8007176:	4621      	mov	r1, r4
 8007178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800717c:	4621      	mov	r1, r4
 800717e:	028a      	lsls	r2, r1, #10
 8007180:	4610      	mov	r0, r2
 8007182:	4619      	mov	r1, r3
 8007184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007188:	2200      	movs	r2, #0
 800718a:	673b      	str	r3, [r7, #112]	@ 0x70
 800718c:	677a      	str	r2, [r7, #116]	@ 0x74
 800718e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007192:	f7f9 fd79 	bl	8000c88 <__aeabi_uldivmod>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4613      	mov	r3, r2
 800719c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80071a0:	4b41      	ldr	r3, [pc, #260]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	0c1b      	lsrs	r3, r3, #16
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	3301      	adds	r3, #1
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80071b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80071be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80071c2:	e0eb      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071c4:	4b38      	ldr	r3, [pc, #224]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071d0:	4b35      	ldr	r3, [pc, #212]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d06b      	beq.n	80072b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071dc:	4b32      	ldr	r3, [pc, #200]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	099b      	lsrs	r3, r3, #6
 80071e2:	2200      	movs	r2, #0
 80071e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80071f0:	2300      	movs	r3, #0
 80071f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80071f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	f04f 0000 	mov.w	r0, #0
 8007200:	f04f 0100 	mov.w	r1, #0
 8007204:	0159      	lsls	r1, r3, #5
 8007206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800720a:	0150      	lsls	r0, r2, #5
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4621      	mov	r1, r4
 8007212:	1a51      	subs	r1, r2, r1
 8007214:	61b9      	str	r1, [r7, #24]
 8007216:	4629      	mov	r1, r5
 8007218:	eb63 0301 	sbc.w	r3, r3, r1
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800722a:	4659      	mov	r1, fp
 800722c:	018b      	lsls	r3, r1, #6
 800722e:	4651      	mov	r1, sl
 8007230:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007234:	4651      	mov	r1, sl
 8007236:	018a      	lsls	r2, r1, #6
 8007238:	4651      	mov	r1, sl
 800723a:	ebb2 0801 	subs.w	r8, r2, r1
 800723e:	4659      	mov	r1, fp
 8007240:	eb63 0901 	sbc.w	r9, r3, r1
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007250:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007254:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007258:	4690      	mov	r8, r2
 800725a:	4699      	mov	r9, r3
 800725c:	4623      	mov	r3, r4
 800725e:	eb18 0303 	adds.w	r3, r8, r3
 8007262:	613b      	str	r3, [r7, #16]
 8007264:	462b      	mov	r3, r5
 8007266:	eb49 0303 	adc.w	r3, r9, r3
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007278:	4629      	mov	r1, r5
 800727a:	024b      	lsls	r3, r1, #9
 800727c:	4621      	mov	r1, r4
 800727e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007282:	4621      	mov	r1, r4
 8007284:	024a      	lsls	r2, r1, #9
 8007286:	4610      	mov	r0, r2
 8007288:	4619      	mov	r1, r3
 800728a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800728e:	2200      	movs	r2, #0
 8007290:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007292:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007294:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007298:	f7f9 fcf6 	bl	8000c88 <__aeabi_uldivmod>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4613      	mov	r3, r2
 80072a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072a6:	e065      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x420>
 80072a8:	40023800 	.word	0x40023800
 80072ac:	00f42400 	.word	0x00f42400
 80072b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b4:	4b3d      	ldr	r3, [pc, #244]	@ (80073ac <HAL_RCC_GetSysClockFreq+0x458>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	099b      	lsrs	r3, r3, #6
 80072ba:	2200      	movs	r2, #0
 80072bc:	4618      	mov	r0, r3
 80072be:	4611      	mov	r1, r2
 80072c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80072c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80072c6:	2300      	movs	r3, #0
 80072c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80072ce:	4642      	mov	r2, r8
 80072d0:	464b      	mov	r3, r9
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f04f 0100 	mov.w	r1, #0
 80072da:	0159      	lsls	r1, r3, #5
 80072dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072e0:	0150      	lsls	r0, r2, #5
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4641      	mov	r1, r8
 80072e8:	1a51      	subs	r1, r2, r1
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	4649      	mov	r1, r9
 80072ee:	eb63 0301 	sbc.w	r3, r3, r1
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007300:	4659      	mov	r1, fp
 8007302:	018b      	lsls	r3, r1, #6
 8007304:	4651      	mov	r1, sl
 8007306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800730a:	4651      	mov	r1, sl
 800730c:	018a      	lsls	r2, r1, #6
 800730e:	4651      	mov	r1, sl
 8007310:	1a54      	subs	r4, r2, r1
 8007312:	4659      	mov	r1, fp
 8007314:	eb63 0501 	sbc.w	r5, r3, r1
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	00eb      	lsls	r3, r5, #3
 8007322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007326:	00e2      	lsls	r2, r4, #3
 8007328:	4614      	mov	r4, r2
 800732a:	461d      	mov	r5, r3
 800732c:	4643      	mov	r3, r8
 800732e:	18e3      	adds	r3, r4, r3
 8007330:	603b      	str	r3, [r7, #0]
 8007332:	464b      	mov	r3, r9
 8007334:	eb45 0303 	adc.w	r3, r5, r3
 8007338:	607b      	str	r3, [r7, #4]
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007346:	4629      	mov	r1, r5
 8007348:	028b      	lsls	r3, r1, #10
 800734a:	4621      	mov	r1, r4
 800734c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007350:	4621      	mov	r1, r4
 8007352:	028a      	lsls	r2, r1, #10
 8007354:	4610      	mov	r0, r2
 8007356:	4619      	mov	r1, r3
 8007358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800735c:	2200      	movs	r2, #0
 800735e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007360:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007362:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007366:	f7f9 fc8f 	bl	8000c88 <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4613      	mov	r3, r2
 8007370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007374:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <HAL_RCC_GetSysClockFreq+0x458>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	0f1b      	lsrs	r3, r3, #28
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800738a:	fbb2 f3f3 	udiv	r3, r2, r3
 800738e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007392:	e003      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007394:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800739a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800739c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	37b8      	adds	r7, #184	@ 0xb8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073aa:	bf00      	nop
 80073ac:	40023800 	.word	0x40023800
 80073b0:	00f42400 	.word	0x00f42400

080073b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e28d      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 8083 	beq.w	80074da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80073d4:	4b94      	ldr	r3, [pc, #592]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 030c 	and.w	r3, r3, #12
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d019      	beq.n	8007414 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80073e0:	4b91      	ldr	r3, [pc, #580]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d106      	bne.n	80073fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80073ec:	4b8e      	ldr	r3, [pc, #568]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073f8:	d00c      	beq.n	8007414 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073fa:	4b8b      	ldr	r3, [pc, #556]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007402:	2b0c      	cmp	r3, #12
 8007404:	d112      	bne.n	800742c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007406:	4b88      	ldr	r3, [pc, #544]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800740e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007412:	d10b      	bne.n	800742c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007414:	4b84      	ldr	r3, [pc, #528]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d05b      	beq.n	80074d8 <HAL_RCC_OscConfig+0x124>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d157      	bne.n	80074d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e25a      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007434:	d106      	bne.n	8007444 <HAL_RCC_OscConfig+0x90>
 8007436:	4b7c      	ldr	r3, [pc, #496]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a7b      	ldr	r2, [pc, #492]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800743c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	e01d      	b.n	8007480 <HAL_RCC_OscConfig+0xcc>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800744c:	d10c      	bne.n	8007468 <HAL_RCC_OscConfig+0xb4>
 800744e:	4b76      	ldr	r3, [pc, #472]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a75      	ldr	r2, [pc, #468]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	4b73      	ldr	r3, [pc, #460]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a72      	ldr	r2, [pc, #456]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	e00b      	b.n	8007480 <HAL_RCC_OscConfig+0xcc>
 8007468:	4b6f      	ldr	r3, [pc, #444]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a6e      	ldr	r2, [pc, #440]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800746e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	4b6c      	ldr	r3, [pc, #432]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a6b      	ldr	r2, [pc, #428]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800747a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800747e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d013      	beq.n	80074b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007488:	f7fb fd2a 	bl	8002ee0 <HAL_GetTick>
 800748c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800748e:	e008      	b.n	80074a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007490:	f7fb fd26 	bl	8002ee0 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b64      	cmp	r3, #100	@ 0x64
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e21f      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074a2:	4b61      	ldr	r3, [pc, #388]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0f0      	beq.n	8007490 <HAL_RCC_OscConfig+0xdc>
 80074ae:	e014      	b.n	80074da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b0:	f7fb fd16 	bl	8002ee0 <HAL_GetTick>
 80074b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074b6:	e008      	b.n	80074ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074b8:	f7fb fd12 	bl	8002ee0 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b64      	cmp	r3, #100	@ 0x64
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e20b      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ca:	4b57      	ldr	r3, [pc, #348]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f0      	bne.n	80074b8 <HAL_RCC_OscConfig+0x104>
 80074d6:	e000      	b.n	80074da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d06f      	beq.n	80075c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80074e6:	4b50      	ldr	r3, [pc, #320]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 030c 	and.w	r3, r3, #12
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d017      	beq.n	8007522 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80074f2:	4b4d      	ldr	r3, [pc, #308]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d105      	bne.n	800750a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80074fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800750a:	4b47      	ldr	r3, [pc, #284]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007512:	2b0c      	cmp	r3, #12
 8007514:	d11c      	bne.n	8007550 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007516:	4b44      	ldr	r3, [pc, #272]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d116      	bne.n	8007550 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007522:	4b41      	ldr	r3, [pc, #260]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d005      	beq.n	800753a <HAL_RCC_OscConfig+0x186>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d001      	beq.n	800753a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e1d3      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800753a:	4b3b      	ldr	r3, [pc, #236]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	4937      	ldr	r1, [pc, #220]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800754a:	4313      	orrs	r3, r2
 800754c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800754e:	e03a      	b.n	80075c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d020      	beq.n	800759a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007558:	4b34      	ldr	r3, [pc, #208]	@ (800762c <HAL_RCC_OscConfig+0x278>)
 800755a:	2201      	movs	r2, #1
 800755c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755e:	f7fb fcbf 	bl	8002ee0 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007566:	f7fb fcbb 	bl	8002ee0 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e1b4      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007578:	4b2b      	ldr	r3, [pc, #172]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0f0      	beq.n	8007566 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007584:	4b28      	ldr	r3, [pc, #160]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	4925      	ldr	r1, [pc, #148]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 8007594:	4313      	orrs	r3, r2
 8007596:	600b      	str	r3, [r1, #0]
 8007598:	e015      	b.n	80075c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800759a:	4b24      	ldr	r3, [pc, #144]	@ (800762c <HAL_RCC_OscConfig+0x278>)
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a0:	f7fb fc9e 	bl	8002ee0 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075a8:	f7fb fc9a 	bl	8002ee0 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e193      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f0      	bne.n	80075a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d036      	beq.n	8007640 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d016      	beq.n	8007608 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075da:	4b15      	ldr	r3, [pc, #84]	@ (8007630 <HAL_RCC_OscConfig+0x27c>)
 80075dc:	2201      	movs	r2, #1
 80075de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e0:	f7fb fc7e 	bl	8002ee0 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075e8:	f7fb fc7a 	bl	8002ee0 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e173      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <HAL_RCC_OscConfig+0x274>)
 80075fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0f0      	beq.n	80075e8 <HAL_RCC_OscConfig+0x234>
 8007606:	e01b      	b.n	8007640 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007608:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <HAL_RCC_OscConfig+0x27c>)
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760e:	f7fb fc67 	bl	8002ee0 <HAL_GetTick>
 8007612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007614:	e00e      	b.n	8007634 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007616:	f7fb fc63 	bl	8002ee0 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d907      	bls.n	8007634 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e15c      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
 8007628:	40023800 	.word	0x40023800
 800762c:	42470000 	.word	0x42470000
 8007630:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007634:	4b8a      	ldr	r3, [pc, #552]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1ea      	bne.n	8007616 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 8097 	beq.w	800777c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800764e:	2300      	movs	r3, #0
 8007650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007652:	4b83      	ldr	r3, [pc, #524]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10f      	bne.n	800767e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800765e:	2300      	movs	r3, #0
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	4b7f      	ldr	r3, [pc, #508]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007666:	4a7e      	ldr	r2, [pc, #504]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800766c:	6413      	str	r3, [r2, #64]	@ 0x40
 800766e:	4b7c      	ldr	r3, [pc, #496]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007676:	60bb      	str	r3, [r7, #8]
 8007678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800767a:	2301      	movs	r3, #1
 800767c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800767e:	4b79      	ldr	r3, [pc, #484]	@ (8007864 <HAL_RCC_OscConfig+0x4b0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007686:	2b00      	cmp	r3, #0
 8007688:	d118      	bne.n	80076bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800768a:	4b76      	ldr	r3, [pc, #472]	@ (8007864 <HAL_RCC_OscConfig+0x4b0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a75      	ldr	r2, [pc, #468]	@ (8007864 <HAL_RCC_OscConfig+0x4b0>)
 8007690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007696:	f7fb fc23 	bl	8002ee0 <HAL_GetTick>
 800769a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800769c:	e008      	b.n	80076b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800769e:	f7fb fc1f 	bl	8002ee0 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d901      	bls.n	80076b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e118      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076b0:	4b6c      	ldr	r3, [pc, #432]	@ (8007864 <HAL_RCC_OscConfig+0x4b0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0f0      	beq.n	800769e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d106      	bne.n	80076d2 <HAL_RCC_OscConfig+0x31e>
 80076c4:	4b66      	ldr	r3, [pc, #408]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80076c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c8:	4a65      	ldr	r2, [pc, #404]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80076d0:	e01c      	b.n	800770c <HAL_RCC_OscConfig+0x358>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b05      	cmp	r3, #5
 80076d8:	d10c      	bne.n	80076f4 <HAL_RCC_OscConfig+0x340>
 80076da:	4b61      	ldr	r3, [pc, #388]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80076dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076de:	4a60      	ldr	r2, [pc, #384]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80076e0:	f043 0304 	orr.w	r3, r3, #4
 80076e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80076e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80076e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ea:	4a5d      	ldr	r2, [pc, #372]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80076f2:	e00b      	b.n	800770c <HAL_RCC_OscConfig+0x358>
 80076f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80076f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f8:	4a59      	ldr	r2, [pc, #356]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80076fa:	f023 0301 	bic.w	r3, r3, #1
 80076fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007700:	4b57      	ldr	r3, [pc, #348]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007704:	4a56      	ldr	r2, [pc, #344]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007706:	f023 0304 	bic.w	r3, r3, #4
 800770a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d015      	beq.n	8007740 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007714:	f7fb fbe4 	bl	8002ee0 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800771a:	e00a      	b.n	8007732 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800771c:	f7fb fbe0 	bl	8002ee0 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772a:	4293      	cmp	r3, r2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e0d7      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007732:	4b4b      	ldr	r3, [pc, #300]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0ee      	beq.n	800771c <HAL_RCC_OscConfig+0x368>
 800773e:	e014      	b.n	800776a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007740:	f7fb fbce 	bl	8002ee0 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007746:	e00a      	b.n	800775e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007748:	f7fb fbca 	bl	8002ee0 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007756:	4293      	cmp	r3, r2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e0c1      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800775e:	4b40      	ldr	r3, [pc, #256]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1ee      	bne.n	8007748 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d105      	bne.n	800777c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007770:	4b3b      	ldr	r3, [pc, #236]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007774:	4a3a      	ldr	r2, [pc, #232]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800777a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80ad 	beq.w	80078e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007786:	4b36      	ldr	r3, [pc, #216]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 030c 	and.w	r3, r3, #12
 800778e:	2b08      	cmp	r3, #8
 8007790:	d060      	beq.n	8007854 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d145      	bne.n	8007826 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800779a:	4b33      	ldr	r3, [pc, #204]	@ (8007868 <HAL_RCC_OscConfig+0x4b4>)
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a0:	f7fb fb9e 	bl	8002ee0 <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a6:	e008      	b.n	80077ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a8:	f7fb fb9a 	bl	8002ee0 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e093      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ba:	4b29      	ldr	r3, [pc, #164]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f0      	bne.n	80077a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69da      	ldr	r2, [r3, #28]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	019b      	lsls	r3, r3, #6
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077dc:	085b      	lsrs	r3, r3, #1
 80077de:	3b01      	subs	r3, #1
 80077e0:	041b      	lsls	r3, r3, #16
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e8:	061b      	lsls	r3, r3, #24
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f0:	071b      	lsls	r3, r3, #28
 80077f2:	491b      	ldr	r1, [pc, #108]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007868 <HAL_RCC_OscConfig+0x4b4>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fe:	f7fb fb6f 	bl	8002ee0 <HAL_GetTick>
 8007802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007804:	e008      	b.n	8007818 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007806:	f7fb fb6b 	bl	8002ee0 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e064      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007818:	4b11      	ldr	r3, [pc, #68]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0f0      	beq.n	8007806 <HAL_RCC_OscConfig+0x452>
 8007824:	e05c      	b.n	80078e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007826:	4b10      	ldr	r3, [pc, #64]	@ (8007868 <HAL_RCC_OscConfig+0x4b4>)
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782c:	f7fb fb58 	bl	8002ee0 <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007832:	e008      	b.n	8007846 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007834:	f7fb fb54 	bl	8002ee0 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e04d      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007846:	4b06      	ldr	r3, [pc, #24]	@ (8007860 <HAL_RCC_OscConfig+0x4ac>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f0      	bne.n	8007834 <HAL_RCC_OscConfig+0x480>
 8007852:	e045      	b.n	80078e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d107      	bne.n	800786c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e040      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
 8007860:	40023800 	.word	0x40023800
 8007864:	40007000 	.word	0x40007000
 8007868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800786c:	4b1f      	ldr	r3, [pc, #124]	@ (80078ec <HAL_RCC_OscConfig+0x538>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d030      	beq.n	80078dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007884:	429a      	cmp	r2, r3
 8007886:	d129      	bne.n	80078dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007892:	429a      	cmp	r2, r3
 8007894:	d122      	bne.n	80078dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800789c:	4013      	ands	r3, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d119      	bne.n	80078dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	3b01      	subs	r3, #1
 80078b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d10f      	bne.n	80078dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d107      	bne.n	80078dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078d8:	429a      	cmp	r2, r3
 80078da:	d001      	beq.n	80078e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e000      	b.n	80078e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40023800 	.word	0x40023800

080078f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e041      	b.n	8007986 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fb f846 	bl	80029a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3304      	adds	r3, #4
 800792c:	4619      	mov	r1, r3
 800792e:	4610      	mov	r0, r2
 8007930:	f000 fbf0 	bl	8008114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e041      	b.n	8007a24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d106      	bne.n	80079ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7fa ffd5 	bl	8002964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f000 fba1 	bl	8008114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d109      	bne.n	8007a50 <HAL_TIM_PWM_Start+0x24>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	bf14      	ite	ne
 8007a48:	2301      	movne	r3, #1
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e022      	b.n	8007a96 <HAL_TIM_PWM_Start+0x6a>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d109      	bne.n	8007a6a <HAL_TIM_PWM_Start+0x3e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	bf14      	ite	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	2300      	moveq	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	e015      	b.n	8007a96 <HAL_TIM_PWM_Start+0x6a>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d109      	bne.n	8007a84 <HAL_TIM_PWM_Start+0x58>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	bf14      	ite	ne
 8007a7c:	2301      	movne	r3, #1
 8007a7e:	2300      	moveq	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	e008      	b.n	8007a96 <HAL_TIM_PWM_Start+0x6a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e07c      	b.n	8007b98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_PWM_Start+0x82>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aac:	e013      	b.n	8007ad6 <HAL_TIM_PWM_Start+0xaa>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d104      	bne.n	8007abe <HAL_TIM_PWM_Start+0x92>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007abc:	e00b      	b.n	8007ad6 <HAL_TIM_PWM_Start+0xaa>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_PWM_Start+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007acc:	e003      	b.n	8007ad6 <HAL_TIM_PWM_Start+0xaa>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2201      	movs	r2, #1
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fe0e 	bl	8008700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8007ba0 <HAL_TIM_PWM_Start+0x174>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_TIM_PWM_Start+0xcc>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba4 <HAL_TIM_PWM_Start+0x178>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d101      	bne.n	8007afc <HAL_TIM_PWM_Start+0xd0>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <HAL_TIM_PWM_Start+0xd2>
 8007afc:	2300      	movs	r3, #0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d007      	beq.n	8007b12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a22      	ldr	r2, [pc, #136]	@ (8007ba0 <HAL_TIM_PWM_Start+0x174>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d022      	beq.n	8007b62 <HAL_TIM_PWM_Start+0x136>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b24:	d01d      	beq.n	8007b62 <HAL_TIM_PWM_Start+0x136>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba8 <HAL_TIM_PWM_Start+0x17c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d018      	beq.n	8007b62 <HAL_TIM_PWM_Start+0x136>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1d      	ldr	r2, [pc, #116]	@ (8007bac <HAL_TIM_PWM_Start+0x180>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d013      	beq.n	8007b62 <HAL_TIM_PWM_Start+0x136>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb0 <HAL_TIM_PWM_Start+0x184>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00e      	beq.n	8007b62 <HAL_TIM_PWM_Start+0x136>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a16      	ldr	r2, [pc, #88]	@ (8007ba4 <HAL_TIM_PWM_Start+0x178>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_TIM_PWM_Start+0x136>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a18      	ldr	r2, [pc, #96]	@ (8007bb4 <HAL_TIM_PWM_Start+0x188>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIM_PWM_Start+0x136>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a16      	ldr	r2, [pc, #88]	@ (8007bb8 <HAL_TIM_PWM_Start+0x18c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d111      	bne.n	8007b86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b06      	cmp	r3, #6
 8007b72:	d010      	beq.n	8007b96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0201 	orr.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b84:	e007      	b.n	8007b96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f042 0201 	orr.w	r2, r2, #1
 8007b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	40010000 	.word	0x40010000
 8007ba4:	40010400 	.word	0x40010400
 8007ba8:	40000400 	.word	0x40000400
 8007bac:	40000800 	.word	0x40000800
 8007bb0:	40000c00 	.word	0x40000c00
 8007bb4:	40014000 	.word	0x40014000
 8007bb8:	40001800 	.word	0x40001800

08007bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d020      	beq.n	8007c20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01b      	beq.n	8007c20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0202 	mvn.w	r2, #2
 8007bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa65 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
 8007c0c:	e005      	b.n	8007c1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa57 	bl	80080c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fa68 	bl	80080ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 0304 	and.w	r3, r3, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d020      	beq.n	8007c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01b      	beq.n	8007c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0204 	mvn.w	r2, #4
 8007c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa3f 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
 8007c58:	e005      	b.n	8007c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa31 	bl	80080c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fa42 	bl	80080ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d020      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01b      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0208 	mvn.w	r2, #8
 8007c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa19 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
 8007ca4:	e005      	b.n	8007cb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa0b 	bl	80080c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fa1c 	bl	80080ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d020      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01b      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0210 	mvn.w	r2, #16
 8007cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2208      	movs	r2, #8
 8007cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f9f3 	bl	80080d6 <HAL_TIM_IC_CaptureCallback>
 8007cf0:	e005      	b.n	8007cfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f9e5 	bl	80080c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f9f6 	bl	80080ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00c      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0201 	mvn.w	r2, #1
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9c3 	bl	80080ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00c      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fdd8 	bl	80088fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00c      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f9c7 	bl	80080fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00c      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0220 	mvn.w	r2, #32
 8007d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fdaa 	bl	80088e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e0ae      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b0c      	cmp	r3, #12
 8007dc6:	f200 809f 	bhi.w	8007f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dca:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007e05 	.word	0x08007e05
 8007dd4:	08007f09 	.word	0x08007f09
 8007dd8:	08007f09 	.word	0x08007f09
 8007ddc:	08007f09 	.word	0x08007f09
 8007de0:	08007e45 	.word	0x08007e45
 8007de4:	08007f09 	.word	0x08007f09
 8007de8:	08007f09 	.word	0x08007f09
 8007dec:	08007f09 	.word	0x08007f09
 8007df0:	08007e87 	.word	0x08007e87
 8007df4:	08007f09 	.word	0x08007f09
 8007df8:	08007f09 	.word	0x08007f09
 8007dfc:	08007f09 	.word	0x08007f09
 8007e00:	08007ec7 	.word	0x08007ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fa2e 	bl	800826c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0208 	orr.w	r2, r2, #8
 8007e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0204 	bic.w	r2, r2, #4
 8007e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6999      	ldr	r1, [r3, #24]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	619a      	str	r2, [r3, #24]
      break;
 8007e42:	e064      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fa7e 	bl	800834c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6999      	ldr	r1, [r3, #24]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	021a      	lsls	r2, r3, #8
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	619a      	str	r2, [r3, #24]
      break;
 8007e84:	e043      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fad3 	bl	8008438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0208 	orr.w	r2, r2, #8
 8007ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0204 	bic.w	r2, r2, #4
 8007eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69d9      	ldr	r1, [r3, #28]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	61da      	str	r2, [r3, #28]
      break;
 8007ec4:	e023      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fb27 	bl	8008520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69d9      	ldr	r1, [r3, #28]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	021a      	lsls	r2, r3, #8
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	61da      	str	r2, [r3, #28]
      break;
 8007f06:	e002      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_TIM_ConfigClockSource+0x1c>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e0b4      	b.n	80080a6 <HAL_TIM_ConfigClockSource+0x186>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f74:	d03e      	beq.n	8007ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8007f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f7a:	f200 8087 	bhi.w	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f82:	f000 8086 	beq.w	8008092 <HAL_TIM_ConfigClockSource+0x172>
 8007f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f8a:	d87f      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007f8c:	2b70      	cmp	r3, #112	@ 0x70
 8007f8e:	d01a      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0xa6>
 8007f90:	2b70      	cmp	r3, #112	@ 0x70
 8007f92:	d87b      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007f94:	2b60      	cmp	r3, #96	@ 0x60
 8007f96:	d050      	beq.n	800803a <HAL_TIM_ConfigClockSource+0x11a>
 8007f98:	2b60      	cmp	r3, #96	@ 0x60
 8007f9a:	d877      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007f9c:	2b50      	cmp	r3, #80	@ 0x50
 8007f9e:	d03c      	beq.n	800801a <HAL_TIM_ConfigClockSource+0xfa>
 8007fa0:	2b50      	cmp	r3, #80	@ 0x50
 8007fa2:	d873      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007fa4:	2b40      	cmp	r3, #64	@ 0x40
 8007fa6:	d058      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x13a>
 8007fa8:	2b40      	cmp	r3, #64	@ 0x40
 8007faa:	d86f      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007fac:	2b30      	cmp	r3, #48	@ 0x30
 8007fae:	d064      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x15a>
 8007fb0:	2b30      	cmp	r3, #48	@ 0x30
 8007fb2:	d86b      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d060      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x15a>
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d867      	bhi.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d05c      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x15a>
 8007fc0:	2b10      	cmp	r3, #16
 8007fc2:	d05a      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x15a>
 8007fc4:	e062      	b.n	800808c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fd6:	f000 fb73 	bl	80086c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	609a      	str	r2, [r3, #8]
      break;
 8007ff2:	e04f      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008004:	f000 fb5c 	bl	80086c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008016:	609a      	str	r2, [r3, #8]
      break;
 8008018:	e03c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008026:	461a      	mov	r2, r3
 8008028:	f000 fad0 	bl	80085cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2150      	movs	r1, #80	@ 0x50
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fb29 	bl	800868a <TIM_ITRx_SetConfig>
      break;
 8008038:	e02c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008046:	461a      	mov	r2, r3
 8008048:	f000 faef 	bl	800862a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2160      	movs	r1, #96	@ 0x60
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fb19 	bl	800868a <TIM_ITRx_SetConfig>
      break;
 8008058:	e01c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008066:	461a      	mov	r2, r3
 8008068:	f000 fab0 	bl	80085cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2140      	movs	r1, #64	@ 0x40
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fb09 	bl	800868a <TIM_ITRx_SetConfig>
      break;
 8008078:	e00c      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4619      	mov	r1, r3
 8008084:	4610      	mov	r0, r2
 8008086:	f000 fb00 	bl	800868a <TIM_ITRx_SetConfig>
      break;
 800808a:	e003      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
      break;
 8008090:	e000      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
	...

08008114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a46      	ldr	r2, [pc, #280]	@ (8008240 <TIM_Base_SetConfig+0x12c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d013      	beq.n	8008154 <TIM_Base_SetConfig+0x40>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008132:	d00f      	beq.n	8008154 <TIM_Base_SetConfig+0x40>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a43      	ldr	r2, [pc, #268]	@ (8008244 <TIM_Base_SetConfig+0x130>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d00b      	beq.n	8008154 <TIM_Base_SetConfig+0x40>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a42      	ldr	r2, [pc, #264]	@ (8008248 <TIM_Base_SetConfig+0x134>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d007      	beq.n	8008154 <TIM_Base_SetConfig+0x40>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a41      	ldr	r2, [pc, #260]	@ (800824c <TIM_Base_SetConfig+0x138>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d003      	beq.n	8008154 <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a40      	ldr	r2, [pc, #256]	@ (8008250 <TIM_Base_SetConfig+0x13c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d108      	bne.n	8008166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800815a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a35      	ldr	r2, [pc, #212]	@ (8008240 <TIM_Base_SetConfig+0x12c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d02b      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008174:	d027      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a32      	ldr	r2, [pc, #200]	@ (8008244 <TIM_Base_SetConfig+0x130>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d023      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a31      	ldr	r2, [pc, #196]	@ (8008248 <TIM_Base_SetConfig+0x134>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d01f      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a30      	ldr	r2, [pc, #192]	@ (800824c <TIM_Base_SetConfig+0x138>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d01b      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a2f      	ldr	r2, [pc, #188]	@ (8008250 <TIM_Base_SetConfig+0x13c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d017      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a2e      	ldr	r2, [pc, #184]	@ (8008254 <TIM_Base_SetConfig+0x140>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d013      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008258 <TIM_Base_SetConfig+0x144>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00f      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a2c      	ldr	r2, [pc, #176]	@ (800825c <TIM_Base_SetConfig+0x148>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00b      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a2b      	ldr	r2, [pc, #172]	@ (8008260 <TIM_Base_SetConfig+0x14c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d007      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a2a      	ldr	r2, [pc, #168]	@ (8008264 <TIM_Base_SetConfig+0x150>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d003      	beq.n	80081c6 <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a29      	ldr	r2, [pc, #164]	@ (8008268 <TIM_Base_SetConfig+0x154>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d108      	bne.n	80081d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a10      	ldr	r2, [pc, #64]	@ (8008240 <TIM_Base_SetConfig+0x12c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_Base_SetConfig+0xf8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a12      	ldr	r2, [pc, #72]	@ (8008250 <TIM_Base_SetConfig+0x13c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d103      	bne.n	8008214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b01      	cmp	r3, #1
 8008224:	d105      	bne.n	8008232 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f023 0201 	bic.w	r2, r3, #1
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	611a      	str	r2, [r3, #16]
  }
}
 8008232:	bf00      	nop
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40010000 	.word	0x40010000
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800
 800824c:	40000c00 	.word	0x40000c00
 8008250:	40010400 	.word	0x40010400
 8008254:	40014000 	.word	0x40014000
 8008258:	40014400 	.word	0x40014400
 800825c:	40014800 	.word	0x40014800
 8008260:	40001800 	.word	0x40001800
 8008264:	40001c00 	.word	0x40001c00
 8008268:	40002000 	.word	0x40002000

0800826c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	f023 0201 	bic.w	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800829a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f023 0302 	bic.w	r3, r3, #2
 80082b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a20      	ldr	r2, [pc, #128]	@ (8008344 <TIM_OC1_SetConfig+0xd8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d003      	beq.n	80082d0 <TIM_OC1_SetConfig+0x64>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008348 <TIM_OC1_SetConfig+0xdc>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d10c      	bne.n	80082ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f023 0308 	bic.w	r3, r3, #8
 80082d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	4313      	orrs	r3, r2
 80082e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f023 0304 	bic.w	r3, r3, #4
 80082e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a15      	ldr	r2, [pc, #84]	@ (8008344 <TIM_OC1_SetConfig+0xd8>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d003      	beq.n	80082fa <TIM_OC1_SetConfig+0x8e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a14      	ldr	r2, [pc, #80]	@ (8008348 <TIM_OC1_SetConfig+0xdc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d111      	bne.n	800831e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4313      	orrs	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	40010000 	.word	0x40010000
 8008348:	40010400 	.word	0x40010400

0800834c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	f023 0210 	bic.w	r2, r3, #16
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800837a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	021b      	lsls	r3, r3, #8
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f023 0320 	bic.w	r3, r3, #32
 8008396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a22      	ldr	r2, [pc, #136]	@ (8008430 <TIM_OC2_SetConfig+0xe4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d003      	beq.n	80083b4 <TIM_OC2_SetConfig+0x68>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a21      	ldr	r2, [pc, #132]	@ (8008434 <TIM_OC2_SetConfig+0xe8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d10d      	bne.n	80083d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a17      	ldr	r2, [pc, #92]	@ (8008430 <TIM_OC2_SetConfig+0xe4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_OC2_SetConfig+0x94>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a16      	ldr	r2, [pc, #88]	@ (8008434 <TIM_OC2_SetConfig+0xe8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d113      	bne.n	8008408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	621a      	str	r2, [r3, #32]
}
 8008422:	bf00      	nop
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40010000 	.word	0x40010000
 8008434:	40010400 	.word	0x40010400

08008438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0303 	bic.w	r3, r3, #3
 800846e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a21      	ldr	r2, [pc, #132]	@ (8008518 <TIM_OC3_SetConfig+0xe0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d003      	beq.n	800849e <TIM_OC3_SetConfig+0x66>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a20      	ldr	r2, [pc, #128]	@ (800851c <TIM_OC3_SetConfig+0xe4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d10d      	bne.n	80084ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	021b      	lsls	r3, r3, #8
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a16      	ldr	r2, [pc, #88]	@ (8008518 <TIM_OC3_SetConfig+0xe0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d003      	beq.n	80084ca <TIM_OC3_SetConfig+0x92>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a15      	ldr	r2, [pc, #84]	@ (800851c <TIM_OC3_SetConfig+0xe4>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d113      	bne.n	80084f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	621a      	str	r2, [r3, #32]
}
 800850c:	bf00      	nop
 800850e:	371c      	adds	r7, #28
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	40010000 	.word	0x40010000
 800851c:	40010400 	.word	0x40010400

08008520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800854e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4313      	orrs	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800856a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	031b      	lsls	r3, r3, #12
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a12      	ldr	r2, [pc, #72]	@ (80085c4 <TIM_OC4_SetConfig+0xa4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC4_SetConfig+0x68>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a11      	ldr	r2, [pc, #68]	@ (80085c8 <TIM_OC4_SetConfig+0xa8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d109      	bne.n	800859c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800858e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	019b      	lsls	r3, r3, #6
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	4313      	orrs	r3, r2
 800859a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	40010000 	.word	0x40010000
 80085c8:	40010400 	.word	0x40010400

080085cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	f023 0201 	bic.w	r2, r3, #1
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	4313      	orrs	r3, r2
 8008600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f023 030a 	bic.w	r3, r3, #10
 8008608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4313      	orrs	r3, r2
 8008610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	621a      	str	r2, [r3, #32]
}
 800861e:	bf00      	nop
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800862a:	b480      	push	{r7}
 800862c:	b087      	sub	sp, #28
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	f023 0210 	bic.w	r2, r3, #16
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	031b      	lsls	r3, r3, #12
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	4313      	orrs	r3, r2
 800865e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008666:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	621a      	str	r2, [r3, #32]
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f043 0307 	orr.w	r3, r3, #7
 80086ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	609a      	str	r2, [r3, #8]
}
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	021a      	lsls	r2, r3, #8
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	431a      	orrs	r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	609a      	str	r2, [r3, #8]
}
 80086f4:	bf00      	nop
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 031f 	and.w	r3, r3, #31
 8008712:	2201      	movs	r2, #1
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1a      	ldr	r2, [r3, #32]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	43db      	mvns	r3, r3
 8008722:	401a      	ands	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a1a      	ldr	r2, [r3, #32]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f003 031f 	and.w	r3, r3, #31
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	fa01 f303 	lsl.w	r3, r1, r3
 8008738:	431a      	orrs	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	621a      	str	r2, [r3, #32]
}
 800873e:	bf00      	nop
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
	...

0800874c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008760:	2302      	movs	r3, #2
 8008762:	e05a      	b.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a21      	ldr	r2, [pc, #132]	@ (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d022      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b0:	d01d      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a1d      	ldr	r2, [pc, #116]	@ (800882c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d018      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d013      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00e      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a18      	ldr	r2, [pc, #96]	@ (8008838 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d009      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a17      	ldr	r2, [pc, #92]	@ (800883c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d004      	beq.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a15      	ldr	r2, [pc, #84]	@ (8008840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d10c      	bne.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	40010000 	.word	0x40010000
 800882c:	40000400 	.word	0x40000400
 8008830:	40000800 	.word	0x40000800
 8008834:	40000c00 	.word	0x40000c00
 8008838:	40010400 	.word	0x40010400
 800883c:	40014000 	.word	0x40014000
 8008840:	40001800 	.word	0x40001800

08008844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d101      	bne.n	8008860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800885c:	2302      	movs	r3, #2
 800885e:	e03d      	b.n	80088dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4313      	orrs	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e042      	b.n	80089a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7fa f8ac 	bl	8002a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2224      	movs	r2, #36	@ 0x24
 8008940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fdbd 	bl	80094d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695a      	ldr	r2, [r3, #20]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08a      	sub	sp, #40	@ 0x28
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	4613      	mov	r3, r2
 80089be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d175      	bne.n	8008abc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d002      	beq.n	80089dc <HAL_UART_Transmit+0x2c>
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e06e      	b.n	8008abe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2221      	movs	r2, #33	@ 0x21
 80089ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ee:	f7fa fa77 	bl	8002ee0 <HAL_GetTick>
 80089f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	88fa      	ldrh	r2, [r7, #6]
 80089f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	88fa      	ldrh	r2, [r7, #6]
 80089fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a08:	d108      	bne.n	8008a1c <HAL_UART_Transmit+0x6c>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d104      	bne.n	8008a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	61bb      	str	r3, [r7, #24]
 8008a1a:	e003      	b.n	8008a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a24:	e02e      	b.n	8008a84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2180      	movs	r1, #128	@ 0x80
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fb1f 	bl	8009074 <UART_WaitOnFlagUntilTimeout>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e03a      	b.n	8008abe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10b      	bne.n	8008a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	3302      	adds	r3, #2
 8008a62:	61bb      	str	r3, [r7, #24]
 8008a64:	e007      	b.n	8008a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	3301      	adds	r3, #1
 8008a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1cb      	bne.n	8008a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2200      	movs	r2, #0
 8008a96:	2140      	movs	r1, #64	@ 0x40
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 faeb 	bl	8009074 <UART_WaitOnFlagUntilTimeout>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e006      	b.n	8008abe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e000      	b.n	8008abe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008abc:	2302      	movs	r3, #2
  }
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d112      	bne.n	8008b06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <HAL_UART_Receive_IT+0x26>
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e00b      	b.n	8008b08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008af6:	88fb      	ldrh	r3, [r7, #6]
 8008af8:	461a      	mov	r2, r3
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 fb12 	bl	8009126 <UART_Start_Receive_IT>
 8008b02:	4603      	mov	r3, r0
 8008b04:	e000      	b.n	8008b08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008b06:	2302      	movs	r3, #2
  }
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b0ba      	sub	sp, #232	@ 0xe8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b46:	f003 030f 	and.w	r3, r3, #15
 8008b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10f      	bne.n	8008b76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d009      	beq.n	8008b76 <HAL_UART_IRQHandler+0x66>
 8008b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fbf2 	bl	8009358 <UART_Receive_IT>
      return;
 8008b74:	e25b      	b.n	800902e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 80de 	beq.w	8008d3c <HAL_UART_IRQHandler+0x22c>
 8008b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 80d1 	beq.w	8008d3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <HAL_UART_IRQHandler+0xae>
 8008ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb6:	f043 0201 	orr.w	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc2:	f003 0304 	and.w	r3, r3, #4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00b      	beq.n	8008be2 <HAL_UART_IRQHandler+0xd2>
 8008bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bda:	f043 0202 	orr.w	r2, r3, #2
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <HAL_UART_IRQHandler+0xf6>
 8008bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfe:	f043 0204 	orr.w	r2, r3, #4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c0a:	f003 0308 	and.w	r3, r3, #8
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d011      	beq.n	8008c36 <HAL_UART_IRQHandler+0x126>
 8008c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d105      	bne.n	8008c2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d005      	beq.n	8008c36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c2e:	f043 0208 	orr.w	r2, r3, #8
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 81f2 	beq.w	8009024 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_UART_IRQHandler+0x14e>
 8008c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c50:	f003 0320 	and.w	r3, r3, #32
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fb7d 	bl	8009358 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c68:	2b40      	cmp	r3, #64	@ 0x40
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2301      	moveq	r3, #1
 8008c6e:	2300      	movne	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c7a:	f003 0308 	and.w	r3, r3, #8
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <HAL_UART_IRQHandler+0x17a>
 8008c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d04f      	beq.n	8008d2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa85 	bl	800919a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9a:	2b40      	cmp	r3, #64	@ 0x40
 8008c9c:	d141      	bne.n	8008d22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3314      	adds	r3, #20
 8008ca4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3314      	adds	r3, #20
 8008cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1d9      	bne.n	8008c9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d013      	beq.n	8008d1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8008ef0 <HAL_UART_IRQHandler+0x3e0>)
 8008cf8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fb f884 	bl	8003e0c <HAL_DMA_Abort_IT>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d016      	beq.n	8008d38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008d14:	4610      	mov	r0, r2
 8008d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d18:	e00e      	b.n	8008d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f994 	bl	8009048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d20:	e00a      	b.n	8008d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f990 	bl	8009048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d28:	e006      	b.n	8008d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f98c 	bl	8009048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008d36:	e175      	b.n	8009024 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d38:	bf00      	nop
    return;
 8008d3a:	e173      	b.n	8009024 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	f040 814f 	bne.w	8008fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4a:	f003 0310 	and.w	r3, r3, #16
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 8148 	beq.w	8008fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d58:	f003 0310 	and.w	r3, r3, #16
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8141 	beq.w	8008fe4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d62:	2300      	movs	r3, #0
 8008d64:	60bb      	str	r3, [r7, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60bb      	str	r3, [r7, #8]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	60bb      	str	r3, [r7, #8]
 8008d76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d82:	2b40      	cmp	r3, #64	@ 0x40
 8008d84:	f040 80b6 	bne.w	8008ef4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 8145 	beq.w	8009028 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008da6:	429a      	cmp	r2, r3
 8008da8:	f080 813e 	bcs.w	8009028 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008db2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dbe:	f000 8088 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008dee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1d9      	bne.n	8008dc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3314      	adds	r3, #20
 8008e14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3314      	adds	r3, #20
 8008e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e1      	bne.n	8008e0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3314      	adds	r3, #20
 8008e50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3314      	adds	r3, #20
 8008e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e3      	bne.n	8008e4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	330c      	adds	r3, #12
 8008e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ea2:	f023 0310 	bic.w	r3, r3, #16
 8008ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	330c      	adds	r3, #12
 8008eb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008eb4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008eb6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008eba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e3      	bne.n	8008e90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fa ff2d 	bl	8003d2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f8b7 	bl	800905c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008eee:	e09b      	b.n	8009028 <HAL_UART_IRQHandler+0x518>
 8008ef0:	08009261 	.word	0x08009261
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 808e 	beq.w	800902c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8089 	beq.w	800902c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	330c      	adds	r3, #12
 8008f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	330c      	adds	r3, #12
 8008f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e3      	bne.n	8008f1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3314      	adds	r3, #20
 8008f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	623b      	str	r3, [r7, #32]
   return(result);
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3314      	adds	r3, #20
 8008f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e3      	bne.n	8008f52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	330c      	adds	r3, #12
 8008f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f023 0310 	bic.w	r3, r3, #16
 8008fae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008fbc:	61fa      	str	r2, [r7, #28]
 8008fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	69b9      	ldr	r1, [r7, #24]
 8008fc2:	69fa      	ldr	r2, [r7, #28]
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e3      	bne.n	8008f98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f83d 	bl	800905c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fe2:	e023      	b.n	800902c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d009      	beq.n	8009004 <HAL_UART_IRQHandler+0x4f4>
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f943 	bl	8009288 <UART_Transmit_IT>
    return;
 8009002:	e014      	b.n	800902e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00e      	beq.n	800902e <HAL_UART_IRQHandler+0x51e>
 8009010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	d008      	beq.n	800902e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f983 	bl	8009328 <UART_EndTransmit_IT>
    return;
 8009022:	e004      	b.n	800902e <HAL_UART_IRQHandler+0x51e>
    return;
 8009024:	bf00      	nop
 8009026:	e002      	b.n	800902e <HAL_UART_IRQHandler+0x51e>
      return;
 8009028:	bf00      	nop
 800902a:	e000      	b.n	800902e <HAL_UART_IRQHandler+0x51e>
      return;
 800902c:	bf00      	nop
  }
}
 800902e:	37e8      	adds	r7, #232	@ 0xe8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	4613      	mov	r3, r2
 8009082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009084:	e03b      	b.n	80090fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908c:	d037      	beq.n	80090fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800908e:	f7f9 ff27 	bl	8002ee0 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	6a3a      	ldr	r2, [r7, #32]
 800909a:	429a      	cmp	r2, r3
 800909c:	d302      	bcc.n	80090a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e03a      	b.n	800911e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d023      	beq.n	80090fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b80      	cmp	r3, #128	@ 0x80
 80090ba:	d020      	beq.n	80090fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b40      	cmp	r3, #64	@ 0x40
 80090c0:	d01d      	beq.n	80090fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0308 	and.w	r3, r3, #8
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d116      	bne.n	80090fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80090d0:	2300      	movs	r3, #0
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 f857 	bl	800919a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2208      	movs	r2, #8
 80090f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e00f      	b.n	800911e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	4013      	ands	r3, r2
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	429a      	cmp	r2, r3
 800910c:	bf0c      	ite	eq
 800910e:	2301      	moveq	r3, #1
 8009110:	2300      	movne	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	429a      	cmp	r2, r3
 800911a:	d0b4      	beq.n	8009086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	4613      	mov	r3, r2
 8009132:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	88fa      	ldrh	r2, [r7, #6]
 800913e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	88fa      	ldrh	r2, [r7, #6]
 8009144:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2222      	movs	r2, #34	@ 0x22
 8009150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d007      	beq.n	800916c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800916a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695a      	ldr	r2, [r3, #20]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0201 	orr.w	r2, r2, #1
 800917a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f042 0220 	orr.w	r2, r2, #32
 800918a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800919a:	b480      	push	{r7}
 800919c:	b095      	sub	sp, #84	@ 0x54
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	330c      	adds	r3, #12
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	330c      	adds	r3, #12
 80091c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80091c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e5      	bne.n	80091a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3314      	adds	r3, #20
 80091dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	f023 0301 	bic.w	r3, r3, #1
 80091ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3314      	adds	r3, #20
 80091f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e5      	bne.n	80091d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920e:	2b01      	cmp	r3, #1
 8009210:	d119      	bne.n	8009246 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	330c      	adds	r3, #12
 8009218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	60bb      	str	r3, [r7, #8]
   return(result);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f023 0310 	bic.w	r3, r3, #16
 8009228:	647b      	str	r3, [r7, #68]	@ 0x44
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	330c      	adds	r3, #12
 8009230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009232:	61ba      	str	r2, [r7, #24]
 8009234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009236:	6979      	ldr	r1, [r7, #20]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	613b      	str	r3, [r7, #16]
   return(result);
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e5      	bne.n	8009212 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2220      	movs	r2, #32
 800924a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009254:	bf00      	nop
 8009256:	3754      	adds	r7, #84	@ 0x54
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff fee4 	bl	8009048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009280:	bf00      	nop
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b21      	cmp	r3, #33	@ 0x21
 800929a:	d13e      	bne.n	800931a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a4:	d114      	bne.n	80092d0 <UART_Transmit_IT+0x48>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d110      	bne.n	80092d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	461a      	mov	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	1c9a      	adds	r2, r3, #2
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	621a      	str	r2, [r3, #32]
 80092ce:	e008      	b.n	80092e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	1c59      	adds	r1, r3, #1
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6211      	str	r1, [r2, #32]
 80092da:	781a      	ldrb	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	3b01      	subs	r3, #1
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	4619      	mov	r1, r3
 80092f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10f      	bne.n	8009316 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009304:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009314:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	e000      	b.n	800931c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800931a:	2302      	movs	r3, #2
  }
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800933e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff fe73 	bl	8009034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08c      	sub	sp, #48	@ 0x30
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b22      	cmp	r3, #34	@ 0x22
 800936a:	f040 80ae 	bne.w	80094ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009376:	d117      	bne.n	80093a8 <UART_Receive_IT+0x50>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d113      	bne.n	80093a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009380:	2300      	movs	r3, #0
 8009382:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009388:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	b29b      	uxth	r3, r3
 8009392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009396:	b29a      	uxth	r2, r3
 8009398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a0:	1c9a      	adds	r2, r3, #2
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80093a6:	e026      	b.n	80093f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093ba:	d007      	beq.n	80093cc <UART_Receive_IT+0x74>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <UART_Receive_IT+0x82>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d106      	bne.n	80093da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	e008      	b.n	80093ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29b      	uxth	r3, r3
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	4619      	mov	r1, r3
 8009404:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009406:	2b00      	cmp	r3, #0
 8009408:	d15d      	bne.n	80094c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0220 	bic.w	r2, r2, #32
 8009418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009428:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695a      	ldr	r2, [r3, #20]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 0201 	bic.w	r2, r2, #1
 8009438:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800944c:	2b01      	cmp	r3, #1
 800944e:	d135      	bne.n	80094bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	330c      	adds	r3, #12
 800945c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	613b      	str	r3, [r7, #16]
   return(result);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f023 0310 	bic.w	r3, r3, #16
 800946c:	627b      	str	r3, [r7, #36]	@ 0x24
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	330c      	adds	r3, #12
 8009474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009476:	623a      	str	r2, [r7, #32]
 8009478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	69f9      	ldr	r1, [r7, #28]
 800947c:	6a3a      	ldr	r2, [r7, #32]
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	61bb      	str	r3, [r7, #24]
   return(result);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e5      	bne.n	8009456 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0310 	and.w	r3, r3, #16
 8009494:	2b10      	cmp	r3, #16
 8009496:	d10a      	bne.n	80094ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff fdd1 	bl	800905c <HAL_UARTEx_RxEventCallback>
 80094ba:	e002      	b.n	80094c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7f8 f9bf 	bl	8001840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e002      	b.n	80094cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80094ca:	2302      	movs	r3, #2
  }
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3730      	adds	r7, #48	@ 0x30
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094d8:	b0c0      	sub	sp, #256	@ 0x100
 80094da:	af00      	add	r7, sp, #0
 80094dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80094ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f0:	68d9      	ldr	r1, [r3, #12]
 80094f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	ea40 0301 	orr.w	r3, r0, r1
 80094fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	431a      	orrs	r2, r3
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	431a      	orrs	r2, r3
 8009514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	4313      	orrs	r3, r2
 800951c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800952c:	f021 010c 	bic.w	r1, r1, #12
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800953a:	430b      	orrs	r3, r1
 800953c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800954a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800954e:	6999      	ldr	r1, [r3, #24]
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	ea40 0301 	orr.w	r3, r0, r1
 800955a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800955c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	4b8f      	ldr	r3, [pc, #572]	@ (80097a0 <UART_SetConfig+0x2cc>)
 8009564:	429a      	cmp	r2, r3
 8009566:	d005      	beq.n	8009574 <UART_SetConfig+0xa0>
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b8d      	ldr	r3, [pc, #564]	@ (80097a4 <UART_SetConfig+0x2d0>)
 8009570:	429a      	cmp	r2, r3
 8009572:	d104      	bne.n	800957e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009574:	f7fd fcda 	bl	8006f2c <HAL_RCC_GetPCLK2Freq>
 8009578:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800957c:	e003      	b.n	8009586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800957e:	f7fd fcc1 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 8009582:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009590:	f040 810c 	bne.w	80097ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009598:	2200      	movs	r2, #0
 800959a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800959e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80095a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80095a6:	4622      	mov	r2, r4
 80095a8:	462b      	mov	r3, r5
 80095aa:	1891      	adds	r1, r2, r2
 80095ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80095ae:	415b      	adcs	r3, r3
 80095b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80095b6:	4621      	mov	r1, r4
 80095b8:	eb12 0801 	adds.w	r8, r2, r1
 80095bc:	4629      	mov	r1, r5
 80095be:	eb43 0901 	adc.w	r9, r3, r1
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	f04f 0300 	mov.w	r3, #0
 80095ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095d6:	4690      	mov	r8, r2
 80095d8:	4699      	mov	r9, r3
 80095da:	4623      	mov	r3, r4
 80095dc:	eb18 0303 	adds.w	r3, r8, r3
 80095e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095e4:	462b      	mov	r3, r5
 80095e6:	eb49 0303 	adc.w	r3, r9, r3
 80095ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80095ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80095fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80095fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009602:	460b      	mov	r3, r1
 8009604:	18db      	adds	r3, r3, r3
 8009606:	653b      	str	r3, [r7, #80]	@ 0x50
 8009608:	4613      	mov	r3, r2
 800960a:	eb42 0303 	adc.w	r3, r2, r3
 800960e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009618:	f7f7 fb36 	bl	8000c88 <__aeabi_uldivmod>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4b61      	ldr	r3, [pc, #388]	@ (80097a8 <UART_SetConfig+0x2d4>)
 8009622:	fba3 2302 	umull	r2, r3, r3, r2
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	011c      	lsls	r4, r3, #4
 800962a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800962e:	2200      	movs	r2, #0
 8009630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009634:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800963c:	4642      	mov	r2, r8
 800963e:	464b      	mov	r3, r9
 8009640:	1891      	adds	r1, r2, r2
 8009642:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009644:	415b      	adcs	r3, r3
 8009646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800964c:	4641      	mov	r1, r8
 800964e:	eb12 0a01 	adds.w	sl, r2, r1
 8009652:	4649      	mov	r1, r9
 8009654:	eb43 0b01 	adc.w	fp, r3, r1
 8009658:	f04f 0200 	mov.w	r2, #0
 800965c:	f04f 0300 	mov.w	r3, #0
 8009660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800966c:	4692      	mov	sl, r2
 800966e:	469b      	mov	fp, r3
 8009670:	4643      	mov	r3, r8
 8009672:	eb1a 0303 	adds.w	r3, sl, r3
 8009676:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800967a:	464b      	mov	r3, r9
 800967c:	eb4b 0303 	adc.w	r3, fp, r3
 8009680:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009690:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009698:	460b      	mov	r3, r1
 800969a:	18db      	adds	r3, r3, r3
 800969c:	643b      	str	r3, [r7, #64]	@ 0x40
 800969e:	4613      	mov	r3, r2
 80096a0:	eb42 0303 	adc.w	r3, r2, r3
 80096a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80096a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80096aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80096ae:	f7f7 faeb 	bl	8000c88 <__aeabi_uldivmod>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4611      	mov	r1, r2
 80096b8:	4b3b      	ldr	r3, [pc, #236]	@ (80097a8 <UART_SetConfig+0x2d4>)
 80096ba:	fba3 2301 	umull	r2, r3, r3, r1
 80096be:	095b      	lsrs	r3, r3, #5
 80096c0:	2264      	movs	r2, #100	@ 0x64
 80096c2:	fb02 f303 	mul.w	r3, r2, r3
 80096c6:	1acb      	subs	r3, r1, r3
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80096ce:	4b36      	ldr	r3, [pc, #216]	@ (80097a8 <UART_SetConfig+0x2d4>)
 80096d0:	fba3 2302 	umull	r2, r3, r3, r2
 80096d4:	095b      	lsrs	r3, r3, #5
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80096dc:	441c      	add	r4, r3
 80096de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80096ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80096f0:	4642      	mov	r2, r8
 80096f2:	464b      	mov	r3, r9
 80096f4:	1891      	adds	r1, r2, r2
 80096f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80096f8:	415b      	adcs	r3, r3
 80096fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009700:	4641      	mov	r1, r8
 8009702:	1851      	adds	r1, r2, r1
 8009704:	6339      	str	r1, [r7, #48]	@ 0x30
 8009706:	4649      	mov	r1, r9
 8009708:	414b      	adcs	r3, r1
 800970a:	637b      	str	r3, [r7, #52]	@ 0x34
 800970c:	f04f 0200 	mov.w	r2, #0
 8009710:	f04f 0300 	mov.w	r3, #0
 8009714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009718:	4659      	mov	r1, fp
 800971a:	00cb      	lsls	r3, r1, #3
 800971c:	4651      	mov	r1, sl
 800971e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009722:	4651      	mov	r1, sl
 8009724:	00ca      	lsls	r2, r1, #3
 8009726:	4610      	mov	r0, r2
 8009728:	4619      	mov	r1, r3
 800972a:	4603      	mov	r3, r0
 800972c:	4642      	mov	r2, r8
 800972e:	189b      	adds	r3, r3, r2
 8009730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009734:	464b      	mov	r3, r9
 8009736:	460a      	mov	r2, r1
 8009738:	eb42 0303 	adc.w	r3, r2, r3
 800973c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800974c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009754:	460b      	mov	r3, r1
 8009756:	18db      	adds	r3, r3, r3
 8009758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800975a:	4613      	mov	r3, r2
 800975c:	eb42 0303 	adc.w	r3, r2, r3
 8009760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800976a:	f7f7 fa8d 	bl	8000c88 <__aeabi_uldivmod>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4b0d      	ldr	r3, [pc, #52]	@ (80097a8 <UART_SetConfig+0x2d4>)
 8009774:	fba3 1302 	umull	r1, r3, r3, r2
 8009778:	095b      	lsrs	r3, r3, #5
 800977a:	2164      	movs	r1, #100	@ 0x64
 800977c:	fb01 f303 	mul.w	r3, r1, r3
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	00db      	lsls	r3, r3, #3
 8009784:	3332      	adds	r3, #50	@ 0x32
 8009786:	4a08      	ldr	r2, [pc, #32]	@ (80097a8 <UART_SetConfig+0x2d4>)
 8009788:	fba2 2303 	umull	r2, r3, r2, r3
 800978c:	095b      	lsrs	r3, r3, #5
 800978e:	f003 0207 	and.w	r2, r3, #7
 8009792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4422      	add	r2, r4
 800979a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800979c:	e106      	b.n	80099ac <UART_SetConfig+0x4d8>
 800979e:	bf00      	nop
 80097a0:	40011000 	.word	0x40011000
 80097a4:	40011400 	.word	0x40011400
 80097a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097b0:	2200      	movs	r2, #0
 80097b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80097ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80097be:	4642      	mov	r2, r8
 80097c0:	464b      	mov	r3, r9
 80097c2:	1891      	adds	r1, r2, r2
 80097c4:	6239      	str	r1, [r7, #32]
 80097c6:	415b      	adcs	r3, r3
 80097c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80097ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097ce:	4641      	mov	r1, r8
 80097d0:	1854      	adds	r4, r2, r1
 80097d2:	4649      	mov	r1, r9
 80097d4:	eb43 0501 	adc.w	r5, r3, r1
 80097d8:	f04f 0200 	mov.w	r2, #0
 80097dc:	f04f 0300 	mov.w	r3, #0
 80097e0:	00eb      	lsls	r3, r5, #3
 80097e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097e6:	00e2      	lsls	r2, r4, #3
 80097e8:	4614      	mov	r4, r2
 80097ea:	461d      	mov	r5, r3
 80097ec:	4643      	mov	r3, r8
 80097ee:	18e3      	adds	r3, r4, r3
 80097f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097f4:	464b      	mov	r3, r9
 80097f6:	eb45 0303 	adc.w	r3, r5, r3
 80097fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800980a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800980e:	f04f 0200 	mov.w	r2, #0
 8009812:	f04f 0300 	mov.w	r3, #0
 8009816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800981a:	4629      	mov	r1, r5
 800981c:	008b      	lsls	r3, r1, #2
 800981e:	4621      	mov	r1, r4
 8009820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009824:	4621      	mov	r1, r4
 8009826:	008a      	lsls	r2, r1, #2
 8009828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800982c:	f7f7 fa2c 	bl	8000c88 <__aeabi_uldivmod>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4b60      	ldr	r3, [pc, #384]	@ (80099b8 <UART_SetConfig+0x4e4>)
 8009836:	fba3 2302 	umull	r2, r3, r3, r2
 800983a:	095b      	lsrs	r3, r3, #5
 800983c:	011c      	lsls	r4, r3, #4
 800983e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009842:	2200      	movs	r2, #0
 8009844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009848:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800984c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009850:	4642      	mov	r2, r8
 8009852:	464b      	mov	r3, r9
 8009854:	1891      	adds	r1, r2, r2
 8009856:	61b9      	str	r1, [r7, #24]
 8009858:	415b      	adcs	r3, r3
 800985a:	61fb      	str	r3, [r7, #28]
 800985c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009860:	4641      	mov	r1, r8
 8009862:	1851      	adds	r1, r2, r1
 8009864:	6139      	str	r1, [r7, #16]
 8009866:	4649      	mov	r1, r9
 8009868:	414b      	adcs	r3, r1
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	f04f 0200 	mov.w	r2, #0
 8009870:	f04f 0300 	mov.w	r3, #0
 8009874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009878:	4659      	mov	r1, fp
 800987a:	00cb      	lsls	r3, r1, #3
 800987c:	4651      	mov	r1, sl
 800987e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009882:	4651      	mov	r1, sl
 8009884:	00ca      	lsls	r2, r1, #3
 8009886:	4610      	mov	r0, r2
 8009888:	4619      	mov	r1, r3
 800988a:	4603      	mov	r3, r0
 800988c:	4642      	mov	r2, r8
 800988e:	189b      	adds	r3, r3, r2
 8009890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009894:	464b      	mov	r3, r9
 8009896:	460a      	mov	r2, r1
 8009898:	eb42 0303 	adc.w	r3, r2, r3
 800989c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	f04f 0300 	mov.w	r3, #0
 80098b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80098b8:	4649      	mov	r1, r9
 80098ba:	008b      	lsls	r3, r1, #2
 80098bc:	4641      	mov	r1, r8
 80098be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098c2:	4641      	mov	r1, r8
 80098c4:	008a      	lsls	r2, r1, #2
 80098c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80098ca:	f7f7 f9dd 	bl	8000c88 <__aeabi_uldivmod>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4611      	mov	r1, r2
 80098d4:	4b38      	ldr	r3, [pc, #224]	@ (80099b8 <UART_SetConfig+0x4e4>)
 80098d6:	fba3 2301 	umull	r2, r3, r3, r1
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	2264      	movs	r2, #100	@ 0x64
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	1acb      	subs	r3, r1, r3
 80098e4:	011b      	lsls	r3, r3, #4
 80098e6:	3332      	adds	r3, #50	@ 0x32
 80098e8:	4a33      	ldr	r2, [pc, #204]	@ (80099b8 <UART_SetConfig+0x4e4>)
 80098ea:	fba2 2303 	umull	r2, r3, r2, r3
 80098ee:	095b      	lsrs	r3, r3, #5
 80098f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098f4:	441c      	add	r4, r3
 80098f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098fa:	2200      	movs	r2, #0
 80098fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80098fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8009900:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009904:	4642      	mov	r2, r8
 8009906:	464b      	mov	r3, r9
 8009908:	1891      	adds	r1, r2, r2
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	415b      	adcs	r3, r3
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009914:	4641      	mov	r1, r8
 8009916:	1851      	adds	r1, r2, r1
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	4649      	mov	r1, r9
 800991c:	414b      	adcs	r3, r1
 800991e:	607b      	str	r3, [r7, #4]
 8009920:	f04f 0200 	mov.w	r2, #0
 8009924:	f04f 0300 	mov.w	r3, #0
 8009928:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800992c:	4659      	mov	r1, fp
 800992e:	00cb      	lsls	r3, r1, #3
 8009930:	4651      	mov	r1, sl
 8009932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009936:	4651      	mov	r1, sl
 8009938:	00ca      	lsls	r2, r1, #3
 800993a:	4610      	mov	r0, r2
 800993c:	4619      	mov	r1, r3
 800993e:	4603      	mov	r3, r0
 8009940:	4642      	mov	r2, r8
 8009942:	189b      	adds	r3, r3, r2
 8009944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009946:	464b      	mov	r3, r9
 8009948:	460a      	mov	r2, r1
 800994a:	eb42 0303 	adc.w	r3, r2, r3
 800994e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	663b      	str	r3, [r7, #96]	@ 0x60
 800995a:	667a      	str	r2, [r7, #100]	@ 0x64
 800995c:	f04f 0200 	mov.w	r2, #0
 8009960:	f04f 0300 	mov.w	r3, #0
 8009964:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009968:	4649      	mov	r1, r9
 800996a:	008b      	lsls	r3, r1, #2
 800996c:	4641      	mov	r1, r8
 800996e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009972:	4641      	mov	r1, r8
 8009974:	008a      	lsls	r2, r1, #2
 8009976:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800997a:	f7f7 f985 	bl	8000c88 <__aeabi_uldivmod>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4b0d      	ldr	r3, [pc, #52]	@ (80099b8 <UART_SetConfig+0x4e4>)
 8009984:	fba3 1302 	umull	r1, r3, r3, r2
 8009988:	095b      	lsrs	r3, r3, #5
 800998a:	2164      	movs	r1, #100	@ 0x64
 800998c:	fb01 f303 	mul.w	r3, r1, r3
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	3332      	adds	r3, #50	@ 0x32
 8009996:	4a08      	ldr	r2, [pc, #32]	@ (80099b8 <UART_SetConfig+0x4e4>)
 8009998:	fba2 2303 	umull	r2, r3, r2, r3
 800999c:	095b      	lsrs	r3, r3, #5
 800999e:	f003 020f 	and.w	r2, r3, #15
 80099a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4422      	add	r2, r4
 80099aa:	609a      	str	r2, [r3, #8]
}
 80099ac:	bf00      	nop
 80099ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80099b2:	46bd      	mov	sp, r7
 80099b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099b8:	51eb851f 	.word	0x51eb851f

080099bc <arm_rfft_fast_init_f32>:
 80099bc:	084b      	lsrs	r3, r1, #1
 80099be:	2b80      	cmp	r3, #128	@ 0x80
 80099c0:	b410      	push	{r4}
 80099c2:	8201      	strh	r1, [r0, #16]
 80099c4:	8003      	strh	r3, [r0, #0]
 80099c6:	d047      	beq.n	8009a58 <arm_rfft_fast_init_f32+0x9c>
 80099c8:	d917      	bls.n	80099fa <arm_rfft_fast_init_f32+0x3e>
 80099ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099ce:	d03d      	beq.n	8009a4c <arm_rfft_fast_init_f32+0x90>
 80099d0:	d929      	bls.n	8009a26 <arm_rfft_fast_init_f32+0x6a>
 80099d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099d6:	d020      	beq.n	8009a1a <arm_rfft_fast_init_f32+0x5e>
 80099d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099dc:	d113      	bne.n	8009a06 <arm_rfft_fast_init_f32+0x4a>
 80099de:	4921      	ldr	r1, [pc, #132]	@ (8009a64 <arm_rfft_fast_init_f32+0xa8>)
 80099e0:	4a21      	ldr	r2, [pc, #132]	@ (8009a68 <arm_rfft_fast_init_f32+0xac>)
 80099e2:	4b22      	ldr	r3, [pc, #136]	@ (8009a6c <arm_rfft_fast_init_f32+0xb0>)
 80099e4:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80099e8:	8184      	strh	r4, [r0, #12]
 80099ea:	6081      	str	r1, [r0, #8]
 80099ec:	6042      	str	r2, [r0, #4]
 80099ee:	6143      	str	r3, [r0, #20]
 80099f0:	2000      	movs	r0, #0
 80099f2:	b240      	sxtb	r0, r0
 80099f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	d01c      	beq.n	8009a38 <arm_rfft_fast_init_f32+0x7c>
 80099fe:	2b40      	cmp	r3, #64	@ 0x40
 8009a00:	d006      	beq.n	8009a10 <arm_rfft_fast_init_f32+0x54>
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d01d      	beq.n	8009a42 <arm_rfft_fast_init_f32+0x86>
 8009a06:	20ff      	movs	r0, #255	@ 0xff
 8009a08:	b240      	sxtb	r0, r0
 8009a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	2438      	movs	r4, #56	@ 0x38
 8009a12:	4917      	ldr	r1, [pc, #92]	@ (8009a70 <arm_rfft_fast_init_f32+0xb4>)
 8009a14:	4a17      	ldr	r2, [pc, #92]	@ (8009a74 <arm_rfft_fast_init_f32+0xb8>)
 8009a16:	4b18      	ldr	r3, [pc, #96]	@ (8009a78 <arm_rfft_fast_init_f32+0xbc>)
 8009a18:	e7e6      	b.n	80099e8 <arm_rfft_fast_init_f32+0x2c>
 8009a1a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8009a1e:	4917      	ldr	r1, [pc, #92]	@ (8009a7c <arm_rfft_fast_init_f32+0xc0>)
 8009a20:	4a17      	ldr	r2, [pc, #92]	@ (8009a80 <arm_rfft_fast_init_f32+0xc4>)
 8009a22:	4b18      	ldr	r3, [pc, #96]	@ (8009a84 <arm_rfft_fast_init_f32+0xc8>)
 8009a24:	e7e0      	b.n	80099e8 <arm_rfft_fast_init_f32+0x2c>
 8009a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a2a:	d1ec      	bne.n	8009a06 <arm_rfft_fast_init_f32+0x4a>
 8009a2c:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8009a30:	4915      	ldr	r1, [pc, #84]	@ (8009a88 <arm_rfft_fast_init_f32+0xcc>)
 8009a32:	4a16      	ldr	r2, [pc, #88]	@ (8009a8c <arm_rfft_fast_init_f32+0xd0>)
 8009a34:	4b16      	ldr	r3, [pc, #88]	@ (8009a90 <arm_rfft_fast_init_f32+0xd4>)
 8009a36:	e7d7      	b.n	80099e8 <arm_rfft_fast_init_f32+0x2c>
 8009a38:	2430      	movs	r4, #48	@ 0x30
 8009a3a:	4916      	ldr	r1, [pc, #88]	@ (8009a94 <arm_rfft_fast_init_f32+0xd8>)
 8009a3c:	4a16      	ldr	r2, [pc, #88]	@ (8009a98 <arm_rfft_fast_init_f32+0xdc>)
 8009a3e:	4b17      	ldr	r3, [pc, #92]	@ (8009a9c <arm_rfft_fast_init_f32+0xe0>)
 8009a40:	e7d2      	b.n	80099e8 <arm_rfft_fast_init_f32+0x2c>
 8009a42:	2414      	movs	r4, #20
 8009a44:	4916      	ldr	r1, [pc, #88]	@ (8009aa0 <arm_rfft_fast_init_f32+0xe4>)
 8009a46:	4a17      	ldr	r2, [pc, #92]	@ (8009aa4 <arm_rfft_fast_init_f32+0xe8>)
 8009a48:	4b17      	ldr	r3, [pc, #92]	@ (8009aa8 <arm_rfft_fast_init_f32+0xec>)
 8009a4a:	e7cd      	b.n	80099e8 <arm_rfft_fast_init_f32+0x2c>
 8009a4c:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8009a50:	4916      	ldr	r1, [pc, #88]	@ (8009aac <arm_rfft_fast_init_f32+0xf0>)
 8009a52:	4a17      	ldr	r2, [pc, #92]	@ (8009ab0 <arm_rfft_fast_init_f32+0xf4>)
 8009a54:	4b17      	ldr	r3, [pc, #92]	@ (8009ab4 <arm_rfft_fast_init_f32+0xf8>)
 8009a56:	e7c7      	b.n	80099e8 <arm_rfft_fast_init_f32+0x2c>
 8009a58:	24d0      	movs	r4, #208	@ 0xd0
 8009a5a:	4917      	ldr	r1, [pc, #92]	@ (8009ab8 <arm_rfft_fast_init_f32+0xfc>)
 8009a5c:	4a17      	ldr	r2, [pc, #92]	@ (8009abc <arm_rfft_fast_init_f32+0x100>)
 8009a5e:	4b18      	ldr	r3, [pc, #96]	@ (8009ac0 <arm_rfft_fast_init_f32+0x104>)
 8009a60:	e7c2      	b.n	80099e8 <arm_rfft_fast_init_f32+0x2c>
 8009a62:	bf00      	nop
 8009a64:	0801bff8 	.word	0x0801bff8
 8009a68:	0800d1f0 	.word	0x0800d1f0
 8009a6c:	08013360 	.word	0x08013360
 8009a70:	080112f0 	.word	0x080112f0
 8009a74:	0801ddb8 	.word	0x0801ddb8
 8009a78:	080202a8 	.word	0x080202a8
 8009a7c:	08019ce0 	.word	0x08019ce0
 8009a80:	08017be0 	.word	0x08017be0
 8009a84:	08011360 	.word	0x08011360
 8009a88:	0801ff38 	.word	0x0801ff38
 8009a8c:	08017360 	.word	0x08017360
 8009a90:	0801dfb8 	.word	0x0801dfb8
 8009a94:	0801ab98 	.word	0x0801ab98
 8009a98:	08019be0 	.word	0x08019be0
 8009a9c:	080111f0 	.word	0x080111f0
 8009aa0:	0801aaf0 	.word	0x0801aaf0
 8009aa4:	08017b60 	.word	0x08017b60
 8009aa8:	0801ab18 	.word	0x0801ab18
 8009aac:	0801e7b8 	.word	0x0801e7b8
 8009ab0:	0801aff8 	.word	0x0801aff8
 8009ab4:	0801eb38 	.word	0x0801eb38
 8009ab8:	080204a8 	.word	0x080204a8
 8009abc:	0801abf8 	.word	0x0801abf8
 8009ac0:	0801fb38 	.word	0x0801fb38

08009ac4 <__cvt>:
 8009ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	ec57 6b10 	vmov	r6, r7, d0
 8009acc:	2f00      	cmp	r7, #0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	bfbb      	ittet	lt
 8009ad6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009ada:	461f      	movlt	r7, r3
 8009adc:	2300      	movge	r3, #0
 8009ade:	232d      	movlt	r3, #45	@ 0x2d
 8009ae0:	700b      	strb	r3, [r1, #0]
 8009ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ae4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ae8:	4691      	mov	r9, r2
 8009aea:	f023 0820 	bic.w	r8, r3, #32
 8009aee:	bfbc      	itt	lt
 8009af0:	4632      	movlt	r2, r6
 8009af2:	4616      	movlt	r6, r2
 8009af4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009af8:	d005      	beq.n	8009b06 <__cvt+0x42>
 8009afa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009afe:	d100      	bne.n	8009b02 <__cvt+0x3e>
 8009b00:	3401      	adds	r4, #1
 8009b02:	2102      	movs	r1, #2
 8009b04:	e000      	b.n	8009b08 <__cvt+0x44>
 8009b06:	2103      	movs	r1, #3
 8009b08:	ab03      	add	r3, sp, #12
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	ab02      	add	r3, sp, #8
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	ec47 6b10 	vmov	d0, r6, r7
 8009b14:	4653      	mov	r3, sl
 8009b16:	4622      	mov	r2, r4
 8009b18:	f000 fe6a 	bl	800a7f0 <_dtoa_r>
 8009b1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009b20:	4605      	mov	r5, r0
 8009b22:	d119      	bne.n	8009b58 <__cvt+0x94>
 8009b24:	f019 0f01 	tst.w	r9, #1
 8009b28:	d00e      	beq.n	8009b48 <__cvt+0x84>
 8009b2a:	eb00 0904 	add.w	r9, r0, r4
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2300      	movs	r3, #0
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 ffe7 	bl	8000b08 <__aeabi_dcmpeq>
 8009b3a:	b108      	cbz	r0, 8009b40 <__cvt+0x7c>
 8009b3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b40:	2230      	movs	r2, #48	@ 0x30
 8009b42:	9b03      	ldr	r3, [sp, #12]
 8009b44:	454b      	cmp	r3, r9
 8009b46:	d31e      	bcc.n	8009b86 <__cvt+0xc2>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b4c:	1b5b      	subs	r3, r3, r5
 8009b4e:	4628      	mov	r0, r5
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	b004      	add	sp, #16
 8009b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b5c:	eb00 0904 	add.w	r9, r0, r4
 8009b60:	d1e5      	bne.n	8009b2e <__cvt+0x6a>
 8009b62:	7803      	ldrb	r3, [r0, #0]
 8009b64:	2b30      	cmp	r3, #48	@ 0x30
 8009b66:	d10a      	bne.n	8009b7e <__cvt+0xba>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 ffca 	bl	8000b08 <__aeabi_dcmpeq>
 8009b74:	b918      	cbnz	r0, 8009b7e <__cvt+0xba>
 8009b76:	f1c4 0401 	rsb	r4, r4, #1
 8009b7a:	f8ca 4000 	str.w	r4, [sl]
 8009b7e:	f8da 3000 	ldr.w	r3, [sl]
 8009b82:	4499      	add	r9, r3
 8009b84:	e7d3      	b.n	8009b2e <__cvt+0x6a>
 8009b86:	1c59      	adds	r1, r3, #1
 8009b88:	9103      	str	r1, [sp, #12]
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e7d9      	b.n	8009b42 <__cvt+0x7e>

08009b8e <__exponent>:
 8009b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b90:	2900      	cmp	r1, #0
 8009b92:	bfba      	itte	lt
 8009b94:	4249      	neglt	r1, r1
 8009b96:	232d      	movlt	r3, #45	@ 0x2d
 8009b98:	232b      	movge	r3, #43	@ 0x2b
 8009b9a:	2909      	cmp	r1, #9
 8009b9c:	7002      	strb	r2, [r0, #0]
 8009b9e:	7043      	strb	r3, [r0, #1]
 8009ba0:	dd29      	ble.n	8009bf6 <__exponent+0x68>
 8009ba2:	f10d 0307 	add.w	r3, sp, #7
 8009ba6:	461d      	mov	r5, r3
 8009ba8:	270a      	movs	r7, #10
 8009baa:	461a      	mov	r2, r3
 8009bac:	fbb1 f6f7 	udiv	r6, r1, r7
 8009bb0:	fb07 1416 	mls	r4, r7, r6, r1
 8009bb4:	3430      	adds	r4, #48	@ 0x30
 8009bb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009bba:	460c      	mov	r4, r1
 8009bbc:	2c63      	cmp	r4, #99	@ 0x63
 8009bbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	dcf1      	bgt.n	8009baa <__exponent+0x1c>
 8009bc6:	3130      	adds	r1, #48	@ 0x30
 8009bc8:	1e94      	subs	r4, r2, #2
 8009bca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009bce:	1c41      	adds	r1, r0, #1
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	42ab      	cmp	r3, r5
 8009bd4:	d30a      	bcc.n	8009bec <__exponent+0x5e>
 8009bd6:	f10d 0309 	add.w	r3, sp, #9
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	42ac      	cmp	r4, r5
 8009bde:	bf88      	it	hi
 8009be0:	2300      	movhi	r3, #0
 8009be2:	3302      	adds	r3, #2
 8009be4:	4403      	add	r3, r0
 8009be6:	1a18      	subs	r0, r3, r0
 8009be8:	b003      	add	sp, #12
 8009bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009bf0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009bf4:	e7ed      	b.n	8009bd2 <__exponent+0x44>
 8009bf6:	2330      	movs	r3, #48	@ 0x30
 8009bf8:	3130      	adds	r1, #48	@ 0x30
 8009bfa:	7083      	strb	r3, [r0, #2]
 8009bfc:	70c1      	strb	r1, [r0, #3]
 8009bfe:	1d03      	adds	r3, r0, #4
 8009c00:	e7f1      	b.n	8009be6 <__exponent+0x58>
	...

08009c04 <_printf_float>:
 8009c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c08:	b08d      	sub	sp, #52	@ 0x34
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009c10:	4616      	mov	r6, r2
 8009c12:	461f      	mov	r7, r3
 8009c14:	4605      	mov	r5, r0
 8009c16:	f000 fceb 	bl	800a5f0 <_localeconv_r>
 8009c1a:	6803      	ldr	r3, [r0, #0]
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7f6 fb46 	bl	80002b0 <strlen>
 8009c24:	2300      	movs	r3, #0
 8009c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c28:	f8d8 3000 	ldr.w	r3, [r8]
 8009c2c:	9005      	str	r0, [sp, #20]
 8009c2e:	3307      	adds	r3, #7
 8009c30:	f023 0307 	bic.w	r3, r3, #7
 8009c34:	f103 0208 	add.w	r2, r3, #8
 8009c38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009c3c:	f8d4 b000 	ldr.w	fp, [r4]
 8009c40:	f8c8 2000 	str.w	r2, [r8]
 8009c44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009c4c:	9307      	str	r3, [sp, #28]
 8009c4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c5a:	4b9c      	ldr	r3, [pc, #624]	@ (8009ecc <_printf_float+0x2c8>)
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c60:	f7f6 ff84 	bl	8000b6c <__aeabi_dcmpun>
 8009c64:	bb70      	cbnz	r0, 8009cc4 <_printf_float+0xc0>
 8009c66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c6a:	4b98      	ldr	r3, [pc, #608]	@ (8009ecc <_printf_float+0x2c8>)
 8009c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c70:	f7f6 ff5e 	bl	8000b30 <__aeabi_dcmple>
 8009c74:	bb30      	cbnz	r0, 8009cc4 <_printf_float+0xc0>
 8009c76:	2200      	movs	r2, #0
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f6 ff4d 	bl	8000b1c <__aeabi_dcmplt>
 8009c82:	b110      	cbz	r0, 8009c8a <_printf_float+0x86>
 8009c84:	232d      	movs	r3, #45	@ 0x2d
 8009c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c8a:	4a91      	ldr	r2, [pc, #580]	@ (8009ed0 <_printf_float+0x2cc>)
 8009c8c:	4b91      	ldr	r3, [pc, #580]	@ (8009ed4 <_printf_float+0x2d0>)
 8009c8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c92:	bf94      	ite	ls
 8009c94:	4690      	movls	r8, r2
 8009c96:	4698      	movhi	r8, r3
 8009c98:	2303      	movs	r3, #3
 8009c9a:	6123      	str	r3, [r4, #16]
 8009c9c:	f02b 0304 	bic.w	r3, fp, #4
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	f04f 0900 	mov.w	r9, #0
 8009ca6:	9700      	str	r7, [sp, #0]
 8009ca8:	4633      	mov	r3, r6
 8009caa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009cac:	4621      	mov	r1, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 f9d2 	bl	800a058 <_printf_common>
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	f040 808d 	bne.w	8009dd4 <_printf_float+0x1d0>
 8009cba:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbe:	b00d      	add	sp, #52	@ 0x34
 8009cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc4:	4642      	mov	r2, r8
 8009cc6:	464b      	mov	r3, r9
 8009cc8:	4640      	mov	r0, r8
 8009cca:	4649      	mov	r1, r9
 8009ccc:	f7f6 ff4e 	bl	8000b6c <__aeabi_dcmpun>
 8009cd0:	b140      	cbz	r0, 8009ce4 <_printf_float+0xe0>
 8009cd2:	464b      	mov	r3, r9
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfbc      	itt	lt
 8009cd8:	232d      	movlt	r3, #45	@ 0x2d
 8009cda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009cde:	4a7e      	ldr	r2, [pc, #504]	@ (8009ed8 <_printf_float+0x2d4>)
 8009ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8009edc <_printf_float+0x2d8>)
 8009ce2:	e7d4      	b.n	8009c8e <_printf_float+0x8a>
 8009ce4:	6863      	ldr	r3, [r4, #4]
 8009ce6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009cea:	9206      	str	r2, [sp, #24]
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	d13b      	bne.n	8009d68 <_printf_float+0x164>
 8009cf0:	2306      	movs	r3, #6
 8009cf2:	6063      	str	r3, [r4, #4]
 8009cf4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	6022      	str	r2, [r4, #0]
 8009cfc:	9303      	str	r3, [sp, #12]
 8009cfe:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009d04:	ab09      	add	r3, sp, #36	@ 0x24
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	6861      	ldr	r1, [r4, #4]
 8009d0a:	ec49 8b10 	vmov	d0, r8, r9
 8009d0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009d12:	4628      	mov	r0, r5
 8009d14:	f7ff fed6 	bl	8009ac4 <__cvt>
 8009d18:	9b06      	ldr	r3, [sp, #24]
 8009d1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d1c:	2b47      	cmp	r3, #71	@ 0x47
 8009d1e:	4680      	mov	r8, r0
 8009d20:	d129      	bne.n	8009d76 <_printf_float+0x172>
 8009d22:	1cc8      	adds	r0, r1, #3
 8009d24:	db02      	blt.n	8009d2c <_printf_float+0x128>
 8009d26:	6863      	ldr	r3, [r4, #4]
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	dd41      	ble.n	8009db0 <_printf_float+0x1ac>
 8009d2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009d30:	fa5f fa8a 	uxtb.w	sl, sl
 8009d34:	3901      	subs	r1, #1
 8009d36:	4652      	mov	r2, sl
 8009d38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009d3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d3e:	f7ff ff26 	bl	8009b8e <__exponent>
 8009d42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d44:	1813      	adds	r3, r2, r0
 8009d46:	2a01      	cmp	r2, #1
 8009d48:	4681      	mov	r9, r0
 8009d4a:	6123      	str	r3, [r4, #16]
 8009d4c:	dc02      	bgt.n	8009d54 <_printf_float+0x150>
 8009d4e:	6822      	ldr	r2, [r4, #0]
 8009d50:	07d2      	lsls	r2, r2, #31
 8009d52:	d501      	bpl.n	8009d58 <_printf_float+0x154>
 8009d54:	3301      	adds	r3, #1
 8009d56:	6123      	str	r3, [r4, #16]
 8009d58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0a2      	beq.n	8009ca6 <_printf_float+0xa2>
 8009d60:	232d      	movs	r3, #45	@ 0x2d
 8009d62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d66:	e79e      	b.n	8009ca6 <_printf_float+0xa2>
 8009d68:	9a06      	ldr	r2, [sp, #24]
 8009d6a:	2a47      	cmp	r2, #71	@ 0x47
 8009d6c:	d1c2      	bne.n	8009cf4 <_printf_float+0xf0>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1c0      	bne.n	8009cf4 <_printf_float+0xf0>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e7bd      	b.n	8009cf2 <_printf_float+0xee>
 8009d76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d7a:	d9db      	bls.n	8009d34 <_printf_float+0x130>
 8009d7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009d80:	d118      	bne.n	8009db4 <_printf_float+0x1b0>
 8009d82:	2900      	cmp	r1, #0
 8009d84:	6863      	ldr	r3, [r4, #4]
 8009d86:	dd0b      	ble.n	8009da0 <_printf_float+0x19c>
 8009d88:	6121      	str	r1, [r4, #16]
 8009d8a:	b913      	cbnz	r3, 8009d92 <_printf_float+0x18e>
 8009d8c:	6822      	ldr	r2, [r4, #0]
 8009d8e:	07d0      	lsls	r0, r2, #31
 8009d90:	d502      	bpl.n	8009d98 <_printf_float+0x194>
 8009d92:	3301      	adds	r3, #1
 8009d94:	440b      	add	r3, r1
 8009d96:	6123      	str	r3, [r4, #16]
 8009d98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d9a:	f04f 0900 	mov.w	r9, #0
 8009d9e:	e7db      	b.n	8009d58 <_printf_float+0x154>
 8009da0:	b913      	cbnz	r3, 8009da8 <_printf_float+0x1a4>
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	07d2      	lsls	r2, r2, #31
 8009da6:	d501      	bpl.n	8009dac <_printf_float+0x1a8>
 8009da8:	3302      	adds	r3, #2
 8009daa:	e7f4      	b.n	8009d96 <_printf_float+0x192>
 8009dac:	2301      	movs	r3, #1
 8009dae:	e7f2      	b.n	8009d96 <_printf_float+0x192>
 8009db0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009db6:	4299      	cmp	r1, r3
 8009db8:	db05      	blt.n	8009dc6 <_printf_float+0x1c2>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	6121      	str	r1, [r4, #16]
 8009dbe:	07d8      	lsls	r0, r3, #31
 8009dc0:	d5ea      	bpl.n	8009d98 <_printf_float+0x194>
 8009dc2:	1c4b      	adds	r3, r1, #1
 8009dc4:	e7e7      	b.n	8009d96 <_printf_float+0x192>
 8009dc6:	2900      	cmp	r1, #0
 8009dc8:	bfd4      	ite	le
 8009dca:	f1c1 0202 	rsble	r2, r1, #2
 8009dce:	2201      	movgt	r2, #1
 8009dd0:	4413      	add	r3, r2
 8009dd2:	e7e0      	b.n	8009d96 <_printf_float+0x192>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	055a      	lsls	r2, r3, #21
 8009dd8:	d407      	bmi.n	8009dea <_printf_float+0x1e6>
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	4642      	mov	r2, r8
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b8      	blx	r7
 8009de4:	3001      	adds	r0, #1
 8009de6:	d12b      	bne.n	8009e40 <_printf_float+0x23c>
 8009de8:	e767      	b.n	8009cba <_printf_float+0xb6>
 8009dea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009dee:	f240 80dd 	bls.w	8009fac <_printf_float+0x3a8>
 8009df2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009df6:	2200      	movs	r2, #0
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f7f6 fe85 	bl	8000b08 <__aeabi_dcmpeq>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d033      	beq.n	8009e6a <_printf_float+0x266>
 8009e02:	4a37      	ldr	r2, [pc, #220]	@ (8009ee0 <_printf_float+0x2dc>)
 8009e04:	2301      	movs	r3, #1
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f af54 	beq.w	8009cba <_printf_float+0xb6>
 8009e12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009e16:	4543      	cmp	r3, r8
 8009e18:	db02      	blt.n	8009e20 <_printf_float+0x21c>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	07d8      	lsls	r0, r3, #31
 8009e1e:	d50f      	bpl.n	8009e40 <_printf_float+0x23c>
 8009e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e24:	4631      	mov	r1, r6
 8009e26:	4628      	mov	r0, r5
 8009e28:	47b8      	blx	r7
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	f43f af45 	beq.w	8009cba <_printf_float+0xb6>
 8009e30:	f04f 0900 	mov.w	r9, #0
 8009e34:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e38:	f104 0a1a 	add.w	sl, r4, #26
 8009e3c:	45c8      	cmp	r8, r9
 8009e3e:	dc09      	bgt.n	8009e54 <_printf_float+0x250>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	079b      	lsls	r3, r3, #30
 8009e44:	f100 8103 	bmi.w	800a04e <_printf_float+0x44a>
 8009e48:	68e0      	ldr	r0, [r4, #12]
 8009e4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e4c:	4298      	cmp	r0, r3
 8009e4e:	bfb8      	it	lt
 8009e50:	4618      	movlt	r0, r3
 8009e52:	e734      	b.n	8009cbe <_printf_float+0xba>
 8009e54:	2301      	movs	r3, #1
 8009e56:	4652      	mov	r2, sl
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	f43f af2b 	beq.w	8009cba <_printf_float+0xb6>
 8009e64:	f109 0901 	add.w	r9, r9, #1
 8009e68:	e7e8      	b.n	8009e3c <_printf_float+0x238>
 8009e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dc39      	bgt.n	8009ee4 <_printf_float+0x2e0>
 8009e70:	4a1b      	ldr	r2, [pc, #108]	@ (8009ee0 <_printf_float+0x2dc>)
 8009e72:	2301      	movs	r3, #1
 8009e74:	4631      	mov	r1, r6
 8009e76:	4628      	mov	r0, r5
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	f43f af1d 	beq.w	8009cba <_printf_float+0xb6>
 8009e80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009e84:	ea59 0303 	orrs.w	r3, r9, r3
 8009e88:	d102      	bne.n	8009e90 <_printf_float+0x28c>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	07d9      	lsls	r1, r3, #31
 8009e8e:	d5d7      	bpl.n	8009e40 <_printf_float+0x23c>
 8009e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f43f af0d 	beq.w	8009cba <_printf_float+0xb6>
 8009ea0:	f04f 0a00 	mov.w	sl, #0
 8009ea4:	f104 0b1a 	add.w	fp, r4, #26
 8009ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eaa:	425b      	negs	r3, r3
 8009eac:	4553      	cmp	r3, sl
 8009eae:	dc01      	bgt.n	8009eb4 <_printf_float+0x2b0>
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	e793      	b.n	8009ddc <_printf_float+0x1d8>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	465a      	mov	r2, fp
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4628      	mov	r0, r5
 8009ebc:	47b8      	blx	r7
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	f43f aefb 	beq.w	8009cba <_printf_float+0xb6>
 8009ec4:	f10a 0a01 	add.w	sl, sl, #1
 8009ec8:	e7ee      	b.n	8009ea8 <_printf_float+0x2a4>
 8009eca:	bf00      	nop
 8009ecc:	7fefffff 	.word	0x7fefffff
 8009ed0:	08020648 	.word	0x08020648
 8009ed4:	0802064c 	.word	0x0802064c
 8009ed8:	08020650 	.word	0x08020650
 8009edc:	08020654 	.word	0x08020654
 8009ee0:	08020658 	.word	0x08020658
 8009ee4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ee6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009eea:	4553      	cmp	r3, sl
 8009eec:	bfa8      	it	ge
 8009eee:	4653      	movge	r3, sl
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	4699      	mov	r9, r3
 8009ef4:	dc36      	bgt.n	8009f64 <_printf_float+0x360>
 8009ef6:	f04f 0b00 	mov.w	fp, #0
 8009efa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009efe:	f104 021a 	add.w	r2, r4, #26
 8009f02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f04:	9306      	str	r3, [sp, #24]
 8009f06:	eba3 0309 	sub.w	r3, r3, r9
 8009f0a:	455b      	cmp	r3, fp
 8009f0c:	dc31      	bgt.n	8009f72 <_printf_float+0x36e>
 8009f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f10:	459a      	cmp	sl, r3
 8009f12:	dc3a      	bgt.n	8009f8a <_printf_float+0x386>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	07da      	lsls	r2, r3, #31
 8009f18:	d437      	bmi.n	8009f8a <_printf_float+0x386>
 8009f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f1c:	ebaa 0903 	sub.w	r9, sl, r3
 8009f20:	9b06      	ldr	r3, [sp, #24]
 8009f22:	ebaa 0303 	sub.w	r3, sl, r3
 8009f26:	4599      	cmp	r9, r3
 8009f28:	bfa8      	it	ge
 8009f2a:	4699      	movge	r9, r3
 8009f2c:	f1b9 0f00 	cmp.w	r9, #0
 8009f30:	dc33      	bgt.n	8009f9a <_printf_float+0x396>
 8009f32:	f04f 0800 	mov.w	r8, #0
 8009f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f3a:	f104 0b1a 	add.w	fp, r4, #26
 8009f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f40:	ebaa 0303 	sub.w	r3, sl, r3
 8009f44:	eba3 0309 	sub.w	r3, r3, r9
 8009f48:	4543      	cmp	r3, r8
 8009f4a:	f77f af79 	ble.w	8009e40 <_printf_float+0x23c>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	465a      	mov	r2, fp
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f aeae 	beq.w	8009cba <_printf_float+0xb6>
 8009f5e:	f108 0801 	add.w	r8, r8, #1
 8009f62:	e7ec      	b.n	8009f3e <_printf_float+0x33a>
 8009f64:	4642      	mov	r2, r8
 8009f66:	4631      	mov	r1, r6
 8009f68:	4628      	mov	r0, r5
 8009f6a:	47b8      	blx	r7
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d1c2      	bne.n	8009ef6 <_printf_float+0x2f2>
 8009f70:	e6a3      	b.n	8009cba <_printf_float+0xb6>
 8009f72:	2301      	movs	r3, #1
 8009f74:	4631      	mov	r1, r6
 8009f76:	4628      	mov	r0, r5
 8009f78:	9206      	str	r2, [sp, #24]
 8009f7a:	47b8      	blx	r7
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	f43f ae9c 	beq.w	8009cba <_printf_float+0xb6>
 8009f82:	9a06      	ldr	r2, [sp, #24]
 8009f84:	f10b 0b01 	add.w	fp, fp, #1
 8009f88:	e7bb      	b.n	8009f02 <_printf_float+0x2fe>
 8009f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f8e:	4631      	mov	r1, r6
 8009f90:	4628      	mov	r0, r5
 8009f92:	47b8      	blx	r7
 8009f94:	3001      	adds	r0, #1
 8009f96:	d1c0      	bne.n	8009f1a <_printf_float+0x316>
 8009f98:	e68f      	b.n	8009cba <_printf_float+0xb6>
 8009f9a:	9a06      	ldr	r2, [sp, #24]
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	4442      	add	r2, r8
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	47b8      	blx	r7
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d1c3      	bne.n	8009f32 <_printf_float+0x32e>
 8009faa:	e686      	b.n	8009cba <_printf_float+0xb6>
 8009fac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fb0:	f1ba 0f01 	cmp.w	sl, #1
 8009fb4:	dc01      	bgt.n	8009fba <_printf_float+0x3b6>
 8009fb6:	07db      	lsls	r3, r3, #31
 8009fb8:	d536      	bpl.n	800a028 <_printf_float+0x424>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	47b8      	blx	r7
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f43f ae78 	beq.w	8009cba <_printf_float+0xb6>
 8009fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f43f ae70 	beq.w	8009cba <_printf_float+0xb6>
 8009fda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fe6:	f7f6 fd8f 	bl	8000b08 <__aeabi_dcmpeq>
 8009fea:	b9c0      	cbnz	r0, 800a01e <_printf_float+0x41a>
 8009fec:	4653      	mov	r3, sl
 8009fee:	f108 0201 	add.w	r2, r8, #1
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	47b8      	blx	r7
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d10c      	bne.n	800a016 <_printf_float+0x412>
 8009ffc:	e65d      	b.n	8009cba <_printf_float+0xb6>
 8009ffe:	2301      	movs	r3, #1
 800a000:	465a      	mov	r2, fp
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	f43f ae56 	beq.w	8009cba <_printf_float+0xb6>
 800a00e:	f108 0801 	add.w	r8, r8, #1
 800a012:	45d0      	cmp	r8, sl
 800a014:	dbf3      	blt.n	8009ffe <_printf_float+0x3fa>
 800a016:	464b      	mov	r3, r9
 800a018:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a01c:	e6df      	b.n	8009dde <_printf_float+0x1da>
 800a01e:	f04f 0800 	mov.w	r8, #0
 800a022:	f104 0b1a 	add.w	fp, r4, #26
 800a026:	e7f4      	b.n	800a012 <_printf_float+0x40e>
 800a028:	2301      	movs	r3, #1
 800a02a:	4642      	mov	r2, r8
 800a02c:	e7e1      	b.n	8009ff2 <_printf_float+0x3ee>
 800a02e:	2301      	movs	r3, #1
 800a030:	464a      	mov	r2, r9
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	47b8      	blx	r7
 800a038:	3001      	adds	r0, #1
 800a03a:	f43f ae3e 	beq.w	8009cba <_printf_float+0xb6>
 800a03e:	f108 0801 	add.w	r8, r8, #1
 800a042:	68e3      	ldr	r3, [r4, #12]
 800a044:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a046:	1a5b      	subs	r3, r3, r1
 800a048:	4543      	cmp	r3, r8
 800a04a:	dcf0      	bgt.n	800a02e <_printf_float+0x42a>
 800a04c:	e6fc      	b.n	8009e48 <_printf_float+0x244>
 800a04e:	f04f 0800 	mov.w	r8, #0
 800a052:	f104 0919 	add.w	r9, r4, #25
 800a056:	e7f4      	b.n	800a042 <_printf_float+0x43e>

0800a058 <_printf_common>:
 800a058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a05c:	4616      	mov	r6, r2
 800a05e:	4698      	mov	r8, r3
 800a060:	688a      	ldr	r2, [r1, #8]
 800a062:	690b      	ldr	r3, [r1, #16]
 800a064:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a068:	4293      	cmp	r3, r2
 800a06a:	bfb8      	it	lt
 800a06c:	4613      	movlt	r3, r2
 800a06e:	6033      	str	r3, [r6, #0]
 800a070:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a074:	4607      	mov	r7, r0
 800a076:	460c      	mov	r4, r1
 800a078:	b10a      	cbz	r2, 800a07e <_printf_common+0x26>
 800a07a:	3301      	adds	r3, #1
 800a07c:	6033      	str	r3, [r6, #0]
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	0699      	lsls	r1, r3, #26
 800a082:	bf42      	ittt	mi
 800a084:	6833      	ldrmi	r3, [r6, #0]
 800a086:	3302      	addmi	r3, #2
 800a088:	6033      	strmi	r3, [r6, #0]
 800a08a:	6825      	ldr	r5, [r4, #0]
 800a08c:	f015 0506 	ands.w	r5, r5, #6
 800a090:	d106      	bne.n	800a0a0 <_printf_common+0x48>
 800a092:	f104 0a19 	add.w	sl, r4, #25
 800a096:	68e3      	ldr	r3, [r4, #12]
 800a098:	6832      	ldr	r2, [r6, #0]
 800a09a:	1a9b      	subs	r3, r3, r2
 800a09c:	42ab      	cmp	r3, r5
 800a09e:	dc26      	bgt.n	800a0ee <_printf_common+0x96>
 800a0a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a0a4:	6822      	ldr	r2, [r4, #0]
 800a0a6:	3b00      	subs	r3, #0
 800a0a8:	bf18      	it	ne
 800a0aa:	2301      	movne	r3, #1
 800a0ac:	0692      	lsls	r2, r2, #26
 800a0ae:	d42b      	bmi.n	800a108 <_printf_common+0xb0>
 800a0b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a0b4:	4641      	mov	r1, r8
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	47c8      	blx	r9
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d01e      	beq.n	800a0fc <_printf_common+0xa4>
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	6922      	ldr	r2, [r4, #16]
 800a0c2:	f003 0306 	and.w	r3, r3, #6
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	bf02      	ittt	eq
 800a0ca:	68e5      	ldreq	r5, [r4, #12]
 800a0cc:	6833      	ldreq	r3, [r6, #0]
 800a0ce:	1aed      	subeq	r5, r5, r3
 800a0d0:	68a3      	ldr	r3, [r4, #8]
 800a0d2:	bf0c      	ite	eq
 800a0d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0d8:	2500      	movne	r5, #0
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	bfc4      	itt	gt
 800a0de:	1a9b      	subgt	r3, r3, r2
 800a0e0:	18ed      	addgt	r5, r5, r3
 800a0e2:	2600      	movs	r6, #0
 800a0e4:	341a      	adds	r4, #26
 800a0e6:	42b5      	cmp	r5, r6
 800a0e8:	d11a      	bne.n	800a120 <_printf_common+0xc8>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e008      	b.n	800a100 <_printf_common+0xa8>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4652      	mov	r2, sl
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	47c8      	blx	r9
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d103      	bne.n	800a104 <_printf_common+0xac>
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a104:	3501      	adds	r5, #1
 800a106:	e7c6      	b.n	800a096 <_printf_common+0x3e>
 800a108:	18e1      	adds	r1, r4, r3
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	2030      	movs	r0, #48	@ 0x30
 800a10e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a112:	4422      	add	r2, r4
 800a114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a11c:	3302      	adds	r3, #2
 800a11e:	e7c7      	b.n	800a0b0 <_printf_common+0x58>
 800a120:	2301      	movs	r3, #1
 800a122:	4622      	mov	r2, r4
 800a124:	4641      	mov	r1, r8
 800a126:	4638      	mov	r0, r7
 800a128:	47c8      	blx	r9
 800a12a:	3001      	adds	r0, #1
 800a12c:	d0e6      	beq.n	800a0fc <_printf_common+0xa4>
 800a12e:	3601      	adds	r6, #1
 800a130:	e7d9      	b.n	800a0e6 <_printf_common+0x8e>
	...

0800a134 <_printf_i>:
 800a134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a138:	7e0f      	ldrb	r7, [r1, #24]
 800a13a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a13c:	2f78      	cmp	r7, #120	@ 0x78
 800a13e:	4691      	mov	r9, r2
 800a140:	4680      	mov	r8, r0
 800a142:	460c      	mov	r4, r1
 800a144:	469a      	mov	sl, r3
 800a146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a14a:	d807      	bhi.n	800a15c <_printf_i+0x28>
 800a14c:	2f62      	cmp	r7, #98	@ 0x62
 800a14e:	d80a      	bhi.n	800a166 <_printf_i+0x32>
 800a150:	2f00      	cmp	r7, #0
 800a152:	f000 80d2 	beq.w	800a2fa <_printf_i+0x1c6>
 800a156:	2f58      	cmp	r7, #88	@ 0x58
 800a158:	f000 80b9 	beq.w	800a2ce <_printf_i+0x19a>
 800a15c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a164:	e03a      	b.n	800a1dc <_printf_i+0xa8>
 800a166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a16a:	2b15      	cmp	r3, #21
 800a16c:	d8f6      	bhi.n	800a15c <_printf_i+0x28>
 800a16e:	a101      	add	r1, pc, #4	@ (adr r1, 800a174 <_printf_i+0x40>)
 800a170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a174:	0800a1cd 	.word	0x0800a1cd
 800a178:	0800a1e1 	.word	0x0800a1e1
 800a17c:	0800a15d 	.word	0x0800a15d
 800a180:	0800a15d 	.word	0x0800a15d
 800a184:	0800a15d 	.word	0x0800a15d
 800a188:	0800a15d 	.word	0x0800a15d
 800a18c:	0800a1e1 	.word	0x0800a1e1
 800a190:	0800a15d 	.word	0x0800a15d
 800a194:	0800a15d 	.word	0x0800a15d
 800a198:	0800a15d 	.word	0x0800a15d
 800a19c:	0800a15d 	.word	0x0800a15d
 800a1a0:	0800a2e1 	.word	0x0800a2e1
 800a1a4:	0800a20b 	.word	0x0800a20b
 800a1a8:	0800a29b 	.word	0x0800a29b
 800a1ac:	0800a15d 	.word	0x0800a15d
 800a1b0:	0800a15d 	.word	0x0800a15d
 800a1b4:	0800a303 	.word	0x0800a303
 800a1b8:	0800a15d 	.word	0x0800a15d
 800a1bc:	0800a20b 	.word	0x0800a20b
 800a1c0:	0800a15d 	.word	0x0800a15d
 800a1c4:	0800a15d 	.word	0x0800a15d
 800a1c8:	0800a2a3 	.word	0x0800a2a3
 800a1cc:	6833      	ldr	r3, [r6, #0]
 800a1ce:	1d1a      	adds	r2, r3, #4
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6032      	str	r2, [r6, #0]
 800a1d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e09d      	b.n	800a31c <_printf_i+0x1e8>
 800a1e0:	6833      	ldr	r3, [r6, #0]
 800a1e2:	6820      	ldr	r0, [r4, #0]
 800a1e4:	1d19      	adds	r1, r3, #4
 800a1e6:	6031      	str	r1, [r6, #0]
 800a1e8:	0606      	lsls	r6, r0, #24
 800a1ea:	d501      	bpl.n	800a1f0 <_printf_i+0xbc>
 800a1ec:	681d      	ldr	r5, [r3, #0]
 800a1ee:	e003      	b.n	800a1f8 <_printf_i+0xc4>
 800a1f0:	0645      	lsls	r5, r0, #25
 800a1f2:	d5fb      	bpl.n	800a1ec <_printf_i+0xb8>
 800a1f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1f8:	2d00      	cmp	r5, #0
 800a1fa:	da03      	bge.n	800a204 <_printf_i+0xd0>
 800a1fc:	232d      	movs	r3, #45	@ 0x2d
 800a1fe:	426d      	negs	r5, r5
 800a200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a204:	4859      	ldr	r0, [pc, #356]	@ (800a36c <_printf_i+0x238>)
 800a206:	230a      	movs	r3, #10
 800a208:	e011      	b.n	800a22e <_printf_i+0xfa>
 800a20a:	6821      	ldr	r1, [r4, #0]
 800a20c:	6833      	ldr	r3, [r6, #0]
 800a20e:	0608      	lsls	r0, r1, #24
 800a210:	f853 5b04 	ldr.w	r5, [r3], #4
 800a214:	d402      	bmi.n	800a21c <_printf_i+0xe8>
 800a216:	0649      	lsls	r1, r1, #25
 800a218:	bf48      	it	mi
 800a21a:	b2ad      	uxthmi	r5, r5
 800a21c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a21e:	4853      	ldr	r0, [pc, #332]	@ (800a36c <_printf_i+0x238>)
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	bf14      	ite	ne
 800a224:	230a      	movne	r3, #10
 800a226:	2308      	moveq	r3, #8
 800a228:	2100      	movs	r1, #0
 800a22a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a22e:	6866      	ldr	r6, [r4, #4]
 800a230:	60a6      	str	r6, [r4, #8]
 800a232:	2e00      	cmp	r6, #0
 800a234:	bfa2      	ittt	ge
 800a236:	6821      	ldrge	r1, [r4, #0]
 800a238:	f021 0104 	bicge.w	r1, r1, #4
 800a23c:	6021      	strge	r1, [r4, #0]
 800a23e:	b90d      	cbnz	r5, 800a244 <_printf_i+0x110>
 800a240:	2e00      	cmp	r6, #0
 800a242:	d04b      	beq.n	800a2dc <_printf_i+0x1a8>
 800a244:	4616      	mov	r6, r2
 800a246:	fbb5 f1f3 	udiv	r1, r5, r3
 800a24a:	fb03 5711 	mls	r7, r3, r1, r5
 800a24e:	5dc7      	ldrb	r7, [r0, r7]
 800a250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a254:	462f      	mov	r7, r5
 800a256:	42bb      	cmp	r3, r7
 800a258:	460d      	mov	r5, r1
 800a25a:	d9f4      	bls.n	800a246 <_printf_i+0x112>
 800a25c:	2b08      	cmp	r3, #8
 800a25e:	d10b      	bne.n	800a278 <_printf_i+0x144>
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	07df      	lsls	r7, r3, #31
 800a264:	d508      	bpl.n	800a278 <_printf_i+0x144>
 800a266:	6923      	ldr	r3, [r4, #16]
 800a268:	6861      	ldr	r1, [r4, #4]
 800a26a:	4299      	cmp	r1, r3
 800a26c:	bfde      	ittt	le
 800a26e:	2330      	movle	r3, #48	@ 0x30
 800a270:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a274:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a278:	1b92      	subs	r2, r2, r6
 800a27a:	6122      	str	r2, [r4, #16]
 800a27c:	f8cd a000 	str.w	sl, [sp]
 800a280:	464b      	mov	r3, r9
 800a282:	aa03      	add	r2, sp, #12
 800a284:	4621      	mov	r1, r4
 800a286:	4640      	mov	r0, r8
 800a288:	f7ff fee6 	bl	800a058 <_printf_common>
 800a28c:	3001      	adds	r0, #1
 800a28e:	d14a      	bne.n	800a326 <_printf_i+0x1f2>
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	b004      	add	sp, #16
 800a296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	f043 0320 	orr.w	r3, r3, #32
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	4833      	ldr	r0, [pc, #204]	@ (800a370 <_printf_i+0x23c>)
 800a2a4:	2778      	movs	r7, #120	@ 0x78
 800a2a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	6831      	ldr	r1, [r6, #0]
 800a2ae:	061f      	lsls	r7, r3, #24
 800a2b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a2b4:	d402      	bmi.n	800a2bc <_printf_i+0x188>
 800a2b6:	065f      	lsls	r7, r3, #25
 800a2b8:	bf48      	it	mi
 800a2ba:	b2ad      	uxthmi	r5, r5
 800a2bc:	6031      	str	r1, [r6, #0]
 800a2be:	07d9      	lsls	r1, r3, #31
 800a2c0:	bf44      	itt	mi
 800a2c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a2c6:	6023      	strmi	r3, [r4, #0]
 800a2c8:	b11d      	cbz	r5, 800a2d2 <_printf_i+0x19e>
 800a2ca:	2310      	movs	r3, #16
 800a2cc:	e7ac      	b.n	800a228 <_printf_i+0xf4>
 800a2ce:	4827      	ldr	r0, [pc, #156]	@ (800a36c <_printf_i+0x238>)
 800a2d0:	e7e9      	b.n	800a2a6 <_printf_i+0x172>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	f023 0320 	bic.w	r3, r3, #32
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	e7f6      	b.n	800a2ca <_printf_i+0x196>
 800a2dc:	4616      	mov	r6, r2
 800a2de:	e7bd      	b.n	800a25c <_printf_i+0x128>
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	6825      	ldr	r5, [r4, #0]
 800a2e4:	6961      	ldr	r1, [r4, #20]
 800a2e6:	1d18      	adds	r0, r3, #4
 800a2e8:	6030      	str	r0, [r6, #0]
 800a2ea:	062e      	lsls	r6, r5, #24
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	d501      	bpl.n	800a2f4 <_printf_i+0x1c0>
 800a2f0:	6019      	str	r1, [r3, #0]
 800a2f2:	e002      	b.n	800a2fa <_printf_i+0x1c6>
 800a2f4:	0668      	lsls	r0, r5, #25
 800a2f6:	d5fb      	bpl.n	800a2f0 <_printf_i+0x1bc>
 800a2f8:	8019      	strh	r1, [r3, #0]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	6123      	str	r3, [r4, #16]
 800a2fe:	4616      	mov	r6, r2
 800a300:	e7bc      	b.n	800a27c <_printf_i+0x148>
 800a302:	6833      	ldr	r3, [r6, #0]
 800a304:	1d1a      	adds	r2, r3, #4
 800a306:	6032      	str	r2, [r6, #0]
 800a308:	681e      	ldr	r6, [r3, #0]
 800a30a:	6862      	ldr	r2, [r4, #4]
 800a30c:	2100      	movs	r1, #0
 800a30e:	4630      	mov	r0, r6
 800a310:	f7f5 ff7e 	bl	8000210 <memchr>
 800a314:	b108      	cbz	r0, 800a31a <_printf_i+0x1e6>
 800a316:	1b80      	subs	r0, r0, r6
 800a318:	6060      	str	r0, [r4, #4]
 800a31a:	6863      	ldr	r3, [r4, #4]
 800a31c:	6123      	str	r3, [r4, #16]
 800a31e:	2300      	movs	r3, #0
 800a320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a324:	e7aa      	b.n	800a27c <_printf_i+0x148>
 800a326:	6923      	ldr	r3, [r4, #16]
 800a328:	4632      	mov	r2, r6
 800a32a:	4649      	mov	r1, r9
 800a32c:	4640      	mov	r0, r8
 800a32e:	47d0      	blx	sl
 800a330:	3001      	adds	r0, #1
 800a332:	d0ad      	beq.n	800a290 <_printf_i+0x15c>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	079b      	lsls	r3, r3, #30
 800a338:	d413      	bmi.n	800a362 <_printf_i+0x22e>
 800a33a:	68e0      	ldr	r0, [r4, #12]
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	4298      	cmp	r0, r3
 800a340:	bfb8      	it	lt
 800a342:	4618      	movlt	r0, r3
 800a344:	e7a6      	b.n	800a294 <_printf_i+0x160>
 800a346:	2301      	movs	r3, #1
 800a348:	4632      	mov	r2, r6
 800a34a:	4649      	mov	r1, r9
 800a34c:	4640      	mov	r0, r8
 800a34e:	47d0      	blx	sl
 800a350:	3001      	adds	r0, #1
 800a352:	d09d      	beq.n	800a290 <_printf_i+0x15c>
 800a354:	3501      	adds	r5, #1
 800a356:	68e3      	ldr	r3, [r4, #12]
 800a358:	9903      	ldr	r1, [sp, #12]
 800a35a:	1a5b      	subs	r3, r3, r1
 800a35c:	42ab      	cmp	r3, r5
 800a35e:	dcf2      	bgt.n	800a346 <_printf_i+0x212>
 800a360:	e7eb      	b.n	800a33a <_printf_i+0x206>
 800a362:	2500      	movs	r5, #0
 800a364:	f104 0619 	add.w	r6, r4, #25
 800a368:	e7f5      	b.n	800a356 <_printf_i+0x222>
 800a36a:	bf00      	nop
 800a36c:	0802065a 	.word	0x0802065a
 800a370:	0802066b 	.word	0x0802066b

0800a374 <std>:
 800a374:	2300      	movs	r3, #0
 800a376:	b510      	push	{r4, lr}
 800a378:	4604      	mov	r4, r0
 800a37a:	e9c0 3300 	strd	r3, r3, [r0]
 800a37e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a382:	6083      	str	r3, [r0, #8]
 800a384:	8181      	strh	r1, [r0, #12]
 800a386:	6643      	str	r3, [r0, #100]	@ 0x64
 800a388:	81c2      	strh	r2, [r0, #14]
 800a38a:	6183      	str	r3, [r0, #24]
 800a38c:	4619      	mov	r1, r3
 800a38e:	2208      	movs	r2, #8
 800a390:	305c      	adds	r0, #92	@ 0x5c
 800a392:	f000 f924 	bl	800a5de <memset>
 800a396:	4b0d      	ldr	r3, [pc, #52]	@ (800a3cc <std+0x58>)
 800a398:	6263      	str	r3, [r4, #36]	@ 0x24
 800a39a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d0 <std+0x5c>)
 800a39c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a39e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <std+0x60>)
 800a3a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d8 <std+0x64>)
 800a3a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3dc <std+0x68>)
 800a3a8:	6224      	str	r4, [r4, #32]
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	d006      	beq.n	800a3bc <std+0x48>
 800a3ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3b2:	4294      	cmp	r4, r2
 800a3b4:	d002      	beq.n	800a3bc <std+0x48>
 800a3b6:	33d0      	adds	r3, #208	@ 0xd0
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d105      	bne.n	800a3c8 <std+0x54>
 800a3bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c4:	f000 b988 	b.w	800a6d8 <__retarget_lock_init_recursive>
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	bf00      	nop
 800a3cc:	0800a539 	.word	0x0800a539
 800a3d0:	0800a55b 	.word	0x0800a55b
 800a3d4:	0800a593 	.word	0x0800a593
 800a3d8:	0800a5b7 	.word	0x0800a5b7
 800a3dc:	20018d2c 	.word	0x20018d2c

0800a3e0 <stdio_exit_handler>:
 800a3e0:	4a02      	ldr	r2, [pc, #8]	@ (800a3ec <stdio_exit_handler+0xc>)
 800a3e2:	4903      	ldr	r1, [pc, #12]	@ (800a3f0 <stdio_exit_handler+0x10>)
 800a3e4:	4803      	ldr	r0, [pc, #12]	@ (800a3f4 <stdio_exit_handler+0x14>)
 800a3e6:	f000 b869 	b.w	800a4bc <_fwalk_sglue>
 800a3ea:	bf00      	nop
 800a3ec:	2000000c 	.word	0x2000000c
 800a3f0:	0800c035 	.word	0x0800c035
 800a3f4:	2000001c 	.word	0x2000001c

0800a3f8 <cleanup_stdio>:
 800a3f8:	6841      	ldr	r1, [r0, #4]
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a42c <cleanup_stdio+0x34>)
 800a3fc:	4299      	cmp	r1, r3
 800a3fe:	b510      	push	{r4, lr}
 800a400:	4604      	mov	r4, r0
 800a402:	d001      	beq.n	800a408 <cleanup_stdio+0x10>
 800a404:	f001 fe16 	bl	800c034 <_fflush_r>
 800a408:	68a1      	ldr	r1, [r4, #8]
 800a40a:	4b09      	ldr	r3, [pc, #36]	@ (800a430 <cleanup_stdio+0x38>)
 800a40c:	4299      	cmp	r1, r3
 800a40e:	d002      	beq.n	800a416 <cleanup_stdio+0x1e>
 800a410:	4620      	mov	r0, r4
 800a412:	f001 fe0f 	bl	800c034 <_fflush_r>
 800a416:	68e1      	ldr	r1, [r4, #12]
 800a418:	4b06      	ldr	r3, [pc, #24]	@ (800a434 <cleanup_stdio+0x3c>)
 800a41a:	4299      	cmp	r1, r3
 800a41c:	d004      	beq.n	800a428 <cleanup_stdio+0x30>
 800a41e:	4620      	mov	r0, r4
 800a420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a424:	f001 be06 	b.w	800c034 <_fflush_r>
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	bf00      	nop
 800a42c:	20018d2c 	.word	0x20018d2c
 800a430:	20018d94 	.word	0x20018d94
 800a434:	20018dfc 	.word	0x20018dfc

0800a438 <global_stdio_init.part.0>:
 800a438:	b510      	push	{r4, lr}
 800a43a:	4b0b      	ldr	r3, [pc, #44]	@ (800a468 <global_stdio_init.part.0+0x30>)
 800a43c:	4c0b      	ldr	r4, [pc, #44]	@ (800a46c <global_stdio_init.part.0+0x34>)
 800a43e:	4a0c      	ldr	r2, [pc, #48]	@ (800a470 <global_stdio_init.part.0+0x38>)
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	4620      	mov	r0, r4
 800a444:	2200      	movs	r2, #0
 800a446:	2104      	movs	r1, #4
 800a448:	f7ff ff94 	bl	800a374 <std>
 800a44c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a450:	2201      	movs	r2, #1
 800a452:	2109      	movs	r1, #9
 800a454:	f7ff ff8e 	bl	800a374 <std>
 800a458:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a45c:	2202      	movs	r2, #2
 800a45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a462:	2112      	movs	r1, #18
 800a464:	f7ff bf86 	b.w	800a374 <std>
 800a468:	20018e64 	.word	0x20018e64
 800a46c:	20018d2c 	.word	0x20018d2c
 800a470:	0800a3e1 	.word	0x0800a3e1

0800a474 <__sfp_lock_acquire>:
 800a474:	4801      	ldr	r0, [pc, #4]	@ (800a47c <__sfp_lock_acquire+0x8>)
 800a476:	f000 b930 	b.w	800a6da <__retarget_lock_acquire_recursive>
 800a47a:	bf00      	nop
 800a47c:	20018e6d 	.word	0x20018e6d

0800a480 <__sfp_lock_release>:
 800a480:	4801      	ldr	r0, [pc, #4]	@ (800a488 <__sfp_lock_release+0x8>)
 800a482:	f000 b92b 	b.w	800a6dc <__retarget_lock_release_recursive>
 800a486:	bf00      	nop
 800a488:	20018e6d 	.word	0x20018e6d

0800a48c <__sinit>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	4604      	mov	r4, r0
 800a490:	f7ff fff0 	bl	800a474 <__sfp_lock_acquire>
 800a494:	6a23      	ldr	r3, [r4, #32]
 800a496:	b11b      	cbz	r3, 800a4a0 <__sinit+0x14>
 800a498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a49c:	f7ff bff0 	b.w	800a480 <__sfp_lock_release>
 800a4a0:	4b04      	ldr	r3, [pc, #16]	@ (800a4b4 <__sinit+0x28>)
 800a4a2:	6223      	str	r3, [r4, #32]
 800a4a4:	4b04      	ldr	r3, [pc, #16]	@ (800a4b8 <__sinit+0x2c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1f5      	bne.n	800a498 <__sinit+0xc>
 800a4ac:	f7ff ffc4 	bl	800a438 <global_stdio_init.part.0>
 800a4b0:	e7f2      	b.n	800a498 <__sinit+0xc>
 800a4b2:	bf00      	nop
 800a4b4:	0800a3f9 	.word	0x0800a3f9
 800a4b8:	20018e64 	.word	0x20018e64

0800a4bc <_fwalk_sglue>:
 800a4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	4688      	mov	r8, r1
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	2600      	movs	r6, #0
 800a4c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4cc:	f1b9 0901 	subs.w	r9, r9, #1
 800a4d0:	d505      	bpl.n	800a4de <_fwalk_sglue+0x22>
 800a4d2:	6824      	ldr	r4, [r4, #0]
 800a4d4:	2c00      	cmp	r4, #0
 800a4d6:	d1f7      	bne.n	800a4c8 <_fwalk_sglue+0xc>
 800a4d8:	4630      	mov	r0, r6
 800a4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4de:	89ab      	ldrh	r3, [r5, #12]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d907      	bls.n	800a4f4 <_fwalk_sglue+0x38>
 800a4e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	d003      	beq.n	800a4f4 <_fwalk_sglue+0x38>
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	47c0      	blx	r8
 800a4f2:	4306      	orrs	r6, r0
 800a4f4:	3568      	adds	r5, #104	@ 0x68
 800a4f6:	e7e9      	b.n	800a4cc <_fwalk_sglue+0x10>

0800a4f8 <siprintf>:
 800a4f8:	b40e      	push	{r1, r2, r3}
 800a4fa:	b500      	push	{lr}
 800a4fc:	b09c      	sub	sp, #112	@ 0x70
 800a4fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800a500:	9002      	str	r0, [sp, #8]
 800a502:	9006      	str	r0, [sp, #24]
 800a504:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a508:	4809      	ldr	r0, [pc, #36]	@ (800a530 <siprintf+0x38>)
 800a50a:	9107      	str	r1, [sp, #28]
 800a50c:	9104      	str	r1, [sp, #16]
 800a50e:	4909      	ldr	r1, [pc, #36]	@ (800a534 <siprintf+0x3c>)
 800a510:	f853 2b04 	ldr.w	r2, [r3], #4
 800a514:	9105      	str	r1, [sp, #20]
 800a516:	6800      	ldr	r0, [r0, #0]
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	a902      	add	r1, sp, #8
 800a51c:	f001 fc0a 	bl	800bd34 <_svfiprintf_r>
 800a520:	9b02      	ldr	r3, [sp, #8]
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	b01c      	add	sp, #112	@ 0x70
 800a528:	f85d eb04 	ldr.w	lr, [sp], #4
 800a52c:	b003      	add	sp, #12
 800a52e:	4770      	bx	lr
 800a530:	20000018 	.word	0x20000018
 800a534:	ffff0208 	.word	0xffff0208

0800a538 <__sread>:
 800a538:	b510      	push	{r4, lr}
 800a53a:	460c      	mov	r4, r1
 800a53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a540:	f000 f87c 	bl	800a63c <_read_r>
 800a544:	2800      	cmp	r0, #0
 800a546:	bfab      	itete	ge
 800a548:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a54a:	89a3      	ldrhlt	r3, [r4, #12]
 800a54c:	181b      	addge	r3, r3, r0
 800a54e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a552:	bfac      	ite	ge
 800a554:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a556:	81a3      	strhlt	r3, [r4, #12]
 800a558:	bd10      	pop	{r4, pc}

0800a55a <__swrite>:
 800a55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55e:	461f      	mov	r7, r3
 800a560:	898b      	ldrh	r3, [r1, #12]
 800a562:	05db      	lsls	r3, r3, #23
 800a564:	4605      	mov	r5, r0
 800a566:	460c      	mov	r4, r1
 800a568:	4616      	mov	r6, r2
 800a56a:	d505      	bpl.n	800a578 <__swrite+0x1e>
 800a56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a570:	2302      	movs	r3, #2
 800a572:	2200      	movs	r2, #0
 800a574:	f000 f850 	bl	800a618 <_lseek_r>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a57e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	4632      	mov	r2, r6
 800a586:	463b      	mov	r3, r7
 800a588:	4628      	mov	r0, r5
 800a58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a58e:	f000 b867 	b.w	800a660 <_write_r>

0800a592 <__sseek>:
 800a592:	b510      	push	{r4, lr}
 800a594:	460c      	mov	r4, r1
 800a596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59a:	f000 f83d 	bl	800a618 <_lseek_r>
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	bf15      	itete	ne
 800a5a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5ae:	81a3      	strheq	r3, [r4, #12]
 800a5b0:	bf18      	it	ne
 800a5b2:	81a3      	strhne	r3, [r4, #12]
 800a5b4:	bd10      	pop	{r4, pc}

0800a5b6 <__sclose>:
 800a5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ba:	f000 b81d 	b.w	800a5f8 <_close_r>

0800a5be <memcmp>:
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	3901      	subs	r1, #1
 800a5c2:	4402      	add	r2, r0
 800a5c4:	4290      	cmp	r0, r2
 800a5c6:	d101      	bne.n	800a5cc <memcmp+0xe>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e005      	b.n	800a5d8 <memcmp+0x1a>
 800a5cc:	7803      	ldrb	r3, [r0, #0]
 800a5ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	d001      	beq.n	800a5da <memcmp+0x1c>
 800a5d6:	1b18      	subs	r0, r3, r4
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	3001      	adds	r0, #1
 800a5dc:	e7f2      	b.n	800a5c4 <memcmp+0x6>

0800a5de <memset>:
 800a5de:	4402      	add	r2, r0
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d100      	bne.n	800a5e8 <memset+0xa>
 800a5e6:	4770      	bx	lr
 800a5e8:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ec:	e7f9      	b.n	800a5e2 <memset+0x4>
	...

0800a5f0 <_localeconv_r>:
 800a5f0:	4800      	ldr	r0, [pc, #0]	@ (800a5f4 <_localeconv_r+0x4>)
 800a5f2:	4770      	bx	lr
 800a5f4:	20000158 	.word	0x20000158

0800a5f8 <_close_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d06      	ldr	r5, [pc, #24]	@ (800a614 <_close_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	f7f8 fb60 	bl	8002cc8 <_close>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_close_r+0x1a>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_close_r+0x1a>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20018e68 	.word	0x20018e68

0800a618 <_lseek_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d07      	ldr	r5, [pc, #28]	@ (800a638 <_lseek_r+0x20>)
 800a61c:	4604      	mov	r4, r0
 800a61e:	4608      	mov	r0, r1
 800a620:	4611      	mov	r1, r2
 800a622:	2200      	movs	r2, #0
 800a624:	602a      	str	r2, [r5, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f7f8 fb75 	bl	8002d16 <_lseek>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_lseek_r+0x1e>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_lseek_r+0x1e>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	20018e68 	.word	0x20018e68

0800a63c <_read_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d07      	ldr	r5, [pc, #28]	@ (800a65c <_read_r+0x20>)
 800a640:	4604      	mov	r4, r0
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	2200      	movs	r2, #0
 800a648:	602a      	str	r2, [r5, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f7f8 fb03 	bl	8002c56 <_read>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d102      	bne.n	800a65a <_read_r+0x1e>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	b103      	cbz	r3, 800a65a <_read_r+0x1e>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	20018e68 	.word	0x20018e68

0800a660 <_write_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	@ (800a680 <_write_r+0x20>)
 800a664:	4604      	mov	r4, r0
 800a666:	4608      	mov	r0, r1
 800a668:	4611      	mov	r1, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	602a      	str	r2, [r5, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7f8 fb0e 	bl	8002c90 <_write>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_write_r+0x1e>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_write_r+0x1e>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	20018e68 	.word	0x20018e68

0800a684 <__errno>:
 800a684:	4b01      	ldr	r3, [pc, #4]	@ (800a68c <__errno+0x8>)
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000018 	.word	0x20000018

0800a690 <__libc_init_array>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	4d0d      	ldr	r5, [pc, #52]	@ (800a6c8 <__libc_init_array+0x38>)
 800a694:	4c0d      	ldr	r4, [pc, #52]	@ (800a6cc <__libc_init_array+0x3c>)
 800a696:	1b64      	subs	r4, r4, r5
 800a698:	10a4      	asrs	r4, r4, #2
 800a69a:	2600      	movs	r6, #0
 800a69c:	42a6      	cmp	r6, r4
 800a69e:	d109      	bne.n	800a6b4 <__libc_init_array+0x24>
 800a6a0:	4d0b      	ldr	r5, [pc, #44]	@ (800a6d0 <__libc_init_array+0x40>)
 800a6a2:	4c0c      	ldr	r4, [pc, #48]	@ (800a6d4 <__libc_init_array+0x44>)
 800a6a4:	f002 fc34 	bl	800cf10 <_init>
 800a6a8:	1b64      	subs	r4, r4, r5
 800a6aa:	10a4      	asrs	r4, r4, #2
 800a6ac:	2600      	movs	r6, #0
 800a6ae:	42a6      	cmp	r6, r4
 800a6b0:	d105      	bne.n	800a6be <__libc_init_array+0x2e>
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b8:	4798      	blx	r3
 800a6ba:	3601      	adds	r6, #1
 800a6bc:	e7ee      	b.n	800a69c <__libc_init_array+0xc>
 800a6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c2:	4798      	blx	r3
 800a6c4:	3601      	adds	r6, #1
 800a6c6:	e7f2      	b.n	800a6ae <__libc_init_array+0x1e>
 800a6c8:	08020a00 	.word	0x08020a00
 800a6cc:	08020a00 	.word	0x08020a00
 800a6d0:	08020a00 	.word	0x08020a00
 800a6d4:	08020a04 	.word	0x08020a04

0800a6d8 <__retarget_lock_init_recursive>:
 800a6d8:	4770      	bx	lr

0800a6da <__retarget_lock_acquire_recursive>:
 800a6da:	4770      	bx	lr

0800a6dc <__retarget_lock_release_recursive>:
 800a6dc:	4770      	bx	lr

0800a6de <quorem>:
 800a6de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e2:	6903      	ldr	r3, [r0, #16]
 800a6e4:	690c      	ldr	r4, [r1, #16]
 800a6e6:	42a3      	cmp	r3, r4
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	db7e      	blt.n	800a7ea <quorem+0x10c>
 800a6ec:	3c01      	subs	r4, #1
 800a6ee:	f101 0814 	add.w	r8, r1, #20
 800a6f2:	00a3      	lsls	r3, r4, #2
 800a6f4:	f100 0514 	add.w	r5, r0, #20
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a708:	3301      	adds	r3, #1
 800a70a:	429a      	cmp	r2, r3
 800a70c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a710:	fbb2 f6f3 	udiv	r6, r2, r3
 800a714:	d32e      	bcc.n	800a774 <quorem+0x96>
 800a716:	f04f 0a00 	mov.w	sl, #0
 800a71a:	46c4      	mov	ip, r8
 800a71c:	46ae      	mov	lr, r5
 800a71e:	46d3      	mov	fp, sl
 800a720:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a724:	b298      	uxth	r0, r3
 800a726:	fb06 a000 	mla	r0, r6, r0, sl
 800a72a:	0c02      	lsrs	r2, r0, #16
 800a72c:	0c1b      	lsrs	r3, r3, #16
 800a72e:	fb06 2303 	mla	r3, r6, r3, r2
 800a732:	f8de 2000 	ldr.w	r2, [lr]
 800a736:	b280      	uxth	r0, r0
 800a738:	b292      	uxth	r2, r2
 800a73a:	1a12      	subs	r2, r2, r0
 800a73c:	445a      	add	r2, fp
 800a73e:	f8de 0000 	ldr.w	r0, [lr]
 800a742:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a746:	b29b      	uxth	r3, r3
 800a748:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a74c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a750:	b292      	uxth	r2, r2
 800a752:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a756:	45e1      	cmp	r9, ip
 800a758:	f84e 2b04 	str.w	r2, [lr], #4
 800a75c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a760:	d2de      	bcs.n	800a720 <quorem+0x42>
 800a762:	9b00      	ldr	r3, [sp, #0]
 800a764:	58eb      	ldr	r3, [r5, r3]
 800a766:	b92b      	cbnz	r3, 800a774 <quorem+0x96>
 800a768:	9b01      	ldr	r3, [sp, #4]
 800a76a:	3b04      	subs	r3, #4
 800a76c:	429d      	cmp	r5, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	d32f      	bcc.n	800a7d2 <quorem+0xf4>
 800a772:	613c      	str	r4, [r7, #16]
 800a774:	4638      	mov	r0, r7
 800a776:	f001 f979 	bl	800ba6c <__mcmp>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	db25      	blt.n	800a7ca <quorem+0xec>
 800a77e:	4629      	mov	r1, r5
 800a780:	2000      	movs	r0, #0
 800a782:	f858 2b04 	ldr.w	r2, [r8], #4
 800a786:	f8d1 c000 	ldr.w	ip, [r1]
 800a78a:	fa1f fe82 	uxth.w	lr, r2
 800a78e:	fa1f f38c 	uxth.w	r3, ip
 800a792:	eba3 030e 	sub.w	r3, r3, lr
 800a796:	4403      	add	r3, r0
 800a798:	0c12      	lsrs	r2, r2, #16
 800a79a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a79e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7a8:	45c1      	cmp	r9, r8
 800a7aa:	f841 3b04 	str.w	r3, [r1], #4
 800a7ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7b2:	d2e6      	bcs.n	800a782 <quorem+0xa4>
 800a7b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7bc:	b922      	cbnz	r2, 800a7c8 <quorem+0xea>
 800a7be:	3b04      	subs	r3, #4
 800a7c0:	429d      	cmp	r5, r3
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	d30b      	bcc.n	800a7de <quorem+0x100>
 800a7c6:	613c      	str	r4, [r7, #16]
 800a7c8:	3601      	adds	r6, #1
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	b003      	add	sp, #12
 800a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d2:	6812      	ldr	r2, [r2, #0]
 800a7d4:	3b04      	subs	r3, #4
 800a7d6:	2a00      	cmp	r2, #0
 800a7d8:	d1cb      	bne.n	800a772 <quorem+0x94>
 800a7da:	3c01      	subs	r4, #1
 800a7dc:	e7c6      	b.n	800a76c <quorem+0x8e>
 800a7de:	6812      	ldr	r2, [r2, #0]
 800a7e0:	3b04      	subs	r3, #4
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	d1ef      	bne.n	800a7c6 <quorem+0xe8>
 800a7e6:	3c01      	subs	r4, #1
 800a7e8:	e7ea      	b.n	800a7c0 <quorem+0xe2>
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	e7ee      	b.n	800a7cc <quorem+0xee>
	...

0800a7f0 <_dtoa_r>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	69c7      	ldr	r7, [r0, #28]
 800a7f6:	b099      	sub	sp, #100	@ 0x64
 800a7f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7fc:	ec55 4b10 	vmov	r4, r5, d0
 800a800:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a802:	9109      	str	r1, [sp, #36]	@ 0x24
 800a804:	4683      	mov	fp, r0
 800a806:	920e      	str	r2, [sp, #56]	@ 0x38
 800a808:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a80a:	b97f      	cbnz	r7, 800a82c <_dtoa_r+0x3c>
 800a80c:	2010      	movs	r0, #16
 800a80e:	f000 fdfd 	bl	800b40c <malloc>
 800a812:	4602      	mov	r2, r0
 800a814:	f8cb 001c 	str.w	r0, [fp, #28]
 800a818:	b920      	cbnz	r0, 800a824 <_dtoa_r+0x34>
 800a81a:	4ba7      	ldr	r3, [pc, #668]	@ (800aab8 <_dtoa_r+0x2c8>)
 800a81c:	21ef      	movs	r1, #239	@ 0xef
 800a81e:	48a7      	ldr	r0, [pc, #668]	@ (800aabc <_dtoa_r+0x2cc>)
 800a820:	f001 fc68 	bl	800c0f4 <__assert_func>
 800a824:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a828:	6007      	str	r7, [r0, #0]
 800a82a:	60c7      	str	r7, [r0, #12]
 800a82c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a830:	6819      	ldr	r1, [r3, #0]
 800a832:	b159      	cbz	r1, 800a84c <_dtoa_r+0x5c>
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	604a      	str	r2, [r1, #4]
 800a838:	2301      	movs	r3, #1
 800a83a:	4093      	lsls	r3, r2
 800a83c:	608b      	str	r3, [r1, #8]
 800a83e:	4658      	mov	r0, fp
 800a840:	f000 feda 	bl	800b5f8 <_Bfree>
 800a844:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	1e2b      	subs	r3, r5, #0
 800a84e:	bfb9      	ittee	lt
 800a850:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a854:	9303      	strlt	r3, [sp, #12]
 800a856:	2300      	movge	r3, #0
 800a858:	6033      	strge	r3, [r6, #0]
 800a85a:	9f03      	ldr	r7, [sp, #12]
 800a85c:	4b98      	ldr	r3, [pc, #608]	@ (800aac0 <_dtoa_r+0x2d0>)
 800a85e:	bfbc      	itt	lt
 800a860:	2201      	movlt	r2, #1
 800a862:	6032      	strlt	r2, [r6, #0]
 800a864:	43bb      	bics	r3, r7
 800a866:	d112      	bne.n	800a88e <_dtoa_r+0x9e>
 800a868:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a86a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a874:	4323      	orrs	r3, r4
 800a876:	f000 854d 	beq.w	800b314 <_dtoa_r+0xb24>
 800a87a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a87c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aad4 <_dtoa_r+0x2e4>
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 854f 	beq.w	800b324 <_dtoa_r+0xb34>
 800a886:	f10a 0303 	add.w	r3, sl, #3
 800a88a:	f000 bd49 	b.w	800b320 <_dtoa_r+0xb30>
 800a88e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a892:	2200      	movs	r2, #0
 800a894:	ec51 0b17 	vmov	r0, r1, d7
 800a898:	2300      	movs	r3, #0
 800a89a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a89e:	f7f6 f933 	bl	8000b08 <__aeabi_dcmpeq>
 800a8a2:	4680      	mov	r8, r0
 800a8a4:	b158      	cbz	r0, 800a8be <_dtoa_r+0xce>
 800a8a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8ae:	b113      	cbz	r3, 800a8b6 <_dtoa_r+0xc6>
 800a8b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a8b2:	4b84      	ldr	r3, [pc, #528]	@ (800aac4 <_dtoa_r+0x2d4>)
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aad8 <_dtoa_r+0x2e8>
 800a8ba:	f000 bd33 	b.w	800b324 <_dtoa_r+0xb34>
 800a8be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a8c2:	aa16      	add	r2, sp, #88	@ 0x58
 800a8c4:	a917      	add	r1, sp, #92	@ 0x5c
 800a8c6:	4658      	mov	r0, fp
 800a8c8:	f001 f980 	bl	800bbcc <__d2b>
 800a8cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a8d0:	4681      	mov	r9, r0
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	d077      	beq.n	800a9c6 <_dtoa_r+0x1d6>
 800a8d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a8dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a8ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4b74      	ldr	r3, [pc, #464]	@ (800aac8 <_dtoa_r+0x2d8>)
 800a8f6:	f7f5 fce7 	bl	80002c8 <__aeabi_dsub>
 800a8fa:	a369      	add	r3, pc, #420	@ (adr r3, 800aaa0 <_dtoa_r+0x2b0>)
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f7f5 fe9a 	bl	8000638 <__aeabi_dmul>
 800a904:	a368      	add	r3, pc, #416	@ (adr r3, 800aaa8 <_dtoa_r+0x2b8>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	f7f5 fcdf 	bl	80002cc <__adddf3>
 800a90e:	4604      	mov	r4, r0
 800a910:	4630      	mov	r0, r6
 800a912:	460d      	mov	r5, r1
 800a914:	f7f5 fe26 	bl	8000564 <__aeabi_i2d>
 800a918:	a365      	add	r3, pc, #404	@ (adr r3, 800aab0 <_dtoa_r+0x2c0>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fe8b 	bl	8000638 <__aeabi_dmul>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	4620      	mov	r0, r4
 800a928:	4629      	mov	r1, r5
 800a92a:	f7f5 fccf 	bl	80002cc <__adddf3>
 800a92e:	4604      	mov	r4, r0
 800a930:	460d      	mov	r5, r1
 800a932:	f7f6 f931 	bl	8000b98 <__aeabi_d2iz>
 800a936:	2200      	movs	r2, #0
 800a938:	4607      	mov	r7, r0
 800a93a:	2300      	movs	r3, #0
 800a93c:	4620      	mov	r0, r4
 800a93e:	4629      	mov	r1, r5
 800a940:	f7f6 f8ec 	bl	8000b1c <__aeabi_dcmplt>
 800a944:	b140      	cbz	r0, 800a958 <_dtoa_r+0x168>
 800a946:	4638      	mov	r0, r7
 800a948:	f7f5 fe0c 	bl	8000564 <__aeabi_i2d>
 800a94c:	4622      	mov	r2, r4
 800a94e:	462b      	mov	r3, r5
 800a950:	f7f6 f8da 	bl	8000b08 <__aeabi_dcmpeq>
 800a954:	b900      	cbnz	r0, 800a958 <_dtoa_r+0x168>
 800a956:	3f01      	subs	r7, #1
 800a958:	2f16      	cmp	r7, #22
 800a95a:	d851      	bhi.n	800aa00 <_dtoa_r+0x210>
 800a95c:	4b5b      	ldr	r3, [pc, #364]	@ (800aacc <_dtoa_r+0x2dc>)
 800a95e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a96a:	f7f6 f8d7 	bl	8000b1c <__aeabi_dcmplt>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d048      	beq.n	800aa04 <_dtoa_r+0x214>
 800a972:	3f01      	subs	r7, #1
 800a974:	2300      	movs	r3, #0
 800a976:	9312      	str	r3, [sp, #72]	@ 0x48
 800a978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a97a:	1b9b      	subs	r3, r3, r6
 800a97c:	1e5a      	subs	r2, r3, #1
 800a97e:	bf44      	itt	mi
 800a980:	f1c3 0801 	rsbmi	r8, r3, #1
 800a984:	2300      	movmi	r3, #0
 800a986:	9208      	str	r2, [sp, #32]
 800a988:	bf54      	ite	pl
 800a98a:	f04f 0800 	movpl.w	r8, #0
 800a98e:	9308      	strmi	r3, [sp, #32]
 800a990:	2f00      	cmp	r7, #0
 800a992:	db39      	blt.n	800aa08 <_dtoa_r+0x218>
 800a994:	9b08      	ldr	r3, [sp, #32]
 800a996:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a998:	443b      	add	r3, r7
 800a99a:	9308      	str	r3, [sp, #32]
 800a99c:	2300      	movs	r3, #0
 800a99e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a2:	2b09      	cmp	r3, #9
 800a9a4:	d864      	bhi.n	800aa70 <_dtoa_r+0x280>
 800a9a6:	2b05      	cmp	r3, #5
 800a9a8:	bfc4      	itt	gt
 800a9aa:	3b04      	subgt	r3, #4
 800a9ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b0:	f1a3 0302 	sub.w	r3, r3, #2
 800a9b4:	bfcc      	ite	gt
 800a9b6:	2400      	movgt	r4, #0
 800a9b8:	2401      	movle	r4, #1
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d863      	bhi.n	800aa86 <_dtoa_r+0x296>
 800a9be:	e8df f003 	tbb	[pc, r3]
 800a9c2:	372a      	.short	0x372a
 800a9c4:	5535      	.short	0x5535
 800a9c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a9ca:	441e      	add	r6, r3
 800a9cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a9d0:	2b20      	cmp	r3, #32
 800a9d2:	bfc1      	itttt	gt
 800a9d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a9d8:	409f      	lslgt	r7, r3
 800a9da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a9de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9e2:	bfd6      	itet	le
 800a9e4:	f1c3 0320 	rsble	r3, r3, #32
 800a9e8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a9ec:	fa04 f003 	lslle.w	r0, r4, r3
 800a9f0:	f7f5 fda8 	bl	8000544 <__aeabi_ui2d>
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a9fa:	3e01      	subs	r6, #1
 800a9fc:	9214      	str	r2, [sp, #80]	@ 0x50
 800a9fe:	e777      	b.n	800a8f0 <_dtoa_r+0x100>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e7b8      	b.n	800a976 <_dtoa_r+0x186>
 800aa04:	9012      	str	r0, [sp, #72]	@ 0x48
 800aa06:	e7b7      	b.n	800a978 <_dtoa_r+0x188>
 800aa08:	427b      	negs	r3, r7
 800aa0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	eba8 0807 	sub.w	r8, r8, r7
 800aa12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa14:	e7c4      	b.n	800a9a0 <_dtoa_r+0x1b0>
 800aa16:	2300      	movs	r3, #0
 800aa18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dc35      	bgt.n	800aa8c <_dtoa_r+0x29c>
 800aa20:	2301      	movs	r3, #1
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	9307      	str	r3, [sp, #28]
 800aa26:	461a      	mov	r2, r3
 800aa28:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa2a:	e00b      	b.n	800aa44 <_dtoa_r+0x254>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e7f3      	b.n	800aa18 <_dtoa_r+0x228>
 800aa30:	2300      	movs	r3, #0
 800aa32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa36:	18fb      	adds	r3, r7, r3
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	9307      	str	r3, [sp, #28]
 800aa40:	bfb8      	it	lt
 800aa42:	2301      	movlt	r3, #1
 800aa44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aa48:	2100      	movs	r1, #0
 800aa4a:	2204      	movs	r2, #4
 800aa4c:	f102 0514 	add.w	r5, r2, #20
 800aa50:	429d      	cmp	r5, r3
 800aa52:	d91f      	bls.n	800aa94 <_dtoa_r+0x2a4>
 800aa54:	6041      	str	r1, [r0, #4]
 800aa56:	4658      	mov	r0, fp
 800aa58:	f000 fd8e 	bl	800b578 <_Balloc>
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d13c      	bne.n	800aadc <_dtoa_r+0x2ec>
 800aa62:	4b1b      	ldr	r3, [pc, #108]	@ (800aad0 <_dtoa_r+0x2e0>)
 800aa64:	4602      	mov	r2, r0
 800aa66:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa6a:	e6d8      	b.n	800a81e <_dtoa_r+0x2e>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e7e0      	b.n	800aa32 <_dtoa_r+0x242>
 800aa70:	2401      	movs	r4, #1
 800aa72:	2300      	movs	r3, #0
 800aa74:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa78:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	9307      	str	r3, [sp, #28]
 800aa80:	2200      	movs	r2, #0
 800aa82:	2312      	movs	r3, #18
 800aa84:	e7d0      	b.n	800aa28 <_dtoa_r+0x238>
 800aa86:	2301      	movs	r3, #1
 800aa88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa8a:	e7f5      	b.n	800aa78 <_dtoa_r+0x288>
 800aa8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	9307      	str	r3, [sp, #28]
 800aa92:	e7d7      	b.n	800aa44 <_dtoa_r+0x254>
 800aa94:	3101      	adds	r1, #1
 800aa96:	0052      	lsls	r2, r2, #1
 800aa98:	e7d8      	b.n	800aa4c <_dtoa_r+0x25c>
 800aa9a:	bf00      	nop
 800aa9c:	f3af 8000 	nop.w
 800aaa0:	636f4361 	.word	0x636f4361
 800aaa4:	3fd287a7 	.word	0x3fd287a7
 800aaa8:	8b60c8b3 	.word	0x8b60c8b3
 800aaac:	3fc68a28 	.word	0x3fc68a28
 800aab0:	509f79fb 	.word	0x509f79fb
 800aab4:	3fd34413 	.word	0x3fd34413
 800aab8:	08020689 	.word	0x08020689
 800aabc:	080206a0 	.word	0x080206a0
 800aac0:	7ff00000 	.word	0x7ff00000
 800aac4:	08020659 	.word	0x08020659
 800aac8:	3ff80000 	.word	0x3ff80000
 800aacc:	08020798 	.word	0x08020798
 800aad0:	080206f8 	.word	0x080206f8
 800aad4:	08020685 	.word	0x08020685
 800aad8:	08020658 	.word	0x08020658
 800aadc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aae0:	6018      	str	r0, [r3, #0]
 800aae2:	9b07      	ldr	r3, [sp, #28]
 800aae4:	2b0e      	cmp	r3, #14
 800aae6:	f200 80a4 	bhi.w	800ac32 <_dtoa_r+0x442>
 800aaea:	2c00      	cmp	r4, #0
 800aaec:	f000 80a1 	beq.w	800ac32 <_dtoa_r+0x442>
 800aaf0:	2f00      	cmp	r7, #0
 800aaf2:	dd33      	ble.n	800ab5c <_dtoa_r+0x36c>
 800aaf4:	4bad      	ldr	r3, [pc, #692]	@ (800adac <_dtoa_r+0x5bc>)
 800aaf6:	f007 020f 	and.w	r2, r7, #15
 800aafa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aafe:	ed93 7b00 	vldr	d7, [r3]
 800ab02:	05f8      	lsls	r0, r7, #23
 800ab04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ab08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab0c:	d516      	bpl.n	800ab3c <_dtoa_r+0x34c>
 800ab0e:	4ba8      	ldr	r3, [pc, #672]	@ (800adb0 <_dtoa_r+0x5c0>)
 800ab10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab18:	f7f5 feb8 	bl	800088c <__aeabi_ddiv>
 800ab1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab20:	f004 040f 	and.w	r4, r4, #15
 800ab24:	2603      	movs	r6, #3
 800ab26:	4da2      	ldr	r5, [pc, #648]	@ (800adb0 <_dtoa_r+0x5c0>)
 800ab28:	b954      	cbnz	r4, 800ab40 <_dtoa_r+0x350>
 800ab2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab32:	f7f5 feab 	bl	800088c <__aeabi_ddiv>
 800ab36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab3a:	e028      	b.n	800ab8e <_dtoa_r+0x39e>
 800ab3c:	2602      	movs	r6, #2
 800ab3e:	e7f2      	b.n	800ab26 <_dtoa_r+0x336>
 800ab40:	07e1      	lsls	r1, r4, #31
 800ab42:	d508      	bpl.n	800ab56 <_dtoa_r+0x366>
 800ab44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab4c:	f7f5 fd74 	bl	8000638 <__aeabi_dmul>
 800ab50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab54:	3601      	adds	r6, #1
 800ab56:	1064      	asrs	r4, r4, #1
 800ab58:	3508      	adds	r5, #8
 800ab5a:	e7e5      	b.n	800ab28 <_dtoa_r+0x338>
 800ab5c:	f000 80d2 	beq.w	800ad04 <_dtoa_r+0x514>
 800ab60:	427c      	negs	r4, r7
 800ab62:	4b92      	ldr	r3, [pc, #584]	@ (800adac <_dtoa_r+0x5bc>)
 800ab64:	4d92      	ldr	r5, [pc, #584]	@ (800adb0 <_dtoa_r+0x5c0>)
 800ab66:	f004 020f 	and.w	r2, r4, #15
 800ab6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab76:	f7f5 fd5f 	bl	8000638 <__aeabi_dmul>
 800ab7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab7e:	1124      	asrs	r4, r4, #4
 800ab80:	2300      	movs	r3, #0
 800ab82:	2602      	movs	r6, #2
 800ab84:	2c00      	cmp	r4, #0
 800ab86:	f040 80b2 	bne.w	800acee <_dtoa_r+0x4fe>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1d3      	bne.n	800ab36 <_dtoa_r+0x346>
 800ab8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 80b7 	beq.w	800ad08 <_dtoa_r+0x518>
 800ab9a:	4b86      	ldr	r3, [pc, #536]	@ (800adb4 <_dtoa_r+0x5c4>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	f7f5 ffbb 	bl	8000b1c <__aeabi_dcmplt>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f000 80ae 	beq.w	800ad08 <_dtoa_r+0x518>
 800abac:	9b07      	ldr	r3, [sp, #28]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 80aa 	beq.w	800ad08 <_dtoa_r+0x518>
 800abb4:	9b00      	ldr	r3, [sp, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	dd37      	ble.n	800ac2a <_dtoa_r+0x43a>
 800abba:	1e7b      	subs	r3, r7, #1
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	4620      	mov	r0, r4
 800abc0:	4b7d      	ldr	r3, [pc, #500]	@ (800adb8 <_dtoa_r+0x5c8>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	4629      	mov	r1, r5
 800abc6:	f7f5 fd37 	bl	8000638 <__aeabi_dmul>
 800abca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abce:	9c00      	ldr	r4, [sp, #0]
 800abd0:	3601      	adds	r6, #1
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7f5 fcc6 	bl	8000564 <__aeabi_i2d>
 800abd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abdc:	f7f5 fd2c 	bl	8000638 <__aeabi_dmul>
 800abe0:	4b76      	ldr	r3, [pc, #472]	@ (800adbc <_dtoa_r+0x5cc>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	f7f5 fb72 	bl	80002cc <__adddf3>
 800abe8:	4605      	mov	r5, r0
 800abea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800abee:	2c00      	cmp	r4, #0
 800abf0:	f040 808d 	bne.w	800ad0e <_dtoa_r+0x51e>
 800abf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abf8:	4b71      	ldr	r3, [pc, #452]	@ (800adc0 <_dtoa_r+0x5d0>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	f7f5 fb64 	bl	80002c8 <__aeabi_dsub>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac08:	462a      	mov	r2, r5
 800ac0a:	4633      	mov	r3, r6
 800ac0c:	f7f5 ffa4 	bl	8000b58 <__aeabi_dcmpgt>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	f040 828b 	bne.w	800b12c <_dtoa_r+0x93c>
 800ac16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac20:	f7f5 ff7c 	bl	8000b1c <__aeabi_dcmplt>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f040 8128 	bne.w	800ae7a <_dtoa_r+0x68a>
 800ac2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ac32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f2c0 815a 	blt.w	800aeee <_dtoa_r+0x6fe>
 800ac3a:	2f0e      	cmp	r7, #14
 800ac3c:	f300 8157 	bgt.w	800aeee <_dtoa_r+0x6fe>
 800ac40:	4b5a      	ldr	r3, [pc, #360]	@ (800adac <_dtoa_r+0x5bc>)
 800ac42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac46:	ed93 7b00 	vldr	d7, [r3]
 800ac4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	ed8d 7b00 	vstr	d7, [sp]
 800ac52:	da03      	bge.n	800ac5c <_dtoa_r+0x46c>
 800ac54:	9b07      	ldr	r3, [sp, #28]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f340 8101 	ble.w	800ae5e <_dtoa_r+0x66e>
 800ac5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac60:	4656      	mov	r6, sl
 800ac62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac66:	4620      	mov	r0, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f7f5 fe0f 	bl	800088c <__aeabi_ddiv>
 800ac6e:	f7f5 ff93 	bl	8000b98 <__aeabi_d2iz>
 800ac72:	4680      	mov	r8, r0
 800ac74:	f7f5 fc76 	bl	8000564 <__aeabi_i2d>
 800ac78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac7c:	f7f5 fcdc 	bl	8000638 <__aeabi_dmul>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4620      	mov	r0, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ac8c:	f7f5 fb1c 	bl	80002c8 <__aeabi_dsub>
 800ac90:	f806 4b01 	strb.w	r4, [r6], #1
 800ac94:	9d07      	ldr	r5, [sp, #28]
 800ac96:	eba6 040a 	sub.w	r4, r6, sl
 800ac9a:	42a5      	cmp	r5, r4
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	f040 8117 	bne.w	800aed2 <_dtoa_r+0x6e2>
 800aca4:	f7f5 fb12 	bl	80002cc <__adddf3>
 800aca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acac:	4604      	mov	r4, r0
 800acae:	460d      	mov	r5, r1
 800acb0:	f7f5 ff52 	bl	8000b58 <__aeabi_dcmpgt>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f040 80f9 	bne.w	800aeac <_dtoa_r+0x6bc>
 800acba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 ff21 	bl	8000b08 <__aeabi_dcmpeq>
 800acc6:	b118      	cbz	r0, 800acd0 <_dtoa_r+0x4e0>
 800acc8:	f018 0f01 	tst.w	r8, #1
 800accc:	f040 80ee 	bne.w	800aeac <_dtoa_r+0x6bc>
 800acd0:	4649      	mov	r1, r9
 800acd2:	4658      	mov	r0, fp
 800acd4:	f000 fc90 	bl	800b5f8 <_Bfree>
 800acd8:	2300      	movs	r3, #0
 800acda:	7033      	strb	r3, [r6, #0]
 800acdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acde:	3701      	adds	r7, #1
 800ace0:	601f      	str	r7, [r3, #0]
 800ace2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 831d 	beq.w	800b324 <_dtoa_r+0xb34>
 800acea:	601e      	str	r6, [r3, #0]
 800acec:	e31a      	b.n	800b324 <_dtoa_r+0xb34>
 800acee:	07e2      	lsls	r2, r4, #31
 800acf0:	d505      	bpl.n	800acfe <_dtoa_r+0x50e>
 800acf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acf6:	f7f5 fc9f 	bl	8000638 <__aeabi_dmul>
 800acfa:	3601      	adds	r6, #1
 800acfc:	2301      	movs	r3, #1
 800acfe:	1064      	asrs	r4, r4, #1
 800ad00:	3508      	adds	r5, #8
 800ad02:	e73f      	b.n	800ab84 <_dtoa_r+0x394>
 800ad04:	2602      	movs	r6, #2
 800ad06:	e742      	b.n	800ab8e <_dtoa_r+0x39e>
 800ad08:	9c07      	ldr	r4, [sp, #28]
 800ad0a:	9704      	str	r7, [sp, #16]
 800ad0c:	e761      	b.n	800abd2 <_dtoa_r+0x3e2>
 800ad0e:	4b27      	ldr	r3, [pc, #156]	@ (800adac <_dtoa_r+0x5bc>)
 800ad10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad1a:	4454      	add	r4, sl
 800ad1c:	2900      	cmp	r1, #0
 800ad1e:	d053      	beq.n	800adc8 <_dtoa_r+0x5d8>
 800ad20:	4928      	ldr	r1, [pc, #160]	@ (800adc4 <_dtoa_r+0x5d4>)
 800ad22:	2000      	movs	r0, #0
 800ad24:	f7f5 fdb2 	bl	800088c <__aeabi_ddiv>
 800ad28:	4633      	mov	r3, r6
 800ad2a:	462a      	mov	r2, r5
 800ad2c:	f7f5 facc 	bl	80002c8 <__aeabi_dsub>
 800ad30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad34:	4656      	mov	r6, sl
 800ad36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad3a:	f7f5 ff2d 	bl	8000b98 <__aeabi_d2iz>
 800ad3e:	4605      	mov	r5, r0
 800ad40:	f7f5 fc10 	bl	8000564 <__aeabi_i2d>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad4c:	f7f5 fabc 	bl	80002c8 <__aeabi_dsub>
 800ad50:	3530      	adds	r5, #48	@ 0x30
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad5a:	f806 5b01 	strb.w	r5, [r6], #1
 800ad5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad62:	f7f5 fedb 	bl	8000b1c <__aeabi_dcmplt>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d171      	bne.n	800ae4e <_dtoa_r+0x65e>
 800ad6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad6e:	4911      	ldr	r1, [pc, #68]	@ (800adb4 <_dtoa_r+0x5c4>)
 800ad70:	2000      	movs	r0, #0
 800ad72:	f7f5 faa9 	bl	80002c8 <__aeabi_dsub>
 800ad76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad7a:	f7f5 fecf 	bl	8000b1c <__aeabi_dcmplt>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f040 8095 	bne.w	800aeae <_dtoa_r+0x6be>
 800ad84:	42a6      	cmp	r6, r4
 800ad86:	f43f af50 	beq.w	800ac2a <_dtoa_r+0x43a>
 800ad8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad8e:	4b0a      	ldr	r3, [pc, #40]	@ (800adb8 <_dtoa_r+0x5c8>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	f7f5 fc51 	bl	8000638 <__aeabi_dmul>
 800ad96:	4b08      	ldr	r3, [pc, #32]	@ (800adb8 <_dtoa_r+0x5c8>)
 800ad98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada2:	f7f5 fc49 	bl	8000638 <__aeabi_dmul>
 800ada6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adaa:	e7c4      	b.n	800ad36 <_dtoa_r+0x546>
 800adac:	08020798 	.word	0x08020798
 800adb0:	08020770 	.word	0x08020770
 800adb4:	3ff00000 	.word	0x3ff00000
 800adb8:	40240000 	.word	0x40240000
 800adbc:	401c0000 	.word	0x401c0000
 800adc0:	40140000 	.word	0x40140000
 800adc4:	3fe00000 	.word	0x3fe00000
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	f7f5 fc34 	bl	8000638 <__aeabi_dmul>
 800add0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800add4:	9415      	str	r4, [sp, #84]	@ 0x54
 800add6:	4656      	mov	r6, sl
 800add8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800addc:	f7f5 fedc 	bl	8000b98 <__aeabi_d2iz>
 800ade0:	4605      	mov	r5, r0
 800ade2:	f7f5 fbbf 	bl	8000564 <__aeabi_i2d>
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adee:	f7f5 fa6b 	bl	80002c8 <__aeabi_dsub>
 800adf2:	3530      	adds	r5, #48	@ 0x30
 800adf4:	f806 5b01 	strb.w	r5, [r6], #1
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	42a6      	cmp	r6, r4
 800adfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae02:	f04f 0200 	mov.w	r2, #0
 800ae06:	d124      	bne.n	800ae52 <_dtoa_r+0x662>
 800ae08:	4bac      	ldr	r3, [pc, #688]	@ (800b0bc <_dtoa_r+0x8cc>)
 800ae0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae0e:	f7f5 fa5d 	bl	80002cc <__adddf3>
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae1a:	f7f5 fe9d 	bl	8000b58 <__aeabi_dcmpgt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d145      	bne.n	800aeae <_dtoa_r+0x6be>
 800ae22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae26:	49a5      	ldr	r1, [pc, #660]	@ (800b0bc <_dtoa_r+0x8cc>)
 800ae28:	2000      	movs	r0, #0
 800ae2a:	f7f5 fa4d 	bl	80002c8 <__aeabi_dsub>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae36:	f7f5 fe71 	bl	8000b1c <__aeabi_dcmplt>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	f43f aef5 	beq.w	800ac2a <_dtoa_r+0x43a>
 800ae40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ae42:	1e73      	subs	r3, r6, #1
 800ae44:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae4a:	2b30      	cmp	r3, #48	@ 0x30
 800ae4c:	d0f8      	beq.n	800ae40 <_dtoa_r+0x650>
 800ae4e:	9f04      	ldr	r7, [sp, #16]
 800ae50:	e73e      	b.n	800acd0 <_dtoa_r+0x4e0>
 800ae52:	4b9b      	ldr	r3, [pc, #620]	@ (800b0c0 <_dtoa_r+0x8d0>)
 800ae54:	f7f5 fbf0 	bl	8000638 <__aeabi_dmul>
 800ae58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae5c:	e7bc      	b.n	800add8 <_dtoa_r+0x5e8>
 800ae5e:	d10c      	bne.n	800ae7a <_dtoa_r+0x68a>
 800ae60:	4b98      	ldr	r3, [pc, #608]	@ (800b0c4 <_dtoa_r+0x8d4>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae68:	f7f5 fbe6 	bl	8000638 <__aeabi_dmul>
 800ae6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae70:	f7f5 fe68 	bl	8000b44 <__aeabi_dcmpge>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f000 8157 	beq.w	800b128 <_dtoa_r+0x938>
 800ae7a:	2400      	movs	r4, #0
 800ae7c:	4625      	mov	r5, r4
 800ae7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae80:	43db      	mvns	r3, r3
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	4656      	mov	r6, sl
 800ae86:	2700      	movs	r7, #0
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4658      	mov	r0, fp
 800ae8c:	f000 fbb4 	bl	800b5f8 <_Bfree>
 800ae90:	2d00      	cmp	r5, #0
 800ae92:	d0dc      	beq.n	800ae4e <_dtoa_r+0x65e>
 800ae94:	b12f      	cbz	r7, 800aea2 <_dtoa_r+0x6b2>
 800ae96:	42af      	cmp	r7, r5
 800ae98:	d003      	beq.n	800aea2 <_dtoa_r+0x6b2>
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	4658      	mov	r0, fp
 800ae9e:	f000 fbab 	bl	800b5f8 <_Bfree>
 800aea2:	4629      	mov	r1, r5
 800aea4:	4658      	mov	r0, fp
 800aea6:	f000 fba7 	bl	800b5f8 <_Bfree>
 800aeaa:	e7d0      	b.n	800ae4e <_dtoa_r+0x65e>
 800aeac:	9704      	str	r7, [sp, #16]
 800aeae:	4633      	mov	r3, r6
 800aeb0:	461e      	mov	r6, r3
 800aeb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeb6:	2a39      	cmp	r2, #57	@ 0x39
 800aeb8:	d107      	bne.n	800aeca <_dtoa_r+0x6da>
 800aeba:	459a      	cmp	sl, r3
 800aebc:	d1f8      	bne.n	800aeb0 <_dtoa_r+0x6c0>
 800aebe:	9a04      	ldr	r2, [sp, #16]
 800aec0:	3201      	adds	r2, #1
 800aec2:	9204      	str	r2, [sp, #16]
 800aec4:	2230      	movs	r2, #48	@ 0x30
 800aec6:	f88a 2000 	strb.w	r2, [sl]
 800aeca:	781a      	ldrb	r2, [r3, #0]
 800aecc:	3201      	adds	r2, #1
 800aece:	701a      	strb	r2, [r3, #0]
 800aed0:	e7bd      	b.n	800ae4e <_dtoa_r+0x65e>
 800aed2:	4b7b      	ldr	r3, [pc, #492]	@ (800b0c0 <_dtoa_r+0x8d0>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	f7f5 fbaf 	bl	8000638 <__aeabi_dmul>
 800aeda:	2200      	movs	r2, #0
 800aedc:	2300      	movs	r3, #0
 800aede:	4604      	mov	r4, r0
 800aee0:	460d      	mov	r5, r1
 800aee2:	f7f5 fe11 	bl	8000b08 <__aeabi_dcmpeq>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	f43f aebb 	beq.w	800ac62 <_dtoa_r+0x472>
 800aeec:	e6f0      	b.n	800acd0 <_dtoa_r+0x4e0>
 800aeee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	f000 80db 	beq.w	800b0ac <_dtoa_r+0x8bc>
 800aef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aef8:	2a01      	cmp	r2, #1
 800aefa:	f300 80bf 	bgt.w	800b07c <_dtoa_r+0x88c>
 800aefe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af00:	2a00      	cmp	r2, #0
 800af02:	f000 80b7 	beq.w	800b074 <_dtoa_r+0x884>
 800af06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af0c:	4646      	mov	r6, r8
 800af0e:	9a08      	ldr	r2, [sp, #32]
 800af10:	2101      	movs	r1, #1
 800af12:	441a      	add	r2, r3
 800af14:	4658      	mov	r0, fp
 800af16:	4498      	add	r8, r3
 800af18:	9208      	str	r2, [sp, #32]
 800af1a:	f000 fc21 	bl	800b760 <__i2b>
 800af1e:	4605      	mov	r5, r0
 800af20:	b15e      	cbz	r6, 800af3a <_dtoa_r+0x74a>
 800af22:	9b08      	ldr	r3, [sp, #32]
 800af24:	2b00      	cmp	r3, #0
 800af26:	dd08      	ble.n	800af3a <_dtoa_r+0x74a>
 800af28:	42b3      	cmp	r3, r6
 800af2a:	9a08      	ldr	r2, [sp, #32]
 800af2c:	bfa8      	it	ge
 800af2e:	4633      	movge	r3, r6
 800af30:	eba8 0803 	sub.w	r8, r8, r3
 800af34:	1af6      	subs	r6, r6, r3
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	9308      	str	r3, [sp, #32]
 800af3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af3c:	b1f3      	cbz	r3, 800af7c <_dtoa_r+0x78c>
 800af3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 80b7 	beq.w	800b0b4 <_dtoa_r+0x8c4>
 800af46:	b18c      	cbz	r4, 800af6c <_dtoa_r+0x77c>
 800af48:	4629      	mov	r1, r5
 800af4a:	4622      	mov	r2, r4
 800af4c:	4658      	mov	r0, fp
 800af4e:	f000 fcc7 	bl	800b8e0 <__pow5mult>
 800af52:	464a      	mov	r2, r9
 800af54:	4601      	mov	r1, r0
 800af56:	4605      	mov	r5, r0
 800af58:	4658      	mov	r0, fp
 800af5a:	f000 fc17 	bl	800b78c <__multiply>
 800af5e:	4649      	mov	r1, r9
 800af60:	9004      	str	r0, [sp, #16]
 800af62:	4658      	mov	r0, fp
 800af64:	f000 fb48 	bl	800b5f8 <_Bfree>
 800af68:	9b04      	ldr	r3, [sp, #16]
 800af6a:	4699      	mov	r9, r3
 800af6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af6e:	1b1a      	subs	r2, r3, r4
 800af70:	d004      	beq.n	800af7c <_dtoa_r+0x78c>
 800af72:	4649      	mov	r1, r9
 800af74:	4658      	mov	r0, fp
 800af76:	f000 fcb3 	bl	800b8e0 <__pow5mult>
 800af7a:	4681      	mov	r9, r0
 800af7c:	2101      	movs	r1, #1
 800af7e:	4658      	mov	r0, fp
 800af80:	f000 fbee 	bl	800b760 <__i2b>
 800af84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af86:	4604      	mov	r4, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 81cf 	beq.w	800b32c <_dtoa_r+0xb3c>
 800af8e:	461a      	mov	r2, r3
 800af90:	4601      	mov	r1, r0
 800af92:	4658      	mov	r0, fp
 800af94:	f000 fca4 	bl	800b8e0 <__pow5mult>
 800af98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	4604      	mov	r4, r0
 800af9e:	f300 8095 	bgt.w	800b0cc <_dtoa_r+0x8dc>
 800afa2:	9b02      	ldr	r3, [sp, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f040 8087 	bne.w	800b0b8 <_dtoa_r+0x8c8>
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f040 8089 	bne.w	800b0c8 <_dtoa_r+0x8d8>
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afbc:	0d1b      	lsrs	r3, r3, #20
 800afbe:	051b      	lsls	r3, r3, #20
 800afc0:	b12b      	cbz	r3, 800afce <_dtoa_r+0x7de>
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	3301      	adds	r3, #1
 800afc6:	9308      	str	r3, [sp, #32]
 800afc8:	f108 0801 	add.w	r8, r8, #1
 800afcc:	2301      	movs	r3, #1
 800afce:	930a      	str	r3, [sp, #40]	@ 0x28
 800afd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 81b0 	beq.w	800b338 <_dtoa_r+0xb48>
 800afd8:	6923      	ldr	r3, [r4, #16]
 800afda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afde:	6918      	ldr	r0, [r3, #16]
 800afe0:	f000 fb72 	bl	800b6c8 <__hi0bits>
 800afe4:	f1c0 0020 	rsb	r0, r0, #32
 800afe8:	9b08      	ldr	r3, [sp, #32]
 800afea:	4418      	add	r0, r3
 800afec:	f010 001f 	ands.w	r0, r0, #31
 800aff0:	d077      	beq.n	800b0e2 <_dtoa_r+0x8f2>
 800aff2:	f1c0 0320 	rsb	r3, r0, #32
 800aff6:	2b04      	cmp	r3, #4
 800aff8:	dd6b      	ble.n	800b0d2 <_dtoa_r+0x8e2>
 800affa:	9b08      	ldr	r3, [sp, #32]
 800affc:	f1c0 001c 	rsb	r0, r0, #28
 800b000:	4403      	add	r3, r0
 800b002:	4480      	add	r8, r0
 800b004:	4406      	add	r6, r0
 800b006:	9308      	str	r3, [sp, #32]
 800b008:	f1b8 0f00 	cmp.w	r8, #0
 800b00c:	dd05      	ble.n	800b01a <_dtoa_r+0x82a>
 800b00e:	4649      	mov	r1, r9
 800b010:	4642      	mov	r2, r8
 800b012:	4658      	mov	r0, fp
 800b014:	f000 fcbe 	bl	800b994 <__lshift>
 800b018:	4681      	mov	r9, r0
 800b01a:	9b08      	ldr	r3, [sp, #32]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dd05      	ble.n	800b02c <_dtoa_r+0x83c>
 800b020:	4621      	mov	r1, r4
 800b022:	461a      	mov	r2, r3
 800b024:	4658      	mov	r0, fp
 800b026:	f000 fcb5 	bl	800b994 <__lshift>
 800b02a:	4604      	mov	r4, r0
 800b02c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d059      	beq.n	800b0e6 <_dtoa_r+0x8f6>
 800b032:	4621      	mov	r1, r4
 800b034:	4648      	mov	r0, r9
 800b036:	f000 fd19 	bl	800ba6c <__mcmp>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	da53      	bge.n	800b0e6 <_dtoa_r+0x8f6>
 800b03e:	1e7b      	subs	r3, r7, #1
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	4649      	mov	r1, r9
 800b044:	2300      	movs	r3, #0
 800b046:	220a      	movs	r2, #10
 800b048:	4658      	mov	r0, fp
 800b04a:	f000 faf7 	bl	800b63c <__multadd>
 800b04e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b050:	4681      	mov	r9, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 8172 	beq.w	800b33c <_dtoa_r+0xb4c>
 800b058:	2300      	movs	r3, #0
 800b05a:	4629      	mov	r1, r5
 800b05c:	220a      	movs	r2, #10
 800b05e:	4658      	mov	r0, fp
 800b060:	f000 faec 	bl	800b63c <__multadd>
 800b064:	9b00      	ldr	r3, [sp, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	4605      	mov	r5, r0
 800b06a:	dc67      	bgt.n	800b13c <_dtoa_r+0x94c>
 800b06c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06e:	2b02      	cmp	r3, #2
 800b070:	dc41      	bgt.n	800b0f6 <_dtoa_r+0x906>
 800b072:	e063      	b.n	800b13c <_dtoa_r+0x94c>
 800b074:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b07a:	e746      	b.n	800af0a <_dtoa_r+0x71a>
 800b07c:	9b07      	ldr	r3, [sp, #28]
 800b07e:	1e5c      	subs	r4, r3, #1
 800b080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b082:	42a3      	cmp	r3, r4
 800b084:	bfbf      	itttt	lt
 800b086:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b088:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b08a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b08c:	1ae3      	sublt	r3, r4, r3
 800b08e:	bfb4      	ite	lt
 800b090:	18d2      	addlt	r2, r2, r3
 800b092:	1b1c      	subge	r4, r3, r4
 800b094:	9b07      	ldr	r3, [sp, #28]
 800b096:	bfbc      	itt	lt
 800b098:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b09a:	2400      	movlt	r4, #0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	bfb5      	itete	lt
 800b0a0:	eba8 0603 	sublt.w	r6, r8, r3
 800b0a4:	9b07      	ldrge	r3, [sp, #28]
 800b0a6:	2300      	movlt	r3, #0
 800b0a8:	4646      	movge	r6, r8
 800b0aa:	e730      	b.n	800af0e <_dtoa_r+0x71e>
 800b0ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b0b0:	4646      	mov	r6, r8
 800b0b2:	e735      	b.n	800af20 <_dtoa_r+0x730>
 800b0b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0b6:	e75c      	b.n	800af72 <_dtoa_r+0x782>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	e788      	b.n	800afce <_dtoa_r+0x7de>
 800b0bc:	3fe00000 	.word	0x3fe00000
 800b0c0:	40240000 	.word	0x40240000
 800b0c4:	40140000 	.word	0x40140000
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	e780      	b.n	800afce <_dtoa_r+0x7de>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0d0:	e782      	b.n	800afd8 <_dtoa_r+0x7e8>
 800b0d2:	d099      	beq.n	800b008 <_dtoa_r+0x818>
 800b0d4:	9a08      	ldr	r2, [sp, #32]
 800b0d6:	331c      	adds	r3, #28
 800b0d8:	441a      	add	r2, r3
 800b0da:	4498      	add	r8, r3
 800b0dc:	441e      	add	r6, r3
 800b0de:	9208      	str	r2, [sp, #32]
 800b0e0:	e792      	b.n	800b008 <_dtoa_r+0x818>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	e7f6      	b.n	800b0d4 <_dtoa_r+0x8e4>
 800b0e6:	9b07      	ldr	r3, [sp, #28]
 800b0e8:	9704      	str	r7, [sp, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	dc20      	bgt.n	800b130 <_dtoa_r+0x940>
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	dd1e      	ble.n	800b134 <_dtoa_r+0x944>
 800b0f6:	9b00      	ldr	r3, [sp, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f47f aec0 	bne.w	800ae7e <_dtoa_r+0x68e>
 800b0fe:	4621      	mov	r1, r4
 800b100:	2205      	movs	r2, #5
 800b102:	4658      	mov	r0, fp
 800b104:	f000 fa9a 	bl	800b63c <__multadd>
 800b108:	4601      	mov	r1, r0
 800b10a:	4604      	mov	r4, r0
 800b10c:	4648      	mov	r0, r9
 800b10e:	f000 fcad 	bl	800ba6c <__mcmp>
 800b112:	2800      	cmp	r0, #0
 800b114:	f77f aeb3 	ble.w	800ae7e <_dtoa_r+0x68e>
 800b118:	4656      	mov	r6, sl
 800b11a:	2331      	movs	r3, #49	@ 0x31
 800b11c:	f806 3b01 	strb.w	r3, [r6], #1
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	3301      	adds	r3, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	e6ae      	b.n	800ae86 <_dtoa_r+0x696>
 800b128:	9c07      	ldr	r4, [sp, #28]
 800b12a:	9704      	str	r7, [sp, #16]
 800b12c:	4625      	mov	r5, r4
 800b12e:	e7f3      	b.n	800b118 <_dtoa_r+0x928>
 800b130:	9b07      	ldr	r3, [sp, #28]
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 8104 	beq.w	800b344 <_dtoa_r+0xb54>
 800b13c:	2e00      	cmp	r6, #0
 800b13e:	dd05      	ble.n	800b14c <_dtoa_r+0x95c>
 800b140:	4629      	mov	r1, r5
 800b142:	4632      	mov	r2, r6
 800b144:	4658      	mov	r0, fp
 800b146:	f000 fc25 	bl	800b994 <__lshift>
 800b14a:	4605      	mov	r5, r0
 800b14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d05a      	beq.n	800b208 <_dtoa_r+0xa18>
 800b152:	6869      	ldr	r1, [r5, #4]
 800b154:	4658      	mov	r0, fp
 800b156:	f000 fa0f 	bl	800b578 <_Balloc>
 800b15a:	4606      	mov	r6, r0
 800b15c:	b928      	cbnz	r0, 800b16a <_dtoa_r+0x97a>
 800b15e:	4b84      	ldr	r3, [pc, #528]	@ (800b370 <_dtoa_r+0xb80>)
 800b160:	4602      	mov	r2, r0
 800b162:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b166:	f7ff bb5a 	b.w	800a81e <_dtoa_r+0x2e>
 800b16a:	692a      	ldr	r2, [r5, #16]
 800b16c:	3202      	adds	r2, #2
 800b16e:	0092      	lsls	r2, r2, #2
 800b170:	f105 010c 	add.w	r1, r5, #12
 800b174:	300c      	adds	r0, #12
 800b176:	f000 ffaf 	bl	800c0d8 <memcpy>
 800b17a:	2201      	movs	r2, #1
 800b17c:	4631      	mov	r1, r6
 800b17e:	4658      	mov	r0, fp
 800b180:	f000 fc08 	bl	800b994 <__lshift>
 800b184:	f10a 0301 	add.w	r3, sl, #1
 800b188:	9307      	str	r3, [sp, #28]
 800b18a:	9b00      	ldr	r3, [sp, #0]
 800b18c:	4453      	add	r3, sl
 800b18e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b190:	9b02      	ldr	r3, [sp, #8]
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	462f      	mov	r7, r5
 800b198:	930a      	str	r3, [sp, #40]	@ 0x28
 800b19a:	4605      	mov	r5, r0
 800b19c:	9b07      	ldr	r3, [sp, #28]
 800b19e:	4621      	mov	r1, r4
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	4648      	mov	r0, r9
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	f7ff fa9a 	bl	800a6de <quorem>
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	9002      	str	r0, [sp, #8]
 800b1ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1b2:	4648      	mov	r0, r9
 800b1b4:	f000 fc5a 	bl	800ba6c <__mcmp>
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	9008      	str	r0, [sp, #32]
 800b1bc:	4621      	mov	r1, r4
 800b1be:	4658      	mov	r0, fp
 800b1c0:	f000 fc70 	bl	800baa4 <__mdiff>
 800b1c4:	68c2      	ldr	r2, [r0, #12]
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	bb02      	cbnz	r2, 800b20c <_dtoa_r+0xa1c>
 800b1ca:	4601      	mov	r1, r0
 800b1cc:	4648      	mov	r0, r9
 800b1ce:	f000 fc4d 	bl	800ba6c <__mcmp>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1da:	f000 fa0d 	bl	800b5f8 <_Bfree>
 800b1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1e2:	9e07      	ldr	r6, [sp, #28]
 800b1e4:	ea43 0102 	orr.w	r1, r3, r2
 800b1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ea:	4319      	orrs	r1, r3
 800b1ec:	d110      	bne.n	800b210 <_dtoa_r+0xa20>
 800b1ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1f2:	d029      	beq.n	800b248 <_dtoa_r+0xa58>
 800b1f4:	9b08      	ldr	r3, [sp, #32]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	dd02      	ble.n	800b200 <_dtoa_r+0xa10>
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b200:	9b00      	ldr	r3, [sp, #0]
 800b202:	f883 8000 	strb.w	r8, [r3]
 800b206:	e63f      	b.n	800ae88 <_dtoa_r+0x698>
 800b208:	4628      	mov	r0, r5
 800b20a:	e7bb      	b.n	800b184 <_dtoa_r+0x994>
 800b20c:	2201      	movs	r2, #1
 800b20e:	e7e1      	b.n	800b1d4 <_dtoa_r+0x9e4>
 800b210:	9b08      	ldr	r3, [sp, #32]
 800b212:	2b00      	cmp	r3, #0
 800b214:	db04      	blt.n	800b220 <_dtoa_r+0xa30>
 800b216:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b218:	430b      	orrs	r3, r1
 800b21a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b21c:	430b      	orrs	r3, r1
 800b21e:	d120      	bne.n	800b262 <_dtoa_r+0xa72>
 800b220:	2a00      	cmp	r2, #0
 800b222:	dded      	ble.n	800b200 <_dtoa_r+0xa10>
 800b224:	4649      	mov	r1, r9
 800b226:	2201      	movs	r2, #1
 800b228:	4658      	mov	r0, fp
 800b22a:	f000 fbb3 	bl	800b994 <__lshift>
 800b22e:	4621      	mov	r1, r4
 800b230:	4681      	mov	r9, r0
 800b232:	f000 fc1b 	bl	800ba6c <__mcmp>
 800b236:	2800      	cmp	r0, #0
 800b238:	dc03      	bgt.n	800b242 <_dtoa_r+0xa52>
 800b23a:	d1e1      	bne.n	800b200 <_dtoa_r+0xa10>
 800b23c:	f018 0f01 	tst.w	r8, #1
 800b240:	d0de      	beq.n	800b200 <_dtoa_r+0xa10>
 800b242:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b246:	d1d8      	bne.n	800b1fa <_dtoa_r+0xa0a>
 800b248:	9a00      	ldr	r2, [sp, #0]
 800b24a:	2339      	movs	r3, #57	@ 0x39
 800b24c:	7013      	strb	r3, [r2, #0]
 800b24e:	4633      	mov	r3, r6
 800b250:	461e      	mov	r6, r3
 800b252:	3b01      	subs	r3, #1
 800b254:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b258:	2a39      	cmp	r2, #57	@ 0x39
 800b25a:	d052      	beq.n	800b302 <_dtoa_r+0xb12>
 800b25c:	3201      	adds	r2, #1
 800b25e:	701a      	strb	r2, [r3, #0]
 800b260:	e612      	b.n	800ae88 <_dtoa_r+0x698>
 800b262:	2a00      	cmp	r2, #0
 800b264:	dd07      	ble.n	800b276 <_dtoa_r+0xa86>
 800b266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b26a:	d0ed      	beq.n	800b248 <_dtoa_r+0xa58>
 800b26c:	9a00      	ldr	r2, [sp, #0]
 800b26e:	f108 0301 	add.w	r3, r8, #1
 800b272:	7013      	strb	r3, [r2, #0]
 800b274:	e608      	b.n	800ae88 <_dtoa_r+0x698>
 800b276:	9b07      	ldr	r3, [sp, #28]
 800b278:	9a07      	ldr	r2, [sp, #28]
 800b27a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b27e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b280:	4293      	cmp	r3, r2
 800b282:	d028      	beq.n	800b2d6 <_dtoa_r+0xae6>
 800b284:	4649      	mov	r1, r9
 800b286:	2300      	movs	r3, #0
 800b288:	220a      	movs	r2, #10
 800b28a:	4658      	mov	r0, fp
 800b28c:	f000 f9d6 	bl	800b63c <__multadd>
 800b290:	42af      	cmp	r7, r5
 800b292:	4681      	mov	r9, r0
 800b294:	f04f 0300 	mov.w	r3, #0
 800b298:	f04f 020a 	mov.w	r2, #10
 800b29c:	4639      	mov	r1, r7
 800b29e:	4658      	mov	r0, fp
 800b2a0:	d107      	bne.n	800b2b2 <_dtoa_r+0xac2>
 800b2a2:	f000 f9cb 	bl	800b63c <__multadd>
 800b2a6:	4607      	mov	r7, r0
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	9b07      	ldr	r3, [sp, #28]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	9307      	str	r3, [sp, #28]
 800b2b0:	e774      	b.n	800b19c <_dtoa_r+0x9ac>
 800b2b2:	f000 f9c3 	bl	800b63c <__multadd>
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	220a      	movs	r2, #10
 800b2be:	4658      	mov	r0, fp
 800b2c0:	f000 f9bc 	bl	800b63c <__multadd>
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	e7f0      	b.n	800b2aa <_dtoa_r+0xaba>
 800b2c8:	9b00      	ldr	r3, [sp, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	bfcc      	ite	gt
 800b2ce:	461e      	movgt	r6, r3
 800b2d0:	2601      	movle	r6, #1
 800b2d2:	4456      	add	r6, sl
 800b2d4:	2700      	movs	r7, #0
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	2201      	movs	r2, #1
 800b2da:	4658      	mov	r0, fp
 800b2dc:	f000 fb5a 	bl	800b994 <__lshift>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4681      	mov	r9, r0
 800b2e4:	f000 fbc2 	bl	800ba6c <__mcmp>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	dcb0      	bgt.n	800b24e <_dtoa_r+0xa5e>
 800b2ec:	d102      	bne.n	800b2f4 <_dtoa_r+0xb04>
 800b2ee:	f018 0f01 	tst.w	r8, #1
 800b2f2:	d1ac      	bne.n	800b24e <_dtoa_r+0xa5e>
 800b2f4:	4633      	mov	r3, r6
 800b2f6:	461e      	mov	r6, r3
 800b2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2fc:	2a30      	cmp	r2, #48	@ 0x30
 800b2fe:	d0fa      	beq.n	800b2f6 <_dtoa_r+0xb06>
 800b300:	e5c2      	b.n	800ae88 <_dtoa_r+0x698>
 800b302:	459a      	cmp	sl, r3
 800b304:	d1a4      	bne.n	800b250 <_dtoa_r+0xa60>
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	3301      	adds	r3, #1
 800b30a:	9304      	str	r3, [sp, #16]
 800b30c:	2331      	movs	r3, #49	@ 0x31
 800b30e:	f88a 3000 	strb.w	r3, [sl]
 800b312:	e5b9      	b.n	800ae88 <_dtoa_r+0x698>
 800b314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b316:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b374 <_dtoa_r+0xb84>
 800b31a:	b11b      	cbz	r3, 800b324 <_dtoa_r+0xb34>
 800b31c:	f10a 0308 	add.w	r3, sl, #8
 800b320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b322:	6013      	str	r3, [r2, #0]
 800b324:	4650      	mov	r0, sl
 800b326:	b019      	add	sp, #100	@ 0x64
 800b328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b32e:	2b01      	cmp	r3, #1
 800b330:	f77f ae37 	ble.w	800afa2 <_dtoa_r+0x7b2>
 800b334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b336:	930a      	str	r3, [sp, #40]	@ 0x28
 800b338:	2001      	movs	r0, #1
 800b33a:	e655      	b.n	800afe8 <_dtoa_r+0x7f8>
 800b33c:	9b00      	ldr	r3, [sp, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f77f aed6 	ble.w	800b0f0 <_dtoa_r+0x900>
 800b344:	4656      	mov	r6, sl
 800b346:	4621      	mov	r1, r4
 800b348:	4648      	mov	r0, r9
 800b34a:	f7ff f9c8 	bl	800a6de <quorem>
 800b34e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b352:	f806 8b01 	strb.w	r8, [r6], #1
 800b356:	9b00      	ldr	r3, [sp, #0]
 800b358:	eba6 020a 	sub.w	r2, r6, sl
 800b35c:	4293      	cmp	r3, r2
 800b35e:	ddb3      	ble.n	800b2c8 <_dtoa_r+0xad8>
 800b360:	4649      	mov	r1, r9
 800b362:	2300      	movs	r3, #0
 800b364:	220a      	movs	r2, #10
 800b366:	4658      	mov	r0, fp
 800b368:	f000 f968 	bl	800b63c <__multadd>
 800b36c:	4681      	mov	r9, r0
 800b36e:	e7ea      	b.n	800b346 <_dtoa_r+0xb56>
 800b370:	080206f8 	.word	0x080206f8
 800b374:	0802067c 	.word	0x0802067c

0800b378 <_free_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4605      	mov	r5, r0
 800b37c:	2900      	cmp	r1, #0
 800b37e:	d041      	beq.n	800b404 <_free_r+0x8c>
 800b380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b384:	1f0c      	subs	r4, r1, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	bfb8      	it	lt
 800b38a:	18e4      	addlt	r4, r4, r3
 800b38c:	f000 f8e8 	bl	800b560 <__malloc_lock>
 800b390:	4a1d      	ldr	r2, [pc, #116]	@ (800b408 <_free_r+0x90>)
 800b392:	6813      	ldr	r3, [r2, #0]
 800b394:	b933      	cbnz	r3, 800b3a4 <_free_r+0x2c>
 800b396:	6063      	str	r3, [r4, #4]
 800b398:	6014      	str	r4, [r2, #0]
 800b39a:	4628      	mov	r0, r5
 800b39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3a0:	f000 b8e4 	b.w	800b56c <__malloc_unlock>
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d908      	bls.n	800b3ba <_free_r+0x42>
 800b3a8:	6820      	ldr	r0, [r4, #0]
 800b3aa:	1821      	adds	r1, r4, r0
 800b3ac:	428b      	cmp	r3, r1
 800b3ae:	bf01      	itttt	eq
 800b3b0:	6819      	ldreq	r1, [r3, #0]
 800b3b2:	685b      	ldreq	r3, [r3, #4]
 800b3b4:	1809      	addeq	r1, r1, r0
 800b3b6:	6021      	streq	r1, [r4, #0]
 800b3b8:	e7ed      	b.n	800b396 <_free_r+0x1e>
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	b10b      	cbz	r3, 800b3c4 <_free_r+0x4c>
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	d9fa      	bls.n	800b3ba <_free_r+0x42>
 800b3c4:	6811      	ldr	r1, [r2, #0]
 800b3c6:	1850      	adds	r0, r2, r1
 800b3c8:	42a0      	cmp	r0, r4
 800b3ca:	d10b      	bne.n	800b3e4 <_free_r+0x6c>
 800b3cc:	6820      	ldr	r0, [r4, #0]
 800b3ce:	4401      	add	r1, r0
 800b3d0:	1850      	adds	r0, r2, r1
 800b3d2:	4283      	cmp	r3, r0
 800b3d4:	6011      	str	r1, [r2, #0]
 800b3d6:	d1e0      	bne.n	800b39a <_free_r+0x22>
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	6053      	str	r3, [r2, #4]
 800b3de:	4408      	add	r0, r1
 800b3e0:	6010      	str	r0, [r2, #0]
 800b3e2:	e7da      	b.n	800b39a <_free_r+0x22>
 800b3e4:	d902      	bls.n	800b3ec <_free_r+0x74>
 800b3e6:	230c      	movs	r3, #12
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	e7d6      	b.n	800b39a <_free_r+0x22>
 800b3ec:	6820      	ldr	r0, [r4, #0]
 800b3ee:	1821      	adds	r1, r4, r0
 800b3f0:	428b      	cmp	r3, r1
 800b3f2:	bf04      	itt	eq
 800b3f4:	6819      	ldreq	r1, [r3, #0]
 800b3f6:	685b      	ldreq	r3, [r3, #4]
 800b3f8:	6063      	str	r3, [r4, #4]
 800b3fa:	bf04      	itt	eq
 800b3fc:	1809      	addeq	r1, r1, r0
 800b3fe:	6021      	streq	r1, [r4, #0]
 800b400:	6054      	str	r4, [r2, #4]
 800b402:	e7ca      	b.n	800b39a <_free_r+0x22>
 800b404:	bd38      	pop	{r3, r4, r5, pc}
 800b406:	bf00      	nop
 800b408:	20018e74 	.word	0x20018e74

0800b40c <malloc>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	@ (800b418 <malloc+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	f000 b825 	b.w	800b460 <_malloc_r>
 800b416:	bf00      	nop
 800b418:	20000018 	.word	0x20000018

0800b41c <sbrk_aligned>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	4e0f      	ldr	r6, [pc, #60]	@ (800b45c <sbrk_aligned+0x40>)
 800b420:	460c      	mov	r4, r1
 800b422:	6831      	ldr	r1, [r6, #0]
 800b424:	4605      	mov	r5, r0
 800b426:	b911      	cbnz	r1, 800b42e <sbrk_aligned+0x12>
 800b428:	f000 fe46 	bl	800c0b8 <_sbrk_r>
 800b42c:	6030      	str	r0, [r6, #0]
 800b42e:	4621      	mov	r1, r4
 800b430:	4628      	mov	r0, r5
 800b432:	f000 fe41 	bl	800c0b8 <_sbrk_r>
 800b436:	1c43      	adds	r3, r0, #1
 800b438:	d103      	bne.n	800b442 <sbrk_aligned+0x26>
 800b43a:	f04f 34ff 	mov.w	r4, #4294967295
 800b43e:	4620      	mov	r0, r4
 800b440:	bd70      	pop	{r4, r5, r6, pc}
 800b442:	1cc4      	adds	r4, r0, #3
 800b444:	f024 0403 	bic.w	r4, r4, #3
 800b448:	42a0      	cmp	r0, r4
 800b44a:	d0f8      	beq.n	800b43e <sbrk_aligned+0x22>
 800b44c:	1a21      	subs	r1, r4, r0
 800b44e:	4628      	mov	r0, r5
 800b450:	f000 fe32 	bl	800c0b8 <_sbrk_r>
 800b454:	3001      	adds	r0, #1
 800b456:	d1f2      	bne.n	800b43e <sbrk_aligned+0x22>
 800b458:	e7ef      	b.n	800b43a <sbrk_aligned+0x1e>
 800b45a:	bf00      	nop
 800b45c:	20018e70 	.word	0x20018e70

0800b460 <_malloc_r>:
 800b460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b464:	1ccd      	adds	r5, r1, #3
 800b466:	f025 0503 	bic.w	r5, r5, #3
 800b46a:	3508      	adds	r5, #8
 800b46c:	2d0c      	cmp	r5, #12
 800b46e:	bf38      	it	cc
 800b470:	250c      	movcc	r5, #12
 800b472:	2d00      	cmp	r5, #0
 800b474:	4606      	mov	r6, r0
 800b476:	db01      	blt.n	800b47c <_malloc_r+0x1c>
 800b478:	42a9      	cmp	r1, r5
 800b47a:	d904      	bls.n	800b486 <_malloc_r+0x26>
 800b47c:	230c      	movs	r3, #12
 800b47e:	6033      	str	r3, [r6, #0]
 800b480:	2000      	movs	r0, #0
 800b482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b55c <_malloc_r+0xfc>
 800b48a:	f000 f869 	bl	800b560 <__malloc_lock>
 800b48e:	f8d8 3000 	ldr.w	r3, [r8]
 800b492:	461c      	mov	r4, r3
 800b494:	bb44      	cbnz	r4, 800b4e8 <_malloc_r+0x88>
 800b496:	4629      	mov	r1, r5
 800b498:	4630      	mov	r0, r6
 800b49a:	f7ff ffbf 	bl	800b41c <sbrk_aligned>
 800b49e:	1c43      	adds	r3, r0, #1
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	d158      	bne.n	800b556 <_malloc_r+0xf6>
 800b4a4:	f8d8 4000 	ldr.w	r4, [r8]
 800b4a8:	4627      	mov	r7, r4
 800b4aa:	2f00      	cmp	r7, #0
 800b4ac:	d143      	bne.n	800b536 <_malloc_r+0xd6>
 800b4ae:	2c00      	cmp	r4, #0
 800b4b0:	d04b      	beq.n	800b54a <_malloc_r+0xea>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	eb04 0903 	add.w	r9, r4, r3
 800b4bc:	f000 fdfc 	bl	800c0b8 <_sbrk_r>
 800b4c0:	4581      	cmp	r9, r0
 800b4c2:	d142      	bne.n	800b54a <_malloc_r+0xea>
 800b4c4:	6821      	ldr	r1, [r4, #0]
 800b4c6:	1a6d      	subs	r5, r5, r1
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f7ff ffa6 	bl	800b41c <sbrk_aligned>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d03a      	beq.n	800b54a <_malloc_r+0xea>
 800b4d4:	6823      	ldr	r3, [r4, #0]
 800b4d6:	442b      	add	r3, r5
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	f8d8 3000 	ldr.w	r3, [r8]
 800b4de:	685a      	ldr	r2, [r3, #4]
 800b4e0:	bb62      	cbnz	r2, 800b53c <_malloc_r+0xdc>
 800b4e2:	f8c8 7000 	str.w	r7, [r8]
 800b4e6:	e00f      	b.n	800b508 <_malloc_r+0xa8>
 800b4e8:	6822      	ldr	r2, [r4, #0]
 800b4ea:	1b52      	subs	r2, r2, r5
 800b4ec:	d420      	bmi.n	800b530 <_malloc_r+0xd0>
 800b4ee:	2a0b      	cmp	r2, #11
 800b4f0:	d917      	bls.n	800b522 <_malloc_r+0xc2>
 800b4f2:	1961      	adds	r1, r4, r5
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	6025      	str	r5, [r4, #0]
 800b4f8:	bf18      	it	ne
 800b4fa:	6059      	strne	r1, [r3, #4]
 800b4fc:	6863      	ldr	r3, [r4, #4]
 800b4fe:	bf08      	it	eq
 800b500:	f8c8 1000 	streq.w	r1, [r8]
 800b504:	5162      	str	r2, [r4, r5]
 800b506:	604b      	str	r3, [r1, #4]
 800b508:	4630      	mov	r0, r6
 800b50a:	f000 f82f 	bl	800b56c <__malloc_unlock>
 800b50e:	f104 000b 	add.w	r0, r4, #11
 800b512:	1d23      	adds	r3, r4, #4
 800b514:	f020 0007 	bic.w	r0, r0, #7
 800b518:	1ac2      	subs	r2, r0, r3
 800b51a:	bf1c      	itt	ne
 800b51c:	1a1b      	subne	r3, r3, r0
 800b51e:	50a3      	strne	r3, [r4, r2]
 800b520:	e7af      	b.n	800b482 <_malloc_r+0x22>
 800b522:	6862      	ldr	r2, [r4, #4]
 800b524:	42a3      	cmp	r3, r4
 800b526:	bf0c      	ite	eq
 800b528:	f8c8 2000 	streq.w	r2, [r8]
 800b52c:	605a      	strne	r2, [r3, #4]
 800b52e:	e7eb      	b.n	800b508 <_malloc_r+0xa8>
 800b530:	4623      	mov	r3, r4
 800b532:	6864      	ldr	r4, [r4, #4]
 800b534:	e7ae      	b.n	800b494 <_malloc_r+0x34>
 800b536:	463c      	mov	r4, r7
 800b538:	687f      	ldr	r7, [r7, #4]
 800b53a:	e7b6      	b.n	800b4aa <_malloc_r+0x4a>
 800b53c:	461a      	mov	r2, r3
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	42a3      	cmp	r3, r4
 800b542:	d1fb      	bne.n	800b53c <_malloc_r+0xdc>
 800b544:	2300      	movs	r3, #0
 800b546:	6053      	str	r3, [r2, #4]
 800b548:	e7de      	b.n	800b508 <_malloc_r+0xa8>
 800b54a:	230c      	movs	r3, #12
 800b54c:	6033      	str	r3, [r6, #0]
 800b54e:	4630      	mov	r0, r6
 800b550:	f000 f80c 	bl	800b56c <__malloc_unlock>
 800b554:	e794      	b.n	800b480 <_malloc_r+0x20>
 800b556:	6005      	str	r5, [r0, #0]
 800b558:	e7d6      	b.n	800b508 <_malloc_r+0xa8>
 800b55a:	bf00      	nop
 800b55c:	20018e74 	.word	0x20018e74

0800b560 <__malloc_lock>:
 800b560:	4801      	ldr	r0, [pc, #4]	@ (800b568 <__malloc_lock+0x8>)
 800b562:	f7ff b8ba 	b.w	800a6da <__retarget_lock_acquire_recursive>
 800b566:	bf00      	nop
 800b568:	20018e6c 	.word	0x20018e6c

0800b56c <__malloc_unlock>:
 800b56c:	4801      	ldr	r0, [pc, #4]	@ (800b574 <__malloc_unlock+0x8>)
 800b56e:	f7ff b8b5 	b.w	800a6dc <__retarget_lock_release_recursive>
 800b572:	bf00      	nop
 800b574:	20018e6c 	.word	0x20018e6c

0800b578 <_Balloc>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	69c6      	ldr	r6, [r0, #28]
 800b57c:	4604      	mov	r4, r0
 800b57e:	460d      	mov	r5, r1
 800b580:	b976      	cbnz	r6, 800b5a0 <_Balloc+0x28>
 800b582:	2010      	movs	r0, #16
 800b584:	f7ff ff42 	bl	800b40c <malloc>
 800b588:	4602      	mov	r2, r0
 800b58a:	61e0      	str	r0, [r4, #28]
 800b58c:	b920      	cbnz	r0, 800b598 <_Balloc+0x20>
 800b58e:	4b18      	ldr	r3, [pc, #96]	@ (800b5f0 <_Balloc+0x78>)
 800b590:	4818      	ldr	r0, [pc, #96]	@ (800b5f4 <_Balloc+0x7c>)
 800b592:	216b      	movs	r1, #107	@ 0x6b
 800b594:	f000 fdae 	bl	800c0f4 <__assert_func>
 800b598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b59c:	6006      	str	r6, [r0, #0]
 800b59e:	60c6      	str	r6, [r0, #12]
 800b5a0:	69e6      	ldr	r6, [r4, #28]
 800b5a2:	68f3      	ldr	r3, [r6, #12]
 800b5a4:	b183      	cbz	r3, 800b5c8 <_Balloc+0x50>
 800b5a6:	69e3      	ldr	r3, [r4, #28]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ae:	b9b8      	cbnz	r0, 800b5e0 <_Balloc+0x68>
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	fa01 f605 	lsl.w	r6, r1, r5
 800b5b6:	1d72      	adds	r2, r6, #5
 800b5b8:	0092      	lsls	r2, r2, #2
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 fdb8 	bl	800c130 <_calloc_r>
 800b5c0:	b160      	cbz	r0, 800b5dc <_Balloc+0x64>
 800b5c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5c6:	e00e      	b.n	800b5e6 <_Balloc+0x6e>
 800b5c8:	2221      	movs	r2, #33	@ 0x21
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f000 fdaf 	bl	800c130 <_calloc_r>
 800b5d2:	69e3      	ldr	r3, [r4, #28]
 800b5d4:	60f0      	str	r0, [r6, #12]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e4      	bne.n	800b5a6 <_Balloc+0x2e>
 800b5dc:	2000      	movs	r0, #0
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	6802      	ldr	r2, [r0, #0]
 800b5e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5ec:	e7f7      	b.n	800b5de <_Balloc+0x66>
 800b5ee:	bf00      	nop
 800b5f0:	08020689 	.word	0x08020689
 800b5f4:	08020709 	.word	0x08020709

0800b5f8 <_Bfree>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	69c6      	ldr	r6, [r0, #28]
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	b976      	cbnz	r6, 800b620 <_Bfree+0x28>
 800b602:	2010      	movs	r0, #16
 800b604:	f7ff ff02 	bl	800b40c <malloc>
 800b608:	4602      	mov	r2, r0
 800b60a:	61e8      	str	r0, [r5, #28]
 800b60c:	b920      	cbnz	r0, 800b618 <_Bfree+0x20>
 800b60e:	4b09      	ldr	r3, [pc, #36]	@ (800b634 <_Bfree+0x3c>)
 800b610:	4809      	ldr	r0, [pc, #36]	@ (800b638 <_Bfree+0x40>)
 800b612:	218f      	movs	r1, #143	@ 0x8f
 800b614:	f000 fd6e 	bl	800c0f4 <__assert_func>
 800b618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b61c:	6006      	str	r6, [r0, #0]
 800b61e:	60c6      	str	r6, [r0, #12]
 800b620:	b13c      	cbz	r4, 800b632 <_Bfree+0x3a>
 800b622:	69eb      	ldr	r3, [r5, #28]
 800b624:	6862      	ldr	r2, [r4, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b62c:	6021      	str	r1, [r4, #0]
 800b62e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	08020689 	.word	0x08020689
 800b638:	08020709 	.word	0x08020709

0800b63c <__multadd>:
 800b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b640:	690d      	ldr	r5, [r1, #16]
 800b642:	4607      	mov	r7, r0
 800b644:	460c      	mov	r4, r1
 800b646:	461e      	mov	r6, r3
 800b648:	f101 0c14 	add.w	ip, r1, #20
 800b64c:	2000      	movs	r0, #0
 800b64e:	f8dc 3000 	ldr.w	r3, [ip]
 800b652:	b299      	uxth	r1, r3
 800b654:	fb02 6101 	mla	r1, r2, r1, r6
 800b658:	0c1e      	lsrs	r6, r3, #16
 800b65a:	0c0b      	lsrs	r3, r1, #16
 800b65c:	fb02 3306 	mla	r3, r2, r6, r3
 800b660:	b289      	uxth	r1, r1
 800b662:	3001      	adds	r0, #1
 800b664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b668:	4285      	cmp	r5, r0
 800b66a:	f84c 1b04 	str.w	r1, [ip], #4
 800b66e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b672:	dcec      	bgt.n	800b64e <__multadd+0x12>
 800b674:	b30e      	cbz	r6, 800b6ba <__multadd+0x7e>
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	42ab      	cmp	r3, r5
 800b67a:	dc19      	bgt.n	800b6b0 <__multadd+0x74>
 800b67c:	6861      	ldr	r1, [r4, #4]
 800b67e:	4638      	mov	r0, r7
 800b680:	3101      	adds	r1, #1
 800b682:	f7ff ff79 	bl	800b578 <_Balloc>
 800b686:	4680      	mov	r8, r0
 800b688:	b928      	cbnz	r0, 800b696 <__multadd+0x5a>
 800b68a:	4602      	mov	r2, r0
 800b68c:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c0 <__multadd+0x84>)
 800b68e:	480d      	ldr	r0, [pc, #52]	@ (800b6c4 <__multadd+0x88>)
 800b690:	21ba      	movs	r1, #186	@ 0xba
 800b692:	f000 fd2f 	bl	800c0f4 <__assert_func>
 800b696:	6922      	ldr	r2, [r4, #16]
 800b698:	3202      	adds	r2, #2
 800b69a:	f104 010c 	add.w	r1, r4, #12
 800b69e:	0092      	lsls	r2, r2, #2
 800b6a0:	300c      	adds	r0, #12
 800b6a2:	f000 fd19 	bl	800c0d8 <memcpy>
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	f7ff ffa5 	bl	800b5f8 <_Bfree>
 800b6ae:	4644      	mov	r4, r8
 800b6b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6b4:	3501      	adds	r5, #1
 800b6b6:	615e      	str	r6, [r3, #20]
 800b6b8:	6125      	str	r5, [r4, #16]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c0:	080206f8 	.word	0x080206f8
 800b6c4:	08020709 	.word	0x08020709

0800b6c8 <__hi0bits>:
 800b6c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	bf36      	itet	cc
 800b6d0:	0403      	lslcc	r3, r0, #16
 800b6d2:	2000      	movcs	r0, #0
 800b6d4:	2010      	movcc	r0, #16
 800b6d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6da:	bf3c      	itt	cc
 800b6dc:	021b      	lslcc	r3, r3, #8
 800b6de:	3008      	addcc	r0, #8
 800b6e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6e4:	bf3c      	itt	cc
 800b6e6:	011b      	lslcc	r3, r3, #4
 800b6e8:	3004      	addcc	r0, #4
 800b6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6ee:	bf3c      	itt	cc
 800b6f0:	009b      	lslcc	r3, r3, #2
 800b6f2:	3002      	addcc	r0, #2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	db05      	blt.n	800b704 <__hi0bits+0x3c>
 800b6f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b6fc:	f100 0001 	add.w	r0, r0, #1
 800b700:	bf08      	it	eq
 800b702:	2020      	moveq	r0, #32
 800b704:	4770      	bx	lr

0800b706 <__lo0bits>:
 800b706:	6803      	ldr	r3, [r0, #0]
 800b708:	4602      	mov	r2, r0
 800b70a:	f013 0007 	ands.w	r0, r3, #7
 800b70e:	d00b      	beq.n	800b728 <__lo0bits+0x22>
 800b710:	07d9      	lsls	r1, r3, #31
 800b712:	d421      	bmi.n	800b758 <__lo0bits+0x52>
 800b714:	0798      	lsls	r0, r3, #30
 800b716:	bf49      	itett	mi
 800b718:	085b      	lsrmi	r3, r3, #1
 800b71a:	089b      	lsrpl	r3, r3, #2
 800b71c:	2001      	movmi	r0, #1
 800b71e:	6013      	strmi	r3, [r2, #0]
 800b720:	bf5c      	itt	pl
 800b722:	6013      	strpl	r3, [r2, #0]
 800b724:	2002      	movpl	r0, #2
 800b726:	4770      	bx	lr
 800b728:	b299      	uxth	r1, r3
 800b72a:	b909      	cbnz	r1, 800b730 <__lo0bits+0x2a>
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	2010      	movs	r0, #16
 800b730:	b2d9      	uxtb	r1, r3
 800b732:	b909      	cbnz	r1, 800b738 <__lo0bits+0x32>
 800b734:	3008      	adds	r0, #8
 800b736:	0a1b      	lsrs	r3, r3, #8
 800b738:	0719      	lsls	r1, r3, #28
 800b73a:	bf04      	itt	eq
 800b73c:	091b      	lsreq	r3, r3, #4
 800b73e:	3004      	addeq	r0, #4
 800b740:	0799      	lsls	r1, r3, #30
 800b742:	bf04      	itt	eq
 800b744:	089b      	lsreq	r3, r3, #2
 800b746:	3002      	addeq	r0, #2
 800b748:	07d9      	lsls	r1, r3, #31
 800b74a:	d403      	bmi.n	800b754 <__lo0bits+0x4e>
 800b74c:	085b      	lsrs	r3, r3, #1
 800b74e:	f100 0001 	add.w	r0, r0, #1
 800b752:	d003      	beq.n	800b75c <__lo0bits+0x56>
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	4770      	bx	lr
 800b758:	2000      	movs	r0, #0
 800b75a:	4770      	bx	lr
 800b75c:	2020      	movs	r0, #32
 800b75e:	4770      	bx	lr

0800b760 <__i2b>:
 800b760:	b510      	push	{r4, lr}
 800b762:	460c      	mov	r4, r1
 800b764:	2101      	movs	r1, #1
 800b766:	f7ff ff07 	bl	800b578 <_Balloc>
 800b76a:	4602      	mov	r2, r0
 800b76c:	b928      	cbnz	r0, 800b77a <__i2b+0x1a>
 800b76e:	4b05      	ldr	r3, [pc, #20]	@ (800b784 <__i2b+0x24>)
 800b770:	4805      	ldr	r0, [pc, #20]	@ (800b788 <__i2b+0x28>)
 800b772:	f240 1145 	movw	r1, #325	@ 0x145
 800b776:	f000 fcbd 	bl	800c0f4 <__assert_func>
 800b77a:	2301      	movs	r3, #1
 800b77c:	6144      	str	r4, [r0, #20]
 800b77e:	6103      	str	r3, [r0, #16]
 800b780:	bd10      	pop	{r4, pc}
 800b782:	bf00      	nop
 800b784:	080206f8 	.word	0x080206f8
 800b788:	08020709 	.word	0x08020709

0800b78c <__multiply>:
 800b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	4614      	mov	r4, r2
 800b792:	690a      	ldr	r2, [r1, #16]
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	429a      	cmp	r2, r3
 800b798:	bfa8      	it	ge
 800b79a:	4623      	movge	r3, r4
 800b79c:	460f      	mov	r7, r1
 800b79e:	bfa4      	itt	ge
 800b7a0:	460c      	movge	r4, r1
 800b7a2:	461f      	movge	r7, r3
 800b7a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b7a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b7ac:	68a3      	ldr	r3, [r4, #8]
 800b7ae:	6861      	ldr	r1, [r4, #4]
 800b7b0:	eb0a 0609 	add.w	r6, sl, r9
 800b7b4:	42b3      	cmp	r3, r6
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	bfb8      	it	lt
 800b7ba:	3101      	addlt	r1, #1
 800b7bc:	f7ff fedc 	bl	800b578 <_Balloc>
 800b7c0:	b930      	cbnz	r0, 800b7d0 <__multiply+0x44>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	4b44      	ldr	r3, [pc, #272]	@ (800b8d8 <__multiply+0x14c>)
 800b7c6:	4845      	ldr	r0, [pc, #276]	@ (800b8dc <__multiply+0x150>)
 800b7c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b7cc:	f000 fc92 	bl	800c0f4 <__assert_func>
 800b7d0:	f100 0514 	add.w	r5, r0, #20
 800b7d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7d8:	462b      	mov	r3, r5
 800b7da:	2200      	movs	r2, #0
 800b7dc:	4543      	cmp	r3, r8
 800b7de:	d321      	bcc.n	800b824 <__multiply+0x98>
 800b7e0:	f107 0114 	add.w	r1, r7, #20
 800b7e4:	f104 0214 	add.w	r2, r4, #20
 800b7e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b7ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	1b13      	subs	r3, r2, r4
 800b7f4:	3b15      	subs	r3, #21
 800b7f6:	f023 0303 	bic.w	r3, r3, #3
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	f104 0715 	add.w	r7, r4, #21
 800b800:	42ba      	cmp	r2, r7
 800b802:	bf38      	it	cc
 800b804:	2304      	movcc	r3, #4
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	9b02      	ldr	r3, [sp, #8]
 800b80a:	9103      	str	r1, [sp, #12]
 800b80c:	428b      	cmp	r3, r1
 800b80e:	d80c      	bhi.n	800b82a <__multiply+0x9e>
 800b810:	2e00      	cmp	r6, #0
 800b812:	dd03      	ble.n	800b81c <__multiply+0x90>
 800b814:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d05b      	beq.n	800b8d4 <__multiply+0x148>
 800b81c:	6106      	str	r6, [r0, #16]
 800b81e:	b005      	add	sp, #20
 800b820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b824:	f843 2b04 	str.w	r2, [r3], #4
 800b828:	e7d8      	b.n	800b7dc <__multiply+0x50>
 800b82a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b82e:	f1ba 0f00 	cmp.w	sl, #0
 800b832:	d024      	beq.n	800b87e <__multiply+0xf2>
 800b834:	f104 0e14 	add.w	lr, r4, #20
 800b838:	46a9      	mov	r9, r5
 800b83a:	f04f 0c00 	mov.w	ip, #0
 800b83e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b842:	f8d9 3000 	ldr.w	r3, [r9]
 800b846:	fa1f fb87 	uxth.w	fp, r7
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b850:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b854:	f8d9 7000 	ldr.w	r7, [r9]
 800b858:	4463      	add	r3, ip
 800b85a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b85e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b862:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b866:	b29b      	uxth	r3, r3
 800b868:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b86c:	4572      	cmp	r2, lr
 800b86e:	f849 3b04 	str.w	r3, [r9], #4
 800b872:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b876:	d8e2      	bhi.n	800b83e <__multiply+0xb2>
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	f845 c003 	str.w	ip, [r5, r3]
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b884:	3104      	adds	r1, #4
 800b886:	f1b9 0f00 	cmp.w	r9, #0
 800b88a:	d021      	beq.n	800b8d0 <__multiply+0x144>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	f104 0c14 	add.w	ip, r4, #20
 800b892:	46ae      	mov	lr, r5
 800b894:	f04f 0a00 	mov.w	sl, #0
 800b898:	f8bc b000 	ldrh.w	fp, [ip]
 800b89c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b8a0:	fb09 770b 	mla	r7, r9, fp, r7
 800b8a4:	4457      	add	r7, sl
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b8ac:	f84e 3b04 	str.w	r3, [lr], #4
 800b8b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b8b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8b8:	f8be 3000 	ldrh.w	r3, [lr]
 800b8bc:	fb09 330a 	mla	r3, r9, sl, r3
 800b8c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b8c4:	4562      	cmp	r2, ip
 800b8c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8ca:	d8e5      	bhi.n	800b898 <__multiply+0x10c>
 800b8cc:	9f01      	ldr	r7, [sp, #4]
 800b8ce:	51eb      	str	r3, [r5, r7]
 800b8d0:	3504      	adds	r5, #4
 800b8d2:	e799      	b.n	800b808 <__multiply+0x7c>
 800b8d4:	3e01      	subs	r6, #1
 800b8d6:	e79b      	b.n	800b810 <__multiply+0x84>
 800b8d8:	080206f8 	.word	0x080206f8
 800b8dc:	08020709 	.word	0x08020709

0800b8e0 <__pow5mult>:
 800b8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	4615      	mov	r5, r2
 800b8e6:	f012 0203 	ands.w	r2, r2, #3
 800b8ea:	4607      	mov	r7, r0
 800b8ec:	460e      	mov	r6, r1
 800b8ee:	d007      	beq.n	800b900 <__pow5mult+0x20>
 800b8f0:	4c25      	ldr	r4, [pc, #148]	@ (800b988 <__pow5mult+0xa8>)
 800b8f2:	3a01      	subs	r2, #1
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8fa:	f7ff fe9f 	bl	800b63c <__multadd>
 800b8fe:	4606      	mov	r6, r0
 800b900:	10ad      	asrs	r5, r5, #2
 800b902:	d03d      	beq.n	800b980 <__pow5mult+0xa0>
 800b904:	69fc      	ldr	r4, [r7, #28]
 800b906:	b97c      	cbnz	r4, 800b928 <__pow5mult+0x48>
 800b908:	2010      	movs	r0, #16
 800b90a:	f7ff fd7f 	bl	800b40c <malloc>
 800b90e:	4602      	mov	r2, r0
 800b910:	61f8      	str	r0, [r7, #28]
 800b912:	b928      	cbnz	r0, 800b920 <__pow5mult+0x40>
 800b914:	4b1d      	ldr	r3, [pc, #116]	@ (800b98c <__pow5mult+0xac>)
 800b916:	481e      	ldr	r0, [pc, #120]	@ (800b990 <__pow5mult+0xb0>)
 800b918:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b91c:	f000 fbea 	bl	800c0f4 <__assert_func>
 800b920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b924:	6004      	str	r4, [r0, #0]
 800b926:	60c4      	str	r4, [r0, #12]
 800b928:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b92c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b930:	b94c      	cbnz	r4, 800b946 <__pow5mult+0x66>
 800b932:	f240 2171 	movw	r1, #625	@ 0x271
 800b936:	4638      	mov	r0, r7
 800b938:	f7ff ff12 	bl	800b760 <__i2b>
 800b93c:	2300      	movs	r3, #0
 800b93e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b942:	4604      	mov	r4, r0
 800b944:	6003      	str	r3, [r0, #0]
 800b946:	f04f 0900 	mov.w	r9, #0
 800b94a:	07eb      	lsls	r3, r5, #31
 800b94c:	d50a      	bpl.n	800b964 <__pow5mult+0x84>
 800b94e:	4631      	mov	r1, r6
 800b950:	4622      	mov	r2, r4
 800b952:	4638      	mov	r0, r7
 800b954:	f7ff ff1a 	bl	800b78c <__multiply>
 800b958:	4631      	mov	r1, r6
 800b95a:	4680      	mov	r8, r0
 800b95c:	4638      	mov	r0, r7
 800b95e:	f7ff fe4b 	bl	800b5f8 <_Bfree>
 800b962:	4646      	mov	r6, r8
 800b964:	106d      	asrs	r5, r5, #1
 800b966:	d00b      	beq.n	800b980 <__pow5mult+0xa0>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	b938      	cbnz	r0, 800b97c <__pow5mult+0x9c>
 800b96c:	4622      	mov	r2, r4
 800b96e:	4621      	mov	r1, r4
 800b970:	4638      	mov	r0, r7
 800b972:	f7ff ff0b 	bl	800b78c <__multiply>
 800b976:	6020      	str	r0, [r4, #0]
 800b978:	f8c0 9000 	str.w	r9, [r0]
 800b97c:	4604      	mov	r4, r0
 800b97e:	e7e4      	b.n	800b94a <__pow5mult+0x6a>
 800b980:	4630      	mov	r0, r6
 800b982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b986:	bf00      	nop
 800b988:	08020764 	.word	0x08020764
 800b98c:	08020689 	.word	0x08020689
 800b990:	08020709 	.word	0x08020709

0800b994 <__lshift>:
 800b994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b998:	460c      	mov	r4, r1
 800b99a:	6849      	ldr	r1, [r1, #4]
 800b99c:	6923      	ldr	r3, [r4, #16]
 800b99e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9a2:	68a3      	ldr	r3, [r4, #8]
 800b9a4:	4607      	mov	r7, r0
 800b9a6:	4691      	mov	r9, r2
 800b9a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9ac:	f108 0601 	add.w	r6, r8, #1
 800b9b0:	42b3      	cmp	r3, r6
 800b9b2:	db0b      	blt.n	800b9cc <__lshift+0x38>
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	f7ff fddf 	bl	800b578 <_Balloc>
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	b948      	cbnz	r0, 800b9d2 <__lshift+0x3e>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	4b28      	ldr	r3, [pc, #160]	@ (800ba64 <__lshift+0xd0>)
 800b9c2:	4829      	ldr	r0, [pc, #164]	@ (800ba68 <__lshift+0xd4>)
 800b9c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b9c8:	f000 fb94 	bl	800c0f4 <__assert_func>
 800b9cc:	3101      	adds	r1, #1
 800b9ce:	005b      	lsls	r3, r3, #1
 800b9d0:	e7ee      	b.n	800b9b0 <__lshift+0x1c>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f100 0114 	add.w	r1, r0, #20
 800b9d8:	f100 0210 	add.w	r2, r0, #16
 800b9dc:	4618      	mov	r0, r3
 800b9de:	4553      	cmp	r3, sl
 800b9e0:	db33      	blt.n	800ba4a <__lshift+0xb6>
 800b9e2:	6920      	ldr	r0, [r4, #16]
 800b9e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9e8:	f104 0314 	add.w	r3, r4, #20
 800b9ec:	f019 091f 	ands.w	r9, r9, #31
 800b9f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9f8:	d02b      	beq.n	800ba52 <__lshift+0xbe>
 800b9fa:	f1c9 0e20 	rsb	lr, r9, #32
 800b9fe:	468a      	mov	sl, r1
 800ba00:	2200      	movs	r2, #0
 800ba02:	6818      	ldr	r0, [r3, #0]
 800ba04:	fa00 f009 	lsl.w	r0, r0, r9
 800ba08:	4310      	orrs	r0, r2
 800ba0a:	f84a 0b04 	str.w	r0, [sl], #4
 800ba0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba12:	459c      	cmp	ip, r3
 800ba14:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba18:	d8f3      	bhi.n	800ba02 <__lshift+0x6e>
 800ba1a:	ebac 0304 	sub.w	r3, ip, r4
 800ba1e:	3b15      	subs	r3, #21
 800ba20:	f023 0303 	bic.w	r3, r3, #3
 800ba24:	3304      	adds	r3, #4
 800ba26:	f104 0015 	add.w	r0, r4, #21
 800ba2a:	4584      	cmp	ip, r0
 800ba2c:	bf38      	it	cc
 800ba2e:	2304      	movcc	r3, #4
 800ba30:	50ca      	str	r2, [r1, r3]
 800ba32:	b10a      	cbz	r2, 800ba38 <__lshift+0xa4>
 800ba34:	f108 0602 	add.w	r6, r8, #2
 800ba38:	3e01      	subs	r6, #1
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	612e      	str	r6, [r5, #16]
 800ba3e:	4621      	mov	r1, r4
 800ba40:	f7ff fdda 	bl	800b5f8 <_Bfree>
 800ba44:	4628      	mov	r0, r5
 800ba46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba4e:	3301      	adds	r3, #1
 800ba50:	e7c5      	b.n	800b9de <__lshift+0x4a>
 800ba52:	3904      	subs	r1, #4
 800ba54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba58:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba5c:	459c      	cmp	ip, r3
 800ba5e:	d8f9      	bhi.n	800ba54 <__lshift+0xc0>
 800ba60:	e7ea      	b.n	800ba38 <__lshift+0xa4>
 800ba62:	bf00      	nop
 800ba64:	080206f8 	.word	0x080206f8
 800ba68:	08020709 	.word	0x08020709

0800ba6c <__mcmp>:
 800ba6c:	690a      	ldr	r2, [r1, #16]
 800ba6e:	4603      	mov	r3, r0
 800ba70:	6900      	ldr	r0, [r0, #16]
 800ba72:	1a80      	subs	r0, r0, r2
 800ba74:	b530      	push	{r4, r5, lr}
 800ba76:	d10e      	bne.n	800ba96 <__mcmp+0x2a>
 800ba78:	3314      	adds	r3, #20
 800ba7a:	3114      	adds	r1, #20
 800ba7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba8c:	4295      	cmp	r5, r2
 800ba8e:	d003      	beq.n	800ba98 <__mcmp+0x2c>
 800ba90:	d205      	bcs.n	800ba9e <__mcmp+0x32>
 800ba92:	f04f 30ff 	mov.w	r0, #4294967295
 800ba96:	bd30      	pop	{r4, r5, pc}
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	d3f3      	bcc.n	800ba84 <__mcmp+0x18>
 800ba9c:	e7fb      	b.n	800ba96 <__mcmp+0x2a>
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e7f9      	b.n	800ba96 <__mcmp+0x2a>
	...

0800baa4 <__mdiff>:
 800baa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	4689      	mov	r9, r1
 800baaa:	4606      	mov	r6, r0
 800baac:	4611      	mov	r1, r2
 800baae:	4648      	mov	r0, r9
 800bab0:	4614      	mov	r4, r2
 800bab2:	f7ff ffdb 	bl	800ba6c <__mcmp>
 800bab6:	1e05      	subs	r5, r0, #0
 800bab8:	d112      	bne.n	800bae0 <__mdiff+0x3c>
 800baba:	4629      	mov	r1, r5
 800babc:	4630      	mov	r0, r6
 800babe:	f7ff fd5b 	bl	800b578 <_Balloc>
 800bac2:	4602      	mov	r2, r0
 800bac4:	b928      	cbnz	r0, 800bad2 <__mdiff+0x2e>
 800bac6:	4b3f      	ldr	r3, [pc, #252]	@ (800bbc4 <__mdiff+0x120>)
 800bac8:	f240 2137 	movw	r1, #567	@ 0x237
 800bacc:	483e      	ldr	r0, [pc, #248]	@ (800bbc8 <__mdiff+0x124>)
 800bace:	f000 fb11 	bl	800c0f4 <__assert_func>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bad8:	4610      	mov	r0, r2
 800bada:	b003      	add	sp, #12
 800badc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae0:	bfbc      	itt	lt
 800bae2:	464b      	movlt	r3, r9
 800bae4:	46a1      	movlt	r9, r4
 800bae6:	4630      	mov	r0, r6
 800bae8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800baec:	bfba      	itte	lt
 800baee:	461c      	movlt	r4, r3
 800baf0:	2501      	movlt	r5, #1
 800baf2:	2500      	movge	r5, #0
 800baf4:	f7ff fd40 	bl	800b578 <_Balloc>
 800baf8:	4602      	mov	r2, r0
 800bafa:	b918      	cbnz	r0, 800bb04 <__mdiff+0x60>
 800bafc:	4b31      	ldr	r3, [pc, #196]	@ (800bbc4 <__mdiff+0x120>)
 800bafe:	f240 2145 	movw	r1, #581	@ 0x245
 800bb02:	e7e3      	b.n	800bacc <__mdiff+0x28>
 800bb04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb08:	6926      	ldr	r6, [r4, #16]
 800bb0a:	60c5      	str	r5, [r0, #12]
 800bb0c:	f109 0310 	add.w	r3, r9, #16
 800bb10:	f109 0514 	add.w	r5, r9, #20
 800bb14:	f104 0e14 	add.w	lr, r4, #20
 800bb18:	f100 0b14 	add.w	fp, r0, #20
 800bb1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb24:	9301      	str	r3, [sp, #4]
 800bb26:	46d9      	mov	r9, fp
 800bb28:	f04f 0c00 	mov.w	ip, #0
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bb32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bb36:	9301      	str	r3, [sp, #4]
 800bb38:	fa1f f38a 	uxth.w	r3, sl
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	b283      	uxth	r3, r0
 800bb40:	1acb      	subs	r3, r1, r3
 800bb42:	0c00      	lsrs	r0, r0, #16
 800bb44:	4463      	add	r3, ip
 800bb46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb54:	4576      	cmp	r6, lr
 800bb56:	f849 3b04 	str.w	r3, [r9], #4
 800bb5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb5e:	d8e5      	bhi.n	800bb2c <__mdiff+0x88>
 800bb60:	1b33      	subs	r3, r6, r4
 800bb62:	3b15      	subs	r3, #21
 800bb64:	f023 0303 	bic.w	r3, r3, #3
 800bb68:	3415      	adds	r4, #21
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	42a6      	cmp	r6, r4
 800bb6e:	bf38      	it	cc
 800bb70:	2304      	movcc	r3, #4
 800bb72:	441d      	add	r5, r3
 800bb74:	445b      	add	r3, fp
 800bb76:	461e      	mov	r6, r3
 800bb78:	462c      	mov	r4, r5
 800bb7a:	4544      	cmp	r4, r8
 800bb7c:	d30e      	bcc.n	800bb9c <__mdiff+0xf8>
 800bb7e:	f108 0103 	add.w	r1, r8, #3
 800bb82:	1b49      	subs	r1, r1, r5
 800bb84:	f021 0103 	bic.w	r1, r1, #3
 800bb88:	3d03      	subs	r5, #3
 800bb8a:	45a8      	cmp	r8, r5
 800bb8c:	bf38      	it	cc
 800bb8e:	2100      	movcc	r1, #0
 800bb90:	440b      	add	r3, r1
 800bb92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb96:	b191      	cbz	r1, 800bbbe <__mdiff+0x11a>
 800bb98:	6117      	str	r7, [r2, #16]
 800bb9a:	e79d      	b.n	800bad8 <__mdiff+0x34>
 800bb9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bba0:	46e6      	mov	lr, ip
 800bba2:	0c08      	lsrs	r0, r1, #16
 800bba4:	fa1c fc81 	uxtah	ip, ip, r1
 800bba8:	4471      	add	r1, lr
 800bbaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bbae:	b289      	uxth	r1, r1
 800bbb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bbb4:	f846 1b04 	str.w	r1, [r6], #4
 800bbb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbbc:	e7dd      	b.n	800bb7a <__mdiff+0xd6>
 800bbbe:	3f01      	subs	r7, #1
 800bbc0:	e7e7      	b.n	800bb92 <__mdiff+0xee>
 800bbc2:	bf00      	nop
 800bbc4:	080206f8 	.word	0x080206f8
 800bbc8:	08020709 	.word	0x08020709

0800bbcc <__d2b>:
 800bbcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	460f      	mov	r7, r1
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	ec59 8b10 	vmov	r8, r9, d0
 800bbd8:	4616      	mov	r6, r2
 800bbda:	f7ff fccd 	bl	800b578 <_Balloc>
 800bbde:	4604      	mov	r4, r0
 800bbe0:	b930      	cbnz	r0, 800bbf0 <__d2b+0x24>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	4b23      	ldr	r3, [pc, #140]	@ (800bc74 <__d2b+0xa8>)
 800bbe6:	4824      	ldr	r0, [pc, #144]	@ (800bc78 <__d2b+0xac>)
 800bbe8:	f240 310f 	movw	r1, #783	@ 0x30f
 800bbec:	f000 fa82 	bl	800c0f4 <__assert_func>
 800bbf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbf8:	b10d      	cbz	r5, 800bbfe <__d2b+0x32>
 800bbfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	f1b8 0300 	subs.w	r3, r8, #0
 800bc04:	d023      	beq.n	800bc4e <__d2b+0x82>
 800bc06:	4668      	mov	r0, sp
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	f7ff fd7c 	bl	800b706 <__lo0bits>
 800bc0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc12:	b1d0      	cbz	r0, 800bc4a <__d2b+0x7e>
 800bc14:	f1c0 0320 	rsb	r3, r0, #32
 800bc18:	fa02 f303 	lsl.w	r3, r2, r3
 800bc1c:	430b      	orrs	r3, r1
 800bc1e:	40c2      	lsrs	r2, r0
 800bc20:	6163      	str	r3, [r4, #20]
 800bc22:	9201      	str	r2, [sp, #4]
 800bc24:	9b01      	ldr	r3, [sp, #4]
 800bc26:	61a3      	str	r3, [r4, #24]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	bf0c      	ite	eq
 800bc2c:	2201      	moveq	r2, #1
 800bc2e:	2202      	movne	r2, #2
 800bc30:	6122      	str	r2, [r4, #16]
 800bc32:	b1a5      	cbz	r5, 800bc5e <__d2b+0x92>
 800bc34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc38:	4405      	add	r5, r0
 800bc3a:	603d      	str	r5, [r7, #0]
 800bc3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc40:	6030      	str	r0, [r6, #0]
 800bc42:	4620      	mov	r0, r4
 800bc44:	b003      	add	sp, #12
 800bc46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc4a:	6161      	str	r1, [r4, #20]
 800bc4c:	e7ea      	b.n	800bc24 <__d2b+0x58>
 800bc4e:	a801      	add	r0, sp, #4
 800bc50:	f7ff fd59 	bl	800b706 <__lo0bits>
 800bc54:	9b01      	ldr	r3, [sp, #4]
 800bc56:	6163      	str	r3, [r4, #20]
 800bc58:	3020      	adds	r0, #32
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	e7e8      	b.n	800bc30 <__d2b+0x64>
 800bc5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc66:	6038      	str	r0, [r7, #0]
 800bc68:	6918      	ldr	r0, [r3, #16]
 800bc6a:	f7ff fd2d 	bl	800b6c8 <__hi0bits>
 800bc6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc72:	e7e5      	b.n	800bc40 <__d2b+0x74>
 800bc74:	080206f8 	.word	0x080206f8
 800bc78:	08020709 	.word	0x08020709

0800bc7c <__ssputs_r>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	688e      	ldr	r6, [r1, #8]
 800bc82:	461f      	mov	r7, r3
 800bc84:	42be      	cmp	r6, r7
 800bc86:	680b      	ldr	r3, [r1, #0]
 800bc88:	4682      	mov	sl, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	4690      	mov	r8, r2
 800bc8e:	d82d      	bhi.n	800bcec <__ssputs_r+0x70>
 800bc90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc98:	d026      	beq.n	800bce8 <__ssputs_r+0x6c>
 800bc9a:	6965      	ldr	r5, [r4, #20]
 800bc9c:	6909      	ldr	r1, [r1, #16]
 800bc9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bca2:	eba3 0901 	sub.w	r9, r3, r1
 800bca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcaa:	1c7b      	adds	r3, r7, #1
 800bcac:	444b      	add	r3, r9
 800bcae:	106d      	asrs	r5, r5, #1
 800bcb0:	429d      	cmp	r5, r3
 800bcb2:	bf38      	it	cc
 800bcb4:	461d      	movcc	r5, r3
 800bcb6:	0553      	lsls	r3, r2, #21
 800bcb8:	d527      	bpl.n	800bd0a <__ssputs_r+0x8e>
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f7ff fbd0 	bl	800b460 <_malloc_r>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	b360      	cbz	r0, 800bd1e <__ssputs_r+0xa2>
 800bcc4:	6921      	ldr	r1, [r4, #16]
 800bcc6:	464a      	mov	r2, r9
 800bcc8:	f000 fa06 	bl	800c0d8 <memcpy>
 800bccc:	89a3      	ldrh	r3, [r4, #12]
 800bcce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bcd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	6126      	str	r6, [r4, #16]
 800bcda:	6165      	str	r5, [r4, #20]
 800bcdc:	444e      	add	r6, r9
 800bcde:	eba5 0509 	sub.w	r5, r5, r9
 800bce2:	6026      	str	r6, [r4, #0]
 800bce4:	60a5      	str	r5, [r4, #8]
 800bce6:	463e      	mov	r6, r7
 800bce8:	42be      	cmp	r6, r7
 800bcea:	d900      	bls.n	800bcee <__ssputs_r+0x72>
 800bcec:	463e      	mov	r6, r7
 800bcee:	6820      	ldr	r0, [r4, #0]
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4641      	mov	r1, r8
 800bcf4:	f000 f9c6 	bl	800c084 <memmove>
 800bcf8:	68a3      	ldr	r3, [r4, #8]
 800bcfa:	1b9b      	subs	r3, r3, r6
 800bcfc:	60a3      	str	r3, [r4, #8]
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	4433      	add	r3, r6
 800bd02:	6023      	str	r3, [r4, #0]
 800bd04:	2000      	movs	r0, #0
 800bd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0a:	462a      	mov	r2, r5
 800bd0c:	f000 fa36 	bl	800c17c <_realloc_r>
 800bd10:	4606      	mov	r6, r0
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d1e0      	bne.n	800bcd8 <__ssputs_r+0x5c>
 800bd16:	6921      	ldr	r1, [r4, #16]
 800bd18:	4650      	mov	r0, sl
 800bd1a:	f7ff fb2d 	bl	800b378 <_free_r>
 800bd1e:	230c      	movs	r3, #12
 800bd20:	f8ca 3000 	str.w	r3, [sl]
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	e7e9      	b.n	800bd06 <__ssputs_r+0x8a>
	...

0800bd34 <_svfiprintf_r>:
 800bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	4698      	mov	r8, r3
 800bd3a:	898b      	ldrh	r3, [r1, #12]
 800bd3c:	061b      	lsls	r3, r3, #24
 800bd3e:	b09d      	sub	sp, #116	@ 0x74
 800bd40:	4607      	mov	r7, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	4614      	mov	r4, r2
 800bd46:	d510      	bpl.n	800bd6a <_svfiprintf_r+0x36>
 800bd48:	690b      	ldr	r3, [r1, #16]
 800bd4a:	b973      	cbnz	r3, 800bd6a <_svfiprintf_r+0x36>
 800bd4c:	2140      	movs	r1, #64	@ 0x40
 800bd4e:	f7ff fb87 	bl	800b460 <_malloc_r>
 800bd52:	6028      	str	r0, [r5, #0]
 800bd54:	6128      	str	r0, [r5, #16]
 800bd56:	b930      	cbnz	r0, 800bd66 <_svfiprintf_r+0x32>
 800bd58:	230c      	movs	r3, #12
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd60:	b01d      	add	sp, #116	@ 0x74
 800bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd66:	2340      	movs	r3, #64	@ 0x40
 800bd68:	616b      	str	r3, [r5, #20]
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd6e:	2320      	movs	r3, #32
 800bd70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd74:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd78:	2330      	movs	r3, #48	@ 0x30
 800bd7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bf18 <_svfiprintf_r+0x1e4>
 800bd7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd82:	f04f 0901 	mov.w	r9, #1
 800bd86:	4623      	mov	r3, r4
 800bd88:	469a      	mov	sl, r3
 800bd8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd8e:	b10a      	cbz	r2, 800bd94 <_svfiprintf_r+0x60>
 800bd90:	2a25      	cmp	r2, #37	@ 0x25
 800bd92:	d1f9      	bne.n	800bd88 <_svfiprintf_r+0x54>
 800bd94:	ebba 0b04 	subs.w	fp, sl, r4
 800bd98:	d00b      	beq.n	800bdb2 <_svfiprintf_r+0x7e>
 800bd9a:	465b      	mov	r3, fp
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	4629      	mov	r1, r5
 800bda0:	4638      	mov	r0, r7
 800bda2:	f7ff ff6b 	bl	800bc7c <__ssputs_r>
 800bda6:	3001      	adds	r0, #1
 800bda8:	f000 80a7 	beq.w	800befa <_svfiprintf_r+0x1c6>
 800bdac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdae:	445a      	add	r2, fp
 800bdb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 809f 	beq.w	800befa <_svfiprintf_r+0x1c6>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdc6:	f10a 0a01 	add.w	sl, sl, #1
 800bdca:	9304      	str	r3, [sp, #16]
 800bdcc:	9307      	str	r3, [sp, #28]
 800bdce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdd2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdd4:	4654      	mov	r4, sl
 800bdd6:	2205      	movs	r2, #5
 800bdd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bddc:	484e      	ldr	r0, [pc, #312]	@ (800bf18 <_svfiprintf_r+0x1e4>)
 800bdde:	f7f4 fa17 	bl	8000210 <memchr>
 800bde2:	9a04      	ldr	r2, [sp, #16]
 800bde4:	b9d8      	cbnz	r0, 800be1e <_svfiprintf_r+0xea>
 800bde6:	06d0      	lsls	r0, r2, #27
 800bde8:	bf44      	itt	mi
 800bdea:	2320      	movmi	r3, #32
 800bdec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdf0:	0711      	lsls	r1, r2, #28
 800bdf2:	bf44      	itt	mi
 800bdf4:	232b      	movmi	r3, #43	@ 0x2b
 800bdf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdfa:	f89a 3000 	ldrb.w	r3, [sl]
 800bdfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800be00:	d015      	beq.n	800be2e <_svfiprintf_r+0xfa>
 800be02:	9a07      	ldr	r2, [sp, #28]
 800be04:	4654      	mov	r4, sl
 800be06:	2000      	movs	r0, #0
 800be08:	f04f 0c0a 	mov.w	ip, #10
 800be0c:	4621      	mov	r1, r4
 800be0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be12:	3b30      	subs	r3, #48	@ 0x30
 800be14:	2b09      	cmp	r3, #9
 800be16:	d94b      	bls.n	800beb0 <_svfiprintf_r+0x17c>
 800be18:	b1b0      	cbz	r0, 800be48 <_svfiprintf_r+0x114>
 800be1a:	9207      	str	r2, [sp, #28]
 800be1c:	e014      	b.n	800be48 <_svfiprintf_r+0x114>
 800be1e:	eba0 0308 	sub.w	r3, r0, r8
 800be22:	fa09 f303 	lsl.w	r3, r9, r3
 800be26:	4313      	orrs	r3, r2
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	46a2      	mov	sl, r4
 800be2c:	e7d2      	b.n	800bdd4 <_svfiprintf_r+0xa0>
 800be2e:	9b03      	ldr	r3, [sp, #12]
 800be30:	1d19      	adds	r1, r3, #4
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	9103      	str	r1, [sp, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	bfbb      	ittet	lt
 800be3a:	425b      	neglt	r3, r3
 800be3c:	f042 0202 	orrlt.w	r2, r2, #2
 800be40:	9307      	strge	r3, [sp, #28]
 800be42:	9307      	strlt	r3, [sp, #28]
 800be44:	bfb8      	it	lt
 800be46:	9204      	strlt	r2, [sp, #16]
 800be48:	7823      	ldrb	r3, [r4, #0]
 800be4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800be4c:	d10a      	bne.n	800be64 <_svfiprintf_r+0x130>
 800be4e:	7863      	ldrb	r3, [r4, #1]
 800be50:	2b2a      	cmp	r3, #42	@ 0x2a
 800be52:	d132      	bne.n	800beba <_svfiprintf_r+0x186>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	1d1a      	adds	r2, r3, #4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	9203      	str	r2, [sp, #12]
 800be5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be60:	3402      	adds	r4, #2
 800be62:	9305      	str	r3, [sp, #20]
 800be64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf28 <_svfiprintf_r+0x1f4>
 800be68:	7821      	ldrb	r1, [r4, #0]
 800be6a:	2203      	movs	r2, #3
 800be6c:	4650      	mov	r0, sl
 800be6e:	f7f4 f9cf 	bl	8000210 <memchr>
 800be72:	b138      	cbz	r0, 800be84 <_svfiprintf_r+0x150>
 800be74:	9b04      	ldr	r3, [sp, #16]
 800be76:	eba0 000a 	sub.w	r0, r0, sl
 800be7a:	2240      	movs	r2, #64	@ 0x40
 800be7c:	4082      	lsls	r2, r0
 800be7e:	4313      	orrs	r3, r2
 800be80:	3401      	adds	r4, #1
 800be82:	9304      	str	r3, [sp, #16]
 800be84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be88:	4824      	ldr	r0, [pc, #144]	@ (800bf1c <_svfiprintf_r+0x1e8>)
 800be8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be8e:	2206      	movs	r2, #6
 800be90:	f7f4 f9be 	bl	8000210 <memchr>
 800be94:	2800      	cmp	r0, #0
 800be96:	d036      	beq.n	800bf06 <_svfiprintf_r+0x1d2>
 800be98:	4b21      	ldr	r3, [pc, #132]	@ (800bf20 <_svfiprintf_r+0x1ec>)
 800be9a:	bb1b      	cbnz	r3, 800bee4 <_svfiprintf_r+0x1b0>
 800be9c:	9b03      	ldr	r3, [sp, #12]
 800be9e:	3307      	adds	r3, #7
 800bea0:	f023 0307 	bic.w	r3, r3, #7
 800bea4:	3308      	adds	r3, #8
 800bea6:	9303      	str	r3, [sp, #12]
 800bea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beaa:	4433      	add	r3, r6
 800beac:	9309      	str	r3, [sp, #36]	@ 0x24
 800beae:	e76a      	b.n	800bd86 <_svfiprintf_r+0x52>
 800beb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800beb4:	460c      	mov	r4, r1
 800beb6:	2001      	movs	r0, #1
 800beb8:	e7a8      	b.n	800be0c <_svfiprintf_r+0xd8>
 800beba:	2300      	movs	r3, #0
 800bebc:	3401      	adds	r4, #1
 800bebe:	9305      	str	r3, [sp, #20]
 800bec0:	4619      	mov	r1, r3
 800bec2:	f04f 0c0a 	mov.w	ip, #10
 800bec6:	4620      	mov	r0, r4
 800bec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800becc:	3a30      	subs	r2, #48	@ 0x30
 800bece:	2a09      	cmp	r2, #9
 800bed0:	d903      	bls.n	800beda <_svfiprintf_r+0x1a6>
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0c6      	beq.n	800be64 <_svfiprintf_r+0x130>
 800bed6:	9105      	str	r1, [sp, #20]
 800bed8:	e7c4      	b.n	800be64 <_svfiprintf_r+0x130>
 800beda:	fb0c 2101 	mla	r1, ip, r1, r2
 800bede:	4604      	mov	r4, r0
 800bee0:	2301      	movs	r3, #1
 800bee2:	e7f0      	b.n	800bec6 <_svfiprintf_r+0x192>
 800bee4:	ab03      	add	r3, sp, #12
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	462a      	mov	r2, r5
 800beea:	4b0e      	ldr	r3, [pc, #56]	@ (800bf24 <_svfiprintf_r+0x1f0>)
 800beec:	a904      	add	r1, sp, #16
 800beee:	4638      	mov	r0, r7
 800bef0:	f7fd fe88 	bl	8009c04 <_printf_float>
 800bef4:	1c42      	adds	r2, r0, #1
 800bef6:	4606      	mov	r6, r0
 800bef8:	d1d6      	bne.n	800bea8 <_svfiprintf_r+0x174>
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	065b      	lsls	r3, r3, #25
 800befe:	f53f af2d 	bmi.w	800bd5c <_svfiprintf_r+0x28>
 800bf02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf04:	e72c      	b.n	800bd60 <_svfiprintf_r+0x2c>
 800bf06:	ab03      	add	r3, sp, #12
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	4b05      	ldr	r3, [pc, #20]	@ (800bf24 <_svfiprintf_r+0x1f0>)
 800bf0e:	a904      	add	r1, sp, #16
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7fe f90f 	bl	800a134 <_printf_i>
 800bf16:	e7ed      	b.n	800bef4 <_svfiprintf_r+0x1c0>
 800bf18:	08020860 	.word	0x08020860
 800bf1c:	0802086a 	.word	0x0802086a
 800bf20:	08009c05 	.word	0x08009c05
 800bf24:	0800bc7d 	.word	0x0800bc7d
 800bf28:	08020866 	.word	0x08020866

0800bf2c <__sflush_r>:
 800bf2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf34:	0716      	lsls	r6, r2, #28
 800bf36:	4605      	mov	r5, r0
 800bf38:	460c      	mov	r4, r1
 800bf3a:	d454      	bmi.n	800bfe6 <__sflush_r+0xba>
 800bf3c:	684b      	ldr	r3, [r1, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dc02      	bgt.n	800bf48 <__sflush_r+0x1c>
 800bf42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd48      	ble.n	800bfda <__sflush_r+0xae>
 800bf48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf4a:	2e00      	cmp	r6, #0
 800bf4c:	d045      	beq.n	800bfda <__sflush_r+0xae>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf54:	682f      	ldr	r7, [r5, #0]
 800bf56:	6a21      	ldr	r1, [r4, #32]
 800bf58:	602b      	str	r3, [r5, #0]
 800bf5a:	d030      	beq.n	800bfbe <__sflush_r+0x92>
 800bf5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	0759      	lsls	r1, r3, #29
 800bf62:	d505      	bpl.n	800bf70 <__sflush_r+0x44>
 800bf64:	6863      	ldr	r3, [r4, #4]
 800bf66:	1ad2      	subs	r2, r2, r3
 800bf68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf6a:	b10b      	cbz	r3, 800bf70 <__sflush_r+0x44>
 800bf6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf6e:	1ad2      	subs	r2, r2, r3
 800bf70:	2300      	movs	r3, #0
 800bf72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf74:	6a21      	ldr	r1, [r4, #32]
 800bf76:	4628      	mov	r0, r5
 800bf78:	47b0      	blx	r6
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	d106      	bne.n	800bf8e <__sflush_r+0x62>
 800bf80:	6829      	ldr	r1, [r5, #0]
 800bf82:	291d      	cmp	r1, #29
 800bf84:	d82b      	bhi.n	800bfde <__sflush_r+0xb2>
 800bf86:	4a2a      	ldr	r2, [pc, #168]	@ (800c030 <__sflush_r+0x104>)
 800bf88:	410a      	asrs	r2, r1
 800bf8a:	07d6      	lsls	r6, r2, #31
 800bf8c:	d427      	bmi.n	800bfde <__sflush_r+0xb2>
 800bf8e:	2200      	movs	r2, #0
 800bf90:	6062      	str	r2, [r4, #4]
 800bf92:	04d9      	lsls	r1, r3, #19
 800bf94:	6922      	ldr	r2, [r4, #16]
 800bf96:	6022      	str	r2, [r4, #0]
 800bf98:	d504      	bpl.n	800bfa4 <__sflush_r+0x78>
 800bf9a:	1c42      	adds	r2, r0, #1
 800bf9c:	d101      	bne.n	800bfa2 <__sflush_r+0x76>
 800bf9e:	682b      	ldr	r3, [r5, #0]
 800bfa0:	b903      	cbnz	r3, 800bfa4 <__sflush_r+0x78>
 800bfa2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bfa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfa6:	602f      	str	r7, [r5, #0]
 800bfa8:	b1b9      	cbz	r1, 800bfda <__sflush_r+0xae>
 800bfaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfae:	4299      	cmp	r1, r3
 800bfb0:	d002      	beq.n	800bfb8 <__sflush_r+0x8c>
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f7ff f9e0 	bl	800b378 <_free_r>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfbc:	e00d      	b.n	800bfda <__sflush_r+0xae>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	47b0      	blx	r6
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	1c50      	adds	r0, r2, #1
 800bfc8:	d1c9      	bne.n	800bf5e <__sflush_r+0x32>
 800bfca:	682b      	ldr	r3, [r5, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0c6      	beq.n	800bf5e <__sflush_r+0x32>
 800bfd0:	2b1d      	cmp	r3, #29
 800bfd2:	d001      	beq.n	800bfd8 <__sflush_r+0xac>
 800bfd4:	2b16      	cmp	r3, #22
 800bfd6:	d11e      	bne.n	800c016 <__sflush_r+0xea>
 800bfd8:	602f      	str	r7, [r5, #0]
 800bfda:	2000      	movs	r0, #0
 800bfdc:	e022      	b.n	800c024 <__sflush_r+0xf8>
 800bfde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfe2:	b21b      	sxth	r3, r3
 800bfe4:	e01b      	b.n	800c01e <__sflush_r+0xf2>
 800bfe6:	690f      	ldr	r7, [r1, #16]
 800bfe8:	2f00      	cmp	r7, #0
 800bfea:	d0f6      	beq.n	800bfda <__sflush_r+0xae>
 800bfec:	0793      	lsls	r3, r2, #30
 800bfee:	680e      	ldr	r6, [r1, #0]
 800bff0:	bf08      	it	eq
 800bff2:	694b      	ldreq	r3, [r1, #20]
 800bff4:	600f      	str	r7, [r1, #0]
 800bff6:	bf18      	it	ne
 800bff8:	2300      	movne	r3, #0
 800bffa:	eba6 0807 	sub.w	r8, r6, r7
 800bffe:	608b      	str	r3, [r1, #8]
 800c000:	f1b8 0f00 	cmp.w	r8, #0
 800c004:	dde9      	ble.n	800bfda <__sflush_r+0xae>
 800c006:	6a21      	ldr	r1, [r4, #32]
 800c008:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c00a:	4643      	mov	r3, r8
 800c00c:	463a      	mov	r2, r7
 800c00e:	4628      	mov	r0, r5
 800c010:	47b0      	blx	r6
 800c012:	2800      	cmp	r0, #0
 800c014:	dc08      	bgt.n	800c028 <__sflush_r+0xfc>
 800c016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c01e:	81a3      	strh	r3, [r4, #12]
 800c020:	f04f 30ff 	mov.w	r0, #4294967295
 800c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c028:	4407      	add	r7, r0
 800c02a:	eba8 0800 	sub.w	r8, r8, r0
 800c02e:	e7e7      	b.n	800c000 <__sflush_r+0xd4>
 800c030:	dfbffffe 	.word	0xdfbffffe

0800c034 <_fflush_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	690b      	ldr	r3, [r1, #16]
 800c038:	4605      	mov	r5, r0
 800c03a:	460c      	mov	r4, r1
 800c03c:	b913      	cbnz	r3, 800c044 <_fflush_r+0x10>
 800c03e:	2500      	movs	r5, #0
 800c040:	4628      	mov	r0, r5
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	b118      	cbz	r0, 800c04e <_fflush_r+0x1a>
 800c046:	6a03      	ldr	r3, [r0, #32]
 800c048:	b90b      	cbnz	r3, 800c04e <_fflush_r+0x1a>
 800c04a:	f7fe fa1f 	bl	800a48c <__sinit>
 800c04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0f3      	beq.n	800c03e <_fflush_r+0xa>
 800c056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c058:	07d0      	lsls	r0, r2, #31
 800c05a:	d404      	bmi.n	800c066 <_fflush_r+0x32>
 800c05c:	0599      	lsls	r1, r3, #22
 800c05e:	d402      	bmi.n	800c066 <_fflush_r+0x32>
 800c060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c062:	f7fe fb3a 	bl	800a6da <__retarget_lock_acquire_recursive>
 800c066:	4628      	mov	r0, r5
 800c068:	4621      	mov	r1, r4
 800c06a:	f7ff ff5f 	bl	800bf2c <__sflush_r>
 800c06e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c070:	07da      	lsls	r2, r3, #31
 800c072:	4605      	mov	r5, r0
 800c074:	d4e4      	bmi.n	800c040 <_fflush_r+0xc>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	059b      	lsls	r3, r3, #22
 800c07a:	d4e1      	bmi.n	800c040 <_fflush_r+0xc>
 800c07c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c07e:	f7fe fb2d 	bl	800a6dc <__retarget_lock_release_recursive>
 800c082:	e7dd      	b.n	800c040 <_fflush_r+0xc>

0800c084 <memmove>:
 800c084:	4288      	cmp	r0, r1
 800c086:	b510      	push	{r4, lr}
 800c088:	eb01 0402 	add.w	r4, r1, r2
 800c08c:	d902      	bls.n	800c094 <memmove+0x10>
 800c08e:	4284      	cmp	r4, r0
 800c090:	4623      	mov	r3, r4
 800c092:	d807      	bhi.n	800c0a4 <memmove+0x20>
 800c094:	1e43      	subs	r3, r0, #1
 800c096:	42a1      	cmp	r1, r4
 800c098:	d008      	beq.n	800c0ac <memmove+0x28>
 800c09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0a2:	e7f8      	b.n	800c096 <memmove+0x12>
 800c0a4:	4402      	add	r2, r0
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	428a      	cmp	r2, r1
 800c0aa:	d100      	bne.n	800c0ae <memmove+0x2a>
 800c0ac:	bd10      	pop	{r4, pc}
 800c0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0b6:	e7f7      	b.n	800c0a8 <memmove+0x24>

0800c0b8 <_sbrk_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d06      	ldr	r5, [pc, #24]	@ (800c0d4 <_sbrk_r+0x1c>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	f7f6 fe34 	bl	8002d30 <_sbrk>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_sbrk_r+0x1a>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_sbrk_r+0x1a>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	20018e68 	.word	0x20018e68

0800c0d8 <memcpy>:
 800c0d8:	440a      	add	r2, r1
 800c0da:	4291      	cmp	r1, r2
 800c0dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0e0:	d100      	bne.n	800c0e4 <memcpy+0xc>
 800c0e2:	4770      	bx	lr
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0ee:	4291      	cmp	r1, r2
 800c0f0:	d1f9      	bne.n	800c0e6 <memcpy+0xe>
 800c0f2:	bd10      	pop	{r4, pc}

0800c0f4 <__assert_func>:
 800c0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0f6:	4614      	mov	r4, r2
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	4b09      	ldr	r3, [pc, #36]	@ (800c120 <__assert_func+0x2c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4605      	mov	r5, r0
 800c100:	68d8      	ldr	r0, [r3, #12]
 800c102:	b954      	cbnz	r4, 800c11a <__assert_func+0x26>
 800c104:	4b07      	ldr	r3, [pc, #28]	@ (800c124 <__assert_func+0x30>)
 800c106:	461c      	mov	r4, r3
 800c108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c10c:	9100      	str	r1, [sp, #0]
 800c10e:	462b      	mov	r3, r5
 800c110:	4905      	ldr	r1, [pc, #20]	@ (800c128 <__assert_func+0x34>)
 800c112:	f000 f86f 	bl	800c1f4 <fiprintf>
 800c116:	f000 f87f 	bl	800c218 <abort>
 800c11a:	4b04      	ldr	r3, [pc, #16]	@ (800c12c <__assert_func+0x38>)
 800c11c:	e7f4      	b.n	800c108 <__assert_func+0x14>
 800c11e:	bf00      	nop
 800c120:	20000018 	.word	0x20000018
 800c124:	080208b6 	.word	0x080208b6
 800c128:	08020888 	.word	0x08020888
 800c12c:	0802087b 	.word	0x0802087b

0800c130 <_calloc_r>:
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	fba1 5402 	umull	r5, r4, r1, r2
 800c136:	b93c      	cbnz	r4, 800c148 <_calloc_r+0x18>
 800c138:	4629      	mov	r1, r5
 800c13a:	f7ff f991 	bl	800b460 <_malloc_r>
 800c13e:	4606      	mov	r6, r0
 800c140:	b928      	cbnz	r0, 800c14e <_calloc_r+0x1e>
 800c142:	2600      	movs	r6, #0
 800c144:	4630      	mov	r0, r6
 800c146:	bd70      	pop	{r4, r5, r6, pc}
 800c148:	220c      	movs	r2, #12
 800c14a:	6002      	str	r2, [r0, #0]
 800c14c:	e7f9      	b.n	800c142 <_calloc_r+0x12>
 800c14e:	462a      	mov	r2, r5
 800c150:	4621      	mov	r1, r4
 800c152:	f7fe fa44 	bl	800a5de <memset>
 800c156:	e7f5      	b.n	800c144 <_calloc_r+0x14>

0800c158 <__ascii_mbtowc>:
 800c158:	b082      	sub	sp, #8
 800c15a:	b901      	cbnz	r1, 800c15e <__ascii_mbtowc+0x6>
 800c15c:	a901      	add	r1, sp, #4
 800c15e:	b142      	cbz	r2, 800c172 <__ascii_mbtowc+0x1a>
 800c160:	b14b      	cbz	r3, 800c176 <__ascii_mbtowc+0x1e>
 800c162:	7813      	ldrb	r3, [r2, #0]
 800c164:	600b      	str	r3, [r1, #0]
 800c166:	7812      	ldrb	r2, [r2, #0]
 800c168:	1e10      	subs	r0, r2, #0
 800c16a:	bf18      	it	ne
 800c16c:	2001      	movne	r0, #1
 800c16e:	b002      	add	sp, #8
 800c170:	4770      	bx	lr
 800c172:	4610      	mov	r0, r2
 800c174:	e7fb      	b.n	800c16e <__ascii_mbtowc+0x16>
 800c176:	f06f 0001 	mvn.w	r0, #1
 800c17a:	e7f8      	b.n	800c16e <__ascii_mbtowc+0x16>

0800c17c <_realloc_r>:
 800c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	4680      	mov	r8, r0
 800c182:	4615      	mov	r5, r2
 800c184:	460c      	mov	r4, r1
 800c186:	b921      	cbnz	r1, 800c192 <_realloc_r+0x16>
 800c188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c18c:	4611      	mov	r1, r2
 800c18e:	f7ff b967 	b.w	800b460 <_malloc_r>
 800c192:	b92a      	cbnz	r2, 800c1a0 <_realloc_r+0x24>
 800c194:	f7ff f8f0 	bl	800b378 <_free_r>
 800c198:	2400      	movs	r4, #0
 800c19a:	4620      	mov	r0, r4
 800c19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a0:	f000 f841 	bl	800c226 <_malloc_usable_size_r>
 800c1a4:	4285      	cmp	r5, r0
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	d802      	bhi.n	800c1b0 <_realloc_r+0x34>
 800c1aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c1ae:	d8f4      	bhi.n	800c19a <_realloc_r+0x1e>
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	f7ff f954 	bl	800b460 <_malloc_r>
 800c1b8:	4607      	mov	r7, r0
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d0ec      	beq.n	800c198 <_realloc_r+0x1c>
 800c1be:	42b5      	cmp	r5, r6
 800c1c0:	462a      	mov	r2, r5
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	bf28      	it	cs
 800c1c6:	4632      	movcs	r2, r6
 800c1c8:	f7ff ff86 	bl	800c0d8 <memcpy>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	f7ff f8d2 	bl	800b378 <_free_r>
 800c1d4:	463c      	mov	r4, r7
 800c1d6:	e7e0      	b.n	800c19a <_realloc_r+0x1e>

0800c1d8 <__ascii_wctomb>:
 800c1d8:	4603      	mov	r3, r0
 800c1da:	4608      	mov	r0, r1
 800c1dc:	b141      	cbz	r1, 800c1f0 <__ascii_wctomb+0x18>
 800c1de:	2aff      	cmp	r2, #255	@ 0xff
 800c1e0:	d904      	bls.n	800c1ec <__ascii_wctomb+0x14>
 800c1e2:	228a      	movs	r2, #138	@ 0x8a
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ea:	4770      	bx	lr
 800c1ec:	700a      	strb	r2, [r1, #0]
 800c1ee:	2001      	movs	r0, #1
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <fiprintf>:
 800c1f4:	b40e      	push	{r1, r2, r3}
 800c1f6:	b503      	push	{r0, r1, lr}
 800c1f8:	4601      	mov	r1, r0
 800c1fa:	ab03      	add	r3, sp, #12
 800c1fc:	4805      	ldr	r0, [pc, #20]	@ (800c214 <fiprintf+0x20>)
 800c1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c202:	6800      	ldr	r0, [r0, #0]
 800c204:	9301      	str	r3, [sp, #4]
 800c206:	f000 f83f 	bl	800c288 <_vfiprintf_r>
 800c20a:	b002      	add	sp, #8
 800c20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c210:	b003      	add	sp, #12
 800c212:	4770      	bx	lr
 800c214:	20000018 	.word	0x20000018

0800c218 <abort>:
 800c218:	b508      	push	{r3, lr}
 800c21a:	2006      	movs	r0, #6
 800c21c:	f000 fa08 	bl	800c630 <raise>
 800c220:	2001      	movs	r0, #1
 800c222:	f7f6 fd0d 	bl	8002c40 <_exit>

0800c226 <_malloc_usable_size_r>:
 800c226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22a:	1f18      	subs	r0, r3, #4
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	bfbc      	itt	lt
 800c230:	580b      	ldrlt	r3, [r1, r0]
 800c232:	18c0      	addlt	r0, r0, r3
 800c234:	4770      	bx	lr

0800c236 <__sfputc_r>:
 800c236:	6893      	ldr	r3, [r2, #8]
 800c238:	3b01      	subs	r3, #1
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	b410      	push	{r4}
 800c23e:	6093      	str	r3, [r2, #8]
 800c240:	da08      	bge.n	800c254 <__sfputc_r+0x1e>
 800c242:	6994      	ldr	r4, [r2, #24]
 800c244:	42a3      	cmp	r3, r4
 800c246:	db01      	blt.n	800c24c <__sfputc_r+0x16>
 800c248:	290a      	cmp	r1, #10
 800c24a:	d103      	bne.n	800c254 <__sfputc_r+0x1e>
 800c24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c250:	f000 b932 	b.w	800c4b8 <__swbuf_r>
 800c254:	6813      	ldr	r3, [r2, #0]
 800c256:	1c58      	adds	r0, r3, #1
 800c258:	6010      	str	r0, [r2, #0]
 800c25a:	7019      	strb	r1, [r3, #0]
 800c25c:	4608      	mov	r0, r1
 800c25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <__sfputs_r>:
 800c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c266:	4606      	mov	r6, r0
 800c268:	460f      	mov	r7, r1
 800c26a:	4614      	mov	r4, r2
 800c26c:	18d5      	adds	r5, r2, r3
 800c26e:	42ac      	cmp	r4, r5
 800c270:	d101      	bne.n	800c276 <__sfputs_r+0x12>
 800c272:	2000      	movs	r0, #0
 800c274:	e007      	b.n	800c286 <__sfputs_r+0x22>
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	463a      	mov	r2, r7
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7ff ffda 	bl	800c236 <__sfputc_r>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	d1f3      	bne.n	800c26e <__sfputs_r+0xa>
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c288 <_vfiprintf_r>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	460d      	mov	r5, r1
 800c28e:	b09d      	sub	sp, #116	@ 0x74
 800c290:	4614      	mov	r4, r2
 800c292:	4698      	mov	r8, r3
 800c294:	4606      	mov	r6, r0
 800c296:	b118      	cbz	r0, 800c2a0 <_vfiprintf_r+0x18>
 800c298:	6a03      	ldr	r3, [r0, #32]
 800c29a:	b90b      	cbnz	r3, 800c2a0 <_vfiprintf_r+0x18>
 800c29c:	f7fe f8f6 	bl	800a48c <__sinit>
 800c2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2a2:	07d9      	lsls	r1, r3, #31
 800c2a4:	d405      	bmi.n	800c2b2 <_vfiprintf_r+0x2a>
 800c2a6:	89ab      	ldrh	r3, [r5, #12]
 800c2a8:	059a      	lsls	r2, r3, #22
 800c2aa:	d402      	bmi.n	800c2b2 <_vfiprintf_r+0x2a>
 800c2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2ae:	f7fe fa14 	bl	800a6da <__retarget_lock_acquire_recursive>
 800c2b2:	89ab      	ldrh	r3, [r5, #12]
 800c2b4:	071b      	lsls	r3, r3, #28
 800c2b6:	d501      	bpl.n	800c2bc <_vfiprintf_r+0x34>
 800c2b8:	692b      	ldr	r3, [r5, #16]
 800c2ba:	b99b      	cbnz	r3, 800c2e4 <_vfiprintf_r+0x5c>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f000 f938 	bl	800c534 <__swsetup_r>
 800c2c4:	b170      	cbz	r0, 800c2e4 <_vfiprintf_r+0x5c>
 800c2c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2c8:	07dc      	lsls	r4, r3, #31
 800c2ca:	d504      	bpl.n	800c2d6 <_vfiprintf_r+0x4e>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	b01d      	add	sp, #116	@ 0x74
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	89ab      	ldrh	r3, [r5, #12]
 800c2d8:	0598      	lsls	r0, r3, #22
 800c2da:	d4f7      	bmi.n	800c2cc <_vfiprintf_r+0x44>
 800c2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2de:	f7fe f9fd 	bl	800a6dc <__retarget_lock_release_recursive>
 800c2e2:	e7f3      	b.n	800c2cc <_vfiprintf_r+0x44>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2e8:	2320      	movs	r3, #32
 800c2ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2f2:	2330      	movs	r3, #48	@ 0x30
 800c2f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c4a4 <_vfiprintf_r+0x21c>
 800c2f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2fc:	f04f 0901 	mov.w	r9, #1
 800c300:	4623      	mov	r3, r4
 800c302:	469a      	mov	sl, r3
 800c304:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c308:	b10a      	cbz	r2, 800c30e <_vfiprintf_r+0x86>
 800c30a:	2a25      	cmp	r2, #37	@ 0x25
 800c30c:	d1f9      	bne.n	800c302 <_vfiprintf_r+0x7a>
 800c30e:	ebba 0b04 	subs.w	fp, sl, r4
 800c312:	d00b      	beq.n	800c32c <_vfiprintf_r+0xa4>
 800c314:	465b      	mov	r3, fp
 800c316:	4622      	mov	r2, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	4630      	mov	r0, r6
 800c31c:	f7ff ffa2 	bl	800c264 <__sfputs_r>
 800c320:	3001      	adds	r0, #1
 800c322:	f000 80a7 	beq.w	800c474 <_vfiprintf_r+0x1ec>
 800c326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c328:	445a      	add	r2, fp
 800c32a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c32c:	f89a 3000 	ldrb.w	r3, [sl]
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 809f 	beq.w	800c474 <_vfiprintf_r+0x1ec>
 800c336:	2300      	movs	r3, #0
 800c338:	f04f 32ff 	mov.w	r2, #4294967295
 800c33c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c340:	f10a 0a01 	add.w	sl, sl, #1
 800c344:	9304      	str	r3, [sp, #16]
 800c346:	9307      	str	r3, [sp, #28]
 800c348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c34c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c34e:	4654      	mov	r4, sl
 800c350:	2205      	movs	r2, #5
 800c352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c356:	4853      	ldr	r0, [pc, #332]	@ (800c4a4 <_vfiprintf_r+0x21c>)
 800c358:	f7f3 ff5a 	bl	8000210 <memchr>
 800c35c:	9a04      	ldr	r2, [sp, #16]
 800c35e:	b9d8      	cbnz	r0, 800c398 <_vfiprintf_r+0x110>
 800c360:	06d1      	lsls	r1, r2, #27
 800c362:	bf44      	itt	mi
 800c364:	2320      	movmi	r3, #32
 800c366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c36a:	0713      	lsls	r3, r2, #28
 800c36c:	bf44      	itt	mi
 800c36e:	232b      	movmi	r3, #43	@ 0x2b
 800c370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c374:	f89a 3000 	ldrb.w	r3, [sl]
 800c378:	2b2a      	cmp	r3, #42	@ 0x2a
 800c37a:	d015      	beq.n	800c3a8 <_vfiprintf_r+0x120>
 800c37c:	9a07      	ldr	r2, [sp, #28]
 800c37e:	4654      	mov	r4, sl
 800c380:	2000      	movs	r0, #0
 800c382:	f04f 0c0a 	mov.w	ip, #10
 800c386:	4621      	mov	r1, r4
 800c388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c38c:	3b30      	subs	r3, #48	@ 0x30
 800c38e:	2b09      	cmp	r3, #9
 800c390:	d94b      	bls.n	800c42a <_vfiprintf_r+0x1a2>
 800c392:	b1b0      	cbz	r0, 800c3c2 <_vfiprintf_r+0x13a>
 800c394:	9207      	str	r2, [sp, #28]
 800c396:	e014      	b.n	800c3c2 <_vfiprintf_r+0x13a>
 800c398:	eba0 0308 	sub.w	r3, r0, r8
 800c39c:	fa09 f303 	lsl.w	r3, r9, r3
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	46a2      	mov	sl, r4
 800c3a6:	e7d2      	b.n	800c34e <_vfiprintf_r+0xc6>
 800c3a8:	9b03      	ldr	r3, [sp, #12]
 800c3aa:	1d19      	adds	r1, r3, #4
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	9103      	str	r1, [sp, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	bfbb      	ittet	lt
 800c3b4:	425b      	neglt	r3, r3
 800c3b6:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ba:	9307      	strge	r3, [sp, #28]
 800c3bc:	9307      	strlt	r3, [sp, #28]
 800c3be:	bfb8      	it	lt
 800c3c0:	9204      	strlt	r2, [sp, #16]
 800c3c2:	7823      	ldrb	r3, [r4, #0]
 800c3c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3c6:	d10a      	bne.n	800c3de <_vfiprintf_r+0x156>
 800c3c8:	7863      	ldrb	r3, [r4, #1]
 800c3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3cc:	d132      	bne.n	800c434 <_vfiprintf_r+0x1ac>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	1d1a      	adds	r2, r3, #4
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	9203      	str	r2, [sp, #12]
 800c3d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3da:	3402      	adds	r4, #2
 800c3dc:	9305      	str	r3, [sp, #20]
 800c3de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4b4 <_vfiprintf_r+0x22c>
 800c3e2:	7821      	ldrb	r1, [r4, #0]
 800c3e4:	2203      	movs	r2, #3
 800c3e6:	4650      	mov	r0, sl
 800c3e8:	f7f3 ff12 	bl	8000210 <memchr>
 800c3ec:	b138      	cbz	r0, 800c3fe <_vfiprintf_r+0x176>
 800c3ee:	9b04      	ldr	r3, [sp, #16]
 800c3f0:	eba0 000a 	sub.w	r0, r0, sl
 800c3f4:	2240      	movs	r2, #64	@ 0x40
 800c3f6:	4082      	lsls	r2, r0
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	3401      	adds	r4, #1
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c402:	4829      	ldr	r0, [pc, #164]	@ (800c4a8 <_vfiprintf_r+0x220>)
 800c404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c408:	2206      	movs	r2, #6
 800c40a:	f7f3 ff01 	bl	8000210 <memchr>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d03f      	beq.n	800c492 <_vfiprintf_r+0x20a>
 800c412:	4b26      	ldr	r3, [pc, #152]	@ (800c4ac <_vfiprintf_r+0x224>)
 800c414:	bb1b      	cbnz	r3, 800c45e <_vfiprintf_r+0x1d6>
 800c416:	9b03      	ldr	r3, [sp, #12]
 800c418:	3307      	adds	r3, #7
 800c41a:	f023 0307 	bic.w	r3, r3, #7
 800c41e:	3308      	adds	r3, #8
 800c420:	9303      	str	r3, [sp, #12]
 800c422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c424:	443b      	add	r3, r7
 800c426:	9309      	str	r3, [sp, #36]	@ 0x24
 800c428:	e76a      	b.n	800c300 <_vfiprintf_r+0x78>
 800c42a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c42e:	460c      	mov	r4, r1
 800c430:	2001      	movs	r0, #1
 800c432:	e7a8      	b.n	800c386 <_vfiprintf_r+0xfe>
 800c434:	2300      	movs	r3, #0
 800c436:	3401      	adds	r4, #1
 800c438:	9305      	str	r3, [sp, #20]
 800c43a:	4619      	mov	r1, r3
 800c43c:	f04f 0c0a 	mov.w	ip, #10
 800c440:	4620      	mov	r0, r4
 800c442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c446:	3a30      	subs	r2, #48	@ 0x30
 800c448:	2a09      	cmp	r2, #9
 800c44a:	d903      	bls.n	800c454 <_vfiprintf_r+0x1cc>
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0c6      	beq.n	800c3de <_vfiprintf_r+0x156>
 800c450:	9105      	str	r1, [sp, #20]
 800c452:	e7c4      	b.n	800c3de <_vfiprintf_r+0x156>
 800c454:	fb0c 2101 	mla	r1, ip, r1, r2
 800c458:	4604      	mov	r4, r0
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7f0      	b.n	800c440 <_vfiprintf_r+0x1b8>
 800c45e:	ab03      	add	r3, sp, #12
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	462a      	mov	r2, r5
 800c464:	4b12      	ldr	r3, [pc, #72]	@ (800c4b0 <_vfiprintf_r+0x228>)
 800c466:	a904      	add	r1, sp, #16
 800c468:	4630      	mov	r0, r6
 800c46a:	f7fd fbcb 	bl	8009c04 <_printf_float>
 800c46e:	4607      	mov	r7, r0
 800c470:	1c78      	adds	r0, r7, #1
 800c472:	d1d6      	bne.n	800c422 <_vfiprintf_r+0x19a>
 800c474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c476:	07d9      	lsls	r1, r3, #31
 800c478:	d405      	bmi.n	800c486 <_vfiprintf_r+0x1fe>
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	059a      	lsls	r2, r3, #22
 800c47e:	d402      	bmi.n	800c486 <_vfiprintf_r+0x1fe>
 800c480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c482:	f7fe f92b 	bl	800a6dc <__retarget_lock_release_recursive>
 800c486:	89ab      	ldrh	r3, [r5, #12]
 800c488:	065b      	lsls	r3, r3, #25
 800c48a:	f53f af1f 	bmi.w	800c2cc <_vfiprintf_r+0x44>
 800c48e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c490:	e71e      	b.n	800c2d0 <_vfiprintf_r+0x48>
 800c492:	ab03      	add	r3, sp, #12
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	462a      	mov	r2, r5
 800c498:	4b05      	ldr	r3, [pc, #20]	@ (800c4b0 <_vfiprintf_r+0x228>)
 800c49a:	a904      	add	r1, sp, #16
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7fd fe49 	bl	800a134 <_printf_i>
 800c4a2:	e7e4      	b.n	800c46e <_vfiprintf_r+0x1e6>
 800c4a4:	08020860 	.word	0x08020860
 800c4a8:	0802086a 	.word	0x0802086a
 800c4ac:	08009c05 	.word	0x08009c05
 800c4b0:	0800c265 	.word	0x0800c265
 800c4b4:	08020866 	.word	0x08020866

0800c4b8 <__swbuf_r>:
 800c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ba:	460e      	mov	r6, r1
 800c4bc:	4614      	mov	r4, r2
 800c4be:	4605      	mov	r5, r0
 800c4c0:	b118      	cbz	r0, 800c4ca <__swbuf_r+0x12>
 800c4c2:	6a03      	ldr	r3, [r0, #32]
 800c4c4:	b90b      	cbnz	r3, 800c4ca <__swbuf_r+0x12>
 800c4c6:	f7fd ffe1 	bl	800a48c <__sinit>
 800c4ca:	69a3      	ldr	r3, [r4, #24]
 800c4cc:	60a3      	str	r3, [r4, #8]
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	071a      	lsls	r2, r3, #28
 800c4d2:	d501      	bpl.n	800c4d8 <__swbuf_r+0x20>
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	b943      	cbnz	r3, 800c4ea <__swbuf_r+0x32>
 800c4d8:	4621      	mov	r1, r4
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f000 f82a 	bl	800c534 <__swsetup_r>
 800c4e0:	b118      	cbz	r0, 800c4ea <__swbuf_r+0x32>
 800c4e2:	f04f 37ff 	mov.w	r7, #4294967295
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	6922      	ldr	r2, [r4, #16]
 800c4ee:	1a98      	subs	r0, r3, r2
 800c4f0:	6963      	ldr	r3, [r4, #20]
 800c4f2:	b2f6      	uxtb	r6, r6
 800c4f4:	4283      	cmp	r3, r0
 800c4f6:	4637      	mov	r7, r6
 800c4f8:	dc05      	bgt.n	800c506 <__swbuf_r+0x4e>
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f7ff fd99 	bl	800c034 <_fflush_r>
 800c502:	2800      	cmp	r0, #0
 800c504:	d1ed      	bne.n	800c4e2 <__swbuf_r+0x2a>
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	3b01      	subs	r3, #1
 800c50a:	60a3      	str	r3, [r4, #8]
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	1c5a      	adds	r2, r3, #1
 800c510:	6022      	str	r2, [r4, #0]
 800c512:	701e      	strb	r6, [r3, #0]
 800c514:	6962      	ldr	r2, [r4, #20]
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	429a      	cmp	r2, r3
 800c51a:	d004      	beq.n	800c526 <__swbuf_r+0x6e>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	07db      	lsls	r3, r3, #31
 800c520:	d5e1      	bpl.n	800c4e6 <__swbuf_r+0x2e>
 800c522:	2e0a      	cmp	r6, #10
 800c524:	d1df      	bne.n	800c4e6 <__swbuf_r+0x2e>
 800c526:	4621      	mov	r1, r4
 800c528:	4628      	mov	r0, r5
 800c52a:	f7ff fd83 	bl	800c034 <_fflush_r>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d0d9      	beq.n	800c4e6 <__swbuf_r+0x2e>
 800c532:	e7d6      	b.n	800c4e2 <__swbuf_r+0x2a>

0800c534 <__swsetup_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4b29      	ldr	r3, [pc, #164]	@ (800c5dc <__swsetup_r+0xa8>)
 800c538:	4605      	mov	r5, r0
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	460c      	mov	r4, r1
 800c53e:	b118      	cbz	r0, 800c548 <__swsetup_r+0x14>
 800c540:	6a03      	ldr	r3, [r0, #32]
 800c542:	b90b      	cbnz	r3, 800c548 <__swsetup_r+0x14>
 800c544:	f7fd ffa2 	bl	800a48c <__sinit>
 800c548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54c:	0719      	lsls	r1, r3, #28
 800c54e:	d422      	bmi.n	800c596 <__swsetup_r+0x62>
 800c550:	06da      	lsls	r2, r3, #27
 800c552:	d407      	bmi.n	800c564 <__swsetup_r+0x30>
 800c554:	2209      	movs	r2, #9
 800c556:	602a      	str	r2, [r5, #0]
 800c558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	e033      	b.n	800c5cc <__swsetup_r+0x98>
 800c564:	0758      	lsls	r0, r3, #29
 800c566:	d512      	bpl.n	800c58e <__swsetup_r+0x5a>
 800c568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c56a:	b141      	cbz	r1, 800c57e <__swsetup_r+0x4a>
 800c56c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c570:	4299      	cmp	r1, r3
 800c572:	d002      	beq.n	800c57a <__swsetup_r+0x46>
 800c574:	4628      	mov	r0, r5
 800c576:	f7fe feff 	bl	800b378 <_free_r>
 800c57a:	2300      	movs	r3, #0
 800c57c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c57e:	89a3      	ldrh	r3, [r4, #12]
 800c580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c584:	81a3      	strh	r3, [r4, #12]
 800c586:	2300      	movs	r3, #0
 800c588:	6063      	str	r3, [r4, #4]
 800c58a:	6923      	ldr	r3, [r4, #16]
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	89a3      	ldrh	r3, [r4, #12]
 800c590:	f043 0308 	orr.w	r3, r3, #8
 800c594:	81a3      	strh	r3, [r4, #12]
 800c596:	6923      	ldr	r3, [r4, #16]
 800c598:	b94b      	cbnz	r3, 800c5ae <__swsetup_r+0x7a>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c5a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5a4:	d003      	beq.n	800c5ae <__swsetup_r+0x7a>
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f000 f883 	bl	800c6b4 <__smakebuf_r>
 800c5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b2:	f013 0201 	ands.w	r2, r3, #1
 800c5b6:	d00a      	beq.n	800c5ce <__swsetup_r+0x9a>
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	60a2      	str	r2, [r4, #8]
 800c5bc:	6962      	ldr	r2, [r4, #20]
 800c5be:	4252      	negs	r2, r2
 800c5c0:	61a2      	str	r2, [r4, #24]
 800c5c2:	6922      	ldr	r2, [r4, #16]
 800c5c4:	b942      	cbnz	r2, 800c5d8 <__swsetup_r+0xa4>
 800c5c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c5ca:	d1c5      	bne.n	800c558 <__swsetup_r+0x24>
 800c5cc:	bd38      	pop	{r3, r4, r5, pc}
 800c5ce:	0799      	lsls	r1, r3, #30
 800c5d0:	bf58      	it	pl
 800c5d2:	6962      	ldrpl	r2, [r4, #20]
 800c5d4:	60a2      	str	r2, [r4, #8]
 800c5d6:	e7f4      	b.n	800c5c2 <__swsetup_r+0x8e>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	e7f7      	b.n	800c5cc <__swsetup_r+0x98>
 800c5dc:	20000018 	.word	0x20000018

0800c5e0 <_raise_r>:
 800c5e0:	291f      	cmp	r1, #31
 800c5e2:	b538      	push	{r3, r4, r5, lr}
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	d904      	bls.n	800c5f4 <_raise_r+0x14>
 800c5ea:	2316      	movs	r3, #22
 800c5ec:	6003      	str	r3, [r0, #0]
 800c5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c5f6:	b112      	cbz	r2, 800c5fe <_raise_r+0x1e>
 800c5f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5fc:	b94b      	cbnz	r3, 800c612 <_raise_r+0x32>
 800c5fe:	4628      	mov	r0, r5
 800c600:	f000 f830 	bl	800c664 <_getpid_r>
 800c604:	4622      	mov	r2, r4
 800c606:	4601      	mov	r1, r0
 800c608:	4628      	mov	r0, r5
 800c60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c60e:	f000 b817 	b.w	800c640 <_kill_r>
 800c612:	2b01      	cmp	r3, #1
 800c614:	d00a      	beq.n	800c62c <_raise_r+0x4c>
 800c616:	1c59      	adds	r1, r3, #1
 800c618:	d103      	bne.n	800c622 <_raise_r+0x42>
 800c61a:	2316      	movs	r3, #22
 800c61c:	6003      	str	r3, [r0, #0]
 800c61e:	2001      	movs	r0, #1
 800c620:	e7e7      	b.n	800c5f2 <_raise_r+0x12>
 800c622:	2100      	movs	r1, #0
 800c624:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c628:	4620      	mov	r0, r4
 800c62a:	4798      	blx	r3
 800c62c:	2000      	movs	r0, #0
 800c62e:	e7e0      	b.n	800c5f2 <_raise_r+0x12>

0800c630 <raise>:
 800c630:	4b02      	ldr	r3, [pc, #8]	@ (800c63c <raise+0xc>)
 800c632:	4601      	mov	r1, r0
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	f7ff bfd3 	b.w	800c5e0 <_raise_r>
 800c63a:	bf00      	nop
 800c63c:	20000018 	.word	0x20000018

0800c640 <_kill_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4d07      	ldr	r5, [pc, #28]	@ (800c660 <_kill_r+0x20>)
 800c644:	2300      	movs	r3, #0
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	4611      	mov	r1, r2
 800c64c:	602b      	str	r3, [r5, #0]
 800c64e:	f7f6 fae7 	bl	8002c20 <_kill>
 800c652:	1c43      	adds	r3, r0, #1
 800c654:	d102      	bne.n	800c65c <_kill_r+0x1c>
 800c656:	682b      	ldr	r3, [r5, #0]
 800c658:	b103      	cbz	r3, 800c65c <_kill_r+0x1c>
 800c65a:	6023      	str	r3, [r4, #0]
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
 800c65e:	bf00      	nop
 800c660:	20018e68 	.word	0x20018e68

0800c664 <_getpid_r>:
 800c664:	f7f6 bad4 	b.w	8002c10 <_getpid>

0800c668 <__swhatbuf_r>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	460c      	mov	r4, r1
 800c66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c670:	2900      	cmp	r1, #0
 800c672:	b096      	sub	sp, #88	@ 0x58
 800c674:	4615      	mov	r5, r2
 800c676:	461e      	mov	r6, r3
 800c678:	da0d      	bge.n	800c696 <__swhatbuf_r+0x2e>
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c680:	f04f 0100 	mov.w	r1, #0
 800c684:	bf14      	ite	ne
 800c686:	2340      	movne	r3, #64	@ 0x40
 800c688:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c68c:	2000      	movs	r0, #0
 800c68e:	6031      	str	r1, [r6, #0]
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	b016      	add	sp, #88	@ 0x58
 800c694:	bd70      	pop	{r4, r5, r6, pc}
 800c696:	466a      	mov	r2, sp
 800c698:	f000 f848 	bl	800c72c <_fstat_r>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	dbec      	blt.n	800c67a <__swhatbuf_r+0x12>
 800c6a0:	9901      	ldr	r1, [sp, #4]
 800c6a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6aa:	4259      	negs	r1, r3
 800c6ac:	4159      	adcs	r1, r3
 800c6ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6b2:	e7eb      	b.n	800c68c <__swhatbuf_r+0x24>

0800c6b4 <__smakebuf_r>:
 800c6b4:	898b      	ldrh	r3, [r1, #12]
 800c6b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6b8:	079d      	lsls	r5, r3, #30
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	460c      	mov	r4, r1
 800c6be:	d507      	bpl.n	800c6d0 <__smakebuf_r+0x1c>
 800c6c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	6123      	str	r3, [r4, #16]
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	6163      	str	r3, [r4, #20]
 800c6cc:	b003      	add	sp, #12
 800c6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6d0:	ab01      	add	r3, sp, #4
 800c6d2:	466a      	mov	r2, sp
 800c6d4:	f7ff ffc8 	bl	800c668 <__swhatbuf_r>
 800c6d8:	9f00      	ldr	r7, [sp, #0]
 800c6da:	4605      	mov	r5, r0
 800c6dc:	4639      	mov	r1, r7
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7fe febe 	bl	800b460 <_malloc_r>
 800c6e4:	b948      	cbnz	r0, 800c6fa <__smakebuf_r+0x46>
 800c6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ea:	059a      	lsls	r2, r3, #22
 800c6ec:	d4ee      	bmi.n	800c6cc <__smakebuf_r+0x18>
 800c6ee:	f023 0303 	bic.w	r3, r3, #3
 800c6f2:	f043 0302 	orr.w	r3, r3, #2
 800c6f6:	81a3      	strh	r3, [r4, #12]
 800c6f8:	e7e2      	b.n	800c6c0 <__smakebuf_r+0xc>
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	6020      	str	r0, [r4, #0]
 800c6fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c702:	81a3      	strh	r3, [r4, #12]
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c70a:	b15b      	cbz	r3, 800c724 <__smakebuf_r+0x70>
 800c70c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c710:	4630      	mov	r0, r6
 800c712:	f000 f81d 	bl	800c750 <_isatty_r>
 800c716:	b128      	cbz	r0, 800c724 <__smakebuf_r+0x70>
 800c718:	89a3      	ldrh	r3, [r4, #12]
 800c71a:	f023 0303 	bic.w	r3, r3, #3
 800c71e:	f043 0301 	orr.w	r3, r3, #1
 800c722:	81a3      	strh	r3, [r4, #12]
 800c724:	89a3      	ldrh	r3, [r4, #12]
 800c726:	431d      	orrs	r5, r3
 800c728:	81a5      	strh	r5, [r4, #12]
 800c72a:	e7cf      	b.n	800c6cc <__smakebuf_r+0x18>

0800c72c <_fstat_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4d07      	ldr	r5, [pc, #28]	@ (800c74c <_fstat_r+0x20>)
 800c730:	2300      	movs	r3, #0
 800c732:	4604      	mov	r4, r0
 800c734:	4608      	mov	r0, r1
 800c736:	4611      	mov	r1, r2
 800c738:	602b      	str	r3, [r5, #0]
 800c73a:	f7f6 fad1 	bl	8002ce0 <_fstat>
 800c73e:	1c43      	adds	r3, r0, #1
 800c740:	d102      	bne.n	800c748 <_fstat_r+0x1c>
 800c742:	682b      	ldr	r3, [r5, #0]
 800c744:	b103      	cbz	r3, 800c748 <_fstat_r+0x1c>
 800c746:	6023      	str	r3, [r4, #0]
 800c748:	bd38      	pop	{r3, r4, r5, pc}
 800c74a:	bf00      	nop
 800c74c:	20018e68 	.word	0x20018e68

0800c750 <_isatty_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4d06      	ldr	r5, [pc, #24]	@ (800c76c <_isatty_r+0x1c>)
 800c754:	2300      	movs	r3, #0
 800c756:	4604      	mov	r4, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	602b      	str	r3, [r5, #0]
 800c75c:	f7f6 fad0 	bl	8002d00 <_isatty>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_isatty_r+0x1a>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	b103      	cbz	r3, 800c76a <_isatty_r+0x1a>
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	20018e68 	.word	0x20018e68

0800c770 <hypot>:
 800c770:	b508      	push	{r3, lr}
 800c772:	ed2d 8b06 	vpush	{d8-d10}
 800c776:	eeb0 aa40 	vmov.f32	s20, s0
 800c77a:	eef0 aa60 	vmov.f32	s21, s1
 800c77e:	eeb0 9a41 	vmov.f32	s18, s2
 800c782:	eef0 9a61 	vmov.f32	s19, s3
 800c786:	f000 f9d3 	bl	800cb30 <__ieee754_hypot>
 800c78a:	eeb0 8a40 	vmov.f32	s16, s0
 800c78e:	eef0 8a60 	vmov.f32	s17, s1
 800c792:	f000 f9c1 	bl	800cb18 <finite>
 800c796:	b998      	cbnz	r0, 800c7c0 <hypot+0x50>
 800c798:	eeb0 0a4a 	vmov.f32	s0, s20
 800c79c:	eef0 0a6a 	vmov.f32	s1, s21
 800c7a0:	f000 f9ba 	bl	800cb18 <finite>
 800c7a4:	b160      	cbz	r0, 800c7c0 <hypot+0x50>
 800c7a6:	eeb0 0a49 	vmov.f32	s0, s18
 800c7aa:	eef0 0a69 	vmov.f32	s1, s19
 800c7ae:	f000 f9b3 	bl	800cb18 <finite>
 800c7b2:	b128      	cbz	r0, 800c7c0 <hypot+0x50>
 800c7b4:	f7fd ff66 	bl	800a684 <__errno>
 800c7b8:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800c7d0 <hypot+0x60>
 800c7bc:	2322      	movs	r3, #34	@ 0x22
 800c7be:	6003      	str	r3, [r0, #0]
 800c7c0:	eeb0 0a48 	vmov.f32	s0, s16
 800c7c4:	eef0 0a68 	vmov.f32	s1, s17
 800c7c8:	ecbd 8b06 	vpop	{d8-d10}
 800c7cc:	bd08      	pop	{r3, pc}
 800c7ce:	bf00      	nop
 800c7d0:	00000000 	.word	0x00000000
 800c7d4:	7ff00000 	.word	0x7ff00000

0800c7d8 <atan>:
 800c7d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7dc:	ec55 4b10 	vmov	r4, r5, d0
 800c7e0:	4bbf      	ldr	r3, [pc, #764]	@ (800cae0 <atan+0x308>)
 800c7e2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c7e6:	429e      	cmp	r6, r3
 800c7e8:	46ab      	mov	fp, r5
 800c7ea:	d918      	bls.n	800c81e <atan+0x46>
 800c7ec:	4bbd      	ldr	r3, [pc, #756]	@ (800cae4 <atan+0x30c>)
 800c7ee:	429e      	cmp	r6, r3
 800c7f0:	d801      	bhi.n	800c7f6 <atan+0x1e>
 800c7f2:	d109      	bne.n	800c808 <atan+0x30>
 800c7f4:	b144      	cbz	r4, 800c808 <atan+0x30>
 800c7f6:	4622      	mov	r2, r4
 800c7f8:	462b      	mov	r3, r5
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7f3 fd65 	bl	80002cc <__adddf3>
 800c802:	4604      	mov	r4, r0
 800c804:	460d      	mov	r5, r1
 800c806:	e006      	b.n	800c816 <atan+0x3e>
 800c808:	f1bb 0f00 	cmp.w	fp, #0
 800c80c:	f340 812b 	ble.w	800ca66 <atan+0x28e>
 800c810:	a597      	add	r5, pc, #604	@ (adr r5, 800ca70 <atan+0x298>)
 800c812:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c816:	ec45 4b10 	vmov	d0, r4, r5
 800c81a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81e:	4bb2      	ldr	r3, [pc, #712]	@ (800cae8 <atan+0x310>)
 800c820:	429e      	cmp	r6, r3
 800c822:	d813      	bhi.n	800c84c <atan+0x74>
 800c824:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c828:	429e      	cmp	r6, r3
 800c82a:	d80c      	bhi.n	800c846 <atan+0x6e>
 800c82c:	a392      	add	r3, pc, #584	@ (adr r3, 800ca78 <atan+0x2a0>)
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	4620      	mov	r0, r4
 800c834:	4629      	mov	r1, r5
 800c836:	f7f3 fd49 	bl	80002cc <__adddf3>
 800c83a:	4bac      	ldr	r3, [pc, #688]	@ (800caec <atan+0x314>)
 800c83c:	2200      	movs	r2, #0
 800c83e:	f7f4 f98b 	bl	8000b58 <__aeabi_dcmpgt>
 800c842:	2800      	cmp	r0, #0
 800c844:	d1e7      	bne.n	800c816 <atan+0x3e>
 800c846:	f04f 3aff 	mov.w	sl, #4294967295
 800c84a:	e029      	b.n	800c8a0 <atan+0xc8>
 800c84c:	f000 f95c 	bl	800cb08 <fabs>
 800c850:	4ba7      	ldr	r3, [pc, #668]	@ (800caf0 <atan+0x318>)
 800c852:	429e      	cmp	r6, r3
 800c854:	ec55 4b10 	vmov	r4, r5, d0
 800c858:	f200 80bc 	bhi.w	800c9d4 <atan+0x1fc>
 800c85c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c860:	429e      	cmp	r6, r3
 800c862:	f200 809e 	bhi.w	800c9a2 <atan+0x1ca>
 800c866:	4622      	mov	r2, r4
 800c868:	462b      	mov	r3, r5
 800c86a:	4620      	mov	r0, r4
 800c86c:	4629      	mov	r1, r5
 800c86e:	f7f3 fd2d 	bl	80002cc <__adddf3>
 800c872:	4b9e      	ldr	r3, [pc, #632]	@ (800caec <atan+0x314>)
 800c874:	2200      	movs	r2, #0
 800c876:	f7f3 fd27 	bl	80002c8 <__aeabi_dsub>
 800c87a:	2200      	movs	r2, #0
 800c87c:	4606      	mov	r6, r0
 800c87e:	460f      	mov	r7, r1
 800c880:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c884:	4620      	mov	r0, r4
 800c886:	4629      	mov	r1, r5
 800c888:	f7f3 fd20 	bl	80002cc <__adddf3>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f3 fffa 	bl	800088c <__aeabi_ddiv>
 800c898:	f04f 0a00 	mov.w	sl, #0
 800c89c:	4604      	mov	r4, r0
 800c89e:	460d      	mov	r5, r1
 800c8a0:	4622      	mov	r2, r4
 800c8a2:	462b      	mov	r3, r5
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	f7f3 fec6 	bl	8000638 <__aeabi_dmul>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4680      	mov	r8, r0
 800c8b2:	4689      	mov	r9, r1
 800c8b4:	f7f3 fec0 	bl	8000638 <__aeabi_dmul>
 800c8b8:	a371      	add	r3, pc, #452	@ (adr r3, 800ca80 <atan+0x2a8>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	f7f3 feb9 	bl	8000638 <__aeabi_dmul>
 800c8c6:	a370      	add	r3, pc, #448	@ (adr r3, 800ca88 <atan+0x2b0>)
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	f7f3 fcfe 	bl	80002cc <__adddf3>
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	463b      	mov	r3, r7
 800c8d4:	f7f3 feb0 	bl	8000638 <__aeabi_dmul>
 800c8d8:	a36d      	add	r3, pc, #436	@ (adr r3, 800ca90 <atan+0x2b8>)
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	f7f3 fcf5 	bl	80002cc <__adddf3>
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	f7f3 fea7 	bl	8000638 <__aeabi_dmul>
 800c8ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800ca98 <atan+0x2c0>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f7f3 fcec 	bl	80002cc <__adddf3>
 800c8f4:	4632      	mov	r2, r6
 800c8f6:	463b      	mov	r3, r7
 800c8f8:	f7f3 fe9e 	bl	8000638 <__aeabi_dmul>
 800c8fc:	a368      	add	r3, pc, #416	@ (adr r3, 800caa0 <atan+0x2c8>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	f7f3 fce3 	bl	80002cc <__adddf3>
 800c906:	4632      	mov	r2, r6
 800c908:	463b      	mov	r3, r7
 800c90a:	f7f3 fe95 	bl	8000638 <__aeabi_dmul>
 800c90e:	a366      	add	r3, pc, #408	@ (adr r3, 800caa8 <atan+0x2d0>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	f7f3 fcda 	bl	80002cc <__adddf3>
 800c918:	4642      	mov	r2, r8
 800c91a:	464b      	mov	r3, r9
 800c91c:	f7f3 fe8c 	bl	8000638 <__aeabi_dmul>
 800c920:	a363      	add	r3, pc, #396	@ (adr r3, 800cab0 <atan+0x2d8>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	4680      	mov	r8, r0
 800c928:	4689      	mov	r9, r1
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 fe83 	bl	8000638 <__aeabi_dmul>
 800c932:	a361      	add	r3, pc, #388	@ (adr r3, 800cab8 <atan+0x2e0>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f7f3 fcc6 	bl	80002c8 <__aeabi_dsub>
 800c93c:	4632      	mov	r2, r6
 800c93e:	463b      	mov	r3, r7
 800c940:	f7f3 fe7a 	bl	8000638 <__aeabi_dmul>
 800c944:	a35e      	add	r3, pc, #376	@ (adr r3, 800cac0 <atan+0x2e8>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	f7f3 fcbd 	bl	80002c8 <__aeabi_dsub>
 800c94e:	4632      	mov	r2, r6
 800c950:	463b      	mov	r3, r7
 800c952:	f7f3 fe71 	bl	8000638 <__aeabi_dmul>
 800c956:	a35c      	add	r3, pc, #368	@ (adr r3, 800cac8 <atan+0x2f0>)
 800c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95c:	f7f3 fcb4 	bl	80002c8 <__aeabi_dsub>
 800c960:	4632      	mov	r2, r6
 800c962:	463b      	mov	r3, r7
 800c964:	f7f3 fe68 	bl	8000638 <__aeabi_dmul>
 800c968:	a359      	add	r3, pc, #356	@ (adr r3, 800cad0 <atan+0x2f8>)
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	f7f3 fcab 	bl	80002c8 <__aeabi_dsub>
 800c972:	4632      	mov	r2, r6
 800c974:	463b      	mov	r3, r7
 800c976:	f7f3 fe5f 	bl	8000638 <__aeabi_dmul>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4640      	mov	r0, r8
 800c980:	4649      	mov	r1, r9
 800c982:	f7f3 fca3 	bl	80002cc <__adddf3>
 800c986:	4622      	mov	r2, r4
 800c988:	462b      	mov	r3, r5
 800c98a:	f7f3 fe55 	bl	8000638 <__aeabi_dmul>
 800c98e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	d148      	bne.n	800ca2a <atan+0x252>
 800c998:	4620      	mov	r0, r4
 800c99a:	4629      	mov	r1, r5
 800c99c:	f7f3 fc94 	bl	80002c8 <__aeabi_dsub>
 800c9a0:	e72f      	b.n	800c802 <atan+0x2a>
 800c9a2:	4b52      	ldr	r3, [pc, #328]	@ (800caec <atan+0x314>)
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	f7f3 fc8d 	bl	80002c8 <__aeabi_dsub>
 800c9ae:	4b4f      	ldr	r3, [pc, #316]	@ (800caec <atan+0x314>)
 800c9b0:	4606      	mov	r6, r0
 800c9b2:	460f      	mov	r7, r1
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	f7f3 fc87 	bl	80002cc <__adddf3>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	f7f3 ff61 	bl	800088c <__aeabi_ddiv>
 800c9ca:	f04f 0a01 	mov.w	sl, #1
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	460d      	mov	r5, r1
 800c9d2:	e765      	b.n	800c8a0 <atan+0xc8>
 800c9d4:	4b47      	ldr	r3, [pc, #284]	@ (800caf4 <atan+0x31c>)
 800c9d6:	429e      	cmp	r6, r3
 800c9d8:	d21c      	bcs.n	800ca14 <atan+0x23c>
 800c9da:	4b47      	ldr	r3, [pc, #284]	@ (800caf8 <atan+0x320>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	4620      	mov	r0, r4
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	f7f3 fc71 	bl	80002c8 <__aeabi_dsub>
 800c9e6:	4b44      	ldr	r3, [pc, #272]	@ (800caf8 <atan+0x320>)
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	460f      	mov	r7, r1
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	f7f3 fe21 	bl	8000638 <__aeabi_dmul>
 800c9f6:	4b3d      	ldr	r3, [pc, #244]	@ (800caec <atan+0x314>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f7f3 fc67 	bl	80002cc <__adddf3>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f3 ff41 	bl	800088c <__aeabi_ddiv>
 800ca0a:	f04f 0a02 	mov.w	sl, #2
 800ca0e:	4604      	mov	r4, r0
 800ca10:	460d      	mov	r5, r1
 800ca12:	e745      	b.n	800c8a0 <atan+0xc8>
 800ca14:	4622      	mov	r2, r4
 800ca16:	462b      	mov	r3, r5
 800ca18:	4938      	ldr	r1, [pc, #224]	@ (800cafc <atan+0x324>)
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	f7f3 ff36 	bl	800088c <__aeabi_ddiv>
 800ca20:	f04f 0a03 	mov.w	sl, #3
 800ca24:	4604      	mov	r4, r0
 800ca26:	460d      	mov	r5, r1
 800ca28:	e73a      	b.n	800c8a0 <atan+0xc8>
 800ca2a:	4b35      	ldr	r3, [pc, #212]	@ (800cb00 <atan+0x328>)
 800ca2c:	4e35      	ldr	r6, [pc, #212]	@ (800cb04 <atan+0x32c>)
 800ca2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	f7f3 fc47 	bl	80002c8 <__aeabi_dsub>
 800ca3a:	4622      	mov	r2, r4
 800ca3c:	462b      	mov	r3, r5
 800ca3e:	f7f3 fc43 	bl	80002c8 <__aeabi_dsub>
 800ca42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ca4e:	f7f3 fc3b 	bl	80002c8 <__aeabi_dsub>
 800ca52:	f1bb 0f00 	cmp.w	fp, #0
 800ca56:	4604      	mov	r4, r0
 800ca58:	460d      	mov	r5, r1
 800ca5a:	f6bf aedc 	bge.w	800c816 <atan+0x3e>
 800ca5e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca62:	461d      	mov	r5, r3
 800ca64:	e6d7      	b.n	800c816 <atan+0x3e>
 800ca66:	a51c      	add	r5, pc, #112	@ (adr r5, 800cad8 <atan+0x300>)
 800ca68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca6c:	e6d3      	b.n	800c816 <atan+0x3e>
 800ca6e:	bf00      	nop
 800ca70:	54442d18 	.word	0x54442d18
 800ca74:	3ff921fb 	.word	0x3ff921fb
 800ca78:	8800759c 	.word	0x8800759c
 800ca7c:	7e37e43c 	.word	0x7e37e43c
 800ca80:	e322da11 	.word	0xe322da11
 800ca84:	3f90ad3a 	.word	0x3f90ad3a
 800ca88:	24760deb 	.word	0x24760deb
 800ca8c:	3fa97b4b 	.word	0x3fa97b4b
 800ca90:	a0d03d51 	.word	0xa0d03d51
 800ca94:	3fb10d66 	.word	0x3fb10d66
 800ca98:	c54c206e 	.word	0xc54c206e
 800ca9c:	3fb745cd 	.word	0x3fb745cd
 800caa0:	920083ff 	.word	0x920083ff
 800caa4:	3fc24924 	.word	0x3fc24924
 800caa8:	5555550d 	.word	0x5555550d
 800caac:	3fd55555 	.word	0x3fd55555
 800cab0:	2c6a6c2f 	.word	0x2c6a6c2f
 800cab4:	bfa2b444 	.word	0xbfa2b444
 800cab8:	52defd9a 	.word	0x52defd9a
 800cabc:	3fadde2d 	.word	0x3fadde2d
 800cac0:	af749a6d 	.word	0xaf749a6d
 800cac4:	3fb3b0f2 	.word	0x3fb3b0f2
 800cac8:	fe231671 	.word	0xfe231671
 800cacc:	3fbc71c6 	.word	0x3fbc71c6
 800cad0:	9998ebc4 	.word	0x9998ebc4
 800cad4:	3fc99999 	.word	0x3fc99999
 800cad8:	54442d18 	.word	0x54442d18
 800cadc:	bff921fb 	.word	0xbff921fb
 800cae0:	440fffff 	.word	0x440fffff
 800cae4:	7ff00000 	.word	0x7ff00000
 800cae8:	3fdbffff 	.word	0x3fdbffff
 800caec:	3ff00000 	.word	0x3ff00000
 800caf0:	3ff2ffff 	.word	0x3ff2ffff
 800caf4:	40038000 	.word	0x40038000
 800caf8:	3ff80000 	.word	0x3ff80000
 800cafc:	bff00000 	.word	0xbff00000
 800cb00:	080209b8 	.word	0x080209b8
 800cb04:	080209d8 	.word	0x080209d8

0800cb08 <fabs>:
 800cb08:	ec51 0b10 	vmov	r0, r1, d0
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cb12:	ec43 2b10 	vmov	d0, r2, r3
 800cb16:	4770      	bx	lr

0800cb18 <finite>:
 800cb18:	b082      	sub	sp, #8
 800cb1a:	ed8d 0b00 	vstr	d0, [sp]
 800cb1e:	9801      	ldr	r0, [sp, #4]
 800cb20:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800cb24:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800cb28:	0fc0      	lsrs	r0, r0, #31
 800cb2a:	b002      	add	sp, #8
 800cb2c:	4770      	bx	lr
	...

0800cb30 <__ieee754_hypot>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	ec51 0b10 	vmov	r0, r1, d0
 800cb38:	ec53 2b11 	vmov	r2, r3, d1
 800cb3c:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800cb40:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800cb44:	42a5      	cmp	r5, r4
 800cb46:	b087      	sub	sp, #28
 800cb48:	da05      	bge.n	800cb56 <__ieee754_hypot+0x26>
 800cb4a:	462e      	mov	r6, r5
 800cb4c:	4625      	mov	r5, r4
 800cb4e:	4634      	mov	r4, r6
 800cb50:	4606      	mov	r6, r0
 800cb52:	4610      	mov	r0, r2
 800cb54:	4632      	mov	r2, r6
 800cb56:	1b2b      	subs	r3, r5, r4
 800cb58:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4682      	mov	sl, r0
 800cb60:	46ab      	mov	fp, r5
 800cb62:	4616      	mov	r6, r2
 800cb64:	4627      	mov	r7, r4
 800cb66:	dd05      	ble.n	800cb74 <__ieee754_hypot+0x44>
 800cb68:	4623      	mov	r3, r4
 800cb6a:	f7f3 fbaf 	bl	80002cc <__adddf3>
 800cb6e:	4682      	mov	sl, r0
 800cb70:	468b      	mov	fp, r1
 800cb72:	e016      	b.n	800cba2 <__ieee754_hypot+0x72>
 800cb74:	4b75      	ldr	r3, [pc, #468]	@ (800cd4c <__ieee754_hypot+0x21c>)
 800cb76:	429d      	cmp	r5, r3
 800cb78:	f340 8096 	ble.w	800cca8 <__ieee754_hypot+0x178>
 800cb7c:	4b74      	ldr	r3, [pc, #464]	@ (800cd50 <__ieee754_hypot+0x220>)
 800cb7e:	429d      	cmp	r5, r3
 800cb80:	dd14      	ble.n	800cbac <__ieee754_hypot+0x7c>
 800cb82:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cb86:	4305      	orrs	r5, r0
 800cb88:	d004      	beq.n	800cb94 <__ieee754_hypot+0x64>
 800cb8a:	4623      	mov	r3, r4
 800cb8c:	f7f3 fb9e 	bl	80002cc <__adddf3>
 800cb90:	4682      	mov	sl, r0
 800cb92:	468b      	mov	fp, r1
 800cb94:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800cb98:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800cb9c:	4334      	orrs	r4, r6
 800cb9e:	f000 80d2 	beq.w	800cd46 <__ieee754_hypot+0x216>
 800cba2:	ec4b ab10 	vmov	d0, sl, fp
 800cba6:	b007      	add	sp, #28
 800cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbac:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800cbb0:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800cbb4:	46ab      	mov	fp, r5
 800cbb6:	4627      	mov	r7, r4
 800cbb8:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	4b65      	ldr	r3, [pc, #404]	@ (800cd54 <__ieee754_hypot+0x224>)
 800cbc0:	429c      	cmp	r4, r3
 800cbc2:	dc19      	bgt.n	800cbf8 <__ieee754_hypot+0xc8>
 800cbc4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800cbc8:	da70      	bge.n	800ccac <__ieee754_hypot+0x17c>
 800cbca:	4633      	mov	r3, r6
 800cbcc:	4323      	orrs	r3, r4
 800cbce:	d0e8      	beq.n	800cba2 <__ieee754_hypot+0x72>
 800cbd0:	4b61      	ldr	r3, [pc, #388]	@ (800cd58 <__ieee754_hypot+0x228>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	f7f3 fd2e 	bl	8000638 <__aeabi_dmul>
 800cbdc:	4b5e      	ldr	r3, [pc, #376]	@ (800cd58 <__ieee754_hypot+0x228>)
 800cbde:	4606      	mov	r6, r0
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	4650      	mov	r0, sl
 800cbe4:	4659      	mov	r1, fp
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f7f3 fd26 	bl	8000638 <__aeabi_dmul>
 800cbec:	9b01      	ldr	r3, [sp, #4]
 800cbee:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800cbf2:	4682      	mov	sl, r0
 800cbf4:	468b      	mov	fp, r1
 800cbf6:	9301      	str	r3, [sp, #4]
 800cbf8:	4632      	mov	r2, r6
 800cbfa:	463b      	mov	r3, r7
 800cbfc:	4650      	mov	r0, sl
 800cbfe:	4659      	mov	r1, fp
 800cc00:	f7f3 fb62 	bl	80002c8 <__aeabi_dsub>
 800cc04:	4602      	mov	r2, r0
 800cc06:	460b      	mov	r3, r1
 800cc08:	4680      	mov	r8, r0
 800cc0a:	4689      	mov	r9, r1
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	4639      	mov	r1, r7
 800cc10:	f7f3 ff84 	bl	8000b1c <__aeabi_dcmplt>
 800cc14:	2200      	movs	r2, #0
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d053      	beq.n	800ccc2 <__ieee754_hypot+0x192>
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	4629      	mov	r1, r5
 800cc20:	4614      	mov	r4, r2
 800cc22:	f7f3 fd09 	bl	8000638 <__aeabi_dmul>
 800cc26:	4632      	mov	r2, r6
 800cc28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc2c:	463b      	mov	r3, r7
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800cc34:	f7f3 fd00 	bl	8000638 <__aeabi_dmul>
 800cc38:	4622      	mov	r2, r4
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	460f      	mov	r7, r1
 800cc3e:	462b      	mov	r3, r5
 800cc40:	4650      	mov	r0, sl
 800cc42:	4659      	mov	r1, fp
 800cc44:	f7f3 fb42 	bl	80002cc <__adddf3>
 800cc48:	4622      	mov	r2, r4
 800cc4a:	4680      	mov	r8, r0
 800cc4c:	4689      	mov	r9, r1
 800cc4e:	462b      	mov	r3, r5
 800cc50:	4650      	mov	r0, sl
 800cc52:	4659      	mov	r1, fp
 800cc54:	f7f3 fb38 	bl	80002c8 <__aeabi_dsub>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4640      	mov	r0, r8
 800cc5e:	4649      	mov	r1, r9
 800cc60:	f7f3 fcea 	bl	8000638 <__aeabi_dmul>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4630      	mov	r0, r6
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	f7f3 fb2c 	bl	80002c8 <__aeabi_dsub>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc78:	f7f3 fb26 	bl	80002c8 <__aeabi_dsub>
 800cc7c:	ec41 0b10 	vmov	d0, r0, r1
 800cc80:	f000 f86c 	bl	800cd5c <__ieee754_sqrt>
 800cc84:	9b01      	ldr	r3, [sp, #4]
 800cc86:	ec5b ab10 	vmov	sl, fp, d0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d089      	beq.n	800cba2 <__ieee754_hypot+0x72>
 800cc8e:	051b      	lsls	r3, r3, #20
 800cc90:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cc94:	2000      	movs	r0, #0
 800cc96:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	4650      	mov	r0, sl
 800cca0:	4659      	mov	r1, fp
 800cca2:	f7f3 fcc9 	bl	8000638 <__aeabi_dmul>
 800cca6:	e762      	b.n	800cb6e <__ieee754_hypot+0x3e>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	e787      	b.n	800cbbc <__ieee754_hypot+0x8c>
 800ccac:	9b01      	ldr	r3, [sp, #4]
 800ccae:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800ccb2:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800ccb6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800ccba:	9301      	str	r3, [sp, #4]
 800ccbc:	46ab      	mov	fp, r5
 800ccbe:	4627      	mov	r7, r4
 800ccc0:	e79a      	b.n	800cbf8 <__ieee754_hypot+0xc8>
 800ccc2:	4623      	mov	r3, r4
 800ccc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800ccd2:	4614      	mov	r4, r2
 800ccd4:	461d      	mov	r5, r3
 800ccd6:	f7f3 fcaf 	bl	8000638 <__aeabi_dmul>
 800ccda:	4642      	mov	r2, r8
 800ccdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cce0:	464b      	mov	r3, r9
 800cce2:	4640      	mov	r0, r8
 800cce4:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800cce8:	f7f3 fca6 	bl	8000638 <__aeabi_dmul>
 800ccec:	4652      	mov	r2, sl
 800ccee:	465b      	mov	r3, fp
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	4689      	mov	r9, r1
 800ccf4:	4650      	mov	r0, sl
 800ccf6:	4659      	mov	r1, fp
 800ccf8:	f7f3 fae8 	bl	80002cc <__adddf3>
 800ccfc:	4622      	mov	r2, r4
 800ccfe:	462b      	mov	r3, r5
 800cd00:	f7f3 fae2 	bl	80002c8 <__aeabi_dsub>
 800cd04:	4632      	mov	r2, r6
 800cd06:	463b      	mov	r3, r7
 800cd08:	f7f3 fc96 	bl	8000638 <__aeabi_dmul>
 800cd0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd10:	4682      	mov	sl, r0
 800cd12:	468b      	mov	fp, r1
 800cd14:	4630      	mov	r0, r6
 800cd16:	4639      	mov	r1, r7
 800cd18:	f7f3 fad6 	bl	80002c8 <__aeabi_dsub>
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	462b      	mov	r3, r5
 800cd20:	f7f3 fc8a 	bl	8000638 <__aeabi_dmul>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	4650      	mov	r0, sl
 800cd2a:	4659      	mov	r1, fp
 800cd2c:	f7f3 face 	bl	80002cc <__adddf3>
 800cd30:	4602      	mov	r2, r0
 800cd32:	460b      	mov	r3, r1
 800cd34:	4640      	mov	r0, r8
 800cd36:	4649      	mov	r1, r9
 800cd38:	f7f3 fac6 	bl	80002c8 <__aeabi_dsub>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd44:	e798      	b.n	800cc78 <__ieee754_hypot+0x148>
 800cd46:	46b2      	mov	sl, r6
 800cd48:	46bb      	mov	fp, r7
 800cd4a:	e72a      	b.n	800cba2 <__ieee754_hypot+0x72>
 800cd4c:	5f300000 	.word	0x5f300000
 800cd50:	7fefffff 	.word	0x7fefffff
 800cd54:	20afffff 	.word	0x20afffff
 800cd58:	7fd00000 	.word	0x7fd00000

0800cd5c <__ieee754_sqrt>:
 800cd5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	4a68      	ldr	r2, [pc, #416]	@ (800cf04 <__ieee754_sqrt+0x1a8>)
 800cd62:	ec55 4b10 	vmov	r4, r5, d0
 800cd66:	43aa      	bics	r2, r5
 800cd68:	462b      	mov	r3, r5
 800cd6a:	4621      	mov	r1, r4
 800cd6c:	d110      	bne.n	800cd90 <__ieee754_sqrt+0x34>
 800cd6e:	4622      	mov	r2, r4
 800cd70:	4620      	mov	r0, r4
 800cd72:	4629      	mov	r1, r5
 800cd74:	f7f3 fc60 	bl	8000638 <__aeabi_dmul>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	4629      	mov	r1, r5
 800cd80:	f7f3 faa4 	bl	80002cc <__adddf3>
 800cd84:	4604      	mov	r4, r0
 800cd86:	460d      	mov	r5, r1
 800cd88:	ec45 4b10 	vmov	d0, r4, r5
 800cd8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd90:	2d00      	cmp	r5, #0
 800cd92:	dc0e      	bgt.n	800cdb2 <__ieee754_sqrt+0x56>
 800cd94:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cd98:	4322      	orrs	r2, r4
 800cd9a:	d0f5      	beq.n	800cd88 <__ieee754_sqrt+0x2c>
 800cd9c:	b19d      	cbz	r5, 800cdc6 <__ieee754_sqrt+0x6a>
 800cd9e:	4622      	mov	r2, r4
 800cda0:	4620      	mov	r0, r4
 800cda2:	4629      	mov	r1, r5
 800cda4:	f7f3 fa90 	bl	80002c8 <__aeabi_dsub>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	460b      	mov	r3, r1
 800cdac:	f7f3 fd6e 	bl	800088c <__aeabi_ddiv>
 800cdb0:	e7e8      	b.n	800cd84 <__ieee754_sqrt+0x28>
 800cdb2:	152a      	asrs	r2, r5, #20
 800cdb4:	d115      	bne.n	800cde2 <__ieee754_sqrt+0x86>
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	e009      	b.n	800cdce <__ieee754_sqrt+0x72>
 800cdba:	0acb      	lsrs	r3, r1, #11
 800cdbc:	3a15      	subs	r2, #21
 800cdbe:	0549      	lsls	r1, r1, #21
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0fa      	beq.n	800cdba <__ieee754_sqrt+0x5e>
 800cdc4:	e7f7      	b.n	800cdb6 <__ieee754_sqrt+0x5a>
 800cdc6:	462a      	mov	r2, r5
 800cdc8:	e7fa      	b.n	800cdc0 <__ieee754_sqrt+0x64>
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	3001      	adds	r0, #1
 800cdce:	02dc      	lsls	r4, r3, #11
 800cdd0:	d5fb      	bpl.n	800cdca <__ieee754_sqrt+0x6e>
 800cdd2:	1e44      	subs	r4, r0, #1
 800cdd4:	1b12      	subs	r2, r2, r4
 800cdd6:	f1c0 0420 	rsb	r4, r0, #32
 800cdda:	fa21 f404 	lsr.w	r4, r1, r4
 800cdde:	4323      	orrs	r3, r4
 800cde0:	4081      	lsls	r1, r0
 800cde2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cde6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cdea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdee:	07d2      	lsls	r2, r2, #31
 800cdf0:	bf5c      	itt	pl
 800cdf2:	005b      	lslpl	r3, r3, #1
 800cdf4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cdf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdfc:	bf58      	it	pl
 800cdfe:	0049      	lslpl	r1, r1, #1
 800ce00:	2600      	movs	r6, #0
 800ce02:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ce06:	106d      	asrs	r5, r5, #1
 800ce08:	0049      	lsls	r1, r1, #1
 800ce0a:	2016      	movs	r0, #22
 800ce0c:	4632      	mov	r2, r6
 800ce0e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ce12:	1917      	adds	r7, r2, r4
 800ce14:	429f      	cmp	r7, r3
 800ce16:	bfde      	ittt	le
 800ce18:	193a      	addle	r2, r7, r4
 800ce1a:	1bdb      	suble	r3, r3, r7
 800ce1c:	1936      	addle	r6, r6, r4
 800ce1e:	0fcf      	lsrs	r7, r1, #31
 800ce20:	3801      	subs	r0, #1
 800ce22:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ce26:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce2a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ce2e:	d1f0      	bne.n	800ce12 <__ieee754_sqrt+0xb6>
 800ce30:	4604      	mov	r4, r0
 800ce32:	2720      	movs	r7, #32
 800ce34:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	eb00 0e0c 	add.w	lr, r0, ip
 800ce3e:	db02      	blt.n	800ce46 <__ieee754_sqrt+0xea>
 800ce40:	d113      	bne.n	800ce6a <__ieee754_sqrt+0x10e>
 800ce42:	458e      	cmp	lr, r1
 800ce44:	d811      	bhi.n	800ce6a <__ieee754_sqrt+0x10e>
 800ce46:	f1be 0f00 	cmp.w	lr, #0
 800ce4a:	eb0e 000c 	add.w	r0, lr, ip
 800ce4e:	da42      	bge.n	800ced6 <__ieee754_sqrt+0x17a>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	db40      	blt.n	800ced6 <__ieee754_sqrt+0x17a>
 800ce54:	f102 0801 	add.w	r8, r2, #1
 800ce58:	1a9b      	subs	r3, r3, r2
 800ce5a:	458e      	cmp	lr, r1
 800ce5c:	bf88      	it	hi
 800ce5e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ce62:	eba1 010e 	sub.w	r1, r1, lr
 800ce66:	4464      	add	r4, ip
 800ce68:	4642      	mov	r2, r8
 800ce6a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ce6e:	3f01      	subs	r7, #1
 800ce70:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ce74:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce78:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ce7c:	d1dc      	bne.n	800ce38 <__ieee754_sqrt+0xdc>
 800ce7e:	4319      	orrs	r1, r3
 800ce80:	d01b      	beq.n	800ceba <__ieee754_sqrt+0x15e>
 800ce82:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cf08 <__ieee754_sqrt+0x1ac>
 800ce86:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cf0c <__ieee754_sqrt+0x1b0>
 800ce8a:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce8e:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce92:	f7f3 fa19 	bl	80002c8 <__aeabi_dsub>
 800ce96:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	4640      	mov	r0, r8
 800cea0:	4649      	mov	r1, r9
 800cea2:	f7f3 fe45 	bl	8000b30 <__aeabi_dcmple>
 800cea6:	b140      	cbz	r0, 800ceba <__ieee754_sqrt+0x15e>
 800cea8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ceac:	e9da 0100 	ldrd	r0, r1, [sl]
 800ceb0:	e9db 2300 	ldrd	r2, r3, [fp]
 800ceb4:	d111      	bne.n	800ceda <__ieee754_sqrt+0x17e>
 800ceb6:	3601      	adds	r6, #1
 800ceb8:	463c      	mov	r4, r7
 800ceba:	1072      	asrs	r2, r6, #1
 800cebc:	0863      	lsrs	r3, r4, #1
 800cebe:	07f1      	lsls	r1, r6, #31
 800cec0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cec4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cec8:	bf48      	it	mi
 800ceca:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cece:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ced2:	4618      	mov	r0, r3
 800ced4:	e756      	b.n	800cd84 <__ieee754_sqrt+0x28>
 800ced6:	4690      	mov	r8, r2
 800ced8:	e7be      	b.n	800ce58 <__ieee754_sqrt+0xfc>
 800ceda:	f7f3 f9f7 	bl	80002cc <__adddf3>
 800cede:	e9da 8900 	ldrd	r8, r9, [sl]
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	4640      	mov	r0, r8
 800cee8:	4649      	mov	r1, r9
 800ceea:	f7f3 fe17 	bl	8000b1c <__aeabi_dcmplt>
 800ceee:	b120      	cbz	r0, 800cefa <__ieee754_sqrt+0x19e>
 800cef0:	1ca0      	adds	r0, r4, #2
 800cef2:	bf08      	it	eq
 800cef4:	3601      	addeq	r6, #1
 800cef6:	3402      	adds	r4, #2
 800cef8:	e7df      	b.n	800ceba <__ieee754_sqrt+0x15e>
 800cefa:	1c63      	adds	r3, r4, #1
 800cefc:	f023 0401 	bic.w	r4, r3, #1
 800cf00:	e7db      	b.n	800ceba <__ieee754_sqrt+0x15e>
 800cf02:	bf00      	nop
 800cf04:	7ff00000 	.word	0x7ff00000
 800cf08:	200001e0 	.word	0x200001e0
 800cf0c:	200001d8 	.word	0x200001d8

0800cf10 <_init>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	bf00      	nop
 800cf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf16:	bc08      	pop	{r3}
 800cf18:	469e      	mov	lr, r3
 800cf1a:	4770      	bx	lr

0800cf1c <_fini>:
 800cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1e:	bf00      	nop
 800cf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf22:	bc08      	pop	{r3}
 800cf24:	469e      	mov	lr, r3
 800cf26:	4770      	bx	lr
