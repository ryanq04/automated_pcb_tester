
Automated_Circuit_Tester_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000139f0  0800d978  0800d978  0000e978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021368  08021368  000231e8  2**0
                  CONTENTS
  4 .ARM          00000008  08021368  08021368  00022368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021370  08021370  000231e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021370  08021370  00022370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021374  08021374  00022374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08021378  00023000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001dc90  200001e8  08021560  000231e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001de78  08021560  00023e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000231e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bec9  00000000  00000000  00023218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b9  00000000  00000000  0003f0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  000431a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104e  00000000  00000000  00044768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027627  00000000  00000000  000457b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f504  00000000  00000000  0006cddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e58ee  00000000  00000000  0008c2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00171bcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c2c  00000000  00000000  00171c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001788b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a79  00000000  00000000  00178939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  0017b3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d960 	.word	0x0800d960

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800d960 	.word	0x0800d960

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96a 	b.w	8001034 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	460c      	mov	r4, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14e      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d84:	4694      	mov	ip, r2
 8000d86:	458c      	cmp	ip, r1
 8000d88:	4686      	mov	lr, r0
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	d962      	bls.n	8000e56 <__udivmoddi4+0xde>
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	4091      	lsls	r1, r2
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	4319      	orrs	r1, r3
 8000da2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f f68c 	uxth.w	r6, ip
 8000dae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb04 f106 	mul.w	r1, r4, r6
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dce:	f080 8112 	bcs.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 810f 	bls.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd8:	3c02      	subs	r4, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	fa1f f38e 	uxth.w	r3, lr
 8000de2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f606 	mul.w	r6, r0, r6
 8000df2:	429e      	cmp	r6, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x94>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfe:	f080 80fc 	bcs.w	8000ffa <__udivmoddi4+0x282>
 8000e02:	429e      	cmp	r6, r3
 8000e04:	f240 80f9 	bls.w	8000ffa <__udivmoddi4+0x282>
 8000e08:	4463      	add	r3, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11d      	cbz	r5, 8000e1e <__udivmoddi4+0xa6>
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d905      	bls.n	8000e32 <__udivmoddi4+0xba>
 8000e26:	b10d      	cbz	r5, 8000e2c <__udivmoddi4+0xb4>
 8000e28:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e7f5      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e32:	fab3 f183 	clz	r1, r3
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d146      	bne.n	8000ec8 <__udivmoddi4+0x150>
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0xcc>
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	f0c0 80f0 	bcc.w	8001024 <__udivmoddi4+0x2ac>
 8000e44:	1a86      	subs	r6, r0, r2
 8000e46:	eb64 0303 	sbc.w	r3, r4, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d0e6      	beq.n	8000e1e <__udivmoddi4+0xa6>
 8000e50:	e9c5 6300 	strd	r6, r3, [r5]
 8000e54:	e7e3      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 8090 	bne.w	8000f7c <__udivmoddi4+0x204>
 8000e5c:	eba1 040c 	sub.w	r4, r1, ip
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa1f f78c 	uxth.w	r7, ip
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e72:	fb08 4416 	mls	r4, r8, r6, r4
 8000e76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e7a:	fb07 f006 	mul.w	r0, r7, r6
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x11c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x11a>
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	f200 80cd 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e92:	4626      	mov	r6, r4
 8000e94:	1a1c      	subs	r4, r3, r0
 8000e96:	fa1f f38e 	uxth.w	r3, lr
 8000e9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb00 f707 	mul.w	r7, r0, r7
 8000eaa:	429f      	cmp	r7, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x148>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x146>
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	f200 80b0 	bhi.w	800101e <__udivmoddi4+0x2a6>
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	1bdb      	subs	r3, r3, r7
 8000ec2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0x9c>
 8000ec8:	f1c1 0620 	rsb	r6, r1, #32
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	fa22 f706 	lsr.w	r7, r2, r6
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed8:	fa04 f301 	lsl.w	r3, r4, r1
 8000edc:	ea43 030c 	orr.w	r3, r3, ip
 8000ee0:	40f4      	lsrs	r4, r6
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	0c38      	lsrs	r0, r7, #16
 8000ee8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eec:	fbb4 fef0 	udiv	lr, r4, r0
 8000ef0:	fa1f fc87 	uxth.w	ip, r7
 8000ef4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efc:	fb0e f90c 	mul.w	r9, lr, ip
 8000f00:	45a1      	cmp	r9, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x1a6>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0e:	f080 8084 	bcs.w	800101a <__udivmoddi4+0x2a2>
 8000f12:	45a1      	cmp	r9, r4
 8000f14:	f240 8081 	bls.w	800101a <__udivmoddi4+0x2a2>
 8000f18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	eba4 0409 	sub.w	r4, r4, r9
 8000f22:	fa1f f983 	uxth.w	r9, r3
 8000f26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x1d2>
 8000f3a:	193c      	adds	r4, r7, r4
 8000f3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f40:	d267      	bcs.n	8001012 <__udivmoddi4+0x29a>
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0x29a>
 8000f46:	3b02      	subs	r3, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f52:	eba4 040c 	sub.w	r4, r4, ip
 8000f56:	429c      	cmp	r4, r3
 8000f58:	46ce      	mov	lr, r9
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	d351      	bcc.n	8001002 <__udivmoddi4+0x28a>
 8000f5e:	d04e      	beq.n	8000ffe <__udivmoddi4+0x286>
 8000f60:	b155      	cbz	r5, 8000f78 <__udivmoddi4+0x200>
 8000f62:	ebb8 030e 	subs.w	r3, r8, lr
 8000f66:	eb64 040c 	sbc.w	r4, r4, ip
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	431e      	orrs	r6, r3
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	e9c5 6400 	strd	r6, r4, [r5]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	e750      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000f7c:	f1c2 0320 	rsb	r3, r2, #32
 8000f80:	fa20 f103 	lsr.w	r1, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa24 f303 	lsr.w	r3, r4, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	430c      	orrs	r4, r1
 8000f90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f98:	fa1f f78c 	uxth.w	r7, ip
 8000f9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa4:	0c23      	lsrs	r3, r4, #16
 8000fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000faa:	fb00 f107 	mul.w	r1, r0, r7
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x24c>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fba:	d22c      	bcs.n	8001016 <__udivmoddi4+0x29e>
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d92a      	bls.n	8001016 <__udivmoddi4+0x29e>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fcc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd4:	fb01 f307 	mul.w	r3, r1, r7
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x276>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe4:	d213      	bcs.n	800100e <__udivmoddi4+0x296>
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	d911      	bls.n	800100e <__udivmoddi4+0x296>
 8000fea:	3902      	subs	r1, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	1ae4      	subs	r4, r4, r3
 8000ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff4:	e739      	b.n	8000e6a <__udivmoddi4+0xf2>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	e6f0      	b.n	8000ddc <__udivmoddi4+0x64>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e706      	b.n	8000e0c <__udivmoddi4+0x94>
 8000ffe:	45c8      	cmp	r8, r9
 8001000:	d2ae      	bcs.n	8000f60 <__udivmoddi4+0x1e8>
 8001002:	ebb9 0e02 	subs.w	lr, r9, r2
 8001006:	eb63 0c07 	sbc.w	ip, r3, r7
 800100a:	3801      	subs	r0, #1
 800100c:	e7a8      	b.n	8000f60 <__udivmoddi4+0x1e8>
 800100e:	4631      	mov	r1, r6
 8001010:	e7ed      	b.n	8000fee <__udivmoddi4+0x276>
 8001012:	4603      	mov	r3, r0
 8001014:	e799      	b.n	8000f4a <__udivmoddi4+0x1d2>
 8001016:	4630      	mov	r0, r6
 8001018:	e7d4      	b.n	8000fc4 <__udivmoddi4+0x24c>
 800101a:	46d6      	mov	lr, sl
 800101c:	e77f      	b.n	8000f1e <__udivmoddi4+0x1a6>
 800101e:	4463      	add	r3, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e74d      	b.n	8000ec0 <__udivmoddi4+0x148>
 8001024:	4606      	mov	r6, r0
 8001026:	4623      	mov	r3, r4
 8001028:	4608      	mov	r0, r1
 800102a:	e70f      	b.n	8000e4c <__udivmoddi4+0xd4>
 800102c:	3e02      	subs	r6, #2
 800102e:	4463      	add	r3, ip
 8001030:	e730      	b.n	8000e94 <__udivmoddi4+0x11c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <computeCoeffs>:
#include "adc_fft.h"


//get the frequency components and store them to reuse in the globals input_FFT (freq) and output_FFT (mag)
void computeCoeffs(float output_FFT[FFT_BUFFER_SIZE]) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    for (int i = 0, fIndex = 0; i < FFT_BUFFER_SIZE; i += 2, fIndex++) {
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	e03b      	b.n	80010c2 <computeCoeffs+0x8a>
        float real = output_FFT[i];
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	617b      	str	r3, [r7, #20]
        float imag = output_FFT[i + 1];
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
        float mag = fabs(sqrtf(real * real + imag * imag));
 8001064:	edd7 7a05 	vldr	s15, [r7, #20]
 8001068:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800106c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001070:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	f00c fa54 	bl	800d528 <sqrtf>
 8001080:	ed87 0a03 	vstr	s0, [r7, #12]

        // Overwrite input/output FFT arrays with freq/mag
        input_FFT[fIndex] = ((float) fIndex * SAMPLE_RATE_HZ / (float) FFT_BUFFER_SIZE);
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010d8 <computeCoeffs+0xa0>
 8001092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001096:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80010dc <computeCoeffs+0xa4>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <computeCoeffs+0xa8>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edc3 7a00 	vstr	s15, [r3]
        output_FFT[fIndex] = mag;
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	601a      	str	r2, [r3, #0]
    for (int i = 0, fIndex = 0; i < FFT_BUFFER_SIZE; i += 2, fIndex++) {
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3302      	adds	r3, #2
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	3301      	adds	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010c8:	dbbf      	blt.n	800104a <computeCoeffs+0x12>
    }
		
		sendFFT_ready = 1;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <computeCoeffs+0xac>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	49742400 	.word	0x49742400
 80010dc:	45000000 	.word	0x45000000
 80010e0:	2000154c 	.word	0x2000154c
 80010e4:	20001549 	.word	0x20001549

080010e8 <sendADC_UART>:


void sendADC_UART() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
    const char *preamble = "ADC\r\n";
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <sendADC_UART+0x38>)
 80010f0:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)preamble, strlen(preamble), HAL_MAX_DELAY);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f93c 	bl	8000370 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4808      	ldr	r0, [pc, #32]	@ (8001124 <sendADC_UART+0x3c>)
 8001104:	f007 fa0a 	bl	800851c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t *)adc_buffer, sizeof(adc_buffer), HAL_MAX_DELAY);
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001110:	4905      	ldr	r1, [pc, #20]	@ (8001128 <sendADC_UART+0x40>)
 8001112:	4804      	ldr	r0, [pc, #16]	@ (8001124 <sendADC_UART+0x3c>)
 8001114:	f007 fa02 	bl	800851c <HAL_UART_Transmit>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	0800d978 	.word	0x0800d978
 8001124:	20000500 	.word	0x20000500
 8001128:	20000548 	.word	0x20000548

0800112c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
   if (hadc->Instance == ADC1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <HAL_ADC_ConvCpltCallback+0x28>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d106      	bne.n	800114c <HAL_ADC_ConvCpltCallback+0x20>
    {
      // adc_buffer is now full
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800113e:	2101      	movs	r1, #1
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001142:	f004 ff14 	bl	8005f6e <HAL_GPIO_TogglePin>
			ADC_full = 1;
 8001146:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_ADC_ConvCpltCallback+0x30>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
    }
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40012000 	.word	0x40012000
 8001158:	40020400 	.word	0x40020400
 800115c:	20001548 	.word	0x20001548

08001160 <sendFFT_UART>:


void sendFFT_UART() {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
		if(sendFFT_ready == 1){
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <sendFFT_UART+0x58>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d11f      	bne.n	80011ae <sendFFT_UART+0x4e>
			//note that this ensures that the input and output buffers are Hz/Mag after compute coeffs. 
			sendFFT_ready = 0;
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <sendFFT_UART+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
			const char *preamble = "FFT\r\n";
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <sendFFT_UART+0x5c>)
 8001176:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3, (uint8_t *)preamble, strlen(preamble), HAL_MAX_DELAY);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff f8f9 	bl	8000370 <strlen>
 800117e:	4603      	mov	r3, r0
 8001180:	b29a      	uxth	r2, r3
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <sendFFT_UART+0x60>)
 800118a:	f007 f9c7 	bl	800851c <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart3, (uint8_t *)input_FFT, (FFT_BUFFER_SIZE / 2) * sizeof(float), HAL_MAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001196:	490b      	ldr	r1, [pc, #44]	@ (80011c4 <sendFFT_UART+0x64>)
 8001198:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <sendFFT_UART+0x60>)
 800119a:	f007 f9bf 	bl	800851c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)output_FFT, (FFT_BUFFER_SIZE / 2) * sizeof(float), HAL_MAX_DELAY);
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <sendFFT_UART+0x68>)
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <sendFFT_UART+0x60>)
 80011aa:	f007 f9b7 	bl	800851c <HAL_UART_Transmit>
		}
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20001549 	.word	0x20001549
 80011bc:	0800d980 	.word	0x0800d980
 80011c0:	20000500 	.word	0x20000500
 80011c4:	2000154c 	.word	0x2000154c
 80011c8:	2000354c 	.word	0x2000354c

080011cc <print_bb>:
extern uint8_t send_ptr[FRAMESIZE * 2];
extern uint8_t dma_flag;


void print_buf(void);
void print_bb(uint8_t *byte_ptr){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09e      	sub	sp, #120	@ 0x78
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	char msg[100];
	sprintf(msg, "\n***The following is data for my byte buffer\n");
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4922      	ldr	r1, [pc, #136]	@ (8001264 <print_bb+0x98>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 fe92 	bl	800af04 <siprintf>
	print_msg(msg);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f90b 	bl	8001400 <print_msg>
	int ct = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	677b      	str	r3, [r7, #116]	@ 0x74
	for(int i = 0; i < BUFFER_SIZE * 2; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80011f2:	e02d      	b.n	8001250 <print_bb+0x84>
		if(i % 174 == 0){
 80011f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <print_bb+0x9c>)
 80011f8:	fb83 1302 	smull	r1, r3, r3, r2
 80011fc:	1159      	asrs	r1, r3, #5
 80011fe:	17d3      	asrs	r3, r2, #31
 8001200:	1acb      	subs	r3, r1, r3
 8001202:	21ae      	movs	r1, #174	@ 0xae
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <print_bb+0x5e>
			sprintf(msg, "\n%d***\n", ct++);
 800120e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	677a      	str	r2, [r7, #116]	@ 0x74
 8001214:	f107 000c 	add.w	r0, r7, #12
 8001218:	461a      	mov	r2, r3
 800121a:	4914      	ldr	r1, [pc, #80]	@ (800126c <print_bb+0xa0>)
 800121c:	f009 fe72 	bl	800af04 <siprintf>
			print_msg(msg);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f8eb 	bl	8001400 <print_msg>
		}
		sprintf(msg, "%02X ", byte_ptr[i]);
 800122a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	490d      	ldr	r1, [pc, #52]	@ (8001270 <print_bb+0xa4>)
 800123a:	4618      	mov	r0, r3
 800123c:	f009 fe62 	bl	800af04 <siprintf>
		print_msg(msg);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f8db 	bl	8001400 <print_msg>
	for(int i = 0; i < BUFFER_SIZE * 2; i++){
 800124a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800124c:	3301      	adds	r3, #1
 800124e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001252:	f24c 32bf 	movw	r2, #50111	@ 0xc3bf
 8001256:	4293      	cmp	r3, r2
 8001258:	ddcc      	ble.n	80011f4 <print_bb+0x28>
	}


}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	3778      	adds	r7, #120	@ 0x78
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800d988 	.word	0x0800d988
 8001268:	2f149903 	.word	0x2f149903
 800126c:	0800d9b8 	.word	0x0800d9b8
 8001270:	0800d9c0 	.word	0x0800d9c0

08001274 <print_sb>:
void print_sb(uint8_t *send_ptr){
 8001274:	b580      	push	{r7, lr}
 8001276:	b09e      	sub	sp, #120	@ 0x78
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	char msg[100];
	sprintf(msg, "***The following is data for my sender buffer\n");
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4922      	ldr	r1, [pc, #136]	@ (800130c <print_sb+0x98>)
 8001282:	4618      	mov	r0, r3
 8001284:	f009 fe3e 	bl	800af04 <siprintf>
	print_msg(msg);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f8b7 	bl	8001400 <print_msg>
	int ct = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	677b      	str	r3, [r7, #116]	@ 0x74
	for(int i = 0; i < BUFFER_SIZE; i++){
 8001296:	2300      	movs	r3, #0
 8001298:	673b      	str	r3, [r7, #112]	@ 0x70
 800129a:	e02d      	b.n	80012f8 <print_sb+0x84>
		if(i % 174 == 0){
 800129c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <print_sb+0x9c>)
 80012a0:	fb83 1302 	smull	r1, r3, r3, r2
 80012a4:	1159      	asrs	r1, r3, #5
 80012a6:	17d3      	asrs	r3, r2, #31
 80012a8:	1acb      	subs	r3, r1, r3
 80012aa:	21ae      	movs	r1, #174	@ 0xae
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <print_sb+0x5e>
			sprintf(msg, "\n%d***\n", ct++);
 80012b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80012bc:	f107 000c 	add.w	r0, r7, #12
 80012c0:	461a      	mov	r2, r3
 80012c2:	4914      	ldr	r1, [pc, #80]	@ (8001314 <print_sb+0xa0>)
 80012c4:	f009 fe1e 	bl	800af04 <siprintf>
			print_msg(msg);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f897 	bl	8001400 <print_msg>
		}
		sprintf(msg, "%02X ", send_ptr[i]);
 80012d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	490d      	ldr	r1, [pc, #52]	@ (8001318 <print_sb+0xa4>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f009 fe0e 	bl	800af04 <siprintf>
		print_msg(msg);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f887 	bl	8001400 <print_msg>
	for(int i = 0; i < BUFFER_SIZE; i++){
 80012f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012f4:	3301      	adds	r3, #1
 80012f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80012f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012fa:	f246 12df 	movw	r2, #25055	@ 0x61df
 80012fe:	4293      	cmp	r3, r2
 8001300:	ddcc      	ble.n	800129c <print_sb+0x28>
	}
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	3778      	adds	r7, #120	@ 0x78
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	0800d9c8 	.word	0x0800d9c8
 8001310:	2f149903 	.word	0x2f149903
 8001314:	0800d9b8 	.word	0x0800d9b8
 8001318:	0800d9c0 	.word	0x0800d9c0

0800131c <send_img>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}
}


void send_img(){
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n"; 
 8001322:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <send_img+0x98>)
 8001324:	463c      	mov	r4, r7
 8001326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001328:	c407      	stmia	r4!, {r0, r1, r2}
 800132a:	8023      	strh	r3, [r4, #0]

	uint8_t* byte_ptr = (uint8_t*)snapshot_buff;
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <send_img+0x9c>)
 800132e:	613b      	str	r3, [r7, #16]

	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8001330:	f24c 33bf 	movw	r3, #50111	@ 0xc3bf
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	e00e      	b.n	800135a <send_img+0x3e>
    	send_ptr[j] = byte_ptr[i];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4413      	add	r3, r2
 8001342:	7819      	ldrb	r1, [r3, #0]
 8001344:	4a1d      	ldr	r2, [pc, #116]	@ (80013bc <send_img+0xa0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4413      	add	r3, r2
 800134a:	460a      	mov	r2, r1
 800134c:	701a      	strb	r2, [r3, #0]
	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b01      	subs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	3301      	adds	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db04      	blt.n	800136a <send_img+0x4e>
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f24c 32be 	movw	r2, #50110	@ 0xc3be
 8001366:	4293      	cmp	r3, r2
 8001368:	dde8      	ble.n	800133c <send_img+0x20>
		} while (0)
	#else
		#define LOG() do { } while (0)
	#endif

	LOG();
 800136a:	6938      	ldr	r0, [r7, #16]
 800136c:	f7ff ff2e 	bl	80011cc <print_bb>
 8001370:	4812      	ldr	r0, [pc, #72]	@ (80013bc <send_img+0xa0>)
 8001372:	f7ff ff7f 	bl	8001274 <print_sb>

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){ 
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e00b      	b.n	8001394 <send_img+0x78>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 800137c:	463a      	mov	r2, r7
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	18d1      	adds	r1, r2, r3
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	2201      	movs	r2, #1
 8001388:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <send_img+0xa4>)
 800138a:	f007 f8c7 	bl	800851c <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){ 
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	ddf0      	ble.n	800137c <send_img+0x60>
	}
	
	// Send image data through serial port.
	
	HAL_UART_Transmit(&huart3, send_ptr, FRAMESIZE*2, HAL_MAX_DELAY);
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	f24c 32c0 	movw	r2, #50112	@ 0xc3c0
 80013a2:	4906      	ldr	r1, [pc, #24]	@ (80013bc <send_img+0xa0>)
 80013a4:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <send_img+0xa4>)
 80013a6:	f007 f8b9 	bl	800851c <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, &send_ptr[FRAMESIZE], FRAMESIZE, HAL_MAX_DELAY);
	
}
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd90      	pop	{r4, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	0800da34 	.word	0x0800da34
 80013b8:	20005564 	.word	0x20005564
 80013bc:	20011924 	.word	0x20011924
 80013c0:	20000500 	.word	0x20000500

080013c4 <p3>:


void p3(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	ov7670_snapshot(snapshot_buff);
 80013c8:	480a      	ldr	r0, [pc, #40]	@ (80013f4 <p3+0x30>)
 80013ca:	f000 ff79 	bl	80022c0 <ov7670_snapshot>
		while(!dma_flag)
 80013ce:	e002      	b.n	80013d6 <p3+0x12>
		{
			HAL_Delay(10);	
 80013d0:	200a      	movs	r0, #10
 80013d2:	f001 fe81 	bl	80030d8 <HAL_Delay>
		while(!dma_flag)
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <p3+0x34>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f8      	beq.n	80013d0 <p3+0xc>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80013de:	2180      	movs	r1, #128	@ 0x80
 80013e0:	4806      	ldr	r0, [pc, #24]	@ (80013fc <p3+0x38>)
 80013e2:	f004 fdc4 	bl	8005f6e <HAL_GPIO_TogglePin>
		dma_flag = 0;
 80013e6:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <p3+0x34>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		//print_ss(); 
		send_img(); 
 80013ec:	f7ff ff96 	bl	800131c <send_img>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20005564 	.word	0x20005564
 80013f8:	2001dce4 	.word	0x2001dce4
 80013fc:	40020400 	.word	0x40020400

08001400 <print_msg>:
#include <string.h>
#include <stdio.h>



void print_msg(char * msg) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7fe ffb1 	bl	8000370 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	b29a      	uxth	r2, r3
 8001412:	2364      	movs	r3, #100	@ 0x64
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4803      	ldr	r0, [pc, #12]	@ (8001424 <print_msg+0x24>)
 8001418:	f007 f880 	bl	800851c <HAL_UART_Transmit>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000500 	.word	0x20000500

08001428 <flashLED>:

void flashLED(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, uint32_t delay_ms, uint8_t toggles) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	461a      	mov	r2, r3
 8001434:	460b      	mov	r3, r1
 8001436:	817b      	strh	r3, [r7, #10]
 8001438:	4613      	mov	r3, r2
 800143a:	727b      	strb	r3, [r7, #9]
    for (uint8_t i = 0; i < toggles; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	75fb      	strb	r3, [r7, #23]
 8001440:	e00a      	b.n	8001458 <flashLED+0x30>
        HAL_GPIO_TogglePin(GPIO_Port, GPIO_Pin);
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f004 fd91 	bl	8005f6e <HAL_GPIO_TogglePin>
        HAL_Delay(delay_ms);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f001 fe43 	bl	80030d8 <HAL_Delay>
    for (uint8_t i = 0; i < toggles; i++) {
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	3301      	adds	r3, #1
 8001456:	75fb      	strb	r3, [r7, #23]
 8001458:	7dfa      	ldrb	r2, [r7, #23]
 800145a:	7a7b      	ldrb	r3, [r7, #9]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3f0      	bcc.n	8001442 <flashLED+0x1a>
    }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	@ 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	2234      	movs	r2, #52	@ 0x34
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f009 fdb5 	bl	800afea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	4b29      	ldr	r3, [pc, #164]	@ (800153c <SystemClock_Config+0xd0>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	4a28      	ldr	r2, [pc, #160]	@ (800153c <SystemClock_Config+0xd0>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <SystemClock_Config+0xd0>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <SystemClock_Config+0xd4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a22      	ldr	r2, [pc, #136]	@ (8001540 <SystemClock_Config+0xd4>)
 80014b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <SystemClock_Config+0xd4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80014d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d2:	2302      	movs	r3, #2
 80014d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014dc:	2304      	movs	r3, #4
 80014de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014e0:	23a8      	movs	r3, #168	@ 0xa8
 80014e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014e8:	2307      	movs	r3, #7
 80014ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 fd71 	bl	8006fdc <HAL_RCC_OscConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001500:	f000 fb70 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001508:	2302      	movs	r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001510:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001514:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2105      	movs	r1, #5
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fa10 	bl	8006948 <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800152e:	f000 fb59 	bl	8001be4 <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3750      	adds	r7, #80	@ 0x50
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 8001558:	4a22      	ldr	r2, [pc, #136]	@ (80015e4 <MX_ADC1_Init+0xa0>)
 800155a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 800155e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001562:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001564:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 8001572:	2200      	movs	r2, #0
 8001574:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 8001580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 8001588:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800158c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 8001596:	2201      	movs	r2, #1
 8001598:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a8:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 80015aa:	f001 fdb9 	bl	8003120 <HAL_ADC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80015b4:	f000 fb16 	bl	8001be4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 80015ca:	f001 ff6b 	bl	80034a4 <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80015d4:	f000 fb06 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000228 	.word	0x20000228
 80015e4:	40012000 	.word	0x40012000

080015e8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
 void MX_DCMI_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <MX_DCMI_Init+0x60>)
 80015ee:	4a17      	ldr	r2, [pc, #92]	@ (800164c <MX_DCMI_Init+0x64>)
 80015f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <MX_DCMI_Init+0x60>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <MX_DCMI_Init+0x60>)
 80015fa:	2220      	movs	r2, #32
 80015fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MX_DCMI_Init+0x60>)
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <MX_DCMI_Init+0x60>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_DCMI_Init+0x60>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <MX_DCMI_Init+0x60>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_DCMI_Init+0x60>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <MX_DCMI_Init+0x60>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_DCMI_Init+0x60>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <MX_DCMI_Init+0x60>)
 800162a:	2200      	movs	r2, #0
 800162c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_DCMI_Init+0x60>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <MX_DCMI_Init+0x60>)
 8001636:	f002 fce9 	bl	800400c <HAL_DCMI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001640:	f000 fad0 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200002d0 	.word	0x200002d0
 800164c:	50050000 	.word	0x50050000

08001650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001656:	4a13      	ldr	r2, [pc, #76]	@ (80016a4 <MX_I2C1_Init+0x54>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_I2C1_Init+0x50>)
 800165c:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <MX_I2C1_Init+0x58>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_I2C1_Init+0x50>)
 800166e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <MX_I2C1_Init+0x50>)
 800168e:	f004 fcad 	bl	8005fec <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001698:	f000 faa4 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000380 	.word	0x20000380
 80016a4:	40005400 	.word	0x40005400
 80016a8:	000186a0 	.word	0x000186a0

080016ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016b2:	4a13      	ldr	r2, [pc, #76]	@ (8001700 <MX_I2C2_Init+0x54>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016b8:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <MX_I2C2_Init+0x58>)
 80016ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <MX_I2C2_Init+0x50>)
 80016ea:	f004 fc7f 	bl	8005fec <HAL_I2C_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016f4:	f000 fa76 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200003d4 	.word	0x200003d4
 8001700:	40005800 	.word	0x40005800
 8001704:	000186a0 	.word	0x000186a0

08001708 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b092      	sub	sp, #72	@ 0x48
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2220      	movs	r2, #32
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f009 fc59 	bl	800afea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001738:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <MX_TIM1_Init+0xfc>)
 800173a:	4a33      	ldr	r2, [pc, #204]	@ (8001808 <MX_TIM1_Init+0x100>)
 800173c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <MX_TIM1_Init+0xfc>)
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <MX_TIM1_Init+0xfc>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 800174a:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <MX_TIM1_Init+0xfc>)
 800174c:	2214      	movs	r2, #20
 800174e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <MX_TIM1_Init+0xfc>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001756:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <MX_TIM1_Init+0xfc>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800175c:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <MX_TIM1_Init+0xfc>)
 800175e:	2280      	movs	r2, #128	@ 0x80
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001762:	4828      	ldr	r0, [pc, #160]	@ (8001804 <MX_TIM1_Init+0xfc>)
 8001764:	f005 ffb7 	bl	80076d6 <HAL_TIM_PWM_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800176e:	f000 fa39 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800177e:	4619      	mov	r1, r3
 8001780:	4820      	ldr	r0, [pc, #128]	@ (8001804 <MX_TIM1_Init+0xfc>)
 8001782:	f006 fd99 	bl	80082b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800178c:	f000 fa2a 	bl	8001be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001790:	2360      	movs	r3, #96	@ 0x60
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 8001794:	230a      	movs	r3, #10
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4813      	ldr	r0, [pc, #76]	@ (8001804 <MX_TIM1_Init+0xfc>)
 80017b6:	f006 f8cd 	bl	8007954 <HAL_TIM_PWM_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80017c0:	f000 fa10 	bl	8001be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM1_Init+0xfc>)
 80017e8:	f006 fde2 	bl	80083b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80017f2:	f000 f9f7 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM1_Init+0xfc>)
 80017f8:	f001 fa02 	bl	8002c00 <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3748      	adds	r7, #72	@ 0x48
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000428 	.word	0x20000428
 8001808:	40010000 	.word	0x40010000

0800180c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800182e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800183e:	2253      	movs	r2, #83	@ 0x53
 8001840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800184e:	4814      	ldr	r0, [pc, #80]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001850:	f005 fe62 	bl	8007518 <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800185a:	f000 f9c3 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4619      	mov	r1, r3
 800186a:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <MX_TIM2_Init+0x94>)
 800186c:	f006 f934 	bl	8007ad8 <HAL_TIM_ConfigClockSource>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001876:	f000 f9b5 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800187a:	2320      	movs	r3, #32
 800187c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <MX_TIM2_Init+0x94>)
 8001888:	f006 fd16 	bl	80082b8 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001892:	f000 f9a7 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000470 	.word	0x20000470

080018a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM6_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <MX_TIM6_Init+0x64>)
 80018b4:	4a15      	ldr	r2, [pc, #84]	@ (800190c <MX_TIM6_Init+0x68>)
 80018b6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <MX_TIM6_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <MX_TIM6_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <MX_TIM6_Init+0x64>)
 80018c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <MX_TIM6_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018d2:	480d      	ldr	r0, [pc, #52]	@ (8001908 <MX_TIM6_Init+0x64>)
 80018d4:	f005 fe20 	bl	8007518 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80018de:	f000 f981 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <MX_TIM6_Init+0x64>)
 80018f0:	f006 fce2 	bl	80082b8 <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80018fa:	f000 f973 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200004b8 	.word	0x200004b8
 800190c:	40001000 	.word	0x40001000

08001910 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 8001916:	4a16      	ldr	r2, [pc, #88]	@ (8001970 <MX_USART3_UART_Init+0x60>)
 8001918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 800191c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b10      	ldr	r3, [pc, #64]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001946:	4809      	ldr	r0, [pc, #36]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 8001948:	f006 fd98 	bl	800847c <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001952:	f000 f947 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <MX_USART3_UART_Init+0x5c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000500 	.word	0x20000500
 8001970:	40004800 	.word	0x40004800

08001974 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
 void MX_USB_OTG_FS_USB_Init(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
 void MX_DMA_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <MX_DMA_Init+0x4c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a0f      	ldr	r2, [pc, #60]	@ (80019d0 <MX_DMA_Init+0x4c>)
 8001994:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <MX_DMA_Init+0x4c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2038      	movs	r0, #56	@ 0x38
 80019ac:	f002 f905 	bl	8003bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019b0:	2038      	movs	r0, #56	@ 0x38
 80019b2:	f002 f91e 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2039      	movs	r0, #57	@ 0x39
 80019bc:	f002 f8fd 	bl	8003bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80019c0:	2039      	movs	r0, #57	@ 0x39
 80019c2:	f002 f916 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	@ 0x38
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	4b77      	ldr	r3, [pc, #476]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a76      	ldr	r2, [pc, #472]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b74      	ldr	r3, [pc, #464]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b6d      	ldr	r3, [pc, #436]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	4b69      	ldr	r3, [pc, #420]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a68      	ldr	r2, [pc, #416]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	4b62      	ldr	r3, [pc, #392]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a61      	ldr	r2, [pc, #388]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a5a      	ldr	r2, [pc, #360]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b54      	ldr	r3, [pc, #336]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a53      	ldr	r2, [pc, #332]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b51      	ldr	r3, [pc, #324]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b4d      	ldr	r3, [pc, #308]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a4c      	ldr	r2, [pc, #304]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b46      	ldr	r3, [pc, #280]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a45      	ldr	r2, [pc, #276]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <MX_GPIO_Init+0x1f8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001ad0:	483f      	ldr	r0, [pc, #252]	@ (8001bd0 <MX_GPIO_Init+0x1fc>)
 8001ad2:	f004 fa33 	bl	8005f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001adc:	483d      	ldr	r0, [pc, #244]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001ade:	f004 fa2d 	bl	8005f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2140      	movs	r1, #64	@ 0x40
 8001ae6:	483c      	ldr	r0, [pc, #240]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001ae8:	f004 fa28 	bl	8005f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b00:	4619      	mov	r1, r3
 8001b02:	4836      	ldr	r0, [pc, #216]	@ (8001bdc <MX_GPIO_Init+0x208>)
 8001b04:	f004 f886 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b08:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	482b      	ldr	r0, [pc, #172]	@ (8001bd0 <MX_GPIO_Init+0x1fc>)
 8001b22:	f004 f877 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b26:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4825      	ldr	r0, [pc, #148]	@ (8001bd4 <MX_GPIO_Init+0x200>)
 8001b40:	f004 f868 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b44:	2340      	movs	r3, #64	@ 0x40
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	481f      	ldr	r0, [pc, #124]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001b5c:	f004 f85a 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4819      	ldr	r0, [pc, #100]	@ (8001bd8 <MX_GPIO_Init+0x204>)
 8001b74:	f004 f84e 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b78:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b92:	4619      	mov	r1, r3
 8001b94:	4812      	ldr	r0, [pc, #72]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001b96:	f004 f83d 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <MX_GPIO_Init+0x20c>)
 8001bb0:	f004 f830 	bl	8005c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2028      	movs	r0, #40	@ 0x28
 8001bba:	f001 fffe 	bl	8003bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bbe:	2028      	movs	r0, #40	@ 0x28
 8001bc0:	f002 f817 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bc4:	bf00      	nop
 8001bc6:	3738      	adds	r7, #56	@ 0x38
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40021400 	.word	0x40021400
 8001bd8:	40021800 	.word	0x40021800
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020000 	.word	0x40020000

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <Error_Handler+0x8>

08001bf0 <HAL_UART_RxCpltCallback>:
float posY = 0.0f;

extern arm_rfft_fast_instance_f32 fftHandler;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    if (!(huart->Instance == USART3)) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8001cec <HAL_UART_RxCpltCallback+0xfc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_UART_RxCpltCallback+0x22>
        flashLED(LD3_GPIO_Port, LD3_Pin, 1000, 5);
 8001c02:	2305      	movs	r3, #5
 8001c04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c0c:	4838      	ldr	r0, [pc, #224]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x100>)
 8001c0e:	f7ff fc0b 	bl	8001428 <flashLED>
    }

    if (current_state == State_Listen) {
 8001c12:	4b38      	ldr	r3, [pc, #224]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x104>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a38      	ldr	r2, [pc, #224]	@ (8001cf8 <HAL_UART_RxCpltCallback+0x108>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d144      	bne.n	8001ca6 <HAL_UART_RxCpltCallback+0xb6>
        
        if (match_command(rx_data_arr, CMD_TAKEPIC)) {
 8001c1c:	4937      	ldr	r1, [pc, #220]	@ (8001cfc <HAL_UART_RxCpltCallback+0x10c>)
 8001c1e:	4838      	ldr	r0, [pc, #224]	@ (8001d00 <HAL_UART_RxCpltCallback+0x110>)
 8001c20:	f000 f934 	bl	8001e8c <match_command>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00f      	beq.n	8001c4a <HAL_UART_RxCpltCallback+0x5a>
        	flashLED(LD2_GPIO_Port, LD2_Pin, 100, 10);
 8001c2a:	230a      	movs	r3, #10
 8001c2c:	2264      	movs	r2, #100	@ 0x64
 8001c2e:	2180      	movs	r1, #128	@ 0x80
 8001c30:	482f      	ldr	r0, [pc, #188]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x100>)
 8001c32:	f7ff fbf9 	bl	8001428 <flashLED>
            current_state = State_Picture; //next state logic
 8001c36:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x104>)
 8001c38:	4a32      	ldr	r2, [pc, #200]	@ (8001d04 <HAL_UART_RxCpltCallback+0x114>)
 8001c3a:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, CMD_TAKEPIC, 8, 100); //ack
 8001c3c:	2364      	movs	r3, #100	@ 0x64
 8001c3e:	2208      	movs	r2, #8
 8001c40:	492e      	ldr	r1, [pc, #184]	@ (8001cfc <HAL_UART_RxCpltCallback+0x10c>)
 8001c42:	4831      	ldr	r0, [pc, #196]	@ (8001d08 <HAL_UART_RxCpltCallback+0x118>)
 8001c44:	f006 fc6a 	bl	800851c <HAL_UART_Transmit>
 8001c48:	e049      	b.n	8001cde <HAL_UART_RxCpltCallback+0xee>

        } else if (match_command(rx_data_arr, CMD_ADCFFT)) {
 8001c4a:	4930      	ldr	r1, [pc, #192]	@ (8001d0c <HAL_UART_RxCpltCallback+0x11c>)
 8001c4c:	482c      	ldr	r0, [pc, #176]	@ (8001d00 <HAL_UART_RxCpltCallback+0x110>)
 8001c4e:	f000 f91d 	bl	8001e8c <match_command>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d009      	beq.n	8001c6c <HAL_UART_RxCpltCallback+0x7c>
            current_state = State_ADC_FFT;
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x104>)
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d10 <HAL_UART_RxCpltCallback+0x120>)
 8001c5c:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
 8001c5e:	2364      	movs	r3, #100	@ 0x64
 8001c60:	2208      	movs	r2, #8
 8001c62:	492a      	ldr	r1, [pc, #168]	@ (8001d0c <HAL_UART_RxCpltCallback+0x11c>)
 8001c64:	4828      	ldr	r0, [pc, #160]	@ (8001d08 <HAL_UART_RxCpltCallback+0x118>)
 8001c66:	f006 fc59 	bl	800851c <HAL_UART_Transmit>
 8001c6a:	e038      	b.n	8001cde <HAL_UART_RxCpltCallback+0xee>

        } else if (match_command(rx_data_arr, CMD_COORDS)) {
 8001c6c:	4929      	ldr	r1, [pc, #164]	@ (8001d14 <HAL_UART_RxCpltCallback+0x124>)
 8001c6e:	4824      	ldr	r0, [pc, #144]	@ (8001d00 <HAL_UART_RxCpltCallback+0x110>)
 8001c70:	f000 f90c 	bl	8001e8c <match_command>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_UART_RxCpltCallback+0x9e>
            current_state = State_Coord_RX;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x104>)
 8001c7c:	4a26      	ldr	r2, [pc, #152]	@ (8001d18 <HAL_UART_RxCpltCallback+0x128>)
 8001c7e:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, CMD_COORDS, 8, 100);
 8001c80:	2364      	movs	r3, #100	@ 0x64
 8001c82:	2208      	movs	r2, #8
 8001c84:	4923      	ldr	r1, [pc, #140]	@ (8001d14 <HAL_UART_RxCpltCallback+0x124>)
 8001c86:	4820      	ldr	r0, [pc, #128]	@ (8001d08 <HAL_UART_RxCpltCallback+0x118>)
 8001c88:	f006 fc48 	bl	800851c <HAL_UART_Transmit>
 8001c8c:	e027      	b.n	8001cde <HAL_UART_RxCpltCallback+0xee>

        } else { // No match
            flashLED(LD3_GPIO_Port, LD3_Pin, 500, 20);
 8001c8e:	2314      	movs	r3, #20
 8001c90:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c98:	4815      	ldr	r0, [pc, #84]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x100>)
 8001c9a:	f7ff fbc5 	bl	8001428 <flashLED>
            current_state = State_Listen; 
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x104>)
 8001ca0:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <HAL_UART_RxCpltCallback+0x108>)
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e01b      	b.n	8001cde <HAL_UART_RxCpltCallback+0xee>
        }

    //end Listen transiitons   

    //Waiting for coordinate receive state:
    } else if (current_state == State_Coord_RX) {
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x104>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1b      	ldr	r2, [pc, #108]	@ (8001d18 <HAL_UART_RxCpltCallback+0x128>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d116      	bne.n	8001cde <HAL_UART_RxCpltCallback+0xee>
        // Process floats 
        memcpy(&posX, &rx_data_arr[0], 4);  // First 4 bytes
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <HAL_UART_RxCpltCallback+0x110>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	@ (8001d1c <HAL_UART_RxCpltCallback+0x12c>)
 8001cb6:	6013      	str	r3, [r2, #0]
        memcpy(&posY, &rx_data_arr[4], 4);  // Next 4 bytes
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_UART_RxCpltCallback+0x110>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4a18      	ldr	r2, [pc, #96]	@ (8001d20 <HAL_UART_RxCpltCallback+0x130>)
 8001cbe:	6013      	str	r3, [r2, #0]

        assert_param(posX >= -20.0f && posX <= 20.0f && posY >= -20.0f && posY <= 20.0f); // bounded -20cm , 20cm

        current_state = State_Motors;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x104>)
 8001cc2:	4a18      	ldr	r2, [pc, #96]	@ (8001d24 <HAL_UART_RxCpltCallback+0x134>)
 8001cc4:	601a      	str	r2, [r3, #0]
        // current_state = State_WaitForGo; // Normally what we should do

        flashLED(LD2_GPIO_Port, LD2_Pin, 100, 3);
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	2264      	movs	r2, #100	@ 0x64
 8001cca:	2180      	movs	r1, #128	@ 0x80
 8001ccc:	4808      	ldr	r0, [pc, #32]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x100>)
 8001cce:	f7ff fbab 	bl	8001428 <flashLED>
        HAL_UART_Transmit(&huart3, CMD_COORDS_RX, 8, 100);  // Ack
 8001cd2:	2364      	movs	r3, #100	@ 0x64
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	4914      	ldr	r1, [pc, #80]	@ (8001d28 <HAL_UART_RxCpltCallback+0x138>)
 8001cd8:	480b      	ldr	r0, [pc, #44]	@ (8001d08 <HAL_UART_RxCpltCallback+0x118>)
 8001cda:	f006 fc1f 	bl	800851c <HAL_UART_Transmit>
    }


    current_state(); //go to next state
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_UART_RxCpltCallback+0x104>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4798      	blx	r3
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40004800 	.word	0x40004800
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	2001dce8 	.word	0x2001dce8
 8001cf8:	08001d2d 	.word	0x08001d2d
 8001cfc:	0800db00 	.word	0x0800db00
 8001d00:	20000204 	.word	0x20000204
 8001d04:	08001d61 	.word	0x08001d61
 8001d08:	20000500 	.word	0x20000500
 8001d0c:	0800db0c 	.word	0x0800db0c
 8001d10:	08001df1 	.word	0x08001df1
 8001d14:	0800db18 	.word	0x0800db18
 8001d18:	08001d7d 	.word	0x08001d7d
 8001d1c:	20000220 	.word	0x20000220
 8001d20:	20000224 	.word	0x20000224
 8001d24:	08001da1 	.word	0x08001da1
 8001d28:	0800db24 	.word	0x0800db24

08001d2c <State_Listen>:

void State_Listen(void){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    current_state = NULL;
 8001d30:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <State_Listen+0x24>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    flashLED(LD1_GPIO_Port, LD1_Pin, 50, 5);
 8001d36:	2305      	movs	r3, #5
 8001d38:	2232      	movs	r2, #50	@ 0x32
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <State_Listen+0x28>)
 8001d3e:	f7ff fb73 	bl	8001428 <flashLED>
    //State listen will blink LED1 and wait for UART communications to determine the next state to go into 
    //it will wait for certain preambles
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for preamble
 8001d42:	2208      	movs	r2, #8
 8001d44:	4904      	ldr	r1, [pc, #16]	@ (8001d58 <State_Listen+0x2c>)
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <State_Listen+0x30>)
 8001d48:	f006 fc73 	bl	8008632 <HAL_UART_Receive_IT>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2001dce8 	.word	0x2001dce8
 8001d54:	40020400 	.word	0x40020400
 8001d58:	20000204 	.word	0x20000204
 8001d5c:	20000500 	.word	0x20000500

08001d60 <State_Picture>:

void State_Picture(void){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    p3();
 8001d64:	f7ff fb2e 	bl	80013c4 <p3>
    current_state = State_Listen;
 8001d68:	4b02      	ldr	r3, [pc, #8]	@ (8001d74 <State_Picture+0x14>)
 8001d6a:	4a03      	ldr	r2, [pc, #12]	@ (8001d78 <State_Picture+0x18>)
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2001dce8 	.word	0x2001dce8
 8001d78:	08001d2d 	.word	0x08001d2d

08001d7c <State_Coord_RX>:

void State_Coord_RX(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
    current_state = NULL;
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <State_Coord_RX+0x18>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for 2 floats
 8001d86:	2208      	movs	r2, #8
 8001d88:	4903      	ldr	r1, [pc, #12]	@ (8001d98 <State_Coord_RX+0x1c>)
 8001d8a:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <State_Coord_RX+0x20>)
 8001d8c:	f006 fc51 	bl	8008632 <HAL_UART_Receive_IT>
    
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2001dce8 	.word	0x2001dce8
 8001d98:	20000204 	.word	0x20000204
 8001d9c:	20000500 	.word	0x20000500

08001da0 <State_Motors>:

void State_Motors(void){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
    init_home(&myProbe);
 8001da6:	480d      	ldr	r0, [pc, #52]	@ (8001ddc <State_Motors+0x3c>)
 8001da8:	f000 fa5a 	bl	8002260 <init_home>
    Position test = {3, 3, 0};
 8001dac:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <State_Motors+0x40>)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001db2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    moveProbe_test(&myProbe, test);
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dba:	4808      	ldr	r0, [pc, #32]	@ (8001ddc <State_Motors+0x3c>)
 8001dbc:	f000 fa22 	bl	8002204 <moveProbe_test>
    flashLED(LD2_GPIO_Port, LD2_Pin, 100, 5);
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	2264      	movs	r2, #100	@ 0x64
 8001dc4:	2180      	movs	r1, #128	@ 0x80
 8001dc6:	4807      	ldr	r0, [pc, #28]	@ (8001de4 <State_Motors+0x44>)
 8001dc8:	f7ff fb2e 	bl	8001428 <flashLED>
    current_state = State_Listen;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <State_Motors+0x48>)
 8001dce:	4a07      	ldr	r2, [pc, #28]	@ (8001dec <State_Motors+0x4c>)
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2001dcec 	.word	0x2001dcec
 8001de0:	0800da50 	.word	0x0800da50
 8001de4:	40020400 	.word	0x40020400
 8001de8:	2001dce8 	.word	0x2001dce8
 8001dec:	08001d2d 	.word	0x08001d2d

08001df0 <State_ADC_FFT>:
    //basically a blocker to motor actuate until it receives a go. If receives anything other than go it indicates a problem and should force you to reset.
    current_state = NULL;
}


void State_ADC_FFT(void){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_LEN); //start DMA and ADC
 8001df6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dfa:	491d      	ldr	r1, [pc, #116]	@ (8001e70 <State_ADC_FFT+0x80>)
 8001dfc:	481d      	ldr	r0, [pc, #116]	@ (8001e74 <State_ADC_FFT+0x84>)
 8001dfe:	f001 f9d3 	bl	80031a8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);  // Start the timer that triggers ADC
 8001e02:	481d      	ldr	r0, [pc, #116]	@ (8001e78 <State_ADC_FFT+0x88>)
 8001e04:	f005 fbd8 	bl	80075b8 <HAL_TIM_Base_Start>
	//data is ready for FFT
    while(1){
        if(ADC_full == 1){
 8001e08:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <State_ADC_FFT+0x8c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d1fb      	bne.n	8001e08 <State_ADC_FFT+0x18>
            ADC_full = 0;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <State_ADC_FFT+0x8c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
            HAL_ADC_Stop_DMA(&hadc1);
 8001e16:	4817      	ldr	r0, [pc, #92]	@ (8001e74 <State_ADC_FFT+0x84>)
 8001e18:	f001 fad6 	bl	80033c8 <HAL_ADC_Stop_DMA>
            HAL_TIM_Base_Stop(&htim2); // stop the adc and timer
 8001e1c:	4816      	ldr	r0, [pc, #88]	@ (8001e78 <State_ADC_FFT+0x88>)
 8001e1e:	f005 fc33 	bl	8007688 <HAL_TIM_Base_Stop>

            for(int i = 0; i < ADC_BUF_LEN; i++){ //since DMA is faster than code, we should be able to immediately load values
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	e010      	b.n	8001e4a <State_ADC_FFT+0x5a>
			    input_FFT[i] = (float)(adc_buffer[i]); //note the usage of float here - should consider optimization reasons and configurations
 8001e28:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <State_ADC_FFT+0x80>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e38:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <State_ADC_FFT+0x90>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	edc3 7a00 	vstr	s15, [r3]
            for(int i = 0; i < ADC_BUF_LEN; i++){ //since DMA is faster than code, we should be able to immediately load values
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e50:	dbea      	blt.n	8001e28 <State_ADC_FFT+0x38>
		    }

            //FFT
            arm_rfft_fast_f32(&fftHandler, input_FFT, output_FFT, 0);
 8001e52:	2300      	movs	r3, #0
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <State_ADC_FFT+0x94>)
 8001e56:	490a      	ldr	r1, [pc, #40]	@ (8001e80 <State_ADC_FFT+0x90>)
 8001e58:	480b      	ldr	r0, [pc, #44]	@ (8001e88 <State_ADC_FFT+0x98>)
 8001e5a:	f007 fbe9 	bl	8009630 <arm_rfft_fast_f32>
            computeCoeffs(output_FFT);
 8001e5e:	4809      	ldr	r0, [pc, #36]	@ (8001e84 <State_ADC_FFT+0x94>)
 8001e60:	f7ff f8ea 	bl	8001038 <computeCoeffs>

            sendADC_UART();
 8001e64:	f7ff f940 	bl	80010e8 <sendADC_UART>
            sendFFT_UART();
 8001e68:	f7ff f97a 	bl	8001160 <sendFFT_UART>
        if(ADC_full == 1){
 8001e6c:	e7cc      	b.n	8001e08 <State_ADC_FFT+0x18>
 8001e6e:	bf00      	nop
 8001e70:	20000548 	.word	0x20000548
 8001e74:	20000228 	.word	0x20000228
 8001e78:	20000470 	.word	0x20000470
 8001e7c:	20001548 	.word	0x20001548
 8001e80:	2000154c 	.word	0x2000154c
 8001e84:	2000354c 	.word	0x2000354c
 8001e88:	2000554c 	.word	0x2000554c

08001e8c <match_command>:
 * @brief Compare fixed-length 8-byte command strings.
 * @param input     Pointer to received buffer (must be at least 8 bytes)
 * @param command   Pointer to expected command (8-byte string)
 * @return 1 if match, 0 if not
 */
uint8_t match_command(const uint8_t* input, const uint8_t* command) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
    return (memcmp(input, command, 8) == 0);
 8001e96:	2208      	movs	r2, #8
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f009 f895 	bl	800afca <memcmp>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <main>:
Stepper nema;
const Position HOME = {9, 8, 12.2};
	

int main(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	HAL_Init();
 8001eb8:	f001 f89c 	bl	8002ff4 <HAL_Init>
  	SystemClock_Config();
 8001ebc:	f7ff fad6 	bl	800146c <SystemClock_Config>
	MX_GPIO_Init();
 8001ec0:	f7ff fd88 	bl	80019d4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001ec4:	f7ff fd5e 	bl	8001984 <MX_DMA_Init>
	MX_DCMI_Init();
 8001ec8:	f7ff fb8e 	bl	80015e8 <MX_DCMI_Init>
	MX_USART3_UART_Init();
 8001ecc:	f7ff fd20 	bl	8001910 <MX_USART3_UART_Init>
	MX_I2C2_Init();
 8001ed0:	f7ff fbec 	bl	80016ac <MX_I2C2_Init>
	MX_TIM1_Init();
 8001ed4:	f7ff fc18 	bl	8001708 <MX_TIM1_Init>
	MX_TIM6_Init();
 8001ed8:	f7ff fce4 	bl	80018a4 <MX_TIM6_Init>
	MX_ADC1_Init();
 8001edc:	f7ff fb32 	bl	8001544 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001ee0:	f7ff fbb6 	bl	8001650 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001ee4:	f7ff fc92 	bl	800180c <MX_TIM2_Init>
	MX_USB_OTG_FS_USB_Init();
 8001ee8:	f7ff fd44 	bl	8001974 <MX_USB_OTG_FS_USB_Init>
	
	//init FFT
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8001eec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ef0:	4827      	ldr	r0, [pc, #156]	@ (8001f90 <main+0xdc>)
 8001ef2:	f007 fb19 	bl	8009528 <arm_rfft_fast_init_f32>

	//init probe
	myProbe.lin = &lin;
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <main+0xe0>)
 8001ef8:	4a27      	ldr	r2, [pc, #156]	@ (8001f98 <main+0xe4>)
 8001efa:	60da      	str	r2, [r3, #12]
	myProbe.rot = &rot;
 8001efc:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <main+0xe0>)
 8001efe:	4a27      	ldr	r2, [pc, #156]	@ (8001f9c <main+0xe8>)
 8001f00:	611a      	str	r2, [r3, #16]
	myProbe.nema = &nema;
 8001f02:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <main+0xe0>)
 8001f04:	4a26      	ldr	r2, [pc, #152]	@ (8001fa0 <main+0xec>)
 8001f06:	615a      	str	r2, [r3, #20]
	
    myProbe.probePos = HOME; 
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <main+0xe0>)
 8001f0a:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <main+0xf0>)
 8001f0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    myProbe.lin->Channel = 0;
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <main+0xe0>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	721a      	strb	r2, [r3, #8]
    myProbe.lin->currAngle = 0;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <main+0xe0>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
    myProbe.lin->homeAngle = 0;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <main+0xe0>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	605a      	str	r2, [r3, #4]

    myProbe.rot->Channel = 15;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <main+0xe0>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	220f      	movs	r2, #15
 8001f34:	721a      	strb	r2, [r3, #8]
    myProbe.rot->currAngle = 0;
 8001f36:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <main+0xe0>)
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
    myProbe.rot->homeAngle = 0;
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <main+0xe0>)
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]

    myProbe.nema->currAngle = HOME.x;
 8001f4a:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8001fa8 <main+0xf4>
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <main+0xe0>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f56:	edc3 7a01 	vstr	s15, [r3, #4]
    myProbe.nema->homeAngle = HOME.x;
 8001f5a:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8001fa8 <main+0xf4>
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <main+0xe0>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	edc3 7a00 	vstr	s15, [r3]
	
	current_state = State_Listen;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <main+0xf8>)
 8001f6c:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <main+0xfc>)
 8001f6e:	601a      	str	r2, [r3, #0]

	while(1){
		flashLED(LD1_GPIO_Port, LD1_Pin, 500, 1);
 8001f70:	2301      	movs	r3, #1
 8001f72:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f76:	2101      	movs	r1, #1
 8001f78:	480e      	ldr	r0, [pc, #56]	@ (8001fb4 <main+0x100>)
 8001f7a:	f7ff fa55 	bl	8001428 <flashLED>

		if (current_state != NULL) {
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <main+0xf8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f4      	beq.n	8001f70 <main+0xbc>
            current_state();       // Run the state logic
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <main+0xf8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4798      	blx	r3
		flashLED(LD1_GPIO_Port, LD1_Pin, 500, 1);
 8001f8c:	e7f0      	b.n	8001f70 <main+0xbc>
 8001f8e:	bf00      	nop
 8001f90:	2000554c 	.word	0x2000554c
 8001f94:	2001dcec 	.word	0x2001dcec
 8001f98:	2001dd04 	.word	0x2001dd04
 8001f9c:	2001dd10 	.word	0x2001dd10
 8001fa0:	2001dd1c 	.word	0x2001dd1c
 8001fa4:	0800db30 	.word	0x0800db30
 8001fa8:	00000009 	.word	0x00000009
 8001fac:	2001dce8 	.word	0x2001dce8
 8001fb0:	08001d2d 	.word	0x08001d2d
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <home_Align>:
#include <math.h>

extern const Position HOME;

// Calculates the motor position based on given (x, y) coords
void home_Align(Probe* myProbe){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    // 1. retract the motor
    setServoAngle(myProbe->lin, 0);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002044 <home_Align+0x8c>
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f9d5 	bl	8002378 <setServoAngle>
    myProbe->lin->currAngle = 0; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
    HAL_Delay(10); 
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f001 f87d 	bl	80030d8 <HAL_Delay>

    // 2. rotate to home angle
    setServoAngle(myProbe->rot, 0);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002044 <home_Align+0x8c>
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f9c6 	bl	8002378 <setServoAngle>
    myProbe->rot->currAngle = 0; 
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    HAL_Delay(10); 
 8001ff6:	200a      	movs	r0, #10
 8001ff8:	f001 f86e 	bl	80030d8 <HAL_Delay>

    // 3. retract to home direction in stepper
    float move_cm = -(myProbe->nema->currAngle - HOME.x); // move right
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	ed93 7a01 	vldr	s14, [r3, #4]
 8002004:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <home_Align+0x90>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002014:	eef1 7a67 	vneg.f32	s15, s15
 8002018:	edc7 7a03 	vstr	s15, [r7, #12]
    stp_moveDistance((myProbe->nema), move_cm);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	ed97 0a03 	vldr	s0, [r7, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fb39 	bl	800269c <stp_moveDistance>
    myProbe->nema->currAngle = myProbe->nema->homeAngle;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	605a      	str	r2, [r3, #4]
    HAL_Delay(10); 
 8002036:	200a      	movs	r0, #10
 8002038:	f001 f84e 	bl	80030d8 <HAL_Delay>
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	00000000 	.word	0x00000000
 8002048:	0800db30 	.word	0x0800db30

0800204c <x_align>:

void x_align(Probe* myProbe, Position desiredLoc){
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	4638      	mov	r0, r7
 8002056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    float move_cm = -(HOME.x - desiredLoc.x);
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <x_align+0x58>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206a:	edc7 7a05 	vstr	s15, [r7, #20]
    if(move_cm > X_MAX){
 800206e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002072:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8002076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	dd01      	ble.n	8002084 <x_align+0x38>
        move_cm = X_MAX;
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <x_align+0x5c>)
 8002082:	617b      	str	r3, [r7, #20]
    }
    stp_moveDistance(((myProbe->nema)), move_cm);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	ed97 0a05 	vldr	s0, [r7, #20]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fb05 	bl	800269c <stp_moveDistance>
    myProbe->nema->currAngle = move_cm; 
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	605a      	str	r2, [r3, #4]
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	0800db30 	.word	0x0800db30
 80020a8:	41500000 	.word	0x41500000
 80020ac:	00000000 	.word	0x00000000

080020b0 <theta_align>:

void theta_align(Probe* myProbe, Position desiredLoc){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	4638      	mov	r0, r7
 80020ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    float theta_rad = atan(desiredLoc.x / H);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe faaf 	bl	8000624 <__aeabi_i2d>
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	4b21      	ldr	r3, [pc, #132]	@ (8002150 <theta_align+0xa0>)
 80020cc:	f7fe fc3e 	bl	800094c <__aeabi_ddiv>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	ec43 2b17 	vmov	d7, r2, r3
 80020d8:	eeb0 0a47 	vmov.f32	s0, s14
 80020dc:	eef0 0a67 	vmov.f32	s1, s15
 80020e0:	f00b f882 	bl	800d1e8 <atan>
 80020e4:	ec53 2b10 	vmov	r2, r3, d0
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7fe fddc 	bl	8000ca8 <__aeabi_d2f>
 80020f0:	4603      	mov	r3, r0
 80020f2:	613b      	str	r3, [r7, #16]
    float theta_deg = theta_rad * DEGREE_CONVERSION;
 80020f4:	6938      	ldr	r0, [r7, #16]
 80020f6:	f7fe faa7 	bl	8000648 <__aeabi_f2d>
 80020fa:	a313      	add	r3, pc, #76	@ (adr r3, 8002148 <theta_align+0x98>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f7fe fafa 	bl	80006f8 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fdcc 	bl	8000ca8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	617b      	str	r3, [r7, #20]
    if(theta_deg > THETA_MAX){
 8002114:	edd7 7a05 	vldr	s15, [r7, #20]
 8002118:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002154 <theta_align+0xa4>
 800211c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	dd01      	ble.n	800212a <theta_align+0x7a>
        theta_deg = THETA_MAX;
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <theta_align+0xa8>)
 8002128:	617b      	str	r3, [r7, #20]
    }
    setServoAngle(myProbe->rot, theta_deg);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f920 	bl	8002378 <setServoAngle>
    myProbe->rot->currAngle = theta_deg;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	1a63c1f8 	.word	0x1a63c1f8
 800214c:	404ca5dc 	.word	0x404ca5dc
 8002150:	40290000 	.word	0x40290000
 8002154:	42080000 	.word	0x42080000
 8002158:	42080000 	.word	0x42080000
 800215c:	00000000 	.word	0x00000000

08002160 <R_align>:

void R_align(Probe* myProbe, Position desiredLoc){
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	4638      	mov	r0, r7
 800216a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    float hypotenuse = hypot(H, desiredLoc.y);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fa57 	bl	8000624 <__aeabi_i2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	ec43 2b11 	vmov	d1, r2, r3
 800217e:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 80021e8 <R_align+0x88>
 8002182:	f00a fffd 	bl	800d180 <hypot>
 8002186:	ec53 2b10 	vmov	r2, r3, d0
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fd8b 	bl	8000ca8 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	617b      	str	r3, [r7, #20]
    float move_cm = hypotenuse - PROBE_LEN;
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7fe fa56 	bl	8000648 <__aeabi_f2d>
 800219c:	a315      	add	r3, pc, #84	@ (adr r3, 80021f4 <R_align+0x94>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	f7fe f8f1 	bl	8000388 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe fd7b 	bl	8000ca8 <__aeabi_d2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	613b      	str	r3, [r7, #16]
    sv_moveDistance(myProbe->lin, move_cm); // automatically updates cur_angle
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	ed97 0a04 	vldr	s0, [r7, #16]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f942 	bl	8002448 <sv_moveDistance>
    if(move_cm > DR_MAX){
 80021c4:	6938      	ldr	r0, [r7, #16]
 80021c6:	f7fe fa3f 	bl	8000648 <__aeabi_f2d>
 80021ca:	a30c      	add	r3, pc, #48	@ (adr r3, 80021fc <R_align+0x9c>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fd22 	bl	8000c18 <__aeabi_dcmpgt>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <R_align+0x7c>
        move_cm = DR_MAX; 
    }
}
 80021da:	e001      	b.n	80021e0 <R_align+0x80>
        move_cm = DR_MAX; 
 80021dc:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <R_align+0x90>)
 80021de:	613b      	str	r3, [r7, #16]
}
 80021e0:	bf00      	nop
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	00000000 	.word	0x00000000
 80021ec:	40290000 	.word	0x40290000
 80021f0:	402ccccd 	.word	0x402ccccd
 80021f4:	9999999a 	.word	0x9999999a
 80021f8:	40289999 	.word	0x40289999
 80021fc:	9999999a 	.word	0x9999999a
 8002200:	40059999 	.word	0x40059999

08002204 <moveProbe_test>:

// assume probe at home
void moveProbe_test(Probe* myProbe, Position desiredLoc){
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	4638      	mov	r0, r7
 800220e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    // 1. send home
    home_Align(myProbe);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff fed0 	bl	8001fb8 <home_Align>

    // 2. align stepper, theta, R in order
    x_align(myProbe, desiredLoc);
 8002218:	463b      	mov	r3, r7
 800221a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f7ff ff15 	bl	800204c <x_align>
    HAL_Delay(100); 
 8002222:	2064      	movs	r0, #100	@ 0x64
 8002224:	f000 ff58 	bl	80030d8 <HAL_Delay>
    theta_align(myProbe, desiredLoc);
 8002228:	463b      	mov	r3, r7
 800222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff ff3f 	bl	80020b0 <theta_align>
    HAL_Delay(100); 
 8002232:	2064      	movs	r0, #100	@ 0x64
 8002234:	f000 ff50 	bl	80030d8 <HAL_Delay>
    R_align(myProbe, desiredLoc);
 8002238:	463b      	mov	r3, r7
 800223a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff ff8f 	bl	8002160 <R_align>
    HAL_Delay(100); 
 8002242:	2064      	movs	r0, #100	@ 0x64
 8002244:	f000 ff48 	bl	80030d8 <HAL_Delay>

    // 3. wait
    HAL_Delay(3000); 
 8002248:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800224c:	f000 ff44 	bl	80030d8 <HAL_Delay>

    // 4. Align back home
    home_Align(myProbe);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff feb1 	bl	8001fb8 <home_Align>

}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <init_home>:

void init_home(Probe* myProbe){
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    myProbe->nema->homeAngle = HOME.x;
 8002268:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <init_home+0x5c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	ee07 2a90 	vmov	s15, r2
 8002274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002278:	edc3 7a00 	vstr	s15, [r3]
    myProbe->nema->currAngle = myProbe->nema->homeAngle;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	605a      	str	r2, [r3, #4]

    myProbe->lin->currAngle = 0; 
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    myProbe->lin->homeAngle = 0; 
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
    myProbe->rot->currAngle = 0; 
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
    myProbe->rot->homeAngle = 0; 
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	605a      	str	r2, [r3, #4]

}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	0800db30 	.word	0x0800db30

080022c0 <ov7670_snapshot>:
}




void ov7670_snapshot(uint16_t *buff){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b09c      	sub	sp, #112	@ 0x70
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  // Your code here
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 80022c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002304 <ov7670_snapshot+0x44>)
 80022ca:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 80022ce:	2102      	movs	r1, #2
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <ov7670_snapshot+0x48>)
 80022d2:	f001 fca9 	bl	8003c28 <HAL_DCMI_Start_DMA>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 80022dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <ov7670_snapshot+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4908      	ldr	r1, [pc, #32]	@ (800230c <ov7670_snapshot+0x4c>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f008 fe0a 	bl	800af04 <siprintf>
       print_msg(msg);
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff f883 	bl	8001400 <print_msg>
    }
}//goes back to main for waiting for interrupt
 80022fa:	bf00      	nop
 80022fc:	3770      	adds	r7, #112	@ 0x70
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20005564 	.word	0x20005564
 8002308:	200002d0 	.word	0x200002d0
 800230c:	0800daec 	.word	0x0800daec

08002310 <PCA9685_SetPWM>:
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
}

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af04      	add	r7, sp, #16
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	460b      	mov	r3, r1
 800231c:	80bb      	strh	r3, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3306      	adds	r3, #6
 800232a:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 800232c:	88bb      	ldrh	r3, [r7, #4]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	b29b      	uxth	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	b29a      	uxth	r2, r3
 8002350:	230a      	movs	r3, #10
 8002352:	9302      	str	r3, [sp, #8]
 8002354:	2304      	movs	r3, #4
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2301      	movs	r3, #1
 8002360:	2180      	movs	r1, #128	@ 0x80
 8002362:	4803      	ldr	r0, [pc, #12]	@ (8002370 <PCA9685_SetPWM+0x60>)
 8002364:	f003 ff86 	bl	8006274 <HAL_I2C_Mem_Write>
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200003d4 	.word	0x200003d4
 8002374:	00000000 	.word	0x00000000

08002378 <setServoAngle>:
  Value = (205.0 + (Angle / 180.0) * (410.0 - 205.0));
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
}

void setServoAngle(Servo* sv, float Angle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	ed87 0a00 	vstr	s0, [r7]
  // this one is for the position
  float Value;
    if (Angle < 0) Angle = 0;
 8002384:	edd7 7a00 	vldr	s15, [r7]
 8002388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	d502      	bpl.n	8002398 <setServoAngle+0x20>
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
    if (Angle > 180) Angle = 180;
 8002398:	edd7 7a00 	vldr	s15, [r7]
 800239c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002438 <setServoAngle+0xc0>
 80023a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	dd01      	ble.n	80023ae <setServoAngle+0x36>
 80023aa:	4b24      	ldr	r3, [pc, #144]	@ (800243c <setServoAngle+0xc4>)
 80023ac:	603b      	str	r3, [r7, #0]

    float Rev_Angle = 180 - Angle; //in order to make positive values forward and negative values backwards ;)
 80023ae:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002438 <setServoAngle+0xc0>
 80023b2:	edd7 7a00 	vldr	s15, [r7]
 80023b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ba:	edc7 7a03 	vstr	s15, [r7, #12]

  Value = (Rev_Angle * (511.9 - 102.4) / 180.0) + 102.4;
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7fe f942 	bl	8000648 <__aeabi_f2d>
 80023c4:	a318      	add	r3, pc, #96	@ (adr r3, 8002428 <setServoAngle+0xb0>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe f995 	bl	80006f8 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <setServoAngle+0xc8>)
 80023dc:	f7fe fab6 	bl	800094c <__aeabi_ddiv>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	a311      	add	r3, pc, #68	@ (adr r3, 8002430 <setServoAngle+0xb8>)
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	f7fd ffcd 	bl	800038c <__adddf3>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fc55 	bl	8000ca8 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	60bb      	str	r3, [r7, #8]
  PCA9685_SetPWM(sv->Channel, 0, (uint16_t)Value);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7a1b      	ldrb	r3, [r3, #8]
 8002406:	edd7 7a02 	vldr	s15, [r7, #8]
 800240a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240e:	ee17 2a90 	vmov	r2, s15
 8002412:	b292      	uxth	r2, r2
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff7a 	bl	8002310 <PCA9685_SetPWM>
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	f3af 8000 	nop.w
 8002428:	00000000 	.word	0x00000000
 800242c:	40799800 	.word	0x40799800
 8002430:	9999999a 	.word	0x9999999a
 8002434:	40599999 	.word	0x40599999
 8002438:	43340000 	.word	0x43340000
 800243c:	43340000 	.word	0x43340000
 8002440:	40668000 	.word	0x40668000
 8002444:	00000000 	.word	0x00000000

08002448 <sv_moveDistance>:
  sv->homeAngle = homeAngle;
  setServoAngle(sv, homeAngle);
}

//pass in the current Angle of the servo, and modify that value by its angle equivalent of the distance 
void sv_moveDistance(Servo* sv, float distance_cm) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	ed87 0a00 	vstr	s0, [r7]

  //theoretically we have around 2.8cm per 180 deg
  //experimentally we have around 2.52cm per 180 deg. 

    float delta_angle = distance_cm / 0.01544; // (0.014)
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f7fe f8f7 	bl	8000648 <__aeabi_f2d>
 800245a:	a323      	add	r3, pc, #140	@ (adr r3, 80024e8 <sv_moveDistance+0xa0>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fe fa74 	bl	800094c <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fc1c 	bl	8000ca8 <__aeabi_d2f>
 8002470:	4603      	mov	r3, r0
 8002472:	60fb      	str	r3, [r7, #12]


    
    if(delta_angle + sv->currAngle > 0 && delta_angle + sv->currAngle <= 180){
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	ed93 7a00 	vldr	s14, [r3]
 800247a:	edd7 7a03 	vldr	s15, [r7, #12]
 800247e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	dd18      	ble.n	80024be <sv_moveDistance+0x76>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	edd7 7a03 	vldr	s15, [r7, #12]
 8002496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80024e0 <sv_moveDistance+0x98>
 800249e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a6:	d80a      	bhi.n	80024be <sv_moveDistance+0x76>
      sv->currAngle += delta_angle;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	edc3 7a00 	vstr	s15, [r3]
 80024bc:	e003      	b.n	80024c6 <sv_moveDistance+0x7e>
    }else{
      //print_msg("Angle change request exceeded bounds");
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80024be:	2101      	movs	r1, #1
 80024c0:	4808      	ldr	r0, [pc, #32]	@ (80024e4 <sv_moveDistance+0x9c>)
 80024c2:	f003 fd54 	bl	8005f6e <HAL_GPIO_TogglePin>

    }

    setServoAngle(sv, sv->currAngle);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb0 0a67 	vmov.f32	s0, s15
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff51 	bl	8002378 <setServoAngle>
  
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	43340000 	.word	0x43340000
 80024e4:	40020400 	.word	0x40020400
 80024e8:	b866e43b 	.word	0xb866e43b
 80024ec:	3f8f9f01 	.word	0x3f8f9f01

080024f0 <stp_Step>:

#include "steppermotors.h"
#include "stdlib.h"


void stp_Step(Stepper* motor, int step) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
   switch(step % 4) {
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	425a      	negs	r2, r3
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	f002 0203 	and.w	r2, r2, #3
 8002506:	bf58      	it	pl
 8002508:	4253      	negpl	r3, r2
 800250a:	2b03      	cmp	r3, #3
 800250c:	d85e      	bhi.n	80025cc <stp_Step+0xdc>
 800250e:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <stp_Step+0x24>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002525 	.word	0x08002525
 8002518:	0800254f 	.word	0x0800254f
 800251c:	08002579 	.word	0x08002579
 8002520:	080025a3 	.word	0x080025a3
       case 0:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	2108      	movs	r1, #8
 8002528:	482a      	ldr	r0, [pc, #168]	@ (80025d4 <stp_Step+0xe4>)
 800252a:	f003 fd07 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 800252e:	2200      	movs	r2, #0
 8002530:	2120      	movs	r1, #32
 8002532:	4828      	ldr	r0, [pc, #160]	@ (80025d4 <stp_Step+0xe4>)
 8002534:	f003 fd02 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	2140      	movs	r1, #64	@ 0x40
 800253c:	4825      	ldr	r0, [pc, #148]	@ (80025d4 <stp_Step+0xe4>)
 800253e:	f003 fcfd 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	2180      	movs	r1, #128	@ 0x80
 8002546:	4823      	ldr	r0, [pc, #140]	@ (80025d4 <stp_Step+0xe4>)
 8002548:	f003 fcf8 	bl	8005f3c <HAL_GPIO_WritePin>
           break;
 800254c:	e03e      	b.n	80025cc <stp_Step+0xdc>
       case 1:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	2108      	movs	r1, #8
 8002552:	4820      	ldr	r0, [pc, #128]	@ (80025d4 <stp_Step+0xe4>)
 8002554:	f003 fcf2 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 8002558:	2201      	movs	r2, #1
 800255a:	2120      	movs	r1, #32
 800255c:	481d      	ldr	r0, [pc, #116]	@ (80025d4 <stp_Step+0xe4>)
 800255e:	f003 fced 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 8002562:	2201      	movs	r2, #1
 8002564:	2140      	movs	r1, #64	@ 0x40
 8002566:	481b      	ldr	r0, [pc, #108]	@ (80025d4 <stp_Step+0xe4>)
 8002568:	f003 fce8 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	4818      	ldr	r0, [pc, #96]	@ (80025d4 <stp_Step+0xe4>)
 8002572:	f003 fce3 	bl	8005f3c <HAL_GPIO_WritePin>
           break;
 8002576:	e029      	b.n	80025cc <stp_Step+0xdc>
       case 2:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	2108      	movs	r1, #8
 800257c:	4815      	ldr	r0, [pc, #84]	@ (80025d4 <stp_Step+0xe4>)
 800257e:	f003 fcdd 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 8002582:	2201      	movs	r2, #1
 8002584:	2120      	movs	r1, #32
 8002586:	4813      	ldr	r0, [pc, #76]	@ (80025d4 <stp_Step+0xe4>)
 8002588:	f003 fcd8 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	2140      	movs	r1, #64	@ 0x40
 8002590:	4810      	ldr	r0, [pc, #64]	@ (80025d4 <stp_Step+0xe4>)
 8002592:	f003 fcd3 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 8002596:	2201      	movs	r2, #1
 8002598:	2180      	movs	r1, #128	@ 0x80
 800259a:	480e      	ldr	r0, [pc, #56]	@ (80025d4 <stp_Step+0xe4>)
 800259c:	f003 fcce 	bl	8005f3c <HAL_GPIO_WritePin>
           break;
 80025a0:	e014      	b.n	80025cc <stp_Step+0xdc>
       case 3:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 80025a2:	2201      	movs	r2, #1
 80025a4:	2108      	movs	r1, #8
 80025a6:	480b      	ldr	r0, [pc, #44]	@ (80025d4 <stp_Step+0xe4>)
 80025a8:	f003 fcc8 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2120      	movs	r1, #32
 80025b0:	4808      	ldr	r0, [pc, #32]	@ (80025d4 <stp_Step+0xe4>)
 80025b2:	f003 fcc3 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2140      	movs	r1, #64	@ 0x40
 80025ba:	4806      	ldr	r0, [pc, #24]	@ (80025d4 <stp_Step+0xe4>)
 80025bc:	f003 fcbe 	bl	8005f3c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 80025c0:	2201      	movs	r2, #1
 80025c2:	2180      	movs	r1, #128	@ 0x80
 80025c4:	4803      	ldr	r0, [pc, #12]	@ (80025d4 <stp_Step+0xe4>)
 80025c6:	f003 fcb9 	bl	8005f3c <HAL_GPIO_WritePin>
           break;
 80025ca:	bf00      	nop
   }
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40020000 	.word	0x40020000

080025d8 <stp_Stop>:
   nema->homeAngle = 0;
   nema->currAngle = 0;
}


void stp_Stop(Stepper* motor) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2108      	movs	r1, #8
 80025e4:	480a      	ldr	r0, [pc, #40]	@ (8002610 <stp_Stop+0x38>)
 80025e6:	f003 fca9 	bl	8005f3c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2120      	movs	r1, #32
 80025ee:	4808      	ldr	r0, [pc, #32]	@ (8002610 <stp_Stop+0x38>)
 80025f0:	f003 fca4 	bl	8005f3c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2140      	movs	r1, #64	@ 0x40
 80025f8:	4805      	ldr	r0, [pc, #20]	@ (8002610 <stp_Stop+0x38>)
 80025fa:	f003 fc9f 	bl	8005f3c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 80025fe:	2200      	movs	r2, #0
 8002600:	2180      	movs	r1, #128	@ 0x80
 8002602:	4803      	ldr	r0, [pc, #12]	@ (8002610 <stp_Stop+0x38>)
 8002604:	f003 fc9a 	bl	8005f3c <HAL_GPIO_WritePin>

}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40020000 	.word	0x40020000

08002614 <stp_Move>:

void stp_Move(Stepper* motor, int steps, int delay) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
   int direction = (steps > 0) ? 1 : -1; // Determine direction
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	dd01      	ble.n	800262a <stp_Move+0x16>
 8002626:	2301      	movs	r3, #1
 8002628:	e001      	b.n	800262e <stp_Move+0x1a>
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	61bb      	str	r3, [r7, #24]
   int stepCount = abs(steps);  // Get absolute step count
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	bfb8      	it	lt
 8002636:	425b      	neglt	r3, r3
 8002638:	617b      	str	r3, [r7, #20]

   for (int i = 0; i < stepCount; i++) {
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e021      	b.n	8002684 <stp_Move+0x70>
       int stepIndex = (direction > 0) ? (i % 4) : (3 - (i % 4));
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	dd08      	ble.n	8002658 <stp_Move+0x44>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	425a      	negs	r2, r3
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	bf58      	it	pl
 8002654:	4253      	negpl	r3, r2
 8002656:	e009      	b.n	800266c <stp_Move+0x58>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	425a      	negs	r2, r3
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	f002 0203 	and.w	r2, r2, #3
 8002664:	bf58      	it	pl
 8002666:	4253      	negpl	r3, r2
 8002668:	f1c3 0303 	rsb	r3, r3, #3
 800266c:	613b      	str	r3, [r7, #16]
       stp_Step(motor, stepIndex);
 800266e:	6939      	ldr	r1, [r7, #16]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff ff3d 	bl	80024f0 <stp_Step>
       HAL_Delay(delay); // Speed control
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fd2d 	bl	80030d8 <HAL_Delay>
   for (int i = 0; i < stepCount; i++) {
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	dbd9      	blt.n	8002640 <stp_Move+0x2c>
   }
   stp_Stop(motor);
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff ffa3 	bl	80025d8 <stp_Stop>
}
 8002692:	bf00      	nop
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <stp_moveDistance>:

void stp_moveDistance(Stepper* motor, float distance_cm){
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	ed87 0a00 	vstr	s0, [r7]

   int convertedSteps = distance_cm * NEMA_DISTANCE_TO_STEPS;
 80026a8:	edd7 7a00 	vldr	s15, [r7]
 80026ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80026dc <stp_moveDistance+0x40>
 80026b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b8:	ee17 3a90 	vmov	r3, s15
 80026bc:	60fb      	str	r3, [r7, #12]
   stp_Move(motor, convertedSteps, 5);
 80026be:	2205      	movs	r2, #5
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffa6 	bl	8002614 <stp_Move>
   HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80026c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026cc:	4804      	ldr	r0, [pc, #16]	@ (80026e0 <stp_moveDistance+0x44>)
 80026ce:	f003 fc4e 	bl	8005f6e <HAL_GPIO_TogglePin>

}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	42440000 	.word	0x42440000
 80026e0:	40020400 	.word	0x40020400

080026e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_MspInit+0x4c>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002730 <HAL_MspInit+0x4c>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_MspInit+0x4c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <HAL_MspInit+0x4c>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	4a08      	ldr	r2, [pc, #32]	@ (8002730 <HAL_MspInit+0x4c>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	@ 0x40
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_MspInit+0x4c>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800

08002734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	@ 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2f      	ldr	r2, [pc, #188]	@ (8002810 <HAL_ADC_MspInit+0xdc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d158      	bne.n	8002808 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <HAL_ADC_MspInit+0xe0>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	4a2d      	ldr	r2, [pc, #180]	@ (8002814 <HAL_ADC_MspInit+0xe0>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002764:	6453      	str	r3, [r2, #68]	@ 0x44
 8002766:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_ADC_MspInit+0xe0>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <HAL_ADC_MspInit+0xe0>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	4a26      	ldr	r2, [pc, #152]	@ (8002814 <HAL_ADC_MspInit+0xe0>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6313      	str	r3, [r2, #48]	@ 0x30
 8002782:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <HAL_ADC_MspInit+0xe0>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800278e:	2301      	movs	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002792:	2303      	movs	r3, #3
 8002794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	481d      	ldr	r0, [pc, #116]	@ (8002818 <HAL_ADC_MspInit+0xe4>)
 80027a2:	f003 fa37 	bl	8005c14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <HAL_ADC_MspInit+0xec>)
 80027aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b8:	4b18      	ldr	r3, [pc, #96]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ce:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80027de:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027e6:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027ec:	480b      	ldr	r0, [pc, #44]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 80027ee:	f001 fc87 	bl	8004100 <HAL_DMA_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80027f8:	f7ff f9f4 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a07      	ldr	r2, [pc, #28]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 8002800:	639a      	str	r2, [r3, #56]	@ 0x38
 8002802:	4a06      	ldr	r2, [pc, #24]	@ (800281c <HAL_ADC_MspInit+0xe8>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002808:	bf00      	nop
 800280a:	3728      	adds	r7, #40	@ 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40012000 	.word	0x40012000
 8002814:	40023800 	.word	0x40023800
 8002818:	40020000 	.word	0x40020000
 800281c:	20000270 	.word	0x20000270
 8002820:	40026410 	.word	0x40026410

08002824 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08e      	sub	sp, #56	@ 0x38
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a78      	ldr	r2, [pc, #480]	@ (8002a24 <HAL_DCMI_MspInit+0x200>)
 8002842:	4293      	cmp	r3, r2
 8002844:	f040 80e9 	bne.w	8002a1a <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	4b76      	ldr	r3, [pc, #472]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 800284e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002850:	4a75      	ldr	r2, [pc, #468]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6353      	str	r3, [r2, #52]	@ 0x34
 8002858:	4b73      	ldr	r3, [pc, #460]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	4b6f      	ldr	r3, [pc, #444]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 800286e:	f043 0310 	orr.w	r3, r3, #16
 8002872:	6313      	str	r3, [r2, #48]	@ 0x30
 8002874:	4b6c      	ldr	r3, [pc, #432]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	4b68      	ldr	r3, [pc, #416]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	4a67      	ldr	r2, [pc, #412]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002890:	4b65      	ldr	r3, [pc, #404]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	4b61      	ldr	r3, [pc, #388]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a4:	4a60      	ldr	r2, [pc, #384]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c0:	4a59      	ldr	r2, [pc, #356]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c8:	4b57      	ldr	r3, [pc, #348]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	4b53      	ldr	r3, [pc, #332]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028dc:	4a52      	ldr	r2, [pc, #328]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e4:	4b50      	ldr	r3, [pc, #320]	@ (8002a28 <HAL_DCMI_MspInit+0x204>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80028f0:	2370      	movs	r3, #112	@ 0x70
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002900:	230d      	movs	r3, #13
 8002902:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	4848      	ldr	r0, [pc, #288]	@ (8002a2c <HAL_DCMI_MspInit+0x208>)
 800290c:	f003 f982 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002910:	2350      	movs	r3, #80	@ 0x50
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002920:	230d      	movs	r3, #13
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002928:	4619      	mov	r1, r3
 800292a:	4841      	ldr	r0, [pc, #260]	@ (8002a30 <HAL_DCMI_MspInit+0x20c>)
 800292c:	f003 f972 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002930:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002942:	230d      	movs	r3, #13
 8002944:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800294a:	4619      	mov	r1, r3
 800294c:	4839      	ldr	r0, [pc, #228]	@ (8002a34 <HAL_DCMI_MspInit+0x210>)
 800294e:	f003 f961 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002952:	2308      	movs	r3, #8
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002962:	230d      	movs	r3, #13
 8002964:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800296a:	4619      	mov	r1, r3
 800296c:	4832      	ldr	r0, [pc, #200]	@ (8002a38 <HAL_DCMI_MspInit+0x214>)
 800296e:	f003 f951 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002984:	230d      	movs	r3, #13
 8002986:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800298c:	4619      	mov	r1, r3
 800298e:	482b      	ldr	r0, [pc, #172]	@ (8002a3c <HAL_DCMI_MspInit+0x218>)
 8002990:	f003 f940 	bl	8005c14 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002994:	4b2a      	ldr	r3, [pc, #168]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 8002996:	4a2b      	ldr	r2, [pc, #172]	@ (8002a44 <HAL_DCMI_MspInit+0x220>)
 8002998:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800299a:	4b29      	ldr	r3, [pc, #164]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 800299c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029a0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029a2:	4b27      	ldr	r3, [pc, #156]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a8:	4b25      	ldr	r3, [pc, #148]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80029ae:	4b24      	ldr	r3, [pc, #144]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029b4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029b6:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029bc:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029be:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029c4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029cc:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80029ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029d4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029d8:	2204      	movs	r2, #4
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029de:	2203      	movs	r2, #3
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80029e2:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80029e8:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80029ee:	4814      	ldr	r0, [pc, #80]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 80029f0:	f001 fb86 	bl	8004100 <HAL_DMA_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 80029fa:	f7ff f8f3 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a0f      	ldr	r2, [pc, #60]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 8002a02:	649a      	str	r2, [r3, #72]	@ 0x48
 8002a04:	4a0e      	ldr	r2, [pc, #56]	@ (8002a40 <HAL_DCMI_MspInit+0x21c>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	204e      	movs	r0, #78	@ 0x4e
 8002a10:	f001 f8d3 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002a14:	204e      	movs	r0, #78	@ 0x4e
 8002a16:	f001 f8ec 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 8002a1a:	bf00      	nop
 8002a1c:	3738      	adds	r7, #56	@ 0x38
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	50050000 	.word	0x50050000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40020000 	.word	0x40020000
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021800 	.word	0x40021800
 8002a40:	20000320 	.word	0x20000320
 8002a44:	40026428 	.word	0x40026428

08002a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	@ 0x30
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a32      	ldr	r2, [pc, #200]	@ (8002b30 <HAL_I2C_MspInit+0xe8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d12d      	bne.n	8002ac6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	4a30      	ldr	r2, [pc, #192]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002a86:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8c:	2312      	movs	r3, #18
 8002a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a94:	2303      	movs	r3, #3
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a98:	2304      	movs	r3, #4
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4825      	ldr	r0, [pc, #148]	@ (8002b38 <HAL_I2C_MspInit+0xf0>)
 8002aa4:	f003 f8b6 	bl	8005c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	4a20      	ldr	r2, [pc, #128]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002ab2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ac4:	e030      	b.n	8002b28 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1c      	ldr	r2, [pc, #112]	@ (8002b3c <HAL_I2C_MspInit+0xf4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d12b      	bne.n	8002b28 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	4a16      	ldr	r2, [pc, #88]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002ada:	f043 0320 	orr.w	r3, r3, #32
 8002ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae0:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aec:	2303      	movs	r3, #3
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af0:	2312      	movs	r3, #18
 8002af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002afc:	2304      	movs	r3, #4
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	4619      	mov	r1, r3
 8002b06:	480e      	ldr	r0, [pc, #56]	@ (8002b40 <HAL_I2C_MspInit+0xf8>)
 8002b08:	f003 f884 	bl	8005c14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	4b08      	ldr	r3, [pc, #32]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	4a07      	ldr	r2, [pc, #28]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_I2C_MspInit+0xec>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3730      	adds	r7, #48	@ 0x30
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40005400 	.word	0x40005400
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40005800 	.word	0x40005800
 8002b40:	40021400 	.word	0x40021400

08002b44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0b      	ldr	r2, [pc, #44]	@ (8002b80 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10d      	bne.n	8002b72 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x40>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x40>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b66:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x40>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40023800 	.word	0x40023800

08002b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b16      	ldr	r3, [pc, #88]	@ (8002bf8 <HAL_TIM_Base_MspInit+0x70>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	4a15      	ldr	r2, [pc, #84]	@ (8002bf8 <HAL_TIM_Base_MspInit+0x70>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002baa:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <HAL_TIM_Base_MspInit+0x70>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002bb6:	e01a      	b.n	8002bee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002bfc <HAL_TIM_Base_MspInit+0x74>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d115      	bne.n	8002bee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <HAL_TIM_Base_MspInit+0x70>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	4a0b      	ldr	r2, [pc, #44]	@ (8002bf8 <HAL_TIM_Base_MspInit+0x70>)
 8002bcc:	f043 0310 	orr.w	r3, r3, #16
 8002bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd2:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <HAL_TIM_Base_MspInit+0x70>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2036      	movs	r0, #54	@ 0x36
 8002be4:	f000 ffe9 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002be8:	2036      	movs	r0, #54	@ 0x36
 8002bea:	f001 f802 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40001000 	.word	0x40001000

08002c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 030c 	add.w	r3, r7, #12
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a12      	ldr	r2, [pc, #72]	@ (8002c68 <HAL_TIM_MspPostInit+0x68>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d11e      	bne.n	8002c60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <HAL_TIM_MspPostInit+0x6c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	4a10      	ldr	r2, [pc, #64]	@ (8002c6c <HAL_TIM_MspPostInit+0x6c>)
 8002c2c:	f043 0310 	orr.w	r3, r3, #16
 8002c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c32:	4b0e      	ldr	r3, [pc, #56]	@ (8002c6c <HAL_TIM_MspPostInit+0x6c>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c44:	2302      	movs	r3, #2
 8002c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4805      	ldr	r0, [pc, #20]	@ (8002c70 <HAL_TIM_MspPostInit+0x70>)
 8002c5c:	f002 ffda 	bl	8005c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c60:	bf00      	nop
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40021000 	.word	0x40021000

08002c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	@ 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_UART_MspInit+0x94>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d134      	bne.n	8002d00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca6:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_UART_MspInit+0x98>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002cce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ce0:	2307      	movs	r3, #7
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4809      	ldr	r0, [pc, #36]	@ (8002d10 <HAL_UART_MspInit+0x9c>)
 8002cec:	f002 ff92 	bl	8005c14 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2027      	movs	r0, #39	@ 0x27
 8002cf6:	f000 ff60 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cfa:	2027      	movs	r0, #39	@ 0x27
 8002cfc:	f000 ff79 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002d00:	bf00      	nop
 8002d02:	3728      	adds	r7, #40	@ 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40004800 	.word	0x40004800
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020c00 	.word	0x40020c00

08002d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <NMI_Handler+0x4>

08002d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <HardFault_Handler+0x4>

08002d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <MemManage_Handler+0x4>

08002d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <BusFault_Handler+0x4>

08002d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <UsageFault_Handler+0x4>

08002d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d6a:	f000 f995 	bl	8003098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d78:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <USART3_IRQHandler+0x10>)
 8002d7a:	f005 fc7f 	bl	800867c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000500 	.word	0x20000500

08002d88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002d8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d90:	f003 f908 	bl	8005fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d9c:	4802      	ldr	r0, [pc, #8]	@ (8002da8 <TIM6_DAC_IRQHandler+0x10>)
 8002d9e:	f004 fce9 	bl	8007774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200004b8 	.word	0x200004b8

08002dac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002db0:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <DMA2_Stream0_IRQHandler+0x10>)
 8002db2:	f001 fb3d 	bl	8004430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000270 	.word	0x20000270

08002dc0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002dc4:	4803      	ldr	r0, [pc, #12]	@ (8002dd4 <DMA2_Stream1_IRQHandler+0x14>)
 8002dc6:	f001 fb33 	bl	8004430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	dma_flag = 1;
 8002dca:	4b03      	ldr	r3, [pc, #12]	@ (8002dd8 <DMA2_Stream1_IRQHandler+0x18>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000320 	.word	0x20000320
 8002dd8:	2001dce4 	.word	0x2001dce4

08002ddc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002de0:	4802      	ldr	r0, [pc, #8]	@ (8002dec <DCMI_IRQHandler+0x10>)
 8002de2:	f000 ffc1 	bl	8003d68 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200002d0 	.word	0x200002d0

08002df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return 1;
 8002df4:	2301      	movs	r3, #1
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <_kill>:

int _kill(int pid, int sig)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e0a:	f008 f941 	bl	800b090 <__errno>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2216      	movs	r2, #22
 8002e12:	601a      	str	r2, [r3, #0]
  return -1;
 8002e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_exit>:

void _exit (int status)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e28:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ffe7 	bl	8002e00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e32:	bf00      	nop
 8002e34:	e7fd      	b.n	8002e32 <_exit+0x12>

08002e36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e00a      	b.n	8002e5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e48:	f3af 8000 	nop.w
 8002e4c:	4601      	mov	r1, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	60ba      	str	r2, [r7, #8]
 8002e54:	b2ca      	uxtb	r2, r1
 8002e56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	dbf0      	blt.n	8002e48 <_read+0x12>
  }

  return len;
 8002e66:	687b      	ldr	r3, [r7, #4]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e009      	b.n	8002e96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	60ba      	str	r2, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	3301      	adds	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	dbf1      	blt.n	8002e82 <_write+0x12>
  }
  return len;
 8002e9e:	687b      	ldr	r3, [r7, #4]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_close>:

int _close(int file)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ed0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <_isatty>:

int _isatty(int file)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ee8:	2301      	movs	r3, #1
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f18:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <_sbrk+0x5c>)
 8002f1a:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <_sbrk+0x60>)
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f24:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <_sbrk+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <_sbrk+0x64>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <_sbrk+0x68>)
 8002f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f32:	4b10      	ldr	r3, [pc, #64]	@ (8002f74 <_sbrk+0x64>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d207      	bcs.n	8002f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f40:	f008 f8a6 	bl	800b090 <__errno>
 8002f44:	4603      	mov	r3, r0
 8002f46:	220c      	movs	r2, #12
 8002f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4e:	e009      	b.n	8002f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f50:	4b08      	ldr	r3, [pc, #32]	@ (8002f74 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f56:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <_sbrk+0x64>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4a05      	ldr	r2, [pc, #20]	@ (8002f74 <_sbrk+0x64>)
 8002f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20020000 	.word	0x20020000
 8002f70:	00000400 	.word	0x00000400
 8002f74:	2001dd24 	.word	0x2001dd24
 8002f78:	2001de78 	.word	0x2001de78

08002f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f80:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <SystemInit+0x20>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <SystemInit+0x20>)
 8002f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fa4:	f7ff ffea 	bl	8002f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fa8:	480c      	ldr	r0, [pc, #48]	@ (8002fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002faa:	490d      	ldr	r1, [pc, #52]	@ (8002fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fac:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb0:	e002      	b.n	8002fb8 <LoopCopyDataInit>

08002fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb6:	3304      	adds	r3, #4

08002fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fbc:	d3f9      	bcc.n	8002fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8002fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc4:	e001      	b.n	8002fca <LoopFillZerobss>

08002fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc8:	3204      	adds	r2, #4

08002fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fcc:	d3fb      	bcc.n	8002fc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002fce:	f008 f865 	bl	800b09c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fd2:	f7fe ff6f 	bl	8001eb4 <main>
  bx  lr    
 8002fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002fe4:	08021378 	.word	0x08021378
  ldr r2, =_sbss
 8002fe8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002fec:	2001de78 	.word	0x2001de78

08002ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ff0:	e7fe      	b.n	8002ff0 <ADC_IRQHandler>
	...

08002ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8003034 <HAL_Init+0x40>)
 8002ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <HAL_Init+0x40>)
 800300a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800300e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003010:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <HAL_Init+0x40>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a07      	ldr	r2, [pc, #28]	@ (8003034 <HAL_Init+0x40>)
 8003016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800301c:	2003      	movs	r0, #3
 800301e:	f000 fdc1 	bl	8003ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003022:	2000      	movs	r0, #0
 8003024:	f000 f808 	bl	8003038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003028:	f7ff fb5c 	bl	80026e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40023c00 	.word	0x40023c00

08003038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003040:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_InitTick+0x54>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b12      	ldr	r3, [pc, #72]	@ (8003090 <HAL_InitTick+0x58>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800304e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fdd9 	bl	8003c0e <HAL_SYSTICK_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00e      	b.n	8003084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d80a      	bhi.n	8003082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800306c:	2200      	movs	r2, #0
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f000 fda1 	bl	8003bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003078:	4a06      	ldr	r2, [pc, #24]	@ (8003094 <HAL_InitTick+0x5c>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000000 	.word	0x20000000
 8003090:	20000008 	.word	0x20000008
 8003094:	20000004 	.word	0x20000004

08003098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800309c:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_IncTick+0x20>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_IncTick+0x24>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <HAL_IncTick+0x24>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000008 	.word	0x20000008
 80030bc:	2001dd28 	.word	0x2001dd28

080030c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return uwTick;
 80030c4:	4b03      	ldr	r3, [pc, #12]	@ (80030d4 <HAL_GetTick+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	2001dd28 	.word	0x2001dd28

080030d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff ffee 	bl	80030c0 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d005      	beq.n	80030fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_Delay+0x44>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030fe:	bf00      	nop
 8003100:	f7ff ffde 	bl	80030c0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	429a      	cmp	r2, r3
 800310e:	d8f7      	bhi.n	8003100 <HAL_Delay+0x28>
  {
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000008 	.word	0x20000008

08003120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e033      	b.n	800319e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff faf8 	bl	8002734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d118      	bne.n	8003190 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003166:	f023 0302 	bic.w	r3, r3, #2
 800316a:	f043 0202 	orr.w	r2, r3, #2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fac8 	bl	8003708 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	f023 0303 	bic.w	r3, r3, #3
 8003186:	f043 0201 	orr.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40
 800318e:	e001      	b.n	8003194 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_Start_DMA+0x1e>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0e9      	b.n	800339a <HAL_ADC_Start_DMA+0x1f2>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d018      	beq.n	800320e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ec:	4b6d      	ldr	r3, [pc, #436]	@ (80033a4 <HAL_ADC_Start_DMA+0x1fc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6d      	ldr	r2, [pc, #436]	@ (80033a8 <HAL_ADC_Start_DMA+0x200>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0c9a      	lsrs	r2, r3, #18
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003200:	e002      	b.n	8003208 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3b01      	subs	r3, #1
 8003206:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f9      	bne.n	8003202 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800321c:	d107      	bne.n	800322e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800322c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 80a1 	bne.w	8003380 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003268:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800327c:	d106      	bne.n	800328c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f023 0206 	bic.w	r2, r3, #6
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
 800328a:	e002      	b.n	8003292 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800329a:	4b44      	ldr	r3, [pc, #272]	@ (80033ac <HAL_ADC_Start_DMA+0x204>)
 800329c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	4a43      	ldr	r2, [pc, #268]	@ (80033b0 <HAL_ADC_Start_DMA+0x208>)
 80032a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	4a42      	ldr	r2, [pc, #264]	@ (80033b4 <HAL_ADC_Start_DMA+0x20c>)
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	4a41      	ldr	r2, [pc, #260]	@ (80033b8 <HAL_ADC_Start_DMA+0x210>)
 80032b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80032be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80032ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	334c      	adds	r3, #76	@ 0x4c
 80032ea:	4619      	mov	r1, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f000 ffb4 	bl	800425c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d12a      	bne.n	8003356 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2d      	ldr	r2, [pc, #180]	@ (80033bc <HAL_ADC_Start_DMA+0x214>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d015      	beq.n	8003336 <HAL_ADC_Start_DMA+0x18e>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2c      	ldr	r2, [pc, #176]	@ (80033c0 <HAL_ADC_Start_DMA+0x218>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d105      	bne.n	8003320 <HAL_ADC_Start_DMA+0x178>
 8003314:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <HAL_ADC_Start_DMA+0x204>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a27      	ldr	r2, [pc, #156]	@ (80033c4 <HAL_ADC_Start_DMA+0x21c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d136      	bne.n	8003398 <HAL_ADC_Start_DMA+0x1f0>
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_ADC_Start_DMA+0x204>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d130      	bne.n	8003398 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d129      	bne.n	8003398 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	e020      	b.n	8003398 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a18      	ldr	r2, [pc, #96]	@ (80033bc <HAL_ADC_Start_DMA+0x214>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d11b      	bne.n	8003398 <HAL_ADC_Start_DMA+0x1f0>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d114      	bne.n	8003398 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	e00b      	b.n	8003398 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0210 	orr.w	r2, r3, #16
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000
 80033a8:	431bde83 	.word	0x431bde83
 80033ac:	40012300 	.word	0x40012300
 80033b0:	08003901 	.word	0x08003901
 80033b4:	080039bb 	.word	0x080039bb
 80033b8:	080039d7 	.word	0x080039d7
 80033bc:	40012000 	.word	0x40012000
 80033c0:	40012100 	.word	0x40012100
 80033c4:	40012200 	.word	0x40012200

080033c8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_Stop_DMA+0x1a>
 80033de:	2302      	movs	r3, #2
 80033e0:	e048      	b.n	8003474 <HAL_ADC_Stop_DMA+0xac>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d130      	bne.n	800346a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003416:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d10f      	bne.n	8003446 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342a:	4618      	mov	r0, r3
 800342c:	f000 ff6e 	bl	800430c <HAL_DMA_Abort>
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003454:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x1c>
 80034bc:	2302      	movs	r3, #2
 80034be:	e113      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x244>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d925      	bls.n	800351c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68d9      	ldr	r1, [r3, #12]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	3b1e      	subs	r3, #30
 80034e6:	2207      	movs	r2, #7
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43da      	mvns	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	400a      	ands	r2, r1
 80034f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68d9      	ldr	r1, [r3, #12]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	4603      	mov	r3, r0
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4403      	add	r3, r0
 800350e:	3b1e      	subs	r3, #30
 8003510:	409a      	lsls	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	e022      	b.n	8003562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6919      	ldr	r1, [r3, #16]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	2207      	movs	r2, #7
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	400a      	ands	r2, r1
 800353e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6919      	ldr	r1, [r3, #16]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	4618      	mov	r0, r3
 8003552:	4603      	mov	r3, r0
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4403      	add	r3, r0
 8003558:	409a      	lsls	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b06      	cmp	r3, #6
 8003568:	d824      	bhi.n	80035b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	3b05      	subs	r3, #5
 800357c:	221f      	movs	r2, #31
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	400a      	ands	r2, r1
 800358a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	4618      	mov	r0, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	3b05      	subs	r3, #5
 80035a6:	fa00 f203 	lsl.w	r2, r0, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b2:	e04c      	b.n	800364e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d824      	bhi.n	8003606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	3b23      	subs	r3, #35	@ 0x23
 80035ce:	221f      	movs	r2, #31
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43da      	mvns	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	400a      	ands	r2, r1
 80035dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	4618      	mov	r0, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	3b23      	subs	r3, #35	@ 0x23
 80035f8:	fa00 f203 	lsl.w	r2, r0, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
 8003604:	e023      	b.n	800364e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	3b41      	subs	r3, #65	@ 0x41
 8003618:	221f      	movs	r2, #31
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	400a      	ands	r2, r1
 8003626:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	4618      	mov	r0, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	3b41      	subs	r3, #65	@ 0x41
 8003642:	fa00 f203 	lsl.w	r2, r0, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800364e:	4b29      	ldr	r3, [pc, #164]	@ (80036f4 <HAL_ADC_ConfigChannel+0x250>)
 8003650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a28      	ldr	r2, [pc, #160]	@ (80036f8 <HAL_ADC_ConfigChannel+0x254>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d10f      	bne.n	800367c <HAL_ADC_ConfigChannel+0x1d8>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b12      	cmp	r3, #18
 8003662:	d10b      	bne.n	800367c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1d      	ldr	r2, [pc, #116]	@ (80036f8 <HAL_ADC_ConfigChannel+0x254>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d12b      	bne.n	80036de <HAL_ADC_ConfigChannel+0x23a>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <HAL_ADC_ConfigChannel+0x258>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x1f4>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b11      	cmp	r3, #17
 8003696:	d122      	bne.n	80036de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a11      	ldr	r2, [pc, #68]	@ (80036fc <HAL_ADC_ConfigChannel+0x258>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d111      	bne.n	80036de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ba:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <HAL_ADC_ConfigChannel+0x25c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a11      	ldr	r2, [pc, #68]	@ (8003704 <HAL_ADC_ConfigChannel+0x260>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	0c9a      	lsrs	r2, r3, #18
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036d0:	e002      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f9      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40012300 	.word	0x40012300
 80036f8:	40012000 	.word	0x40012000
 80036fc:	10000012 	.word	0x10000012
 8003700:	20000000 	.word	0x20000000
 8003704:	431bde83 	.word	0x431bde83

08003708 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003710:	4b79      	ldr	r3, [pc, #484]	@ (80038f8 <ADC_Init+0x1f0>)
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800373c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	021a      	lsls	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6899      	ldr	r1, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	4a58      	ldr	r2, [pc, #352]	@ (80038fc <ADC_Init+0x1f4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d022      	beq.n	80037e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6899      	ldr	r1, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6899      	ldr	r1, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	e00f      	b.n	8003806 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003804:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0202 	bic.w	r2, r2, #2
 8003814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6899      	ldr	r1, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	7e1b      	ldrb	r3, [r3, #24]
 8003820:	005a      	lsls	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01b      	beq.n	800386c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003842:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003852:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	3b01      	subs	r3, #1
 8003860:	035a      	lsls	r2, r3, #13
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	e007      	b.n	800387c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800387a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800388a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	3b01      	subs	r3, #1
 8003898:	051a      	lsls	r2, r3, #20
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6899      	ldr	r1, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038be:	025a      	lsls	r2, r3, #9
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6899      	ldr	r1, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	029a      	lsls	r2, r3, #10
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40012300 	.word	0x40012300
 80038fc:	0f000001 	.word	0x0f000001

08003900 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003916:	2b00      	cmp	r3, #0
 8003918:	d13c      	bne.n	8003994 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d12b      	bne.n	800398c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	d127      	bne.n	800398c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003942:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003946:	2b00      	cmp	r3, #0
 8003948:	d006      	beq.n	8003958 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003954:	2b00      	cmp	r3, #0
 8003956:	d119      	bne.n	800398c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0220 	bic.w	r2, r2, #32
 8003966:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7fd fbcd 	bl	800112c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003992:	e00e      	b.n	80039b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff fd75 	bl	8003490 <HAL_ADC_ErrorCallback>
}
 80039a6:	e004      	b.n	80039b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff fd57 	bl	800347c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2240      	movs	r2, #64	@ 0x40
 80039e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f043 0204 	orr.w	r2, r3, #4
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff fd4a 	bl	8003490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a20:	4013      	ands	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a36:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	60d3      	str	r3, [r2, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <__NVIC_GetPriorityGrouping+0x18>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f003 0307 	and.w	r3, r3, #7
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	db0b      	blt.n	8003a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	f003 021f 	and.w	r2, r3, #31
 8003a80:	4907      	ldr	r1, [pc, #28]	@ (8003aa0 <__NVIC_EnableIRQ+0x38>)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2001      	movs	r0, #1
 8003a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000e100 	.word	0xe000e100

08003aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	6039      	str	r1, [r7, #0]
 8003aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	db0a      	blt.n	8003ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	490c      	ldr	r1, [pc, #48]	@ (8003af0 <__NVIC_SetPriority+0x4c>)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	0112      	lsls	r2, r2, #4
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003acc:	e00a      	b.n	8003ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4908      	ldr	r1, [pc, #32]	@ (8003af4 <__NVIC_SetPriority+0x50>)
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	3b04      	subs	r3, #4
 8003adc:	0112      	lsls	r2, r2, #4
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	761a      	strb	r2, [r3, #24]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000e100 	.word	0xe000e100
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	@ 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f1c3 0307 	rsb	r3, r3, #7
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	bf28      	it	cs
 8003b16:	2304      	movcs	r3, #4
 8003b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d902      	bls.n	8003b28 <NVIC_EncodePriority+0x30>
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3b03      	subs	r3, #3
 8003b26:	e000      	b.n	8003b2a <NVIC_EncodePriority+0x32>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43da      	mvns	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b40:	f04f 31ff 	mov.w	r1, #4294967295
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	43d9      	mvns	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b50:	4313      	orrs	r3, r2
         );
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3724      	adds	r7, #36	@ 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b70:	d301      	bcc.n	8003b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b72:	2301      	movs	r3, #1
 8003b74:	e00f      	b.n	8003b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <SysTick_Config+0x40>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b7e:	210f      	movs	r1, #15
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	f7ff ff8e 	bl	8003aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b88:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <SysTick_Config+0x40>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b8e:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <SysTick_Config+0x40>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000e010 	.word	0xe000e010

08003ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff29 	bl	8003a04 <__NVIC_SetPriorityGrouping>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bcc:	f7ff ff3e 	bl	8003a4c <__NVIC_GetPriorityGrouping>
 8003bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	6978      	ldr	r0, [r7, #20]
 8003bd8:	f7ff ff8e 	bl	8003af8 <NVIC_EncodePriority>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff5d 	bl	8003aa4 <__NVIC_SetPriority>
}
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff31 	bl	8003a68 <__NVIC_EnableIRQ>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ffa2 	bl	8003b60 <SysTick_Config>
 8003c1c:	4603      	mov	r3, r0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_DCMI_Start_DMA+0x20>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e086      	b.n	8003d56 <HAL_DCMI_Start_DMA+0x12e>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c66:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0202 	bic.w	r2, r2, #2
 8003c76:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c8c:	4a34      	ldr	r2, [pc, #208]	@ (8003d60 <HAL_DCMI_Start_DMA+0x138>)
 8003c8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c94:	4a33      	ldr	r2, [pc, #204]	@ (8003d64 <HAL_DCMI_Start_DMA+0x13c>)
 8003c96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb2:	d20a      	bcs.n	8003cca <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3328      	adds	r3, #40	@ 0x28
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	f000 faca 	bl	800425c <HAL_DMA_Start_IT>
 8003cc8:	e038      	b.n	8003d3c <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cce:	4a24      	ldr	r2, [pc, #144]	@ (8003d60 <HAL_DCMI_Start_DMA+0x138>)
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8003ce4:	e009      	b.n	8003cfa <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	085a      	lsrs	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf4:	005a      	lsls	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d02:	d2f0      	bcs.n	8003ce6 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	1e9a      	subs	r2, r3, #2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	4413      	add	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3328      	adds	r3, #40	@ 0x28
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	f000 fde4 	bl	8004904 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	08003eb5 	.word	0x08003eb5
 8003d64:	08003fdf 	.word	0x08003fdf

08003d68 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2204      	movs	r2, #4
 8003d88:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2204      	movs	r2, #4
 8003d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e60 <HAL_DCMI_IRQHandler+0xf8>)
 8003da4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fb1e 	bl	80043ec <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	f043 0201 	orr.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dda:	4a21      	ldr	r2, [pc, #132]	@ (8003e60 <HAL_DCMI_IRQHandler+0xf8>)
 8003ddc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fb02 	bl	80043ec <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2210      	movs	r2, #16
 8003df8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f83c 	bl	8003e78 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2208      	movs	r2, #8
 8003e10:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f83a 	bl	8003e8c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d019      	beq.n	8003e56 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d107      	bne.n	8003e40 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 021e 	bic.w	r2, r2, #30
 8003e3e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f825 	bl	8003ea0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	08003fdf 	.word	0x08003fdf

08003e64 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec4:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d043      	beq.n	8003f56 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eda:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d118      	bne.n	8003f1a <DCMI_DMAXferCplt+0x66>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d015      	beq.n	8003f1a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f00:	00da      	lsls	r2, r3, #3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f001 fe43 	bl	8005b94 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f18:	e044      	b.n	8003fa4 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d13c      	bne.n	8003fa4 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	00da      	lsls	r2, r3, #3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	2201      	movs	r2, #1
 8003f44:	4619      	mov	r1, r3
 8003f46:	f001 fe25 	bl	8005b94 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4e:	1e5a      	subs	r2, r3, #1
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f54:	e026      	b.n	8003fa4 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d006      	beq.n	8003f74 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	e017      	b.n	8003fa4 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10f      	bne.n	8003fa4 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f88:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8e:	0099      	lsls	r1, r3, #2
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	440a      	add	r2, r1
 8003f9a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d112      	bne.n	8003fd6 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d103      	bne.n	8003fd6 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fea:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d003      	beq.n	8003ffe <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff ff30 	bl	8003e64 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e069      	b.n	80040f2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fe fbf6 	bl	8002824 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fe fbf3 	bl	8002824 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6819      	ldr	r1, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <HAL_DCMI_Init+0xf0>)
 8004052:	400b      	ands	r3, r1
 8004054:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800406a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004076:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004082:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 800408e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800409a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d112      	bne.n	80040d2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7f1b      	ldrb	r3, [r3, #28]
 80040b0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	7f5b      	ldrb	r3, [r3, #29]
 80040b6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80040b8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7f9b      	ldrb	r3, [r3, #30]
 80040be:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80040c0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7fdb      	ldrb	r3, [r3, #31]
 80040c8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80040ce:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80040d0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 021e 	orr.w	r2, r2, #30
 80040e0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	ffe0f007 	.word	0xffe0f007

08004100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800410c:	f7fe ffd8 	bl	80030c0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e099      	b.n	8004250 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800413c:	e00f      	b.n	800415e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800413e:	f7fe ffbf 	bl	80030c0 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b05      	cmp	r3, #5
 800414a:	d908      	bls.n	800415e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2203      	movs	r2, #3
 8004156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e078      	b.n	8004250 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e8      	bne.n	800413e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4b38      	ldr	r3, [pc, #224]	@ (8004258 <HAL_DMA_Init+0x158>)
 8004178:	4013      	ands	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800418a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d107      	bne.n	80041c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c0:	4313      	orrs	r3, r2
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0307 	bic.w	r3, r3, #7
 80041de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d117      	bne.n	8004222 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fb01 	bl	800480c <DMA_CheckFifoParam>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2240      	movs	r2, #64	@ 0x40
 8004214:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800421e:	2301      	movs	r3, #1
 8004220:	e016      	b.n	8004250 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fab8 	bl	80047a0 <DMA_CalcBaseAndBitshift>
 8004230:	4603      	mov	r3, r0
 8004232:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	223f      	movs	r2, #63	@ 0x3f
 800423a:	409a      	lsls	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	f010803f 	.word	0xf010803f

0800425c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004272:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_DMA_Start_IT+0x26>
 800427e:	2302      	movs	r3, #2
 8004280:	e040      	b.n	8004304 <HAL_DMA_Start_IT+0xa8>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d12f      	bne.n	80042f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fa4a 	bl	8004744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	223f      	movs	r2, #63	@ 0x3f
 80042b6:	409a      	lsls	r2, r3
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0216 	orr.w	r2, r2, #22
 80042ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0208 	orr.w	r2, r2, #8
 80042e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e005      	b.n	8004302 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
 8004300:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004302:	7dfb      	ldrb	r3, [r7, #23]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004318:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800431a:	f7fe fed1 	bl	80030c0 <HAL_GetTick>
 800431e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d008      	beq.n	800433e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2280      	movs	r2, #128	@ 0x80
 8004330:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e052      	b.n	80043e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0216 	bic.w	r2, r2, #22
 800434c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800435c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <HAL_DMA_Abort+0x62>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0208 	bic.w	r2, r2, #8
 800437c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800438e:	e013      	b.n	80043b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004390:	f7fe fe96 	bl	80030c0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b05      	cmp	r3, #5
 800439c:	d90c      	bls.n	80043b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2203      	movs	r2, #3
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e015      	b.n	80043e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e4      	bne.n	8004390 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	223f      	movs	r2, #63	@ 0x3f
 80043cc:	409a      	lsls	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d004      	beq.n	800440a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2280      	movs	r2, #128	@ 0x80
 8004404:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e00c      	b.n	8004424 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2205      	movs	r2, #5
 800440e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800443c:	4b8e      	ldr	r3, [pc, #568]	@ (8004678 <HAL_DMA_IRQHandler+0x248>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a8e      	ldr	r2, [pc, #568]	@ (800467c <HAL_DMA_IRQHandler+0x24c>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	0a9b      	lsrs	r3, r3, #10
 8004448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	2208      	movs	r2, #8
 800445c:	409a      	lsls	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d01a      	beq.n	800449c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d013      	beq.n	800449c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0204 	bic.w	r2, r2, #4
 8004482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004488:	2208      	movs	r2, #8
 800448a:	409a      	lsls	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a0:	2201      	movs	r2, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d012      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044be:	2201      	movs	r2, #1
 80044c0:	409a      	lsls	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	f043 0202 	orr.w	r2, r3, #2
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d6:	2204      	movs	r2, #4
 80044d8:	409a      	lsls	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	2204      	movs	r2, #4
 80044f6:	409a      	lsls	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	f043 0204 	orr.w	r2, r3, #4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450c:	2210      	movs	r2, #16
 800450e:	409a      	lsls	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4013      	ands	r3, r2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d043      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d03c      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452a:	2210      	movs	r2, #16
 800452c:	409a      	lsls	r2, r3
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d018      	beq.n	8004572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d108      	bne.n	8004560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d024      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
 800455e:	e01f      	b.n	80045a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
 8004570:	e016      	b.n	80045a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0208 	bic.w	r2, r2, #8
 800458e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a4:	2220      	movs	r2, #32
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 808f 	beq.w	80046d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8087 	beq.w	80046d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c6:	2220      	movs	r2, #32
 80045c8:	409a      	lsls	r2, r3
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d136      	bne.n	8004648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0216 	bic.w	r2, r2, #22
 80045e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_DMA_IRQHandler+0x1da>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0208 	bic.w	r2, r2, #8
 8004618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461e:	223f      	movs	r2, #63	@ 0x3f
 8004620:	409a      	lsls	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d07e      	beq.n	800473c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
        }
        return;
 8004646:	e079      	b.n	800473c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01d      	beq.n	8004692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10d      	bne.n	8004680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	2b00      	cmp	r3, #0
 800466a:	d031      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4798      	blx	r3
 8004674:	e02c      	b.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
 8004676:	bf00      	nop
 8004678:	20000000 	.word	0x20000000
 800467c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d023      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
 8004690:	e01e      	b.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10f      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0210 	bic.w	r2, r2, #16
 80046ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d032      	beq.n	800473e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d022      	beq.n	800472a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2205      	movs	r2, #5
 80046e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3301      	adds	r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	d307      	bcc.n	8004718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f2      	bne.n	80046fc <HAL_DMA_IRQHandler+0x2cc>
 8004716:	e000      	b.n	800471a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
 800473a:	e000      	b.n	800473e <HAL_DMA_IRQHandler+0x30e>
        return;
 800473c:	bf00      	nop
    }
  }
}
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b40      	cmp	r3, #64	@ 0x40
 8004770:	d108      	bne.n	8004784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004782:	e007      	b.n	8004794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	3b10      	subs	r3, #16
 80047b0:	4a14      	ldr	r2, [pc, #80]	@ (8004804 <DMA_CalcBaseAndBitshift+0x64>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047ba:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <DMA_CalcBaseAndBitshift+0x68>)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d909      	bls.n	80047e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	1d1a      	adds	r2, r3, #4
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	659a      	str	r2, [r3, #88]	@ 0x58
 80047e0:	e007      	b.n	80047f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	aaaaaaab 	.word	0xaaaaaaab
 8004808:	0800db54 	.word	0x0800db54

0800480c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d11f      	bne.n	8004866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d856      	bhi.n	80048da <DMA_CheckFifoParam+0xce>
 800482c:	a201      	add	r2, pc, #4	@ (adr r2, 8004834 <DMA_CheckFifoParam+0x28>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004845 	.word	0x08004845
 8004838:	08004857 	.word	0x08004857
 800483c:	08004845 	.word	0x08004845
 8004840:	080048db 	.word	0x080048db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d046      	beq.n	80048de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004854:	e043      	b.n	80048de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800485e:	d140      	bne.n	80048e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004864:	e03d      	b.n	80048e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800486e:	d121      	bne.n	80048b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b03      	cmp	r3, #3
 8004874:	d837      	bhi.n	80048e6 <DMA_CheckFifoParam+0xda>
 8004876:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <DMA_CheckFifoParam+0x70>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	0800488d 	.word	0x0800488d
 8004880:	08004893 	.word	0x08004893
 8004884:	0800488d 	.word	0x0800488d
 8004888:	080048a5 	.word	0x080048a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e030      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d025      	beq.n	80048ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a2:	e022      	b.n	80048ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048ac:	d11f      	bne.n	80048ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048b2:	e01c      	b.n	80048ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d903      	bls.n	80048c2 <DMA_CheckFifoParam+0xb6>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d003      	beq.n	80048c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048c0:	e018      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
      break;
 80048c6:	e015      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00e      	beq.n	80048f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e00b      	b.n	80048f2 <DMA_CheckFifoParam+0xe6>
      break;
 80048da:	bf00      	nop
 80048dc:	e00a      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048de:	bf00      	nop
 80048e0:	e008      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048e2:	bf00      	nop
 80048e4:	e006      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048e6:	bf00      	nop
 80048e8:	e004      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048ea:	bf00      	nop
 80048ec:	e002      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80048ee:	bf00      	nop
 80048f0:	e000      	b.n	80048f4 <DMA_CheckFifoParam+0xe8>
      break;
 80048f2:	bf00      	nop
    }
  } 
  
  return status; 
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop

08004904 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b80      	cmp	r3, #128	@ 0x80
 800491c:	d106      	bne.n	800492c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f001 b911 	b.w	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2240      	movs	r2, #64	@ 0x40
 8004948:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f001 b8ff 	b.w	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004956:	2b01      	cmp	r3, #1
 8004958:	d102      	bne.n	8004960 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800495a:	2302      	movs	r3, #2
 800495c:	f001 b8f7 	b.w	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	f041 80e5 	bne.w	8005b40 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004992:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f001 f910 	bl	8005bc8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	4b8d      	ldr	r3, [pc, #564]	@ (8004be4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d960      	bls.n	8004a76 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a8b      	ldr	r2, [pc, #556]	@ (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d057      	beq.n	8004a6e <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a8a      	ldr	r2, [pc, #552]	@ (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d050      	beq.n	8004a6a <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a88      	ldr	r2, [pc, #544]	@ (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d049      	beq.n	8004a66 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a87      	ldr	r2, [pc, #540]	@ (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d042      	beq.n	8004a62 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a85      	ldr	r2, [pc, #532]	@ (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d03a      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a84      	ldr	r2, [pc, #528]	@ (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d032      	beq.n	8004a56 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a82      	ldr	r2, [pc, #520]	@ (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02a      	beq.n	8004a50 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a81      	ldr	r2, [pc, #516]	@ (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a7f      	ldr	r2, [pc, #508]	@ (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01a      	beq.n	8004a44 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a7e      	ldr	r2, [pc, #504]	@ (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d012      	beq.n	8004a3e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00a      	beq.n	8004a38 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7b      	ldr	r2, [pc, #492]	@ (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d102      	bne.n	8004a32 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004a2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a30:	e01e      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a36:	e01b      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a38:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a3c:	e018      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a3e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a42:	e015      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a48:	e012      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a4e:	e00f      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a54:	e00c      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a5a:	e009      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a60:	e006      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a62:	2320      	movs	r3, #32
 8004a64:	e004      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a66:	2320      	movs	r3, #32
 8004a68:	e002      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a6a:	2320      	movs	r3, #32
 8004a6c:	e000      	b.n	8004a70 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a6e:	2320      	movs	r3, #32
 8004a70:	4a69      	ldr	r2, [pc, #420]	@ (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004a72:	60d3      	str	r3, [r2, #12]
 8004a74:	e14f      	b.n	8004d16 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4b67      	ldr	r3, [pc, #412]	@ (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d960      	bls.n	8004b44 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a58      	ldr	r2, [pc, #352]	@ (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d057      	beq.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a56      	ldr	r2, [pc, #344]	@ (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d050      	beq.n	8004b38 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a55      	ldr	r2, [pc, #340]	@ (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d049      	beq.n	8004b34 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a53      	ldr	r2, [pc, #332]	@ (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d042      	beq.n	8004b30 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a52      	ldr	r2, [pc, #328]	@ (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d03a      	beq.n	8004b2a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a50      	ldr	r2, [pc, #320]	@ (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d032      	beq.n	8004b24 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d02a      	beq.n	8004b1e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a4d      	ldr	r2, [pc, #308]	@ (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d022      	beq.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01a      	beq.n	8004b12 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d012      	beq.n	8004b0c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a49      	ldr	r2, [pc, #292]	@ (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00a      	beq.n	8004b06 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a47      	ldr	r2, [pc, #284]	@ (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d102      	bne.n	8004b00 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8004afa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004afe:	e01e      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b04:	e01b      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b06:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004b0a:	e018      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004b10:	e015      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b12:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004b16:	e012      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b1c:	e00f      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b22:	e00c      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b28:	e009      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b2e:	e006      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b30:	2320      	movs	r3, #32
 8004b32:	e004      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b34:	2320      	movs	r3, #32
 8004b36:	e002      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b38:	2320      	movs	r3, #32
 8004b3a:	e000      	b.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	4a36      	ldr	r2, [pc, #216]	@ (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004b40:	6093      	str	r3, [r2, #8]
 8004b42:	e0e8      	b.n	8004d16 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b35      	ldr	r3, [pc, #212]	@ (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	f240 8082 	bls.w	8004c56 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a24      	ldr	r2, [pc, #144]	@ (8004be8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d078      	beq.n	8004c4e <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a22      	ldr	r2, [pc, #136]	@ (8004bec <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d071      	beq.n	8004c4a <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a21      	ldr	r2, [pc, #132]	@ (8004bf0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d06a      	beq.n	8004c46 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d063      	beq.n	8004c42 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d05b      	beq.n	8004c3c <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d053      	beq.n	8004c36 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	@ (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d04b      	beq.n	8004c30 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d043      	beq.n	8004c2a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a18      	ldr	r2, [pc, #96]	@ (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d03b      	beq.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a16      	ldr	r2, [pc, #88]	@ (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d012      	beq.n	8004bdc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a15      	ldr	r2, [pc, #84]	@ (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a13      	ldr	r2, [pc, #76]	@ (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d102      	bne.n	8004bd0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8004bca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004bce:	e03f      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bd4:	e03c      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004bd6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004bda:	e039      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004bdc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004be0:	e036      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004be2:	bf00      	nop
 8004be4:	40026458 	.word	0x40026458
 8004be8:	40026010 	.word	0x40026010
 8004bec:	40026410 	.word	0x40026410
 8004bf0:	40026070 	.word	0x40026070
 8004bf4:	40026470 	.word	0x40026470
 8004bf8:	40026028 	.word	0x40026028
 8004bfc:	40026428 	.word	0x40026428
 8004c00:	40026088 	.word	0x40026088
 8004c04:	40026488 	.word	0x40026488
 8004c08:	40026040 	.word	0x40026040
 8004c0c:	40026440 	.word	0x40026440
 8004c10:	400260a0 	.word	0x400260a0
 8004c14:	400264a0 	.word	0x400264a0
 8004c18:	40026400 	.word	0x40026400
 8004c1c:	400260b8 	.word	0x400260b8
 8004c20:	40026058 	.word	0x40026058
 8004c24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004c28:	e012      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004c2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c2e:	e00f      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004c30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c34:	e00c      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004c36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c3a:	e009      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004c3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c40:	e006      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004c42:	2320      	movs	r3, #32
 8004c44:	e004      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004c46:	2320      	movs	r3, #32
 8004c48:	e002      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	e000      	b.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004c4e:	2320      	movs	r3, #32
 8004c50:	4a8c      	ldr	r2, [pc, #560]	@ (8004e84 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004c52:	60d3      	str	r3, [r2, #12]
 8004c54:	e05f      	b.n	8004d16 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a8b      	ldr	r2, [pc, #556]	@ (8004e88 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d057      	beq.n	8004d10 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a89      	ldr	r2, [pc, #548]	@ (8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d050      	beq.n	8004d0c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a88      	ldr	r2, [pc, #544]	@ (8004e90 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d049      	beq.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a86      	ldr	r2, [pc, #536]	@ (8004e94 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d042      	beq.n	8004d04 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a85      	ldr	r2, [pc, #532]	@ (8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d03a      	beq.n	8004cfe <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a83      	ldr	r2, [pc, #524]	@ (8004e9c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d032      	beq.n	8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a82      	ldr	r2, [pc, #520]	@ (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d02a      	beq.n	8004cf2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a80      	ldr	r2, [pc, #512]	@ (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d022      	beq.n	8004cec <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a7f      	ldr	r2, [pc, #508]	@ (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01a      	beq.n	8004ce6 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a7d      	ldr	r2, [pc, #500]	@ (8004eac <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d012      	beq.n	8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00a      	beq.n	8004cda <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d102      	bne.n	8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004cce:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004cd2:	e01e      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004cd4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cd8:	e01b      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004cda:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004cde:	e018      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004ce0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ce4:	e015      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004ce6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004cea:	e012      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004cec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cf0:	e00f      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004cf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cf6:	e00c      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004cf8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cfc:	e009      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d02:	e006      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004d04:	2320      	movs	r3, #32
 8004d06:	e004      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004d08:	2320      	movs	r3, #32
 8004d0a:	e002      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	e000      	b.n	8004d12 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004d10:	2320      	movs	r3, #32
 8004d12:	4a5c      	ldr	r2, [pc, #368]	@ (8004e84 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004d14:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4b66      	ldr	r3, [pc, #408]	@ (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d960      	bls.n	8004de4 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a58      	ldr	r2, [pc, #352]	@ (8004e88 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d057      	beq.n	8004ddc <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a56      	ldr	r2, [pc, #344]	@ (8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d050      	beq.n	8004dd8 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a55      	ldr	r2, [pc, #340]	@ (8004e90 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d049      	beq.n	8004dd4 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a53      	ldr	r2, [pc, #332]	@ (8004e94 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d042      	beq.n	8004dd0 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a52      	ldr	r2, [pc, #328]	@ (8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d03a      	beq.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a50      	ldr	r2, [pc, #320]	@ (8004e9c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d032      	beq.n	8004dc4 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a4f      	ldr	r2, [pc, #316]	@ (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d02a      	beq.n	8004dbe <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a4d      	ldr	r2, [pc, #308]	@ (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4c      	ldr	r2, [pc, #304]	@ (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01a      	beq.n	8004db2 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a4a      	ldr	r2, [pc, #296]	@ (8004eac <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d012      	beq.n	8004dac <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a49      	ldr	r2, [pc, #292]	@ (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00a      	beq.n	8004da6 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a47      	ldr	r2, [pc, #284]	@ (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d102      	bne.n	8004da0 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8004d9a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004d9e:	e01e      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004da0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004da4:	e01b      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004da6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004daa:	e018      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004dac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004db0:	e015      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004db2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004db6:	e012      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dbc:	e00f      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dc2:	e00c      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dc8:	e009      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dce:	e006      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	e004      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	e002      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	e000      	b.n	8004dde <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	4a37      	ldr	r2, [pc, #220]	@ (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8004de0:	60d3      	str	r3, [r2, #12]
 8004de2:	e14f      	b.n	8005084 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b35      	ldr	r3, [pc, #212]	@ (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8004dec:	429a      	cmp	r2, r3
 8004dee:	f240 8082 	bls.w	8004ef6 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a24      	ldr	r2, [pc, #144]	@ (8004e88 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d078      	beq.n	8004eee <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a22      	ldr	r2, [pc, #136]	@ (8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d071      	beq.n	8004eea <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a21      	ldr	r2, [pc, #132]	@ (8004e90 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d06a      	beq.n	8004ee6 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d063      	beq.n	8004ee2 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d05b      	beq.n	8004edc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1c      	ldr	r2, [pc, #112]	@ (8004e9c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d053      	beq.n	8004ed6 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d04b      	beq.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d043      	beq.n	8004eca <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d03b      	beq.n	8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d012      	beq.n	8004e7c <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a15      	ldr	r2, [pc, #84]	@ (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00a      	beq.n	8004e76 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a13      	ldr	r2, [pc, #76]	@ (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d102      	bne.n	8004e70 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8004e6a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004e6e:	e03f      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004e70:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004e74:	e03c      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004e76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004e7a:	e039      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004e7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004e80:	e036      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004e82:	bf00      	nop
 8004e84:	40026000 	.word	0x40026000
 8004e88:	40026010 	.word	0x40026010
 8004e8c:	40026410 	.word	0x40026410
 8004e90:	40026070 	.word	0x40026070
 8004e94:	40026470 	.word	0x40026470
 8004e98:	40026028 	.word	0x40026028
 8004e9c:	40026428 	.word	0x40026428
 8004ea0:	40026088 	.word	0x40026088
 8004ea4:	40026488 	.word	0x40026488
 8004ea8:	40026040 	.word	0x40026040
 8004eac:	40026440 	.word	0x40026440
 8004eb0:	400260a0 	.word	0x400260a0
 8004eb4:	400264a0 	.word	0x400264a0
 8004eb8:	40026458 	.word	0x40026458
 8004ebc:	40026400 	.word	0x40026400
 8004ec0:	400260b8 	.word	0x400260b8
 8004ec4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004ec8:	e012      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ece:	e00f      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ed4:	e00c      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eda:	e009      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ee0:	e006      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	e004      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004ee6:	2310      	movs	r3, #16
 8004ee8:	e002      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004eea:	2310      	movs	r3, #16
 8004eec:	e000      	b.n	8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8004eee:	2310      	movs	r3, #16
 8004ef0:	4a8c      	ldr	r2, [pc, #560]	@ (8005124 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004ef2:	6093      	str	r3, [r2, #8]
 8004ef4:	e0c6      	b.n	8005084 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b8a      	ldr	r3, [pc, #552]	@ (8005128 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d960      	bls.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a89      	ldr	r2, [pc, #548]	@ (800512c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d057      	beq.n	8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a87      	ldr	r2, [pc, #540]	@ (8005130 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d050      	beq.n	8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a86      	ldr	r2, [pc, #536]	@ (8005134 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d049      	beq.n	8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a84      	ldr	r2, [pc, #528]	@ (8005138 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d042      	beq.n	8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a83      	ldr	r2, [pc, #524]	@ (800513c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d03a      	beq.n	8004faa <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a81      	ldr	r2, [pc, #516]	@ (8005140 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d032      	beq.n	8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a80      	ldr	r2, [pc, #512]	@ (8005144 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d02a      	beq.n	8004f9e <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a7e      	ldr	r2, [pc, #504]	@ (8005148 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d022      	beq.n	8004f98 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a7d      	ldr	r2, [pc, #500]	@ (800514c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d01a      	beq.n	8004f92 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a7b      	ldr	r2, [pc, #492]	@ (8005150 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d012      	beq.n	8004f8c <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8005154 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00a      	beq.n	8004f86 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a78      	ldr	r2, [pc, #480]	@ (8005158 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d102      	bne.n	8004f80 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8004f7a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004f7e:	e01e      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004f80:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004f84:	e01b      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004f86:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004f8a:	e018      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004f8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004f90:	e015      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004f92:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004f96:	e012      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f9c:	e00f      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fa2:	e00c      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fa8:	e009      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fae:	e006      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	e004      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	e002      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004fb8:	2310      	movs	r3, #16
 8004fba:	e000      	b.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	4a67      	ldr	r2, [pc, #412]	@ (800515c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8004fc0:	60d3      	str	r3, [r2, #12]
 8004fc2:	e05f      	b.n	8005084 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a58      	ldr	r2, [pc, #352]	@ (800512c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d057      	beq.n	800507e <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a57      	ldr	r2, [pc, #348]	@ (8005130 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d050      	beq.n	800507a <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a55      	ldr	r2, [pc, #340]	@ (8005134 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d049      	beq.n	8005076 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a54      	ldr	r2, [pc, #336]	@ (8005138 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d042      	beq.n	8005072 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a52      	ldr	r2, [pc, #328]	@ (800513c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d03a      	beq.n	800506c <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a51      	ldr	r2, [pc, #324]	@ (8005140 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d032      	beq.n	8005066 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a4f      	ldr	r2, [pc, #316]	@ (8005144 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d02a      	beq.n	8005060 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a4e      	ldr	r2, [pc, #312]	@ (8005148 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a4c      	ldr	r2, [pc, #304]	@ (800514c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01a      	beq.n	8005054 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a4b      	ldr	r2, [pc, #300]	@ (8005150 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d012      	beq.n	800504e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a49      	ldr	r2, [pc, #292]	@ (8005154 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00a      	beq.n	8005048 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a48      	ldr	r2, [pc, #288]	@ (8005158 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d102      	bne.n	8005042 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 800503c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005040:	e01e      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005042:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005046:	e01b      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005048:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800504c:	e018      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800504e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005052:	e015      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005054:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005058:	e012      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800505a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800505e:	e00f      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005060:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005064:	e00c      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800506a:	e009      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800506c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005070:	e006      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005072:	2310      	movs	r3, #16
 8005074:	e004      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005076:	2310      	movs	r3, #16
 8005078:	e002      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800507a:	2310      	movs	r3, #16
 800507c:	e000      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800507e:	2310      	movs	r3, #16
 8005080:	4a36      	ldr	r2, [pc, #216]	@ (800515c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8005082:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	4b35      	ldr	r3, [pc, #212]	@ (8005160 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800508c:	429a      	cmp	r2, r3
 800508e:	f240 8082 	bls.w	8005196 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a25      	ldr	r2, [pc, #148]	@ (800512c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d078      	beq.n	800518e <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a23      	ldr	r2, [pc, #140]	@ (8005130 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d071      	beq.n	800518a <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a22      	ldr	r2, [pc, #136]	@ (8005134 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d06a      	beq.n	8005186 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a20      	ldr	r2, [pc, #128]	@ (8005138 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d063      	beq.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1f      	ldr	r2, [pc, #124]	@ (800513c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d05b      	beq.n	800517c <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d053      	beq.n	8005176 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d04b      	beq.n	8005170 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005148 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d043      	beq.n	800516a <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a19      	ldr	r2, [pc, #100]	@ (800514c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d03b      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a17      	ldr	r2, [pc, #92]	@ (8005150 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d012      	beq.n	800511c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a16      	ldr	r2, [pc, #88]	@ (8005154 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00a      	beq.n	8005116 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a14      	ldr	r2, [pc, #80]	@ (8005158 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d102      	bne.n	8005110 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800510a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800510e:	e03f      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005110:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005114:	e03c      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005116:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800511a:	e039      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800511c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005120:	e036      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005122:	bf00      	nop
 8005124:	40026400 	.word	0x40026400
 8005128:	40026058 	.word	0x40026058
 800512c:	40026010 	.word	0x40026010
 8005130:	40026410 	.word	0x40026410
 8005134:	40026070 	.word	0x40026070
 8005138:	40026470 	.word	0x40026470
 800513c:	40026028 	.word	0x40026028
 8005140:	40026428 	.word	0x40026428
 8005144:	40026088 	.word	0x40026088
 8005148:	40026488 	.word	0x40026488
 800514c:	40026040 	.word	0x40026040
 8005150:	40026440 	.word	0x40026440
 8005154:	400260a0 	.word	0x400260a0
 8005158:	400264a0 	.word	0x400264a0
 800515c:	40026000 	.word	0x40026000
 8005160:	40026458 	.word	0x40026458
 8005164:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005168:	e012      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800516a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800516e:	e00f      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005174:	e00c      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005176:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800517a:	e009      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800517c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005180:	e006      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005182:	2308      	movs	r3, #8
 8005184:	e004      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005186:	2308      	movs	r3, #8
 8005188:	e002      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800518a:	2308      	movs	r3, #8
 800518c:	e000      	b.n	8005190 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800518e:	2308      	movs	r3, #8
 8005190:	4a8c      	ldr	r2, [pc, #560]	@ (80053c4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8005192:	60d3      	str	r3, [r2, #12]
 8005194:	e14e      	b.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	4b8a      	ldr	r3, [pc, #552]	@ (80053c8 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800519e:	429a      	cmp	r2, r3
 80051a0:	d960      	bls.n	8005264 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a89      	ldr	r2, [pc, #548]	@ (80053cc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d057      	beq.n	800525c <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a87      	ldr	r2, [pc, #540]	@ (80053d0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d050      	beq.n	8005258 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a86      	ldr	r2, [pc, #536]	@ (80053d4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d049      	beq.n	8005254 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a84      	ldr	r2, [pc, #528]	@ (80053d8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d042      	beq.n	8005250 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a83      	ldr	r2, [pc, #524]	@ (80053dc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d03a      	beq.n	800524a <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a81      	ldr	r2, [pc, #516]	@ (80053e0 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d032      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a80      	ldr	r2, [pc, #512]	@ (80053e4 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d02a      	beq.n	800523e <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a7e      	ldr	r2, [pc, #504]	@ (80053e8 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d022      	beq.n	8005238 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a7d      	ldr	r2, [pc, #500]	@ (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d01a      	beq.n	8005232 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a7b      	ldr	r2, [pc, #492]	@ (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d012      	beq.n	800522c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a7a      	ldr	r2, [pc, #488]	@ (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00a      	beq.n	8005226 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a78      	ldr	r2, [pc, #480]	@ (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d102      	bne.n	8005220 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800521a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800521e:	e01e      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005220:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005224:	e01b      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005226:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800522a:	e018      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800522c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005230:	e015      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005232:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005236:	e012      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800523c:	e00f      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800523e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005242:	e00c      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005244:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005248:	e009      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800524a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800524e:	e006      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005250:	2308      	movs	r3, #8
 8005252:	e004      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005254:	2308      	movs	r3, #8
 8005256:	e002      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005258:	2308      	movs	r3, #8
 800525a:	e000      	b.n	800525e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800525c:	2308      	movs	r3, #8
 800525e:	4a59      	ldr	r2, [pc, #356]	@ (80053c4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8005260:	6093      	str	r3, [r2, #8]
 8005262:	e0e7      	b.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	4b64      	ldr	r3, [pc, #400]	@ (80053fc <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800526c:	429a      	cmp	r2, r3
 800526e:	d960      	bls.n	8005332 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a55      	ldr	r2, [pc, #340]	@ (80053cc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d057      	beq.n	800532a <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a54      	ldr	r2, [pc, #336]	@ (80053d0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d050      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a52      	ldr	r2, [pc, #328]	@ (80053d4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d049      	beq.n	8005322 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a51      	ldr	r2, [pc, #324]	@ (80053d8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d042      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a4f      	ldr	r2, [pc, #316]	@ (80053dc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03a      	beq.n	8005318 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a4e      	ldr	r2, [pc, #312]	@ (80053e0 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d032      	beq.n	8005312 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a4c      	ldr	r2, [pc, #304]	@ (80053e4 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d02a      	beq.n	800530c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a4b      	ldr	r2, [pc, #300]	@ (80053e8 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d022      	beq.n	8005306 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a49      	ldr	r2, [pc, #292]	@ (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01a      	beq.n	8005300 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a48      	ldr	r2, [pc, #288]	@ (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d012      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a46      	ldr	r2, [pc, #280]	@ (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00a      	beq.n	80052f4 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a45      	ldr	r2, [pc, #276]	@ (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d102      	bne.n	80052ee <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80052e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80052ec:	e01e      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80052ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052f2:	e01b      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80052f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80052f8:	e018      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80052fa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80052fe:	e015      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005300:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005304:	e012      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800530a:	e00f      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800530c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005310:	e00c      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005312:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005316:	e009      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800531c:	e006      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800531e:	2308      	movs	r3, #8
 8005320:	e004      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005322:	2308      	movs	r3, #8
 8005324:	e002      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005326:	2308      	movs	r3, #8
 8005328:	e000      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800532a:	2308      	movs	r3, #8
 800532c:	4a34      	ldr	r2, [pc, #208]	@ (8005400 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800532e:	60d3      	str	r3, [r2, #12]
 8005330:	e080      	b.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a25      	ldr	r2, [pc, #148]	@ (80053cc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d078      	beq.n	800542e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a23      	ldr	r2, [pc, #140]	@ (80053d0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d071      	beq.n	800542a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a22      	ldr	r2, [pc, #136]	@ (80053d4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d06a      	beq.n	8005426 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a20      	ldr	r2, [pc, #128]	@ (80053d8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d063      	beq.n	8005422 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d05b      	beq.n	800541c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d053      	beq.n	8005416 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d04b      	beq.n	8005410 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d043      	beq.n	800540a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a19      	ldr	r2, [pc, #100]	@ (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d03b      	beq.n	8005404 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d012      	beq.n	80053bc <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a16      	ldr	r2, [pc, #88]	@ (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00a      	beq.n	80053b6 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a14      	ldr	r2, [pc, #80]	@ (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d102      	bne.n	80053b0 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80053aa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80053ae:	e03f      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80053b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053b4:	e03c      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80053b6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80053ba:	e039      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80053bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80053c0:	e036      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80053c2:	bf00      	nop
 80053c4:	40026400 	.word	0x40026400
 80053c8:	400260b8 	.word	0x400260b8
 80053cc:	40026010 	.word	0x40026010
 80053d0:	40026410 	.word	0x40026410
 80053d4:	40026070 	.word	0x40026070
 80053d8:	40026470 	.word	0x40026470
 80053dc:	40026028 	.word	0x40026028
 80053e0:	40026428 	.word	0x40026428
 80053e4:	40026088 	.word	0x40026088
 80053e8:	40026488 	.word	0x40026488
 80053ec:	40026040 	.word	0x40026040
 80053f0:	40026440 	.word	0x40026440
 80053f4:	400260a0 	.word	0x400260a0
 80053f8:	400264a0 	.word	0x400264a0
 80053fc:	40026058 	.word	0x40026058
 8005400:	40026000 	.word	0x40026000
 8005404:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005408:	e012      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800540a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800540e:	e00f      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8005410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005414:	e00c      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8005416:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800541a:	e009      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800541c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005420:	e006      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8005422:	2308      	movs	r3, #8
 8005424:	e004      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8005426:	2308      	movs	r3, #8
 8005428:	e002      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800542a:	2308      	movs	r3, #8
 800542c:	e000      	b.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800542e:	2308      	movs	r3, #8
 8005430:	4a8a      	ldr	r2, [pc, #552]	@ (800565c <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8005432:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	4b89      	ldr	r3, [pc, #548]	@ (8005660 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 800543c:	429a      	cmp	r2, r3
 800543e:	d960      	bls.n	8005502 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a87      	ldr	r2, [pc, #540]	@ (8005664 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d057      	beq.n	80054fa <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a86      	ldr	r2, [pc, #536]	@ (8005668 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d050      	beq.n	80054f6 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a84      	ldr	r2, [pc, #528]	@ (800566c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d049      	beq.n	80054f2 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a83      	ldr	r2, [pc, #524]	@ (8005670 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d042      	beq.n	80054ee <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a81      	ldr	r2, [pc, #516]	@ (8005674 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d03a      	beq.n	80054e8 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a80      	ldr	r2, [pc, #512]	@ (8005678 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d032      	beq.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a7e      	ldr	r2, [pc, #504]	@ (800567c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d02a      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a7d      	ldr	r2, [pc, #500]	@ (8005680 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a7b      	ldr	r2, [pc, #492]	@ (8005684 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01a      	beq.n	80054d0 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a7a      	ldr	r2, [pc, #488]	@ (8005688 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d012      	beq.n	80054ca <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a78      	ldr	r2, [pc, #480]	@ (800568c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00a      	beq.n	80054c4 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a77      	ldr	r2, [pc, #476]	@ (8005690 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d102      	bne.n	80054be <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80054b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80054bc:	e01e      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054c2:	e01b      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80054c8:	e018      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80054ce:	e015      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80054d4:	e012      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054da:	e00f      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054e0:	e00c      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054e6:	e009      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054ec:	e006      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054ee:	2304      	movs	r3, #4
 80054f0:	e004      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054f2:	2304      	movs	r3, #4
 80054f4:	e002      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054f6:	2304      	movs	r3, #4
 80054f8:	e000      	b.n	80054fc <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80054fa:	2304      	movs	r3, #4
 80054fc:	4a65      	ldr	r2, [pc, #404]	@ (8005694 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80054fe:	60d3      	str	r3, [r2, #12]
 8005500:	e150      	b.n	80057a4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	4b63      	ldr	r3, [pc, #396]	@ (8005698 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800550a:	429a      	cmp	r2, r3
 800550c:	d960      	bls.n	80055d0 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a54      	ldr	r2, [pc, #336]	@ (8005664 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d057      	beq.n	80055c8 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a52      	ldr	r2, [pc, #328]	@ (8005668 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d050      	beq.n	80055c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a51      	ldr	r2, [pc, #324]	@ (800566c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d049      	beq.n	80055c0 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a4f      	ldr	r2, [pc, #316]	@ (8005670 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d042      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a4e      	ldr	r2, [pc, #312]	@ (8005674 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d03a      	beq.n	80055b6 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a4c      	ldr	r2, [pc, #304]	@ (8005678 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d032      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a4b      	ldr	r2, [pc, #300]	@ (800567c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d02a      	beq.n	80055aa <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a49      	ldr	r2, [pc, #292]	@ (8005680 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a48      	ldr	r2, [pc, #288]	@ (8005684 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d01a      	beq.n	800559e <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a46      	ldr	r2, [pc, #280]	@ (8005688 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d012      	beq.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a45      	ldr	r2, [pc, #276]	@ (800568c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00a      	beq.n	8005592 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a43      	ldr	r2, [pc, #268]	@ (8005690 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d102      	bne.n	800558c <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8005586:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800558a:	e01e      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800558c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005590:	e01b      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005592:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005596:	e018      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005598:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800559c:	e015      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800559e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80055a2:	e012      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80055a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055a8:	e00f      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80055aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055ae:	e00c      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80055b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055b4:	e009      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80055b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055ba:	e006      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80055bc:	2304      	movs	r3, #4
 80055be:	e004      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80055c0:	2304      	movs	r3, #4
 80055c2:	e002      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80055c4:	2304      	movs	r3, #4
 80055c6:	e000      	b.n	80055ca <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80055c8:	2304      	movs	r3, #4
 80055ca:	4a32      	ldr	r2, [pc, #200]	@ (8005694 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80055cc:	6093      	str	r3, [r2, #8]
 80055ce:	e0e9      	b.n	80057a4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b31      	ldr	r3, [pc, #196]	@ (800569c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80055d8:	429a      	cmp	r2, r3
 80055da:	f240 8083 	bls.w	80056e4 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a20      	ldr	r2, [pc, #128]	@ (8005664 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d079      	beq.n	80056dc <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005668 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d072      	beq.n	80056d8 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1d      	ldr	r2, [pc, #116]	@ (800566c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d06b      	beq.n	80056d4 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d064      	beq.n	80056d0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1a      	ldr	r2, [pc, #104]	@ (8005674 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d05c      	beq.n	80056ca <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d054      	beq.n	80056c4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a17      	ldr	r2, [pc, #92]	@ (800567c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d04c      	beq.n	80056be <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a15      	ldr	r2, [pc, #84]	@ (8005680 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d044      	beq.n	80056b8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a14      	ldr	r2, [pc, #80]	@ (8005684 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d03c      	beq.n	80056b2 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a12      	ldr	r2, [pc, #72]	@ (8005688 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d034      	beq.n	80056ac <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a11      	ldr	r2, [pc, #68]	@ (800568c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d02c      	beq.n	80056a6 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0f      	ldr	r2, [pc, #60]	@ (8005690 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d124      	bne.n	80056a0 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8005656:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800565a:	e040      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800565c:	40026000 	.word	0x40026000
 8005660:	40026458 	.word	0x40026458
 8005664:	40026010 	.word	0x40026010
 8005668:	40026410 	.word	0x40026410
 800566c:	40026070 	.word	0x40026070
 8005670:	40026470 	.word	0x40026470
 8005674:	40026028 	.word	0x40026028
 8005678:	40026428 	.word	0x40026428
 800567c:	40026088 	.word	0x40026088
 8005680:	40026488 	.word	0x40026488
 8005684:	40026040 	.word	0x40026040
 8005688:	40026440 	.word	0x40026440
 800568c:	400260a0 	.word	0x400260a0
 8005690:	400264a0 	.word	0x400264a0
 8005694:	40026400 	.word	0x40026400
 8005698:	400260b8 	.word	0x400260b8
 800569c:	40026058 	.word	0x40026058
 80056a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056a4:	e01b      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056a6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80056aa:	e018      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80056b0:	e015      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056b2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80056b6:	e012      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056bc:	e00f      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056c2:	e00c      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056c8:	e009      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056ce:	e006      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056d0:	2304      	movs	r3, #4
 80056d2:	e004      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056d4:	2304      	movs	r3, #4
 80056d6:	e002      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056d8:	2304      	movs	r3, #4
 80056da:	e000      	b.n	80056de <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80056dc:	2304      	movs	r3, #4
 80056de:	4a8b      	ldr	r2, [pc, #556]	@ (800590c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80056e0:	60d3      	str	r3, [r2, #12]
 80056e2:	e05f      	b.n	80057a4 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a89      	ldr	r2, [pc, #548]	@ (8005910 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d057      	beq.n	800579e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a88      	ldr	r2, [pc, #544]	@ (8005914 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d050      	beq.n	800579a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a86      	ldr	r2, [pc, #536]	@ (8005918 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d049      	beq.n	8005796 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a85      	ldr	r2, [pc, #532]	@ (800591c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d042      	beq.n	8005792 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a83      	ldr	r2, [pc, #524]	@ (8005920 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d03a      	beq.n	800578c <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a82      	ldr	r2, [pc, #520]	@ (8005924 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d032      	beq.n	8005786 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a80      	ldr	r2, [pc, #512]	@ (8005928 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d02a      	beq.n	8005780 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a7f      	ldr	r2, [pc, #508]	@ (800592c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d022      	beq.n	800577a <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a7d      	ldr	r2, [pc, #500]	@ (8005930 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01a      	beq.n	8005774 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a7c      	ldr	r2, [pc, #496]	@ (8005934 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d012      	beq.n	800576e <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a7a      	ldr	r2, [pc, #488]	@ (8005938 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00a      	beq.n	8005768 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a79      	ldr	r2, [pc, #484]	@ (800593c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d102      	bne.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 800575c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005760:	e01e      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005762:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005766:	e01b      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005768:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800576c:	e018      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800576e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005772:	e015      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005774:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005778:	e012      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800577a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800577e:	e00f      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005780:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005784:	e00c      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005786:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800578a:	e009      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800578c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005790:	e006      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005792:	2304      	movs	r3, #4
 8005794:	e004      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005796:	2304      	movs	r3, #4
 8005798:	e002      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800579a:	2304      	movs	r3, #4
 800579c:	e000      	b.n	80057a0 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800579e:	2304      	movs	r3, #4
 80057a0:	4a5a      	ldr	r2, [pc, #360]	@ (800590c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80057a2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	4b65      	ldr	r3, [pc, #404]	@ (8005940 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d95c      	bls.n	800586a <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a56      	ldr	r2, [pc, #344]	@ (8005910 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d053      	beq.n	8005862 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a55      	ldr	r2, [pc, #340]	@ (8005914 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d04c      	beq.n	800585e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a53      	ldr	r2, [pc, #332]	@ (8005918 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d045      	beq.n	800585a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a52      	ldr	r2, [pc, #328]	@ (800591c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d03e      	beq.n	8005856 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a50      	ldr	r2, [pc, #320]	@ (8005920 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d037      	beq.n	8005852 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a4f      	ldr	r2, [pc, #316]	@ (8005924 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d030      	beq.n	800584e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005928 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d029      	beq.n	800584a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a4c      	ldr	r2, [pc, #304]	@ (800592c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d022      	beq.n	8005846 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a4a      	ldr	r2, [pc, #296]	@ (8005930 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01a      	beq.n	8005840 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a49      	ldr	r2, [pc, #292]	@ (8005934 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d012      	beq.n	800583a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a47      	ldr	r2, [pc, #284]	@ (8005938 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00a      	beq.n	8005834 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a46      	ldr	r2, [pc, #280]	@ (800593c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d102      	bne.n	800582e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8005828:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800582c:	e01a      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800582e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005832:	e017      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005834:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005838:	e014      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800583a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800583e:	e011      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005844:	e00e      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005846:	2340      	movs	r3, #64	@ 0x40
 8005848:	e00c      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800584a:	2340      	movs	r3, #64	@ 0x40
 800584c:	e00a      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800584e:	2340      	movs	r3, #64	@ 0x40
 8005850:	e008      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005852:	2340      	movs	r3, #64	@ 0x40
 8005854:	e006      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005856:	2301      	movs	r3, #1
 8005858:	e004      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800585a:	2301      	movs	r3, #1
 800585c:	e002      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005862:	2301      	movs	r3, #1
 8005864:	4a37      	ldr	r2, [pc, #220]	@ (8005944 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8005866:	60d3      	str	r3, [r2, #12]
 8005868:	e141      	b.n	8005aee <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	4b35      	ldr	r3, [pc, #212]	@ (8005948 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8005872:	429a      	cmp	r2, r3
 8005874:	d97c      	bls.n	8005970 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a25      	ldr	r2, [pc, #148]	@ (8005910 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d073      	beq.n	8005968 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a23      	ldr	r2, [pc, #140]	@ (8005914 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d06c      	beq.n	8005964 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a22      	ldr	r2, [pc, #136]	@ (8005918 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d065      	beq.n	8005960 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a20      	ldr	r2, [pc, #128]	@ (800591c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d05e      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d057      	beq.n	8005958 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005924 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d050      	beq.n	8005954 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d049      	beq.n	8005950 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d042      	beq.n	800594c <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a19      	ldr	r2, [pc, #100]	@ (8005930 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d01a      	beq.n	8005906 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a17      	ldr	r2, [pc, #92]	@ (8005934 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d012      	beq.n	8005900 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a16      	ldr	r2, [pc, #88]	@ (8005938 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00a      	beq.n	80058fa <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a14      	ldr	r2, [pc, #80]	@ (800593c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d102      	bne.n	80058f4 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80058ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80058f2:	e03a      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80058f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80058f8:	e037      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80058fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80058fe:	e034      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005900:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005904:	e031      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005906:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800590a:	e02e      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800590c:	40026000 	.word	0x40026000
 8005910:	40026010 	.word	0x40026010
 8005914:	40026410 	.word	0x40026410
 8005918:	40026070 	.word	0x40026070
 800591c:	40026470 	.word	0x40026470
 8005920:	40026028 	.word	0x40026028
 8005924:	40026428 	.word	0x40026428
 8005928:	40026088 	.word	0x40026088
 800592c:	40026488 	.word	0x40026488
 8005930:	40026040 	.word	0x40026040
 8005934:	40026440 	.word	0x40026440
 8005938:	400260a0 	.word	0x400260a0
 800593c:	400264a0 	.word	0x400264a0
 8005940:	40026458 	.word	0x40026458
 8005944:	40026400 	.word	0x40026400
 8005948:	400260b8 	.word	0x400260b8
 800594c:	2340      	movs	r3, #64	@ 0x40
 800594e:	e00c      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005950:	2340      	movs	r3, #64	@ 0x40
 8005952:	e00a      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005954:	2340      	movs	r3, #64	@ 0x40
 8005956:	e008      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005958:	2340      	movs	r3, #64	@ 0x40
 800595a:	e006      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800595c:	2301      	movs	r3, #1
 800595e:	e004      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005960:	2301      	movs	r3, #1
 8005962:	e002      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005968:	2301      	movs	r3, #1
 800596a:	4a7b      	ldr	r2, [pc, #492]	@ (8005b58 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800596c:	6093      	str	r3, [r2, #8]
 800596e:	e0be      	b.n	8005aee <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	4b79      	ldr	r3, [pc, #484]	@ (8005b5c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005978:	429a      	cmp	r2, r3
 800597a:	d95c      	bls.n	8005a36 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a77      	ldr	r2, [pc, #476]	@ (8005b60 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d053      	beq.n	8005a2e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a76      	ldr	r2, [pc, #472]	@ (8005b64 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d04c      	beq.n	8005a2a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a74      	ldr	r2, [pc, #464]	@ (8005b68 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d045      	beq.n	8005a26 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a73      	ldr	r2, [pc, #460]	@ (8005b6c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d03e      	beq.n	8005a22 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a71      	ldr	r2, [pc, #452]	@ (8005b70 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d037      	beq.n	8005a1e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a70      	ldr	r2, [pc, #448]	@ (8005b74 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d030      	beq.n	8005a1a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005b78 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d029      	beq.n	8005a16 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6d      	ldr	r2, [pc, #436]	@ (8005b7c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d022      	beq.n	8005a12 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005b80 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01a      	beq.n	8005a0c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a6a      	ldr	r2, [pc, #424]	@ (8005b84 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d012      	beq.n	8005a06 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a68      	ldr	r2, [pc, #416]	@ (8005b88 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00a      	beq.n	8005a00 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a67      	ldr	r2, [pc, #412]	@ (8005b8c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d102      	bne.n	80059fa <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80059f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059f8:	e01a      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80059fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80059fe:	e017      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a04:	e014      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a0a:	e011      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a10:	e00e      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a12:	2340      	movs	r3, #64	@ 0x40
 8005a14:	e00c      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a16:	2340      	movs	r3, #64	@ 0x40
 8005a18:	e00a      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a1a:	2340      	movs	r3, #64	@ 0x40
 8005a1c:	e008      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a1e:	2340      	movs	r3, #64	@ 0x40
 8005a20:	e006      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e004      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e002      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4a57      	ldr	r2, [pc, #348]	@ (8005b90 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8005a32:	60d3      	str	r3, [r2, #12]
 8005a34:	e05b      	b.n	8005aee <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a49      	ldr	r2, [pc, #292]	@ (8005b60 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d053      	beq.n	8005ae8 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a47      	ldr	r2, [pc, #284]	@ (8005b64 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d04c      	beq.n	8005ae4 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a46      	ldr	r2, [pc, #280]	@ (8005b68 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d045      	beq.n	8005ae0 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a44      	ldr	r2, [pc, #272]	@ (8005b6c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d03e      	beq.n	8005adc <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a43      	ldr	r2, [pc, #268]	@ (8005b70 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d037      	beq.n	8005ad8 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a41      	ldr	r2, [pc, #260]	@ (8005b74 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d030      	beq.n	8005ad4 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a40      	ldr	r2, [pc, #256]	@ (8005b78 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d029      	beq.n	8005ad0 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a3e      	ldr	r2, [pc, #248]	@ (8005b7c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d022      	beq.n	8005acc <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b80 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d01a      	beq.n	8005ac6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a3b      	ldr	r2, [pc, #236]	@ (8005b84 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d012      	beq.n	8005ac0 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b88 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00a      	beq.n	8005aba <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a38      	ldr	r2, [pc, #224]	@ (8005b8c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d102      	bne.n	8005ab4 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8005aae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ab2:	e01a      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ab4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005ab8:	e017      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005aba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005abe:	e014      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ac4:	e011      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ac6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005aca:	e00e      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005acc:	2340      	movs	r3, #64	@ 0x40
 8005ace:	e00c      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ad0:	2340      	movs	r3, #64	@ 0x40
 8005ad2:	e00a      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ad4:	2340      	movs	r3, #64	@ 0x40
 8005ad6:	e008      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ad8:	2340      	movs	r3, #64	@ 0x40
 8005ada:	e006      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e004      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e002      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4a29      	ldr	r2, [pc, #164]	@ (8005b90 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8005aec:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0216 	orr.w	r2, r2, #22
 8005afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695a      	ldr	r2, [r3, #20]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0208 	orr.w	r2, r2, #8
 8005b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e005      	b.n	8005b4c <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40026400 	.word	0x40026400
 8005b5c:	40026058 	.word	0x40026058
 8005b60:	40026010 	.word	0x40026010
 8005b64:	40026410 	.word	0x40026410
 8005b68:	40026070 	.word	0x40026070
 8005b6c:	40026470 	.word	0x40026470
 8005b70:	40026028 	.word	0x40026028
 8005b74:	40026428 	.word	0x40026428
 8005b78:	40026088 	.word	0x40026088
 8005b7c:	40026488 	.word	0x40026488
 8005b80:	40026040 	.word	0x40026040
 8005b84:	40026440 	.word	0x40026440
 8005b88:	400260a0 	.word	0x400260a0
 8005b8c:	400264a0 	.word	0x400264a0
 8005b90:	40026000 	.word	0x40026000

08005b94 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	e003      	b.n	8005bba <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b40      	cmp	r3, #64	@ 0x40
 8005be4:	d108      	bne.n	8005bf8 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005bf6:	e007      	b.n	8005c08 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	@ 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	e165      	b.n	8005efc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c30:	2201      	movs	r2, #1
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4013      	ands	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	f040 8154 	bne.w	8005ef6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d005      	beq.n	8005c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d130      	bne.n	8005cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	2203      	movs	r2, #3
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 0201 	and.w	r2, r3, #1
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d017      	beq.n	8005d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	2203      	movs	r2, #3
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d123      	bne.n	8005d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	08da      	lsrs	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3208      	adds	r2, #8
 8005d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	220f      	movs	r2, #15
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4013      	ands	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	08da      	lsrs	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3208      	adds	r2, #8
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	2203      	movs	r2, #3
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 0203 	and.w	r2, r3, #3
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80ae 	beq.w	8005ef6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8005f14 <HAL_GPIO_Init+0x300>)
 8005da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da2:	4a5c      	ldr	r2, [pc, #368]	@ (8005f14 <HAL_GPIO_Init+0x300>)
 8005da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005daa:	4b5a      	ldr	r3, [pc, #360]	@ (8005f14 <HAL_GPIO_Init+0x300>)
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005db6:	4a58      	ldr	r2, [pc, #352]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	220f      	movs	r2, #15
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8005f1c <HAL_GPIO_Init+0x308>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d025      	beq.n	8005e2e <HAL_GPIO_Init+0x21a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a4e      	ldr	r2, [pc, #312]	@ (8005f20 <HAL_GPIO_Init+0x30c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01f      	beq.n	8005e2a <HAL_GPIO_Init+0x216>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a4d      	ldr	r2, [pc, #308]	@ (8005f24 <HAL_GPIO_Init+0x310>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d019      	beq.n	8005e26 <HAL_GPIO_Init+0x212>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a4c      	ldr	r2, [pc, #304]	@ (8005f28 <HAL_GPIO_Init+0x314>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d013      	beq.n	8005e22 <HAL_GPIO_Init+0x20e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8005f2c <HAL_GPIO_Init+0x318>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00d      	beq.n	8005e1e <HAL_GPIO_Init+0x20a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a4a      	ldr	r2, [pc, #296]	@ (8005f30 <HAL_GPIO_Init+0x31c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d007      	beq.n	8005e1a <HAL_GPIO_Init+0x206>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a49      	ldr	r2, [pc, #292]	@ (8005f34 <HAL_GPIO_Init+0x320>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d101      	bne.n	8005e16 <HAL_GPIO_Init+0x202>
 8005e12:	2306      	movs	r3, #6
 8005e14:	e00c      	b.n	8005e30 <HAL_GPIO_Init+0x21c>
 8005e16:	2307      	movs	r3, #7
 8005e18:	e00a      	b.n	8005e30 <HAL_GPIO_Init+0x21c>
 8005e1a:	2305      	movs	r3, #5
 8005e1c:	e008      	b.n	8005e30 <HAL_GPIO_Init+0x21c>
 8005e1e:	2304      	movs	r3, #4
 8005e20:	e006      	b.n	8005e30 <HAL_GPIO_Init+0x21c>
 8005e22:	2303      	movs	r3, #3
 8005e24:	e004      	b.n	8005e30 <HAL_GPIO_Init+0x21c>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e002      	b.n	8005e30 <HAL_GPIO_Init+0x21c>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <HAL_GPIO_Init+0x21c>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	f002 0203 	and.w	r2, r2, #3
 8005e36:	0092      	lsls	r2, r2, #2
 8005e38:	4093      	lsls	r3, r2
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e40:	4935      	ldr	r1, [pc, #212]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	089b      	lsrs	r3, r3, #2
 8005e46:	3302      	adds	r3, #2
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f38 <HAL_GPIO_Init+0x324>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	43db      	mvns	r3, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e72:	4a31      	ldr	r2, [pc, #196]	@ (8005f38 <HAL_GPIO_Init+0x324>)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e78:	4b2f      	ldr	r3, [pc, #188]	@ (8005f38 <HAL_GPIO_Init+0x324>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e9c:	4a26      	ldr	r2, [pc, #152]	@ (8005f38 <HAL_GPIO_Init+0x324>)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ea2:	4b25      	ldr	r3, [pc, #148]	@ (8005f38 <HAL_GPIO_Init+0x324>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f38 <HAL_GPIO_Init+0x324>)
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f38 <HAL_GPIO_Init+0x324>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ef0:	4a11      	ldr	r2, [pc, #68]	@ (8005f38 <HAL_GPIO_Init+0x324>)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	61fb      	str	r3, [r7, #28]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	2b0f      	cmp	r3, #15
 8005f00:	f67f ae96 	bls.w	8005c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	3724      	adds	r7, #36	@ 0x24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40013800 	.word	0x40013800
 8005f1c:	40020000 	.word	0x40020000
 8005f20:	40020400 	.word	0x40020400
 8005f24:	40020800 	.word	0x40020800
 8005f28:	40020c00 	.word	0x40020c00
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40021400 	.word	0x40021400
 8005f34:	40021800 	.word	0x40021800
 8005f38:	40013c00 	.word	0x40013c00

08005f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	807b      	strh	r3, [r7, #2]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f4c:	787b      	ldrb	r3, [r7, #1]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f52:	887a      	ldrh	r2, [r7, #2]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f58:	e003      	b.n	8005f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	041a      	lsls	r2, r3, #16
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	619a      	str	r2, [r3, #24]
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f80:	887a      	ldrh	r2, [r7, #2]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4013      	ands	r3, r2
 8005f86:	041a      	lsls	r2, r3, #16
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	43d9      	mvns	r1, r3
 8005f8c:	887b      	ldrh	r3, [r7, #2]
 8005f8e:	400b      	ands	r3, r1
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	619a      	str	r2, [r3, #24]
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fae:	4b08      	ldr	r3, [pc, #32]	@ (8005fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d006      	beq.n	8005fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fba:	4a05      	ldr	r2, [pc, #20]	@ (8005fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f806 	bl	8005fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40013c00 	.word	0x40013c00

08005fd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e12b      	b.n	8006256 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fc fd18 	bl	8002a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2224      	movs	r2, #36	@ 0x24
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800603e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800604e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006050:	f000 fd6c 	bl	8006b2c <HAL_RCC_GetPCLK1Freq>
 8006054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4a81      	ldr	r2, [pc, #516]	@ (8006260 <HAL_I2C_Init+0x274>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d807      	bhi.n	8006070 <HAL_I2C_Init+0x84>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a80      	ldr	r2, [pc, #512]	@ (8006264 <HAL_I2C_Init+0x278>)
 8006064:	4293      	cmp	r3, r2
 8006066:	bf94      	ite	ls
 8006068:	2301      	movls	r3, #1
 800606a:	2300      	movhi	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e006      	b.n	800607e <HAL_I2C_Init+0x92>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a7d      	ldr	r2, [pc, #500]	@ (8006268 <HAL_I2C_Init+0x27c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	bf94      	ite	ls
 8006078:	2301      	movls	r3, #1
 800607a:	2300      	movhi	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e0e7      	b.n	8006256 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a78      	ldr	r2, [pc, #480]	@ (800626c <HAL_I2C_Init+0x280>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	0c9b      	lsrs	r3, r3, #18
 8006090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4a6a      	ldr	r2, [pc, #424]	@ (8006260 <HAL_I2C_Init+0x274>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d802      	bhi.n	80060c0 <HAL_I2C_Init+0xd4>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3301      	adds	r3, #1
 80060be:	e009      	b.n	80060d4 <HAL_I2C_Init+0xe8>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	4a69      	ldr	r2, [pc, #420]	@ (8006270 <HAL_I2C_Init+0x284>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	099b      	lsrs	r3, r3, #6
 80060d2:	3301      	adds	r3, #1
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	430b      	orrs	r3, r1
 80060da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80060e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	495c      	ldr	r1, [pc, #368]	@ (8006260 <HAL_I2C_Init+0x274>)
 80060f0:	428b      	cmp	r3, r1
 80060f2:	d819      	bhi.n	8006128 <HAL_I2C_Init+0x13c>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1e59      	subs	r1, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006108:	400b      	ands	r3, r1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <HAL_I2C_Init+0x138>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1e59      	subs	r1, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	fbb1 f3f3 	udiv	r3, r1, r3
 800611c:	3301      	adds	r3, #1
 800611e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006122:	e051      	b.n	80061c8 <HAL_I2C_Init+0x1dc>
 8006124:	2304      	movs	r3, #4
 8006126:	e04f      	b.n	80061c8 <HAL_I2C_Init+0x1dc>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d111      	bne.n	8006154 <HAL_I2C_Init+0x168>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1e58      	subs	r0, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6859      	ldr	r1, [r3, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	440b      	add	r3, r1
 800613e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006142:	3301      	adds	r3, #1
 8006144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006148:	2b00      	cmp	r3, #0
 800614a:	bf0c      	ite	eq
 800614c:	2301      	moveq	r3, #1
 800614e:	2300      	movne	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e012      	b.n	800617a <HAL_I2C_Init+0x18e>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1e58      	subs	r0, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6859      	ldr	r1, [r3, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	0099      	lsls	r1, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	fbb0 f3f3 	udiv	r3, r0, r3
 800616a:	3301      	adds	r3, #1
 800616c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_I2C_Init+0x196>
 800617e:	2301      	movs	r3, #1
 8006180:	e022      	b.n	80061c8 <HAL_I2C_Init+0x1dc>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10e      	bne.n	80061a8 <HAL_I2C_Init+0x1bc>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1e58      	subs	r0, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6859      	ldr	r1, [r3, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	440b      	add	r3, r1
 8006198:	fbb0 f3f3 	udiv	r3, r0, r3
 800619c:	3301      	adds	r3, #1
 800619e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a6:	e00f      	b.n	80061c8 <HAL_I2C_Init+0x1dc>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1e58      	subs	r0, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	0099      	lsls	r1, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80061be:	3301      	adds	r3, #1
 80061c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	6809      	ldr	r1, [r1, #0]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80061f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6911      	ldr	r1, [r2, #16]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68d2      	ldr	r2, [r2, #12]
 8006202:	4311      	orrs	r1, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	430b      	orrs	r3, r1
 800620a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	000186a0 	.word	0x000186a0
 8006264:	001e847f 	.word	0x001e847f
 8006268:	003d08ff 	.word	0x003d08ff
 800626c:	431bde83 	.word	0x431bde83
 8006270:	10624dd3 	.word	0x10624dd3

08006274 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800628e:	f7fc ff17 	bl	80030c0 <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b20      	cmp	r3, #32
 800629e:	f040 80d9 	bne.w	8006454 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2319      	movs	r3, #25
 80062a8:	2201      	movs	r2, #1
 80062aa:	496d      	ldr	r1, [pc, #436]	@ (8006460 <HAL_I2C_Mem_Write+0x1ec>)
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f971 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0cc      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_I2C_Mem_Write+0x56>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e0c5      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d007      	beq.n	80062f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2221      	movs	r2, #33	@ 0x21
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2240      	movs	r2, #64	@ 0x40
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a4d      	ldr	r2, [pc, #308]	@ (8006464 <HAL_I2C_Mem_Write+0x1f0>)
 8006330:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006332:	88f8      	ldrh	r0, [r7, #6]
 8006334:	893a      	ldrh	r2, [r7, #8]
 8006336:	8979      	ldrh	r1, [r7, #10]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	4603      	mov	r3, r0
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f890 	bl	8006468 <I2C_RequestMemoryWrite>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d052      	beq.n	80063f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e081      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fa36 	bl	80067c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	2b04      	cmp	r3, #4
 8006368:	d107      	bne.n	800637a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e06b      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d11b      	bne.n	80063f4 <HAL_I2C_Mem_Write+0x180>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1aa      	bne.n	8006352 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fa29 	bl	8006858 <I2C_WaitOnBTFFlagUntilTimeout>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00d      	beq.n	8006428 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006410:	2b04      	cmp	r3, #4
 8006412:	d107      	bne.n	8006424 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006422:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e016      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	00100002 	.word	0x00100002
 8006464:	ffff0000 	.word	0xffff0000

08006468 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	461a      	mov	r2, r3
 8006476:	4603      	mov	r3, r0
 8006478:	817b      	strh	r3, [r7, #10]
 800647a:	460b      	mov	r3, r1
 800647c:	813b      	strh	r3, [r7, #8]
 800647e:	4613      	mov	r3, r2
 8006480:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2200      	movs	r2, #0
 800649a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f878 	bl	8006594 <I2C_WaitOnFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00d      	beq.n	80064c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b8:	d103      	bne.n	80064c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e05f      	b.n	8006586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064c6:	897b      	ldrh	r3, [r7, #10]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	492d      	ldr	r1, [pc, #180]	@ (8006590 <I2C_RequestMemoryWrite+0x128>)
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f8d3 	bl	8006688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e04c      	b.n	8006586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f95e 	bl	80067c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006516:	2b04      	cmp	r3, #4
 8006518:	d107      	bne.n	800652a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e02b      	b.n	8006586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006534:	893b      	ldrh	r3, [r7, #8]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	611a      	str	r2, [r3, #16]
 800653e:	e021      	b.n	8006584 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006540:	893b      	ldrh	r3, [r7, #8]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	b29b      	uxth	r3, r3
 8006546:	b2da      	uxtb	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006550:	6a39      	ldr	r1, [r7, #32]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f938 	bl	80067c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	2b04      	cmp	r3, #4
 8006564:	d107      	bne.n	8006576 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e005      	b.n	8006586 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800657a:	893b      	ldrh	r3, [r7, #8]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	00010002 	.word	0x00010002

08006594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a4:	e048      	b.n	8006638 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d044      	beq.n	8006638 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ae:	f7fc fd87 	bl	80030c0 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d139      	bne.n	8006638 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d10d      	bne.n	80065ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	43da      	mvns	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	4013      	ands	r3, r2
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	bf0c      	ite	eq
 80065e0:	2301      	moveq	r3, #1
 80065e2:	2300      	movne	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	e00c      	b.n	8006604 <I2C_WaitOnFlagUntilTimeout+0x70>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	43da      	mvns	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4013      	ands	r3, r2
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	429a      	cmp	r2, r3
 8006608:	d116      	bne.n	8006638 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e023      	b.n	8006680 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	0c1b      	lsrs	r3, r3, #16
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10d      	bne.n	800665e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	43da      	mvns	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	4013      	ands	r3, r2
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf0c      	ite	eq
 8006654:	2301      	moveq	r3, #1
 8006656:	2300      	movne	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	e00c      	b.n	8006678 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	43da      	mvns	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	4013      	ands	r3, r2
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	bf0c      	ite	eq
 8006670:	2301      	moveq	r3, #1
 8006672:	2300      	movne	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	429a      	cmp	r2, r3
 800667c:	d093      	beq.n	80065a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006696:	e071      	b.n	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a6:	d123      	bne.n	80066f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066dc:	f043 0204 	orr.w	r2, r3, #4
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e067      	b.n	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d041      	beq.n	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f8:	f7fc fce2 	bl	80030c0 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	429a      	cmp	r2, r3
 8006706:	d302      	bcc.n	800670e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d136      	bne.n	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b01      	cmp	r3, #1
 8006716:	d10c      	bne.n	8006732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	43da      	mvns	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4013      	ands	r3, r2
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	bf14      	ite	ne
 800672a:	2301      	movne	r3, #1
 800672c:	2300      	moveq	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	e00b      	b.n	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	43da      	mvns	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d016      	beq.n	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e021      	b.n	80067c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	0c1b      	lsrs	r3, r3, #16
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	d10c      	bne.n	80067a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	43da      	mvns	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4013      	ands	r3, r2
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	bf14      	ite	ne
 8006798:	2301      	movne	r3, #1
 800679a:	2300      	moveq	r3, #0
 800679c:	b2db      	uxtb	r3, r3
 800679e:	e00b      	b.n	80067b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	43da      	mvns	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bf14      	ite	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	2300      	moveq	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f47f af6d 	bne.w	8006698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067d4:	e034      	b.n	8006840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f886 	bl	80068e8 <I2C_IsAcknowledgeFailed>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e034      	b.n	8006850 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d028      	beq.n	8006840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ee:	f7fc fc67 	bl	80030c0 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11d      	bne.n	8006840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800680e:	2b80      	cmp	r3, #128	@ 0x80
 8006810:	d016      	beq.n	8006840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682c:	f043 0220 	orr.w	r2, r3, #32
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e007      	b.n	8006850 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800684a:	2b80      	cmp	r3, #128	@ 0x80
 800684c:	d1c3      	bne.n	80067d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006864:	e034      	b.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f83e 	bl	80068e8 <I2C_IsAcknowledgeFailed>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e034      	b.n	80068e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687c:	d028      	beq.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800687e:	f7fc fc1f 	bl	80030c0 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	d302      	bcc.n	8006894 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d11d      	bne.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d016      	beq.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068bc:	f043 0220 	orr.w	r2, r3, #32
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e007      	b.n	80068e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d1c3      	bne.n	8006866 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fe:	d11b      	bne.n	8006938 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006908:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	f043 0204 	orr.w	r2, r3, #4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0cc      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800695c:	4b68      	ldr	r3, [pc, #416]	@ (8006b00 <HAL_RCC_ClockConfig+0x1b8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d90c      	bls.n	8006984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b65      	ldr	r3, [pc, #404]	@ (8006b00 <HAL_RCC_ClockConfig+0x1b8>)
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	4b63      	ldr	r3, [pc, #396]	@ (8006b00 <HAL_RCC_ClockConfig+0x1b8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d001      	beq.n	8006984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0b8      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d020      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800699c:	4b59      	ldr	r3, [pc, #356]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4a58      	ldr	r2, [pc, #352]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 80069a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069b4:	4b53      	ldr	r3, [pc, #332]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	4a52      	ldr	r2, [pc, #328]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80069be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069c0:	4b50      	ldr	r3, [pc, #320]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	494d      	ldr	r1, [pc, #308]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d044      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d107      	bne.n	80069f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e6:	4b47      	ldr	r3, [pc, #284]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d119      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e07f      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d003      	beq.n	8006a06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d107      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a06:	4b3f      	ldr	r3, [pc, #252]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e06f      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a16:	4b3b      	ldr	r3, [pc, #236]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e067      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a26:	4b37      	ldr	r3, [pc, #220]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f023 0203 	bic.w	r2, r3, #3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4934      	ldr	r1, [pc, #208]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a38:	f7fc fb42 	bl	80030c0 <HAL_GetTick>
 8006a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3e:	e00a      	b.n	8006a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a40:	f7fc fb3e 	bl	80030c0 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e04f      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a56:	4b2b      	ldr	r3, [pc, #172]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 020c 	and.w	r2, r3, #12
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d1eb      	bne.n	8006a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a68:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d20c      	bcs.n	8006a90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a76:	4b22      	ldr	r3, [pc, #136]	@ (8006b00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7e:	4b20      	ldr	r3, [pc, #128]	@ (8006b00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e032      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a9c:	4b19      	ldr	r3, [pc, #100]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4916      	ldr	r1, [pc, #88]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aba:	4b12      	ldr	r3, [pc, #72]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	490e      	ldr	r1, [pc, #56]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ace:	f000 f855 	bl	8006b7c <HAL_RCC_GetSysClockFreq>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8006b04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	091b      	lsrs	r3, r3, #4
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	490a      	ldr	r1, [pc, #40]	@ (8006b08 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae0:	5ccb      	ldrb	r3, [r1, r3]
 8006ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae6:	4a09      	ldr	r2, [pc, #36]	@ (8006b0c <HAL_RCC_ClockConfig+0x1c4>)
 8006ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006aea:	4b09      	ldr	r3, [pc, #36]	@ (8006b10 <HAL_RCC_ClockConfig+0x1c8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fc faa2 	bl	8003038 <HAL_InitTick>

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40023c00 	.word	0x40023c00
 8006b04:	40023800 	.word	0x40023800
 8006b08:	0800db3c 	.word	0x0800db3c
 8006b0c:	20000000 	.word	0x20000000
 8006b10:	20000004 	.word	0x20000004

08006b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b18:	4b03      	ldr	r3, [pc, #12]	@ (8006b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000000 	.word	0x20000000

08006b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b30:	f7ff fff0 	bl	8006b14 <HAL_RCC_GetHCLKFreq>
 8006b34:	4602      	mov	r2, r0
 8006b36:	4b05      	ldr	r3, [pc, #20]	@ (8006b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	0a9b      	lsrs	r3, r3, #10
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	4903      	ldr	r1, [pc, #12]	@ (8006b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b42:	5ccb      	ldrb	r3, [r1, r3]
 8006b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40023800 	.word	0x40023800
 8006b50:	0800db4c 	.word	0x0800db4c

08006b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b58:	f7ff ffdc 	bl	8006b14 <HAL_RCC_GetHCLKFreq>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	4b05      	ldr	r3, [pc, #20]	@ (8006b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	0b5b      	lsrs	r3, r3, #13
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	4903      	ldr	r1, [pc, #12]	@ (8006b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b6a:	5ccb      	ldrb	r3, [r1, r3]
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40023800 	.word	0x40023800
 8006b78:	0800db4c 	.word	0x0800db4c

08006b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b80:	b0ae      	sub	sp, #184	@ 0xb8
 8006b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ba2:	4bcb      	ldr	r3, [pc, #812]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b0c      	cmp	r3, #12
 8006bac:	f200 8206 	bhi.w	8006fbc <HAL_RCC_GetSysClockFreq+0x440>
 8006bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bed 	.word	0x08006bed
 8006bbc:	08006fbd 	.word	0x08006fbd
 8006bc0:	08006fbd 	.word	0x08006fbd
 8006bc4:	08006fbd 	.word	0x08006fbd
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	08006fbd 	.word	0x08006fbd
 8006bd0:	08006fbd 	.word	0x08006fbd
 8006bd4:	08006fbd 	.word	0x08006fbd
 8006bd8:	08006bfd 	.word	0x08006bfd
 8006bdc:	08006fbd 	.word	0x08006fbd
 8006be0:	08006fbd 	.word	0x08006fbd
 8006be4:	08006fbd 	.word	0x08006fbd
 8006be8:	08006ded 	.word	0x08006ded
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bec:	4bb9      	ldr	r3, [pc, #740]	@ (8006ed4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006bf2:	e1e7      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bf4:	4bb8      	ldr	r3, [pc, #736]	@ (8006ed8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006bfa:	e1e3      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bfc:	4bb4      	ldr	r3, [pc, #720]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c08:	4bb1      	ldr	r3, [pc, #708]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d071      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c14:	4bae      	ldr	r3, [pc, #696]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	099b      	lsrs	r3, r3, #6
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c20:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	f04f 0000 	mov.w	r0, #0
 8006c42:	f04f 0100 	mov.w	r1, #0
 8006c46:	0159      	lsls	r1, r3, #5
 8006c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c4c:	0150      	lsls	r0, r2, #5
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4621      	mov	r1, r4
 8006c54:	1a51      	subs	r1, r2, r1
 8006c56:	6439      	str	r1, [r7, #64]	@ 0x40
 8006c58:	4629      	mov	r1, r5
 8006c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	018b      	lsls	r3, r1, #6
 8006c70:	4641      	mov	r1, r8
 8006c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c76:	4641      	mov	r1, r8
 8006c78:	018a      	lsls	r2, r1, #6
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	1a51      	subs	r1, r2, r1
 8006c7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c80:	4649      	mov	r1, r9
 8006c82:	eb63 0301 	sbc.w	r3, r3, r1
 8006c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006c94:	4649      	mov	r1, r9
 8006c96:	00cb      	lsls	r3, r1, #3
 8006c98:	4641      	mov	r1, r8
 8006c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	00ca      	lsls	r2, r1, #3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4622      	mov	r2, r4
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cae:	462b      	mov	r3, r5
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	eb42 0303 	adc.w	r3, r2, r3
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	024b      	lsls	r3, r1, #9
 8006cc8:	4621      	mov	r1, r4
 8006cca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006cce:	4621      	mov	r1, r4
 8006cd0:	024a      	lsls	r2, r1, #9
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ce0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ce4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006ce8:	f7fa f82e 	bl	8000d48 <__aeabi_uldivmod>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cf6:	e067      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cf8:	4b75      	ldr	r3, [pc, #468]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	099b      	lsrs	r3, r3, #6
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d04:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d12:	2300      	movs	r3, #0
 8006d14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	f04f 0000 	mov.w	r0, #0
 8006d22:	f04f 0100 	mov.w	r1, #0
 8006d26:	0159      	lsls	r1, r3, #5
 8006d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d2c:	0150      	lsls	r0, r2, #5
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4621      	mov	r1, r4
 8006d34:	1a51      	subs	r1, r2, r1
 8006d36:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d38:	4629      	mov	r1, r5
 8006d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	018b      	lsls	r3, r1, #6
 8006d50:	4641      	mov	r1, r8
 8006d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d56:	4641      	mov	r1, r8
 8006d58:	018a      	lsls	r2, r1, #6
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d60:	4649      	mov	r1, r9
 8006d62:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d7a:	4692      	mov	sl, r2
 8006d7c:	469b      	mov	fp, r3
 8006d7e:	4623      	mov	r3, r4
 8006d80:	eb1a 0303 	adds.w	r3, sl, r3
 8006d84:	623b      	str	r3, [r7, #32]
 8006d86:	462b      	mov	r3, r5
 8006d88:	eb4b 0303 	adc.w	r3, fp, r3
 8006d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	028b      	lsls	r3, r1, #10
 8006d9e:	4621      	mov	r1, r4
 8006da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006da4:	4621      	mov	r1, r4
 8006da6:	028a      	lsls	r2, r1, #10
 8006da8:	4610      	mov	r0, r2
 8006daa:	4619      	mov	r1, r3
 8006dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006db0:	2200      	movs	r2, #0
 8006db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006db4:	677a      	str	r2, [r7, #116]	@ 0x74
 8006db6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006dba:	f7f9 ffc5 	bl	8000d48 <__aeabi_uldivmod>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006dc8:	4b41      	ldr	r3, [pc, #260]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	0c1b      	lsrs	r3, r3, #16
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006dea:	e0eb      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dec:	4b38      	ldr	r3, [pc, #224]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006df4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006df8:	4b35      	ldr	r3, [pc, #212]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d06b      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e04:	4b32      	ldr	r3, [pc, #200]	@ (8006ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	099b      	lsrs	r3, r3, #6
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e16:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e18:	2300      	movs	r3, #0
 8006e1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006e20:	4622      	mov	r2, r4
 8006e22:	462b      	mov	r3, r5
 8006e24:	f04f 0000 	mov.w	r0, #0
 8006e28:	f04f 0100 	mov.w	r1, #0
 8006e2c:	0159      	lsls	r1, r3, #5
 8006e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e32:	0150      	lsls	r0, r2, #5
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4621      	mov	r1, r4
 8006e3a:	1a51      	subs	r1, r2, r1
 8006e3c:	61b9      	str	r1, [r7, #24]
 8006e3e:	4629      	mov	r1, r5
 8006e40:	eb63 0301 	sbc.w	r3, r3, r1
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006e52:	4659      	mov	r1, fp
 8006e54:	018b      	lsls	r3, r1, #6
 8006e56:	4651      	mov	r1, sl
 8006e58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e5c:	4651      	mov	r1, sl
 8006e5e:	018a      	lsls	r2, r1, #6
 8006e60:	4651      	mov	r1, sl
 8006e62:	ebb2 0801 	subs.w	r8, r2, r1
 8006e66:	4659      	mov	r1, fp
 8006e68:	eb63 0901 	sbc.w	r9, r3, r1
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e80:	4690      	mov	r8, r2
 8006e82:	4699      	mov	r9, r3
 8006e84:	4623      	mov	r3, r4
 8006e86:	eb18 0303 	adds.w	r3, r8, r3
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	eb49 0303 	adc.w	r3, r9, r3
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	024b      	lsls	r3, r1, #9
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006eaa:	4621      	mov	r1, r4
 8006eac:	024a      	lsls	r2, r1, #9
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006ebc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ec0:	f7f9 ff42 	bl	8000d48 <__aeabi_uldivmod>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4613      	mov	r3, r2
 8006eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ece:	e065      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x420>
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	00f42400 	.word	0x00f42400
 8006ed8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006edc:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	099b      	lsrs	r3, r3, #6
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006eec:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eee:	2300      	movs	r3, #0
 8006ef0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ef2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	464b      	mov	r3, r9
 8006efa:	f04f 0000 	mov.w	r0, #0
 8006efe:	f04f 0100 	mov.w	r1, #0
 8006f02:	0159      	lsls	r1, r3, #5
 8006f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f08:	0150      	lsls	r0, r2, #5
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4641      	mov	r1, r8
 8006f10:	1a51      	subs	r1, r2, r1
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	4649      	mov	r1, r9
 8006f16:	eb63 0301 	sbc.w	r3, r3, r1
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006f28:	4659      	mov	r1, fp
 8006f2a:	018b      	lsls	r3, r1, #6
 8006f2c:	4651      	mov	r1, sl
 8006f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f32:	4651      	mov	r1, sl
 8006f34:	018a      	lsls	r2, r1, #6
 8006f36:	4651      	mov	r1, sl
 8006f38:	1a54      	subs	r4, r2, r1
 8006f3a:	4659      	mov	r1, fp
 8006f3c:	eb63 0501 	sbc.w	r5, r3, r1
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	00eb      	lsls	r3, r5, #3
 8006f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f4e:	00e2      	lsls	r2, r4, #3
 8006f50:	4614      	mov	r4, r2
 8006f52:	461d      	mov	r5, r3
 8006f54:	4643      	mov	r3, r8
 8006f56:	18e3      	adds	r3, r4, r3
 8006f58:	603b      	str	r3, [r7, #0]
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	eb45 0303 	adc.w	r3, r5, r3
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f6e:	4629      	mov	r1, r5
 8006f70:	028b      	lsls	r3, r1, #10
 8006f72:	4621      	mov	r1, r4
 8006f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f78:	4621      	mov	r1, r4
 8006f7a:	028a      	lsls	r2, r1, #10
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f84:	2200      	movs	r2, #0
 8006f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f88:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f8e:	f7f9 fedb 	bl	8000d48 <__aeabi_uldivmod>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4613      	mov	r3, r2
 8006f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	0f1b      	lsrs	r3, r3, #28
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006fba:	e003      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fbc:	4b06      	ldr	r3, [pc, #24]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	37b8      	adds	r7, #184	@ 0xb8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	00f42400 	.word	0x00f42400

08006fdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e28d      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8083 	beq.w	8007102 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ffc:	4b94      	ldr	r3, [pc, #592]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 030c 	and.w	r3, r3, #12
 8007004:	2b04      	cmp	r3, #4
 8007006:	d019      	beq.n	800703c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007008:	4b91      	ldr	r3, [pc, #580]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 030c 	and.w	r3, r3, #12
        || \
 8007010:	2b08      	cmp	r3, #8
 8007012:	d106      	bne.n	8007022 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007014:	4b8e      	ldr	r3, [pc, #568]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800701c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007020:	d00c      	beq.n	800703c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007022:	4b8b      	ldr	r3, [pc, #556]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800702a:	2b0c      	cmp	r3, #12
 800702c:	d112      	bne.n	8007054 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800702e:	4b88      	ldr	r3, [pc, #544]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800703a:	d10b      	bne.n	8007054 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800703c:	4b84      	ldr	r3, [pc, #528]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d05b      	beq.n	8007100 <HAL_RCC_OscConfig+0x124>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d157      	bne.n	8007100 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e25a      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800705c:	d106      	bne.n	800706c <HAL_RCC_OscConfig+0x90>
 800705e:	4b7c      	ldr	r3, [pc, #496]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a7b      	ldr	r2, [pc, #492]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e01d      	b.n	80070a8 <HAL_RCC_OscConfig+0xcc>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007074:	d10c      	bne.n	8007090 <HAL_RCC_OscConfig+0xb4>
 8007076:	4b76      	ldr	r3, [pc, #472]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a75      	ldr	r2, [pc, #468]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 800707c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b73      	ldr	r3, [pc, #460]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a72      	ldr	r2, [pc, #456]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	e00b      	b.n	80070a8 <HAL_RCC_OscConfig+0xcc>
 8007090:	4b6f      	ldr	r3, [pc, #444]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a6e      	ldr	r2, [pc, #440]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	4b6c      	ldr	r3, [pc, #432]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a6b      	ldr	r2, [pc, #428]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 80070a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d013      	beq.n	80070d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b0:	f7fc f806 	bl	80030c0 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b8:	f7fc f802 	bl	80030c0 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b64      	cmp	r3, #100	@ 0x64
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e21f      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ca:	4b61      	ldr	r3, [pc, #388]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0f0      	beq.n	80070b8 <HAL_RCC_OscConfig+0xdc>
 80070d6:	e014      	b.n	8007102 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d8:	f7fb fff2 	bl	80030c0 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070e0:	f7fb ffee 	bl	80030c0 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b64      	cmp	r3, #100	@ 0x64
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e20b      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070f2:	4b57      	ldr	r3, [pc, #348]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0x104>
 80070fe:	e000      	b.n	8007102 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d06f      	beq.n	80071ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800710e:	4b50      	ldr	r3, [pc, #320]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b00      	cmp	r3, #0
 8007118:	d017      	beq.n	800714a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800711a:	4b4d      	ldr	r3, [pc, #308]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007122:	2b08      	cmp	r3, #8
 8007124:	d105      	bne.n	8007132 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007126:	4b4a      	ldr	r3, [pc, #296]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007132:	4b47      	ldr	r3, [pc, #284]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d11c      	bne.n	8007178 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800713e:	4b44      	ldr	r3, [pc, #272]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d116      	bne.n	8007178 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800714a:	4b41      	ldr	r3, [pc, #260]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_RCC_OscConfig+0x186>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d001      	beq.n	8007162 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e1d3      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007162:	4b3b      	ldr	r3, [pc, #236]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	4937      	ldr	r1, [pc, #220]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007172:	4313      	orrs	r3, r2
 8007174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007176:	e03a      	b.n	80071ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d020      	beq.n	80071c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007180:	4b34      	ldr	r3, [pc, #208]	@ (8007254 <HAL_RCC_OscConfig+0x278>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007186:	f7fb ff9b 	bl	80030c0 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800718e:	f7fb ff97 	bl	80030c0 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e1b4      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ac:	4b28      	ldr	r3, [pc, #160]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	4925      	ldr	r1, [pc, #148]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	600b      	str	r3, [r1, #0]
 80071c0:	e015      	b.n	80071ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071c2:	4b24      	ldr	r3, [pc, #144]	@ (8007254 <HAL_RCC_OscConfig+0x278>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fb ff7a 	bl	80030c0 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d0:	f7fb ff76 	bl	80030c0 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e193      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d036      	beq.n	8007268 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d016      	beq.n	8007230 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007202:	4b15      	ldr	r3, [pc, #84]	@ (8007258 <HAL_RCC_OscConfig+0x27c>)
 8007204:	2201      	movs	r2, #1
 8007206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007208:	f7fb ff5a 	bl	80030c0 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007210:	f7fb ff56 	bl	80030c0 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e173      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007222:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <HAL_RCC_OscConfig+0x274>)
 8007224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x234>
 800722e:	e01b      	b.n	8007268 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007230:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <HAL_RCC_OscConfig+0x27c>)
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007236:	f7fb ff43 	bl	80030c0 <HAL_GetTick>
 800723a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800723c:	e00e      	b.n	800725c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800723e:	f7fb ff3f 	bl	80030c0 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d907      	bls.n	800725c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e15c      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
 8007250:	40023800 	.word	0x40023800
 8007254:	42470000 	.word	0x42470000
 8007258:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800725c:	4b8a      	ldr	r3, [pc, #552]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800725e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1ea      	bne.n	800723e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 8097 	beq.w	80073a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007276:	2300      	movs	r3, #0
 8007278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800727a:	4b83      	ldr	r3, [pc, #524]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10f      	bne.n	80072a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007286:	2300      	movs	r3, #0
 8007288:	60bb      	str	r3, [r7, #8]
 800728a:	4b7f      	ldr	r3, [pc, #508]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728e:	4a7e      	ldr	r2, [pc, #504]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007294:	6413      	str	r3, [r2, #64]	@ 0x40
 8007296:	4b7c      	ldr	r3, [pc, #496]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a2:	2301      	movs	r3, #1
 80072a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a6:	4b79      	ldr	r3, [pc, #484]	@ (800748c <HAL_RCC_OscConfig+0x4b0>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d118      	bne.n	80072e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072b2:	4b76      	ldr	r3, [pc, #472]	@ (800748c <HAL_RCC_OscConfig+0x4b0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a75      	ldr	r2, [pc, #468]	@ (800748c <HAL_RCC_OscConfig+0x4b0>)
 80072b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072be:	f7fb feff 	bl	80030c0 <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c4:	e008      	b.n	80072d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c6:	f7fb fefb 	bl	80030c0 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e118      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d8:	4b6c      	ldr	r3, [pc, #432]	@ (800748c <HAL_RCC_OscConfig+0x4b0>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f0      	beq.n	80072c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d106      	bne.n	80072fa <HAL_RCC_OscConfig+0x31e>
 80072ec:	4b66      	ldr	r3, [pc, #408]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f0:	4a65      	ldr	r2, [pc, #404]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f8:	e01c      	b.n	8007334 <HAL_RCC_OscConfig+0x358>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b05      	cmp	r3, #5
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0x340>
 8007302:	4b61      	ldr	r3, [pc, #388]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007306:	4a60      	ldr	r2, [pc, #384]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007308:	f043 0304 	orr.w	r3, r3, #4
 800730c:	6713      	str	r3, [r2, #112]	@ 0x70
 800730e:	4b5e      	ldr	r3, [pc, #376]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007312:	4a5d      	ldr	r2, [pc, #372]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	6713      	str	r3, [r2, #112]	@ 0x70
 800731a:	e00b      	b.n	8007334 <HAL_RCC_OscConfig+0x358>
 800731c:	4b5a      	ldr	r3, [pc, #360]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007320:	4a59      	ldr	r2, [pc, #356]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	6713      	str	r3, [r2, #112]	@ 0x70
 8007328:	4b57      	ldr	r3, [pc, #348]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800732a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732c:	4a56      	ldr	r2, [pc, #344]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800732e:	f023 0304 	bic.w	r3, r3, #4
 8007332:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d015      	beq.n	8007368 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800733c:	f7fb fec0 	bl	80030c0 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007342:	e00a      	b.n	800735a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007344:	f7fb febc 	bl	80030c0 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007352:	4293      	cmp	r3, r2
 8007354:	d901      	bls.n	800735a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e0d7      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735a:	4b4b      	ldr	r3, [pc, #300]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800735c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0ee      	beq.n	8007344 <HAL_RCC_OscConfig+0x368>
 8007366:	e014      	b.n	8007392 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007368:	f7fb feaa 	bl	80030c0 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800736e:	e00a      	b.n	8007386 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007370:	f7fb fea6 	bl	80030c0 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800737e:	4293      	cmp	r3, r2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e0c1      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007386:	4b40      	ldr	r3, [pc, #256]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1ee      	bne.n	8007370 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d105      	bne.n	80073a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007398:	4b3b      	ldr	r3, [pc, #236]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800739a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739c:	4a3a      	ldr	r2, [pc, #232]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800739e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 80ad 	beq.w	8007508 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073ae:	4b36      	ldr	r3, [pc, #216]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 030c 	and.w	r3, r3, #12
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d060      	beq.n	800747c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d145      	bne.n	800744e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073c2:	4b33      	ldr	r3, [pc, #204]	@ (8007490 <HAL_RCC_OscConfig+0x4b4>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c8:	f7fb fe7a 	bl	80030c0 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d0:	f7fb fe76 	bl	80030c0 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e093      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073e2:	4b29      	ldr	r3, [pc, #164]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f0      	bne.n	80073d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69da      	ldr	r2, [r3, #28]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fc:	019b      	lsls	r3, r3, #6
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	3b01      	subs	r3, #1
 8007408:	041b      	lsls	r3, r3, #16
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	061b      	lsls	r3, r3, #24
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007418:	071b      	lsls	r3, r3, #28
 800741a:	491b      	ldr	r1, [pc, #108]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 800741c:	4313      	orrs	r3, r2
 800741e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007420:	4b1b      	ldr	r3, [pc, #108]	@ (8007490 <HAL_RCC_OscConfig+0x4b4>)
 8007422:	2201      	movs	r2, #1
 8007424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007426:	f7fb fe4b 	bl	80030c0 <HAL_GetTick>
 800742a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800742c:	e008      	b.n	8007440 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800742e:	f7fb fe47 	bl	80030c0 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d901      	bls.n	8007440 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e064      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007440:	4b11      	ldr	r3, [pc, #68]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0f0      	beq.n	800742e <HAL_RCC_OscConfig+0x452>
 800744c:	e05c      	b.n	8007508 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800744e:	4b10      	ldr	r3, [pc, #64]	@ (8007490 <HAL_RCC_OscConfig+0x4b4>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007454:	f7fb fe34 	bl	80030c0 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800745c:	f7fb fe30 	bl	80030c0 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e04d      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746e:	4b06      	ldr	r3, [pc, #24]	@ (8007488 <HAL_RCC_OscConfig+0x4ac>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1f0      	bne.n	800745c <HAL_RCC_OscConfig+0x480>
 800747a:	e045      	b.n	8007508 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d107      	bne.n	8007494 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e040      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
 8007488:	40023800 	.word	0x40023800
 800748c:	40007000 	.word	0x40007000
 8007490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007494:	4b1f      	ldr	r3, [pc, #124]	@ (8007514 <HAL_RCC_OscConfig+0x538>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d030      	beq.n	8007504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d129      	bne.n	8007504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d122      	bne.n	8007504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80074c4:	4013      	ands	r3, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d119      	bne.n	8007504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	3b01      	subs	r3, #1
 80074de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d10f      	bne.n	8007504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d107      	bne.n	8007504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007500:	429a      	cmp	r2, r3
 8007502:	d001      	beq.n	8007508 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40023800 	.word	0x40023800

08007518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e041      	b.n	80075ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fb fb22 	bl	8002b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3304      	adds	r3, #4
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f000 fbb8 	bl	8007ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d001      	beq.n	80075d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e046      	b.n	800765e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a23      	ldr	r2, [pc, #140]	@ (800766c <HAL_TIM_Base_Start+0xb4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d022      	beq.n	8007628 <HAL_TIM_Base_Start+0x70>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ea:	d01d      	beq.n	8007628 <HAL_TIM_Base_Start+0x70>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007670 <HAL_TIM_Base_Start+0xb8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d018      	beq.n	8007628 <HAL_TIM_Base_Start+0x70>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007674 <HAL_TIM_Base_Start+0xbc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d013      	beq.n	8007628 <HAL_TIM_Base_Start+0x70>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a1c      	ldr	r2, [pc, #112]	@ (8007678 <HAL_TIM_Base_Start+0xc0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00e      	beq.n	8007628 <HAL_TIM_Base_Start+0x70>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a1b      	ldr	r2, [pc, #108]	@ (800767c <HAL_TIM_Base_Start+0xc4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d009      	beq.n	8007628 <HAL_TIM_Base_Start+0x70>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a19      	ldr	r2, [pc, #100]	@ (8007680 <HAL_TIM_Base_Start+0xc8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <HAL_TIM_Base_Start+0x70>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a18      	ldr	r2, [pc, #96]	@ (8007684 <HAL_TIM_Base_Start+0xcc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d111      	bne.n	800764c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b06      	cmp	r3, #6
 8007638:	d010      	beq.n	800765c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0201 	orr.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764a:	e007      	b.n	800765c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40010000 	.word	0x40010000
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40010400 	.word	0x40010400
 8007680:	40014000 	.word	0x40014000
 8007684:	40001800 	.word	0x40001800

08007688 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6a1a      	ldr	r2, [r3, #32]
 8007696:	f241 1311 	movw	r3, #4369	@ 0x1111
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10f      	bne.n	80076c0 <HAL_TIM_Base_Stop+0x38>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d107      	bne.n	80076c0 <HAL_TIM_Base_Stop+0x38>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e041      	b.n	800776c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7fb fa21 	bl	8002b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2202      	movs	r2, #2
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3304      	adds	r3, #4
 8007712:	4619      	mov	r1, r3
 8007714:	4610      	mov	r0, r2
 8007716:	f000 fad9 	bl	8007ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d020      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01b      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0202 	mvn.w	r2, #2
 80077a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa65 	bl	8007c8e <HAL_TIM_IC_CaptureCallback>
 80077c4:	e005      	b.n	80077d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa57 	bl	8007c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fa68 	bl	8007ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d020      	beq.n	8007824 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01b      	beq.n	8007824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0204 	mvn.w	r2, #4
 80077f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2202      	movs	r2, #2
 80077fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa3f 	bl	8007c8e <HAL_TIM_IC_CaptureCallback>
 8007810:	e005      	b.n	800781e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa31 	bl	8007c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fa42 	bl	8007ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d020      	beq.n	8007870 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01b      	beq.n	8007870 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f06f 0208 	mvn.w	r2, #8
 8007840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2204      	movs	r2, #4
 8007846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa19 	bl	8007c8e <HAL_TIM_IC_CaptureCallback>
 800785c:	e005      	b.n	800786a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa0b 	bl	8007c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fa1c 	bl	8007ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f003 0310 	and.w	r3, r3, #16
 8007876:	2b00      	cmp	r3, #0
 8007878:	d020      	beq.n	80078bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0210 	mvn.w	r2, #16
 800788c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2208      	movs	r2, #8
 8007892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9f3 	bl	8007c8e <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f9e5 	bl	8007c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f9f6 	bl	8007ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00c      	beq.n	80078e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0201 	mvn.w	r2, #1
 80078d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f9c3 	bl	8007c66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d007      	beq.n	8007904 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fdb2 	bl	8008468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00c      	beq.n	8007928 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f9c7 	bl	8007cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00c      	beq.n	800794c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b00      	cmp	r3, #0
 800793a:	d007      	beq.n	800794c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0220 	mvn.w	r2, #32
 8007944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fd84 	bl	8008454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800796e:	2302      	movs	r3, #2
 8007970:	e0ae      	b.n	8007ad0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b0c      	cmp	r3, #12
 800797e:	f200 809f 	bhi.w	8007ac0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007982:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	080079bd 	.word	0x080079bd
 800798c:	08007ac1 	.word	0x08007ac1
 8007990:	08007ac1 	.word	0x08007ac1
 8007994:	08007ac1 	.word	0x08007ac1
 8007998:	080079fd 	.word	0x080079fd
 800799c:	08007ac1 	.word	0x08007ac1
 80079a0:	08007ac1 	.word	0x08007ac1
 80079a4:	08007ac1 	.word	0x08007ac1
 80079a8:	08007a3f 	.word	0x08007a3f
 80079ac:	08007ac1 	.word	0x08007ac1
 80079b0:	08007ac1 	.word	0x08007ac1
 80079b4:	08007ac1 	.word	0x08007ac1
 80079b8:	08007a7f 	.word	0x08007a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fa2e 	bl	8007e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0208 	orr.w	r2, r2, #8
 80079d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0204 	bic.w	r2, r2, #4
 80079e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6999      	ldr	r1, [r3, #24]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	691a      	ldr	r2, [r3, #16]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	619a      	str	r2, [r3, #24]
      break;
 80079fa:	e064      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fa7e 	bl	8007f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6999      	ldr	r1, [r3, #24]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	021a      	lsls	r2, r3, #8
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	619a      	str	r2, [r3, #24]
      break;
 8007a3c:	e043      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fad3 	bl	8007ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69da      	ldr	r2, [r3, #28]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0208 	orr.w	r2, r2, #8
 8007a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0204 	bic.w	r2, r2, #4
 8007a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69d9      	ldr	r1, [r3, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	61da      	str	r2, [r3, #28]
      break;
 8007a7c:	e023      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fb27 	bl	80080d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69da      	ldr	r2, [r3, #28]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69da      	ldr	r2, [r3, #28]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69d9      	ldr	r1, [r3, #28]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	021a      	lsls	r2, r3, #8
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	61da      	str	r2, [r3, #28]
      break;
 8007abe:	e002      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_TIM_ConfigClockSource+0x1c>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e0b4      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x186>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b2c:	d03e      	beq.n	8007bac <HAL_TIM_ConfigClockSource+0xd4>
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b32:	f200 8087 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b3a:	f000 8086 	beq.w	8007c4a <HAL_TIM_ConfigClockSource+0x172>
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b42:	d87f      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b44:	2b70      	cmp	r3, #112	@ 0x70
 8007b46:	d01a      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0xa6>
 8007b48:	2b70      	cmp	r3, #112	@ 0x70
 8007b4a:	d87b      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b4c:	2b60      	cmp	r3, #96	@ 0x60
 8007b4e:	d050      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8007b50:	2b60      	cmp	r3, #96	@ 0x60
 8007b52:	d877      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b54:	2b50      	cmp	r3, #80	@ 0x50
 8007b56:	d03c      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8007b58:	2b50      	cmp	r3, #80	@ 0x50
 8007b5a:	d873      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b5c:	2b40      	cmp	r3, #64	@ 0x40
 8007b5e:	d058      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x13a>
 8007b60:	2b40      	cmp	r3, #64	@ 0x40
 8007b62:	d86f      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b64:	2b30      	cmp	r3, #48	@ 0x30
 8007b66:	d064      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b68:	2b30      	cmp	r3, #48	@ 0x30
 8007b6a:	d86b      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d060      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d867      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05c      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d05a      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b7c:	e062      	b.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b8e:	f000 fb73 	bl	8008278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	609a      	str	r2, [r3, #8]
      break;
 8007baa:	e04f      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bbc:	f000 fb5c 	bl	8008278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bce:	609a      	str	r2, [r3, #8]
      break;
 8007bd0:	e03c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bde:	461a      	mov	r2, r3
 8007be0:	f000 fad0 	bl	8008184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2150      	movs	r1, #80	@ 0x50
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fb29 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007bf0:	e02c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f000 faef 	bl	80081e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2160      	movs	r1, #96	@ 0x60
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fb19 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007c10:	e01c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f000 fab0 	bl	8008184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2140      	movs	r1, #64	@ 0x40
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fb09 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007c30:	e00c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f000 fb00 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007c42:	e003      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
      break;
 8007c48:	e000      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a46      	ldr	r2, [pc, #280]	@ (8007df8 <TIM_Base_SetConfig+0x12c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d013      	beq.n	8007d0c <TIM_Base_SetConfig+0x40>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cea:	d00f      	beq.n	8007d0c <TIM_Base_SetConfig+0x40>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a43      	ldr	r2, [pc, #268]	@ (8007dfc <TIM_Base_SetConfig+0x130>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00b      	beq.n	8007d0c <TIM_Base_SetConfig+0x40>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a42      	ldr	r2, [pc, #264]	@ (8007e00 <TIM_Base_SetConfig+0x134>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d007      	beq.n	8007d0c <TIM_Base_SetConfig+0x40>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a41      	ldr	r2, [pc, #260]	@ (8007e04 <TIM_Base_SetConfig+0x138>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <TIM_Base_SetConfig+0x40>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a40      	ldr	r2, [pc, #256]	@ (8007e08 <TIM_Base_SetConfig+0x13c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d108      	bne.n	8007d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a35      	ldr	r2, [pc, #212]	@ (8007df8 <TIM_Base_SetConfig+0x12c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d02b      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d2c:	d027      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a32      	ldr	r2, [pc, #200]	@ (8007dfc <TIM_Base_SetConfig+0x130>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d023      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a31      	ldr	r2, [pc, #196]	@ (8007e00 <TIM_Base_SetConfig+0x134>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01f      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a30      	ldr	r2, [pc, #192]	@ (8007e04 <TIM_Base_SetConfig+0x138>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d01b      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a2f      	ldr	r2, [pc, #188]	@ (8007e08 <TIM_Base_SetConfig+0x13c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d017      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a2e      	ldr	r2, [pc, #184]	@ (8007e0c <TIM_Base_SetConfig+0x140>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d013      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a2d      	ldr	r2, [pc, #180]	@ (8007e10 <TIM_Base_SetConfig+0x144>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00f      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a2c      	ldr	r2, [pc, #176]	@ (8007e14 <TIM_Base_SetConfig+0x148>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00b      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a2b      	ldr	r2, [pc, #172]	@ (8007e18 <TIM_Base_SetConfig+0x14c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d007      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a2a      	ldr	r2, [pc, #168]	@ (8007e1c <TIM_Base_SetConfig+0x150>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <TIM_Base_SetConfig+0xb2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a29      	ldr	r2, [pc, #164]	@ (8007e20 <TIM_Base_SetConfig+0x154>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d108      	bne.n	8007d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a10      	ldr	r2, [pc, #64]	@ (8007df8 <TIM_Base_SetConfig+0x12c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_Base_SetConfig+0xf8>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a12      	ldr	r2, [pc, #72]	@ (8007e08 <TIM_Base_SetConfig+0x13c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d103      	bne.n	8007dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d105      	bne.n	8007dea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f023 0201 	bic.w	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	611a      	str	r2, [r3, #16]
  }
}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	40010400 	.word	0x40010400
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40014400 	.word	0x40014400
 8007e14:	40014800 	.word	0x40014800
 8007e18:	40001800 	.word	0x40001800
 8007e1c:	40001c00 	.word	0x40001c00
 8007e20:	40002000 	.word	0x40002000

08007e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	f023 0201 	bic.w	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f023 0302 	bic.w	r3, r3, #2
 8007e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a20      	ldr	r2, [pc, #128]	@ (8007efc <TIM_OC1_SetConfig+0xd8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC1_SetConfig+0x64>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a1f      	ldr	r2, [pc, #124]	@ (8007f00 <TIM_OC1_SetConfig+0xdc>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d10c      	bne.n	8007ea2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f023 0308 	bic.w	r3, r3, #8
 8007e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f023 0304 	bic.w	r3, r3, #4
 8007ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a15      	ldr	r2, [pc, #84]	@ (8007efc <TIM_OC1_SetConfig+0xd8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d003      	beq.n	8007eb2 <TIM_OC1_SetConfig+0x8e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a14      	ldr	r2, [pc, #80]	@ (8007f00 <TIM_OC1_SetConfig+0xdc>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d111      	bne.n	8007ed6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	621a      	str	r2, [r3, #32]
}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40010400 	.word	0x40010400

08007f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	f023 0210 	bic.w	r2, r3, #16
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	021b      	lsls	r3, r3, #8
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f023 0320 	bic.w	r3, r3, #32
 8007f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a22      	ldr	r2, [pc, #136]	@ (8007fe8 <TIM_OC2_SetConfig+0xe4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d003      	beq.n	8007f6c <TIM_OC2_SetConfig+0x68>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a21      	ldr	r2, [pc, #132]	@ (8007fec <TIM_OC2_SetConfig+0xe8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d10d      	bne.n	8007f88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a17      	ldr	r2, [pc, #92]	@ (8007fe8 <TIM_OC2_SetConfig+0xe4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_OC2_SetConfig+0x94>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a16      	ldr	r2, [pc, #88]	@ (8007fec <TIM_OC2_SetConfig+0xe8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d113      	bne.n	8007fc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	621a      	str	r2, [r3, #32]
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40010000 	.word	0x40010000
 8007fec:	40010400 	.word	0x40010400

08007ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800801e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	021b      	lsls	r3, r3, #8
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a21      	ldr	r2, [pc, #132]	@ (80080d0 <TIM_OC3_SetConfig+0xe0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d003      	beq.n	8008056 <TIM_OC3_SetConfig+0x66>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a20      	ldr	r2, [pc, #128]	@ (80080d4 <TIM_OC3_SetConfig+0xe4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d10d      	bne.n	8008072 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800805c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a16      	ldr	r2, [pc, #88]	@ (80080d0 <TIM_OC3_SetConfig+0xe0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d003      	beq.n	8008082 <TIM_OC3_SetConfig+0x92>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a15      	ldr	r2, [pc, #84]	@ (80080d4 <TIM_OC3_SetConfig+0xe4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d113      	bne.n	80080aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	621a      	str	r2, [r3, #32]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	40010000 	.word	0x40010000
 80080d4:	40010400 	.word	0x40010400

080080d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800810e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	031b      	lsls	r3, r3, #12
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a12      	ldr	r2, [pc, #72]	@ (800817c <TIM_OC4_SetConfig+0xa4>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_OC4_SetConfig+0x68>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a11      	ldr	r2, [pc, #68]	@ (8008180 <TIM_OC4_SetConfig+0xa8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d109      	bne.n	8008154 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	019b      	lsls	r3, r3, #6
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	621a      	str	r2, [r3, #32]
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	40010000 	.word	0x40010000
 8008180:	40010400 	.word	0x40010400

08008184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f023 0201 	bic.w	r2, r3, #1
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 030a 	bic.w	r3, r3, #10
 80081c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	621a      	str	r2, [r3, #32]
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b087      	sub	sp, #28
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	f023 0210 	bic.w	r2, r3, #16
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800820c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	031b      	lsls	r3, r3, #12
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800821e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	f043 0307 	orr.w	r3, r3, #7
 8008264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	021a      	lsls	r2, r3, #8
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	431a      	orrs	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4313      	orrs	r3, r2
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	609a      	str	r2, [r3, #8]
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e05a      	b.n	8008386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a21      	ldr	r2, [pc, #132]	@ (8008394 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d022      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800831c:	d01d      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1d      	ldr	r2, [pc, #116]	@ (8008398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d018      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1b      	ldr	r2, [pc, #108]	@ (800839c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d013      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1a      	ldr	r2, [pc, #104]	@ (80083a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d00e      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a18      	ldr	r2, [pc, #96]	@ (80083a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d009      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a17      	ldr	r2, [pc, #92]	@ (80083a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d004      	beq.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a15      	ldr	r2, [pc, #84]	@ (80083ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d10c      	bne.n	8008374 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	4313      	orrs	r3, r2
 800836a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	40010000 	.word	0x40010000
 8008398:	40000400 	.word	0x40000400
 800839c:	40000800 	.word	0x40000800
 80083a0:	40000c00 	.word	0x40000c00
 80083a4:	40010400 	.word	0x40010400
 80083a8:	40014000 	.word	0x40014000
 80083ac:	40001800 	.word	0x40001800

080083b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e03d      	b.n	8008448 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e042      	b.n	8008514 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fa fbe6 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2224      	movs	r2, #36	@ 0x24
 80084ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fdbd 	bl	8009040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695a      	ldr	r2, [r3, #20]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08a      	sub	sp, #40	@ 0x28
 8008520:	af02      	add	r7, sp, #8
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	4613      	mov	r3, r2
 800852a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b20      	cmp	r3, #32
 800853a:	d175      	bne.n	8008628 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d002      	beq.n	8008548 <HAL_UART_Transmit+0x2c>
 8008542:	88fb      	ldrh	r3, [r7, #6]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e06e      	b.n	800862a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2221      	movs	r2, #33	@ 0x21
 8008556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800855a:	f7fa fdb1 	bl	80030c0 <HAL_GetTick>
 800855e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	88fa      	ldrh	r2, [r7, #6]
 8008564:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	88fa      	ldrh	r2, [r7, #6]
 800856a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008574:	d108      	bne.n	8008588 <HAL_UART_Transmit+0x6c>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d104      	bne.n	8008588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	e003      	b.n	8008590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800858c:	2300      	movs	r3, #0
 800858e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008590:	e02e      	b.n	80085f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2200      	movs	r2, #0
 800859a:	2180      	movs	r1, #128	@ 0x80
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 fb1f 	bl	8008be0 <UART_WaitOnFlagUntilTimeout>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e03a      	b.n	800862a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10b      	bne.n	80085d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	3302      	adds	r3, #2
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	e007      	b.n	80085e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	3301      	adds	r3, #1
 80085e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1cb      	bne.n	8008592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2200      	movs	r2, #0
 8008602:	2140      	movs	r1, #64	@ 0x40
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 faeb 	bl	8008be0 <UART_WaitOnFlagUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2220      	movs	r2, #32
 8008614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e006      	b.n	800862a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	e000      	b.n	800862a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008628:	2302      	movs	r3, #2
  }
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	4613      	mov	r3, r2
 800863e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b20      	cmp	r3, #32
 800864a:	d112      	bne.n	8008672 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <HAL_UART_Receive_IT+0x26>
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e00b      	b.n	8008674 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008662:	88fb      	ldrh	r3, [r7, #6]
 8008664:	461a      	mov	r2, r3
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fb12 	bl	8008c92 <UART_Start_Receive_IT>
 800866e:	4603      	mov	r3, r0
 8008670:	e000      	b.n	8008674 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008672:	2302      	movs	r3, #2
  }
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b0ba      	sub	sp, #232	@ 0xe8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80086ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10f      	bne.n	80086e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <HAL_UART_IRQHandler+0x66>
 80086ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fbf2 	bl	8008ec4 <UART_Receive_IT>
      return;
 80086e0:	e25b      	b.n	8008b9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 80de 	beq.w	80088a8 <HAL_UART_IRQHandler+0x22c>
 80086ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d106      	bne.n	8008706 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80d1 	beq.w	80088a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00b      	beq.n	800872a <HAL_UART_IRQHandler+0xae>
 8008712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008722:	f043 0201 	orr.w	r2, r3, #1
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800872a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <HAL_UART_IRQHandler+0xd2>
 8008736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008746:	f043 0202 	orr.w	r2, r3, #2
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800874e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00b      	beq.n	8008772 <HAL_UART_IRQHandler+0xf6>
 800875a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d005      	beq.n	8008772 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876a:	f043 0204 	orr.w	r2, r3, #4
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008776:	f003 0308 	and.w	r3, r3, #8
 800877a:	2b00      	cmp	r3, #0
 800877c:	d011      	beq.n	80087a2 <HAL_UART_IRQHandler+0x126>
 800877e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800878a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879a:	f043 0208 	orr.w	r2, r3, #8
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 81f2 	beq.w	8008b90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d008      	beq.n	80087ca <HAL_UART_IRQHandler+0x14e>
 80087b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb7d 	bl	8008ec4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d4:	2b40      	cmp	r3, #64	@ 0x40
 80087d6:	bf0c      	ite	eq
 80087d8:	2301      	moveq	r3, #1
 80087da:	2300      	movne	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087e6:	f003 0308 	and.w	r3, r3, #8
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d103      	bne.n	80087f6 <HAL_UART_IRQHandler+0x17a>
 80087ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d04f      	beq.n	8008896 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fa85 	bl	8008d06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008806:	2b40      	cmp	r3, #64	@ 0x40
 8008808:	d141      	bne.n	800888e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3314      	adds	r3, #20
 8008810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3314      	adds	r3, #20
 8008832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008836:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800883a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800884e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1d9      	bne.n	800880a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d013      	beq.n	8008886 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008862:	4a7e      	ldr	r2, [pc, #504]	@ (8008a5c <HAL_UART_IRQHandler+0x3e0>)
 8008864:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886a:	4618      	mov	r0, r3
 800886c:	f7fb fdbe 	bl	80043ec <HAL_DMA_Abort_IT>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d016      	beq.n	80088a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008884:	e00e      	b.n	80088a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f994 	bl	8008bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800888c:	e00a      	b.n	80088a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f990 	bl	8008bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008894:	e006      	b.n	80088a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f98c 	bl	8008bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80088a2:	e175      	b.n	8008b90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a4:	bf00      	nop
    return;
 80088a6:	e173      	b.n	8008b90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	f040 814f 	bne.w	8008b50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 8148 	beq.w	8008b50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088c4:	f003 0310 	and.w	r3, r3, #16
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8141 	beq.w	8008b50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088ce:	2300      	movs	r3, #0
 80088d0:	60bb      	str	r3, [r7, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60bb      	str	r3, [r7, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	60bb      	str	r3, [r7, #8]
 80088e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ee:	2b40      	cmp	r3, #64	@ 0x40
 80088f0:	f040 80b6 	bne.w	8008a60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8145 	beq.w	8008b94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800890e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008912:	429a      	cmp	r2, r3
 8008914:	f080 813e 	bcs.w	8008b94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800891e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800892a:	f000 8088 	beq.w	8008a3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	330c      	adds	r3, #12
 8008934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008944:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800894c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	330c      	adds	r3, #12
 8008956:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800895a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800895e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008966:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1d9      	bne.n	800892e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3314      	adds	r3, #20
 8008980:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800898a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800898c:	f023 0301 	bic.w	r3, r3, #1
 8008990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3314      	adds	r3, #20
 800899a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800899e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e1      	bne.n	800897a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3314      	adds	r3, #20
 80089bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3314      	adds	r3, #20
 80089d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e3      	bne.n	80089b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	330c      	adds	r3, #12
 8008a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a0e:	f023 0310 	bic.w	r3, r3, #16
 8008a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	330c      	adds	r3, #12
 8008a1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a28:	e841 2300 	strex	r3, r2, [r1]
 8008a2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e3      	bne.n	80089fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fb fc67 	bl	800430c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2202      	movs	r2, #2
 8008a42:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f8b7 	bl	8008bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a5a:	e09b      	b.n	8008b94 <HAL_UART_IRQHandler+0x518>
 8008a5c:	08008dcd 	.word	0x08008dcd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 808e 	beq.w	8008b98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8089 	beq.w	8008b98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	330c      	adds	r3, #12
 8008a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008aaa:	647a      	str	r2, [r7, #68]	@ 0x44
 8008aac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e3      	bne.n	8008a86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3314      	adds	r3, #20
 8008ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	f023 0301 	bic.w	r3, r3, #1
 8008ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3314      	adds	r3, #20
 8008ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ae2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1e3      	bne.n	8008abe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	330c      	adds	r3, #12
 8008b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0310 	bic.w	r3, r3, #16
 8008b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b28:	61fa      	str	r2, [r7, #28]
 8008b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	69b9      	ldr	r1, [r7, #24]
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	617b      	str	r3, [r7, #20]
   return(result);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e3      	bne.n	8008b04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f83d 	bl	8008bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b4e:	e023      	b.n	8008b98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <HAL_UART_IRQHandler+0x4f4>
 8008b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f943 	bl	8008df4 <UART_Transmit_IT>
    return;
 8008b6e:	e014      	b.n	8008b9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00e      	beq.n	8008b9a <HAL_UART_IRQHandler+0x51e>
 8008b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d008      	beq.n	8008b9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f983 	bl	8008e94 <UART_EndTransmit_IT>
    return;
 8008b8e:	e004      	b.n	8008b9a <HAL_UART_IRQHandler+0x51e>
    return;
 8008b90:	bf00      	nop
 8008b92:	e002      	b.n	8008b9a <HAL_UART_IRQHandler+0x51e>
      return;
 8008b94:	bf00      	nop
 8008b96:	e000      	b.n	8008b9a <HAL_UART_IRQHandler+0x51e>
      return;
 8008b98:	bf00      	nop
  }
}
 8008b9a:	37e8      	adds	r7, #232	@ 0xe8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	4613      	mov	r3, r2
 8008bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf0:	e03b      	b.n	8008c6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf8:	d037      	beq.n	8008c6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bfa:	f7fa fa61 	bl	80030c0 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	6a3a      	ldr	r2, [r7, #32]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d302      	bcc.n	8008c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e03a      	b.n	8008c8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d023      	beq.n	8008c6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b80      	cmp	r3, #128	@ 0x80
 8008c26:	d020      	beq.n	8008c6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b40      	cmp	r3, #64	@ 0x40
 8008c2c:	d01d      	beq.n	8008c6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d116      	bne.n	8008c6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 f857 	bl	8008d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2208      	movs	r2, #8
 8008c5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e00f      	b.n	8008c8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	4013      	ands	r3, r2
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	bf0c      	ite	eq
 8008c7a:	2301      	moveq	r3, #1
 8008c7c:	2300      	movne	r3, #0
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	461a      	mov	r2, r3
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d0b4      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	88fa      	ldrh	r2, [r7, #6]
 8008caa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	88fa      	ldrh	r2, [r7, #6]
 8008cb0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2222      	movs	r2, #34	@ 0x22
 8008cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d007      	beq.n	8008cd8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cd6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695a      	ldr	r2, [r3, #20]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 0201 	orr.w	r2, r2, #1
 8008ce6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0220 	orr.w	r2, r2, #32
 8008cf6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b095      	sub	sp, #84	@ 0x54
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	330c      	adds	r3, #12
 8008d2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e5      	bne.n	8008d0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3314      	adds	r3, #20
 8008d60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e5      	bne.n	8008d42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d119      	bne.n	8008db2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	330c      	adds	r3, #12
 8008d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f023 0310 	bic.w	r3, r3, #16
 8008d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	330c      	adds	r3, #12
 8008d9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d9e:	61ba      	str	r2, [r7, #24]
 8008da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6979      	ldr	r1, [r7, #20]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e5      	bne.n	8008d7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008dc0:	bf00      	nop
 8008dc2:	3754      	adds	r7, #84	@ 0x54
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fee4 	bl	8008bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b21      	cmp	r3, #33	@ 0x21
 8008e06:	d13e      	bne.n	8008e86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e10:	d114      	bne.n	8008e3c <UART_Transmit_IT+0x48>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d110      	bne.n	8008e3c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	1c9a      	adds	r2, r3, #2
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	621a      	str	r2, [r3, #32]
 8008e3a:	e008      	b.n	8008e4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a1b      	ldr	r3, [r3, #32]
 8008e40:	1c59      	adds	r1, r3, #1
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	6211      	str	r1, [r2, #32]
 8008e46:	781a      	ldrb	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10f      	bne.n	8008e82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e000      	b.n	8008e88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e86:	2302      	movs	r3, #2
  }
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eaa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff fe73 	bl	8008ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08c      	sub	sp, #48	@ 0x30
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b22      	cmp	r3, #34	@ 0x22
 8008ed6:	f040 80ae 	bne.w	8009036 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ee2:	d117      	bne.n	8008f14 <UART_Receive_IT+0x50>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d113      	bne.n	8008f14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	1c9a      	adds	r2, r3, #2
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f12:	e026      	b.n	8008f62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f26:	d007      	beq.n	8008f38 <UART_Receive_IT+0x74>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <UART_Receive_IT+0x82>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	e008      	b.n	8008f58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d15d      	bne.n	8009032 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0220 	bic.w	r2, r2, #32
 8008f84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	695a      	ldr	r2, [r3, #20]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0201 	bic.w	r2, r2, #1
 8008fa4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d135      	bne.n	8009028 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	330c      	adds	r3, #12
 8008fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f023 0310 	bic.w	r3, r3, #16
 8008fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	330c      	adds	r3, #12
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe2:	623a      	str	r2, [r7, #32]
 8008fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	69f9      	ldr	r1, [r7, #28]
 8008fe8:	6a3a      	ldr	r2, [r7, #32]
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e5      	bne.n	8008fc2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0310 	and.w	r3, r3, #16
 8009000:	2b10      	cmp	r3, #16
 8009002:	d10a      	bne.n	800901a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff fdd1 	bl	8008bc8 <HAL_UARTEx_RxEventCallback>
 8009026:	e002      	b.n	800902e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7f8 fde1 	bl	8001bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	e002      	b.n	8009038 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	e000      	b.n	8009038 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009036:	2302      	movs	r3, #2
  }
}
 8009038:	4618      	mov	r0, r3
 800903a:	3730      	adds	r7, #48	@ 0x30
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009044:	b0c0      	sub	sp, #256	@ 0x100
 8009046:	af00      	add	r7, sp, #0
 8009048:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905c:	68d9      	ldr	r1, [r3, #12]
 800905e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	ea40 0301 	orr.w	r3, r0, r1
 8009068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800906a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	431a      	orrs	r2, r3
 8009078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	431a      	orrs	r2, r3
 8009080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	4313      	orrs	r3, r2
 8009088:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800908c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009098:	f021 010c 	bic.w	r1, r1, #12
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090a6:	430b      	orrs	r3, r1
 80090a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ba:	6999      	ldr	r1, [r3, #24]
 80090bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	ea40 0301 	orr.w	r3, r0, r1
 80090c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	4b8f      	ldr	r3, [pc, #572]	@ (800930c <UART_SetConfig+0x2cc>)
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d005      	beq.n	80090e0 <UART_SetConfig+0xa0>
 80090d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	4b8d      	ldr	r3, [pc, #564]	@ (8009310 <UART_SetConfig+0x2d0>)
 80090dc:	429a      	cmp	r2, r3
 80090de:	d104      	bne.n	80090ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090e0:	f7fd fd38 	bl	8006b54 <HAL_RCC_GetPCLK2Freq>
 80090e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090e8:	e003      	b.n	80090f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090ea:	f7fd fd1f 	bl	8006b2c <HAL_RCC_GetPCLK1Freq>
 80090ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090fc:	f040 810c 	bne.w	8009318 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009104:	2200      	movs	r2, #0
 8009106:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800910a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800910e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009112:	4622      	mov	r2, r4
 8009114:	462b      	mov	r3, r5
 8009116:	1891      	adds	r1, r2, r2
 8009118:	65b9      	str	r1, [r7, #88]	@ 0x58
 800911a:	415b      	adcs	r3, r3
 800911c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800911e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009122:	4621      	mov	r1, r4
 8009124:	eb12 0801 	adds.w	r8, r2, r1
 8009128:	4629      	mov	r1, r5
 800912a:	eb43 0901 	adc.w	r9, r3, r1
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800913a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800913e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009142:	4690      	mov	r8, r2
 8009144:	4699      	mov	r9, r3
 8009146:	4623      	mov	r3, r4
 8009148:	eb18 0303 	adds.w	r3, r8, r3
 800914c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009150:	462b      	mov	r3, r5
 8009152:	eb49 0303 	adc.w	r3, r9, r3
 8009156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800915a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009166:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800916a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800916e:	460b      	mov	r3, r1
 8009170:	18db      	adds	r3, r3, r3
 8009172:	653b      	str	r3, [r7, #80]	@ 0x50
 8009174:	4613      	mov	r3, r2
 8009176:	eb42 0303 	adc.w	r3, r2, r3
 800917a:	657b      	str	r3, [r7, #84]	@ 0x54
 800917c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009180:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009184:	f7f7 fde0 	bl	8000d48 <__aeabi_uldivmod>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4b61      	ldr	r3, [pc, #388]	@ (8009314 <UART_SetConfig+0x2d4>)
 800918e:	fba3 2302 	umull	r2, r3, r3, r2
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	011c      	lsls	r4, r3, #4
 8009196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800919a:	2200      	movs	r2, #0
 800919c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80091a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091a8:	4642      	mov	r2, r8
 80091aa:	464b      	mov	r3, r9
 80091ac:	1891      	adds	r1, r2, r2
 80091ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091b0:	415b      	adcs	r3, r3
 80091b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091b8:	4641      	mov	r1, r8
 80091ba:	eb12 0a01 	adds.w	sl, r2, r1
 80091be:	4649      	mov	r1, r9
 80091c0:	eb43 0b01 	adc.w	fp, r3, r1
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091d8:	4692      	mov	sl, r2
 80091da:	469b      	mov	fp, r3
 80091dc:	4643      	mov	r3, r8
 80091de:	eb1a 0303 	adds.w	r3, sl, r3
 80091e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091e6:	464b      	mov	r3, r9
 80091e8:	eb4b 0303 	adc.w	r3, fp, r3
 80091ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009204:	460b      	mov	r3, r1
 8009206:	18db      	adds	r3, r3, r3
 8009208:	643b      	str	r3, [r7, #64]	@ 0x40
 800920a:	4613      	mov	r3, r2
 800920c:	eb42 0303 	adc.w	r3, r2, r3
 8009210:	647b      	str	r3, [r7, #68]	@ 0x44
 8009212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800921a:	f7f7 fd95 	bl	8000d48 <__aeabi_uldivmod>
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	4611      	mov	r1, r2
 8009224:	4b3b      	ldr	r3, [pc, #236]	@ (8009314 <UART_SetConfig+0x2d4>)
 8009226:	fba3 2301 	umull	r2, r3, r3, r1
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	2264      	movs	r2, #100	@ 0x64
 800922e:	fb02 f303 	mul.w	r3, r2, r3
 8009232:	1acb      	subs	r3, r1, r3
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800923a:	4b36      	ldr	r3, [pc, #216]	@ (8009314 <UART_SetConfig+0x2d4>)
 800923c:	fba3 2302 	umull	r2, r3, r3, r2
 8009240:	095b      	lsrs	r3, r3, #5
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009248:	441c      	add	r4, r3
 800924a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800924e:	2200      	movs	r2, #0
 8009250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009254:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009258:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800925c:	4642      	mov	r2, r8
 800925e:	464b      	mov	r3, r9
 8009260:	1891      	adds	r1, r2, r2
 8009262:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009264:	415b      	adcs	r3, r3
 8009266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800926c:	4641      	mov	r1, r8
 800926e:	1851      	adds	r1, r2, r1
 8009270:	6339      	str	r1, [r7, #48]	@ 0x30
 8009272:	4649      	mov	r1, r9
 8009274:	414b      	adcs	r3, r1
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	f04f 0300 	mov.w	r3, #0
 8009280:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009284:	4659      	mov	r1, fp
 8009286:	00cb      	lsls	r3, r1, #3
 8009288:	4651      	mov	r1, sl
 800928a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800928e:	4651      	mov	r1, sl
 8009290:	00ca      	lsls	r2, r1, #3
 8009292:	4610      	mov	r0, r2
 8009294:	4619      	mov	r1, r3
 8009296:	4603      	mov	r3, r0
 8009298:	4642      	mov	r2, r8
 800929a:	189b      	adds	r3, r3, r2
 800929c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092a0:	464b      	mov	r3, r9
 80092a2:	460a      	mov	r2, r1
 80092a4:	eb42 0303 	adc.w	r3, r2, r3
 80092a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092c0:	460b      	mov	r3, r1
 80092c2:	18db      	adds	r3, r3, r3
 80092c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092c6:	4613      	mov	r3, r2
 80092c8:	eb42 0303 	adc.w	r3, r2, r3
 80092cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092d6:	f7f7 fd37 	bl	8000d48 <__aeabi_uldivmod>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4b0d      	ldr	r3, [pc, #52]	@ (8009314 <UART_SetConfig+0x2d4>)
 80092e0:	fba3 1302 	umull	r1, r3, r3, r2
 80092e4:	095b      	lsrs	r3, r3, #5
 80092e6:	2164      	movs	r1, #100	@ 0x64
 80092e8:	fb01 f303 	mul.w	r3, r1, r3
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	3332      	adds	r3, #50	@ 0x32
 80092f2:	4a08      	ldr	r2, [pc, #32]	@ (8009314 <UART_SetConfig+0x2d4>)
 80092f4:	fba2 2303 	umull	r2, r3, r2, r3
 80092f8:	095b      	lsrs	r3, r3, #5
 80092fa:	f003 0207 	and.w	r2, r3, #7
 80092fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4422      	add	r2, r4
 8009306:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009308:	e106      	b.n	8009518 <UART_SetConfig+0x4d8>
 800930a:	bf00      	nop
 800930c:	40011000 	.word	0x40011000
 8009310:	40011400 	.word	0x40011400
 8009314:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800931c:	2200      	movs	r2, #0
 800931e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009322:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009326:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800932a:	4642      	mov	r2, r8
 800932c:	464b      	mov	r3, r9
 800932e:	1891      	adds	r1, r2, r2
 8009330:	6239      	str	r1, [r7, #32]
 8009332:	415b      	adcs	r3, r3
 8009334:	627b      	str	r3, [r7, #36]	@ 0x24
 8009336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800933a:	4641      	mov	r1, r8
 800933c:	1854      	adds	r4, r2, r1
 800933e:	4649      	mov	r1, r9
 8009340:	eb43 0501 	adc.w	r5, r3, r1
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	f04f 0300 	mov.w	r3, #0
 800934c:	00eb      	lsls	r3, r5, #3
 800934e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009352:	00e2      	lsls	r2, r4, #3
 8009354:	4614      	mov	r4, r2
 8009356:	461d      	mov	r5, r3
 8009358:	4643      	mov	r3, r8
 800935a:	18e3      	adds	r3, r4, r3
 800935c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009360:	464b      	mov	r3, r9
 8009362:	eb45 0303 	adc.w	r3, r5, r3
 8009366:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800936a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009376:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009386:	4629      	mov	r1, r5
 8009388:	008b      	lsls	r3, r1, #2
 800938a:	4621      	mov	r1, r4
 800938c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009390:	4621      	mov	r1, r4
 8009392:	008a      	lsls	r2, r1, #2
 8009394:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009398:	f7f7 fcd6 	bl	8000d48 <__aeabi_uldivmod>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4b60      	ldr	r3, [pc, #384]	@ (8009524 <UART_SetConfig+0x4e4>)
 80093a2:	fba3 2302 	umull	r2, r3, r3, r2
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	011c      	lsls	r4, r3, #4
 80093aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093bc:	4642      	mov	r2, r8
 80093be:	464b      	mov	r3, r9
 80093c0:	1891      	adds	r1, r2, r2
 80093c2:	61b9      	str	r1, [r7, #24]
 80093c4:	415b      	adcs	r3, r3
 80093c6:	61fb      	str	r3, [r7, #28]
 80093c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093cc:	4641      	mov	r1, r8
 80093ce:	1851      	adds	r1, r2, r1
 80093d0:	6139      	str	r1, [r7, #16]
 80093d2:	4649      	mov	r1, r9
 80093d4:	414b      	adcs	r3, r1
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093e4:	4659      	mov	r1, fp
 80093e6:	00cb      	lsls	r3, r1, #3
 80093e8:	4651      	mov	r1, sl
 80093ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093ee:	4651      	mov	r1, sl
 80093f0:	00ca      	lsls	r2, r1, #3
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	4603      	mov	r3, r0
 80093f8:	4642      	mov	r2, r8
 80093fa:	189b      	adds	r3, r3, r2
 80093fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009400:	464b      	mov	r3, r9
 8009402:	460a      	mov	r2, r1
 8009404:	eb42 0303 	adc.w	r3, r2, r3
 8009408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800940c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009416:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	f04f 0300 	mov.w	r3, #0
 8009420:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009424:	4649      	mov	r1, r9
 8009426:	008b      	lsls	r3, r1, #2
 8009428:	4641      	mov	r1, r8
 800942a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800942e:	4641      	mov	r1, r8
 8009430:	008a      	lsls	r2, r1, #2
 8009432:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009436:	f7f7 fc87 	bl	8000d48 <__aeabi_uldivmod>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4611      	mov	r1, r2
 8009440:	4b38      	ldr	r3, [pc, #224]	@ (8009524 <UART_SetConfig+0x4e4>)
 8009442:	fba3 2301 	umull	r2, r3, r3, r1
 8009446:	095b      	lsrs	r3, r3, #5
 8009448:	2264      	movs	r2, #100	@ 0x64
 800944a:	fb02 f303 	mul.w	r3, r2, r3
 800944e:	1acb      	subs	r3, r1, r3
 8009450:	011b      	lsls	r3, r3, #4
 8009452:	3332      	adds	r3, #50	@ 0x32
 8009454:	4a33      	ldr	r2, [pc, #204]	@ (8009524 <UART_SetConfig+0x4e4>)
 8009456:	fba2 2303 	umull	r2, r3, r2, r3
 800945a:	095b      	lsrs	r3, r3, #5
 800945c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009460:	441c      	add	r4, r3
 8009462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009466:	2200      	movs	r2, #0
 8009468:	673b      	str	r3, [r7, #112]	@ 0x70
 800946a:	677a      	str	r2, [r7, #116]	@ 0x74
 800946c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009470:	4642      	mov	r2, r8
 8009472:	464b      	mov	r3, r9
 8009474:	1891      	adds	r1, r2, r2
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	415b      	adcs	r3, r3
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009480:	4641      	mov	r1, r8
 8009482:	1851      	adds	r1, r2, r1
 8009484:	6039      	str	r1, [r7, #0]
 8009486:	4649      	mov	r1, r9
 8009488:	414b      	adcs	r3, r1
 800948a:	607b      	str	r3, [r7, #4]
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	f04f 0300 	mov.w	r3, #0
 8009494:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009498:	4659      	mov	r1, fp
 800949a:	00cb      	lsls	r3, r1, #3
 800949c:	4651      	mov	r1, sl
 800949e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094a2:	4651      	mov	r1, sl
 80094a4:	00ca      	lsls	r2, r1, #3
 80094a6:	4610      	mov	r0, r2
 80094a8:	4619      	mov	r1, r3
 80094aa:	4603      	mov	r3, r0
 80094ac:	4642      	mov	r2, r8
 80094ae:	189b      	adds	r3, r3, r2
 80094b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094b2:	464b      	mov	r3, r9
 80094b4:	460a      	mov	r2, r1
 80094b6:	eb42 0303 	adc.w	r3, r2, r3
 80094ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80094c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094d4:	4649      	mov	r1, r9
 80094d6:	008b      	lsls	r3, r1, #2
 80094d8:	4641      	mov	r1, r8
 80094da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094de:	4641      	mov	r1, r8
 80094e0:	008a      	lsls	r2, r1, #2
 80094e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094e6:	f7f7 fc2f 	bl	8000d48 <__aeabi_uldivmod>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009524 <UART_SetConfig+0x4e4>)
 80094f0:	fba3 1302 	umull	r1, r3, r3, r2
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	2164      	movs	r1, #100	@ 0x64
 80094f8:	fb01 f303 	mul.w	r3, r1, r3
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	3332      	adds	r3, #50	@ 0x32
 8009502:	4a08      	ldr	r2, [pc, #32]	@ (8009524 <UART_SetConfig+0x4e4>)
 8009504:	fba2 2303 	umull	r2, r3, r2, r3
 8009508:	095b      	lsrs	r3, r3, #5
 800950a:	f003 020f 	and.w	r2, r3, #15
 800950e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4422      	add	r2, r4
 8009516:	609a      	str	r2, [r3, #8]
}
 8009518:	bf00      	nop
 800951a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800951e:	46bd      	mov	sp, r7
 8009520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009524:	51eb851f 	.word	0x51eb851f

08009528 <arm_rfft_fast_init_f32>:
 8009528:	084b      	lsrs	r3, r1, #1
 800952a:	2b80      	cmp	r3, #128	@ 0x80
 800952c:	b410      	push	{r4}
 800952e:	8201      	strh	r1, [r0, #16]
 8009530:	8003      	strh	r3, [r0, #0]
 8009532:	d047      	beq.n	80095c4 <arm_rfft_fast_init_f32+0x9c>
 8009534:	d917      	bls.n	8009566 <arm_rfft_fast_init_f32+0x3e>
 8009536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800953a:	d03d      	beq.n	80095b8 <arm_rfft_fast_init_f32+0x90>
 800953c:	d929      	bls.n	8009592 <arm_rfft_fast_init_f32+0x6a>
 800953e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009542:	d020      	beq.n	8009586 <arm_rfft_fast_init_f32+0x5e>
 8009544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009548:	d113      	bne.n	8009572 <arm_rfft_fast_init_f32+0x4a>
 800954a:	4921      	ldr	r1, [pc, #132]	@ (80095d0 <arm_rfft_fast_init_f32+0xa8>)
 800954c:	4a21      	ldr	r2, [pc, #132]	@ (80095d4 <arm_rfft_fast_init_f32+0xac>)
 800954e:	4b22      	ldr	r3, [pc, #136]	@ (80095d8 <arm_rfft_fast_init_f32+0xb0>)
 8009550:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8009554:	8184      	strh	r4, [r0, #12]
 8009556:	6081      	str	r1, [r0, #8]
 8009558:	6042      	str	r2, [r0, #4]
 800955a:	6143      	str	r3, [r0, #20]
 800955c:	2000      	movs	r0, #0
 800955e:	b240      	sxtb	r0, r0
 8009560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	2b20      	cmp	r3, #32
 8009568:	d01c      	beq.n	80095a4 <arm_rfft_fast_init_f32+0x7c>
 800956a:	2b40      	cmp	r3, #64	@ 0x40
 800956c:	d006      	beq.n	800957c <arm_rfft_fast_init_f32+0x54>
 800956e:	2b10      	cmp	r3, #16
 8009570:	d01d      	beq.n	80095ae <arm_rfft_fast_init_f32+0x86>
 8009572:	20ff      	movs	r0, #255	@ 0xff
 8009574:	b240      	sxtb	r0, r0
 8009576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	2438      	movs	r4, #56	@ 0x38
 800957e:	4917      	ldr	r1, [pc, #92]	@ (80095dc <arm_rfft_fast_init_f32+0xb4>)
 8009580:	4a17      	ldr	r2, [pc, #92]	@ (80095e0 <arm_rfft_fast_init_f32+0xb8>)
 8009582:	4b18      	ldr	r3, [pc, #96]	@ (80095e4 <arm_rfft_fast_init_f32+0xbc>)
 8009584:	e7e6      	b.n	8009554 <arm_rfft_fast_init_f32+0x2c>
 8009586:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800958a:	4917      	ldr	r1, [pc, #92]	@ (80095e8 <arm_rfft_fast_init_f32+0xc0>)
 800958c:	4a17      	ldr	r2, [pc, #92]	@ (80095ec <arm_rfft_fast_init_f32+0xc4>)
 800958e:	4b18      	ldr	r3, [pc, #96]	@ (80095f0 <arm_rfft_fast_init_f32+0xc8>)
 8009590:	e7e0      	b.n	8009554 <arm_rfft_fast_init_f32+0x2c>
 8009592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009596:	d1ec      	bne.n	8009572 <arm_rfft_fast_init_f32+0x4a>
 8009598:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800959c:	4915      	ldr	r1, [pc, #84]	@ (80095f4 <arm_rfft_fast_init_f32+0xcc>)
 800959e:	4a16      	ldr	r2, [pc, #88]	@ (80095f8 <arm_rfft_fast_init_f32+0xd0>)
 80095a0:	4b16      	ldr	r3, [pc, #88]	@ (80095fc <arm_rfft_fast_init_f32+0xd4>)
 80095a2:	e7d7      	b.n	8009554 <arm_rfft_fast_init_f32+0x2c>
 80095a4:	2430      	movs	r4, #48	@ 0x30
 80095a6:	4916      	ldr	r1, [pc, #88]	@ (8009600 <arm_rfft_fast_init_f32+0xd8>)
 80095a8:	4a16      	ldr	r2, [pc, #88]	@ (8009604 <arm_rfft_fast_init_f32+0xdc>)
 80095aa:	4b17      	ldr	r3, [pc, #92]	@ (8009608 <arm_rfft_fast_init_f32+0xe0>)
 80095ac:	e7d2      	b.n	8009554 <arm_rfft_fast_init_f32+0x2c>
 80095ae:	2414      	movs	r4, #20
 80095b0:	4916      	ldr	r1, [pc, #88]	@ (800960c <arm_rfft_fast_init_f32+0xe4>)
 80095b2:	4a17      	ldr	r2, [pc, #92]	@ (8009610 <arm_rfft_fast_init_f32+0xe8>)
 80095b4:	4b17      	ldr	r3, [pc, #92]	@ (8009614 <arm_rfft_fast_init_f32+0xec>)
 80095b6:	e7cd      	b.n	8009554 <arm_rfft_fast_init_f32+0x2c>
 80095b8:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80095bc:	4916      	ldr	r1, [pc, #88]	@ (8009618 <arm_rfft_fast_init_f32+0xf0>)
 80095be:	4a17      	ldr	r2, [pc, #92]	@ (800961c <arm_rfft_fast_init_f32+0xf4>)
 80095c0:	4b17      	ldr	r3, [pc, #92]	@ (8009620 <arm_rfft_fast_init_f32+0xf8>)
 80095c2:	e7c7      	b.n	8009554 <arm_rfft_fast_init_f32+0x2c>
 80095c4:	24d0      	movs	r4, #208	@ 0xd0
 80095c6:	4917      	ldr	r1, [pc, #92]	@ (8009624 <arm_rfft_fast_init_f32+0xfc>)
 80095c8:	4a17      	ldr	r2, [pc, #92]	@ (8009628 <arm_rfft_fast_init_f32+0x100>)
 80095ca:	4b18      	ldr	r3, [pc, #96]	@ (800962c <arm_rfft_fast_init_f32+0x104>)
 80095cc:	e7c2      	b.n	8009554 <arm_rfft_fast_init_f32+0x2c>
 80095ce:	bf00      	nop
 80095d0:	0801c964 	.word	0x0801c964
 80095d4:	0800db5c 	.word	0x0800db5c
 80095d8:	08013ccc 	.word	0x08013ccc
 80095dc:	08011c5c 	.word	0x08011c5c
 80095e0:	0801e724 	.word	0x0801e724
 80095e4:	08020c14 	.word	0x08020c14
 80095e8:	0801a64c 	.word	0x0801a64c
 80095ec:	0801854c 	.word	0x0801854c
 80095f0:	08011ccc 	.word	0x08011ccc
 80095f4:	080208a4 	.word	0x080208a4
 80095f8:	08017ccc 	.word	0x08017ccc
 80095fc:	0801e924 	.word	0x0801e924
 8009600:	0801b504 	.word	0x0801b504
 8009604:	0801a54c 	.word	0x0801a54c
 8009608:	08011b5c 	.word	0x08011b5c
 800960c:	0801b45c 	.word	0x0801b45c
 8009610:	080184cc 	.word	0x080184cc
 8009614:	0801b484 	.word	0x0801b484
 8009618:	0801f124 	.word	0x0801f124
 800961c:	0801b964 	.word	0x0801b964
 8009620:	0801f4a4 	.word	0x0801f4a4
 8009624:	08020e14 	.word	0x08020e14
 8009628:	0801b564 	.word	0x0801b564
 800962c:	080204a4 	.word	0x080204a4

08009630 <arm_rfft_fast_f32>:
 8009630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009634:	8a06      	ldrh	r6, [r0, #16]
 8009636:	0876      	lsrs	r6, r6, #1
 8009638:	4607      	mov	r7, r0
 800963a:	4615      	mov	r5, r2
 800963c:	8006      	strh	r6, [r0, #0]
 800963e:	460c      	mov	r4, r1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d15c      	bne.n	80096fe <arm_rfft_fast_f32+0xce>
 8009644:	461a      	mov	r2, r3
 8009646:	2301      	movs	r3, #1
 8009648:	f000 fbe6 	bl	8009e18 <arm_cfft_f32>
 800964c:	edd4 7a00 	vldr	s15, [r4]
 8009650:	ed94 7a01 	vldr	s14, [r4, #4]
 8009654:	883e      	ldrh	r6, [r7, #0]
 8009656:	6978      	ldr	r0, [r7, #20]
 8009658:	ee37 7a07 	vadd.f32	s14, s14, s14
 800965c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009660:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8009664:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009668:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800966c:	3e01      	subs	r6, #1
 800966e:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8009672:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009676:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800967a:	ed85 7a00 	vstr	s14, [r5]
 800967e:	edc5 7a01 	vstr	s15, [r5, #4]
 8009682:	3010      	adds	r0, #16
 8009684:	f105 0210 	add.w	r2, r5, #16
 8009688:	3b08      	subs	r3, #8
 800968a:	f104 0110 	add.w	r1, r4, #16
 800968e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8009692:	ed93 5a02 	vldr	s10, [r3, #8]
 8009696:	ed11 7a01 	vldr	s14, [r1, #-4]
 800969a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800969e:	edd3 5a03 	vldr	s11, [r3, #12]
 80096a2:	ed50 6a01 	vldr	s13, [r0, #-4]
 80096a6:	ee75 7a64 	vsub.f32	s15, s10, s9
 80096aa:	ee35 4a87 	vadd.f32	s8, s11, s14
 80096ae:	ee35 5a24 	vadd.f32	s10, s10, s9
 80096b2:	ee77 5a65 	vsub.f32	s11, s14, s11
 80096b6:	ee66 4a27 	vmul.f32	s9, s12, s15
 80096ba:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80096be:	ee34 5a85 	vadd.f32	s10, s9, s10
 80096c2:	ee26 6a04 	vmul.f32	s12, s12, s8
 80096c6:	ee66 6a84 	vmul.f32	s13, s13, s8
 80096ca:	ee77 7a25 	vadd.f32	s15, s14, s11
 80096ce:	ee76 6a85 	vadd.f32	s13, s13, s10
 80096d2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80096d6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80096da:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80096de:	3e01      	subs	r6, #1
 80096e0:	ed42 6a02 	vstr	s13, [r2, #-8]
 80096e4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80096e8:	f1a3 0308 	sub.w	r3, r3, #8
 80096ec:	f101 0108 	add.w	r1, r1, #8
 80096f0:	f100 0008 	add.w	r0, r0, #8
 80096f4:	f102 0208 	add.w	r2, r2, #8
 80096f8:	d1c9      	bne.n	800968e <arm_rfft_fast_f32+0x5e>
 80096fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096fe:	edd1 7a00 	vldr	s15, [r1]
 8009702:	edd1 6a01 	vldr	s13, [r1, #4]
 8009706:	6941      	ldr	r1, [r0, #20]
 8009708:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800970c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009710:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8009714:	ee27 7a23 	vmul.f32	s14, s14, s7
 8009718:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800971c:	3e01      	subs	r6, #1
 800971e:	ed82 7a00 	vstr	s14, [r2]
 8009722:	edc2 7a01 	vstr	s15, [r2, #4]
 8009726:	00f0      	lsls	r0, r6, #3
 8009728:	b3ee      	cbz	r6, 80097a6 <arm_rfft_fast_f32+0x176>
 800972a:	3808      	subs	r0, #8
 800972c:	f101 0e10 	add.w	lr, r1, #16
 8009730:	4420      	add	r0, r4
 8009732:	f104 0110 	add.w	r1, r4, #16
 8009736:	f102 0c10 	add.w	ip, r2, #16
 800973a:	ed90 7a02 	vldr	s14, [r0, #8]
 800973e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8009742:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8009746:	ed90 4a03 	vldr	s8, [r0, #12]
 800974a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800974e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8009752:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8009756:	ee74 4a05 	vadd.f32	s9, s8, s10
 800975a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800975e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8009762:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009766:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800976a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800976e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8009772:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009776:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800977a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800977e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8009782:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009786:	ee27 7a23 	vmul.f32	s14, s14, s7
 800978a:	3e01      	subs	r6, #1
 800978c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8009790:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8009794:	f1a0 0008 	sub.w	r0, r0, #8
 8009798:	f101 0108 	add.w	r1, r1, #8
 800979c:	f10e 0e08 	add.w	lr, lr, #8
 80097a0:	f10c 0c08 	add.w	ip, ip, #8
 80097a4:	d1c9      	bne.n	800973a <arm_rfft_fast_f32+0x10a>
 80097a6:	4638      	mov	r0, r7
 80097a8:	4629      	mov	r1, r5
 80097aa:	461a      	mov	r2, r3
 80097ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b0:	2301      	movs	r3, #1
 80097b2:	f000 bb31 	b.w	8009e18 <arm_cfft_f32>
 80097b6:	bf00      	nop

080097b8 <arm_cfft_radix8by2_f32>:
 80097b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097bc:	ed2d 8b08 	vpush	{d8-d11}
 80097c0:	f8b0 e000 	ldrh.w	lr, [r0]
 80097c4:	6842      	ldr	r2, [r0, #4]
 80097c6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80097ca:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80097ce:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80097d2:	4607      	mov	r7, r0
 80097d4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80097d8:	f000 80af 	beq.w	800993a <arm_cfft_radix8by2_f32+0x182>
 80097dc:	3310      	adds	r3, #16
 80097de:	18ce      	adds	r6, r1, r3
 80097e0:	3210      	adds	r2, #16
 80097e2:	4443      	add	r3, r8
 80097e4:	f101 0510 	add.w	r5, r1, #16
 80097e8:	f108 0410 	add.w	r4, r8, #16
 80097ec:	ed54 1a04 	vldr	s3, [r4, #-16]
 80097f0:	ed13 4a04 	vldr	s8, [r3, #-16]
 80097f4:	ed53 3a03 	vldr	s7, [r3, #-12]
 80097f8:	ed53 5a02 	vldr	s11, [r3, #-8]
 80097fc:	ed13 5a01 	vldr	s10, [r3, #-4]
 8009800:	ed54 6a03 	vldr	s13, [r4, #-12]
 8009804:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009808:	ed16 2a04 	vldr	s4, [r6, #-16]
 800980c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8009810:	ed15 6a03 	vldr	s12, [r5, #-12]
 8009814:	ed15 7a01 	vldr	s14, [r5, #-4]
 8009818:	ed15 3a04 	vldr	s6, [r5, #-16]
 800981c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009820:	ed56 0a02 	vldr	s1, [r6, #-8]
 8009824:	ed16 1a01 	vldr	s2, [r6, #-4]
 8009828:	ed55 4a02 	vldr	s9, [r5, #-8]
 800982c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8009830:	ee36 ba26 	vadd.f32	s22, s12, s13
 8009834:	ee37 aa27 	vadd.f32	s20, s14, s15
 8009838:	ee72 9a04 	vadd.f32	s19, s4, s8
 800983c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8009840:	ee31 8a05 	vadd.f32	s16, s2, s10
 8009844:	ee74 aa80 	vadd.f32	s21, s9, s0
 8009848:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800984c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8009850:	ed05 ba03 	vstr	s22, [r5, #-12]
 8009854:	ed45 aa02 	vstr	s21, [r5, #-8]
 8009858:	ed05 aa01 	vstr	s20, [r5, #-4]
 800985c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009860:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009864:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009868:	ed46 8a02 	vstr	s17, [r6, #-8]
 800986c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009870:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8009874:	ed12 6a03 	vldr	s12, [r2, #-12]
 8009878:	ed52 2a04 	vldr	s5, [r2, #-16]
 800987c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009880:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009884:	ee26 8a86 	vmul.f32	s16, s13, s12
 8009888:	ee24 2a06 	vmul.f32	s4, s8, s12
 800988c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8009890:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009894:	ee23 3a06 	vmul.f32	s6, s6, s12
 8009898:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800989c:	ee23 6a86 	vmul.f32	s12, s7, s12
 80098a0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80098a4:	ee36 6a04 	vadd.f32	s12, s12, s8
 80098a8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80098ac:	ee72 3a63 	vsub.f32	s7, s4, s7
 80098b0:	ee71 2a88 	vadd.f32	s5, s3, s16
 80098b4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80098b8:	ed44 2a04 	vstr	s5, [r4, #-16]
 80098bc:	ed43 3a04 	vstr	s7, [r3, #-16]
 80098c0:	ed03 6a03 	vstr	s12, [r3, #-12]
 80098c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098c8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80098cc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80098d0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80098d4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80098d8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80098dc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80098e0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80098e4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80098e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80098ec:	ee64 4a87 	vmul.f32	s9, s9, s14
 80098f0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80098f4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80098f8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80098fc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009900:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009904:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009908:	ee37 7a26 	vadd.f32	s14, s14, s13
 800990c:	f1be 0e01 	subs.w	lr, lr, #1
 8009910:	ed44 5a02 	vstr	s11, [r4, #-8]
 8009914:	f105 0510 	add.w	r5, r5, #16
 8009918:	ed44 7a01 	vstr	s15, [r4, #-4]
 800991c:	f106 0610 	add.w	r6, r6, #16
 8009920:	ed03 6a02 	vstr	s12, [r3, #-8]
 8009924:	ed03 7a01 	vstr	s14, [r3, #-4]
 8009928:	f102 0210 	add.w	r2, r2, #16
 800992c:	f104 0410 	add.w	r4, r4, #16
 8009930:	f103 0310 	add.w	r3, r3, #16
 8009934:	f47f af5a 	bne.w	80097ec <arm_cfft_radix8by2_f32+0x34>
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	fa1f f48c 	uxth.w	r4, ip
 800993e:	4608      	mov	r0, r1
 8009940:	2302      	movs	r3, #2
 8009942:	4621      	mov	r1, r4
 8009944:	f000 fae2 	bl	8009f0c <arm_radix8_butterfly_f32>
 8009948:	ecbd 8b08 	vpop	{d8-d11}
 800994c:	4640      	mov	r0, r8
 800994e:	4621      	mov	r1, r4
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	2302      	movs	r3, #2
 8009954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009958:	f000 bad8 	b.w	8009f0c <arm_radix8_butterfly_f32>

0800995c <arm_cfft_radix8by4_f32>:
 800995c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009960:	ed2d 8b0a 	vpush	{d8-d12}
 8009964:	8802      	ldrh	r2, [r0, #0]
 8009966:	ed91 6a00 	vldr	s12, [r1]
 800996a:	b08f      	sub	sp, #60	@ 0x3c
 800996c:	460f      	mov	r7, r1
 800996e:	0852      	lsrs	r2, r2, #1
 8009970:	0093      	lsls	r3, r2, #2
 8009972:	900c      	str	r0, [sp, #48]	@ 0x30
 8009974:	9103      	str	r1, [sp, #12]
 8009976:	6841      	ldr	r1, [r0, #4]
 8009978:	ed97 7a01 	vldr	s14, [r7, #4]
 800997c:	4638      	mov	r0, r7
 800997e:	4418      	add	r0, r3
 8009980:	4606      	mov	r6, r0
 8009982:	9009      	str	r0, [sp, #36]	@ 0x24
 8009984:	4418      	add	r0, r3
 8009986:	edd0 6a00 	vldr	s13, [r0]
 800998a:	edd6 3a00 	vldr	s7, [r6]
 800998e:	edd6 2a01 	vldr	s5, [r6, #4]
 8009992:	edd0 7a01 	vldr	s15, [r0, #4]
 8009996:	900a      	str	r0, [sp, #40]	@ 0x28
 8009998:	ee76 5a26 	vadd.f32	s11, s12, s13
 800999c:	4604      	mov	r4, r0
 800999e:	4625      	mov	r5, r4
 80099a0:	441c      	add	r4, r3
 80099a2:	ed94 4a00 	vldr	s8, [r4]
 80099a6:	ed94 5a01 	vldr	s10, [r4, #4]
 80099aa:	9401      	str	r4, [sp, #4]
 80099ac:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80099b0:	4630      	mov	r0, r6
 80099b2:	ee74 4a24 	vadd.f32	s9, s8, s9
 80099b6:	463e      	mov	r6, r7
 80099b8:	ee14 ea90 	vmov	lr, s9
 80099bc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80099c0:	f846 eb08 	str.w	lr, [r6], #8
 80099c4:	ee37 6a27 	vadd.f32	s12, s14, s15
 80099c8:	edd0 4a01 	vldr	s9, [r0, #4]
 80099cc:	9604      	str	r6, [sp, #16]
 80099ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099d2:	9e01      	ldr	r6, [sp, #4]
 80099d4:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80099d8:	ed96 2a01 	vldr	s4, [r6, #4]
 80099dc:	ee36 7a24 	vadd.f32	s14, s12, s9
 80099e0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80099e4:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80099e8:	ee36 6a62 	vsub.f32	s12, s12, s5
 80099ec:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80099f0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80099f4:	ee73 3a45 	vsub.f32	s7, s6, s10
 80099f8:	4604      	mov	r4, r0
 80099fa:	ee36 6a45 	vsub.f32	s12, s12, s10
 80099fe:	ee75 6a26 	vadd.f32	s13, s10, s13
 8009a02:	46a3      	mov	fp, r4
 8009a04:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009a08:	ee34 5a84 	vadd.f32	s10, s9, s8
 8009a0c:	ee13 8a90 	vmov	r8, s7
 8009a10:	46a4      	mov	ip, r4
 8009a12:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8009a16:	ed87 7a01 	vstr	s14, [r7, #4]
 8009a1a:	f84b 8b08 	str.w	r8, [fp], #8
 8009a1e:	f1ac 0704 	sub.w	r7, ip, #4
 8009a22:	ed8c 5a01 	vstr	s10, [ip, #4]
 8009a26:	f101 0c08 	add.w	ip, r1, #8
 8009a2a:	462c      	mov	r4, r5
 8009a2c:	f8cd c014 	str.w	ip, [sp, #20]
 8009a30:	ee15 ca90 	vmov	ip, s11
 8009a34:	f844 cb08 	str.w	ip, [r4], #8
 8009a38:	9407      	str	r4, [sp, #28]
 8009a3a:	f101 0410 	add.w	r4, r1, #16
 8009a3e:	ed85 6a01 	vstr	s12, [r5, #4]
 8009a42:	0852      	lsrs	r2, r2, #1
 8009a44:	9402      	str	r4, [sp, #8]
 8009a46:	462c      	mov	r4, r5
 8009a48:	f101 0518 	add.w	r5, r1, #24
 8009a4c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a4e:	46b2      	mov	sl, r6
 8009a50:	9506      	str	r5, [sp, #24]
 8009a52:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009a56:	3a02      	subs	r2, #2
 8009a58:	ee16 5a90 	vmov	r5, s13
 8009a5c:	46b6      	mov	lr, r6
 8009a5e:	4630      	mov	r0, r6
 8009a60:	0852      	lsrs	r2, r2, #1
 8009a62:	f84a 5b08 	str.w	r5, [sl], #8
 8009a66:	f1a0 0604 	sub.w	r6, r0, #4
 8009a6a:	edce 7a01 	vstr	s15, [lr, #4]
 8009a6e:	9208      	str	r2, [sp, #32]
 8009a70:	f000 8130 	beq.w	8009cd4 <arm_cfft_radix8by4_f32+0x378>
 8009a74:	4691      	mov	r9, r2
 8009a76:	9a03      	ldr	r2, [sp, #12]
 8009a78:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009a7c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8009a80:	3b08      	subs	r3, #8
 8009a82:	f102 0510 	add.w	r5, r2, #16
 8009a86:	f101 0c20 	add.w	ip, r1, #32
 8009a8a:	f1a4 020c 	sub.w	r2, r4, #12
 8009a8e:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8009a92:	4433      	add	r3, r6
 8009a94:	3410      	adds	r4, #16
 8009a96:	4650      	mov	r0, sl
 8009a98:	4659      	mov	r1, fp
 8009a9a:	ed55 3a02 	vldr	s7, [r5, #-8]
 8009a9e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8009aa2:	ed91 7a00 	vldr	s14, [r1]
 8009aa6:	edd0 7a00 	vldr	s15, [r0]
 8009aaa:	ed15 4a01 	vldr	s8, [r5, #-4]
 8009aae:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009ab2:	edd0 6a01 	vldr	s13, [r0, #4]
 8009ab6:	ed91 6a01 	vldr	s12, [r1, #4]
 8009aba:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009abe:	ee34 0a25 	vadd.f32	s0, s8, s11
 8009ac2:	ee78 4a07 	vadd.f32	s9, s16, s14
 8009ac6:	ee74 5a65 	vsub.f32	s11, s8, s11
 8009aca:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8009ace:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8009ad2:	ed45 4a02 	vstr	s9, [r5, #-8]
 8009ad6:	edd1 4a01 	vldr	s9, [r1, #4]
 8009ada:	ed90 4a01 	vldr	s8, [r0, #4]
 8009ade:	ee70 4a24 	vadd.f32	s9, s0, s9
 8009ae2:	ee76 aa05 	vadd.f32	s21, s12, s10
 8009ae6:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009aea:	ee35 aac7 	vsub.f32	s20, s11, s14
 8009aee:	ed45 4a01 	vstr	s9, [r5, #-4]
 8009af2:	edd6 1a00 	vldr	s3, [r6]
 8009af6:	edd7 0a00 	vldr	s1, [r7]
 8009afa:	ed92 4a02 	vldr	s8, [r2, #8]
 8009afe:	edd3 3a02 	vldr	s7, [r3, #8]
 8009b02:	ed93 2a01 	vldr	s4, [r3, #4]
 8009b06:	ed16 1a01 	vldr	s2, [r6, #-4]
 8009b0a:	edd2 2a01 	vldr	s5, [r2, #4]
 8009b0e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009b12:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8009b16:	ee39 3a81 	vadd.f32	s6, s19, s2
 8009b1a:	ee74 8a84 	vadd.f32	s17, s9, s8
 8009b1e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8009b22:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8009b26:	ee7a aae6 	vsub.f32	s21, s21, s13
 8009b2a:	ee18 aa90 	vmov	sl, s17
 8009b2e:	f847 a908 	str.w	sl, [r7], #-8
 8009b32:	edd2 8a01 	vldr	s17, [r2, #4]
 8009b36:	ed93 9a01 	vldr	s18, [r3, #4]
 8009b3a:	ee73 8a28 	vadd.f32	s17, s6, s17
 8009b3e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8009b42:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009b46:	ee74 0a63 	vsub.f32	s1, s8, s7
 8009b4a:	edc7 8a01 	vstr	s17, [r7, #4]
 8009b4e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8009b52:	ed58 8a01 	vldr	s17, [r8, #-4]
 8009b56:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8009b5a:	ee6a ba28 	vmul.f32	s23, s20, s17
 8009b5e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8009b62:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8009b66:	ee30 9a81 	vadd.f32	s18, s1, s2
 8009b6a:	ee79 9a82 	vadd.f32	s19, s19, s4
 8009b6e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8009b72:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8009b76:	ee69 baa8 	vmul.f32	s23, s19, s17
 8009b7a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8009b7e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8009b82:	ee69 8a28 	vmul.f32	s17, s18, s17
 8009b86:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8009b8a:	ee1c aa10 	vmov	sl, s24
 8009b8e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8009b92:	f841 ab08 	str.w	sl, [r1], #8
 8009b96:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8009b9a:	ee3b bacb 	vsub.f32	s22, s23, s22
 8009b9e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8009ba2:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009ba6:	ed01 aa01 	vstr	s20, [r1, #-4]
 8009baa:	edc2 8a01 	vstr	s17, [r2, #4]
 8009bae:	ed82 ba02 	vstr	s22, [r2, #8]
 8009bb2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8009bb6:	ee74 3a63 	vsub.f32	s7, s8, s7
 8009bba:	ee38 8a47 	vsub.f32	s16, s16, s14
 8009bbe:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8009bc2:	ee30 0a46 	vsub.f32	s0, s0, s12
 8009bc6:	ee33 3a42 	vsub.f32	s6, s6, s4
 8009bca:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009bce:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009bd2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8009bd6:	ee63 8a04 	vmul.f32	s17, s6, s8
 8009bda:	ee28 aa24 	vmul.f32	s20, s16, s9
 8009bde:	ee60 9a04 	vmul.f32	s19, s0, s8
 8009be2:	ee28 8a04 	vmul.f32	s16, s16, s8
 8009be6:	ee20 0a24 	vmul.f32	s0, s0, s9
 8009bea:	ee63 3a84 	vmul.f32	s7, s7, s8
 8009bee:	ee39 4a68 	vsub.f32	s8, s18, s17
 8009bf2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8009bf6:	ee14 aa10 	vmov	sl, s8
 8009bfa:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009bfe:	ee63 4a24 	vmul.f32	s9, s6, s9
 8009c02:	ed44 9a02 	vstr	s19, [r4, #-8]
 8009c06:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8009c0a:	ed04 0a01 	vstr	s0, [r4, #-4]
 8009c0e:	f846 a908 	str.w	sl, [r6], #-8
 8009c12:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009c16:	ee35 7a87 	vadd.f32	s14, s11, s14
 8009c1a:	edc6 3a01 	vstr	s7, [r6, #4]
 8009c1e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c26:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8009c2a:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8009c2e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8009c32:	ee26 5a87 	vmul.f32	s10, s13, s14
 8009c36:	ee72 2a62 	vsub.f32	s5, s4, s5
 8009c3a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8009c3e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8009c42:	ee75 5a25 	vadd.f32	s11, s10, s11
 8009c46:	ee62 0a86 	vmul.f32	s1, s5, s12
 8009c4a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c52:	ee21 6a06 	vmul.f32	s12, s2, s12
 8009c56:	ee62 2a87 	vmul.f32	s5, s5, s14
 8009c5a:	ee21 1a07 	vmul.f32	s2, s2, s14
 8009c5e:	ee15 aa90 	vmov	sl, s11
 8009c62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c66:	f840 ab08 	str.w	sl, [r0], #8
 8009c6a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8009c6e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8009c72:	f1b9 0901 	subs.w	r9, r9, #1
 8009c76:	ed40 7a01 	vstr	s15, [r0, #-4]
 8009c7a:	f105 0508 	add.w	r5, r5, #8
 8009c7e:	ed83 1a02 	vstr	s2, [r3, #8]
 8009c82:	edc3 2a01 	vstr	s5, [r3, #4]
 8009c86:	f108 0808 	add.w	r8, r8, #8
 8009c8a:	f1a2 0208 	sub.w	r2, r2, #8
 8009c8e:	f10c 0c10 	add.w	ip, ip, #16
 8009c92:	f104 0408 	add.w	r4, r4, #8
 8009c96:	f10e 0e18 	add.w	lr, lr, #24
 8009c9a:	f1a3 0308 	sub.w	r3, r3, #8
 8009c9e:	f47f aefc 	bne.w	8009a9a <arm_cfft_radix8by4_f32+0x13e>
 8009ca2:	9908      	ldr	r1, [sp, #32]
 8009ca4:	9802      	ldr	r0, [sp, #8]
 8009ca6:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8009caa:	00cb      	lsls	r3, r1, #3
 8009cac:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009cb0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009cb4:	9102      	str	r1, [sp, #8]
 8009cb6:	9904      	ldr	r1, [sp, #16]
 8009cb8:	4419      	add	r1, r3
 8009cba:	9104      	str	r1, [sp, #16]
 8009cbc:	9905      	ldr	r1, [sp, #20]
 8009cbe:	4419      	add	r1, r3
 8009cc0:	9105      	str	r1, [sp, #20]
 8009cc2:	9907      	ldr	r1, [sp, #28]
 8009cc4:	449b      	add	fp, r3
 8009cc6:	4419      	add	r1, r3
 8009cc8:	449a      	add	sl, r3
 8009cca:	9b06      	ldr	r3, [sp, #24]
 8009ccc:	9107      	str	r1, [sp, #28]
 8009cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd2:	9306      	str	r3, [sp, #24]
 8009cd4:	9a04      	ldr	r2, [sp, #16]
 8009cd6:	9807      	ldr	r0, [sp, #28]
 8009cd8:	edd2 3a00 	vldr	s7, [r2]
 8009cdc:	ed90 4a00 	vldr	s8, [r0]
 8009ce0:	eddb 7a00 	vldr	s15, [fp]
 8009ce4:	ed9a 3a00 	vldr	s6, [sl]
 8009ce8:	edd2 4a01 	vldr	s9, [r2, #4]
 8009cec:	ed90 7a01 	vldr	s14, [r0, #4]
 8009cf0:	ed9b 2a01 	vldr	s4, [fp, #4]
 8009cf4:	edda 5a01 	vldr	s11, [sl, #4]
 8009cf8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8009cfc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cfe:	ee73 6a84 	vadd.f32	s13, s7, s8
 8009d02:	ee34 6a87 	vadd.f32	s12, s9, s14
 8009d06:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8009d0a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8009d0e:	ee33 5a05 	vadd.f32	s10, s6, s10
 8009d12:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009d16:	ed82 5a00 	vstr	s10, [r2]
 8009d1a:	ed9b 5a01 	vldr	s10, [fp, #4]
 8009d1e:	edda 4a01 	vldr	s9, [sl, #4]
 8009d22:	ee36 5a05 	vadd.f32	s10, s12, s10
 8009d26:	ee72 3a04 	vadd.f32	s7, s4, s8
 8009d2a:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009d2e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8009d32:	ed82 5a01 	vstr	s10, [r2, #4]
 8009d36:	9a05      	ldr	r2, [sp, #20]
 8009d38:	ee34 5a83 	vadd.f32	s10, s9, s6
 8009d3c:	edd2 1a00 	vldr	s3, [r2]
 8009d40:	edd2 2a01 	vldr	s5, [r2, #4]
 8009d44:	9a02      	ldr	r2, [sp, #8]
 8009d46:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8009d4a:	ee36 6a42 	vsub.f32	s12, s12, s4
 8009d4e:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8009d52:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8009d56:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009d5a:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009d5e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009d62:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009d66:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009d6a:	edcb 2a00 	vstr	s5, [fp]
 8009d6e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8009d72:	edd2 3a01 	vldr	s7, [r2, #4]
 8009d76:	ed92 5a00 	vldr	s10, [r2]
 8009d7a:	9a06      	ldr	r2, [sp, #24]
 8009d7c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009d80:	ee36 6a65 	vsub.f32	s12, s12, s11
 8009d84:	ee66 4a85 	vmul.f32	s9, s13, s10
 8009d88:	ee26 5a05 	vmul.f32	s10, s12, s10
 8009d8c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8009d90:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009d94:	ee75 6a66 	vsub.f32	s13, s10, s13
 8009d98:	ee34 6a86 	vadd.f32	s12, s9, s12
 8009d9c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009da0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009da4:	edc0 6a01 	vstr	s13, [r0, #4]
 8009da8:	ed80 6a00 	vstr	s12, [r0]
 8009dac:	ed92 6a01 	vldr	s12, [r2, #4]
 8009db0:	9803      	ldr	r0, [sp, #12]
 8009db2:	ee77 7a43 	vsub.f32	s15, s14, s6
 8009db6:	ee75 5a84 	vadd.f32	s11, s11, s8
 8009dba:	ed92 7a00 	vldr	s14, [r2]
 8009dbe:	ee65 6a87 	vmul.f32	s13, s11, s14
 8009dc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009dc6:	ee65 5a86 	vmul.f32	s11, s11, s12
 8009dca:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009dce:	ee77 5a65 	vsub.f32	s11, s14, s11
 8009dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd6:	edca 5a01 	vstr	s11, [sl, #4]
 8009dda:	edca 7a00 	vstr	s15, [sl]
 8009dde:	6872      	ldr	r2, [r6, #4]
 8009de0:	4621      	mov	r1, r4
 8009de2:	2304      	movs	r3, #4
 8009de4:	f000 f892 	bl	8009f0c <arm_radix8_butterfly_f32>
 8009de8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dea:	6872      	ldr	r2, [r6, #4]
 8009dec:	4621      	mov	r1, r4
 8009dee:	2304      	movs	r3, #4
 8009df0:	f000 f88c 	bl	8009f0c <arm_radix8_butterfly_f32>
 8009df4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009df6:	6872      	ldr	r2, [r6, #4]
 8009df8:	4621      	mov	r1, r4
 8009dfa:	2304      	movs	r3, #4
 8009dfc:	f000 f886 	bl	8009f0c <arm_radix8_butterfly_f32>
 8009e00:	9801      	ldr	r0, [sp, #4]
 8009e02:	6872      	ldr	r2, [r6, #4]
 8009e04:	4621      	mov	r1, r4
 8009e06:	2304      	movs	r3, #4
 8009e08:	b00f      	add	sp, #60	@ 0x3c
 8009e0a:	ecbd 8b0a 	vpop	{d8-d12}
 8009e0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e12:	f000 b87b 	b.w	8009f0c <arm_radix8_butterfly_f32>
 8009e16:	bf00      	nop

08009e18 <arm_cfft_f32>:
 8009e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1c:	2a01      	cmp	r2, #1
 8009e1e:	4606      	mov	r6, r0
 8009e20:	4617      	mov	r7, r2
 8009e22:	460c      	mov	r4, r1
 8009e24:	4698      	mov	r8, r3
 8009e26:	8805      	ldrh	r5, [r0, #0]
 8009e28:	d054      	beq.n	8009ed4 <arm_cfft_f32+0xbc>
 8009e2a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8009e2e:	d04c      	beq.n	8009eca <arm_cfft_f32+0xb2>
 8009e30:	d916      	bls.n	8009e60 <arm_cfft_f32+0x48>
 8009e32:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8009e36:	d01a      	beq.n	8009e6e <arm_cfft_f32+0x56>
 8009e38:	d95c      	bls.n	8009ef4 <arm_cfft_f32+0xdc>
 8009e3a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8009e3e:	d044      	beq.n	8009eca <arm_cfft_f32+0xb2>
 8009e40:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8009e44:	d105      	bne.n	8009e52 <arm_cfft_f32+0x3a>
 8009e46:	4620      	mov	r0, r4
 8009e48:	4629      	mov	r1, r5
 8009e4a:	6872      	ldr	r2, [r6, #4]
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f000 f85d 	bl	8009f0c <arm_radix8_butterfly_f32>
 8009e52:	f1b8 0f00 	cmp.w	r8, #0
 8009e56:	d111      	bne.n	8009e7c <arm_cfft_f32+0x64>
 8009e58:	2f01      	cmp	r7, #1
 8009e5a:	d016      	beq.n	8009e8a <arm_cfft_f32+0x72>
 8009e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e60:	2d20      	cmp	r5, #32
 8009e62:	d032      	beq.n	8009eca <arm_cfft_f32+0xb2>
 8009e64:	d94a      	bls.n	8009efc <arm_cfft_f32+0xe4>
 8009e66:	2d40      	cmp	r5, #64	@ 0x40
 8009e68:	d0ed      	beq.n	8009e46 <arm_cfft_f32+0x2e>
 8009e6a:	2d80      	cmp	r5, #128	@ 0x80
 8009e6c:	d1f1      	bne.n	8009e52 <arm_cfft_f32+0x3a>
 8009e6e:	4630      	mov	r0, r6
 8009e70:	4621      	mov	r1, r4
 8009e72:	f7ff fca1 	bl	80097b8 <arm_cfft_radix8by2_f32>
 8009e76:	f1b8 0f00 	cmp.w	r8, #0
 8009e7a:	d0ed      	beq.n	8009e58 <arm_cfft_f32+0x40>
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	89b1      	ldrh	r1, [r6, #12]
 8009e80:	68b2      	ldr	r2, [r6, #8]
 8009e82:	f7f6 f9c5 	bl	8000210 <arm_bitreversal_32>
 8009e86:	2f01      	cmp	r7, #1
 8009e88:	d1e8      	bne.n	8009e5c <arm_cfft_f32+0x44>
 8009e8a:	ee07 5a90 	vmov	s15, r5
 8009e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e92:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009e96:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8009e9a:	2d00      	cmp	r5, #0
 8009e9c:	d0de      	beq.n	8009e5c <arm_cfft_f32+0x44>
 8009e9e:	f104 0108 	add.w	r1, r4, #8
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	429d      	cmp	r5, r3
 8009ea8:	f101 0108 	add.w	r1, r1, #8
 8009eac:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009eb0:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009eb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009eb8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009ebc:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009ec0:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009ec4:	d1ee      	bne.n	8009ea4 <arm_cfft_f32+0x8c>
 8009ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eca:	4630      	mov	r0, r6
 8009ecc:	4621      	mov	r1, r4
 8009ece:	f7ff fd45 	bl	800995c <arm_cfft_radix8by4_f32>
 8009ed2:	e7be      	b.n	8009e52 <arm_cfft_f32+0x3a>
 8009ed4:	b1ad      	cbz	r5, 8009f02 <arm_cfft_f32+0xea>
 8009ed6:	f101 030c 	add.w	r3, r1, #12
 8009eda:	2200      	movs	r2, #0
 8009edc:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	eef1 7a67 	vneg.f32	s15, s15
 8009ee6:	4295      	cmp	r5, r2
 8009ee8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009eec:	f103 0308 	add.w	r3, r3, #8
 8009ef0:	d1f4      	bne.n	8009edc <arm_cfft_f32+0xc4>
 8009ef2:	e79a      	b.n	8009e2a <arm_cfft_f32+0x12>
 8009ef4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009ef8:	d0a5      	beq.n	8009e46 <arm_cfft_f32+0x2e>
 8009efa:	e7aa      	b.n	8009e52 <arm_cfft_f32+0x3a>
 8009efc:	2d10      	cmp	r5, #16
 8009efe:	d0b6      	beq.n	8009e6e <arm_cfft_f32+0x56>
 8009f00:	e7a7      	b.n	8009e52 <arm_cfft_f32+0x3a>
 8009f02:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8009f06:	d894      	bhi.n	8009e32 <arm_cfft_f32+0x1a>
 8009f08:	e7aa      	b.n	8009e60 <arm_cfft_f32+0x48>
 8009f0a:	bf00      	nop

08009f0c <arm_radix8_butterfly_f32>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	ed2d 8b10 	vpush	{d8-d15}
 8009f14:	b09d      	sub	sp, #116	@ 0x74
 8009f16:	461c      	mov	r4, r3
 8009f18:	ed9f bac8 	vldr	s22, [pc, #800]	@ 800a23c <arm_radix8_butterfly_f32+0x330>
 8009f1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f1e:	1d03      	adds	r3, r0, #4
 8009f20:	4682      	mov	sl, r0
 8009f22:	4689      	mov	r9, r1
 8009f24:	468b      	mov	fp, r1
 8009f26:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009f28:	9400      	str	r4, [sp, #0]
 8009f2a:	469e      	mov	lr, r3
 8009f2c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8009f30:	005a      	lsls	r2, r3, #1
 8009f32:	18d6      	adds	r6, r2, r3
 8009f34:	18f5      	adds	r5, r6, r3
 8009f36:	9203      	str	r2, [sp, #12]
 8009f38:	195a      	adds	r2, r3, r5
 8009f3a:	18d0      	adds	r0, r2, r3
 8009f3c:	00df      	lsls	r7, r3, #3
 8009f3e:	1819      	adds	r1, r3, r0
 8009f40:	463c      	mov	r4, r7
 8009f42:	9701      	str	r7, [sp, #4]
 8009f44:	4457      	add	r7, sl
 8009f46:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f48:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8009f4c:	011b      	lsls	r3, r3, #4
 8009f4e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8009f52:	eb07 0c04 	add.w	ip, r7, r4
 8009f56:	9c00      	ldr	r4, [sp, #0]
 8009f58:	9302      	str	r3, [sp, #8]
 8009f5a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8009f5e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8009f62:	3204      	adds	r2, #4
 8009f64:	3104      	adds	r1, #4
 8009f66:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8009f6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f6e:	f04f 0800 	mov.w	r8, #0
 8009f72:	eddc 7a00 	vldr	s15, [ip]
 8009f76:	edd7 6a00 	vldr	s13, [r7]
 8009f7a:	edd6 3a00 	vldr	s7, [r6]
 8009f7e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8009f82:	edd5 4a00 	vldr	s9, [r5]
 8009f86:	ed90 2a00 	vldr	s4, [r0]
 8009f8a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009f8e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8009f92:	ee77 8a82 	vadd.f32	s17, s15, s4
 8009f96:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8009f9a:	ee76 1a87 	vadd.f32	s3, s13, s14
 8009f9e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8009fa2:	ee31 6a84 	vadd.f32	s12, s3, s8
 8009fa6:	ee33 5a28 	vadd.f32	s10, s6, s17
 8009faa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009fae:	ee75 6a06 	vadd.f32	s13, s10, s12
 8009fb2:	ee35 5a46 	vsub.f32	s10, s10, s12
 8009fb6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8009fba:	ed85 5a00 	vstr	s10, [r5]
 8009fbe:	ed96 1a01 	vldr	s2, [r6, #4]
 8009fc2:	edd7 5a01 	vldr	s11, [r7, #4]
 8009fc6:	ed92 aa00 	vldr	s20, [r2]
 8009fca:	ed91 6a00 	vldr	s12, [r1]
 8009fce:	ed9e 9a00 	vldr	s18, [lr]
 8009fd2:	ed95 5a01 	vldr	s10, [r5, #4]
 8009fd6:	eddc 6a01 	vldr	s13, [ip, #4]
 8009fda:	edd0 9a01 	vldr	s19, [r0, #4]
 8009fde:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8009fe2:	ee71 2a46 	vsub.f32	s5, s2, s12
 8009fe6:	ee75 3aca 	vsub.f32	s7, s11, s20
 8009fea:	ee37 0a60 	vsub.f32	s0, s14, s1
 8009fee:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8009ff2:	ee37 7a20 	vadd.f32	s14, s14, s1
 8009ff6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8009ffa:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8009ffe:	ee79 3a05 	vadd.f32	s7, s18, s10
 800a002:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800a006:	ee39 5a45 	vsub.f32	s10, s18, s10
 800a00a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800a00e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800a012:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800a016:	ee31 6a06 	vadd.f32	s12, s2, s12
 800a01a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800a01e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800a022:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800a026:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800a02a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800a02e:	ee36 0a88 	vadd.f32	s0, s13, s16
 800a032:	ee75 8a86 	vadd.f32	s17, s11, s12
 800a036:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800a03a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800a03e:	ee75 6a62 	vsub.f32	s13, s10, s5
 800a042:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800a046:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a04a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800a04e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800a052:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800a056:	ee75 4a22 	vadd.f32	s9, s10, s5
 800a05a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800a05e:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a062:	ee33 8a06 	vadd.f32	s16, s6, s12
 800a066:	ee75 2a87 	vadd.f32	s5, s11, s14
 800a06a:	ee31 9a28 	vadd.f32	s18, s2, s17
 800a06e:	ee33 6a46 	vsub.f32	s12, s6, s12
 800a072:	ee74 0a61 	vsub.f32	s1, s8, s3
 800a076:	ee33 2a80 	vadd.f32	s4, s7, s0
 800a07a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800a07e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800a082:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a086:	ee31 1a68 	vsub.f32	s2, s2, s17
 800a08a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800a08e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800a092:	ee74 4a85 	vadd.f32	s9, s9, s10
 800a096:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a09a:	44d8      	add	r8, fp
 800a09c:	45c1      	cmp	r9, r8
 800a09e:	ed8e 9a00 	vstr	s18, [lr]
 800a0a2:	ed85 1a01 	vstr	s2, [r5, #4]
 800a0a6:	449e      	add	lr, r3
 800a0a8:	ed8c 8a00 	vstr	s16, [ip]
 800a0ac:	441d      	add	r5, r3
 800a0ae:	ed80 6a00 	vstr	s12, [r0]
 800a0b2:	edcc 0a01 	vstr	s1, [ip, #4]
 800a0b6:	ed80 4a01 	vstr	s8, [r0, #4]
 800a0ba:	449c      	add	ip, r3
 800a0bc:	ed87 2a00 	vstr	s4, [r7]
 800a0c0:	4418      	add	r0, r3
 800a0c2:	ed41 3a01 	vstr	s7, [r1, #-4]
 800a0c6:	ed42 2a01 	vstr	s5, [r2, #-4]
 800a0ca:	ed86 7a00 	vstr	s14, [r6]
 800a0ce:	ed87 3a01 	vstr	s6, [r7, #4]
 800a0d2:	edc1 4a00 	vstr	s9, [r1]
 800a0d6:	441f      	add	r7, r3
 800a0d8:	edc2 5a00 	vstr	s11, [r2]
 800a0dc:	4419      	add	r1, r3
 800a0de:	edc6 6a01 	vstr	s13, [r6, #4]
 800a0e2:	441a      	add	r2, r3
 800a0e4:	441e      	add	r6, r3
 800a0e6:	f63f af44 	bhi.w	8009f72 <arm_radix8_butterfly_f32+0x66>
 800a0ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a0ec:	2907      	cmp	r1, #7
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f240 81e9 	bls.w	800a4c6 <arm_radix8_butterfly_f32+0x5ba>
 800a0f4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800a0f8:	193e      	adds	r6, r7, r4
 800a0fa:	1935      	adds	r5, r6, r4
 800a0fc:	9c03      	ldr	r4, [sp, #12]
 800a0fe:	9000      	str	r0, [sp, #0]
 800a100:	4622      	mov	r2, r4
 800a102:	3201      	adds	r2, #1
 800a104:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a108:	9900      	ldr	r1, [sp, #0]
 800a10a:	1828      	adds	r0, r5, r0
 800a10c:	eb00 0e01 	add.w	lr, r0, r1
 800a110:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a112:	440a      	add	r2, r1
 800a114:	eb04 0c01 	add.w	ip, r4, r1
 800a118:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800a11c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800a120:	9a00      	ldr	r2, [sp, #0]
 800a122:	940f      	str	r4, [sp, #60]	@ 0x3c
 800a124:	00ed      	lsls	r5, r5, #3
 800a126:	9511      	str	r5, [sp, #68]	@ 0x44
 800a128:	00d5      	lsls	r5, r2, #3
 800a12a:	950d      	str	r5, [sp, #52]	@ 0x34
 800a12c:	9d01      	ldr	r5, [sp, #4]
 800a12e:	3508      	adds	r5, #8
 800a130:	9516      	str	r5, [sp, #88]	@ 0x58
 800a132:	9d02      	ldr	r5, [sp, #8]
 800a134:	3508      	adds	r5, #8
 800a136:	0114      	lsls	r4, r2, #4
 800a138:	9517      	str	r5, [sp, #92]	@ 0x5c
 800a13a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a13c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800a13e:	940e      	str	r4, [sp, #56]	@ 0x38
 800a140:	00c0      	lsls	r0, r0, #3
 800a142:	9010      	str	r0, [sp, #64]	@ 0x40
 800a144:	18aa      	adds	r2, r5, r2
 800a146:	9207      	str	r2, [sp, #28]
 800a148:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a14a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a14c:	18aa      	adds	r2, r5, r2
 800a14e:	9208      	str	r2, [sp, #32]
 800a150:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a152:	18aa      	adds	r2, r5, r2
 800a154:	9209      	str	r2, [sp, #36]	@ 0x24
 800a156:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a15a:	f10e 0204 	add.w	r2, lr, #4
 800a15e:	920a      	str	r2, [sp, #40]	@ 0x28
 800a160:	00c9      	lsls	r1, r1, #3
 800a162:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a164:	310c      	adds	r1, #12
 800a166:	00f6      	lsls	r6, r6, #3
 800a168:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800a16c:	9114      	str	r1, [sp, #80]	@ 0x50
 800a16e:	18a9      	adds	r1, r5, r2
 800a170:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a172:	9612      	str	r6, [sp, #72]	@ 0x48
 800a174:	00ff      	lsls	r7, r7, #3
 800a176:	19ae      	adds	r6, r5, r6
 800a178:	3008      	adds	r0, #8
 800a17a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800a17e:	9606      	str	r6, [sp, #24]
 800a180:	9019      	str	r0, [sp, #100]	@ 0x64
 800a182:	18aa      	adds	r2, r5, r2
 800a184:	0164      	lsls	r4, r4, #5
 800a186:	19ee      	adds	r6, r5, r7
 800a188:	f10c 000c 	add.w	r0, ip, #12
 800a18c:	9713      	str	r7, [sp, #76]	@ 0x4c
 800a18e:	9604      	str	r6, [sp, #16]
 800a190:	9015      	str	r0, [sp, #84]	@ 0x54
 800a192:	9103      	str	r1, [sp, #12]
 800a194:	9205      	str	r2, [sp, #20]
 800a196:	f104 0208 	add.w	r2, r4, #8
 800a19a:	9218      	str	r2, [sp, #96]	@ 0x60
 800a19c:	f04f 0801 	mov.w	r8, #1
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f102 0108 	add.w	r1, r2, #8
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a1aa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800a1ac:	188e      	adds	r6, r1, r2
 800a1ae:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800a1b0:	188d      	adds	r5, r1, r2
 800a1b2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a1b4:	188c      	adds	r4, r1, r2
 800a1b6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a1b8:	1888      	adds	r0, r1, r2
 800a1ba:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800a1bc:	eb01 0c02 	add.w	ip, r1, r2
 800a1c0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800a1c2:	440a      	add	r2, r1
 800a1c4:	9903      	ldr	r1, [sp, #12]
 800a1c6:	edd1 fa00 	vldr	s31, [r1]
 800a1ca:	9905      	ldr	r1, [sp, #20]
 800a1cc:	ed91 fa00 	vldr	s30, [r1]
 800a1d0:	9904      	ldr	r1, [sp, #16]
 800a1d2:	edd1 ea00 	vldr	s29, [r1]
 800a1d6:	9906      	ldr	r1, [sp, #24]
 800a1d8:	ed91 ea00 	vldr	s28, [r1]
 800a1dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1de:	edd1 da00 	vldr	s27, [r1]
 800a1e2:	9908      	ldr	r1, [sp, #32]
 800a1e4:	ed91 da00 	vldr	s26, [r1]
 800a1e8:	9907      	ldr	r1, [sp, #28]
 800a1ea:	edd1 ca00 	vldr	s25, [r1]
 800a1ee:	9903      	ldr	r1, [sp, #12]
 800a1f0:	ed91 ca01 	vldr	s24, [r1, #4]
 800a1f4:	9905      	ldr	r1, [sp, #20]
 800a1f6:	edd1 ba01 	vldr	s23, [r1, #4]
 800a1fa:	9904      	ldr	r1, [sp, #16]
 800a1fc:	edd1 aa01 	vldr	s21, [r1, #4]
 800a200:	9906      	ldr	r1, [sp, #24]
 800a202:	ed91 aa01 	vldr	s20, [r1, #4]
 800a206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a208:	edd1 7a01 	vldr	s15, [r1, #4]
 800a20c:	9908      	ldr	r1, [sp, #32]
 800a20e:	edcd 7a00 	vstr	s15, [sp]
 800a212:	edd1 7a01 	vldr	s15, [r1, #4]
 800a216:	9907      	ldr	r1, [sp, #28]
 800a218:	edcd 7a01 	vstr	s15, [sp, #4]
 800a21c:	edd1 7a01 	vldr	s15, [r1, #4]
 800a220:	eb0a 0e07 	add.w	lr, sl, r7
 800a224:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800a226:	edcd 7a02 	vstr	s15, [sp, #8]
 800a22a:	eb0c 010a 	add.w	r1, ip, sl
 800a22e:	4456      	add	r6, sl
 800a230:	4455      	add	r5, sl
 800a232:	4454      	add	r4, sl
 800a234:	4450      	add	r0, sl
 800a236:	4452      	add	r2, sl
 800a238:	46c4      	mov	ip, r8
 800a23a:	e001      	b.n	800a240 <arm_radix8_butterfly_f32+0x334>
 800a23c:	3f3504f3 	.word	0x3f3504f3
 800a240:	ed96 5a00 	vldr	s10, [r6]
 800a244:	ed52 9a01 	vldr	s19, [r2, #-4]
 800a248:	ed11 6a01 	vldr	s12, [r1, #-4]
 800a24c:	edd0 7a00 	vldr	s15, [r0]
 800a250:	ed17 7a01 	vldr	s14, [r7, #-4]
 800a254:	edde 3a00 	vldr	s7, [lr]
 800a258:	ed94 3a00 	vldr	s6, [r4]
 800a25c:	ed95 2a00 	vldr	s4, [r5]
 800a260:	ed9e 0a01 	vldr	s0, [lr, #4]
 800a264:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a268:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a26c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800a270:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a274:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a278:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a27c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a280:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a284:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a288:	ed8e 6a00 	vstr	s12, [lr]
 800a28c:	edd0 8a01 	vldr	s17, [r0, #4]
 800a290:	ed95 9a01 	vldr	s18, [r5, #4]
 800a294:	edd1 2a00 	vldr	s5, [r1]
 800a298:	ed97 7a00 	vldr	s14, [r7]
 800a29c:	edd4 0a01 	vldr	s1, [r4, #4]
 800a2a0:	ed96 6a01 	vldr	s12, [r6, #4]
 800a2a4:	edd2 5a00 	vldr	s11, [r2]
 800a2a8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a2ac:	ee33 3a69 	vsub.f32	s6, s6, s19
 800a2b0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a2b4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800a2b8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a2bc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a2c0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a2c4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a2c8:	ee75 8a69 	vsub.f32	s17, s10, s19
 800a2cc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a2d0:	ee35 5a29 	vadd.f32	s10, s10, s19
 800a2d4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a2d8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a2dc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800a2e0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a2e4:	ee32 9a08 	vadd.f32	s18, s4, s16
 800a2e8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a2ec:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a2f0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a2f4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a2f8:	ee32 1a87 	vadd.f32	s2, s5, s14
 800a2fc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a300:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a304:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a308:	ee73 0a29 	vadd.f32	s1, s6, s19
 800a30c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a310:	ee33 3a69 	vsub.f32	s6, s6, s19
 800a314:	ee32 7a64 	vsub.f32	s14, s4, s9
 800a318:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800a31c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a320:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a324:	ee75 8a85 	vadd.f32	s17, s11, s10
 800a328:	ee74 3a22 	vadd.f32	s7, s8, s5
 800a32c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800a330:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a334:	ee79 1a41 	vsub.f32	s3, s18, s2
 800a338:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800a33c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800a340:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a344:	ee72 4a24 	vadd.f32	s9, s4, s9
 800a348:	ee30 4a60 	vsub.f32	s8, s0, s1
 800a34c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800a350:	ee30 0a20 	vadd.f32	s0, s0, s1
 800a354:	ee77 9a85 	vadd.f32	s19, s15, s10
 800a358:	ee36 6a03 	vadd.f32	s12, s12, s6
 800a35c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a360:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800a364:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800a368:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800a36c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800a370:	ee39 1a01 	vadd.f32	s2, s18, s2
 800a374:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800a378:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800a37c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800a380:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800a384:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800a388:	ee35 3a03 	vadd.f32	s6, s10, s6
 800a38c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800a390:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800a394:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800a398:	ed9d 4a02 	vldr	s8, [sp, #8]
 800a39c:	ed8e 1a01 	vstr	s2, [lr, #4]
 800a3a0:	ee77 3a63 	vsub.f32	s7, s14, s7
 800a3a4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a3a8:	ed9d 7a01 	vldr	s14, [sp, #4]
 800a3ac:	ed86 3a00 	vstr	s6, [r6]
 800a3b0:	ee30 9a89 	vadd.f32	s18, s1, s18
 800a3b4:	ee32 2a05 	vadd.f32	s4, s4, s10
 800a3b8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800a3bc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800a3c0:	ee67 2a22 	vmul.f32	s5, s14, s5
 800a3c4:	ee64 1a00 	vmul.f32	s3, s8, s0
 800a3c8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a3cc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800a3d0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800a3d4:	ee64 8a28 	vmul.f32	s17, s8, s17
 800a3d8:	ed9d 4a00 	vldr	s8, [sp]
 800a3dc:	edc6 6a01 	vstr	s13, [r6, #4]
 800a3e0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a3e4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800a3e8:	ee64 9a29 	vmul.f32	s19, s8, s19
 800a3ec:	ee24 4a25 	vmul.f32	s8, s8, s11
 800a3f0:	ee30 7a87 	vadd.f32	s14, s1, s14
 800a3f4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a3f8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800a3fc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800a400:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800a404:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800a408:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800a40c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800a410:	ee75 1a21 	vadd.f32	s3, s10, s3
 800a414:	ee30 0a68 	vsub.f32	s0, s0, s17
 800a418:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800a41c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800a420:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a424:	44dc      	add	ip, fp
 800a426:	45e1      	cmp	r9, ip
 800a428:	ed84 9a00 	vstr	s18, [r4]
 800a42c:	edc4 3a01 	vstr	s7, [r4, #4]
 800a430:	449e      	add	lr, r3
 800a432:	ed02 7a01 	vstr	s14, [r2, #-4]
 800a436:	edc2 2a00 	vstr	s5, [r2]
 800a43a:	441e      	add	r6, r3
 800a43c:	ed85 2a00 	vstr	s4, [r5]
 800a440:	ed85 8a01 	vstr	s16, [r5, #4]
 800a444:	441c      	add	r4, r3
 800a446:	ed47 1a01 	vstr	s3, [r7, #-4]
 800a44a:	ed87 0a00 	vstr	s0, [r7]
 800a44e:	441a      	add	r2, r3
 800a450:	ed41 4a01 	vstr	s9, [r1, #-4]
 800a454:	edc1 9a00 	vstr	s19, [r1]
 800a458:	441d      	add	r5, r3
 800a45a:	edc0 0a00 	vstr	s1, [r0]
 800a45e:	441f      	add	r7, r3
 800a460:	ed80 6a01 	vstr	s12, [r0, #4]
 800a464:	4419      	add	r1, r3
 800a466:	4418      	add	r0, r3
 800a468:	f63f aeea 	bhi.w	800a240 <arm_radix8_butterfly_f32+0x334>
 800a46c:	9a03      	ldr	r2, [sp, #12]
 800a46e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a470:	440a      	add	r2, r1
 800a472:	9203      	str	r2, [sp, #12]
 800a474:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a476:	9a05      	ldr	r2, [sp, #20]
 800a478:	440a      	add	r2, r1
 800a47a:	9205      	str	r2, [sp, #20]
 800a47c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a47e:	9a04      	ldr	r2, [sp, #16]
 800a480:	440a      	add	r2, r1
 800a482:	9204      	str	r2, [sp, #16]
 800a484:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a486:	9a06      	ldr	r2, [sp, #24]
 800a488:	440a      	add	r2, r1
 800a48a:	9206      	str	r2, [sp, #24]
 800a48c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a490:	440a      	add	r2, r1
 800a492:	9209      	str	r2, [sp, #36]	@ 0x24
 800a494:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a496:	9a08      	ldr	r2, [sp, #32]
 800a498:	440a      	add	r2, r1
 800a49a:	9208      	str	r2, [sp, #32]
 800a49c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a49e:	9a07      	ldr	r2, [sp, #28]
 800a4a0:	440a      	add	r2, r1
 800a4a2:	9207      	str	r2, [sp, #28]
 800a4a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a4a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4a8:	f108 0801 	add.w	r8, r8, #1
 800a4ac:	3208      	adds	r2, #8
 800a4ae:	4588      	cmp	r8, r1
 800a4b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800a4b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4b4:	f47f ae75 	bne.w	800a1a2 <arm_radix8_butterfly_f32+0x296>
 800a4b8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	46c3      	mov	fp, r8
 800a4c0:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 800a4c4:	e532      	b.n	8009f2c <arm_radix8_butterfly_f32+0x20>
 800a4c6:	b01d      	add	sp, #116	@ 0x74
 800a4c8:	ecbd 8b10 	vpop	{d8-d15}
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a4d0 <__cvt>:
 800a4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d4:	ec57 6b10 	vmov	r6, r7, d0
 800a4d8:	2f00      	cmp	r7, #0
 800a4da:	460c      	mov	r4, r1
 800a4dc:	4619      	mov	r1, r3
 800a4de:	463b      	mov	r3, r7
 800a4e0:	bfbb      	ittet	lt
 800a4e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a4e6:	461f      	movlt	r7, r3
 800a4e8:	2300      	movge	r3, #0
 800a4ea:	232d      	movlt	r3, #45	@ 0x2d
 800a4ec:	700b      	strb	r3, [r1, #0]
 800a4ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a4f4:	4691      	mov	r9, r2
 800a4f6:	f023 0820 	bic.w	r8, r3, #32
 800a4fa:	bfbc      	itt	lt
 800a4fc:	4632      	movlt	r2, r6
 800a4fe:	4616      	movlt	r6, r2
 800a500:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a504:	d005      	beq.n	800a512 <__cvt+0x42>
 800a506:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a50a:	d100      	bne.n	800a50e <__cvt+0x3e>
 800a50c:	3401      	adds	r4, #1
 800a50e:	2102      	movs	r1, #2
 800a510:	e000      	b.n	800a514 <__cvt+0x44>
 800a512:	2103      	movs	r1, #3
 800a514:	ab03      	add	r3, sp, #12
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	ab02      	add	r3, sp, #8
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	ec47 6b10 	vmov	d0, r6, r7
 800a520:	4653      	mov	r3, sl
 800a522:	4622      	mov	r2, r4
 800a524:	f000 fe6c 	bl	800b200 <_dtoa_r>
 800a528:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a52c:	4605      	mov	r5, r0
 800a52e:	d119      	bne.n	800a564 <__cvt+0x94>
 800a530:	f019 0f01 	tst.w	r9, #1
 800a534:	d00e      	beq.n	800a554 <__cvt+0x84>
 800a536:	eb00 0904 	add.w	r9, r0, r4
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	4630      	mov	r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	f7f6 fb41 	bl	8000bc8 <__aeabi_dcmpeq>
 800a546:	b108      	cbz	r0, 800a54c <__cvt+0x7c>
 800a548:	f8cd 900c 	str.w	r9, [sp, #12]
 800a54c:	2230      	movs	r2, #48	@ 0x30
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	454b      	cmp	r3, r9
 800a552:	d31e      	bcc.n	800a592 <__cvt+0xc2>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a558:	1b5b      	subs	r3, r3, r5
 800a55a:	4628      	mov	r0, r5
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	b004      	add	sp, #16
 800a560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a564:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a568:	eb00 0904 	add.w	r9, r0, r4
 800a56c:	d1e5      	bne.n	800a53a <__cvt+0x6a>
 800a56e:	7803      	ldrb	r3, [r0, #0]
 800a570:	2b30      	cmp	r3, #48	@ 0x30
 800a572:	d10a      	bne.n	800a58a <__cvt+0xba>
 800a574:	2200      	movs	r2, #0
 800a576:	2300      	movs	r3, #0
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 fb24 	bl	8000bc8 <__aeabi_dcmpeq>
 800a580:	b918      	cbnz	r0, 800a58a <__cvt+0xba>
 800a582:	f1c4 0401 	rsb	r4, r4, #1
 800a586:	f8ca 4000 	str.w	r4, [sl]
 800a58a:	f8da 3000 	ldr.w	r3, [sl]
 800a58e:	4499      	add	r9, r3
 800a590:	e7d3      	b.n	800a53a <__cvt+0x6a>
 800a592:	1c59      	adds	r1, r3, #1
 800a594:	9103      	str	r1, [sp, #12]
 800a596:	701a      	strb	r2, [r3, #0]
 800a598:	e7d9      	b.n	800a54e <__cvt+0x7e>

0800a59a <__exponent>:
 800a59a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a59c:	2900      	cmp	r1, #0
 800a59e:	bfba      	itte	lt
 800a5a0:	4249      	neglt	r1, r1
 800a5a2:	232d      	movlt	r3, #45	@ 0x2d
 800a5a4:	232b      	movge	r3, #43	@ 0x2b
 800a5a6:	2909      	cmp	r1, #9
 800a5a8:	7002      	strb	r2, [r0, #0]
 800a5aa:	7043      	strb	r3, [r0, #1]
 800a5ac:	dd29      	ble.n	800a602 <__exponent+0x68>
 800a5ae:	f10d 0307 	add.w	r3, sp, #7
 800a5b2:	461d      	mov	r5, r3
 800a5b4:	270a      	movs	r7, #10
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5bc:	fb07 1416 	mls	r4, r7, r6, r1
 800a5c0:	3430      	adds	r4, #48	@ 0x30
 800a5c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	2c63      	cmp	r4, #99	@ 0x63
 800a5ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	dcf1      	bgt.n	800a5b6 <__exponent+0x1c>
 800a5d2:	3130      	adds	r1, #48	@ 0x30
 800a5d4:	1e94      	subs	r4, r2, #2
 800a5d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a5da:	1c41      	adds	r1, r0, #1
 800a5dc:	4623      	mov	r3, r4
 800a5de:	42ab      	cmp	r3, r5
 800a5e0:	d30a      	bcc.n	800a5f8 <__exponent+0x5e>
 800a5e2:	f10d 0309 	add.w	r3, sp, #9
 800a5e6:	1a9b      	subs	r3, r3, r2
 800a5e8:	42ac      	cmp	r4, r5
 800a5ea:	bf88      	it	hi
 800a5ec:	2300      	movhi	r3, #0
 800a5ee:	3302      	adds	r3, #2
 800a5f0:	4403      	add	r3, r0
 800a5f2:	1a18      	subs	r0, r3, r0
 800a5f4:	b003      	add	sp, #12
 800a5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a600:	e7ed      	b.n	800a5de <__exponent+0x44>
 800a602:	2330      	movs	r3, #48	@ 0x30
 800a604:	3130      	adds	r1, #48	@ 0x30
 800a606:	7083      	strb	r3, [r0, #2]
 800a608:	70c1      	strb	r1, [r0, #3]
 800a60a:	1d03      	adds	r3, r0, #4
 800a60c:	e7f1      	b.n	800a5f2 <__exponent+0x58>
	...

0800a610 <_printf_float>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	b08d      	sub	sp, #52	@ 0x34
 800a616:	460c      	mov	r4, r1
 800a618:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a61c:	4616      	mov	r6, r2
 800a61e:	461f      	mov	r7, r3
 800a620:	4605      	mov	r5, r0
 800a622:	f000 fceb 	bl	800affc <_localeconv_r>
 800a626:	6803      	ldr	r3, [r0, #0]
 800a628:	9304      	str	r3, [sp, #16]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7f5 fea0 	bl	8000370 <strlen>
 800a630:	2300      	movs	r3, #0
 800a632:	930a      	str	r3, [sp, #40]	@ 0x28
 800a634:	f8d8 3000 	ldr.w	r3, [r8]
 800a638:	9005      	str	r0, [sp, #20]
 800a63a:	3307      	adds	r3, #7
 800a63c:	f023 0307 	bic.w	r3, r3, #7
 800a640:	f103 0208 	add.w	r2, r3, #8
 800a644:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a648:	f8d4 b000 	ldr.w	fp, [r4]
 800a64c:	f8c8 2000 	str.w	r2, [r8]
 800a650:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a654:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a658:	9307      	str	r3, [sp, #28]
 800a65a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a65e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a666:	4b9c      	ldr	r3, [pc, #624]	@ (800a8d8 <_printf_float+0x2c8>)
 800a668:	f04f 32ff 	mov.w	r2, #4294967295
 800a66c:	f7f6 fade 	bl	8000c2c <__aeabi_dcmpun>
 800a670:	bb70      	cbnz	r0, 800a6d0 <_printf_float+0xc0>
 800a672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a676:	4b98      	ldr	r3, [pc, #608]	@ (800a8d8 <_printf_float+0x2c8>)
 800a678:	f04f 32ff 	mov.w	r2, #4294967295
 800a67c:	f7f6 fab8 	bl	8000bf0 <__aeabi_dcmple>
 800a680:	bb30      	cbnz	r0, 800a6d0 <_printf_float+0xc0>
 800a682:	2200      	movs	r2, #0
 800a684:	2300      	movs	r3, #0
 800a686:	4640      	mov	r0, r8
 800a688:	4649      	mov	r1, r9
 800a68a:	f7f6 faa7 	bl	8000bdc <__aeabi_dcmplt>
 800a68e:	b110      	cbz	r0, 800a696 <_printf_float+0x86>
 800a690:	232d      	movs	r3, #45	@ 0x2d
 800a692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a696:	4a91      	ldr	r2, [pc, #580]	@ (800a8dc <_printf_float+0x2cc>)
 800a698:	4b91      	ldr	r3, [pc, #580]	@ (800a8e0 <_printf_float+0x2d0>)
 800a69a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a69e:	bf94      	ite	ls
 800a6a0:	4690      	movls	r8, r2
 800a6a2:	4698      	movhi	r8, r3
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	f02b 0304 	bic.w	r3, fp, #4
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	f04f 0900 	mov.w	r9, #0
 800a6b2:	9700      	str	r7, [sp, #0]
 800a6b4:	4633      	mov	r3, r6
 800a6b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f000 f9d2 	bl	800aa64 <_printf_common>
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	f040 808d 	bne.w	800a7e0 <_printf_float+0x1d0>
 800a6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ca:	b00d      	add	sp, #52	@ 0x34
 800a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d0:	4642      	mov	r2, r8
 800a6d2:	464b      	mov	r3, r9
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	4649      	mov	r1, r9
 800a6d8:	f7f6 faa8 	bl	8000c2c <__aeabi_dcmpun>
 800a6dc:	b140      	cbz	r0, 800a6f0 <_printf_float+0xe0>
 800a6de:	464b      	mov	r3, r9
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	bfbc      	itt	lt
 800a6e4:	232d      	movlt	r3, #45	@ 0x2d
 800a6e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a6ea:	4a7e      	ldr	r2, [pc, #504]	@ (800a8e4 <_printf_float+0x2d4>)
 800a6ec:	4b7e      	ldr	r3, [pc, #504]	@ (800a8e8 <_printf_float+0x2d8>)
 800a6ee:	e7d4      	b.n	800a69a <_printf_float+0x8a>
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a6f6:	9206      	str	r2, [sp, #24]
 800a6f8:	1c5a      	adds	r2, r3, #1
 800a6fa:	d13b      	bne.n	800a774 <_printf_float+0x164>
 800a6fc:	2306      	movs	r3, #6
 800a6fe:	6063      	str	r3, [r4, #4]
 800a700:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a704:	2300      	movs	r3, #0
 800a706:	6022      	str	r2, [r4, #0]
 800a708:	9303      	str	r3, [sp, #12]
 800a70a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a70c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a710:	ab09      	add	r3, sp, #36	@ 0x24
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	6861      	ldr	r1, [r4, #4]
 800a716:	ec49 8b10 	vmov	d0, r8, r9
 800a71a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a71e:	4628      	mov	r0, r5
 800a720:	f7ff fed6 	bl	800a4d0 <__cvt>
 800a724:	9b06      	ldr	r3, [sp, #24]
 800a726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a728:	2b47      	cmp	r3, #71	@ 0x47
 800a72a:	4680      	mov	r8, r0
 800a72c:	d129      	bne.n	800a782 <_printf_float+0x172>
 800a72e:	1cc8      	adds	r0, r1, #3
 800a730:	db02      	blt.n	800a738 <_printf_float+0x128>
 800a732:	6863      	ldr	r3, [r4, #4]
 800a734:	4299      	cmp	r1, r3
 800a736:	dd41      	ble.n	800a7bc <_printf_float+0x1ac>
 800a738:	f1aa 0a02 	sub.w	sl, sl, #2
 800a73c:	fa5f fa8a 	uxtb.w	sl, sl
 800a740:	3901      	subs	r1, #1
 800a742:	4652      	mov	r2, sl
 800a744:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a748:	9109      	str	r1, [sp, #36]	@ 0x24
 800a74a:	f7ff ff26 	bl	800a59a <__exponent>
 800a74e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a750:	1813      	adds	r3, r2, r0
 800a752:	2a01      	cmp	r2, #1
 800a754:	4681      	mov	r9, r0
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	dc02      	bgt.n	800a760 <_printf_float+0x150>
 800a75a:	6822      	ldr	r2, [r4, #0]
 800a75c:	07d2      	lsls	r2, r2, #31
 800a75e:	d501      	bpl.n	800a764 <_printf_float+0x154>
 800a760:	3301      	adds	r3, #1
 800a762:	6123      	str	r3, [r4, #16]
 800a764:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0a2      	beq.n	800a6b2 <_printf_float+0xa2>
 800a76c:	232d      	movs	r3, #45	@ 0x2d
 800a76e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a772:	e79e      	b.n	800a6b2 <_printf_float+0xa2>
 800a774:	9a06      	ldr	r2, [sp, #24]
 800a776:	2a47      	cmp	r2, #71	@ 0x47
 800a778:	d1c2      	bne.n	800a700 <_printf_float+0xf0>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1c0      	bne.n	800a700 <_printf_float+0xf0>
 800a77e:	2301      	movs	r3, #1
 800a780:	e7bd      	b.n	800a6fe <_printf_float+0xee>
 800a782:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a786:	d9db      	bls.n	800a740 <_printf_float+0x130>
 800a788:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a78c:	d118      	bne.n	800a7c0 <_printf_float+0x1b0>
 800a78e:	2900      	cmp	r1, #0
 800a790:	6863      	ldr	r3, [r4, #4]
 800a792:	dd0b      	ble.n	800a7ac <_printf_float+0x19c>
 800a794:	6121      	str	r1, [r4, #16]
 800a796:	b913      	cbnz	r3, 800a79e <_printf_float+0x18e>
 800a798:	6822      	ldr	r2, [r4, #0]
 800a79a:	07d0      	lsls	r0, r2, #31
 800a79c:	d502      	bpl.n	800a7a4 <_printf_float+0x194>
 800a79e:	3301      	adds	r3, #1
 800a7a0:	440b      	add	r3, r1
 800a7a2:	6123      	str	r3, [r4, #16]
 800a7a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a7a6:	f04f 0900 	mov.w	r9, #0
 800a7aa:	e7db      	b.n	800a764 <_printf_float+0x154>
 800a7ac:	b913      	cbnz	r3, 800a7b4 <_printf_float+0x1a4>
 800a7ae:	6822      	ldr	r2, [r4, #0]
 800a7b0:	07d2      	lsls	r2, r2, #31
 800a7b2:	d501      	bpl.n	800a7b8 <_printf_float+0x1a8>
 800a7b4:	3302      	adds	r3, #2
 800a7b6:	e7f4      	b.n	800a7a2 <_printf_float+0x192>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e7f2      	b.n	800a7a2 <_printf_float+0x192>
 800a7bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a7c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7c2:	4299      	cmp	r1, r3
 800a7c4:	db05      	blt.n	800a7d2 <_printf_float+0x1c2>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	6121      	str	r1, [r4, #16]
 800a7ca:	07d8      	lsls	r0, r3, #31
 800a7cc:	d5ea      	bpl.n	800a7a4 <_printf_float+0x194>
 800a7ce:	1c4b      	adds	r3, r1, #1
 800a7d0:	e7e7      	b.n	800a7a2 <_printf_float+0x192>
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	bfd4      	ite	le
 800a7d6:	f1c1 0202 	rsble	r2, r1, #2
 800a7da:	2201      	movgt	r2, #1
 800a7dc:	4413      	add	r3, r2
 800a7de:	e7e0      	b.n	800a7a2 <_printf_float+0x192>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	055a      	lsls	r2, r3, #21
 800a7e4:	d407      	bmi.n	800a7f6 <_printf_float+0x1e6>
 800a7e6:	6923      	ldr	r3, [r4, #16]
 800a7e8:	4642      	mov	r2, r8
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	47b8      	blx	r7
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d12b      	bne.n	800a84c <_printf_float+0x23c>
 800a7f4:	e767      	b.n	800a6c6 <_printf_float+0xb6>
 800a7f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7fa:	f240 80dd 	bls.w	800a9b8 <_printf_float+0x3a8>
 800a7fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a802:	2200      	movs	r2, #0
 800a804:	2300      	movs	r3, #0
 800a806:	f7f6 f9df 	bl	8000bc8 <__aeabi_dcmpeq>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d033      	beq.n	800a876 <_printf_float+0x266>
 800a80e:	4a37      	ldr	r2, [pc, #220]	@ (800a8ec <_printf_float+0x2dc>)
 800a810:	2301      	movs	r3, #1
 800a812:	4631      	mov	r1, r6
 800a814:	4628      	mov	r0, r5
 800a816:	47b8      	blx	r7
 800a818:	3001      	adds	r0, #1
 800a81a:	f43f af54 	beq.w	800a6c6 <_printf_float+0xb6>
 800a81e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a822:	4543      	cmp	r3, r8
 800a824:	db02      	blt.n	800a82c <_printf_float+0x21c>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	07d8      	lsls	r0, r3, #31
 800a82a:	d50f      	bpl.n	800a84c <_printf_float+0x23c>
 800a82c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f af45 	beq.w	800a6c6 <_printf_float+0xb6>
 800a83c:	f04f 0900 	mov.w	r9, #0
 800a840:	f108 38ff 	add.w	r8, r8, #4294967295
 800a844:	f104 0a1a 	add.w	sl, r4, #26
 800a848:	45c8      	cmp	r8, r9
 800a84a:	dc09      	bgt.n	800a860 <_printf_float+0x250>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	079b      	lsls	r3, r3, #30
 800a850:	f100 8103 	bmi.w	800aa5a <_printf_float+0x44a>
 800a854:	68e0      	ldr	r0, [r4, #12]
 800a856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a858:	4298      	cmp	r0, r3
 800a85a:	bfb8      	it	lt
 800a85c:	4618      	movlt	r0, r3
 800a85e:	e734      	b.n	800a6ca <_printf_float+0xba>
 800a860:	2301      	movs	r3, #1
 800a862:	4652      	mov	r2, sl
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f af2b 	beq.w	800a6c6 <_printf_float+0xb6>
 800a870:	f109 0901 	add.w	r9, r9, #1
 800a874:	e7e8      	b.n	800a848 <_printf_float+0x238>
 800a876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dc39      	bgt.n	800a8f0 <_printf_float+0x2e0>
 800a87c:	4a1b      	ldr	r2, [pc, #108]	@ (800a8ec <_printf_float+0x2dc>)
 800a87e:	2301      	movs	r3, #1
 800a880:	4631      	mov	r1, r6
 800a882:	4628      	mov	r0, r5
 800a884:	47b8      	blx	r7
 800a886:	3001      	adds	r0, #1
 800a888:	f43f af1d 	beq.w	800a6c6 <_printf_float+0xb6>
 800a88c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a890:	ea59 0303 	orrs.w	r3, r9, r3
 800a894:	d102      	bne.n	800a89c <_printf_float+0x28c>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	07d9      	lsls	r1, r3, #31
 800a89a:	d5d7      	bpl.n	800a84c <_printf_float+0x23c>
 800a89c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	47b8      	blx	r7
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	f43f af0d 	beq.w	800a6c6 <_printf_float+0xb6>
 800a8ac:	f04f 0a00 	mov.w	sl, #0
 800a8b0:	f104 0b1a 	add.w	fp, r4, #26
 800a8b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8b6:	425b      	negs	r3, r3
 800a8b8:	4553      	cmp	r3, sl
 800a8ba:	dc01      	bgt.n	800a8c0 <_printf_float+0x2b0>
 800a8bc:	464b      	mov	r3, r9
 800a8be:	e793      	b.n	800a7e8 <_printf_float+0x1d8>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	465a      	mov	r2, fp
 800a8c4:	4631      	mov	r1, r6
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	47b8      	blx	r7
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	f43f aefb 	beq.w	800a6c6 <_printf_float+0xb6>
 800a8d0:	f10a 0a01 	add.w	sl, sl, #1
 800a8d4:	e7ee      	b.n	800a8b4 <_printf_float+0x2a4>
 800a8d6:	bf00      	nop
 800a8d8:	7fefffff 	.word	0x7fefffff
 800a8dc:	08020fb4 	.word	0x08020fb4
 800a8e0:	08020fb8 	.word	0x08020fb8
 800a8e4:	08020fbc 	.word	0x08020fbc
 800a8e8:	08020fc0 	.word	0x08020fc0
 800a8ec:	08020fc4 	.word	0x08020fc4
 800a8f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8f6:	4553      	cmp	r3, sl
 800a8f8:	bfa8      	it	ge
 800a8fa:	4653      	movge	r3, sl
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	4699      	mov	r9, r3
 800a900:	dc36      	bgt.n	800a970 <_printf_float+0x360>
 800a902:	f04f 0b00 	mov.w	fp, #0
 800a906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a90a:	f104 021a 	add.w	r2, r4, #26
 800a90e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a910:	9306      	str	r3, [sp, #24]
 800a912:	eba3 0309 	sub.w	r3, r3, r9
 800a916:	455b      	cmp	r3, fp
 800a918:	dc31      	bgt.n	800a97e <_printf_float+0x36e>
 800a91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a91c:	459a      	cmp	sl, r3
 800a91e:	dc3a      	bgt.n	800a996 <_printf_float+0x386>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	07da      	lsls	r2, r3, #31
 800a924:	d437      	bmi.n	800a996 <_printf_float+0x386>
 800a926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a928:	ebaa 0903 	sub.w	r9, sl, r3
 800a92c:	9b06      	ldr	r3, [sp, #24]
 800a92e:	ebaa 0303 	sub.w	r3, sl, r3
 800a932:	4599      	cmp	r9, r3
 800a934:	bfa8      	it	ge
 800a936:	4699      	movge	r9, r3
 800a938:	f1b9 0f00 	cmp.w	r9, #0
 800a93c:	dc33      	bgt.n	800a9a6 <_printf_float+0x396>
 800a93e:	f04f 0800 	mov.w	r8, #0
 800a942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a946:	f104 0b1a 	add.w	fp, r4, #26
 800a94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a94c:	ebaa 0303 	sub.w	r3, sl, r3
 800a950:	eba3 0309 	sub.w	r3, r3, r9
 800a954:	4543      	cmp	r3, r8
 800a956:	f77f af79 	ble.w	800a84c <_printf_float+0x23c>
 800a95a:	2301      	movs	r3, #1
 800a95c:	465a      	mov	r2, fp
 800a95e:	4631      	mov	r1, r6
 800a960:	4628      	mov	r0, r5
 800a962:	47b8      	blx	r7
 800a964:	3001      	adds	r0, #1
 800a966:	f43f aeae 	beq.w	800a6c6 <_printf_float+0xb6>
 800a96a:	f108 0801 	add.w	r8, r8, #1
 800a96e:	e7ec      	b.n	800a94a <_printf_float+0x33a>
 800a970:	4642      	mov	r2, r8
 800a972:	4631      	mov	r1, r6
 800a974:	4628      	mov	r0, r5
 800a976:	47b8      	blx	r7
 800a978:	3001      	adds	r0, #1
 800a97a:	d1c2      	bne.n	800a902 <_printf_float+0x2f2>
 800a97c:	e6a3      	b.n	800a6c6 <_printf_float+0xb6>
 800a97e:	2301      	movs	r3, #1
 800a980:	4631      	mov	r1, r6
 800a982:	4628      	mov	r0, r5
 800a984:	9206      	str	r2, [sp, #24]
 800a986:	47b8      	blx	r7
 800a988:	3001      	adds	r0, #1
 800a98a:	f43f ae9c 	beq.w	800a6c6 <_printf_float+0xb6>
 800a98e:	9a06      	ldr	r2, [sp, #24]
 800a990:	f10b 0b01 	add.w	fp, fp, #1
 800a994:	e7bb      	b.n	800a90e <_printf_float+0x2fe>
 800a996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a99a:	4631      	mov	r1, r6
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b8      	blx	r7
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d1c0      	bne.n	800a926 <_printf_float+0x316>
 800a9a4:	e68f      	b.n	800a6c6 <_printf_float+0xb6>
 800a9a6:	9a06      	ldr	r2, [sp, #24]
 800a9a8:	464b      	mov	r3, r9
 800a9aa:	4442      	add	r2, r8
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	47b8      	blx	r7
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d1c3      	bne.n	800a93e <_printf_float+0x32e>
 800a9b6:	e686      	b.n	800a6c6 <_printf_float+0xb6>
 800a9b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9bc:	f1ba 0f01 	cmp.w	sl, #1
 800a9c0:	dc01      	bgt.n	800a9c6 <_printf_float+0x3b6>
 800a9c2:	07db      	lsls	r3, r3, #31
 800a9c4:	d536      	bpl.n	800aa34 <_printf_float+0x424>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47b8      	blx	r7
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	f43f ae78 	beq.w	800a6c6 <_printf_float+0xb6>
 800a9d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4628      	mov	r0, r5
 800a9de:	47b8      	blx	r7
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	f43f ae70 	beq.w	800a6c6 <_printf_float+0xb6>
 800a9e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9f2:	f7f6 f8e9 	bl	8000bc8 <__aeabi_dcmpeq>
 800a9f6:	b9c0      	cbnz	r0, 800aa2a <_printf_float+0x41a>
 800a9f8:	4653      	mov	r3, sl
 800a9fa:	f108 0201 	add.w	r2, r8, #1
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b8      	blx	r7
 800aa04:	3001      	adds	r0, #1
 800aa06:	d10c      	bne.n	800aa22 <_printf_float+0x412>
 800aa08:	e65d      	b.n	800a6c6 <_printf_float+0xb6>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	465a      	mov	r2, fp
 800aa0e:	4631      	mov	r1, r6
 800aa10:	4628      	mov	r0, r5
 800aa12:	47b8      	blx	r7
 800aa14:	3001      	adds	r0, #1
 800aa16:	f43f ae56 	beq.w	800a6c6 <_printf_float+0xb6>
 800aa1a:	f108 0801 	add.w	r8, r8, #1
 800aa1e:	45d0      	cmp	r8, sl
 800aa20:	dbf3      	blt.n	800aa0a <_printf_float+0x3fa>
 800aa22:	464b      	mov	r3, r9
 800aa24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa28:	e6df      	b.n	800a7ea <_printf_float+0x1da>
 800aa2a:	f04f 0800 	mov.w	r8, #0
 800aa2e:	f104 0b1a 	add.w	fp, r4, #26
 800aa32:	e7f4      	b.n	800aa1e <_printf_float+0x40e>
 800aa34:	2301      	movs	r3, #1
 800aa36:	4642      	mov	r2, r8
 800aa38:	e7e1      	b.n	800a9fe <_printf_float+0x3ee>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	464a      	mov	r2, r9
 800aa3e:	4631      	mov	r1, r6
 800aa40:	4628      	mov	r0, r5
 800aa42:	47b8      	blx	r7
 800aa44:	3001      	adds	r0, #1
 800aa46:	f43f ae3e 	beq.w	800a6c6 <_printf_float+0xb6>
 800aa4a:	f108 0801 	add.w	r8, r8, #1
 800aa4e:	68e3      	ldr	r3, [r4, #12]
 800aa50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa52:	1a5b      	subs	r3, r3, r1
 800aa54:	4543      	cmp	r3, r8
 800aa56:	dcf0      	bgt.n	800aa3a <_printf_float+0x42a>
 800aa58:	e6fc      	b.n	800a854 <_printf_float+0x244>
 800aa5a:	f04f 0800 	mov.w	r8, #0
 800aa5e:	f104 0919 	add.w	r9, r4, #25
 800aa62:	e7f4      	b.n	800aa4e <_printf_float+0x43e>

0800aa64 <_printf_common>:
 800aa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa68:	4616      	mov	r6, r2
 800aa6a:	4698      	mov	r8, r3
 800aa6c:	688a      	ldr	r2, [r1, #8]
 800aa6e:	690b      	ldr	r3, [r1, #16]
 800aa70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	bfb8      	it	lt
 800aa78:	4613      	movlt	r3, r2
 800aa7a:	6033      	str	r3, [r6, #0]
 800aa7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa80:	4607      	mov	r7, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	b10a      	cbz	r2, 800aa8a <_printf_common+0x26>
 800aa86:	3301      	adds	r3, #1
 800aa88:	6033      	str	r3, [r6, #0]
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	0699      	lsls	r1, r3, #26
 800aa8e:	bf42      	ittt	mi
 800aa90:	6833      	ldrmi	r3, [r6, #0]
 800aa92:	3302      	addmi	r3, #2
 800aa94:	6033      	strmi	r3, [r6, #0]
 800aa96:	6825      	ldr	r5, [r4, #0]
 800aa98:	f015 0506 	ands.w	r5, r5, #6
 800aa9c:	d106      	bne.n	800aaac <_printf_common+0x48>
 800aa9e:	f104 0a19 	add.w	sl, r4, #25
 800aaa2:	68e3      	ldr	r3, [r4, #12]
 800aaa4:	6832      	ldr	r2, [r6, #0]
 800aaa6:	1a9b      	subs	r3, r3, r2
 800aaa8:	42ab      	cmp	r3, r5
 800aaaa:	dc26      	bgt.n	800aafa <_printf_common+0x96>
 800aaac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aab0:	6822      	ldr	r2, [r4, #0]
 800aab2:	3b00      	subs	r3, #0
 800aab4:	bf18      	it	ne
 800aab6:	2301      	movne	r3, #1
 800aab8:	0692      	lsls	r2, r2, #26
 800aaba:	d42b      	bmi.n	800ab14 <_printf_common+0xb0>
 800aabc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aac0:	4641      	mov	r1, r8
 800aac2:	4638      	mov	r0, r7
 800aac4:	47c8      	blx	r9
 800aac6:	3001      	adds	r0, #1
 800aac8:	d01e      	beq.n	800ab08 <_printf_common+0xa4>
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	6922      	ldr	r2, [r4, #16]
 800aace:	f003 0306 	and.w	r3, r3, #6
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	bf02      	ittt	eq
 800aad6:	68e5      	ldreq	r5, [r4, #12]
 800aad8:	6833      	ldreq	r3, [r6, #0]
 800aada:	1aed      	subeq	r5, r5, r3
 800aadc:	68a3      	ldr	r3, [r4, #8]
 800aade:	bf0c      	ite	eq
 800aae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aae4:	2500      	movne	r5, #0
 800aae6:	4293      	cmp	r3, r2
 800aae8:	bfc4      	itt	gt
 800aaea:	1a9b      	subgt	r3, r3, r2
 800aaec:	18ed      	addgt	r5, r5, r3
 800aaee:	2600      	movs	r6, #0
 800aaf0:	341a      	adds	r4, #26
 800aaf2:	42b5      	cmp	r5, r6
 800aaf4:	d11a      	bne.n	800ab2c <_printf_common+0xc8>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e008      	b.n	800ab0c <_printf_common+0xa8>
 800aafa:	2301      	movs	r3, #1
 800aafc:	4652      	mov	r2, sl
 800aafe:	4641      	mov	r1, r8
 800ab00:	4638      	mov	r0, r7
 800ab02:	47c8      	blx	r9
 800ab04:	3001      	adds	r0, #1
 800ab06:	d103      	bne.n	800ab10 <_printf_common+0xac>
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab10:	3501      	adds	r5, #1
 800ab12:	e7c6      	b.n	800aaa2 <_printf_common+0x3e>
 800ab14:	18e1      	adds	r1, r4, r3
 800ab16:	1c5a      	adds	r2, r3, #1
 800ab18:	2030      	movs	r0, #48	@ 0x30
 800ab1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab1e:	4422      	add	r2, r4
 800ab20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab28:	3302      	adds	r3, #2
 800ab2a:	e7c7      	b.n	800aabc <_printf_common+0x58>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	4622      	mov	r2, r4
 800ab30:	4641      	mov	r1, r8
 800ab32:	4638      	mov	r0, r7
 800ab34:	47c8      	blx	r9
 800ab36:	3001      	adds	r0, #1
 800ab38:	d0e6      	beq.n	800ab08 <_printf_common+0xa4>
 800ab3a:	3601      	adds	r6, #1
 800ab3c:	e7d9      	b.n	800aaf2 <_printf_common+0x8e>
	...

0800ab40 <_printf_i>:
 800ab40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab44:	7e0f      	ldrb	r7, [r1, #24]
 800ab46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab48:	2f78      	cmp	r7, #120	@ 0x78
 800ab4a:	4691      	mov	r9, r2
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	469a      	mov	sl, r3
 800ab52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab56:	d807      	bhi.n	800ab68 <_printf_i+0x28>
 800ab58:	2f62      	cmp	r7, #98	@ 0x62
 800ab5a:	d80a      	bhi.n	800ab72 <_printf_i+0x32>
 800ab5c:	2f00      	cmp	r7, #0
 800ab5e:	f000 80d2 	beq.w	800ad06 <_printf_i+0x1c6>
 800ab62:	2f58      	cmp	r7, #88	@ 0x58
 800ab64:	f000 80b9 	beq.w	800acda <_printf_i+0x19a>
 800ab68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab70:	e03a      	b.n	800abe8 <_printf_i+0xa8>
 800ab72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab76:	2b15      	cmp	r3, #21
 800ab78:	d8f6      	bhi.n	800ab68 <_printf_i+0x28>
 800ab7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ab80 <_printf_i+0x40>)
 800ab7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab80:	0800abd9 	.word	0x0800abd9
 800ab84:	0800abed 	.word	0x0800abed
 800ab88:	0800ab69 	.word	0x0800ab69
 800ab8c:	0800ab69 	.word	0x0800ab69
 800ab90:	0800ab69 	.word	0x0800ab69
 800ab94:	0800ab69 	.word	0x0800ab69
 800ab98:	0800abed 	.word	0x0800abed
 800ab9c:	0800ab69 	.word	0x0800ab69
 800aba0:	0800ab69 	.word	0x0800ab69
 800aba4:	0800ab69 	.word	0x0800ab69
 800aba8:	0800ab69 	.word	0x0800ab69
 800abac:	0800aced 	.word	0x0800aced
 800abb0:	0800ac17 	.word	0x0800ac17
 800abb4:	0800aca7 	.word	0x0800aca7
 800abb8:	0800ab69 	.word	0x0800ab69
 800abbc:	0800ab69 	.word	0x0800ab69
 800abc0:	0800ad0f 	.word	0x0800ad0f
 800abc4:	0800ab69 	.word	0x0800ab69
 800abc8:	0800ac17 	.word	0x0800ac17
 800abcc:	0800ab69 	.word	0x0800ab69
 800abd0:	0800ab69 	.word	0x0800ab69
 800abd4:	0800acaf 	.word	0x0800acaf
 800abd8:	6833      	ldr	r3, [r6, #0]
 800abda:	1d1a      	adds	r2, r3, #4
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6032      	str	r2, [r6, #0]
 800abe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abe8:	2301      	movs	r3, #1
 800abea:	e09d      	b.n	800ad28 <_printf_i+0x1e8>
 800abec:	6833      	ldr	r3, [r6, #0]
 800abee:	6820      	ldr	r0, [r4, #0]
 800abf0:	1d19      	adds	r1, r3, #4
 800abf2:	6031      	str	r1, [r6, #0]
 800abf4:	0606      	lsls	r6, r0, #24
 800abf6:	d501      	bpl.n	800abfc <_printf_i+0xbc>
 800abf8:	681d      	ldr	r5, [r3, #0]
 800abfa:	e003      	b.n	800ac04 <_printf_i+0xc4>
 800abfc:	0645      	lsls	r5, r0, #25
 800abfe:	d5fb      	bpl.n	800abf8 <_printf_i+0xb8>
 800ac00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac04:	2d00      	cmp	r5, #0
 800ac06:	da03      	bge.n	800ac10 <_printf_i+0xd0>
 800ac08:	232d      	movs	r3, #45	@ 0x2d
 800ac0a:	426d      	negs	r5, r5
 800ac0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac10:	4859      	ldr	r0, [pc, #356]	@ (800ad78 <_printf_i+0x238>)
 800ac12:	230a      	movs	r3, #10
 800ac14:	e011      	b.n	800ac3a <_printf_i+0xfa>
 800ac16:	6821      	ldr	r1, [r4, #0]
 800ac18:	6833      	ldr	r3, [r6, #0]
 800ac1a:	0608      	lsls	r0, r1, #24
 800ac1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac20:	d402      	bmi.n	800ac28 <_printf_i+0xe8>
 800ac22:	0649      	lsls	r1, r1, #25
 800ac24:	bf48      	it	mi
 800ac26:	b2ad      	uxthmi	r5, r5
 800ac28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac2a:	4853      	ldr	r0, [pc, #332]	@ (800ad78 <_printf_i+0x238>)
 800ac2c:	6033      	str	r3, [r6, #0]
 800ac2e:	bf14      	ite	ne
 800ac30:	230a      	movne	r3, #10
 800ac32:	2308      	moveq	r3, #8
 800ac34:	2100      	movs	r1, #0
 800ac36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac3a:	6866      	ldr	r6, [r4, #4]
 800ac3c:	60a6      	str	r6, [r4, #8]
 800ac3e:	2e00      	cmp	r6, #0
 800ac40:	bfa2      	ittt	ge
 800ac42:	6821      	ldrge	r1, [r4, #0]
 800ac44:	f021 0104 	bicge.w	r1, r1, #4
 800ac48:	6021      	strge	r1, [r4, #0]
 800ac4a:	b90d      	cbnz	r5, 800ac50 <_printf_i+0x110>
 800ac4c:	2e00      	cmp	r6, #0
 800ac4e:	d04b      	beq.n	800ace8 <_printf_i+0x1a8>
 800ac50:	4616      	mov	r6, r2
 800ac52:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac56:	fb03 5711 	mls	r7, r3, r1, r5
 800ac5a:	5dc7      	ldrb	r7, [r0, r7]
 800ac5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac60:	462f      	mov	r7, r5
 800ac62:	42bb      	cmp	r3, r7
 800ac64:	460d      	mov	r5, r1
 800ac66:	d9f4      	bls.n	800ac52 <_printf_i+0x112>
 800ac68:	2b08      	cmp	r3, #8
 800ac6a:	d10b      	bne.n	800ac84 <_printf_i+0x144>
 800ac6c:	6823      	ldr	r3, [r4, #0]
 800ac6e:	07df      	lsls	r7, r3, #31
 800ac70:	d508      	bpl.n	800ac84 <_printf_i+0x144>
 800ac72:	6923      	ldr	r3, [r4, #16]
 800ac74:	6861      	ldr	r1, [r4, #4]
 800ac76:	4299      	cmp	r1, r3
 800ac78:	bfde      	ittt	le
 800ac7a:	2330      	movle	r3, #48	@ 0x30
 800ac7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac80:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac84:	1b92      	subs	r2, r2, r6
 800ac86:	6122      	str	r2, [r4, #16]
 800ac88:	f8cd a000 	str.w	sl, [sp]
 800ac8c:	464b      	mov	r3, r9
 800ac8e:	aa03      	add	r2, sp, #12
 800ac90:	4621      	mov	r1, r4
 800ac92:	4640      	mov	r0, r8
 800ac94:	f7ff fee6 	bl	800aa64 <_printf_common>
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d14a      	bne.n	800ad32 <_printf_i+0x1f2>
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	b004      	add	sp, #16
 800aca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	f043 0320 	orr.w	r3, r3, #32
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	4833      	ldr	r0, [pc, #204]	@ (800ad7c <_printf_i+0x23c>)
 800acb0:	2778      	movs	r7, #120	@ 0x78
 800acb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	6831      	ldr	r1, [r6, #0]
 800acba:	061f      	lsls	r7, r3, #24
 800acbc:	f851 5b04 	ldr.w	r5, [r1], #4
 800acc0:	d402      	bmi.n	800acc8 <_printf_i+0x188>
 800acc2:	065f      	lsls	r7, r3, #25
 800acc4:	bf48      	it	mi
 800acc6:	b2ad      	uxthmi	r5, r5
 800acc8:	6031      	str	r1, [r6, #0]
 800acca:	07d9      	lsls	r1, r3, #31
 800accc:	bf44      	itt	mi
 800acce:	f043 0320 	orrmi.w	r3, r3, #32
 800acd2:	6023      	strmi	r3, [r4, #0]
 800acd4:	b11d      	cbz	r5, 800acde <_printf_i+0x19e>
 800acd6:	2310      	movs	r3, #16
 800acd8:	e7ac      	b.n	800ac34 <_printf_i+0xf4>
 800acda:	4827      	ldr	r0, [pc, #156]	@ (800ad78 <_printf_i+0x238>)
 800acdc:	e7e9      	b.n	800acb2 <_printf_i+0x172>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	f023 0320 	bic.w	r3, r3, #32
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	e7f6      	b.n	800acd6 <_printf_i+0x196>
 800ace8:	4616      	mov	r6, r2
 800acea:	e7bd      	b.n	800ac68 <_printf_i+0x128>
 800acec:	6833      	ldr	r3, [r6, #0]
 800acee:	6825      	ldr	r5, [r4, #0]
 800acf0:	6961      	ldr	r1, [r4, #20]
 800acf2:	1d18      	adds	r0, r3, #4
 800acf4:	6030      	str	r0, [r6, #0]
 800acf6:	062e      	lsls	r6, r5, #24
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	d501      	bpl.n	800ad00 <_printf_i+0x1c0>
 800acfc:	6019      	str	r1, [r3, #0]
 800acfe:	e002      	b.n	800ad06 <_printf_i+0x1c6>
 800ad00:	0668      	lsls	r0, r5, #25
 800ad02:	d5fb      	bpl.n	800acfc <_printf_i+0x1bc>
 800ad04:	8019      	strh	r1, [r3, #0]
 800ad06:	2300      	movs	r3, #0
 800ad08:	6123      	str	r3, [r4, #16]
 800ad0a:	4616      	mov	r6, r2
 800ad0c:	e7bc      	b.n	800ac88 <_printf_i+0x148>
 800ad0e:	6833      	ldr	r3, [r6, #0]
 800ad10:	1d1a      	adds	r2, r3, #4
 800ad12:	6032      	str	r2, [r6, #0]
 800ad14:	681e      	ldr	r6, [r3, #0]
 800ad16:	6862      	ldr	r2, [r4, #4]
 800ad18:	2100      	movs	r1, #0
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7f5 fad8 	bl	80002d0 <memchr>
 800ad20:	b108      	cbz	r0, 800ad26 <_printf_i+0x1e6>
 800ad22:	1b80      	subs	r0, r0, r6
 800ad24:	6060      	str	r0, [r4, #4]
 800ad26:	6863      	ldr	r3, [r4, #4]
 800ad28:	6123      	str	r3, [r4, #16]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad30:	e7aa      	b.n	800ac88 <_printf_i+0x148>
 800ad32:	6923      	ldr	r3, [r4, #16]
 800ad34:	4632      	mov	r2, r6
 800ad36:	4649      	mov	r1, r9
 800ad38:	4640      	mov	r0, r8
 800ad3a:	47d0      	blx	sl
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d0ad      	beq.n	800ac9c <_printf_i+0x15c>
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	079b      	lsls	r3, r3, #30
 800ad44:	d413      	bmi.n	800ad6e <_printf_i+0x22e>
 800ad46:	68e0      	ldr	r0, [r4, #12]
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	4298      	cmp	r0, r3
 800ad4c:	bfb8      	it	lt
 800ad4e:	4618      	movlt	r0, r3
 800ad50:	e7a6      	b.n	800aca0 <_printf_i+0x160>
 800ad52:	2301      	movs	r3, #1
 800ad54:	4632      	mov	r2, r6
 800ad56:	4649      	mov	r1, r9
 800ad58:	4640      	mov	r0, r8
 800ad5a:	47d0      	blx	sl
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d09d      	beq.n	800ac9c <_printf_i+0x15c>
 800ad60:	3501      	adds	r5, #1
 800ad62:	68e3      	ldr	r3, [r4, #12]
 800ad64:	9903      	ldr	r1, [sp, #12]
 800ad66:	1a5b      	subs	r3, r3, r1
 800ad68:	42ab      	cmp	r3, r5
 800ad6a:	dcf2      	bgt.n	800ad52 <_printf_i+0x212>
 800ad6c:	e7eb      	b.n	800ad46 <_printf_i+0x206>
 800ad6e:	2500      	movs	r5, #0
 800ad70:	f104 0619 	add.w	r6, r4, #25
 800ad74:	e7f5      	b.n	800ad62 <_printf_i+0x222>
 800ad76:	bf00      	nop
 800ad78:	08020fc6 	.word	0x08020fc6
 800ad7c:	08020fd7 	.word	0x08020fd7

0800ad80 <std>:
 800ad80:	2300      	movs	r3, #0
 800ad82:	b510      	push	{r4, lr}
 800ad84:	4604      	mov	r4, r0
 800ad86:	e9c0 3300 	strd	r3, r3, [r0]
 800ad8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad8e:	6083      	str	r3, [r0, #8]
 800ad90:	8181      	strh	r1, [r0, #12]
 800ad92:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad94:	81c2      	strh	r2, [r0, #14]
 800ad96:	6183      	str	r3, [r0, #24]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	2208      	movs	r2, #8
 800ad9c:	305c      	adds	r0, #92	@ 0x5c
 800ad9e:	f000 f924 	bl	800afea <memset>
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <std+0x58>)
 800ada4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ada6:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <std+0x5c>)
 800ada8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800adaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ade0 <std+0x60>)
 800adac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800adae:	4b0d      	ldr	r3, [pc, #52]	@ (800ade4 <std+0x64>)
 800adb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800adb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ade8 <std+0x68>)
 800adb4:	6224      	str	r4, [r4, #32]
 800adb6:	429c      	cmp	r4, r3
 800adb8:	d006      	beq.n	800adc8 <std+0x48>
 800adba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800adbe:	4294      	cmp	r4, r2
 800adc0:	d002      	beq.n	800adc8 <std+0x48>
 800adc2:	33d0      	adds	r3, #208	@ 0xd0
 800adc4:	429c      	cmp	r4, r3
 800adc6:	d105      	bne.n	800add4 <std+0x54>
 800adc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add0:	f000 b988 	b.w	800b0e4 <__retarget_lock_init_recursive>
 800add4:	bd10      	pop	{r4, pc}
 800add6:	bf00      	nop
 800add8:	0800af45 	.word	0x0800af45
 800addc:	0800af67 	.word	0x0800af67
 800ade0:	0800af9f 	.word	0x0800af9f
 800ade4:	0800afc3 	.word	0x0800afc3
 800ade8:	2001dd2c 	.word	0x2001dd2c

0800adec <stdio_exit_handler>:
 800adec:	4a02      	ldr	r2, [pc, #8]	@ (800adf8 <stdio_exit_handler+0xc>)
 800adee:	4903      	ldr	r1, [pc, #12]	@ (800adfc <stdio_exit_handler+0x10>)
 800adf0:	4803      	ldr	r0, [pc, #12]	@ (800ae00 <stdio_exit_handler+0x14>)
 800adf2:	f000 b869 	b.w	800aec8 <_fwalk_sglue>
 800adf6:	bf00      	nop
 800adf8:	2000000c 	.word	0x2000000c
 800adfc:	0800ca45 	.word	0x0800ca45
 800ae00:	2000001c 	.word	0x2000001c

0800ae04 <cleanup_stdio>:
 800ae04:	6841      	ldr	r1, [r0, #4]
 800ae06:	4b0c      	ldr	r3, [pc, #48]	@ (800ae38 <cleanup_stdio+0x34>)
 800ae08:	4299      	cmp	r1, r3
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	d001      	beq.n	800ae14 <cleanup_stdio+0x10>
 800ae10:	f001 fe18 	bl	800ca44 <_fflush_r>
 800ae14:	68a1      	ldr	r1, [r4, #8]
 800ae16:	4b09      	ldr	r3, [pc, #36]	@ (800ae3c <cleanup_stdio+0x38>)
 800ae18:	4299      	cmp	r1, r3
 800ae1a:	d002      	beq.n	800ae22 <cleanup_stdio+0x1e>
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f001 fe11 	bl	800ca44 <_fflush_r>
 800ae22:	68e1      	ldr	r1, [r4, #12]
 800ae24:	4b06      	ldr	r3, [pc, #24]	@ (800ae40 <cleanup_stdio+0x3c>)
 800ae26:	4299      	cmp	r1, r3
 800ae28:	d004      	beq.n	800ae34 <cleanup_stdio+0x30>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae30:	f001 be08 	b.w	800ca44 <_fflush_r>
 800ae34:	bd10      	pop	{r4, pc}
 800ae36:	bf00      	nop
 800ae38:	2001dd2c 	.word	0x2001dd2c
 800ae3c:	2001dd94 	.word	0x2001dd94
 800ae40:	2001ddfc 	.word	0x2001ddfc

0800ae44 <global_stdio_init.part.0>:
 800ae44:	b510      	push	{r4, lr}
 800ae46:	4b0b      	ldr	r3, [pc, #44]	@ (800ae74 <global_stdio_init.part.0+0x30>)
 800ae48:	4c0b      	ldr	r4, [pc, #44]	@ (800ae78 <global_stdio_init.part.0+0x34>)
 800ae4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ae7c <global_stdio_init.part.0+0x38>)
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	4620      	mov	r0, r4
 800ae50:	2200      	movs	r2, #0
 800ae52:	2104      	movs	r1, #4
 800ae54:	f7ff ff94 	bl	800ad80 <std>
 800ae58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	2109      	movs	r1, #9
 800ae60:	f7ff ff8e 	bl	800ad80 <std>
 800ae64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae68:	2202      	movs	r2, #2
 800ae6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae6e:	2112      	movs	r1, #18
 800ae70:	f7ff bf86 	b.w	800ad80 <std>
 800ae74:	2001de64 	.word	0x2001de64
 800ae78:	2001dd2c 	.word	0x2001dd2c
 800ae7c:	0800aded 	.word	0x0800aded

0800ae80 <__sfp_lock_acquire>:
 800ae80:	4801      	ldr	r0, [pc, #4]	@ (800ae88 <__sfp_lock_acquire+0x8>)
 800ae82:	f000 b930 	b.w	800b0e6 <__retarget_lock_acquire_recursive>
 800ae86:	bf00      	nop
 800ae88:	2001de6d 	.word	0x2001de6d

0800ae8c <__sfp_lock_release>:
 800ae8c:	4801      	ldr	r0, [pc, #4]	@ (800ae94 <__sfp_lock_release+0x8>)
 800ae8e:	f000 b92b 	b.w	800b0e8 <__retarget_lock_release_recursive>
 800ae92:	bf00      	nop
 800ae94:	2001de6d 	.word	0x2001de6d

0800ae98 <__sinit>:
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	f7ff fff0 	bl	800ae80 <__sfp_lock_acquire>
 800aea0:	6a23      	ldr	r3, [r4, #32]
 800aea2:	b11b      	cbz	r3, 800aeac <__sinit+0x14>
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	f7ff bff0 	b.w	800ae8c <__sfp_lock_release>
 800aeac:	4b04      	ldr	r3, [pc, #16]	@ (800aec0 <__sinit+0x28>)
 800aeae:	6223      	str	r3, [r4, #32]
 800aeb0:	4b04      	ldr	r3, [pc, #16]	@ (800aec4 <__sinit+0x2c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1f5      	bne.n	800aea4 <__sinit+0xc>
 800aeb8:	f7ff ffc4 	bl	800ae44 <global_stdio_init.part.0>
 800aebc:	e7f2      	b.n	800aea4 <__sinit+0xc>
 800aebe:	bf00      	nop
 800aec0:	0800ae05 	.word	0x0800ae05
 800aec4:	2001de64 	.word	0x2001de64

0800aec8 <_fwalk_sglue>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	4607      	mov	r7, r0
 800aece:	4688      	mov	r8, r1
 800aed0:	4614      	mov	r4, r2
 800aed2:	2600      	movs	r6, #0
 800aed4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aed8:	f1b9 0901 	subs.w	r9, r9, #1
 800aedc:	d505      	bpl.n	800aeea <_fwalk_sglue+0x22>
 800aede:	6824      	ldr	r4, [r4, #0]
 800aee0:	2c00      	cmp	r4, #0
 800aee2:	d1f7      	bne.n	800aed4 <_fwalk_sglue+0xc>
 800aee4:	4630      	mov	r0, r6
 800aee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d907      	bls.n	800af00 <_fwalk_sglue+0x38>
 800aef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aef4:	3301      	adds	r3, #1
 800aef6:	d003      	beq.n	800af00 <_fwalk_sglue+0x38>
 800aef8:	4629      	mov	r1, r5
 800aefa:	4638      	mov	r0, r7
 800aefc:	47c0      	blx	r8
 800aefe:	4306      	orrs	r6, r0
 800af00:	3568      	adds	r5, #104	@ 0x68
 800af02:	e7e9      	b.n	800aed8 <_fwalk_sglue+0x10>

0800af04 <siprintf>:
 800af04:	b40e      	push	{r1, r2, r3}
 800af06:	b500      	push	{lr}
 800af08:	b09c      	sub	sp, #112	@ 0x70
 800af0a:	ab1d      	add	r3, sp, #116	@ 0x74
 800af0c:	9002      	str	r0, [sp, #8]
 800af0e:	9006      	str	r0, [sp, #24]
 800af10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af14:	4809      	ldr	r0, [pc, #36]	@ (800af3c <siprintf+0x38>)
 800af16:	9107      	str	r1, [sp, #28]
 800af18:	9104      	str	r1, [sp, #16]
 800af1a:	4909      	ldr	r1, [pc, #36]	@ (800af40 <siprintf+0x3c>)
 800af1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af20:	9105      	str	r1, [sp, #20]
 800af22:	6800      	ldr	r0, [r0, #0]
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	a902      	add	r1, sp, #8
 800af28:	f001 fc0c 	bl	800c744 <_svfiprintf_r>
 800af2c:	9b02      	ldr	r3, [sp, #8]
 800af2e:	2200      	movs	r2, #0
 800af30:	701a      	strb	r2, [r3, #0]
 800af32:	b01c      	add	sp, #112	@ 0x70
 800af34:	f85d eb04 	ldr.w	lr, [sp], #4
 800af38:	b003      	add	sp, #12
 800af3a:	4770      	bx	lr
 800af3c:	20000018 	.word	0x20000018
 800af40:	ffff0208 	.word	0xffff0208

0800af44 <__sread>:
 800af44:	b510      	push	{r4, lr}
 800af46:	460c      	mov	r4, r1
 800af48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af4c:	f000 f87c 	bl	800b048 <_read_r>
 800af50:	2800      	cmp	r0, #0
 800af52:	bfab      	itete	ge
 800af54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af56:	89a3      	ldrhlt	r3, [r4, #12]
 800af58:	181b      	addge	r3, r3, r0
 800af5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af5e:	bfac      	ite	ge
 800af60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af62:	81a3      	strhlt	r3, [r4, #12]
 800af64:	bd10      	pop	{r4, pc}

0800af66 <__swrite>:
 800af66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6a:	461f      	mov	r7, r3
 800af6c:	898b      	ldrh	r3, [r1, #12]
 800af6e:	05db      	lsls	r3, r3, #23
 800af70:	4605      	mov	r5, r0
 800af72:	460c      	mov	r4, r1
 800af74:	4616      	mov	r6, r2
 800af76:	d505      	bpl.n	800af84 <__swrite+0x1e>
 800af78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af7c:	2302      	movs	r3, #2
 800af7e:	2200      	movs	r2, #0
 800af80:	f000 f850 	bl	800b024 <_lseek_r>
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af8e:	81a3      	strh	r3, [r4, #12]
 800af90:	4632      	mov	r2, r6
 800af92:	463b      	mov	r3, r7
 800af94:	4628      	mov	r0, r5
 800af96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af9a:	f000 b867 	b.w	800b06c <_write_r>

0800af9e <__sseek>:
 800af9e:	b510      	push	{r4, lr}
 800afa0:	460c      	mov	r4, r1
 800afa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa6:	f000 f83d 	bl	800b024 <_lseek_r>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	bf15      	itete	ne
 800afb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800afb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800afb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800afba:	81a3      	strheq	r3, [r4, #12]
 800afbc:	bf18      	it	ne
 800afbe:	81a3      	strhne	r3, [r4, #12]
 800afc0:	bd10      	pop	{r4, pc}

0800afc2 <__sclose>:
 800afc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc6:	f000 b81d 	b.w	800b004 <_close_r>

0800afca <memcmp>:
 800afca:	b510      	push	{r4, lr}
 800afcc:	3901      	subs	r1, #1
 800afce:	4402      	add	r2, r0
 800afd0:	4290      	cmp	r0, r2
 800afd2:	d101      	bne.n	800afd8 <memcmp+0xe>
 800afd4:	2000      	movs	r0, #0
 800afd6:	e005      	b.n	800afe4 <memcmp+0x1a>
 800afd8:	7803      	ldrb	r3, [r0, #0]
 800afda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800afde:	42a3      	cmp	r3, r4
 800afe0:	d001      	beq.n	800afe6 <memcmp+0x1c>
 800afe2:	1b18      	subs	r0, r3, r4
 800afe4:	bd10      	pop	{r4, pc}
 800afe6:	3001      	adds	r0, #1
 800afe8:	e7f2      	b.n	800afd0 <memcmp+0x6>

0800afea <memset>:
 800afea:	4402      	add	r2, r0
 800afec:	4603      	mov	r3, r0
 800afee:	4293      	cmp	r3, r2
 800aff0:	d100      	bne.n	800aff4 <memset+0xa>
 800aff2:	4770      	bx	lr
 800aff4:	f803 1b01 	strb.w	r1, [r3], #1
 800aff8:	e7f9      	b.n	800afee <memset+0x4>
	...

0800affc <_localeconv_r>:
 800affc:	4800      	ldr	r0, [pc, #0]	@ (800b000 <_localeconv_r+0x4>)
 800affe:	4770      	bx	lr
 800b000:	20000158 	.word	0x20000158

0800b004 <_close_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d06      	ldr	r5, [pc, #24]	@ (800b020 <_close_r+0x1c>)
 800b008:	2300      	movs	r3, #0
 800b00a:	4604      	mov	r4, r0
 800b00c:	4608      	mov	r0, r1
 800b00e:	602b      	str	r3, [r5, #0]
 800b010:	f7f7 ff4a 	bl	8002ea8 <_close>
 800b014:	1c43      	adds	r3, r0, #1
 800b016:	d102      	bne.n	800b01e <_close_r+0x1a>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	b103      	cbz	r3, 800b01e <_close_r+0x1a>
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	bd38      	pop	{r3, r4, r5, pc}
 800b020:	2001de68 	.word	0x2001de68

0800b024 <_lseek_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4d07      	ldr	r5, [pc, #28]	@ (800b044 <_lseek_r+0x20>)
 800b028:	4604      	mov	r4, r0
 800b02a:	4608      	mov	r0, r1
 800b02c:	4611      	mov	r1, r2
 800b02e:	2200      	movs	r2, #0
 800b030:	602a      	str	r2, [r5, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	f7f7 ff5f 	bl	8002ef6 <_lseek>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d102      	bne.n	800b042 <_lseek_r+0x1e>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	b103      	cbz	r3, 800b042 <_lseek_r+0x1e>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	2001de68 	.word	0x2001de68

0800b048 <_read_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d07      	ldr	r5, [pc, #28]	@ (800b068 <_read_r+0x20>)
 800b04c:	4604      	mov	r4, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	2200      	movs	r2, #0
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f7 feed 	bl	8002e36 <_read>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_read_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_read_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	2001de68 	.word	0x2001de68

0800b06c <_write_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4d07      	ldr	r5, [pc, #28]	@ (800b08c <_write_r+0x20>)
 800b070:	4604      	mov	r4, r0
 800b072:	4608      	mov	r0, r1
 800b074:	4611      	mov	r1, r2
 800b076:	2200      	movs	r2, #0
 800b078:	602a      	str	r2, [r5, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f7f7 fef8 	bl	8002e70 <_write>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_write_r+0x1e>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_write_r+0x1e>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	2001de68 	.word	0x2001de68

0800b090 <__errno>:
 800b090:	4b01      	ldr	r3, [pc, #4]	@ (800b098 <__errno+0x8>)
 800b092:	6818      	ldr	r0, [r3, #0]
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	20000018 	.word	0x20000018

0800b09c <__libc_init_array>:
 800b09c:	b570      	push	{r4, r5, r6, lr}
 800b09e:	4d0d      	ldr	r5, [pc, #52]	@ (800b0d4 <__libc_init_array+0x38>)
 800b0a0:	4c0d      	ldr	r4, [pc, #52]	@ (800b0d8 <__libc_init_array+0x3c>)
 800b0a2:	1b64      	subs	r4, r4, r5
 800b0a4:	10a4      	asrs	r4, r4, #2
 800b0a6:	2600      	movs	r6, #0
 800b0a8:	42a6      	cmp	r6, r4
 800b0aa:	d109      	bne.n	800b0c0 <__libc_init_array+0x24>
 800b0ac:	4d0b      	ldr	r5, [pc, #44]	@ (800b0dc <__libc_init_array+0x40>)
 800b0ae:	4c0c      	ldr	r4, [pc, #48]	@ (800b0e0 <__libc_init_array+0x44>)
 800b0b0:	f002 fc56 	bl	800d960 <_init>
 800b0b4:	1b64      	subs	r4, r4, r5
 800b0b6:	10a4      	asrs	r4, r4, #2
 800b0b8:	2600      	movs	r6, #0
 800b0ba:	42a6      	cmp	r6, r4
 800b0bc:	d105      	bne.n	800b0ca <__libc_init_array+0x2e>
 800b0be:	bd70      	pop	{r4, r5, r6, pc}
 800b0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0c4:	4798      	blx	r3
 800b0c6:	3601      	adds	r6, #1
 800b0c8:	e7ee      	b.n	800b0a8 <__libc_init_array+0xc>
 800b0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ce:	4798      	blx	r3
 800b0d0:	3601      	adds	r6, #1
 800b0d2:	e7f2      	b.n	800b0ba <__libc_init_array+0x1e>
 800b0d4:	08021370 	.word	0x08021370
 800b0d8:	08021370 	.word	0x08021370
 800b0dc:	08021370 	.word	0x08021370
 800b0e0:	08021374 	.word	0x08021374

0800b0e4 <__retarget_lock_init_recursive>:
 800b0e4:	4770      	bx	lr

0800b0e6 <__retarget_lock_acquire_recursive>:
 800b0e6:	4770      	bx	lr

0800b0e8 <__retarget_lock_release_recursive>:
 800b0e8:	4770      	bx	lr

0800b0ea <quorem>:
 800b0ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ee:	6903      	ldr	r3, [r0, #16]
 800b0f0:	690c      	ldr	r4, [r1, #16]
 800b0f2:	42a3      	cmp	r3, r4
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	db7e      	blt.n	800b1f6 <quorem+0x10c>
 800b0f8:	3c01      	subs	r4, #1
 800b0fa:	f101 0814 	add.w	r8, r1, #20
 800b0fe:	00a3      	lsls	r3, r4, #2
 800b100:	f100 0514 	add.w	r5, r0, #20
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b114:	3301      	adds	r3, #1
 800b116:	429a      	cmp	r2, r3
 800b118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b11c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b120:	d32e      	bcc.n	800b180 <quorem+0x96>
 800b122:	f04f 0a00 	mov.w	sl, #0
 800b126:	46c4      	mov	ip, r8
 800b128:	46ae      	mov	lr, r5
 800b12a:	46d3      	mov	fp, sl
 800b12c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b130:	b298      	uxth	r0, r3
 800b132:	fb06 a000 	mla	r0, r6, r0, sl
 800b136:	0c02      	lsrs	r2, r0, #16
 800b138:	0c1b      	lsrs	r3, r3, #16
 800b13a:	fb06 2303 	mla	r3, r6, r3, r2
 800b13e:	f8de 2000 	ldr.w	r2, [lr]
 800b142:	b280      	uxth	r0, r0
 800b144:	b292      	uxth	r2, r2
 800b146:	1a12      	subs	r2, r2, r0
 800b148:	445a      	add	r2, fp
 800b14a:	f8de 0000 	ldr.w	r0, [lr]
 800b14e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b152:	b29b      	uxth	r3, r3
 800b154:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b158:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b15c:	b292      	uxth	r2, r2
 800b15e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b162:	45e1      	cmp	r9, ip
 800b164:	f84e 2b04 	str.w	r2, [lr], #4
 800b168:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b16c:	d2de      	bcs.n	800b12c <quorem+0x42>
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	58eb      	ldr	r3, [r5, r3]
 800b172:	b92b      	cbnz	r3, 800b180 <quorem+0x96>
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	3b04      	subs	r3, #4
 800b178:	429d      	cmp	r5, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	d32f      	bcc.n	800b1de <quorem+0xf4>
 800b17e:	613c      	str	r4, [r7, #16]
 800b180:	4638      	mov	r0, r7
 800b182:	f001 f97b 	bl	800c47c <__mcmp>
 800b186:	2800      	cmp	r0, #0
 800b188:	db25      	blt.n	800b1d6 <quorem+0xec>
 800b18a:	4629      	mov	r1, r5
 800b18c:	2000      	movs	r0, #0
 800b18e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b192:	f8d1 c000 	ldr.w	ip, [r1]
 800b196:	fa1f fe82 	uxth.w	lr, r2
 800b19a:	fa1f f38c 	uxth.w	r3, ip
 800b19e:	eba3 030e 	sub.w	r3, r3, lr
 800b1a2:	4403      	add	r3, r0
 800b1a4:	0c12      	lsrs	r2, r2, #16
 800b1a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1b4:	45c1      	cmp	r9, r8
 800b1b6:	f841 3b04 	str.w	r3, [r1], #4
 800b1ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1be:	d2e6      	bcs.n	800b18e <quorem+0xa4>
 800b1c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1c8:	b922      	cbnz	r2, 800b1d4 <quorem+0xea>
 800b1ca:	3b04      	subs	r3, #4
 800b1cc:	429d      	cmp	r5, r3
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	d30b      	bcc.n	800b1ea <quorem+0x100>
 800b1d2:	613c      	str	r4, [r7, #16]
 800b1d4:	3601      	adds	r6, #1
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	b003      	add	sp, #12
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	3b04      	subs	r3, #4
 800b1e2:	2a00      	cmp	r2, #0
 800b1e4:	d1cb      	bne.n	800b17e <quorem+0x94>
 800b1e6:	3c01      	subs	r4, #1
 800b1e8:	e7c6      	b.n	800b178 <quorem+0x8e>
 800b1ea:	6812      	ldr	r2, [r2, #0]
 800b1ec:	3b04      	subs	r3, #4
 800b1ee:	2a00      	cmp	r2, #0
 800b1f0:	d1ef      	bne.n	800b1d2 <quorem+0xe8>
 800b1f2:	3c01      	subs	r4, #1
 800b1f4:	e7ea      	b.n	800b1cc <quorem+0xe2>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e7ee      	b.n	800b1d8 <quorem+0xee>
 800b1fa:	0000      	movs	r0, r0
 800b1fc:	0000      	movs	r0, r0
	...

0800b200 <_dtoa_r>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	69c7      	ldr	r7, [r0, #28]
 800b206:	b099      	sub	sp, #100	@ 0x64
 800b208:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b20c:	ec55 4b10 	vmov	r4, r5, d0
 800b210:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b212:	9109      	str	r1, [sp, #36]	@ 0x24
 800b214:	4683      	mov	fp, r0
 800b216:	920e      	str	r2, [sp, #56]	@ 0x38
 800b218:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b21a:	b97f      	cbnz	r7, 800b23c <_dtoa_r+0x3c>
 800b21c:	2010      	movs	r0, #16
 800b21e:	f000 fdfd 	bl	800be1c <malloc>
 800b222:	4602      	mov	r2, r0
 800b224:	f8cb 001c 	str.w	r0, [fp, #28]
 800b228:	b920      	cbnz	r0, 800b234 <_dtoa_r+0x34>
 800b22a:	4ba7      	ldr	r3, [pc, #668]	@ (800b4c8 <_dtoa_r+0x2c8>)
 800b22c:	21ef      	movs	r1, #239	@ 0xef
 800b22e:	48a7      	ldr	r0, [pc, #668]	@ (800b4cc <_dtoa_r+0x2cc>)
 800b230:	f001 fc68 	bl	800cb04 <__assert_func>
 800b234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b238:	6007      	str	r7, [r0, #0]
 800b23a:	60c7      	str	r7, [r0, #12]
 800b23c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b240:	6819      	ldr	r1, [r3, #0]
 800b242:	b159      	cbz	r1, 800b25c <_dtoa_r+0x5c>
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	604a      	str	r2, [r1, #4]
 800b248:	2301      	movs	r3, #1
 800b24a:	4093      	lsls	r3, r2
 800b24c:	608b      	str	r3, [r1, #8]
 800b24e:	4658      	mov	r0, fp
 800b250:	f000 feda 	bl	800c008 <_Bfree>
 800b254:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	1e2b      	subs	r3, r5, #0
 800b25e:	bfb9      	ittee	lt
 800b260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b264:	9303      	strlt	r3, [sp, #12]
 800b266:	2300      	movge	r3, #0
 800b268:	6033      	strge	r3, [r6, #0]
 800b26a:	9f03      	ldr	r7, [sp, #12]
 800b26c:	4b98      	ldr	r3, [pc, #608]	@ (800b4d0 <_dtoa_r+0x2d0>)
 800b26e:	bfbc      	itt	lt
 800b270:	2201      	movlt	r2, #1
 800b272:	6032      	strlt	r2, [r6, #0]
 800b274:	43bb      	bics	r3, r7
 800b276:	d112      	bne.n	800b29e <_dtoa_r+0x9e>
 800b278:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b27a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b284:	4323      	orrs	r3, r4
 800b286:	f000 854d 	beq.w	800bd24 <_dtoa_r+0xb24>
 800b28a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b28c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b4e4 <_dtoa_r+0x2e4>
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 854f 	beq.w	800bd34 <_dtoa_r+0xb34>
 800b296:	f10a 0303 	add.w	r3, sl, #3
 800b29a:	f000 bd49 	b.w	800bd30 <_dtoa_r+0xb30>
 800b29e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	ec51 0b17 	vmov	r0, r1, d7
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b2ae:	f7f5 fc8b 	bl	8000bc8 <__aeabi_dcmpeq>
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	b158      	cbz	r0, 800b2ce <_dtoa_r+0xce>
 800b2b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b2be:	b113      	cbz	r3, 800b2c6 <_dtoa_r+0xc6>
 800b2c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b2c2:	4b84      	ldr	r3, [pc, #528]	@ (800b4d4 <_dtoa_r+0x2d4>)
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b4e8 <_dtoa_r+0x2e8>
 800b2ca:	f000 bd33 	b.w	800bd34 <_dtoa_r+0xb34>
 800b2ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b2d2:	aa16      	add	r2, sp, #88	@ 0x58
 800b2d4:	a917      	add	r1, sp, #92	@ 0x5c
 800b2d6:	4658      	mov	r0, fp
 800b2d8:	f001 f980 	bl	800c5dc <__d2b>
 800b2dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	2e00      	cmp	r6, #0
 800b2e4:	d077      	beq.n	800b3d6 <_dtoa_r+0x1d6>
 800b2e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b300:	4619      	mov	r1, r3
 800b302:	2200      	movs	r2, #0
 800b304:	4b74      	ldr	r3, [pc, #464]	@ (800b4d8 <_dtoa_r+0x2d8>)
 800b306:	f7f5 f83f 	bl	8000388 <__aeabi_dsub>
 800b30a:	a369      	add	r3, pc, #420	@ (adr r3, 800b4b0 <_dtoa_r+0x2b0>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f7f5 f9f2 	bl	80006f8 <__aeabi_dmul>
 800b314:	a368      	add	r3, pc, #416	@ (adr r3, 800b4b8 <_dtoa_r+0x2b8>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f7f5 f837 	bl	800038c <__adddf3>
 800b31e:	4604      	mov	r4, r0
 800b320:	4630      	mov	r0, r6
 800b322:	460d      	mov	r5, r1
 800b324:	f7f5 f97e 	bl	8000624 <__aeabi_i2d>
 800b328:	a365      	add	r3, pc, #404	@ (adr r3, 800b4c0 <_dtoa_r+0x2c0>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	f7f5 f9e3 	bl	80006f8 <__aeabi_dmul>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4620      	mov	r0, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	f7f5 f827 	bl	800038c <__adddf3>
 800b33e:	4604      	mov	r4, r0
 800b340:	460d      	mov	r5, r1
 800b342:	f7f5 fc89 	bl	8000c58 <__aeabi_d2iz>
 800b346:	2200      	movs	r2, #0
 800b348:	4607      	mov	r7, r0
 800b34a:	2300      	movs	r3, #0
 800b34c:	4620      	mov	r0, r4
 800b34e:	4629      	mov	r1, r5
 800b350:	f7f5 fc44 	bl	8000bdc <__aeabi_dcmplt>
 800b354:	b140      	cbz	r0, 800b368 <_dtoa_r+0x168>
 800b356:	4638      	mov	r0, r7
 800b358:	f7f5 f964 	bl	8000624 <__aeabi_i2d>
 800b35c:	4622      	mov	r2, r4
 800b35e:	462b      	mov	r3, r5
 800b360:	f7f5 fc32 	bl	8000bc8 <__aeabi_dcmpeq>
 800b364:	b900      	cbnz	r0, 800b368 <_dtoa_r+0x168>
 800b366:	3f01      	subs	r7, #1
 800b368:	2f16      	cmp	r7, #22
 800b36a:	d851      	bhi.n	800b410 <_dtoa_r+0x210>
 800b36c:	4b5b      	ldr	r3, [pc, #364]	@ (800b4dc <_dtoa_r+0x2dc>)
 800b36e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b37a:	f7f5 fc2f 	bl	8000bdc <__aeabi_dcmplt>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d048      	beq.n	800b414 <_dtoa_r+0x214>
 800b382:	3f01      	subs	r7, #1
 800b384:	2300      	movs	r3, #0
 800b386:	9312      	str	r3, [sp, #72]	@ 0x48
 800b388:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b38a:	1b9b      	subs	r3, r3, r6
 800b38c:	1e5a      	subs	r2, r3, #1
 800b38e:	bf44      	itt	mi
 800b390:	f1c3 0801 	rsbmi	r8, r3, #1
 800b394:	2300      	movmi	r3, #0
 800b396:	9208      	str	r2, [sp, #32]
 800b398:	bf54      	ite	pl
 800b39a:	f04f 0800 	movpl.w	r8, #0
 800b39e:	9308      	strmi	r3, [sp, #32]
 800b3a0:	2f00      	cmp	r7, #0
 800b3a2:	db39      	blt.n	800b418 <_dtoa_r+0x218>
 800b3a4:	9b08      	ldr	r3, [sp, #32]
 800b3a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b3a8:	443b      	add	r3, r7
 800b3aa:	9308      	str	r3, [sp, #32]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3b2:	2b09      	cmp	r3, #9
 800b3b4:	d864      	bhi.n	800b480 <_dtoa_r+0x280>
 800b3b6:	2b05      	cmp	r3, #5
 800b3b8:	bfc4      	itt	gt
 800b3ba:	3b04      	subgt	r3, #4
 800b3bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c0:	f1a3 0302 	sub.w	r3, r3, #2
 800b3c4:	bfcc      	ite	gt
 800b3c6:	2400      	movgt	r4, #0
 800b3c8:	2401      	movle	r4, #1
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d863      	bhi.n	800b496 <_dtoa_r+0x296>
 800b3ce:	e8df f003 	tbb	[pc, r3]
 800b3d2:	372a      	.short	0x372a
 800b3d4:	5535      	.short	0x5535
 800b3d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b3da:	441e      	add	r6, r3
 800b3dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	bfc1      	itttt	gt
 800b3e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3e8:	409f      	lslgt	r7, r3
 800b3ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3f2:	bfd6      	itet	le
 800b3f4:	f1c3 0320 	rsble	r3, r3, #32
 800b3f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3fc:	fa04 f003 	lslle.w	r0, r4, r3
 800b400:	f7f5 f900 	bl	8000604 <__aeabi_ui2d>
 800b404:	2201      	movs	r2, #1
 800b406:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b40a:	3e01      	subs	r6, #1
 800b40c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b40e:	e777      	b.n	800b300 <_dtoa_r+0x100>
 800b410:	2301      	movs	r3, #1
 800b412:	e7b8      	b.n	800b386 <_dtoa_r+0x186>
 800b414:	9012      	str	r0, [sp, #72]	@ 0x48
 800b416:	e7b7      	b.n	800b388 <_dtoa_r+0x188>
 800b418:	427b      	negs	r3, r7
 800b41a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b41c:	2300      	movs	r3, #0
 800b41e:	eba8 0807 	sub.w	r8, r8, r7
 800b422:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b424:	e7c4      	b.n	800b3b0 <_dtoa_r+0x1b0>
 800b426:	2300      	movs	r3, #0
 800b428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	dc35      	bgt.n	800b49c <_dtoa_r+0x29c>
 800b430:	2301      	movs	r3, #1
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	9307      	str	r3, [sp, #28]
 800b436:	461a      	mov	r2, r3
 800b438:	920e      	str	r2, [sp, #56]	@ 0x38
 800b43a:	e00b      	b.n	800b454 <_dtoa_r+0x254>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e7f3      	b.n	800b428 <_dtoa_r+0x228>
 800b440:	2300      	movs	r3, #0
 800b442:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b446:	18fb      	adds	r3, r7, r3
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	3301      	adds	r3, #1
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	9307      	str	r3, [sp, #28]
 800b450:	bfb8      	it	lt
 800b452:	2301      	movlt	r3, #1
 800b454:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b458:	2100      	movs	r1, #0
 800b45a:	2204      	movs	r2, #4
 800b45c:	f102 0514 	add.w	r5, r2, #20
 800b460:	429d      	cmp	r5, r3
 800b462:	d91f      	bls.n	800b4a4 <_dtoa_r+0x2a4>
 800b464:	6041      	str	r1, [r0, #4]
 800b466:	4658      	mov	r0, fp
 800b468:	f000 fd8e 	bl	800bf88 <_Balloc>
 800b46c:	4682      	mov	sl, r0
 800b46e:	2800      	cmp	r0, #0
 800b470:	d13c      	bne.n	800b4ec <_dtoa_r+0x2ec>
 800b472:	4b1b      	ldr	r3, [pc, #108]	@ (800b4e0 <_dtoa_r+0x2e0>)
 800b474:	4602      	mov	r2, r0
 800b476:	f240 11af 	movw	r1, #431	@ 0x1af
 800b47a:	e6d8      	b.n	800b22e <_dtoa_r+0x2e>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e7e0      	b.n	800b442 <_dtoa_r+0x242>
 800b480:	2401      	movs	r4, #1
 800b482:	2300      	movs	r3, #0
 800b484:	9309      	str	r3, [sp, #36]	@ 0x24
 800b486:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b488:	f04f 33ff 	mov.w	r3, #4294967295
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	9307      	str	r3, [sp, #28]
 800b490:	2200      	movs	r2, #0
 800b492:	2312      	movs	r3, #18
 800b494:	e7d0      	b.n	800b438 <_dtoa_r+0x238>
 800b496:	2301      	movs	r3, #1
 800b498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b49a:	e7f5      	b.n	800b488 <_dtoa_r+0x288>
 800b49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	9307      	str	r3, [sp, #28]
 800b4a2:	e7d7      	b.n	800b454 <_dtoa_r+0x254>
 800b4a4:	3101      	adds	r1, #1
 800b4a6:	0052      	lsls	r2, r2, #1
 800b4a8:	e7d8      	b.n	800b45c <_dtoa_r+0x25c>
 800b4aa:	bf00      	nop
 800b4ac:	f3af 8000 	nop.w
 800b4b0:	636f4361 	.word	0x636f4361
 800b4b4:	3fd287a7 	.word	0x3fd287a7
 800b4b8:	8b60c8b3 	.word	0x8b60c8b3
 800b4bc:	3fc68a28 	.word	0x3fc68a28
 800b4c0:	509f79fb 	.word	0x509f79fb
 800b4c4:	3fd34413 	.word	0x3fd34413
 800b4c8:	08020ff5 	.word	0x08020ff5
 800b4cc:	0802100c 	.word	0x0802100c
 800b4d0:	7ff00000 	.word	0x7ff00000
 800b4d4:	08020fc5 	.word	0x08020fc5
 800b4d8:	3ff80000 	.word	0x3ff80000
 800b4dc:	08021108 	.word	0x08021108
 800b4e0:	08021064 	.word	0x08021064
 800b4e4:	08020ff1 	.word	0x08020ff1
 800b4e8:	08020fc4 	.word	0x08020fc4
 800b4ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4f0:	6018      	str	r0, [r3, #0]
 800b4f2:	9b07      	ldr	r3, [sp, #28]
 800b4f4:	2b0e      	cmp	r3, #14
 800b4f6:	f200 80a4 	bhi.w	800b642 <_dtoa_r+0x442>
 800b4fa:	2c00      	cmp	r4, #0
 800b4fc:	f000 80a1 	beq.w	800b642 <_dtoa_r+0x442>
 800b500:	2f00      	cmp	r7, #0
 800b502:	dd33      	ble.n	800b56c <_dtoa_r+0x36c>
 800b504:	4bad      	ldr	r3, [pc, #692]	@ (800b7bc <_dtoa_r+0x5bc>)
 800b506:	f007 020f 	and.w	r2, r7, #15
 800b50a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b50e:	ed93 7b00 	vldr	d7, [r3]
 800b512:	05f8      	lsls	r0, r7, #23
 800b514:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b518:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b51c:	d516      	bpl.n	800b54c <_dtoa_r+0x34c>
 800b51e:	4ba8      	ldr	r3, [pc, #672]	@ (800b7c0 <_dtoa_r+0x5c0>)
 800b520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b524:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b528:	f7f5 fa10 	bl	800094c <__aeabi_ddiv>
 800b52c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b530:	f004 040f 	and.w	r4, r4, #15
 800b534:	2603      	movs	r6, #3
 800b536:	4da2      	ldr	r5, [pc, #648]	@ (800b7c0 <_dtoa_r+0x5c0>)
 800b538:	b954      	cbnz	r4, 800b550 <_dtoa_r+0x350>
 800b53a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b53e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b542:	f7f5 fa03 	bl	800094c <__aeabi_ddiv>
 800b546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b54a:	e028      	b.n	800b59e <_dtoa_r+0x39e>
 800b54c:	2602      	movs	r6, #2
 800b54e:	e7f2      	b.n	800b536 <_dtoa_r+0x336>
 800b550:	07e1      	lsls	r1, r4, #31
 800b552:	d508      	bpl.n	800b566 <_dtoa_r+0x366>
 800b554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b558:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b55c:	f7f5 f8cc 	bl	80006f8 <__aeabi_dmul>
 800b560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b564:	3601      	adds	r6, #1
 800b566:	1064      	asrs	r4, r4, #1
 800b568:	3508      	adds	r5, #8
 800b56a:	e7e5      	b.n	800b538 <_dtoa_r+0x338>
 800b56c:	f000 80d2 	beq.w	800b714 <_dtoa_r+0x514>
 800b570:	427c      	negs	r4, r7
 800b572:	4b92      	ldr	r3, [pc, #584]	@ (800b7bc <_dtoa_r+0x5bc>)
 800b574:	4d92      	ldr	r5, [pc, #584]	@ (800b7c0 <_dtoa_r+0x5c0>)
 800b576:	f004 020f 	and.w	r2, r4, #15
 800b57a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b586:	f7f5 f8b7 	bl	80006f8 <__aeabi_dmul>
 800b58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b58e:	1124      	asrs	r4, r4, #4
 800b590:	2300      	movs	r3, #0
 800b592:	2602      	movs	r6, #2
 800b594:	2c00      	cmp	r4, #0
 800b596:	f040 80b2 	bne.w	800b6fe <_dtoa_r+0x4fe>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1d3      	bne.n	800b546 <_dtoa_r+0x346>
 800b59e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 80b7 	beq.w	800b718 <_dtoa_r+0x518>
 800b5aa:	4b86      	ldr	r3, [pc, #536]	@ (800b7c4 <_dtoa_r+0x5c4>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	f7f5 fb13 	bl	8000bdc <__aeabi_dcmplt>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f000 80ae 	beq.w	800b718 <_dtoa_r+0x518>
 800b5bc:	9b07      	ldr	r3, [sp, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 80aa 	beq.w	800b718 <_dtoa_r+0x518>
 800b5c4:	9b00      	ldr	r3, [sp, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	dd37      	ble.n	800b63a <_dtoa_r+0x43a>
 800b5ca:	1e7b      	subs	r3, r7, #1
 800b5cc:	9304      	str	r3, [sp, #16]
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4b7d      	ldr	r3, [pc, #500]	@ (800b7c8 <_dtoa_r+0x5c8>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	f7f5 f88f 	bl	80006f8 <__aeabi_dmul>
 800b5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5de:	9c00      	ldr	r4, [sp, #0]
 800b5e0:	3601      	adds	r6, #1
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7f5 f81e 	bl	8000624 <__aeabi_i2d>
 800b5e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5ec:	f7f5 f884 	bl	80006f8 <__aeabi_dmul>
 800b5f0:	4b76      	ldr	r3, [pc, #472]	@ (800b7cc <_dtoa_r+0x5cc>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f7f4 feca 	bl	800038c <__adddf3>
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	f040 808d 	bne.w	800b71e <_dtoa_r+0x51e>
 800b604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b608:	4b71      	ldr	r3, [pc, #452]	@ (800b7d0 <_dtoa_r+0x5d0>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	f7f4 febc 	bl	8000388 <__aeabi_dsub>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b618:	462a      	mov	r2, r5
 800b61a:	4633      	mov	r3, r6
 800b61c:	f7f5 fafc 	bl	8000c18 <__aeabi_dcmpgt>
 800b620:	2800      	cmp	r0, #0
 800b622:	f040 828b 	bne.w	800bb3c <_dtoa_r+0x93c>
 800b626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b62a:	462a      	mov	r2, r5
 800b62c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b630:	f7f5 fad4 	bl	8000bdc <__aeabi_dcmplt>
 800b634:	2800      	cmp	r0, #0
 800b636:	f040 8128 	bne.w	800b88a <_dtoa_r+0x68a>
 800b63a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b63e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b644:	2b00      	cmp	r3, #0
 800b646:	f2c0 815a 	blt.w	800b8fe <_dtoa_r+0x6fe>
 800b64a:	2f0e      	cmp	r7, #14
 800b64c:	f300 8157 	bgt.w	800b8fe <_dtoa_r+0x6fe>
 800b650:	4b5a      	ldr	r3, [pc, #360]	@ (800b7bc <_dtoa_r+0x5bc>)
 800b652:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b656:	ed93 7b00 	vldr	d7, [r3]
 800b65a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	ed8d 7b00 	vstr	d7, [sp]
 800b662:	da03      	bge.n	800b66c <_dtoa_r+0x46c>
 800b664:	9b07      	ldr	r3, [sp, #28]
 800b666:	2b00      	cmp	r3, #0
 800b668:	f340 8101 	ble.w	800b86e <_dtoa_r+0x66e>
 800b66c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b670:	4656      	mov	r6, sl
 800b672:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b676:	4620      	mov	r0, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	f7f5 f967 	bl	800094c <__aeabi_ddiv>
 800b67e:	f7f5 faeb 	bl	8000c58 <__aeabi_d2iz>
 800b682:	4680      	mov	r8, r0
 800b684:	f7f4 ffce 	bl	8000624 <__aeabi_i2d>
 800b688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b68c:	f7f5 f834 	bl	80006f8 <__aeabi_dmul>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4620      	mov	r0, r4
 800b696:	4629      	mov	r1, r5
 800b698:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b69c:	f7f4 fe74 	bl	8000388 <__aeabi_dsub>
 800b6a0:	f806 4b01 	strb.w	r4, [r6], #1
 800b6a4:	9d07      	ldr	r5, [sp, #28]
 800b6a6:	eba6 040a 	sub.w	r4, r6, sl
 800b6aa:	42a5      	cmp	r5, r4
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	f040 8117 	bne.w	800b8e2 <_dtoa_r+0x6e2>
 800b6b4:	f7f4 fe6a 	bl	800038c <__adddf3>
 800b6b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	f7f5 faaa 	bl	8000c18 <__aeabi_dcmpgt>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	f040 80f9 	bne.w	800b8bc <_dtoa_r+0x6bc>
 800b6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	f7f5 fa79 	bl	8000bc8 <__aeabi_dcmpeq>
 800b6d6:	b118      	cbz	r0, 800b6e0 <_dtoa_r+0x4e0>
 800b6d8:	f018 0f01 	tst.w	r8, #1
 800b6dc:	f040 80ee 	bne.w	800b8bc <_dtoa_r+0x6bc>
 800b6e0:	4649      	mov	r1, r9
 800b6e2:	4658      	mov	r0, fp
 800b6e4:	f000 fc90 	bl	800c008 <_Bfree>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	7033      	strb	r3, [r6, #0]
 800b6ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6ee:	3701      	adds	r7, #1
 800b6f0:	601f      	str	r7, [r3, #0]
 800b6f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 831d 	beq.w	800bd34 <_dtoa_r+0xb34>
 800b6fa:	601e      	str	r6, [r3, #0]
 800b6fc:	e31a      	b.n	800bd34 <_dtoa_r+0xb34>
 800b6fe:	07e2      	lsls	r2, r4, #31
 800b700:	d505      	bpl.n	800b70e <_dtoa_r+0x50e>
 800b702:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b706:	f7f4 fff7 	bl	80006f8 <__aeabi_dmul>
 800b70a:	3601      	adds	r6, #1
 800b70c:	2301      	movs	r3, #1
 800b70e:	1064      	asrs	r4, r4, #1
 800b710:	3508      	adds	r5, #8
 800b712:	e73f      	b.n	800b594 <_dtoa_r+0x394>
 800b714:	2602      	movs	r6, #2
 800b716:	e742      	b.n	800b59e <_dtoa_r+0x39e>
 800b718:	9c07      	ldr	r4, [sp, #28]
 800b71a:	9704      	str	r7, [sp, #16]
 800b71c:	e761      	b.n	800b5e2 <_dtoa_r+0x3e2>
 800b71e:	4b27      	ldr	r3, [pc, #156]	@ (800b7bc <_dtoa_r+0x5bc>)
 800b720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b722:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b726:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b72a:	4454      	add	r4, sl
 800b72c:	2900      	cmp	r1, #0
 800b72e:	d053      	beq.n	800b7d8 <_dtoa_r+0x5d8>
 800b730:	4928      	ldr	r1, [pc, #160]	@ (800b7d4 <_dtoa_r+0x5d4>)
 800b732:	2000      	movs	r0, #0
 800b734:	f7f5 f90a 	bl	800094c <__aeabi_ddiv>
 800b738:	4633      	mov	r3, r6
 800b73a:	462a      	mov	r2, r5
 800b73c:	f7f4 fe24 	bl	8000388 <__aeabi_dsub>
 800b740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b744:	4656      	mov	r6, sl
 800b746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b74a:	f7f5 fa85 	bl	8000c58 <__aeabi_d2iz>
 800b74e:	4605      	mov	r5, r0
 800b750:	f7f4 ff68 	bl	8000624 <__aeabi_i2d>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75c:	f7f4 fe14 	bl	8000388 <__aeabi_dsub>
 800b760:	3530      	adds	r5, #48	@ 0x30
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b76a:	f806 5b01 	strb.w	r5, [r6], #1
 800b76e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b772:	f7f5 fa33 	bl	8000bdc <__aeabi_dcmplt>
 800b776:	2800      	cmp	r0, #0
 800b778:	d171      	bne.n	800b85e <_dtoa_r+0x65e>
 800b77a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b77e:	4911      	ldr	r1, [pc, #68]	@ (800b7c4 <_dtoa_r+0x5c4>)
 800b780:	2000      	movs	r0, #0
 800b782:	f7f4 fe01 	bl	8000388 <__aeabi_dsub>
 800b786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b78a:	f7f5 fa27 	bl	8000bdc <__aeabi_dcmplt>
 800b78e:	2800      	cmp	r0, #0
 800b790:	f040 8095 	bne.w	800b8be <_dtoa_r+0x6be>
 800b794:	42a6      	cmp	r6, r4
 800b796:	f43f af50 	beq.w	800b63a <_dtoa_r+0x43a>
 800b79a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b79e:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c8 <_dtoa_r+0x5c8>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f7f4 ffa9 	bl	80006f8 <__aeabi_dmul>
 800b7a6:	4b08      	ldr	r3, [pc, #32]	@ (800b7c8 <_dtoa_r+0x5c8>)
 800b7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b2:	f7f4 ffa1 	bl	80006f8 <__aeabi_dmul>
 800b7b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ba:	e7c4      	b.n	800b746 <_dtoa_r+0x546>
 800b7bc:	08021108 	.word	0x08021108
 800b7c0:	080210e0 	.word	0x080210e0
 800b7c4:	3ff00000 	.word	0x3ff00000
 800b7c8:	40240000 	.word	0x40240000
 800b7cc:	401c0000 	.word	0x401c0000
 800b7d0:	40140000 	.word	0x40140000
 800b7d4:	3fe00000 	.word	0x3fe00000
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f7f4 ff8c 	bl	80006f8 <__aeabi_dmul>
 800b7e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b7e6:	4656      	mov	r6, sl
 800b7e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ec:	f7f5 fa34 	bl	8000c58 <__aeabi_d2iz>
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	f7f4 ff17 	bl	8000624 <__aeabi_i2d>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fe:	f7f4 fdc3 	bl	8000388 <__aeabi_dsub>
 800b802:	3530      	adds	r5, #48	@ 0x30
 800b804:	f806 5b01 	strb.w	r5, [r6], #1
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	42a6      	cmp	r6, r4
 800b80e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b812:	f04f 0200 	mov.w	r2, #0
 800b816:	d124      	bne.n	800b862 <_dtoa_r+0x662>
 800b818:	4bac      	ldr	r3, [pc, #688]	@ (800bacc <_dtoa_r+0x8cc>)
 800b81a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b81e:	f7f4 fdb5 	bl	800038c <__adddf3>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b82a:	f7f5 f9f5 	bl	8000c18 <__aeabi_dcmpgt>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d145      	bne.n	800b8be <_dtoa_r+0x6be>
 800b832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b836:	49a5      	ldr	r1, [pc, #660]	@ (800bacc <_dtoa_r+0x8cc>)
 800b838:	2000      	movs	r0, #0
 800b83a:	f7f4 fda5 	bl	8000388 <__aeabi_dsub>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b846:	f7f5 f9c9 	bl	8000bdc <__aeabi_dcmplt>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	f43f aef5 	beq.w	800b63a <_dtoa_r+0x43a>
 800b850:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b852:	1e73      	subs	r3, r6, #1
 800b854:	9315      	str	r3, [sp, #84]	@ 0x54
 800b856:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b85a:	2b30      	cmp	r3, #48	@ 0x30
 800b85c:	d0f8      	beq.n	800b850 <_dtoa_r+0x650>
 800b85e:	9f04      	ldr	r7, [sp, #16]
 800b860:	e73e      	b.n	800b6e0 <_dtoa_r+0x4e0>
 800b862:	4b9b      	ldr	r3, [pc, #620]	@ (800bad0 <_dtoa_r+0x8d0>)
 800b864:	f7f4 ff48 	bl	80006f8 <__aeabi_dmul>
 800b868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b86c:	e7bc      	b.n	800b7e8 <_dtoa_r+0x5e8>
 800b86e:	d10c      	bne.n	800b88a <_dtoa_r+0x68a>
 800b870:	4b98      	ldr	r3, [pc, #608]	@ (800bad4 <_dtoa_r+0x8d4>)
 800b872:	2200      	movs	r2, #0
 800b874:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b878:	f7f4 ff3e 	bl	80006f8 <__aeabi_dmul>
 800b87c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b880:	f7f5 f9c0 	bl	8000c04 <__aeabi_dcmpge>
 800b884:	2800      	cmp	r0, #0
 800b886:	f000 8157 	beq.w	800bb38 <_dtoa_r+0x938>
 800b88a:	2400      	movs	r4, #0
 800b88c:	4625      	mov	r5, r4
 800b88e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b890:	43db      	mvns	r3, r3
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	4656      	mov	r6, sl
 800b896:	2700      	movs	r7, #0
 800b898:	4621      	mov	r1, r4
 800b89a:	4658      	mov	r0, fp
 800b89c:	f000 fbb4 	bl	800c008 <_Bfree>
 800b8a0:	2d00      	cmp	r5, #0
 800b8a2:	d0dc      	beq.n	800b85e <_dtoa_r+0x65e>
 800b8a4:	b12f      	cbz	r7, 800b8b2 <_dtoa_r+0x6b2>
 800b8a6:	42af      	cmp	r7, r5
 800b8a8:	d003      	beq.n	800b8b2 <_dtoa_r+0x6b2>
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	f000 fbab 	bl	800c008 <_Bfree>
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4658      	mov	r0, fp
 800b8b6:	f000 fba7 	bl	800c008 <_Bfree>
 800b8ba:	e7d0      	b.n	800b85e <_dtoa_r+0x65e>
 800b8bc:	9704      	str	r7, [sp, #16]
 800b8be:	4633      	mov	r3, r6
 800b8c0:	461e      	mov	r6, r3
 800b8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8c6:	2a39      	cmp	r2, #57	@ 0x39
 800b8c8:	d107      	bne.n	800b8da <_dtoa_r+0x6da>
 800b8ca:	459a      	cmp	sl, r3
 800b8cc:	d1f8      	bne.n	800b8c0 <_dtoa_r+0x6c0>
 800b8ce:	9a04      	ldr	r2, [sp, #16]
 800b8d0:	3201      	adds	r2, #1
 800b8d2:	9204      	str	r2, [sp, #16]
 800b8d4:	2230      	movs	r2, #48	@ 0x30
 800b8d6:	f88a 2000 	strb.w	r2, [sl]
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	3201      	adds	r2, #1
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	e7bd      	b.n	800b85e <_dtoa_r+0x65e>
 800b8e2:	4b7b      	ldr	r3, [pc, #492]	@ (800bad0 <_dtoa_r+0x8d0>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f7f4 ff07 	bl	80006f8 <__aeabi_dmul>
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	f7f5 f969 	bl	8000bc8 <__aeabi_dcmpeq>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f43f aebb 	beq.w	800b672 <_dtoa_r+0x472>
 800b8fc:	e6f0      	b.n	800b6e0 <_dtoa_r+0x4e0>
 800b8fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b900:	2a00      	cmp	r2, #0
 800b902:	f000 80db 	beq.w	800babc <_dtoa_r+0x8bc>
 800b906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b908:	2a01      	cmp	r2, #1
 800b90a:	f300 80bf 	bgt.w	800ba8c <_dtoa_r+0x88c>
 800b90e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b910:	2a00      	cmp	r2, #0
 800b912:	f000 80b7 	beq.w	800ba84 <_dtoa_r+0x884>
 800b916:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b91a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b91c:	4646      	mov	r6, r8
 800b91e:	9a08      	ldr	r2, [sp, #32]
 800b920:	2101      	movs	r1, #1
 800b922:	441a      	add	r2, r3
 800b924:	4658      	mov	r0, fp
 800b926:	4498      	add	r8, r3
 800b928:	9208      	str	r2, [sp, #32]
 800b92a:	f000 fc21 	bl	800c170 <__i2b>
 800b92e:	4605      	mov	r5, r0
 800b930:	b15e      	cbz	r6, 800b94a <_dtoa_r+0x74a>
 800b932:	9b08      	ldr	r3, [sp, #32]
 800b934:	2b00      	cmp	r3, #0
 800b936:	dd08      	ble.n	800b94a <_dtoa_r+0x74a>
 800b938:	42b3      	cmp	r3, r6
 800b93a:	9a08      	ldr	r2, [sp, #32]
 800b93c:	bfa8      	it	ge
 800b93e:	4633      	movge	r3, r6
 800b940:	eba8 0803 	sub.w	r8, r8, r3
 800b944:	1af6      	subs	r6, r6, r3
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94c:	b1f3      	cbz	r3, 800b98c <_dtoa_r+0x78c>
 800b94e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 80b7 	beq.w	800bac4 <_dtoa_r+0x8c4>
 800b956:	b18c      	cbz	r4, 800b97c <_dtoa_r+0x77c>
 800b958:	4629      	mov	r1, r5
 800b95a:	4622      	mov	r2, r4
 800b95c:	4658      	mov	r0, fp
 800b95e:	f000 fcc7 	bl	800c2f0 <__pow5mult>
 800b962:	464a      	mov	r2, r9
 800b964:	4601      	mov	r1, r0
 800b966:	4605      	mov	r5, r0
 800b968:	4658      	mov	r0, fp
 800b96a:	f000 fc17 	bl	800c19c <__multiply>
 800b96e:	4649      	mov	r1, r9
 800b970:	9004      	str	r0, [sp, #16]
 800b972:	4658      	mov	r0, fp
 800b974:	f000 fb48 	bl	800c008 <_Bfree>
 800b978:	9b04      	ldr	r3, [sp, #16]
 800b97a:	4699      	mov	r9, r3
 800b97c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b97e:	1b1a      	subs	r2, r3, r4
 800b980:	d004      	beq.n	800b98c <_dtoa_r+0x78c>
 800b982:	4649      	mov	r1, r9
 800b984:	4658      	mov	r0, fp
 800b986:	f000 fcb3 	bl	800c2f0 <__pow5mult>
 800b98a:	4681      	mov	r9, r0
 800b98c:	2101      	movs	r1, #1
 800b98e:	4658      	mov	r0, fp
 800b990:	f000 fbee 	bl	800c170 <__i2b>
 800b994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b996:	4604      	mov	r4, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 81cf 	beq.w	800bd3c <_dtoa_r+0xb3c>
 800b99e:	461a      	mov	r2, r3
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	4658      	mov	r0, fp
 800b9a4:	f000 fca4 	bl	800c2f0 <__pow5mult>
 800b9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	f300 8095 	bgt.w	800badc <_dtoa_r+0x8dc>
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f040 8087 	bne.w	800bac8 <_dtoa_r+0x8c8>
 800b9ba:	9b03      	ldr	r3, [sp, #12]
 800b9bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f040 8089 	bne.w	800bad8 <_dtoa_r+0x8d8>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9cc:	0d1b      	lsrs	r3, r3, #20
 800b9ce:	051b      	lsls	r3, r3, #20
 800b9d0:	b12b      	cbz	r3, 800b9de <_dtoa_r+0x7de>
 800b9d2:	9b08      	ldr	r3, [sp, #32]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	9308      	str	r3, [sp, #32]
 800b9d8:	f108 0801 	add.w	r8, r8, #1
 800b9dc:	2301      	movs	r3, #1
 800b9de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f000 81b0 	beq.w	800bd48 <_dtoa_r+0xb48>
 800b9e8:	6923      	ldr	r3, [r4, #16]
 800b9ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9ee:	6918      	ldr	r0, [r3, #16]
 800b9f0:	f000 fb72 	bl	800c0d8 <__hi0bits>
 800b9f4:	f1c0 0020 	rsb	r0, r0, #32
 800b9f8:	9b08      	ldr	r3, [sp, #32]
 800b9fa:	4418      	add	r0, r3
 800b9fc:	f010 001f 	ands.w	r0, r0, #31
 800ba00:	d077      	beq.n	800baf2 <_dtoa_r+0x8f2>
 800ba02:	f1c0 0320 	rsb	r3, r0, #32
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	dd6b      	ble.n	800bae2 <_dtoa_r+0x8e2>
 800ba0a:	9b08      	ldr	r3, [sp, #32]
 800ba0c:	f1c0 001c 	rsb	r0, r0, #28
 800ba10:	4403      	add	r3, r0
 800ba12:	4480      	add	r8, r0
 800ba14:	4406      	add	r6, r0
 800ba16:	9308      	str	r3, [sp, #32]
 800ba18:	f1b8 0f00 	cmp.w	r8, #0
 800ba1c:	dd05      	ble.n	800ba2a <_dtoa_r+0x82a>
 800ba1e:	4649      	mov	r1, r9
 800ba20:	4642      	mov	r2, r8
 800ba22:	4658      	mov	r0, fp
 800ba24:	f000 fcbe 	bl	800c3a4 <__lshift>
 800ba28:	4681      	mov	r9, r0
 800ba2a:	9b08      	ldr	r3, [sp, #32]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	dd05      	ble.n	800ba3c <_dtoa_r+0x83c>
 800ba30:	4621      	mov	r1, r4
 800ba32:	461a      	mov	r2, r3
 800ba34:	4658      	mov	r0, fp
 800ba36:	f000 fcb5 	bl	800c3a4 <__lshift>
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d059      	beq.n	800baf6 <_dtoa_r+0x8f6>
 800ba42:	4621      	mov	r1, r4
 800ba44:	4648      	mov	r0, r9
 800ba46:	f000 fd19 	bl	800c47c <__mcmp>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	da53      	bge.n	800baf6 <_dtoa_r+0x8f6>
 800ba4e:	1e7b      	subs	r3, r7, #1
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	4649      	mov	r1, r9
 800ba54:	2300      	movs	r3, #0
 800ba56:	220a      	movs	r2, #10
 800ba58:	4658      	mov	r0, fp
 800ba5a:	f000 faf7 	bl	800c04c <__multadd>
 800ba5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba60:	4681      	mov	r9, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 8172 	beq.w	800bd4c <_dtoa_r+0xb4c>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	220a      	movs	r2, #10
 800ba6e:	4658      	mov	r0, fp
 800ba70:	f000 faec 	bl	800c04c <__multadd>
 800ba74:	9b00      	ldr	r3, [sp, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	4605      	mov	r5, r0
 800ba7a:	dc67      	bgt.n	800bb4c <_dtoa_r+0x94c>
 800ba7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	dc41      	bgt.n	800bb06 <_dtoa_r+0x906>
 800ba82:	e063      	b.n	800bb4c <_dtoa_r+0x94c>
 800ba84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba8a:	e746      	b.n	800b91a <_dtoa_r+0x71a>
 800ba8c:	9b07      	ldr	r3, [sp, #28]
 800ba8e:	1e5c      	subs	r4, r3, #1
 800ba90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba92:	42a3      	cmp	r3, r4
 800ba94:	bfbf      	itttt	lt
 800ba96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba9c:	1ae3      	sublt	r3, r4, r3
 800ba9e:	bfb4      	ite	lt
 800baa0:	18d2      	addlt	r2, r2, r3
 800baa2:	1b1c      	subge	r4, r3, r4
 800baa4:	9b07      	ldr	r3, [sp, #28]
 800baa6:	bfbc      	itt	lt
 800baa8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800baaa:	2400      	movlt	r4, #0
 800baac:	2b00      	cmp	r3, #0
 800baae:	bfb5      	itete	lt
 800bab0:	eba8 0603 	sublt.w	r6, r8, r3
 800bab4:	9b07      	ldrge	r3, [sp, #28]
 800bab6:	2300      	movlt	r3, #0
 800bab8:	4646      	movge	r6, r8
 800baba:	e730      	b.n	800b91e <_dtoa_r+0x71e>
 800babc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800babe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bac0:	4646      	mov	r6, r8
 800bac2:	e735      	b.n	800b930 <_dtoa_r+0x730>
 800bac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bac6:	e75c      	b.n	800b982 <_dtoa_r+0x782>
 800bac8:	2300      	movs	r3, #0
 800baca:	e788      	b.n	800b9de <_dtoa_r+0x7de>
 800bacc:	3fe00000 	.word	0x3fe00000
 800bad0:	40240000 	.word	0x40240000
 800bad4:	40140000 	.word	0x40140000
 800bad8:	9b02      	ldr	r3, [sp, #8]
 800bada:	e780      	b.n	800b9de <_dtoa_r+0x7de>
 800badc:	2300      	movs	r3, #0
 800bade:	930a      	str	r3, [sp, #40]	@ 0x28
 800bae0:	e782      	b.n	800b9e8 <_dtoa_r+0x7e8>
 800bae2:	d099      	beq.n	800ba18 <_dtoa_r+0x818>
 800bae4:	9a08      	ldr	r2, [sp, #32]
 800bae6:	331c      	adds	r3, #28
 800bae8:	441a      	add	r2, r3
 800baea:	4498      	add	r8, r3
 800baec:	441e      	add	r6, r3
 800baee:	9208      	str	r2, [sp, #32]
 800baf0:	e792      	b.n	800ba18 <_dtoa_r+0x818>
 800baf2:	4603      	mov	r3, r0
 800baf4:	e7f6      	b.n	800bae4 <_dtoa_r+0x8e4>
 800baf6:	9b07      	ldr	r3, [sp, #28]
 800baf8:	9704      	str	r7, [sp, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dc20      	bgt.n	800bb40 <_dtoa_r+0x940>
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	dd1e      	ble.n	800bb44 <_dtoa_r+0x944>
 800bb06:	9b00      	ldr	r3, [sp, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f47f aec0 	bne.w	800b88e <_dtoa_r+0x68e>
 800bb0e:	4621      	mov	r1, r4
 800bb10:	2205      	movs	r2, #5
 800bb12:	4658      	mov	r0, fp
 800bb14:	f000 fa9a 	bl	800c04c <__multadd>
 800bb18:	4601      	mov	r1, r0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4648      	mov	r0, r9
 800bb1e:	f000 fcad 	bl	800c47c <__mcmp>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f77f aeb3 	ble.w	800b88e <_dtoa_r+0x68e>
 800bb28:	4656      	mov	r6, sl
 800bb2a:	2331      	movs	r3, #49	@ 0x31
 800bb2c:	f806 3b01 	strb.w	r3, [r6], #1
 800bb30:	9b04      	ldr	r3, [sp, #16]
 800bb32:	3301      	adds	r3, #1
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	e6ae      	b.n	800b896 <_dtoa_r+0x696>
 800bb38:	9c07      	ldr	r4, [sp, #28]
 800bb3a:	9704      	str	r7, [sp, #16]
 800bb3c:	4625      	mov	r5, r4
 800bb3e:	e7f3      	b.n	800bb28 <_dtoa_r+0x928>
 800bb40:	9b07      	ldr	r3, [sp, #28]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 8104 	beq.w	800bd54 <_dtoa_r+0xb54>
 800bb4c:	2e00      	cmp	r6, #0
 800bb4e:	dd05      	ble.n	800bb5c <_dtoa_r+0x95c>
 800bb50:	4629      	mov	r1, r5
 800bb52:	4632      	mov	r2, r6
 800bb54:	4658      	mov	r0, fp
 800bb56:	f000 fc25 	bl	800c3a4 <__lshift>
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d05a      	beq.n	800bc18 <_dtoa_r+0xa18>
 800bb62:	6869      	ldr	r1, [r5, #4]
 800bb64:	4658      	mov	r0, fp
 800bb66:	f000 fa0f 	bl	800bf88 <_Balloc>
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	b928      	cbnz	r0, 800bb7a <_dtoa_r+0x97a>
 800bb6e:	4b84      	ldr	r3, [pc, #528]	@ (800bd80 <_dtoa_r+0xb80>)
 800bb70:	4602      	mov	r2, r0
 800bb72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb76:	f7ff bb5a 	b.w	800b22e <_dtoa_r+0x2e>
 800bb7a:	692a      	ldr	r2, [r5, #16]
 800bb7c:	3202      	adds	r2, #2
 800bb7e:	0092      	lsls	r2, r2, #2
 800bb80:	f105 010c 	add.w	r1, r5, #12
 800bb84:	300c      	adds	r0, #12
 800bb86:	f000 ffaf 	bl	800cae8 <memcpy>
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4658      	mov	r0, fp
 800bb90:	f000 fc08 	bl	800c3a4 <__lshift>
 800bb94:	f10a 0301 	add.w	r3, sl, #1
 800bb98:	9307      	str	r3, [sp, #28]
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	4453      	add	r3, sl
 800bb9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba0:	9b02      	ldr	r3, [sp, #8]
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	462f      	mov	r7, r5
 800bba8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbaa:	4605      	mov	r5, r0
 800bbac:	9b07      	ldr	r3, [sp, #28]
 800bbae:	4621      	mov	r1, r4
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	4648      	mov	r0, r9
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	f7ff fa98 	bl	800b0ea <quorem>
 800bbba:	4639      	mov	r1, r7
 800bbbc:	9002      	str	r0, [sp, #8]
 800bbbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bbc2:	4648      	mov	r0, r9
 800bbc4:	f000 fc5a 	bl	800c47c <__mcmp>
 800bbc8:	462a      	mov	r2, r5
 800bbca:	9008      	str	r0, [sp, #32]
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4658      	mov	r0, fp
 800bbd0:	f000 fc70 	bl	800c4b4 <__mdiff>
 800bbd4:	68c2      	ldr	r2, [r0, #12]
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	bb02      	cbnz	r2, 800bc1c <_dtoa_r+0xa1c>
 800bbda:	4601      	mov	r1, r0
 800bbdc:	4648      	mov	r0, r9
 800bbde:	f000 fc4d 	bl	800c47c <__mcmp>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	4658      	mov	r0, fp
 800bbe8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbea:	f000 fa0d 	bl	800c008 <_Bfree>
 800bbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbf2:	9e07      	ldr	r6, [sp, #28]
 800bbf4:	ea43 0102 	orr.w	r1, r3, r2
 800bbf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbfa:	4319      	orrs	r1, r3
 800bbfc:	d110      	bne.n	800bc20 <_dtoa_r+0xa20>
 800bbfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc02:	d029      	beq.n	800bc58 <_dtoa_r+0xa58>
 800bc04:	9b08      	ldr	r3, [sp, #32]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dd02      	ble.n	800bc10 <_dtoa_r+0xa10>
 800bc0a:	9b02      	ldr	r3, [sp, #8]
 800bc0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bc10:	9b00      	ldr	r3, [sp, #0]
 800bc12:	f883 8000 	strb.w	r8, [r3]
 800bc16:	e63f      	b.n	800b898 <_dtoa_r+0x698>
 800bc18:	4628      	mov	r0, r5
 800bc1a:	e7bb      	b.n	800bb94 <_dtoa_r+0x994>
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	e7e1      	b.n	800bbe4 <_dtoa_r+0x9e4>
 800bc20:	9b08      	ldr	r3, [sp, #32]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	db04      	blt.n	800bc30 <_dtoa_r+0xa30>
 800bc26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc28:	430b      	orrs	r3, r1
 800bc2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc2c:	430b      	orrs	r3, r1
 800bc2e:	d120      	bne.n	800bc72 <_dtoa_r+0xa72>
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	dded      	ble.n	800bc10 <_dtoa_r+0xa10>
 800bc34:	4649      	mov	r1, r9
 800bc36:	2201      	movs	r2, #1
 800bc38:	4658      	mov	r0, fp
 800bc3a:	f000 fbb3 	bl	800c3a4 <__lshift>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4681      	mov	r9, r0
 800bc42:	f000 fc1b 	bl	800c47c <__mcmp>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	dc03      	bgt.n	800bc52 <_dtoa_r+0xa52>
 800bc4a:	d1e1      	bne.n	800bc10 <_dtoa_r+0xa10>
 800bc4c:	f018 0f01 	tst.w	r8, #1
 800bc50:	d0de      	beq.n	800bc10 <_dtoa_r+0xa10>
 800bc52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc56:	d1d8      	bne.n	800bc0a <_dtoa_r+0xa0a>
 800bc58:	9a00      	ldr	r2, [sp, #0]
 800bc5a:	2339      	movs	r3, #57	@ 0x39
 800bc5c:	7013      	strb	r3, [r2, #0]
 800bc5e:	4633      	mov	r3, r6
 800bc60:	461e      	mov	r6, r3
 800bc62:	3b01      	subs	r3, #1
 800bc64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc68:	2a39      	cmp	r2, #57	@ 0x39
 800bc6a:	d052      	beq.n	800bd12 <_dtoa_r+0xb12>
 800bc6c:	3201      	adds	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]
 800bc70:	e612      	b.n	800b898 <_dtoa_r+0x698>
 800bc72:	2a00      	cmp	r2, #0
 800bc74:	dd07      	ble.n	800bc86 <_dtoa_r+0xa86>
 800bc76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc7a:	d0ed      	beq.n	800bc58 <_dtoa_r+0xa58>
 800bc7c:	9a00      	ldr	r2, [sp, #0]
 800bc7e:	f108 0301 	add.w	r3, r8, #1
 800bc82:	7013      	strb	r3, [r2, #0]
 800bc84:	e608      	b.n	800b898 <_dtoa_r+0x698>
 800bc86:	9b07      	ldr	r3, [sp, #28]
 800bc88:	9a07      	ldr	r2, [sp, #28]
 800bc8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d028      	beq.n	800bce6 <_dtoa_r+0xae6>
 800bc94:	4649      	mov	r1, r9
 800bc96:	2300      	movs	r3, #0
 800bc98:	220a      	movs	r2, #10
 800bc9a:	4658      	mov	r0, fp
 800bc9c:	f000 f9d6 	bl	800c04c <__multadd>
 800bca0:	42af      	cmp	r7, r5
 800bca2:	4681      	mov	r9, r0
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	f04f 020a 	mov.w	r2, #10
 800bcac:	4639      	mov	r1, r7
 800bcae:	4658      	mov	r0, fp
 800bcb0:	d107      	bne.n	800bcc2 <_dtoa_r+0xac2>
 800bcb2:	f000 f9cb 	bl	800c04c <__multadd>
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	4605      	mov	r5, r0
 800bcba:	9b07      	ldr	r3, [sp, #28]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	9307      	str	r3, [sp, #28]
 800bcc0:	e774      	b.n	800bbac <_dtoa_r+0x9ac>
 800bcc2:	f000 f9c3 	bl	800c04c <__multadd>
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4607      	mov	r7, r0
 800bcca:	2300      	movs	r3, #0
 800bccc:	220a      	movs	r2, #10
 800bcce:	4658      	mov	r0, fp
 800bcd0:	f000 f9bc 	bl	800c04c <__multadd>
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	e7f0      	b.n	800bcba <_dtoa_r+0xaba>
 800bcd8:	9b00      	ldr	r3, [sp, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	bfcc      	ite	gt
 800bcde:	461e      	movgt	r6, r3
 800bce0:	2601      	movle	r6, #1
 800bce2:	4456      	add	r6, sl
 800bce4:	2700      	movs	r7, #0
 800bce6:	4649      	mov	r1, r9
 800bce8:	2201      	movs	r2, #1
 800bcea:	4658      	mov	r0, fp
 800bcec:	f000 fb5a 	bl	800c3a4 <__lshift>
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	4681      	mov	r9, r0
 800bcf4:	f000 fbc2 	bl	800c47c <__mcmp>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	dcb0      	bgt.n	800bc5e <_dtoa_r+0xa5e>
 800bcfc:	d102      	bne.n	800bd04 <_dtoa_r+0xb04>
 800bcfe:	f018 0f01 	tst.w	r8, #1
 800bd02:	d1ac      	bne.n	800bc5e <_dtoa_r+0xa5e>
 800bd04:	4633      	mov	r3, r6
 800bd06:	461e      	mov	r6, r3
 800bd08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd0c:	2a30      	cmp	r2, #48	@ 0x30
 800bd0e:	d0fa      	beq.n	800bd06 <_dtoa_r+0xb06>
 800bd10:	e5c2      	b.n	800b898 <_dtoa_r+0x698>
 800bd12:	459a      	cmp	sl, r3
 800bd14:	d1a4      	bne.n	800bc60 <_dtoa_r+0xa60>
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	2331      	movs	r3, #49	@ 0x31
 800bd1e:	f88a 3000 	strb.w	r3, [sl]
 800bd22:	e5b9      	b.n	800b898 <_dtoa_r+0x698>
 800bd24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd84 <_dtoa_r+0xb84>
 800bd2a:	b11b      	cbz	r3, 800bd34 <_dtoa_r+0xb34>
 800bd2c:	f10a 0308 	add.w	r3, sl, #8
 800bd30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd32:	6013      	str	r3, [r2, #0]
 800bd34:	4650      	mov	r0, sl
 800bd36:	b019      	add	sp, #100	@ 0x64
 800bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	f77f ae37 	ble.w	800b9b2 <_dtoa_r+0x7b2>
 800bd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd46:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd48:	2001      	movs	r0, #1
 800bd4a:	e655      	b.n	800b9f8 <_dtoa_r+0x7f8>
 800bd4c:	9b00      	ldr	r3, [sp, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f77f aed6 	ble.w	800bb00 <_dtoa_r+0x900>
 800bd54:	4656      	mov	r6, sl
 800bd56:	4621      	mov	r1, r4
 800bd58:	4648      	mov	r0, r9
 800bd5a:	f7ff f9c6 	bl	800b0ea <quorem>
 800bd5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd62:	f806 8b01 	strb.w	r8, [r6], #1
 800bd66:	9b00      	ldr	r3, [sp, #0]
 800bd68:	eba6 020a 	sub.w	r2, r6, sl
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	ddb3      	ble.n	800bcd8 <_dtoa_r+0xad8>
 800bd70:	4649      	mov	r1, r9
 800bd72:	2300      	movs	r3, #0
 800bd74:	220a      	movs	r2, #10
 800bd76:	4658      	mov	r0, fp
 800bd78:	f000 f968 	bl	800c04c <__multadd>
 800bd7c:	4681      	mov	r9, r0
 800bd7e:	e7ea      	b.n	800bd56 <_dtoa_r+0xb56>
 800bd80:	08021064 	.word	0x08021064
 800bd84:	08020fe8 	.word	0x08020fe8

0800bd88 <_free_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	2900      	cmp	r1, #0
 800bd8e:	d041      	beq.n	800be14 <_free_r+0x8c>
 800bd90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd94:	1f0c      	subs	r4, r1, #4
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bfb8      	it	lt
 800bd9a:	18e4      	addlt	r4, r4, r3
 800bd9c:	f000 f8e8 	bl	800bf70 <__malloc_lock>
 800bda0:	4a1d      	ldr	r2, [pc, #116]	@ (800be18 <_free_r+0x90>)
 800bda2:	6813      	ldr	r3, [r2, #0]
 800bda4:	b933      	cbnz	r3, 800bdb4 <_free_r+0x2c>
 800bda6:	6063      	str	r3, [r4, #4]
 800bda8:	6014      	str	r4, [r2, #0]
 800bdaa:	4628      	mov	r0, r5
 800bdac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdb0:	f000 b8e4 	b.w	800bf7c <__malloc_unlock>
 800bdb4:	42a3      	cmp	r3, r4
 800bdb6:	d908      	bls.n	800bdca <_free_r+0x42>
 800bdb8:	6820      	ldr	r0, [r4, #0]
 800bdba:	1821      	adds	r1, r4, r0
 800bdbc:	428b      	cmp	r3, r1
 800bdbe:	bf01      	itttt	eq
 800bdc0:	6819      	ldreq	r1, [r3, #0]
 800bdc2:	685b      	ldreq	r3, [r3, #4]
 800bdc4:	1809      	addeq	r1, r1, r0
 800bdc6:	6021      	streq	r1, [r4, #0]
 800bdc8:	e7ed      	b.n	800bda6 <_free_r+0x1e>
 800bdca:	461a      	mov	r2, r3
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	b10b      	cbz	r3, 800bdd4 <_free_r+0x4c>
 800bdd0:	42a3      	cmp	r3, r4
 800bdd2:	d9fa      	bls.n	800bdca <_free_r+0x42>
 800bdd4:	6811      	ldr	r1, [r2, #0]
 800bdd6:	1850      	adds	r0, r2, r1
 800bdd8:	42a0      	cmp	r0, r4
 800bdda:	d10b      	bne.n	800bdf4 <_free_r+0x6c>
 800bddc:	6820      	ldr	r0, [r4, #0]
 800bdde:	4401      	add	r1, r0
 800bde0:	1850      	adds	r0, r2, r1
 800bde2:	4283      	cmp	r3, r0
 800bde4:	6011      	str	r1, [r2, #0]
 800bde6:	d1e0      	bne.n	800bdaa <_free_r+0x22>
 800bde8:	6818      	ldr	r0, [r3, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	6053      	str	r3, [r2, #4]
 800bdee:	4408      	add	r0, r1
 800bdf0:	6010      	str	r0, [r2, #0]
 800bdf2:	e7da      	b.n	800bdaa <_free_r+0x22>
 800bdf4:	d902      	bls.n	800bdfc <_free_r+0x74>
 800bdf6:	230c      	movs	r3, #12
 800bdf8:	602b      	str	r3, [r5, #0]
 800bdfa:	e7d6      	b.n	800bdaa <_free_r+0x22>
 800bdfc:	6820      	ldr	r0, [r4, #0]
 800bdfe:	1821      	adds	r1, r4, r0
 800be00:	428b      	cmp	r3, r1
 800be02:	bf04      	itt	eq
 800be04:	6819      	ldreq	r1, [r3, #0]
 800be06:	685b      	ldreq	r3, [r3, #4]
 800be08:	6063      	str	r3, [r4, #4]
 800be0a:	bf04      	itt	eq
 800be0c:	1809      	addeq	r1, r1, r0
 800be0e:	6021      	streq	r1, [r4, #0]
 800be10:	6054      	str	r4, [r2, #4]
 800be12:	e7ca      	b.n	800bdaa <_free_r+0x22>
 800be14:	bd38      	pop	{r3, r4, r5, pc}
 800be16:	bf00      	nop
 800be18:	2001de74 	.word	0x2001de74

0800be1c <malloc>:
 800be1c:	4b02      	ldr	r3, [pc, #8]	@ (800be28 <malloc+0xc>)
 800be1e:	4601      	mov	r1, r0
 800be20:	6818      	ldr	r0, [r3, #0]
 800be22:	f000 b825 	b.w	800be70 <_malloc_r>
 800be26:	bf00      	nop
 800be28:	20000018 	.word	0x20000018

0800be2c <sbrk_aligned>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	4e0f      	ldr	r6, [pc, #60]	@ (800be6c <sbrk_aligned+0x40>)
 800be30:	460c      	mov	r4, r1
 800be32:	6831      	ldr	r1, [r6, #0]
 800be34:	4605      	mov	r5, r0
 800be36:	b911      	cbnz	r1, 800be3e <sbrk_aligned+0x12>
 800be38:	f000 fe46 	bl	800cac8 <_sbrk_r>
 800be3c:	6030      	str	r0, [r6, #0]
 800be3e:	4621      	mov	r1, r4
 800be40:	4628      	mov	r0, r5
 800be42:	f000 fe41 	bl	800cac8 <_sbrk_r>
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	d103      	bne.n	800be52 <sbrk_aligned+0x26>
 800be4a:	f04f 34ff 	mov.w	r4, #4294967295
 800be4e:	4620      	mov	r0, r4
 800be50:	bd70      	pop	{r4, r5, r6, pc}
 800be52:	1cc4      	adds	r4, r0, #3
 800be54:	f024 0403 	bic.w	r4, r4, #3
 800be58:	42a0      	cmp	r0, r4
 800be5a:	d0f8      	beq.n	800be4e <sbrk_aligned+0x22>
 800be5c:	1a21      	subs	r1, r4, r0
 800be5e:	4628      	mov	r0, r5
 800be60:	f000 fe32 	bl	800cac8 <_sbrk_r>
 800be64:	3001      	adds	r0, #1
 800be66:	d1f2      	bne.n	800be4e <sbrk_aligned+0x22>
 800be68:	e7ef      	b.n	800be4a <sbrk_aligned+0x1e>
 800be6a:	bf00      	nop
 800be6c:	2001de70 	.word	0x2001de70

0800be70 <_malloc_r>:
 800be70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be74:	1ccd      	adds	r5, r1, #3
 800be76:	f025 0503 	bic.w	r5, r5, #3
 800be7a:	3508      	adds	r5, #8
 800be7c:	2d0c      	cmp	r5, #12
 800be7e:	bf38      	it	cc
 800be80:	250c      	movcc	r5, #12
 800be82:	2d00      	cmp	r5, #0
 800be84:	4606      	mov	r6, r0
 800be86:	db01      	blt.n	800be8c <_malloc_r+0x1c>
 800be88:	42a9      	cmp	r1, r5
 800be8a:	d904      	bls.n	800be96 <_malloc_r+0x26>
 800be8c:	230c      	movs	r3, #12
 800be8e:	6033      	str	r3, [r6, #0]
 800be90:	2000      	movs	r0, #0
 800be92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf6c <_malloc_r+0xfc>
 800be9a:	f000 f869 	bl	800bf70 <__malloc_lock>
 800be9e:	f8d8 3000 	ldr.w	r3, [r8]
 800bea2:	461c      	mov	r4, r3
 800bea4:	bb44      	cbnz	r4, 800bef8 <_malloc_r+0x88>
 800bea6:	4629      	mov	r1, r5
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff ffbf 	bl	800be2c <sbrk_aligned>
 800beae:	1c43      	adds	r3, r0, #1
 800beb0:	4604      	mov	r4, r0
 800beb2:	d158      	bne.n	800bf66 <_malloc_r+0xf6>
 800beb4:	f8d8 4000 	ldr.w	r4, [r8]
 800beb8:	4627      	mov	r7, r4
 800beba:	2f00      	cmp	r7, #0
 800bebc:	d143      	bne.n	800bf46 <_malloc_r+0xd6>
 800bebe:	2c00      	cmp	r4, #0
 800bec0:	d04b      	beq.n	800bf5a <_malloc_r+0xea>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	4639      	mov	r1, r7
 800bec6:	4630      	mov	r0, r6
 800bec8:	eb04 0903 	add.w	r9, r4, r3
 800becc:	f000 fdfc 	bl	800cac8 <_sbrk_r>
 800bed0:	4581      	cmp	r9, r0
 800bed2:	d142      	bne.n	800bf5a <_malloc_r+0xea>
 800bed4:	6821      	ldr	r1, [r4, #0]
 800bed6:	1a6d      	subs	r5, r5, r1
 800bed8:	4629      	mov	r1, r5
 800beda:	4630      	mov	r0, r6
 800bedc:	f7ff ffa6 	bl	800be2c <sbrk_aligned>
 800bee0:	3001      	adds	r0, #1
 800bee2:	d03a      	beq.n	800bf5a <_malloc_r+0xea>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	442b      	add	r3, r5
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	f8d8 3000 	ldr.w	r3, [r8]
 800beee:	685a      	ldr	r2, [r3, #4]
 800bef0:	bb62      	cbnz	r2, 800bf4c <_malloc_r+0xdc>
 800bef2:	f8c8 7000 	str.w	r7, [r8]
 800bef6:	e00f      	b.n	800bf18 <_malloc_r+0xa8>
 800bef8:	6822      	ldr	r2, [r4, #0]
 800befa:	1b52      	subs	r2, r2, r5
 800befc:	d420      	bmi.n	800bf40 <_malloc_r+0xd0>
 800befe:	2a0b      	cmp	r2, #11
 800bf00:	d917      	bls.n	800bf32 <_malloc_r+0xc2>
 800bf02:	1961      	adds	r1, r4, r5
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	6025      	str	r5, [r4, #0]
 800bf08:	bf18      	it	ne
 800bf0a:	6059      	strne	r1, [r3, #4]
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	bf08      	it	eq
 800bf10:	f8c8 1000 	streq.w	r1, [r8]
 800bf14:	5162      	str	r2, [r4, r5]
 800bf16:	604b      	str	r3, [r1, #4]
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f000 f82f 	bl	800bf7c <__malloc_unlock>
 800bf1e:	f104 000b 	add.w	r0, r4, #11
 800bf22:	1d23      	adds	r3, r4, #4
 800bf24:	f020 0007 	bic.w	r0, r0, #7
 800bf28:	1ac2      	subs	r2, r0, r3
 800bf2a:	bf1c      	itt	ne
 800bf2c:	1a1b      	subne	r3, r3, r0
 800bf2e:	50a3      	strne	r3, [r4, r2]
 800bf30:	e7af      	b.n	800be92 <_malloc_r+0x22>
 800bf32:	6862      	ldr	r2, [r4, #4]
 800bf34:	42a3      	cmp	r3, r4
 800bf36:	bf0c      	ite	eq
 800bf38:	f8c8 2000 	streq.w	r2, [r8]
 800bf3c:	605a      	strne	r2, [r3, #4]
 800bf3e:	e7eb      	b.n	800bf18 <_malloc_r+0xa8>
 800bf40:	4623      	mov	r3, r4
 800bf42:	6864      	ldr	r4, [r4, #4]
 800bf44:	e7ae      	b.n	800bea4 <_malloc_r+0x34>
 800bf46:	463c      	mov	r4, r7
 800bf48:	687f      	ldr	r7, [r7, #4]
 800bf4a:	e7b6      	b.n	800beba <_malloc_r+0x4a>
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	42a3      	cmp	r3, r4
 800bf52:	d1fb      	bne.n	800bf4c <_malloc_r+0xdc>
 800bf54:	2300      	movs	r3, #0
 800bf56:	6053      	str	r3, [r2, #4]
 800bf58:	e7de      	b.n	800bf18 <_malloc_r+0xa8>
 800bf5a:	230c      	movs	r3, #12
 800bf5c:	6033      	str	r3, [r6, #0]
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f000 f80c 	bl	800bf7c <__malloc_unlock>
 800bf64:	e794      	b.n	800be90 <_malloc_r+0x20>
 800bf66:	6005      	str	r5, [r0, #0]
 800bf68:	e7d6      	b.n	800bf18 <_malloc_r+0xa8>
 800bf6a:	bf00      	nop
 800bf6c:	2001de74 	.word	0x2001de74

0800bf70 <__malloc_lock>:
 800bf70:	4801      	ldr	r0, [pc, #4]	@ (800bf78 <__malloc_lock+0x8>)
 800bf72:	f7ff b8b8 	b.w	800b0e6 <__retarget_lock_acquire_recursive>
 800bf76:	bf00      	nop
 800bf78:	2001de6c 	.word	0x2001de6c

0800bf7c <__malloc_unlock>:
 800bf7c:	4801      	ldr	r0, [pc, #4]	@ (800bf84 <__malloc_unlock+0x8>)
 800bf7e:	f7ff b8b3 	b.w	800b0e8 <__retarget_lock_release_recursive>
 800bf82:	bf00      	nop
 800bf84:	2001de6c 	.word	0x2001de6c

0800bf88 <_Balloc>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	69c6      	ldr	r6, [r0, #28]
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	460d      	mov	r5, r1
 800bf90:	b976      	cbnz	r6, 800bfb0 <_Balloc+0x28>
 800bf92:	2010      	movs	r0, #16
 800bf94:	f7ff ff42 	bl	800be1c <malloc>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	61e0      	str	r0, [r4, #28]
 800bf9c:	b920      	cbnz	r0, 800bfa8 <_Balloc+0x20>
 800bf9e:	4b18      	ldr	r3, [pc, #96]	@ (800c000 <_Balloc+0x78>)
 800bfa0:	4818      	ldr	r0, [pc, #96]	@ (800c004 <_Balloc+0x7c>)
 800bfa2:	216b      	movs	r1, #107	@ 0x6b
 800bfa4:	f000 fdae 	bl	800cb04 <__assert_func>
 800bfa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfac:	6006      	str	r6, [r0, #0]
 800bfae:	60c6      	str	r6, [r0, #12]
 800bfb0:	69e6      	ldr	r6, [r4, #28]
 800bfb2:	68f3      	ldr	r3, [r6, #12]
 800bfb4:	b183      	cbz	r3, 800bfd8 <_Balloc+0x50>
 800bfb6:	69e3      	ldr	r3, [r4, #28]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfbe:	b9b8      	cbnz	r0, 800bff0 <_Balloc+0x68>
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	fa01 f605 	lsl.w	r6, r1, r5
 800bfc6:	1d72      	adds	r2, r6, #5
 800bfc8:	0092      	lsls	r2, r2, #2
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f000 fdb8 	bl	800cb40 <_calloc_r>
 800bfd0:	b160      	cbz	r0, 800bfec <_Balloc+0x64>
 800bfd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfd6:	e00e      	b.n	800bff6 <_Balloc+0x6e>
 800bfd8:	2221      	movs	r2, #33	@ 0x21
 800bfda:	2104      	movs	r1, #4
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 fdaf 	bl	800cb40 <_calloc_r>
 800bfe2:	69e3      	ldr	r3, [r4, #28]
 800bfe4:	60f0      	str	r0, [r6, #12]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1e4      	bne.n	800bfb6 <_Balloc+0x2e>
 800bfec:	2000      	movs	r0, #0
 800bfee:	bd70      	pop	{r4, r5, r6, pc}
 800bff0:	6802      	ldr	r2, [r0, #0]
 800bff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bff6:	2300      	movs	r3, #0
 800bff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bffc:	e7f7      	b.n	800bfee <_Balloc+0x66>
 800bffe:	bf00      	nop
 800c000:	08020ff5 	.word	0x08020ff5
 800c004:	08021075 	.word	0x08021075

0800c008 <_Bfree>:
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	69c6      	ldr	r6, [r0, #28]
 800c00c:	4605      	mov	r5, r0
 800c00e:	460c      	mov	r4, r1
 800c010:	b976      	cbnz	r6, 800c030 <_Bfree+0x28>
 800c012:	2010      	movs	r0, #16
 800c014:	f7ff ff02 	bl	800be1c <malloc>
 800c018:	4602      	mov	r2, r0
 800c01a:	61e8      	str	r0, [r5, #28]
 800c01c:	b920      	cbnz	r0, 800c028 <_Bfree+0x20>
 800c01e:	4b09      	ldr	r3, [pc, #36]	@ (800c044 <_Bfree+0x3c>)
 800c020:	4809      	ldr	r0, [pc, #36]	@ (800c048 <_Bfree+0x40>)
 800c022:	218f      	movs	r1, #143	@ 0x8f
 800c024:	f000 fd6e 	bl	800cb04 <__assert_func>
 800c028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c02c:	6006      	str	r6, [r0, #0]
 800c02e:	60c6      	str	r6, [r0, #12]
 800c030:	b13c      	cbz	r4, 800c042 <_Bfree+0x3a>
 800c032:	69eb      	ldr	r3, [r5, #28]
 800c034:	6862      	ldr	r2, [r4, #4]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c03c:	6021      	str	r1, [r4, #0]
 800c03e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c042:	bd70      	pop	{r4, r5, r6, pc}
 800c044:	08020ff5 	.word	0x08020ff5
 800c048:	08021075 	.word	0x08021075

0800c04c <__multadd>:
 800c04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c050:	690d      	ldr	r5, [r1, #16]
 800c052:	4607      	mov	r7, r0
 800c054:	460c      	mov	r4, r1
 800c056:	461e      	mov	r6, r3
 800c058:	f101 0c14 	add.w	ip, r1, #20
 800c05c:	2000      	movs	r0, #0
 800c05e:	f8dc 3000 	ldr.w	r3, [ip]
 800c062:	b299      	uxth	r1, r3
 800c064:	fb02 6101 	mla	r1, r2, r1, r6
 800c068:	0c1e      	lsrs	r6, r3, #16
 800c06a:	0c0b      	lsrs	r3, r1, #16
 800c06c:	fb02 3306 	mla	r3, r2, r6, r3
 800c070:	b289      	uxth	r1, r1
 800c072:	3001      	adds	r0, #1
 800c074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c078:	4285      	cmp	r5, r0
 800c07a:	f84c 1b04 	str.w	r1, [ip], #4
 800c07e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c082:	dcec      	bgt.n	800c05e <__multadd+0x12>
 800c084:	b30e      	cbz	r6, 800c0ca <__multadd+0x7e>
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	42ab      	cmp	r3, r5
 800c08a:	dc19      	bgt.n	800c0c0 <__multadd+0x74>
 800c08c:	6861      	ldr	r1, [r4, #4]
 800c08e:	4638      	mov	r0, r7
 800c090:	3101      	adds	r1, #1
 800c092:	f7ff ff79 	bl	800bf88 <_Balloc>
 800c096:	4680      	mov	r8, r0
 800c098:	b928      	cbnz	r0, 800c0a6 <__multadd+0x5a>
 800c09a:	4602      	mov	r2, r0
 800c09c:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d0 <__multadd+0x84>)
 800c09e:	480d      	ldr	r0, [pc, #52]	@ (800c0d4 <__multadd+0x88>)
 800c0a0:	21ba      	movs	r1, #186	@ 0xba
 800c0a2:	f000 fd2f 	bl	800cb04 <__assert_func>
 800c0a6:	6922      	ldr	r2, [r4, #16]
 800c0a8:	3202      	adds	r2, #2
 800c0aa:	f104 010c 	add.w	r1, r4, #12
 800c0ae:	0092      	lsls	r2, r2, #2
 800c0b0:	300c      	adds	r0, #12
 800c0b2:	f000 fd19 	bl	800cae8 <memcpy>
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7ff ffa5 	bl	800c008 <_Bfree>
 800c0be:	4644      	mov	r4, r8
 800c0c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	615e      	str	r6, [r3, #20]
 800c0c8:	6125      	str	r5, [r4, #16]
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d0:	08021064 	.word	0x08021064
 800c0d4:	08021075 	.word	0x08021075

0800c0d8 <__hi0bits>:
 800c0d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0dc:	4603      	mov	r3, r0
 800c0de:	bf36      	itet	cc
 800c0e0:	0403      	lslcc	r3, r0, #16
 800c0e2:	2000      	movcs	r0, #0
 800c0e4:	2010      	movcc	r0, #16
 800c0e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0ea:	bf3c      	itt	cc
 800c0ec:	021b      	lslcc	r3, r3, #8
 800c0ee:	3008      	addcc	r0, #8
 800c0f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0f4:	bf3c      	itt	cc
 800c0f6:	011b      	lslcc	r3, r3, #4
 800c0f8:	3004      	addcc	r0, #4
 800c0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0fe:	bf3c      	itt	cc
 800c100:	009b      	lslcc	r3, r3, #2
 800c102:	3002      	addcc	r0, #2
 800c104:	2b00      	cmp	r3, #0
 800c106:	db05      	blt.n	800c114 <__hi0bits+0x3c>
 800c108:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c10c:	f100 0001 	add.w	r0, r0, #1
 800c110:	bf08      	it	eq
 800c112:	2020      	moveq	r0, #32
 800c114:	4770      	bx	lr

0800c116 <__lo0bits>:
 800c116:	6803      	ldr	r3, [r0, #0]
 800c118:	4602      	mov	r2, r0
 800c11a:	f013 0007 	ands.w	r0, r3, #7
 800c11e:	d00b      	beq.n	800c138 <__lo0bits+0x22>
 800c120:	07d9      	lsls	r1, r3, #31
 800c122:	d421      	bmi.n	800c168 <__lo0bits+0x52>
 800c124:	0798      	lsls	r0, r3, #30
 800c126:	bf49      	itett	mi
 800c128:	085b      	lsrmi	r3, r3, #1
 800c12a:	089b      	lsrpl	r3, r3, #2
 800c12c:	2001      	movmi	r0, #1
 800c12e:	6013      	strmi	r3, [r2, #0]
 800c130:	bf5c      	itt	pl
 800c132:	6013      	strpl	r3, [r2, #0]
 800c134:	2002      	movpl	r0, #2
 800c136:	4770      	bx	lr
 800c138:	b299      	uxth	r1, r3
 800c13a:	b909      	cbnz	r1, 800c140 <__lo0bits+0x2a>
 800c13c:	0c1b      	lsrs	r3, r3, #16
 800c13e:	2010      	movs	r0, #16
 800c140:	b2d9      	uxtb	r1, r3
 800c142:	b909      	cbnz	r1, 800c148 <__lo0bits+0x32>
 800c144:	3008      	adds	r0, #8
 800c146:	0a1b      	lsrs	r3, r3, #8
 800c148:	0719      	lsls	r1, r3, #28
 800c14a:	bf04      	itt	eq
 800c14c:	091b      	lsreq	r3, r3, #4
 800c14e:	3004      	addeq	r0, #4
 800c150:	0799      	lsls	r1, r3, #30
 800c152:	bf04      	itt	eq
 800c154:	089b      	lsreq	r3, r3, #2
 800c156:	3002      	addeq	r0, #2
 800c158:	07d9      	lsls	r1, r3, #31
 800c15a:	d403      	bmi.n	800c164 <__lo0bits+0x4e>
 800c15c:	085b      	lsrs	r3, r3, #1
 800c15e:	f100 0001 	add.w	r0, r0, #1
 800c162:	d003      	beq.n	800c16c <__lo0bits+0x56>
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	4770      	bx	lr
 800c168:	2000      	movs	r0, #0
 800c16a:	4770      	bx	lr
 800c16c:	2020      	movs	r0, #32
 800c16e:	4770      	bx	lr

0800c170 <__i2b>:
 800c170:	b510      	push	{r4, lr}
 800c172:	460c      	mov	r4, r1
 800c174:	2101      	movs	r1, #1
 800c176:	f7ff ff07 	bl	800bf88 <_Balloc>
 800c17a:	4602      	mov	r2, r0
 800c17c:	b928      	cbnz	r0, 800c18a <__i2b+0x1a>
 800c17e:	4b05      	ldr	r3, [pc, #20]	@ (800c194 <__i2b+0x24>)
 800c180:	4805      	ldr	r0, [pc, #20]	@ (800c198 <__i2b+0x28>)
 800c182:	f240 1145 	movw	r1, #325	@ 0x145
 800c186:	f000 fcbd 	bl	800cb04 <__assert_func>
 800c18a:	2301      	movs	r3, #1
 800c18c:	6144      	str	r4, [r0, #20]
 800c18e:	6103      	str	r3, [r0, #16]
 800c190:	bd10      	pop	{r4, pc}
 800c192:	bf00      	nop
 800c194:	08021064 	.word	0x08021064
 800c198:	08021075 	.word	0x08021075

0800c19c <__multiply>:
 800c19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	690a      	ldr	r2, [r1, #16]
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	bfa8      	it	ge
 800c1aa:	4623      	movge	r3, r4
 800c1ac:	460f      	mov	r7, r1
 800c1ae:	bfa4      	itt	ge
 800c1b0:	460c      	movge	r4, r1
 800c1b2:	461f      	movge	r7, r3
 800c1b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c1b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	6861      	ldr	r1, [r4, #4]
 800c1c0:	eb0a 0609 	add.w	r6, sl, r9
 800c1c4:	42b3      	cmp	r3, r6
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	bfb8      	it	lt
 800c1ca:	3101      	addlt	r1, #1
 800c1cc:	f7ff fedc 	bl	800bf88 <_Balloc>
 800c1d0:	b930      	cbnz	r0, 800c1e0 <__multiply+0x44>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	4b44      	ldr	r3, [pc, #272]	@ (800c2e8 <__multiply+0x14c>)
 800c1d6:	4845      	ldr	r0, [pc, #276]	@ (800c2ec <__multiply+0x150>)
 800c1d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1dc:	f000 fc92 	bl	800cb04 <__assert_func>
 800c1e0:	f100 0514 	add.w	r5, r0, #20
 800c1e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1e8:	462b      	mov	r3, r5
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	4543      	cmp	r3, r8
 800c1ee:	d321      	bcc.n	800c234 <__multiply+0x98>
 800c1f0:	f107 0114 	add.w	r1, r7, #20
 800c1f4:	f104 0214 	add.w	r2, r4, #20
 800c1f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c1fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c200:	9302      	str	r3, [sp, #8]
 800c202:	1b13      	subs	r3, r2, r4
 800c204:	3b15      	subs	r3, #21
 800c206:	f023 0303 	bic.w	r3, r3, #3
 800c20a:	3304      	adds	r3, #4
 800c20c:	f104 0715 	add.w	r7, r4, #21
 800c210:	42ba      	cmp	r2, r7
 800c212:	bf38      	it	cc
 800c214:	2304      	movcc	r3, #4
 800c216:	9301      	str	r3, [sp, #4]
 800c218:	9b02      	ldr	r3, [sp, #8]
 800c21a:	9103      	str	r1, [sp, #12]
 800c21c:	428b      	cmp	r3, r1
 800c21e:	d80c      	bhi.n	800c23a <__multiply+0x9e>
 800c220:	2e00      	cmp	r6, #0
 800c222:	dd03      	ble.n	800c22c <__multiply+0x90>
 800c224:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d05b      	beq.n	800c2e4 <__multiply+0x148>
 800c22c:	6106      	str	r6, [r0, #16]
 800c22e:	b005      	add	sp, #20
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c234:	f843 2b04 	str.w	r2, [r3], #4
 800c238:	e7d8      	b.n	800c1ec <__multiply+0x50>
 800c23a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c23e:	f1ba 0f00 	cmp.w	sl, #0
 800c242:	d024      	beq.n	800c28e <__multiply+0xf2>
 800c244:	f104 0e14 	add.w	lr, r4, #20
 800c248:	46a9      	mov	r9, r5
 800c24a:	f04f 0c00 	mov.w	ip, #0
 800c24e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c252:	f8d9 3000 	ldr.w	r3, [r9]
 800c256:	fa1f fb87 	uxth.w	fp, r7
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c260:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c264:	f8d9 7000 	ldr.w	r7, [r9]
 800c268:	4463      	add	r3, ip
 800c26a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c26e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c272:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c276:	b29b      	uxth	r3, r3
 800c278:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c27c:	4572      	cmp	r2, lr
 800c27e:	f849 3b04 	str.w	r3, [r9], #4
 800c282:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c286:	d8e2      	bhi.n	800c24e <__multiply+0xb2>
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	f845 c003 	str.w	ip, [r5, r3]
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c294:	3104      	adds	r1, #4
 800c296:	f1b9 0f00 	cmp.w	r9, #0
 800c29a:	d021      	beq.n	800c2e0 <__multiply+0x144>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	f104 0c14 	add.w	ip, r4, #20
 800c2a2:	46ae      	mov	lr, r5
 800c2a4:	f04f 0a00 	mov.w	sl, #0
 800c2a8:	f8bc b000 	ldrh.w	fp, [ip]
 800c2ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c2b0:	fb09 770b 	mla	r7, r9, fp, r7
 800c2b4:	4457      	add	r7, sl
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2bc:	f84e 3b04 	str.w	r3, [lr], #4
 800c2c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2c8:	f8be 3000 	ldrh.w	r3, [lr]
 800c2cc:	fb09 330a 	mla	r3, r9, sl, r3
 800c2d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c2d4:	4562      	cmp	r2, ip
 800c2d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2da:	d8e5      	bhi.n	800c2a8 <__multiply+0x10c>
 800c2dc:	9f01      	ldr	r7, [sp, #4]
 800c2de:	51eb      	str	r3, [r5, r7]
 800c2e0:	3504      	adds	r5, #4
 800c2e2:	e799      	b.n	800c218 <__multiply+0x7c>
 800c2e4:	3e01      	subs	r6, #1
 800c2e6:	e79b      	b.n	800c220 <__multiply+0x84>
 800c2e8:	08021064 	.word	0x08021064
 800c2ec:	08021075 	.word	0x08021075

0800c2f0 <__pow5mult>:
 800c2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	4615      	mov	r5, r2
 800c2f6:	f012 0203 	ands.w	r2, r2, #3
 800c2fa:	4607      	mov	r7, r0
 800c2fc:	460e      	mov	r6, r1
 800c2fe:	d007      	beq.n	800c310 <__pow5mult+0x20>
 800c300:	4c25      	ldr	r4, [pc, #148]	@ (800c398 <__pow5mult+0xa8>)
 800c302:	3a01      	subs	r2, #1
 800c304:	2300      	movs	r3, #0
 800c306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c30a:	f7ff fe9f 	bl	800c04c <__multadd>
 800c30e:	4606      	mov	r6, r0
 800c310:	10ad      	asrs	r5, r5, #2
 800c312:	d03d      	beq.n	800c390 <__pow5mult+0xa0>
 800c314:	69fc      	ldr	r4, [r7, #28]
 800c316:	b97c      	cbnz	r4, 800c338 <__pow5mult+0x48>
 800c318:	2010      	movs	r0, #16
 800c31a:	f7ff fd7f 	bl	800be1c <malloc>
 800c31e:	4602      	mov	r2, r0
 800c320:	61f8      	str	r0, [r7, #28]
 800c322:	b928      	cbnz	r0, 800c330 <__pow5mult+0x40>
 800c324:	4b1d      	ldr	r3, [pc, #116]	@ (800c39c <__pow5mult+0xac>)
 800c326:	481e      	ldr	r0, [pc, #120]	@ (800c3a0 <__pow5mult+0xb0>)
 800c328:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c32c:	f000 fbea 	bl	800cb04 <__assert_func>
 800c330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c334:	6004      	str	r4, [r0, #0]
 800c336:	60c4      	str	r4, [r0, #12]
 800c338:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c33c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c340:	b94c      	cbnz	r4, 800c356 <__pow5mult+0x66>
 800c342:	f240 2171 	movw	r1, #625	@ 0x271
 800c346:	4638      	mov	r0, r7
 800c348:	f7ff ff12 	bl	800c170 <__i2b>
 800c34c:	2300      	movs	r3, #0
 800c34e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c352:	4604      	mov	r4, r0
 800c354:	6003      	str	r3, [r0, #0]
 800c356:	f04f 0900 	mov.w	r9, #0
 800c35a:	07eb      	lsls	r3, r5, #31
 800c35c:	d50a      	bpl.n	800c374 <__pow5mult+0x84>
 800c35e:	4631      	mov	r1, r6
 800c360:	4622      	mov	r2, r4
 800c362:	4638      	mov	r0, r7
 800c364:	f7ff ff1a 	bl	800c19c <__multiply>
 800c368:	4631      	mov	r1, r6
 800c36a:	4680      	mov	r8, r0
 800c36c:	4638      	mov	r0, r7
 800c36e:	f7ff fe4b 	bl	800c008 <_Bfree>
 800c372:	4646      	mov	r6, r8
 800c374:	106d      	asrs	r5, r5, #1
 800c376:	d00b      	beq.n	800c390 <__pow5mult+0xa0>
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	b938      	cbnz	r0, 800c38c <__pow5mult+0x9c>
 800c37c:	4622      	mov	r2, r4
 800c37e:	4621      	mov	r1, r4
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff ff0b 	bl	800c19c <__multiply>
 800c386:	6020      	str	r0, [r4, #0]
 800c388:	f8c0 9000 	str.w	r9, [r0]
 800c38c:	4604      	mov	r4, r0
 800c38e:	e7e4      	b.n	800c35a <__pow5mult+0x6a>
 800c390:	4630      	mov	r0, r6
 800c392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c396:	bf00      	nop
 800c398:	080210d0 	.word	0x080210d0
 800c39c:	08020ff5 	.word	0x08020ff5
 800c3a0:	08021075 	.word	0x08021075

0800c3a4 <__lshift>:
 800c3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	6849      	ldr	r1, [r1, #4]
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	4691      	mov	r9, r2
 800c3b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3bc:	f108 0601 	add.w	r6, r8, #1
 800c3c0:	42b3      	cmp	r3, r6
 800c3c2:	db0b      	blt.n	800c3dc <__lshift+0x38>
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	f7ff fddf 	bl	800bf88 <_Balloc>
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	b948      	cbnz	r0, 800c3e2 <__lshift+0x3e>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	4b28      	ldr	r3, [pc, #160]	@ (800c474 <__lshift+0xd0>)
 800c3d2:	4829      	ldr	r0, [pc, #164]	@ (800c478 <__lshift+0xd4>)
 800c3d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3d8:	f000 fb94 	bl	800cb04 <__assert_func>
 800c3dc:	3101      	adds	r1, #1
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	e7ee      	b.n	800c3c0 <__lshift+0x1c>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	f100 0114 	add.w	r1, r0, #20
 800c3e8:	f100 0210 	add.w	r2, r0, #16
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	4553      	cmp	r3, sl
 800c3f0:	db33      	blt.n	800c45a <__lshift+0xb6>
 800c3f2:	6920      	ldr	r0, [r4, #16]
 800c3f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3f8:	f104 0314 	add.w	r3, r4, #20
 800c3fc:	f019 091f 	ands.w	r9, r9, #31
 800c400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c404:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c408:	d02b      	beq.n	800c462 <__lshift+0xbe>
 800c40a:	f1c9 0e20 	rsb	lr, r9, #32
 800c40e:	468a      	mov	sl, r1
 800c410:	2200      	movs	r2, #0
 800c412:	6818      	ldr	r0, [r3, #0]
 800c414:	fa00 f009 	lsl.w	r0, r0, r9
 800c418:	4310      	orrs	r0, r2
 800c41a:	f84a 0b04 	str.w	r0, [sl], #4
 800c41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c422:	459c      	cmp	ip, r3
 800c424:	fa22 f20e 	lsr.w	r2, r2, lr
 800c428:	d8f3      	bhi.n	800c412 <__lshift+0x6e>
 800c42a:	ebac 0304 	sub.w	r3, ip, r4
 800c42e:	3b15      	subs	r3, #21
 800c430:	f023 0303 	bic.w	r3, r3, #3
 800c434:	3304      	adds	r3, #4
 800c436:	f104 0015 	add.w	r0, r4, #21
 800c43a:	4584      	cmp	ip, r0
 800c43c:	bf38      	it	cc
 800c43e:	2304      	movcc	r3, #4
 800c440:	50ca      	str	r2, [r1, r3]
 800c442:	b10a      	cbz	r2, 800c448 <__lshift+0xa4>
 800c444:	f108 0602 	add.w	r6, r8, #2
 800c448:	3e01      	subs	r6, #1
 800c44a:	4638      	mov	r0, r7
 800c44c:	612e      	str	r6, [r5, #16]
 800c44e:	4621      	mov	r1, r4
 800c450:	f7ff fdda 	bl	800c008 <_Bfree>
 800c454:	4628      	mov	r0, r5
 800c456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c45a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c45e:	3301      	adds	r3, #1
 800c460:	e7c5      	b.n	800c3ee <__lshift+0x4a>
 800c462:	3904      	subs	r1, #4
 800c464:	f853 2b04 	ldr.w	r2, [r3], #4
 800c468:	f841 2f04 	str.w	r2, [r1, #4]!
 800c46c:	459c      	cmp	ip, r3
 800c46e:	d8f9      	bhi.n	800c464 <__lshift+0xc0>
 800c470:	e7ea      	b.n	800c448 <__lshift+0xa4>
 800c472:	bf00      	nop
 800c474:	08021064 	.word	0x08021064
 800c478:	08021075 	.word	0x08021075

0800c47c <__mcmp>:
 800c47c:	690a      	ldr	r2, [r1, #16]
 800c47e:	4603      	mov	r3, r0
 800c480:	6900      	ldr	r0, [r0, #16]
 800c482:	1a80      	subs	r0, r0, r2
 800c484:	b530      	push	{r4, r5, lr}
 800c486:	d10e      	bne.n	800c4a6 <__mcmp+0x2a>
 800c488:	3314      	adds	r3, #20
 800c48a:	3114      	adds	r1, #20
 800c48c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c490:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c494:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c498:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c49c:	4295      	cmp	r5, r2
 800c49e:	d003      	beq.n	800c4a8 <__mcmp+0x2c>
 800c4a0:	d205      	bcs.n	800c4ae <__mcmp+0x32>
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a6:	bd30      	pop	{r4, r5, pc}
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	d3f3      	bcc.n	800c494 <__mcmp+0x18>
 800c4ac:	e7fb      	b.n	800c4a6 <__mcmp+0x2a>
 800c4ae:	2001      	movs	r0, #1
 800c4b0:	e7f9      	b.n	800c4a6 <__mcmp+0x2a>
	...

0800c4b4 <__mdiff>:
 800c4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	4689      	mov	r9, r1
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4648      	mov	r0, r9
 800c4c0:	4614      	mov	r4, r2
 800c4c2:	f7ff ffdb 	bl	800c47c <__mcmp>
 800c4c6:	1e05      	subs	r5, r0, #0
 800c4c8:	d112      	bne.n	800c4f0 <__mdiff+0x3c>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f7ff fd5b 	bl	800bf88 <_Balloc>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	b928      	cbnz	r0, 800c4e2 <__mdiff+0x2e>
 800c4d6:	4b3f      	ldr	r3, [pc, #252]	@ (800c5d4 <__mdiff+0x120>)
 800c4d8:	f240 2137 	movw	r1, #567	@ 0x237
 800c4dc:	483e      	ldr	r0, [pc, #248]	@ (800c5d8 <__mdiff+0x124>)
 800c4de:	f000 fb11 	bl	800cb04 <__assert_func>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	b003      	add	sp, #12
 800c4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f0:	bfbc      	itt	lt
 800c4f2:	464b      	movlt	r3, r9
 800c4f4:	46a1      	movlt	r9, r4
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4fc:	bfba      	itte	lt
 800c4fe:	461c      	movlt	r4, r3
 800c500:	2501      	movlt	r5, #1
 800c502:	2500      	movge	r5, #0
 800c504:	f7ff fd40 	bl	800bf88 <_Balloc>
 800c508:	4602      	mov	r2, r0
 800c50a:	b918      	cbnz	r0, 800c514 <__mdiff+0x60>
 800c50c:	4b31      	ldr	r3, [pc, #196]	@ (800c5d4 <__mdiff+0x120>)
 800c50e:	f240 2145 	movw	r1, #581	@ 0x245
 800c512:	e7e3      	b.n	800c4dc <__mdiff+0x28>
 800c514:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c518:	6926      	ldr	r6, [r4, #16]
 800c51a:	60c5      	str	r5, [r0, #12]
 800c51c:	f109 0310 	add.w	r3, r9, #16
 800c520:	f109 0514 	add.w	r5, r9, #20
 800c524:	f104 0e14 	add.w	lr, r4, #20
 800c528:	f100 0b14 	add.w	fp, r0, #20
 800c52c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c530:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c534:	9301      	str	r3, [sp, #4]
 800c536:	46d9      	mov	r9, fp
 800c538:	f04f 0c00 	mov.w	ip, #0
 800c53c:	9b01      	ldr	r3, [sp, #4]
 800c53e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c542:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	fa1f f38a 	uxth.w	r3, sl
 800c54c:	4619      	mov	r1, r3
 800c54e:	b283      	uxth	r3, r0
 800c550:	1acb      	subs	r3, r1, r3
 800c552:	0c00      	lsrs	r0, r0, #16
 800c554:	4463      	add	r3, ip
 800c556:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c55a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c55e:	b29b      	uxth	r3, r3
 800c560:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c564:	4576      	cmp	r6, lr
 800c566:	f849 3b04 	str.w	r3, [r9], #4
 800c56a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c56e:	d8e5      	bhi.n	800c53c <__mdiff+0x88>
 800c570:	1b33      	subs	r3, r6, r4
 800c572:	3b15      	subs	r3, #21
 800c574:	f023 0303 	bic.w	r3, r3, #3
 800c578:	3415      	adds	r4, #21
 800c57a:	3304      	adds	r3, #4
 800c57c:	42a6      	cmp	r6, r4
 800c57e:	bf38      	it	cc
 800c580:	2304      	movcc	r3, #4
 800c582:	441d      	add	r5, r3
 800c584:	445b      	add	r3, fp
 800c586:	461e      	mov	r6, r3
 800c588:	462c      	mov	r4, r5
 800c58a:	4544      	cmp	r4, r8
 800c58c:	d30e      	bcc.n	800c5ac <__mdiff+0xf8>
 800c58e:	f108 0103 	add.w	r1, r8, #3
 800c592:	1b49      	subs	r1, r1, r5
 800c594:	f021 0103 	bic.w	r1, r1, #3
 800c598:	3d03      	subs	r5, #3
 800c59a:	45a8      	cmp	r8, r5
 800c59c:	bf38      	it	cc
 800c59e:	2100      	movcc	r1, #0
 800c5a0:	440b      	add	r3, r1
 800c5a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5a6:	b191      	cbz	r1, 800c5ce <__mdiff+0x11a>
 800c5a8:	6117      	str	r7, [r2, #16]
 800c5aa:	e79d      	b.n	800c4e8 <__mdiff+0x34>
 800c5ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800c5b0:	46e6      	mov	lr, ip
 800c5b2:	0c08      	lsrs	r0, r1, #16
 800c5b4:	fa1c fc81 	uxtah	ip, ip, r1
 800c5b8:	4471      	add	r1, lr
 800c5ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c5be:	b289      	uxth	r1, r1
 800c5c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c5c4:	f846 1b04 	str.w	r1, [r6], #4
 800c5c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5cc:	e7dd      	b.n	800c58a <__mdiff+0xd6>
 800c5ce:	3f01      	subs	r7, #1
 800c5d0:	e7e7      	b.n	800c5a2 <__mdiff+0xee>
 800c5d2:	bf00      	nop
 800c5d4:	08021064 	.word	0x08021064
 800c5d8:	08021075 	.word	0x08021075

0800c5dc <__d2b>:
 800c5dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	460f      	mov	r7, r1
 800c5e2:	2101      	movs	r1, #1
 800c5e4:	ec59 8b10 	vmov	r8, r9, d0
 800c5e8:	4616      	mov	r6, r2
 800c5ea:	f7ff fccd 	bl	800bf88 <_Balloc>
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	b930      	cbnz	r0, 800c600 <__d2b+0x24>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	4b23      	ldr	r3, [pc, #140]	@ (800c684 <__d2b+0xa8>)
 800c5f6:	4824      	ldr	r0, [pc, #144]	@ (800c688 <__d2b+0xac>)
 800c5f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c5fc:	f000 fa82 	bl	800cb04 <__assert_func>
 800c600:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c604:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c608:	b10d      	cbz	r5, 800c60e <__d2b+0x32>
 800c60a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	f1b8 0300 	subs.w	r3, r8, #0
 800c614:	d023      	beq.n	800c65e <__d2b+0x82>
 800c616:	4668      	mov	r0, sp
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	f7ff fd7c 	bl	800c116 <__lo0bits>
 800c61e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c622:	b1d0      	cbz	r0, 800c65a <__d2b+0x7e>
 800c624:	f1c0 0320 	rsb	r3, r0, #32
 800c628:	fa02 f303 	lsl.w	r3, r2, r3
 800c62c:	430b      	orrs	r3, r1
 800c62e:	40c2      	lsrs	r2, r0
 800c630:	6163      	str	r3, [r4, #20]
 800c632:	9201      	str	r2, [sp, #4]
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	61a3      	str	r3, [r4, #24]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	bf0c      	ite	eq
 800c63c:	2201      	moveq	r2, #1
 800c63e:	2202      	movne	r2, #2
 800c640:	6122      	str	r2, [r4, #16]
 800c642:	b1a5      	cbz	r5, 800c66e <__d2b+0x92>
 800c644:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c648:	4405      	add	r5, r0
 800c64a:	603d      	str	r5, [r7, #0]
 800c64c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c650:	6030      	str	r0, [r6, #0]
 800c652:	4620      	mov	r0, r4
 800c654:	b003      	add	sp, #12
 800c656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c65a:	6161      	str	r1, [r4, #20]
 800c65c:	e7ea      	b.n	800c634 <__d2b+0x58>
 800c65e:	a801      	add	r0, sp, #4
 800c660:	f7ff fd59 	bl	800c116 <__lo0bits>
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	6163      	str	r3, [r4, #20]
 800c668:	3020      	adds	r0, #32
 800c66a:	2201      	movs	r2, #1
 800c66c:	e7e8      	b.n	800c640 <__d2b+0x64>
 800c66e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c672:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c676:	6038      	str	r0, [r7, #0]
 800c678:	6918      	ldr	r0, [r3, #16]
 800c67a:	f7ff fd2d 	bl	800c0d8 <__hi0bits>
 800c67e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c682:	e7e5      	b.n	800c650 <__d2b+0x74>
 800c684:	08021064 	.word	0x08021064
 800c688:	08021075 	.word	0x08021075

0800c68c <__ssputs_r>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	688e      	ldr	r6, [r1, #8]
 800c692:	461f      	mov	r7, r3
 800c694:	42be      	cmp	r6, r7
 800c696:	680b      	ldr	r3, [r1, #0]
 800c698:	4682      	mov	sl, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	4690      	mov	r8, r2
 800c69e:	d82d      	bhi.n	800c6fc <__ssputs_r+0x70>
 800c6a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6a8:	d026      	beq.n	800c6f8 <__ssputs_r+0x6c>
 800c6aa:	6965      	ldr	r5, [r4, #20]
 800c6ac:	6909      	ldr	r1, [r1, #16]
 800c6ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6b2:	eba3 0901 	sub.w	r9, r3, r1
 800c6b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6ba:	1c7b      	adds	r3, r7, #1
 800c6bc:	444b      	add	r3, r9
 800c6be:	106d      	asrs	r5, r5, #1
 800c6c0:	429d      	cmp	r5, r3
 800c6c2:	bf38      	it	cc
 800c6c4:	461d      	movcc	r5, r3
 800c6c6:	0553      	lsls	r3, r2, #21
 800c6c8:	d527      	bpl.n	800c71a <__ssputs_r+0x8e>
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7ff fbd0 	bl	800be70 <_malloc_r>
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	b360      	cbz	r0, 800c72e <__ssputs_r+0xa2>
 800c6d4:	6921      	ldr	r1, [r4, #16]
 800c6d6:	464a      	mov	r2, r9
 800c6d8:	f000 fa06 	bl	800cae8 <memcpy>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6e6:	81a3      	strh	r3, [r4, #12]
 800c6e8:	6126      	str	r6, [r4, #16]
 800c6ea:	6165      	str	r5, [r4, #20]
 800c6ec:	444e      	add	r6, r9
 800c6ee:	eba5 0509 	sub.w	r5, r5, r9
 800c6f2:	6026      	str	r6, [r4, #0]
 800c6f4:	60a5      	str	r5, [r4, #8]
 800c6f6:	463e      	mov	r6, r7
 800c6f8:	42be      	cmp	r6, r7
 800c6fa:	d900      	bls.n	800c6fe <__ssputs_r+0x72>
 800c6fc:	463e      	mov	r6, r7
 800c6fe:	6820      	ldr	r0, [r4, #0]
 800c700:	4632      	mov	r2, r6
 800c702:	4641      	mov	r1, r8
 800c704:	f000 f9c6 	bl	800ca94 <memmove>
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	1b9b      	subs	r3, r3, r6
 800c70c:	60a3      	str	r3, [r4, #8]
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	4433      	add	r3, r6
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	2000      	movs	r0, #0
 800c716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71a:	462a      	mov	r2, r5
 800c71c:	f000 fa36 	bl	800cb8c <_realloc_r>
 800c720:	4606      	mov	r6, r0
 800c722:	2800      	cmp	r0, #0
 800c724:	d1e0      	bne.n	800c6e8 <__ssputs_r+0x5c>
 800c726:	6921      	ldr	r1, [r4, #16]
 800c728:	4650      	mov	r0, sl
 800c72a:	f7ff fb2d 	bl	800bd88 <_free_r>
 800c72e:	230c      	movs	r3, #12
 800c730:	f8ca 3000 	str.w	r3, [sl]
 800c734:	89a3      	ldrh	r3, [r4, #12]
 800c736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c73a:	81a3      	strh	r3, [r4, #12]
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295
 800c740:	e7e9      	b.n	800c716 <__ssputs_r+0x8a>
	...

0800c744 <_svfiprintf_r>:
 800c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	4698      	mov	r8, r3
 800c74a:	898b      	ldrh	r3, [r1, #12]
 800c74c:	061b      	lsls	r3, r3, #24
 800c74e:	b09d      	sub	sp, #116	@ 0x74
 800c750:	4607      	mov	r7, r0
 800c752:	460d      	mov	r5, r1
 800c754:	4614      	mov	r4, r2
 800c756:	d510      	bpl.n	800c77a <_svfiprintf_r+0x36>
 800c758:	690b      	ldr	r3, [r1, #16]
 800c75a:	b973      	cbnz	r3, 800c77a <_svfiprintf_r+0x36>
 800c75c:	2140      	movs	r1, #64	@ 0x40
 800c75e:	f7ff fb87 	bl	800be70 <_malloc_r>
 800c762:	6028      	str	r0, [r5, #0]
 800c764:	6128      	str	r0, [r5, #16]
 800c766:	b930      	cbnz	r0, 800c776 <_svfiprintf_r+0x32>
 800c768:	230c      	movs	r3, #12
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	f04f 30ff 	mov.w	r0, #4294967295
 800c770:	b01d      	add	sp, #116	@ 0x74
 800c772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c776:	2340      	movs	r3, #64	@ 0x40
 800c778:	616b      	str	r3, [r5, #20]
 800c77a:	2300      	movs	r3, #0
 800c77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c77e:	2320      	movs	r3, #32
 800c780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c784:	f8cd 800c 	str.w	r8, [sp, #12]
 800c788:	2330      	movs	r3, #48	@ 0x30
 800c78a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c928 <_svfiprintf_r+0x1e4>
 800c78e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c792:	f04f 0901 	mov.w	r9, #1
 800c796:	4623      	mov	r3, r4
 800c798:	469a      	mov	sl, r3
 800c79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c79e:	b10a      	cbz	r2, 800c7a4 <_svfiprintf_r+0x60>
 800c7a0:	2a25      	cmp	r2, #37	@ 0x25
 800c7a2:	d1f9      	bne.n	800c798 <_svfiprintf_r+0x54>
 800c7a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c7a8:	d00b      	beq.n	800c7c2 <_svfiprintf_r+0x7e>
 800c7aa:	465b      	mov	r3, fp
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	f7ff ff6b 	bl	800c68c <__ssputs_r>
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f000 80a7 	beq.w	800c90a <_svfiprintf_r+0x1c6>
 800c7bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7be:	445a      	add	r2, fp
 800c7c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 809f 	beq.w	800c90a <_svfiprintf_r+0x1c6>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d6:	f10a 0a01 	add.w	sl, sl, #1
 800c7da:	9304      	str	r3, [sp, #16]
 800c7dc:	9307      	str	r3, [sp, #28]
 800c7de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7e4:	4654      	mov	r4, sl
 800c7e6:	2205      	movs	r2, #5
 800c7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ec:	484e      	ldr	r0, [pc, #312]	@ (800c928 <_svfiprintf_r+0x1e4>)
 800c7ee:	f7f3 fd6f 	bl	80002d0 <memchr>
 800c7f2:	9a04      	ldr	r2, [sp, #16]
 800c7f4:	b9d8      	cbnz	r0, 800c82e <_svfiprintf_r+0xea>
 800c7f6:	06d0      	lsls	r0, r2, #27
 800c7f8:	bf44      	itt	mi
 800c7fa:	2320      	movmi	r3, #32
 800c7fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c800:	0711      	lsls	r1, r2, #28
 800c802:	bf44      	itt	mi
 800c804:	232b      	movmi	r3, #43	@ 0x2b
 800c806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c80a:	f89a 3000 	ldrb.w	r3, [sl]
 800c80e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c810:	d015      	beq.n	800c83e <_svfiprintf_r+0xfa>
 800c812:	9a07      	ldr	r2, [sp, #28]
 800c814:	4654      	mov	r4, sl
 800c816:	2000      	movs	r0, #0
 800c818:	f04f 0c0a 	mov.w	ip, #10
 800c81c:	4621      	mov	r1, r4
 800c81e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c822:	3b30      	subs	r3, #48	@ 0x30
 800c824:	2b09      	cmp	r3, #9
 800c826:	d94b      	bls.n	800c8c0 <_svfiprintf_r+0x17c>
 800c828:	b1b0      	cbz	r0, 800c858 <_svfiprintf_r+0x114>
 800c82a:	9207      	str	r2, [sp, #28]
 800c82c:	e014      	b.n	800c858 <_svfiprintf_r+0x114>
 800c82e:	eba0 0308 	sub.w	r3, r0, r8
 800c832:	fa09 f303 	lsl.w	r3, r9, r3
 800c836:	4313      	orrs	r3, r2
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	46a2      	mov	sl, r4
 800c83c:	e7d2      	b.n	800c7e4 <_svfiprintf_r+0xa0>
 800c83e:	9b03      	ldr	r3, [sp, #12]
 800c840:	1d19      	adds	r1, r3, #4
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	9103      	str	r1, [sp, #12]
 800c846:	2b00      	cmp	r3, #0
 800c848:	bfbb      	ittet	lt
 800c84a:	425b      	neglt	r3, r3
 800c84c:	f042 0202 	orrlt.w	r2, r2, #2
 800c850:	9307      	strge	r3, [sp, #28]
 800c852:	9307      	strlt	r3, [sp, #28]
 800c854:	bfb8      	it	lt
 800c856:	9204      	strlt	r2, [sp, #16]
 800c858:	7823      	ldrb	r3, [r4, #0]
 800c85a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c85c:	d10a      	bne.n	800c874 <_svfiprintf_r+0x130>
 800c85e:	7863      	ldrb	r3, [r4, #1]
 800c860:	2b2a      	cmp	r3, #42	@ 0x2a
 800c862:	d132      	bne.n	800c8ca <_svfiprintf_r+0x186>
 800c864:	9b03      	ldr	r3, [sp, #12]
 800c866:	1d1a      	adds	r2, r3, #4
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	9203      	str	r2, [sp, #12]
 800c86c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c870:	3402      	adds	r4, #2
 800c872:	9305      	str	r3, [sp, #20]
 800c874:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c938 <_svfiprintf_r+0x1f4>
 800c878:	7821      	ldrb	r1, [r4, #0]
 800c87a:	2203      	movs	r2, #3
 800c87c:	4650      	mov	r0, sl
 800c87e:	f7f3 fd27 	bl	80002d0 <memchr>
 800c882:	b138      	cbz	r0, 800c894 <_svfiprintf_r+0x150>
 800c884:	9b04      	ldr	r3, [sp, #16]
 800c886:	eba0 000a 	sub.w	r0, r0, sl
 800c88a:	2240      	movs	r2, #64	@ 0x40
 800c88c:	4082      	lsls	r2, r0
 800c88e:	4313      	orrs	r3, r2
 800c890:	3401      	adds	r4, #1
 800c892:	9304      	str	r3, [sp, #16]
 800c894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c898:	4824      	ldr	r0, [pc, #144]	@ (800c92c <_svfiprintf_r+0x1e8>)
 800c89a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c89e:	2206      	movs	r2, #6
 800c8a0:	f7f3 fd16 	bl	80002d0 <memchr>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d036      	beq.n	800c916 <_svfiprintf_r+0x1d2>
 800c8a8:	4b21      	ldr	r3, [pc, #132]	@ (800c930 <_svfiprintf_r+0x1ec>)
 800c8aa:	bb1b      	cbnz	r3, 800c8f4 <_svfiprintf_r+0x1b0>
 800c8ac:	9b03      	ldr	r3, [sp, #12]
 800c8ae:	3307      	adds	r3, #7
 800c8b0:	f023 0307 	bic.w	r3, r3, #7
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	9303      	str	r3, [sp, #12]
 800c8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ba:	4433      	add	r3, r6
 800c8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8be:	e76a      	b.n	800c796 <_svfiprintf_r+0x52>
 800c8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	2001      	movs	r0, #1
 800c8c8:	e7a8      	b.n	800c81c <_svfiprintf_r+0xd8>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	3401      	adds	r4, #1
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f04f 0c0a 	mov.w	ip, #10
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8dc:	3a30      	subs	r2, #48	@ 0x30
 800c8de:	2a09      	cmp	r2, #9
 800c8e0:	d903      	bls.n	800c8ea <_svfiprintf_r+0x1a6>
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0c6      	beq.n	800c874 <_svfiprintf_r+0x130>
 800c8e6:	9105      	str	r1, [sp, #20]
 800c8e8:	e7c4      	b.n	800c874 <_svfiprintf_r+0x130>
 800c8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e7f0      	b.n	800c8d6 <_svfiprintf_r+0x192>
 800c8f4:	ab03      	add	r3, sp, #12
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c934 <_svfiprintf_r+0x1f0>)
 800c8fc:	a904      	add	r1, sp, #16
 800c8fe:	4638      	mov	r0, r7
 800c900:	f7fd fe86 	bl	800a610 <_printf_float>
 800c904:	1c42      	adds	r2, r0, #1
 800c906:	4606      	mov	r6, r0
 800c908:	d1d6      	bne.n	800c8b8 <_svfiprintf_r+0x174>
 800c90a:	89ab      	ldrh	r3, [r5, #12]
 800c90c:	065b      	lsls	r3, r3, #25
 800c90e:	f53f af2d 	bmi.w	800c76c <_svfiprintf_r+0x28>
 800c912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c914:	e72c      	b.n	800c770 <_svfiprintf_r+0x2c>
 800c916:	ab03      	add	r3, sp, #12
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	462a      	mov	r2, r5
 800c91c:	4b05      	ldr	r3, [pc, #20]	@ (800c934 <_svfiprintf_r+0x1f0>)
 800c91e:	a904      	add	r1, sp, #16
 800c920:	4638      	mov	r0, r7
 800c922:	f7fe f90d 	bl	800ab40 <_printf_i>
 800c926:	e7ed      	b.n	800c904 <_svfiprintf_r+0x1c0>
 800c928:	080211d0 	.word	0x080211d0
 800c92c:	080211da 	.word	0x080211da
 800c930:	0800a611 	.word	0x0800a611
 800c934:	0800c68d 	.word	0x0800c68d
 800c938:	080211d6 	.word	0x080211d6

0800c93c <__sflush_r>:
 800c93c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	0716      	lsls	r6, r2, #28
 800c946:	4605      	mov	r5, r0
 800c948:	460c      	mov	r4, r1
 800c94a:	d454      	bmi.n	800c9f6 <__sflush_r+0xba>
 800c94c:	684b      	ldr	r3, [r1, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dc02      	bgt.n	800c958 <__sflush_r+0x1c>
 800c952:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c954:	2b00      	cmp	r3, #0
 800c956:	dd48      	ble.n	800c9ea <__sflush_r+0xae>
 800c958:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c95a:	2e00      	cmp	r6, #0
 800c95c:	d045      	beq.n	800c9ea <__sflush_r+0xae>
 800c95e:	2300      	movs	r3, #0
 800c960:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c964:	682f      	ldr	r7, [r5, #0]
 800c966:	6a21      	ldr	r1, [r4, #32]
 800c968:	602b      	str	r3, [r5, #0]
 800c96a:	d030      	beq.n	800c9ce <__sflush_r+0x92>
 800c96c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c96e:	89a3      	ldrh	r3, [r4, #12]
 800c970:	0759      	lsls	r1, r3, #29
 800c972:	d505      	bpl.n	800c980 <__sflush_r+0x44>
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	1ad2      	subs	r2, r2, r3
 800c978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c97a:	b10b      	cbz	r3, 800c980 <__sflush_r+0x44>
 800c97c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c97e:	1ad2      	subs	r2, r2, r3
 800c980:	2300      	movs	r3, #0
 800c982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c984:	6a21      	ldr	r1, [r4, #32]
 800c986:	4628      	mov	r0, r5
 800c988:	47b0      	blx	r6
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	d106      	bne.n	800c99e <__sflush_r+0x62>
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	291d      	cmp	r1, #29
 800c994:	d82b      	bhi.n	800c9ee <__sflush_r+0xb2>
 800c996:	4a2a      	ldr	r2, [pc, #168]	@ (800ca40 <__sflush_r+0x104>)
 800c998:	410a      	asrs	r2, r1
 800c99a:	07d6      	lsls	r6, r2, #31
 800c99c:	d427      	bmi.n	800c9ee <__sflush_r+0xb2>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	6062      	str	r2, [r4, #4]
 800c9a2:	04d9      	lsls	r1, r3, #19
 800c9a4:	6922      	ldr	r2, [r4, #16]
 800c9a6:	6022      	str	r2, [r4, #0]
 800c9a8:	d504      	bpl.n	800c9b4 <__sflush_r+0x78>
 800c9aa:	1c42      	adds	r2, r0, #1
 800c9ac:	d101      	bne.n	800c9b2 <__sflush_r+0x76>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b903      	cbnz	r3, 800c9b4 <__sflush_r+0x78>
 800c9b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c9b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9b6:	602f      	str	r7, [r5, #0]
 800c9b8:	b1b9      	cbz	r1, 800c9ea <__sflush_r+0xae>
 800c9ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9be:	4299      	cmp	r1, r3
 800c9c0:	d002      	beq.n	800c9c8 <__sflush_r+0x8c>
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f7ff f9e0 	bl	800bd88 <_free_r>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9cc:	e00d      	b.n	800c9ea <__sflush_r+0xae>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	47b0      	blx	r6
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	1c50      	adds	r0, r2, #1
 800c9d8:	d1c9      	bne.n	800c96e <__sflush_r+0x32>
 800c9da:	682b      	ldr	r3, [r5, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d0c6      	beq.n	800c96e <__sflush_r+0x32>
 800c9e0:	2b1d      	cmp	r3, #29
 800c9e2:	d001      	beq.n	800c9e8 <__sflush_r+0xac>
 800c9e4:	2b16      	cmp	r3, #22
 800c9e6:	d11e      	bne.n	800ca26 <__sflush_r+0xea>
 800c9e8:	602f      	str	r7, [r5, #0]
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	e022      	b.n	800ca34 <__sflush_r+0xf8>
 800c9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9f2:	b21b      	sxth	r3, r3
 800c9f4:	e01b      	b.n	800ca2e <__sflush_r+0xf2>
 800c9f6:	690f      	ldr	r7, [r1, #16]
 800c9f8:	2f00      	cmp	r7, #0
 800c9fa:	d0f6      	beq.n	800c9ea <__sflush_r+0xae>
 800c9fc:	0793      	lsls	r3, r2, #30
 800c9fe:	680e      	ldr	r6, [r1, #0]
 800ca00:	bf08      	it	eq
 800ca02:	694b      	ldreq	r3, [r1, #20]
 800ca04:	600f      	str	r7, [r1, #0]
 800ca06:	bf18      	it	ne
 800ca08:	2300      	movne	r3, #0
 800ca0a:	eba6 0807 	sub.w	r8, r6, r7
 800ca0e:	608b      	str	r3, [r1, #8]
 800ca10:	f1b8 0f00 	cmp.w	r8, #0
 800ca14:	dde9      	ble.n	800c9ea <__sflush_r+0xae>
 800ca16:	6a21      	ldr	r1, [r4, #32]
 800ca18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca1a:	4643      	mov	r3, r8
 800ca1c:	463a      	mov	r2, r7
 800ca1e:	4628      	mov	r0, r5
 800ca20:	47b0      	blx	r6
 800ca22:	2800      	cmp	r0, #0
 800ca24:	dc08      	bgt.n	800ca38 <__sflush_r+0xfc>
 800ca26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca2e:	81a3      	strh	r3, [r4, #12]
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295
 800ca34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca38:	4407      	add	r7, r0
 800ca3a:	eba8 0800 	sub.w	r8, r8, r0
 800ca3e:	e7e7      	b.n	800ca10 <__sflush_r+0xd4>
 800ca40:	dfbffffe 	.word	0xdfbffffe

0800ca44 <_fflush_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	690b      	ldr	r3, [r1, #16]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	b913      	cbnz	r3, 800ca54 <_fflush_r+0x10>
 800ca4e:	2500      	movs	r5, #0
 800ca50:	4628      	mov	r0, r5
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	b118      	cbz	r0, 800ca5e <_fflush_r+0x1a>
 800ca56:	6a03      	ldr	r3, [r0, #32]
 800ca58:	b90b      	cbnz	r3, 800ca5e <_fflush_r+0x1a>
 800ca5a:	f7fe fa1d 	bl	800ae98 <__sinit>
 800ca5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d0f3      	beq.n	800ca4e <_fflush_r+0xa>
 800ca66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca68:	07d0      	lsls	r0, r2, #31
 800ca6a:	d404      	bmi.n	800ca76 <_fflush_r+0x32>
 800ca6c:	0599      	lsls	r1, r3, #22
 800ca6e:	d402      	bmi.n	800ca76 <_fflush_r+0x32>
 800ca70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca72:	f7fe fb38 	bl	800b0e6 <__retarget_lock_acquire_recursive>
 800ca76:	4628      	mov	r0, r5
 800ca78:	4621      	mov	r1, r4
 800ca7a:	f7ff ff5f 	bl	800c93c <__sflush_r>
 800ca7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca80:	07da      	lsls	r2, r3, #31
 800ca82:	4605      	mov	r5, r0
 800ca84:	d4e4      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	059b      	lsls	r3, r3, #22
 800ca8a:	d4e1      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca8e:	f7fe fb2b 	bl	800b0e8 <__retarget_lock_release_recursive>
 800ca92:	e7dd      	b.n	800ca50 <_fflush_r+0xc>

0800ca94 <memmove>:
 800ca94:	4288      	cmp	r0, r1
 800ca96:	b510      	push	{r4, lr}
 800ca98:	eb01 0402 	add.w	r4, r1, r2
 800ca9c:	d902      	bls.n	800caa4 <memmove+0x10>
 800ca9e:	4284      	cmp	r4, r0
 800caa0:	4623      	mov	r3, r4
 800caa2:	d807      	bhi.n	800cab4 <memmove+0x20>
 800caa4:	1e43      	subs	r3, r0, #1
 800caa6:	42a1      	cmp	r1, r4
 800caa8:	d008      	beq.n	800cabc <memmove+0x28>
 800caaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cab2:	e7f8      	b.n	800caa6 <memmove+0x12>
 800cab4:	4402      	add	r2, r0
 800cab6:	4601      	mov	r1, r0
 800cab8:	428a      	cmp	r2, r1
 800caba:	d100      	bne.n	800cabe <memmove+0x2a>
 800cabc:	bd10      	pop	{r4, pc}
 800cabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cac6:	e7f7      	b.n	800cab8 <memmove+0x24>

0800cac8 <_sbrk_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	4d06      	ldr	r5, [pc, #24]	@ (800cae4 <_sbrk_r+0x1c>)
 800cacc:	2300      	movs	r3, #0
 800cace:	4604      	mov	r4, r0
 800cad0:	4608      	mov	r0, r1
 800cad2:	602b      	str	r3, [r5, #0]
 800cad4:	f7f6 fa1c 	bl	8002f10 <_sbrk>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_sbrk_r+0x1a>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_sbrk_r+0x1a>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	2001de68 	.word	0x2001de68

0800cae8 <memcpy>:
 800cae8:	440a      	add	r2, r1
 800caea:	4291      	cmp	r1, r2
 800caec:	f100 33ff 	add.w	r3, r0, #4294967295
 800caf0:	d100      	bne.n	800caf4 <memcpy+0xc>
 800caf2:	4770      	bx	lr
 800caf4:	b510      	push	{r4, lr}
 800caf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cafa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cafe:	4291      	cmp	r1, r2
 800cb00:	d1f9      	bne.n	800caf6 <memcpy+0xe>
 800cb02:	bd10      	pop	{r4, pc}

0800cb04 <__assert_func>:
 800cb04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb06:	4614      	mov	r4, r2
 800cb08:	461a      	mov	r2, r3
 800cb0a:	4b09      	ldr	r3, [pc, #36]	@ (800cb30 <__assert_func+0x2c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4605      	mov	r5, r0
 800cb10:	68d8      	ldr	r0, [r3, #12]
 800cb12:	b954      	cbnz	r4, 800cb2a <__assert_func+0x26>
 800cb14:	4b07      	ldr	r3, [pc, #28]	@ (800cb34 <__assert_func+0x30>)
 800cb16:	461c      	mov	r4, r3
 800cb18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb1c:	9100      	str	r1, [sp, #0]
 800cb1e:	462b      	mov	r3, r5
 800cb20:	4905      	ldr	r1, [pc, #20]	@ (800cb38 <__assert_func+0x34>)
 800cb22:	f000 f86f 	bl	800cc04 <fiprintf>
 800cb26:	f000 f87f 	bl	800cc28 <abort>
 800cb2a:	4b04      	ldr	r3, [pc, #16]	@ (800cb3c <__assert_func+0x38>)
 800cb2c:	e7f4      	b.n	800cb18 <__assert_func+0x14>
 800cb2e:	bf00      	nop
 800cb30:	20000018 	.word	0x20000018
 800cb34:	08021226 	.word	0x08021226
 800cb38:	080211f8 	.word	0x080211f8
 800cb3c:	080211eb 	.word	0x080211eb

0800cb40 <_calloc_r>:
 800cb40:	b570      	push	{r4, r5, r6, lr}
 800cb42:	fba1 5402 	umull	r5, r4, r1, r2
 800cb46:	b93c      	cbnz	r4, 800cb58 <_calloc_r+0x18>
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7ff f991 	bl	800be70 <_malloc_r>
 800cb4e:	4606      	mov	r6, r0
 800cb50:	b928      	cbnz	r0, 800cb5e <_calloc_r+0x1e>
 800cb52:	2600      	movs	r6, #0
 800cb54:	4630      	mov	r0, r6
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	220c      	movs	r2, #12
 800cb5a:	6002      	str	r2, [r0, #0]
 800cb5c:	e7f9      	b.n	800cb52 <_calloc_r+0x12>
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4621      	mov	r1, r4
 800cb62:	f7fe fa42 	bl	800afea <memset>
 800cb66:	e7f5      	b.n	800cb54 <_calloc_r+0x14>

0800cb68 <__ascii_mbtowc>:
 800cb68:	b082      	sub	sp, #8
 800cb6a:	b901      	cbnz	r1, 800cb6e <__ascii_mbtowc+0x6>
 800cb6c:	a901      	add	r1, sp, #4
 800cb6e:	b142      	cbz	r2, 800cb82 <__ascii_mbtowc+0x1a>
 800cb70:	b14b      	cbz	r3, 800cb86 <__ascii_mbtowc+0x1e>
 800cb72:	7813      	ldrb	r3, [r2, #0]
 800cb74:	600b      	str	r3, [r1, #0]
 800cb76:	7812      	ldrb	r2, [r2, #0]
 800cb78:	1e10      	subs	r0, r2, #0
 800cb7a:	bf18      	it	ne
 800cb7c:	2001      	movne	r0, #1
 800cb7e:	b002      	add	sp, #8
 800cb80:	4770      	bx	lr
 800cb82:	4610      	mov	r0, r2
 800cb84:	e7fb      	b.n	800cb7e <__ascii_mbtowc+0x16>
 800cb86:	f06f 0001 	mvn.w	r0, #1
 800cb8a:	e7f8      	b.n	800cb7e <__ascii_mbtowc+0x16>

0800cb8c <_realloc_r>:
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb90:	4680      	mov	r8, r0
 800cb92:	4615      	mov	r5, r2
 800cb94:	460c      	mov	r4, r1
 800cb96:	b921      	cbnz	r1, 800cba2 <_realloc_r+0x16>
 800cb98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	f7ff b967 	b.w	800be70 <_malloc_r>
 800cba2:	b92a      	cbnz	r2, 800cbb0 <_realloc_r+0x24>
 800cba4:	f7ff f8f0 	bl	800bd88 <_free_r>
 800cba8:	2400      	movs	r4, #0
 800cbaa:	4620      	mov	r0, r4
 800cbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb0:	f000 f841 	bl	800cc36 <_malloc_usable_size_r>
 800cbb4:	4285      	cmp	r5, r0
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	d802      	bhi.n	800cbc0 <_realloc_r+0x34>
 800cbba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbbe:	d8f4      	bhi.n	800cbaa <_realloc_r+0x1e>
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	f7ff f954 	bl	800be70 <_malloc_r>
 800cbc8:	4607      	mov	r7, r0
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d0ec      	beq.n	800cba8 <_realloc_r+0x1c>
 800cbce:	42b5      	cmp	r5, r6
 800cbd0:	462a      	mov	r2, r5
 800cbd2:	4621      	mov	r1, r4
 800cbd4:	bf28      	it	cs
 800cbd6:	4632      	movcs	r2, r6
 800cbd8:	f7ff ff86 	bl	800cae8 <memcpy>
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4640      	mov	r0, r8
 800cbe0:	f7ff f8d2 	bl	800bd88 <_free_r>
 800cbe4:	463c      	mov	r4, r7
 800cbe6:	e7e0      	b.n	800cbaa <_realloc_r+0x1e>

0800cbe8 <__ascii_wctomb>:
 800cbe8:	4603      	mov	r3, r0
 800cbea:	4608      	mov	r0, r1
 800cbec:	b141      	cbz	r1, 800cc00 <__ascii_wctomb+0x18>
 800cbee:	2aff      	cmp	r2, #255	@ 0xff
 800cbf0:	d904      	bls.n	800cbfc <__ascii_wctomb+0x14>
 800cbf2:	228a      	movs	r2, #138	@ 0x8a
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfa:	4770      	bx	lr
 800cbfc:	700a      	strb	r2, [r1, #0]
 800cbfe:	2001      	movs	r0, #1
 800cc00:	4770      	bx	lr
	...

0800cc04 <fiprintf>:
 800cc04:	b40e      	push	{r1, r2, r3}
 800cc06:	b503      	push	{r0, r1, lr}
 800cc08:	4601      	mov	r1, r0
 800cc0a:	ab03      	add	r3, sp, #12
 800cc0c:	4805      	ldr	r0, [pc, #20]	@ (800cc24 <fiprintf+0x20>)
 800cc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc12:	6800      	ldr	r0, [r0, #0]
 800cc14:	9301      	str	r3, [sp, #4]
 800cc16:	f000 f83f 	bl	800cc98 <_vfiprintf_r>
 800cc1a:	b002      	add	sp, #8
 800cc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc20:	b003      	add	sp, #12
 800cc22:	4770      	bx	lr
 800cc24:	20000018 	.word	0x20000018

0800cc28 <abort>:
 800cc28:	b508      	push	{r3, lr}
 800cc2a:	2006      	movs	r0, #6
 800cc2c:	f000 fa08 	bl	800d040 <raise>
 800cc30:	2001      	movs	r0, #1
 800cc32:	f7f6 f8f5 	bl	8002e20 <_exit>

0800cc36 <_malloc_usable_size_r>:
 800cc36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc3a:	1f18      	subs	r0, r3, #4
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	bfbc      	itt	lt
 800cc40:	580b      	ldrlt	r3, [r1, r0]
 800cc42:	18c0      	addlt	r0, r0, r3
 800cc44:	4770      	bx	lr

0800cc46 <__sfputc_r>:
 800cc46:	6893      	ldr	r3, [r2, #8]
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	b410      	push	{r4}
 800cc4e:	6093      	str	r3, [r2, #8]
 800cc50:	da08      	bge.n	800cc64 <__sfputc_r+0x1e>
 800cc52:	6994      	ldr	r4, [r2, #24]
 800cc54:	42a3      	cmp	r3, r4
 800cc56:	db01      	blt.n	800cc5c <__sfputc_r+0x16>
 800cc58:	290a      	cmp	r1, #10
 800cc5a:	d103      	bne.n	800cc64 <__sfputc_r+0x1e>
 800cc5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc60:	f000 b932 	b.w	800cec8 <__swbuf_r>
 800cc64:	6813      	ldr	r3, [r2, #0]
 800cc66:	1c58      	adds	r0, r3, #1
 800cc68:	6010      	str	r0, [r2, #0]
 800cc6a:	7019      	strb	r1, [r3, #0]
 800cc6c:	4608      	mov	r0, r1
 800cc6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <__sfputs_r>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	4606      	mov	r6, r0
 800cc78:	460f      	mov	r7, r1
 800cc7a:	4614      	mov	r4, r2
 800cc7c:	18d5      	adds	r5, r2, r3
 800cc7e:	42ac      	cmp	r4, r5
 800cc80:	d101      	bne.n	800cc86 <__sfputs_r+0x12>
 800cc82:	2000      	movs	r0, #0
 800cc84:	e007      	b.n	800cc96 <__sfputs_r+0x22>
 800cc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc8a:	463a      	mov	r2, r7
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f7ff ffda 	bl	800cc46 <__sfputc_r>
 800cc92:	1c43      	adds	r3, r0, #1
 800cc94:	d1f3      	bne.n	800cc7e <__sfputs_r+0xa>
 800cc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc98 <_vfiprintf_r>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	460d      	mov	r5, r1
 800cc9e:	b09d      	sub	sp, #116	@ 0x74
 800cca0:	4614      	mov	r4, r2
 800cca2:	4698      	mov	r8, r3
 800cca4:	4606      	mov	r6, r0
 800cca6:	b118      	cbz	r0, 800ccb0 <_vfiprintf_r+0x18>
 800cca8:	6a03      	ldr	r3, [r0, #32]
 800ccaa:	b90b      	cbnz	r3, 800ccb0 <_vfiprintf_r+0x18>
 800ccac:	f7fe f8f4 	bl	800ae98 <__sinit>
 800ccb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccb2:	07d9      	lsls	r1, r3, #31
 800ccb4:	d405      	bmi.n	800ccc2 <_vfiprintf_r+0x2a>
 800ccb6:	89ab      	ldrh	r3, [r5, #12]
 800ccb8:	059a      	lsls	r2, r3, #22
 800ccba:	d402      	bmi.n	800ccc2 <_vfiprintf_r+0x2a>
 800ccbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccbe:	f7fe fa12 	bl	800b0e6 <__retarget_lock_acquire_recursive>
 800ccc2:	89ab      	ldrh	r3, [r5, #12]
 800ccc4:	071b      	lsls	r3, r3, #28
 800ccc6:	d501      	bpl.n	800cccc <_vfiprintf_r+0x34>
 800ccc8:	692b      	ldr	r3, [r5, #16]
 800ccca:	b99b      	cbnz	r3, 800ccf4 <_vfiprintf_r+0x5c>
 800cccc:	4629      	mov	r1, r5
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f000 f938 	bl	800cf44 <__swsetup_r>
 800ccd4:	b170      	cbz	r0, 800ccf4 <_vfiprintf_r+0x5c>
 800ccd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccd8:	07dc      	lsls	r4, r3, #31
 800ccda:	d504      	bpl.n	800cce6 <_vfiprintf_r+0x4e>
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	b01d      	add	sp, #116	@ 0x74
 800cce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce6:	89ab      	ldrh	r3, [r5, #12]
 800cce8:	0598      	lsls	r0, r3, #22
 800ccea:	d4f7      	bmi.n	800ccdc <_vfiprintf_r+0x44>
 800ccec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccee:	f7fe f9fb 	bl	800b0e8 <__retarget_lock_release_recursive>
 800ccf2:	e7f3      	b.n	800ccdc <_vfiprintf_r+0x44>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccf8:	2320      	movs	r3, #32
 800ccfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd02:	2330      	movs	r3, #48	@ 0x30
 800cd04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ceb4 <_vfiprintf_r+0x21c>
 800cd08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd0c:	f04f 0901 	mov.w	r9, #1
 800cd10:	4623      	mov	r3, r4
 800cd12:	469a      	mov	sl, r3
 800cd14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd18:	b10a      	cbz	r2, 800cd1e <_vfiprintf_r+0x86>
 800cd1a:	2a25      	cmp	r2, #37	@ 0x25
 800cd1c:	d1f9      	bne.n	800cd12 <_vfiprintf_r+0x7a>
 800cd1e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd22:	d00b      	beq.n	800cd3c <_vfiprintf_r+0xa4>
 800cd24:	465b      	mov	r3, fp
 800cd26:	4622      	mov	r2, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7ff ffa2 	bl	800cc74 <__sfputs_r>
 800cd30:	3001      	adds	r0, #1
 800cd32:	f000 80a7 	beq.w	800ce84 <_vfiprintf_r+0x1ec>
 800cd36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd38:	445a      	add	r2, fp
 800cd3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 809f 	beq.w	800ce84 <_vfiprintf_r+0x1ec>
 800cd46:	2300      	movs	r3, #0
 800cd48:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd50:	f10a 0a01 	add.w	sl, sl, #1
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	9307      	str	r3, [sp, #28]
 800cd58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd5e:	4654      	mov	r4, sl
 800cd60:	2205      	movs	r2, #5
 800cd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd66:	4853      	ldr	r0, [pc, #332]	@ (800ceb4 <_vfiprintf_r+0x21c>)
 800cd68:	f7f3 fab2 	bl	80002d0 <memchr>
 800cd6c:	9a04      	ldr	r2, [sp, #16]
 800cd6e:	b9d8      	cbnz	r0, 800cda8 <_vfiprintf_r+0x110>
 800cd70:	06d1      	lsls	r1, r2, #27
 800cd72:	bf44      	itt	mi
 800cd74:	2320      	movmi	r3, #32
 800cd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd7a:	0713      	lsls	r3, r2, #28
 800cd7c:	bf44      	itt	mi
 800cd7e:	232b      	movmi	r3, #43	@ 0x2b
 800cd80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd84:	f89a 3000 	ldrb.w	r3, [sl]
 800cd88:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd8a:	d015      	beq.n	800cdb8 <_vfiprintf_r+0x120>
 800cd8c:	9a07      	ldr	r2, [sp, #28]
 800cd8e:	4654      	mov	r4, sl
 800cd90:	2000      	movs	r0, #0
 800cd92:	f04f 0c0a 	mov.w	ip, #10
 800cd96:	4621      	mov	r1, r4
 800cd98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd9c:	3b30      	subs	r3, #48	@ 0x30
 800cd9e:	2b09      	cmp	r3, #9
 800cda0:	d94b      	bls.n	800ce3a <_vfiprintf_r+0x1a2>
 800cda2:	b1b0      	cbz	r0, 800cdd2 <_vfiprintf_r+0x13a>
 800cda4:	9207      	str	r2, [sp, #28]
 800cda6:	e014      	b.n	800cdd2 <_vfiprintf_r+0x13a>
 800cda8:	eba0 0308 	sub.w	r3, r0, r8
 800cdac:	fa09 f303 	lsl.w	r3, r9, r3
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	9304      	str	r3, [sp, #16]
 800cdb4:	46a2      	mov	sl, r4
 800cdb6:	e7d2      	b.n	800cd5e <_vfiprintf_r+0xc6>
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	1d19      	adds	r1, r3, #4
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	9103      	str	r1, [sp, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	bfbb      	ittet	lt
 800cdc4:	425b      	neglt	r3, r3
 800cdc6:	f042 0202 	orrlt.w	r2, r2, #2
 800cdca:	9307      	strge	r3, [sp, #28]
 800cdcc:	9307      	strlt	r3, [sp, #28]
 800cdce:	bfb8      	it	lt
 800cdd0:	9204      	strlt	r2, [sp, #16]
 800cdd2:	7823      	ldrb	r3, [r4, #0]
 800cdd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdd6:	d10a      	bne.n	800cdee <_vfiprintf_r+0x156>
 800cdd8:	7863      	ldrb	r3, [r4, #1]
 800cdda:	2b2a      	cmp	r3, #42	@ 0x2a
 800cddc:	d132      	bne.n	800ce44 <_vfiprintf_r+0x1ac>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	1d1a      	adds	r2, r3, #4
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	9203      	str	r2, [sp, #12]
 800cde6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdea:	3402      	adds	r4, #2
 800cdec:	9305      	str	r3, [sp, #20]
 800cdee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cec4 <_vfiprintf_r+0x22c>
 800cdf2:	7821      	ldrb	r1, [r4, #0]
 800cdf4:	2203      	movs	r2, #3
 800cdf6:	4650      	mov	r0, sl
 800cdf8:	f7f3 fa6a 	bl	80002d0 <memchr>
 800cdfc:	b138      	cbz	r0, 800ce0e <_vfiprintf_r+0x176>
 800cdfe:	9b04      	ldr	r3, [sp, #16]
 800ce00:	eba0 000a 	sub.w	r0, r0, sl
 800ce04:	2240      	movs	r2, #64	@ 0x40
 800ce06:	4082      	lsls	r2, r0
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	3401      	adds	r4, #1
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce12:	4829      	ldr	r0, [pc, #164]	@ (800ceb8 <_vfiprintf_r+0x220>)
 800ce14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce18:	2206      	movs	r2, #6
 800ce1a:	f7f3 fa59 	bl	80002d0 <memchr>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d03f      	beq.n	800cea2 <_vfiprintf_r+0x20a>
 800ce22:	4b26      	ldr	r3, [pc, #152]	@ (800cebc <_vfiprintf_r+0x224>)
 800ce24:	bb1b      	cbnz	r3, 800ce6e <_vfiprintf_r+0x1d6>
 800ce26:	9b03      	ldr	r3, [sp, #12]
 800ce28:	3307      	adds	r3, #7
 800ce2a:	f023 0307 	bic.w	r3, r3, #7
 800ce2e:	3308      	adds	r3, #8
 800ce30:	9303      	str	r3, [sp, #12]
 800ce32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce34:	443b      	add	r3, r7
 800ce36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce38:	e76a      	b.n	800cd10 <_vfiprintf_r+0x78>
 800ce3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce3e:	460c      	mov	r4, r1
 800ce40:	2001      	movs	r0, #1
 800ce42:	e7a8      	b.n	800cd96 <_vfiprintf_r+0xfe>
 800ce44:	2300      	movs	r3, #0
 800ce46:	3401      	adds	r4, #1
 800ce48:	9305      	str	r3, [sp, #20]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	f04f 0c0a 	mov.w	ip, #10
 800ce50:	4620      	mov	r0, r4
 800ce52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce56:	3a30      	subs	r2, #48	@ 0x30
 800ce58:	2a09      	cmp	r2, #9
 800ce5a:	d903      	bls.n	800ce64 <_vfiprintf_r+0x1cc>
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d0c6      	beq.n	800cdee <_vfiprintf_r+0x156>
 800ce60:	9105      	str	r1, [sp, #20]
 800ce62:	e7c4      	b.n	800cdee <_vfiprintf_r+0x156>
 800ce64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce68:	4604      	mov	r4, r0
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e7f0      	b.n	800ce50 <_vfiprintf_r+0x1b8>
 800ce6e:	ab03      	add	r3, sp, #12
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	462a      	mov	r2, r5
 800ce74:	4b12      	ldr	r3, [pc, #72]	@ (800cec0 <_vfiprintf_r+0x228>)
 800ce76:	a904      	add	r1, sp, #16
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7fd fbc9 	bl	800a610 <_printf_float>
 800ce7e:	4607      	mov	r7, r0
 800ce80:	1c78      	adds	r0, r7, #1
 800ce82:	d1d6      	bne.n	800ce32 <_vfiprintf_r+0x19a>
 800ce84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce86:	07d9      	lsls	r1, r3, #31
 800ce88:	d405      	bmi.n	800ce96 <_vfiprintf_r+0x1fe>
 800ce8a:	89ab      	ldrh	r3, [r5, #12]
 800ce8c:	059a      	lsls	r2, r3, #22
 800ce8e:	d402      	bmi.n	800ce96 <_vfiprintf_r+0x1fe>
 800ce90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce92:	f7fe f929 	bl	800b0e8 <__retarget_lock_release_recursive>
 800ce96:	89ab      	ldrh	r3, [r5, #12]
 800ce98:	065b      	lsls	r3, r3, #25
 800ce9a:	f53f af1f 	bmi.w	800ccdc <_vfiprintf_r+0x44>
 800ce9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cea0:	e71e      	b.n	800cce0 <_vfiprintf_r+0x48>
 800cea2:	ab03      	add	r3, sp, #12
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	462a      	mov	r2, r5
 800cea8:	4b05      	ldr	r3, [pc, #20]	@ (800cec0 <_vfiprintf_r+0x228>)
 800ceaa:	a904      	add	r1, sp, #16
 800ceac:	4630      	mov	r0, r6
 800ceae:	f7fd fe47 	bl	800ab40 <_printf_i>
 800ceb2:	e7e4      	b.n	800ce7e <_vfiprintf_r+0x1e6>
 800ceb4:	080211d0 	.word	0x080211d0
 800ceb8:	080211da 	.word	0x080211da
 800cebc:	0800a611 	.word	0x0800a611
 800cec0:	0800cc75 	.word	0x0800cc75
 800cec4:	080211d6 	.word	0x080211d6

0800cec8 <__swbuf_r>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	460e      	mov	r6, r1
 800cecc:	4614      	mov	r4, r2
 800cece:	4605      	mov	r5, r0
 800ced0:	b118      	cbz	r0, 800ceda <__swbuf_r+0x12>
 800ced2:	6a03      	ldr	r3, [r0, #32]
 800ced4:	b90b      	cbnz	r3, 800ceda <__swbuf_r+0x12>
 800ced6:	f7fd ffdf 	bl	800ae98 <__sinit>
 800ceda:	69a3      	ldr	r3, [r4, #24]
 800cedc:	60a3      	str	r3, [r4, #8]
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	071a      	lsls	r2, r3, #28
 800cee2:	d501      	bpl.n	800cee8 <__swbuf_r+0x20>
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	b943      	cbnz	r3, 800cefa <__swbuf_r+0x32>
 800cee8:	4621      	mov	r1, r4
 800ceea:	4628      	mov	r0, r5
 800ceec:	f000 f82a 	bl	800cf44 <__swsetup_r>
 800cef0:	b118      	cbz	r0, 800cefa <__swbuf_r+0x32>
 800cef2:	f04f 37ff 	mov.w	r7, #4294967295
 800cef6:	4638      	mov	r0, r7
 800cef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	6922      	ldr	r2, [r4, #16]
 800cefe:	1a98      	subs	r0, r3, r2
 800cf00:	6963      	ldr	r3, [r4, #20]
 800cf02:	b2f6      	uxtb	r6, r6
 800cf04:	4283      	cmp	r3, r0
 800cf06:	4637      	mov	r7, r6
 800cf08:	dc05      	bgt.n	800cf16 <__swbuf_r+0x4e>
 800cf0a:	4621      	mov	r1, r4
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f7ff fd99 	bl	800ca44 <_fflush_r>
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d1ed      	bne.n	800cef2 <__swbuf_r+0x2a>
 800cf16:	68a3      	ldr	r3, [r4, #8]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	60a3      	str	r3, [r4, #8]
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	6022      	str	r2, [r4, #0]
 800cf22:	701e      	strb	r6, [r3, #0]
 800cf24:	6962      	ldr	r2, [r4, #20]
 800cf26:	1c43      	adds	r3, r0, #1
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d004      	beq.n	800cf36 <__swbuf_r+0x6e>
 800cf2c:	89a3      	ldrh	r3, [r4, #12]
 800cf2e:	07db      	lsls	r3, r3, #31
 800cf30:	d5e1      	bpl.n	800cef6 <__swbuf_r+0x2e>
 800cf32:	2e0a      	cmp	r6, #10
 800cf34:	d1df      	bne.n	800cef6 <__swbuf_r+0x2e>
 800cf36:	4621      	mov	r1, r4
 800cf38:	4628      	mov	r0, r5
 800cf3a:	f7ff fd83 	bl	800ca44 <_fflush_r>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d0d9      	beq.n	800cef6 <__swbuf_r+0x2e>
 800cf42:	e7d6      	b.n	800cef2 <__swbuf_r+0x2a>

0800cf44 <__swsetup_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4b29      	ldr	r3, [pc, #164]	@ (800cfec <__swsetup_r+0xa8>)
 800cf48:	4605      	mov	r5, r0
 800cf4a:	6818      	ldr	r0, [r3, #0]
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	b118      	cbz	r0, 800cf58 <__swsetup_r+0x14>
 800cf50:	6a03      	ldr	r3, [r0, #32]
 800cf52:	b90b      	cbnz	r3, 800cf58 <__swsetup_r+0x14>
 800cf54:	f7fd ffa0 	bl	800ae98 <__sinit>
 800cf58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf5c:	0719      	lsls	r1, r3, #28
 800cf5e:	d422      	bmi.n	800cfa6 <__swsetup_r+0x62>
 800cf60:	06da      	lsls	r2, r3, #27
 800cf62:	d407      	bmi.n	800cf74 <__swsetup_r+0x30>
 800cf64:	2209      	movs	r2, #9
 800cf66:	602a      	str	r2, [r5, #0]
 800cf68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf72:	e033      	b.n	800cfdc <__swsetup_r+0x98>
 800cf74:	0758      	lsls	r0, r3, #29
 800cf76:	d512      	bpl.n	800cf9e <__swsetup_r+0x5a>
 800cf78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf7a:	b141      	cbz	r1, 800cf8e <__swsetup_r+0x4a>
 800cf7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf80:	4299      	cmp	r1, r3
 800cf82:	d002      	beq.n	800cf8a <__swsetup_r+0x46>
 800cf84:	4628      	mov	r0, r5
 800cf86:	f7fe feff 	bl	800bd88 <_free_r>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf8e:	89a3      	ldrh	r3, [r4, #12]
 800cf90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf94:	81a3      	strh	r3, [r4, #12]
 800cf96:	2300      	movs	r3, #0
 800cf98:	6063      	str	r3, [r4, #4]
 800cf9a:	6923      	ldr	r3, [r4, #16]
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	f043 0308 	orr.w	r3, r3, #8
 800cfa4:	81a3      	strh	r3, [r4, #12]
 800cfa6:	6923      	ldr	r3, [r4, #16]
 800cfa8:	b94b      	cbnz	r3, 800cfbe <__swsetup_r+0x7a>
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfb4:	d003      	beq.n	800cfbe <__swsetup_r+0x7a>
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	4628      	mov	r0, r5
 800cfba:	f000 f883 	bl	800d0c4 <__smakebuf_r>
 800cfbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfc2:	f013 0201 	ands.w	r2, r3, #1
 800cfc6:	d00a      	beq.n	800cfde <__swsetup_r+0x9a>
 800cfc8:	2200      	movs	r2, #0
 800cfca:	60a2      	str	r2, [r4, #8]
 800cfcc:	6962      	ldr	r2, [r4, #20]
 800cfce:	4252      	negs	r2, r2
 800cfd0:	61a2      	str	r2, [r4, #24]
 800cfd2:	6922      	ldr	r2, [r4, #16]
 800cfd4:	b942      	cbnz	r2, 800cfe8 <__swsetup_r+0xa4>
 800cfd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfda:	d1c5      	bne.n	800cf68 <__swsetup_r+0x24>
 800cfdc:	bd38      	pop	{r3, r4, r5, pc}
 800cfde:	0799      	lsls	r1, r3, #30
 800cfe0:	bf58      	it	pl
 800cfe2:	6962      	ldrpl	r2, [r4, #20]
 800cfe4:	60a2      	str	r2, [r4, #8]
 800cfe6:	e7f4      	b.n	800cfd2 <__swsetup_r+0x8e>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e7f7      	b.n	800cfdc <__swsetup_r+0x98>
 800cfec:	20000018 	.word	0x20000018

0800cff0 <_raise_r>:
 800cff0:	291f      	cmp	r1, #31
 800cff2:	b538      	push	{r3, r4, r5, lr}
 800cff4:	4605      	mov	r5, r0
 800cff6:	460c      	mov	r4, r1
 800cff8:	d904      	bls.n	800d004 <_raise_r+0x14>
 800cffa:	2316      	movs	r3, #22
 800cffc:	6003      	str	r3, [r0, #0]
 800cffe:	f04f 30ff 	mov.w	r0, #4294967295
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d006:	b112      	cbz	r2, 800d00e <_raise_r+0x1e>
 800d008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d00c:	b94b      	cbnz	r3, 800d022 <_raise_r+0x32>
 800d00e:	4628      	mov	r0, r5
 800d010:	f000 f830 	bl	800d074 <_getpid_r>
 800d014:	4622      	mov	r2, r4
 800d016:	4601      	mov	r1, r0
 800d018:	4628      	mov	r0, r5
 800d01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d01e:	f000 b817 	b.w	800d050 <_kill_r>
 800d022:	2b01      	cmp	r3, #1
 800d024:	d00a      	beq.n	800d03c <_raise_r+0x4c>
 800d026:	1c59      	adds	r1, r3, #1
 800d028:	d103      	bne.n	800d032 <_raise_r+0x42>
 800d02a:	2316      	movs	r3, #22
 800d02c:	6003      	str	r3, [r0, #0]
 800d02e:	2001      	movs	r0, #1
 800d030:	e7e7      	b.n	800d002 <_raise_r+0x12>
 800d032:	2100      	movs	r1, #0
 800d034:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d038:	4620      	mov	r0, r4
 800d03a:	4798      	blx	r3
 800d03c:	2000      	movs	r0, #0
 800d03e:	e7e0      	b.n	800d002 <_raise_r+0x12>

0800d040 <raise>:
 800d040:	4b02      	ldr	r3, [pc, #8]	@ (800d04c <raise+0xc>)
 800d042:	4601      	mov	r1, r0
 800d044:	6818      	ldr	r0, [r3, #0]
 800d046:	f7ff bfd3 	b.w	800cff0 <_raise_r>
 800d04a:	bf00      	nop
 800d04c:	20000018 	.word	0x20000018

0800d050 <_kill_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4d07      	ldr	r5, [pc, #28]	@ (800d070 <_kill_r+0x20>)
 800d054:	2300      	movs	r3, #0
 800d056:	4604      	mov	r4, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	4611      	mov	r1, r2
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	f7f5 fecf 	bl	8002e00 <_kill>
 800d062:	1c43      	adds	r3, r0, #1
 800d064:	d102      	bne.n	800d06c <_kill_r+0x1c>
 800d066:	682b      	ldr	r3, [r5, #0]
 800d068:	b103      	cbz	r3, 800d06c <_kill_r+0x1c>
 800d06a:	6023      	str	r3, [r4, #0]
 800d06c:	bd38      	pop	{r3, r4, r5, pc}
 800d06e:	bf00      	nop
 800d070:	2001de68 	.word	0x2001de68

0800d074 <_getpid_r>:
 800d074:	f7f5 bebc 	b.w	8002df0 <_getpid>

0800d078 <__swhatbuf_r>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	460c      	mov	r4, r1
 800d07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d080:	2900      	cmp	r1, #0
 800d082:	b096      	sub	sp, #88	@ 0x58
 800d084:	4615      	mov	r5, r2
 800d086:	461e      	mov	r6, r3
 800d088:	da0d      	bge.n	800d0a6 <__swhatbuf_r+0x2e>
 800d08a:	89a3      	ldrh	r3, [r4, #12]
 800d08c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d090:	f04f 0100 	mov.w	r1, #0
 800d094:	bf14      	ite	ne
 800d096:	2340      	movne	r3, #64	@ 0x40
 800d098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d09c:	2000      	movs	r0, #0
 800d09e:	6031      	str	r1, [r6, #0]
 800d0a0:	602b      	str	r3, [r5, #0]
 800d0a2:	b016      	add	sp, #88	@ 0x58
 800d0a4:	bd70      	pop	{r4, r5, r6, pc}
 800d0a6:	466a      	mov	r2, sp
 800d0a8:	f000 f848 	bl	800d13c <_fstat_r>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	dbec      	blt.n	800d08a <__swhatbuf_r+0x12>
 800d0b0:	9901      	ldr	r1, [sp, #4]
 800d0b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0ba:	4259      	negs	r1, r3
 800d0bc:	4159      	adcs	r1, r3
 800d0be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0c2:	e7eb      	b.n	800d09c <__swhatbuf_r+0x24>

0800d0c4 <__smakebuf_r>:
 800d0c4:	898b      	ldrh	r3, [r1, #12]
 800d0c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0c8:	079d      	lsls	r5, r3, #30
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	d507      	bpl.n	800d0e0 <__smakebuf_r+0x1c>
 800d0d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	2301      	movs	r3, #1
 800d0da:	6163      	str	r3, [r4, #20]
 800d0dc:	b003      	add	sp, #12
 800d0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e0:	ab01      	add	r3, sp, #4
 800d0e2:	466a      	mov	r2, sp
 800d0e4:	f7ff ffc8 	bl	800d078 <__swhatbuf_r>
 800d0e8:	9f00      	ldr	r7, [sp, #0]
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f7fe febe 	bl	800be70 <_malloc_r>
 800d0f4:	b948      	cbnz	r0, 800d10a <__smakebuf_r+0x46>
 800d0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fa:	059a      	lsls	r2, r3, #22
 800d0fc:	d4ee      	bmi.n	800d0dc <__smakebuf_r+0x18>
 800d0fe:	f023 0303 	bic.w	r3, r3, #3
 800d102:	f043 0302 	orr.w	r3, r3, #2
 800d106:	81a3      	strh	r3, [r4, #12]
 800d108:	e7e2      	b.n	800d0d0 <__smakebuf_r+0xc>
 800d10a:	89a3      	ldrh	r3, [r4, #12]
 800d10c:	6020      	str	r0, [r4, #0]
 800d10e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	9b01      	ldr	r3, [sp, #4]
 800d116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d11a:	b15b      	cbz	r3, 800d134 <__smakebuf_r+0x70>
 800d11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d120:	4630      	mov	r0, r6
 800d122:	f000 f81d 	bl	800d160 <_isatty_r>
 800d126:	b128      	cbz	r0, 800d134 <__smakebuf_r+0x70>
 800d128:	89a3      	ldrh	r3, [r4, #12]
 800d12a:	f023 0303 	bic.w	r3, r3, #3
 800d12e:	f043 0301 	orr.w	r3, r3, #1
 800d132:	81a3      	strh	r3, [r4, #12]
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	431d      	orrs	r5, r3
 800d138:	81a5      	strh	r5, [r4, #12]
 800d13a:	e7cf      	b.n	800d0dc <__smakebuf_r+0x18>

0800d13c <_fstat_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	4d07      	ldr	r5, [pc, #28]	@ (800d15c <_fstat_r+0x20>)
 800d140:	2300      	movs	r3, #0
 800d142:	4604      	mov	r4, r0
 800d144:	4608      	mov	r0, r1
 800d146:	4611      	mov	r1, r2
 800d148:	602b      	str	r3, [r5, #0]
 800d14a:	f7f5 feb9 	bl	8002ec0 <_fstat>
 800d14e:	1c43      	adds	r3, r0, #1
 800d150:	d102      	bne.n	800d158 <_fstat_r+0x1c>
 800d152:	682b      	ldr	r3, [r5, #0]
 800d154:	b103      	cbz	r3, 800d158 <_fstat_r+0x1c>
 800d156:	6023      	str	r3, [r4, #0]
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop
 800d15c:	2001de68 	.word	0x2001de68

0800d160 <_isatty_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d06      	ldr	r5, [pc, #24]	@ (800d17c <_isatty_r+0x1c>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7f5 feb8 	bl	8002ee0 <_isatty>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_isatty_r+0x1a>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_isatty_r+0x1a>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	2001de68 	.word	0x2001de68

0800d180 <hypot>:
 800d180:	b508      	push	{r3, lr}
 800d182:	ed2d 8b06 	vpush	{d8-d10}
 800d186:	eeb0 aa40 	vmov.f32	s20, s0
 800d18a:	eef0 aa60 	vmov.f32	s21, s1
 800d18e:	eeb0 9a41 	vmov.f32	s18, s2
 800d192:	eef0 9a61 	vmov.f32	s19, s3
 800d196:	f000 f9f3 	bl	800d580 <__ieee754_hypot>
 800d19a:	eeb0 8a40 	vmov.f32	s16, s0
 800d19e:	eef0 8a60 	vmov.f32	s17, s1
 800d1a2:	f000 f9df 	bl	800d564 <finite>
 800d1a6:	b998      	cbnz	r0, 800d1d0 <hypot+0x50>
 800d1a8:	eeb0 0a4a 	vmov.f32	s0, s20
 800d1ac:	eef0 0a6a 	vmov.f32	s1, s21
 800d1b0:	f000 f9d8 	bl	800d564 <finite>
 800d1b4:	b160      	cbz	r0, 800d1d0 <hypot+0x50>
 800d1b6:	eeb0 0a49 	vmov.f32	s0, s18
 800d1ba:	eef0 0a69 	vmov.f32	s1, s19
 800d1be:	f000 f9d1 	bl	800d564 <finite>
 800d1c2:	b128      	cbz	r0, 800d1d0 <hypot+0x50>
 800d1c4:	f7fd ff64 	bl	800b090 <__errno>
 800d1c8:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800d1e0 <hypot+0x60>
 800d1cc:	2322      	movs	r3, #34	@ 0x22
 800d1ce:	6003      	str	r3, [r0, #0]
 800d1d0:	eeb0 0a48 	vmov.f32	s0, s16
 800d1d4:	eef0 0a68 	vmov.f32	s1, s17
 800d1d8:	ecbd 8b06 	vpop	{d8-d10}
 800d1dc:	bd08      	pop	{r3, pc}
 800d1de:	bf00      	nop
 800d1e0:	00000000 	.word	0x00000000
 800d1e4:	7ff00000 	.word	0x7ff00000

0800d1e8 <atan>:
 800d1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ec:	ec55 4b10 	vmov	r4, r5, d0
 800d1f0:	4bbf      	ldr	r3, [pc, #764]	@ (800d4f0 <atan+0x308>)
 800d1f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d1f6:	429e      	cmp	r6, r3
 800d1f8:	46ab      	mov	fp, r5
 800d1fa:	d918      	bls.n	800d22e <atan+0x46>
 800d1fc:	4bbd      	ldr	r3, [pc, #756]	@ (800d4f4 <atan+0x30c>)
 800d1fe:	429e      	cmp	r6, r3
 800d200:	d801      	bhi.n	800d206 <atan+0x1e>
 800d202:	d109      	bne.n	800d218 <atan+0x30>
 800d204:	b144      	cbz	r4, 800d218 <atan+0x30>
 800d206:	4622      	mov	r2, r4
 800d208:	462b      	mov	r3, r5
 800d20a:	4620      	mov	r0, r4
 800d20c:	4629      	mov	r1, r5
 800d20e:	f7f3 f8bd 	bl	800038c <__adddf3>
 800d212:	4604      	mov	r4, r0
 800d214:	460d      	mov	r5, r1
 800d216:	e006      	b.n	800d226 <atan+0x3e>
 800d218:	f1bb 0f00 	cmp.w	fp, #0
 800d21c:	f340 812b 	ble.w	800d476 <atan+0x28e>
 800d220:	a597      	add	r5, pc, #604	@ (adr r5, 800d480 <atan+0x298>)
 800d222:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d226:	ec45 4b10 	vmov	d0, r4, r5
 800d22a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22e:	4bb2      	ldr	r3, [pc, #712]	@ (800d4f8 <atan+0x310>)
 800d230:	429e      	cmp	r6, r3
 800d232:	d813      	bhi.n	800d25c <atan+0x74>
 800d234:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d238:	429e      	cmp	r6, r3
 800d23a:	d80c      	bhi.n	800d256 <atan+0x6e>
 800d23c:	a392      	add	r3, pc, #584	@ (adr r3, 800d488 <atan+0x2a0>)
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	4620      	mov	r0, r4
 800d244:	4629      	mov	r1, r5
 800d246:	f7f3 f8a1 	bl	800038c <__adddf3>
 800d24a:	4bac      	ldr	r3, [pc, #688]	@ (800d4fc <atan+0x314>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	f7f3 fce3 	bl	8000c18 <__aeabi_dcmpgt>
 800d252:	2800      	cmp	r0, #0
 800d254:	d1e7      	bne.n	800d226 <atan+0x3e>
 800d256:	f04f 3aff 	mov.w	sl, #4294967295
 800d25a:	e029      	b.n	800d2b0 <atan+0xc8>
 800d25c:	f000 f95c 	bl	800d518 <fabs>
 800d260:	4ba7      	ldr	r3, [pc, #668]	@ (800d500 <atan+0x318>)
 800d262:	429e      	cmp	r6, r3
 800d264:	ec55 4b10 	vmov	r4, r5, d0
 800d268:	f200 80bc 	bhi.w	800d3e4 <atan+0x1fc>
 800d26c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d270:	429e      	cmp	r6, r3
 800d272:	f200 809e 	bhi.w	800d3b2 <atan+0x1ca>
 800d276:	4622      	mov	r2, r4
 800d278:	462b      	mov	r3, r5
 800d27a:	4620      	mov	r0, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7f3 f885 	bl	800038c <__adddf3>
 800d282:	4b9e      	ldr	r3, [pc, #632]	@ (800d4fc <atan+0x314>)
 800d284:	2200      	movs	r2, #0
 800d286:	f7f3 f87f 	bl	8000388 <__aeabi_dsub>
 800d28a:	2200      	movs	r2, #0
 800d28c:	4606      	mov	r6, r0
 800d28e:	460f      	mov	r7, r1
 800d290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d294:	4620      	mov	r0, r4
 800d296:	4629      	mov	r1, r5
 800d298:	f7f3 f878 	bl	800038c <__adddf3>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	f7f3 fb52 	bl	800094c <__aeabi_ddiv>
 800d2a8:	f04f 0a00 	mov.w	sl, #0
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	460d      	mov	r5, r1
 800d2b0:	4622      	mov	r2, r4
 800d2b2:	462b      	mov	r3, r5
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	f7f3 fa1e 	bl	80006f8 <__aeabi_dmul>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4680      	mov	r8, r0
 800d2c2:	4689      	mov	r9, r1
 800d2c4:	f7f3 fa18 	bl	80006f8 <__aeabi_dmul>
 800d2c8:	a371      	add	r3, pc, #452	@ (adr r3, 800d490 <atan+0x2a8>)
 800d2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	460f      	mov	r7, r1
 800d2d2:	f7f3 fa11 	bl	80006f8 <__aeabi_dmul>
 800d2d6:	a370      	add	r3, pc, #448	@ (adr r3, 800d498 <atan+0x2b0>)
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	f7f3 f856 	bl	800038c <__adddf3>
 800d2e0:	4632      	mov	r2, r6
 800d2e2:	463b      	mov	r3, r7
 800d2e4:	f7f3 fa08 	bl	80006f8 <__aeabi_dmul>
 800d2e8:	a36d      	add	r3, pc, #436	@ (adr r3, 800d4a0 <atan+0x2b8>)
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	f7f3 f84d 	bl	800038c <__adddf3>
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	f7f3 f9ff 	bl	80006f8 <__aeabi_dmul>
 800d2fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800d4a8 <atan+0x2c0>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	f7f3 f844 	bl	800038c <__adddf3>
 800d304:	4632      	mov	r2, r6
 800d306:	463b      	mov	r3, r7
 800d308:	f7f3 f9f6 	bl	80006f8 <__aeabi_dmul>
 800d30c:	a368      	add	r3, pc, #416	@ (adr r3, 800d4b0 <atan+0x2c8>)
 800d30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d312:	f7f3 f83b 	bl	800038c <__adddf3>
 800d316:	4632      	mov	r2, r6
 800d318:	463b      	mov	r3, r7
 800d31a:	f7f3 f9ed 	bl	80006f8 <__aeabi_dmul>
 800d31e:	a366      	add	r3, pc, #408	@ (adr r3, 800d4b8 <atan+0x2d0>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	f7f3 f832 	bl	800038c <__adddf3>
 800d328:	4642      	mov	r2, r8
 800d32a:	464b      	mov	r3, r9
 800d32c:	f7f3 f9e4 	bl	80006f8 <__aeabi_dmul>
 800d330:	a363      	add	r3, pc, #396	@ (adr r3, 800d4c0 <atan+0x2d8>)
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	4680      	mov	r8, r0
 800d338:	4689      	mov	r9, r1
 800d33a:	4630      	mov	r0, r6
 800d33c:	4639      	mov	r1, r7
 800d33e:	f7f3 f9db 	bl	80006f8 <__aeabi_dmul>
 800d342:	a361      	add	r3, pc, #388	@ (adr r3, 800d4c8 <atan+0x2e0>)
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	f7f3 f81e 	bl	8000388 <__aeabi_dsub>
 800d34c:	4632      	mov	r2, r6
 800d34e:	463b      	mov	r3, r7
 800d350:	f7f3 f9d2 	bl	80006f8 <__aeabi_dmul>
 800d354:	a35e      	add	r3, pc, #376	@ (adr r3, 800d4d0 <atan+0x2e8>)
 800d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35a:	f7f3 f815 	bl	8000388 <__aeabi_dsub>
 800d35e:	4632      	mov	r2, r6
 800d360:	463b      	mov	r3, r7
 800d362:	f7f3 f9c9 	bl	80006f8 <__aeabi_dmul>
 800d366:	a35c      	add	r3, pc, #368	@ (adr r3, 800d4d8 <atan+0x2f0>)
 800d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36c:	f7f3 f80c 	bl	8000388 <__aeabi_dsub>
 800d370:	4632      	mov	r2, r6
 800d372:	463b      	mov	r3, r7
 800d374:	f7f3 f9c0 	bl	80006f8 <__aeabi_dmul>
 800d378:	a359      	add	r3, pc, #356	@ (adr r3, 800d4e0 <atan+0x2f8>)
 800d37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37e:	f7f3 f803 	bl	8000388 <__aeabi_dsub>
 800d382:	4632      	mov	r2, r6
 800d384:	463b      	mov	r3, r7
 800d386:	f7f3 f9b7 	bl	80006f8 <__aeabi_dmul>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4640      	mov	r0, r8
 800d390:	4649      	mov	r1, r9
 800d392:	f7f2 fffb 	bl	800038c <__adddf3>
 800d396:	4622      	mov	r2, r4
 800d398:	462b      	mov	r3, r5
 800d39a:	f7f3 f9ad 	bl	80006f8 <__aeabi_dmul>
 800d39e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	d148      	bne.n	800d43a <atan+0x252>
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	f7f2 ffec 	bl	8000388 <__aeabi_dsub>
 800d3b0:	e72f      	b.n	800d212 <atan+0x2a>
 800d3b2:	4b52      	ldr	r3, [pc, #328]	@ (800d4fc <atan+0x314>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	f7f2 ffe5 	bl	8000388 <__aeabi_dsub>
 800d3be:	4b4f      	ldr	r3, [pc, #316]	@ (800d4fc <atan+0x314>)
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	460f      	mov	r7, r1
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	4629      	mov	r1, r5
 800d3ca:	f7f2 ffdf 	bl	800038c <__adddf3>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	4639      	mov	r1, r7
 800d3d6:	f7f3 fab9 	bl	800094c <__aeabi_ddiv>
 800d3da:	f04f 0a01 	mov.w	sl, #1
 800d3de:	4604      	mov	r4, r0
 800d3e0:	460d      	mov	r5, r1
 800d3e2:	e765      	b.n	800d2b0 <atan+0xc8>
 800d3e4:	4b47      	ldr	r3, [pc, #284]	@ (800d504 <atan+0x31c>)
 800d3e6:	429e      	cmp	r6, r3
 800d3e8:	d21c      	bcs.n	800d424 <atan+0x23c>
 800d3ea:	4b47      	ldr	r3, [pc, #284]	@ (800d508 <atan+0x320>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	f7f2 ffc9 	bl	8000388 <__aeabi_dsub>
 800d3f6:	4b44      	ldr	r3, [pc, #272]	@ (800d508 <atan+0x320>)
 800d3f8:	4606      	mov	r6, r0
 800d3fa:	460f      	mov	r7, r1
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	4620      	mov	r0, r4
 800d400:	4629      	mov	r1, r5
 800d402:	f7f3 f979 	bl	80006f8 <__aeabi_dmul>
 800d406:	4b3d      	ldr	r3, [pc, #244]	@ (800d4fc <atan+0x314>)
 800d408:	2200      	movs	r2, #0
 800d40a:	f7f2 ffbf 	bl	800038c <__adddf3>
 800d40e:	4602      	mov	r2, r0
 800d410:	460b      	mov	r3, r1
 800d412:	4630      	mov	r0, r6
 800d414:	4639      	mov	r1, r7
 800d416:	f7f3 fa99 	bl	800094c <__aeabi_ddiv>
 800d41a:	f04f 0a02 	mov.w	sl, #2
 800d41e:	4604      	mov	r4, r0
 800d420:	460d      	mov	r5, r1
 800d422:	e745      	b.n	800d2b0 <atan+0xc8>
 800d424:	4622      	mov	r2, r4
 800d426:	462b      	mov	r3, r5
 800d428:	4938      	ldr	r1, [pc, #224]	@ (800d50c <atan+0x324>)
 800d42a:	2000      	movs	r0, #0
 800d42c:	f7f3 fa8e 	bl	800094c <__aeabi_ddiv>
 800d430:	f04f 0a03 	mov.w	sl, #3
 800d434:	4604      	mov	r4, r0
 800d436:	460d      	mov	r5, r1
 800d438:	e73a      	b.n	800d2b0 <atan+0xc8>
 800d43a:	4b35      	ldr	r3, [pc, #212]	@ (800d510 <atan+0x328>)
 800d43c:	4e35      	ldr	r6, [pc, #212]	@ (800d514 <atan+0x32c>)
 800d43e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	f7f2 ff9f 	bl	8000388 <__aeabi_dsub>
 800d44a:	4622      	mov	r2, r4
 800d44c:	462b      	mov	r3, r5
 800d44e:	f7f2 ff9b 	bl	8000388 <__aeabi_dsub>
 800d452:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d456:	4602      	mov	r2, r0
 800d458:	460b      	mov	r3, r1
 800d45a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d45e:	f7f2 ff93 	bl	8000388 <__aeabi_dsub>
 800d462:	f1bb 0f00 	cmp.w	fp, #0
 800d466:	4604      	mov	r4, r0
 800d468:	460d      	mov	r5, r1
 800d46a:	f6bf aedc 	bge.w	800d226 <atan+0x3e>
 800d46e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d472:	461d      	mov	r5, r3
 800d474:	e6d7      	b.n	800d226 <atan+0x3e>
 800d476:	a51c      	add	r5, pc, #112	@ (adr r5, 800d4e8 <atan+0x300>)
 800d478:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d47c:	e6d3      	b.n	800d226 <atan+0x3e>
 800d47e:	bf00      	nop
 800d480:	54442d18 	.word	0x54442d18
 800d484:	3ff921fb 	.word	0x3ff921fb
 800d488:	8800759c 	.word	0x8800759c
 800d48c:	7e37e43c 	.word	0x7e37e43c
 800d490:	e322da11 	.word	0xe322da11
 800d494:	3f90ad3a 	.word	0x3f90ad3a
 800d498:	24760deb 	.word	0x24760deb
 800d49c:	3fa97b4b 	.word	0x3fa97b4b
 800d4a0:	a0d03d51 	.word	0xa0d03d51
 800d4a4:	3fb10d66 	.word	0x3fb10d66
 800d4a8:	c54c206e 	.word	0xc54c206e
 800d4ac:	3fb745cd 	.word	0x3fb745cd
 800d4b0:	920083ff 	.word	0x920083ff
 800d4b4:	3fc24924 	.word	0x3fc24924
 800d4b8:	5555550d 	.word	0x5555550d
 800d4bc:	3fd55555 	.word	0x3fd55555
 800d4c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d4c4:	bfa2b444 	.word	0xbfa2b444
 800d4c8:	52defd9a 	.word	0x52defd9a
 800d4cc:	3fadde2d 	.word	0x3fadde2d
 800d4d0:	af749a6d 	.word	0xaf749a6d
 800d4d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d4d8:	fe231671 	.word	0xfe231671
 800d4dc:	3fbc71c6 	.word	0x3fbc71c6
 800d4e0:	9998ebc4 	.word	0x9998ebc4
 800d4e4:	3fc99999 	.word	0x3fc99999
 800d4e8:	54442d18 	.word	0x54442d18
 800d4ec:	bff921fb 	.word	0xbff921fb
 800d4f0:	440fffff 	.word	0x440fffff
 800d4f4:	7ff00000 	.word	0x7ff00000
 800d4f8:	3fdbffff 	.word	0x3fdbffff
 800d4fc:	3ff00000 	.word	0x3ff00000
 800d500:	3ff2ffff 	.word	0x3ff2ffff
 800d504:	40038000 	.word	0x40038000
 800d508:	3ff80000 	.word	0x3ff80000
 800d50c:	bff00000 	.word	0xbff00000
 800d510:	08021328 	.word	0x08021328
 800d514:	08021348 	.word	0x08021348

0800d518 <fabs>:
 800d518:	ec51 0b10 	vmov	r0, r1, d0
 800d51c:	4602      	mov	r2, r0
 800d51e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d522:	ec43 2b10 	vmov	d0, r2, r3
 800d526:	4770      	bx	lr

0800d528 <sqrtf>:
 800d528:	b508      	push	{r3, lr}
 800d52a:	ed2d 8b02 	vpush	{d8}
 800d52e:	eeb0 8a40 	vmov.f32	s16, s0
 800d532:	f000 f822 	bl	800d57a <__ieee754_sqrtf>
 800d536:	eeb4 8a48 	vcmp.f32	s16, s16
 800d53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53e:	d60c      	bvs.n	800d55a <sqrtf+0x32>
 800d540:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d560 <sqrtf+0x38>
 800d544:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d54c:	d505      	bpl.n	800d55a <sqrtf+0x32>
 800d54e:	f7fd fd9f 	bl	800b090 <__errno>
 800d552:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d556:	2321      	movs	r3, #33	@ 0x21
 800d558:	6003      	str	r3, [r0, #0]
 800d55a:	ecbd 8b02 	vpop	{d8}
 800d55e:	bd08      	pop	{r3, pc}
 800d560:	00000000 	.word	0x00000000

0800d564 <finite>:
 800d564:	b082      	sub	sp, #8
 800d566:	ed8d 0b00 	vstr	d0, [sp]
 800d56a:	9801      	ldr	r0, [sp, #4]
 800d56c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d570:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d574:	0fc0      	lsrs	r0, r0, #31
 800d576:	b002      	add	sp, #8
 800d578:	4770      	bx	lr

0800d57a <__ieee754_sqrtf>:
 800d57a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d57e:	4770      	bx	lr

0800d580 <__ieee754_hypot>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	ec51 0b10 	vmov	r0, r1, d0
 800d588:	ec53 2b11 	vmov	r2, r3, d1
 800d58c:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800d590:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800d594:	42a5      	cmp	r5, r4
 800d596:	b087      	sub	sp, #28
 800d598:	da05      	bge.n	800d5a6 <__ieee754_hypot+0x26>
 800d59a:	462e      	mov	r6, r5
 800d59c:	4625      	mov	r5, r4
 800d59e:	4634      	mov	r4, r6
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	4610      	mov	r0, r2
 800d5a4:	4632      	mov	r2, r6
 800d5a6:	1b2b      	subs	r3, r5, r4
 800d5a8:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	4682      	mov	sl, r0
 800d5b0:	46ab      	mov	fp, r5
 800d5b2:	4616      	mov	r6, r2
 800d5b4:	4627      	mov	r7, r4
 800d5b6:	dd05      	ble.n	800d5c4 <__ieee754_hypot+0x44>
 800d5b8:	4623      	mov	r3, r4
 800d5ba:	f7f2 fee7 	bl	800038c <__adddf3>
 800d5be:	4682      	mov	sl, r0
 800d5c0:	468b      	mov	fp, r1
 800d5c2:	e016      	b.n	800d5f2 <__ieee754_hypot+0x72>
 800d5c4:	4b75      	ldr	r3, [pc, #468]	@ (800d79c <__ieee754_hypot+0x21c>)
 800d5c6:	429d      	cmp	r5, r3
 800d5c8:	f340 8096 	ble.w	800d6f8 <__ieee754_hypot+0x178>
 800d5cc:	4b74      	ldr	r3, [pc, #464]	@ (800d7a0 <__ieee754_hypot+0x220>)
 800d5ce:	429d      	cmp	r5, r3
 800d5d0:	dd14      	ble.n	800d5fc <__ieee754_hypot+0x7c>
 800d5d2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d5d6:	4305      	orrs	r5, r0
 800d5d8:	d004      	beq.n	800d5e4 <__ieee754_hypot+0x64>
 800d5da:	4623      	mov	r3, r4
 800d5dc:	f7f2 fed6 	bl	800038c <__adddf3>
 800d5e0:	4682      	mov	sl, r0
 800d5e2:	468b      	mov	fp, r1
 800d5e4:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800d5e8:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800d5ec:	4334      	orrs	r4, r6
 800d5ee:	f000 80d2 	beq.w	800d796 <__ieee754_hypot+0x216>
 800d5f2:	ec4b ab10 	vmov	d0, sl, fp
 800d5f6:	b007      	add	sp, #28
 800d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fc:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800d600:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800d604:	46ab      	mov	fp, r5
 800d606:	4627      	mov	r7, r4
 800d608:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800d60c:	9301      	str	r3, [sp, #4]
 800d60e:	4b65      	ldr	r3, [pc, #404]	@ (800d7a4 <__ieee754_hypot+0x224>)
 800d610:	429c      	cmp	r4, r3
 800d612:	dc19      	bgt.n	800d648 <__ieee754_hypot+0xc8>
 800d614:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800d618:	da70      	bge.n	800d6fc <__ieee754_hypot+0x17c>
 800d61a:	4633      	mov	r3, r6
 800d61c:	4323      	orrs	r3, r4
 800d61e:	d0e8      	beq.n	800d5f2 <__ieee754_hypot+0x72>
 800d620:	4b61      	ldr	r3, [pc, #388]	@ (800d7a8 <__ieee754_hypot+0x228>)
 800d622:	2200      	movs	r2, #0
 800d624:	4630      	mov	r0, r6
 800d626:	4639      	mov	r1, r7
 800d628:	f7f3 f866 	bl	80006f8 <__aeabi_dmul>
 800d62c:	4b5e      	ldr	r3, [pc, #376]	@ (800d7a8 <__ieee754_hypot+0x228>)
 800d62e:	4606      	mov	r6, r0
 800d630:	460f      	mov	r7, r1
 800d632:	4650      	mov	r0, sl
 800d634:	4659      	mov	r1, fp
 800d636:	2200      	movs	r2, #0
 800d638:	f7f3 f85e 	bl	80006f8 <__aeabi_dmul>
 800d63c:	9b01      	ldr	r3, [sp, #4]
 800d63e:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800d642:	4682      	mov	sl, r0
 800d644:	468b      	mov	fp, r1
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	4632      	mov	r2, r6
 800d64a:	463b      	mov	r3, r7
 800d64c:	4650      	mov	r0, sl
 800d64e:	4659      	mov	r1, fp
 800d650:	f7f2 fe9a 	bl	8000388 <__aeabi_dsub>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4680      	mov	r8, r0
 800d65a:	4689      	mov	r9, r1
 800d65c:	4630      	mov	r0, r6
 800d65e:	4639      	mov	r1, r7
 800d660:	f7f3 fabc 	bl	8000bdc <__aeabi_dcmplt>
 800d664:	2200      	movs	r2, #0
 800d666:	2800      	cmp	r0, #0
 800d668:	d053      	beq.n	800d712 <__ieee754_hypot+0x192>
 800d66a:	462b      	mov	r3, r5
 800d66c:	4610      	mov	r0, r2
 800d66e:	4629      	mov	r1, r5
 800d670:	4614      	mov	r4, r2
 800d672:	f7f3 f841 	bl	80006f8 <__aeabi_dmul>
 800d676:	4632      	mov	r2, r6
 800d678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d67c:	463b      	mov	r3, r7
 800d67e:	4630      	mov	r0, r6
 800d680:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800d684:	f7f3 f838 	bl	80006f8 <__aeabi_dmul>
 800d688:	4622      	mov	r2, r4
 800d68a:	4606      	mov	r6, r0
 800d68c:	460f      	mov	r7, r1
 800d68e:	462b      	mov	r3, r5
 800d690:	4650      	mov	r0, sl
 800d692:	4659      	mov	r1, fp
 800d694:	f7f2 fe7a 	bl	800038c <__adddf3>
 800d698:	4622      	mov	r2, r4
 800d69a:	4680      	mov	r8, r0
 800d69c:	4689      	mov	r9, r1
 800d69e:	462b      	mov	r3, r5
 800d6a0:	4650      	mov	r0, sl
 800d6a2:	4659      	mov	r1, fp
 800d6a4:	f7f2 fe70 	bl	8000388 <__aeabi_dsub>
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	4640      	mov	r0, r8
 800d6ae:	4649      	mov	r1, r9
 800d6b0:	f7f3 f822 	bl	80006f8 <__aeabi_dmul>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	f7f2 fe64 	bl	8000388 <__aeabi_dsub>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6c8:	f7f2 fe5e 	bl	8000388 <__aeabi_dsub>
 800d6cc:	ec41 0b10 	vmov	d0, r0, r1
 800d6d0:	f000 f86c 	bl	800d7ac <__ieee754_sqrt>
 800d6d4:	9b01      	ldr	r3, [sp, #4]
 800d6d6:	ec5b ab10 	vmov	sl, fp, d0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d089      	beq.n	800d5f2 <__ieee754_hypot+0x72>
 800d6de:	051b      	lsls	r3, r3, #20
 800d6e0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4650      	mov	r0, sl
 800d6f0:	4659      	mov	r1, fp
 800d6f2:	f7f3 f801 	bl	80006f8 <__aeabi_dmul>
 800d6f6:	e762      	b.n	800d5be <__ieee754_hypot+0x3e>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	e787      	b.n	800d60c <__ieee754_hypot+0x8c>
 800d6fc:	9b01      	ldr	r3, [sp, #4]
 800d6fe:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800d702:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800d706:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800d70a:	9301      	str	r3, [sp, #4]
 800d70c:	46ab      	mov	fp, r5
 800d70e:	4627      	mov	r7, r4
 800d710:	e79a      	b.n	800d648 <__ieee754_hypot+0xc8>
 800d712:	4623      	mov	r3, r4
 800d714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800d722:	4614      	mov	r4, r2
 800d724:	461d      	mov	r5, r3
 800d726:	f7f2 ffe7 	bl	80006f8 <__aeabi_dmul>
 800d72a:	4642      	mov	r2, r8
 800d72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d730:	464b      	mov	r3, r9
 800d732:	4640      	mov	r0, r8
 800d734:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800d738:	f7f2 ffde 	bl	80006f8 <__aeabi_dmul>
 800d73c:	4652      	mov	r2, sl
 800d73e:	465b      	mov	r3, fp
 800d740:	4680      	mov	r8, r0
 800d742:	4689      	mov	r9, r1
 800d744:	4650      	mov	r0, sl
 800d746:	4659      	mov	r1, fp
 800d748:	f7f2 fe20 	bl	800038c <__adddf3>
 800d74c:	4622      	mov	r2, r4
 800d74e:	462b      	mov	r3, r5
 800d750:	f7f2 fe1a 	bl	8000388 <__aeabi_dsub>
 800d754:	4632      	mov	r2, r6
 800d756:	463b      	mov	r3, r7
 800d758:	f7f2 ffce 	bl	80006f8 <__aeabi_dmul>
 800d75c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d760:	4682      	mov	sl, r0
 800d762:	468b      	mov	fp, r1
 800d764:	4630      	mov	r0, r6
 800d766:	4639      	mov	r1, r7
 800d768:	f7f2 fe0e 	bl	8000388 <__aeabi_dsub>
 800d76c:	4622      	mov	r2, r4
 800d76e:	462b      	mov	r3, r5
 800d770:	f7f2 ffc2 	bl	80006f8 <__aeabi_dmul>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4650      	mov	r0, sl
 800d77a:	4659      	mov	r1, fp
 800d77c:	f7f2 fe06 	bl	800038c <__adddf3>
 800d780:	4602      	mov	r2, r0
 800d782:	460b      	mov	r3, r1
 800d784:	4640      	mov	r0, r8
 800d786:	4649      	mov	r1, r9
 800d788:	f7f2 fdfe 	bl	8000388 <__aeabi_dsub>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d794:	e798      	b.n	800d6c8 <__ieee754_hypot+0x148>
 800d796:	46b2      	mov	sl, r6
 800d798:	46bb      	mov	fp, r7
 800d79a:	e72a      	b.n	800d5f2 <__ieee754_hypot+0x72>
 800d79c:	5f300000 	.word	0x5f300000
 800d7a0:	7fefffff 	.word	0x7fefffff
 800d7a4:	20afffff 	.word	0x20afffff
 800d7a8:	7fd00000 	.word	0x7fd00000

0800d7ac <__ieee754_sqrt>:
 800d7ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b0:	4a68      	ldr	r2, [pc, #416]	@ (800d954 <__ieee754_sqrt+0x1a8>)
 800d7b2:	ec55 4b10 	vmov	r4, r5, d0
 800d7b6:	43aa      	bics	r2, r5
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	d110      	bne.n	800d7e0 <__ieee754_sqrt+0x34>
 800d7be:	4622      	mov	r2, r4
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	f7f2 ff98 	bl	80006f8 <__aeabi_dmul>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	f7f2 fddc 	bl	800038c <__adddf3>
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	460d      	mov	r5, r1
 800d7d8:	ec45 4b10 	vmov	d0, r4, r5
 800d7dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e0:	2d00      	cmp	r5, #0
 800d7e2:	dc0e      	bgt.n	800d802 <__ieee754_sqrt+0x56>
 800d7e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d7e8:	4322      	orrs	r2, r4
 800d7ea:	d0f5      	beq.n	800d7d8 <__ieee754_sqrt+0x2c>
 800d7ec:	b19d      	cbz	r5, 800d816 <__ieee754_sqrt+0x6a>
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	4629      	mov	r1, r5
 800d7f4:	f7f2 fdc8 	bl	8000388 <__aeabi_dsub>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	f7f3 f8a6 	bl	800094c <__aeabi_ddiv>
 800d800:	e7e8      	b.n	800d7d4 <__ieee754_sqrt+0x28>
 800d802:	152a      	asrs	r2, r5, #20
 800d804:	d115      	bne.n	800d832 <__ieee754_sqrt+0x86>
 800d806:	2000      	movs	r0, #0
 800d808:	e009      	b.n	800d81e <__ieee754_sqrt+0x72>
 800d80a:	0acb      	lsrs	r3, r1, #11
 800d80c:	3a15      	subs	r2, #21
 800d80e:	0549      	lsls	r1, r1, #21
 800d810:	2b00      	cmp	r3, #0
 800d812:	d0fa      	beq.n	800d80a <__ieee754_sqrt+0x5e>
 800d814:	e7f7      	b.n	800d806 <__ieee754_sqrt+0x5a>
 800d816:	462a      	mov	r2, r5
 800d818:	e7fa      	b.n	800d810 <__ieee754_sqrt+0x64>
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	3001      	adds	r0, #1
 800d81e:	02dc      	lsls	r4, r3, #11
 800d820:	d5fb      	bpl.n	800d81a <__ieee754_sqrt+0x6e>
 800d822:	1e44      	subs	r4, r0, #1
 800d824:	1b12      	subs	r2, r2, r4
 800d826:	f1c0 0420 	rsb	r4, r0, #32
 800d82a:	fa21 f404 	lsr.w	r4, r1, r4
 800d82e:	4323      	orrs	r3, r4
 800d830:	4081      	lsls	r1, r0
 800d832:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d836:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d83a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d83e:	07d2      	lsls	r2, r2, #31
 800d840:	bf5c      	itt	pl
 800d842:	005b      	lslpl	r3, r3, #1
 800d844:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d84c:	bf58      	it	pl
 800d84e:	0049      	lslpl	r1, r1, #1
 800d850:	2600      	movs	r6, #0
 800d852:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d856:	106d      	asrs	r5, r5, #1
 800d858:	0049      	lsls	r1, r1, #1
 800d85a:	2016      	movs	r0, #22
 800d85c:	4632      	mov	r2, r6
 800d85e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d862:	1917      	adds	r7, r2, r4
 800d864:	429f      	cmp	r7, r3
 800d866:	bfde      	ittt	le
 800d868:	193a      	addle	r2, r7, r4
 800d86a:	1bdb      	suble	r3, r3, r7
 800d86c:	1936      	addle	r6, r6, r4
 800d86e:	0fcf      	lsrs	r7, r1, #31
 800d870:	3801      	subs	r0, #1
 800d872:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d876:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d87a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d87e:	d1f0      	bne.n	800d862 <__ieee754_sqrt+0xb6>
 800d880:	4604      	mov	r4, r0
 800d882:	2720      	movs	r7, #32
 800d884:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d888:	429a      	cmp	r2, r3
 800d88a:	eb00 0e0c 	add.w	lr, r0, ip
 800d88e:	db02      	blt.n	800d896 <__ieee754_sqrt+0xea>
 800d890:	d113      	bne.n	800d8ba <__ieee754_sqrt+0x10e>
 800d892:	458e      	cmp	lr, r1
 800d894:	d811      	bhi.n	800d8ba <__ieee754_sqrt+0x10e>
 800d896:	f1be 0f00 	cmp.w	lr, #0
 800d89a:	eb0e 000c 	add.w	r0, lr, ip
 800d89e:	da42      	bge.n	800d926 <__ieee754_sqrt+0x17a>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	db40      	blt.n	800d926 <__ieee754_sqrt+0x17a>
 800d8a4:	f102 0801 	add.w	r8, r2, #1
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	458e      	cmp	lr, r1
 800d8ac:	bf88      	it	hi
 800d8ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d8b2:	eba1 010e 	sub.w	r1, r1, lr
 800d8b6:	4464      	add	r4, ip
 800d8b8:	4642      	mov	r2, r8
 800d8ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d8be:	3f01      	subs	r7, #1
 800d8c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d8c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d8c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d8cc:	d1dc      	bne.n	800d888 <__ieee754_sqrt+0xdc>
 800d8ce:	4319      	orrs	r1, r3
 800d8d0:	d01b      	beq.n	800d90a <__ieee754_sqrt+0x15e>
 800d8d2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d958 <__ieee754_sqrt+0x1ac>
 800d8d6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d95c <__ieee754_sqrt+0x1b0>
 800d8da:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8de:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8e2:	f7f2 fd51 	bl	8000388 <__aeabi_dsub>
 800d8e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	4640      	mov	r0, r8
 800d8f0:	4649      	mov	r1, r9
 800d8f2:	f7f3 f97d 	bl	8000bf0 <__aeabi_dcmple>
 800d8f6:	b140      	cbz	r0, 800d90a <__ieee754_sqrt+0x15e>
 800d8f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d8fc:	e9da 0100 	ldrd	r0, r1, [sl]
 800d900:	e9db 2300 	ldrd	r2, r3, [fp]
 800d904:	d111      	bne.n	800d92a <__ieee754_sqrt+0x17e>
 800d906:	3601      	adds	r6, #1
 800d908:	463c      	mov	r4, r7
 800d90a:	1072      	asrs	r2, r6, #1
 800d90c:	0863      	lsrs	r3, r4, #1
 800d90e:	07f1      	lsls	r1, r6, #31
 800d910:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d914:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d918:	bf48      	it	mi
 800d91a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d91e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d922:	4618      	mov	r0, r3
 800d924:	e756      	b.n	800d7d4 <__ieee754_sqrt+0x28>
 800d926:	4690      	mov	r8, r2
 800d928:	e7be      	b.n	800d8a8 <__ieee754_sqrt+0xfc>
 800d92a:	f7f2 fd2f 	bl	800038c <__adddf3>
 800d92e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d932:	4602      	mov	r2, r0
 800d934:	460b      	mov	r3, r1
 800d936:	4640      	mov	r0, r8
 800d938:	4649      	mov	r1, r9
 800d93a:	f7f3 f94f 	bl	8000bdc <__aeabi_dcmplt>
 800d93e:	b120      	cbz	r0, 800d94a <__ieee754_sqrt+0x19e>
 800d940:	1ca0      	adds	r0, r4, #2
 800d942:	bf08      	it	eq
 800d944:	3601      	addeq	r6, #1
 800d946:	3402      	adds	r4, #2
 800d948:	e7df      	b.n	800d90a <__ieee754_sqrt+0x15e>
 800d94a:	1c63      	adds	r3, r4, #1
 800d94c:	f023 0401 	bic.w	r4, r3, #1
 800d950:	e7db      	b.n	800d90a <__ieee754_sqrt+0x15e>
 800d952:	bf00      	nop
 800d954:	7ff00000 	.word	0x7ff00000
 800d958:	200001e0 	.word	0x200001e0
 800d95c:	200001d8 	.word	0x200001d8

0800d960 <_init>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	bf00      	nop
 800d964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d966:	bc08      	pop	{r3}
 800d968:	469e      	mov	lr, r3
 800d96a:	4770      	bx	lr

0800d96c <_fini>:
 800d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96e:	bf00      	nop
 800d970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d972:	bc08      	pop	{r3}
 800d974:	469e      	mov	lr, r3
 800d976:	4770      	bx	lr
