
Automated_Circuit_Tester_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013ad8  0800ee30  0800ee30  0000fe30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022908  08022908  000241e8  2**0
                  CONTENTS
  4 .ARM          00000008  08022908  08022908  00023908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022910  08022910  000241e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022910  08022910  00023910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022914  08022914  00023914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08022918  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000118d0  200001e8  08022b00  000241e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011ab8  08022b00  00024ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000241e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0a8  00000000  00000000  00024218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c5  00000000  00000000  000402c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00044388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001049  00000000  00000000  00045948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002762b  00000000  00000000  00046991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f51b  00000000  00000000  0006dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5921  00000000  00000000  0008d4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00172df8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c10  00000000  00000000  00172eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00179abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a79  00000000  00000000  00179b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  0017c5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ee18 	.word	0x0800ee18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800ee18 	.word	0x0800ee18

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96a 	b.w	8001034 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	460c      	mov	r4, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14e      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d84:	4694      	mov	ip, r2
 8000d86:	458c      	cmp	ip, r1
 8000d88:	4686      	mov	lr, r0
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	d962      	bls.n	8000e56 <__udivmoddi4+0xde>
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	4091      	lsls	r1, r2
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	4319      	orrs	r1, r3
 8000da2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f f68c 	uxth.w	r6, ip
 8000dae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb04 f106 	mul.w	r1, r4, r6
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dce:	f080 8112 	bcs.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 810f 	bls.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd8:	3c02      	subs	r4, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	fa1f f38e 	uxth.w	r3, lr
 8000de2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f606 	mul.w	r6, r0, r6
 8000df2:	429e      	cmp	r6, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x94>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfe:	f080 80fc 	bcs.w	8000ffa <__udivmoddi4+0x282>
 8000e02:	429e      	cmp	r6, r3
 8000e04:	f240 80f9 	bls.w	8000ffa <__udivmoddi4+0x282>
 8000e08:	4463      	add	r3, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11d      	cbz	r5, 8000e1e <__udivmoddi4+0xa6>
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d905      	bls.n	8000e32 <__udivmoddi4+0xba>
 8000e26:	b10d      	cbz	r5, 8000e2c <__udivmoddi4+0xb4>
 8000e28:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e7f5      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e32:	fab3 f183 	clz	r1, r3
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d146      	bne.n	8000ec8 <__udivmoddi4+0x150>
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0xcc>
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	f0c0 80f0 	bcc.w	8001024 <__udivmoddi4+0x2ac>
 8000e44:	1a86      	subs	r6, r0, r2
 8000e46:	eb64 0303 	sbc.w	r3, r4, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d0e6      	beq.n	8000e1e <__udivmoddi4+0xa6>
 8000e50:	e9c5 6300 	strd	r6, r3, [r5]
 8000e54:	e7e3      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 8090 	bne.w	8000f7c <__udivmoddi4+0x204>
 8000e5c:	eba1 040c 	sub.w	r4, r1, ip
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa1f f78c 	uxth.w	r7, ip
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e72:	fb08 4416 	mls	r4, r8, r6, r4
 8000e76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e7a:	fb07 f006 	mul.w	r0, r7, r6
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x11c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x11a>
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	f200 80cd 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e92:	4626      	mov	r6, r4
 8000e94:	1a1c      	subs	r4, r3, r0
 8000e96:	fa1f f38e 	uxth.w	r3, lr
 8000e9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb00 f707 	mul.w	r7, r0, r7
 8000eaa:	429f      	cmp	r7, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x148>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x146>
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	f200 80b0 	bhi.w	800101e <__udivmoddi4+0x2a6>
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	1bdb      	subs	r3, r3, r7
 8000ec2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0x9c>
 8000ec8:	f1c1 0620 	rsb	r6, r1, #32
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	fa22 f706 	lsr.w	r7, r2, r6
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed8:	fa04 f301 	lsl.w	r3, r4, r1
 8000edc:	ea43 030c 	orr.w	r3, r3, ip
 8000ee0:	40f4      	lsrs	r4, r6
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	0c38      	lsrs	r0, r7, #16
 8000ee8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eec:	fbb4 fef0 	udiv	lr, r4, r0
 8000ef0:	fa1f fc87 	uxth.w	ip, r7
 8000ef4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efc:	fb0e f90c 	mul.w	r9, lr, ip
 8000f00:	45a1      	cmp	r9, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x1a6>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0e:	f080 8084 	bcs.w	800101a <__udivmoddi4+0x2a2>
 8000f12:	45a1      	cmp	r9, r4
 8000f14:	f240 8081 	bls.w	800101a <__udivmoddi4+0x2a2>
 8000f18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	eba4 0409 	sub.w	r4, r4, r9
 8000f22:	fa1f f983 	uxth.w	r9, r3
 8000f26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x1d2>
 8000f3a:	193c      	adds	r4, r7, r4
 8000f3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f40:	d267      	bcs.n	8001012 <__udivmoddi4+0x29a>
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0x29a>
 8000f46:	3b02      	subs	r3, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f52:	eba4 040c 	sub.w	r4, r4, ip
 8000f56:	429c      	cmp	r4, r3
 8000f58:	46ce      	mov	lr, r9
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	d351      	bcc.n	8001002 <__udivmoddi4+0x28a>
 8000f5e:	d04e      	beq.n	8000ffe <__udivmoddi4+0x286>
 8000f60:	b155      	cbz	r5, 8000f78 <__udivmoddi4+0x200>
 8000f62:	ebb8 030e 	subs.w	r3, r8, lr
 8000f66:	eb64 040c 	sbc.w	r4, r4, ip
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	431e      	orrs	r6, r3
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	e9c5 6400 	strd	r6, r4, [r5]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	e750      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000f7c:	f1c2 0320 	rsb	r3, r2, #32
 8000f80:	fa20 f103 	lsr.w	r1, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa24 f303 	lsr.w	r3, r4, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	430c      	orrs	r4, r1
 8000f90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f98:	fa1f f78c 	uxth.w	r7, ip
 8000f9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa4:	0c23      	lsrs	r3, r4, #16
 8000fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000faa:	fb00 f107 	mul.w	r1, r0, r7
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x24c>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fba:	d22c      	bcs.n	8001016 <__udivmoddi4+0x29e>
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d92a      	bls.n	8001016 <__udivmoddi4+0x29e>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fcc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd4:	fb01 f307 	mul.w	r3, r1, r7
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x276>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe4:	d213      	bcs.n	800100e <__udivmoddi4+0x296>
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	d911      	bls.n	800100e <__udivmoddi4+0x296>
 8000fea:	3902      	subs	r1, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	1ae4      	subs	r4, r4, r3
 8000ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff4:	e739      	b.n	8000e6a <__udivmoddi4+0xf2>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	e6f0      	b.n	8000ddc <__udivmoddi4+0x64>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e706      	b.n	8000e0c <__udivmoddi4+0x94>
 8000ffe:	45c8      	cmp	r8, r9
 8001000:	d2ae      	bcs.n	8000f60 <__udivmoddi4+0x1e8>
 8001002:	ebb9 0e02 	subs.w	lr, r9, r2
 8001006:	eb63 0c07 	sbc.w	ip, r3, r7
 800100a:	3801      	subs	r0, #1
 800100c:	e7a8      	b.n	8000f60 <__udivmoddi4+0x1e8>
 800100e:	4631      	mov	r1, r6
 8001010:	e7ed      	b.n	8000fee <__udivmoddi4+0x276>
 8001012:	4603      	mov	r3, r0
 8001014:	e799      	b.n	8000f4a <__udivmoddi4+0x1d2>
 8001016:	4630      	mov	r0, r6
 8001018:	e7d4      	b.n	8000fc4 <__udivmoddi4+0x24c>
 800101a:	46d6      	mov	lr, sl
 800101c:	e77f      	b.n	8000f1e <__udivmoddi4+0x1a6>
 800101e:	4463      	add	r3, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e74d      	b.n	8000ec0 <__udivmoddi4+0x148>
 8001024:	4606      	mov	r6, r0
 8001026:	4623      	mov	r3, r4
 8001028:	4608      	mov	r0, r1
 800102a:	e70f      	b.n	8000e4c <__udivmoddi4+0xd4>
 800102c:	3e02      	subs	r6, #2
 800102e:	4463      	add	r3, ip
 8001030:	e730      	b.n	8000e94 <__udivmoddi4+0x11c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <computeCoeffs>:
#include "adc_fft.h"


//get the frequency components and store them to reuse in the globals input_FFT (freq) and output_FFT (mag)
void computeCoeffs(float output_FFT[FFT_BUFFER_SIZE]) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    for (int i = 0, fIndex = 0; i < FFT_BUFFER_SIZE; i += 2, fIndex++) {
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	e03b      	b.n	80010c2 <computeCoeffs+0x8a>
        float real = output_FFT[i];
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	617b      	str	r3, [r7, #20]
        float imag = output_FFT[i + 1];
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
        float mag = fabs(sqrtf(real * real + imag * imag));
 8001064:	edd7 7a05 	vldr	s15, [r7, #20]
 8001068:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800106c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001070:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	f00d fcb0 	bl	800e9e0 <sqrtf>
 8001080:	ed87 0a03 	vstr	s0, [r7, #12]

        // Overwrite input/output FFT arrays with freq/mag
        input_FFT[fIndex] = ((float) fIndex * SAMPLE_RATE_HZ / (float) FFT_BUFFER_SIZE);
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010d8 <computeCoeffs+0xa0>
 8001092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001096:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80010dc <computeCoeffs+0xa4>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <computeCoeffs+0xa8>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edc3 7a00 	vstr	s15, [r3]
        output_FFT[fIndex] = mag;
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	601a      	str	r2, [r3, #0]
    for (int i = 0, fIndex = 0; i < FFT_BUFFER_SIZE; i += 2, fIndex++) {
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3302      	adds	r3, #2
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	3301      	adds	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010c8:	dbbf      	blt.n	800104a <computeCoeffs+0x12>
    }
		
		sendFFT_ready = 1;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <computeCoeffs+0xac>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	49742400 	.word	0x49742400
 80010dc:	45000000 	.word	0x45000000
 80010e0:	2000d910 	.word	0x2000d910
 80010e4:	2000d90d 	.word	0x2000d90d

080010e8 <sendADC_UART>:


void sendADC_UART() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
    const char *preamble = "ADC\r\n";
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <sendADC_UART+0x38>)
 80010f0:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)preamble, strlen(preamble), HAL_MAX_DELAY);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f93c 	bl	8000370 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4808      	ldr	r0, [pc, #32]	@ (8001124 <sendADC_UART+0x3c>)
 8001104:	f008 fc66 	bl	80099d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t *)adc_buffer, sizeof(adc_buffer), HAL_MAX_DELAY);
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001110:	4905      	ldr	r1, [pc, #20]	@ (8001128 <sendADC_UART+0x40>)
 8001112:	4804      	ldr	r0, [pc, #16]	@ (8001124 <sendADC_UART+0x3c>)
 8001114:	f008 fc5e 	bl	80099d4 <HAL_UART_Transmit>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	0800ee30 	.word	0x0800ee30
 8001124:	20000500 	.word	0x20000500
 8001128:	2000c90c 	.word	0x2000c90c

0800112c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
   if (hadc->Instance == ADC1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <HAL_ADC_ConvCpltCallback+0x28>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d106      	bne.n	800114c <HAL_ADC_ConvCpltCallback+0x20>
    {
      // adc_buffer is now full
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800113e:	2101      	movs	r1, #1
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001142:	f005 f88c 	bl	800625e <HAL_GPIO_TogglePin>
			ADC_full = 1;
 8001146:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_ADC_ConvCpltCallback+0x30>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
    }
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40012000 	.word	0x40012000
 8001158:	40020400 	.word	0x40020400
 800115c:	2000d90c 	.word	0x2000d90c

08001160 <sendFFT_UART>:


void sendFFT_UART() {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
		if(sendFFT_ready == 1){
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <sendFFT_UART+0x58>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d11f      	bne.n	80011ae <sendFFT_UART+0x4e>
			//note that this ensures that the input and output buffers are Hz/Mag after compute coeffs. 
			sendFFT_ready = 0;
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <sendFFT_UART+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
			const char *preamble = "FFT\r\n";
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <sendFFT_UART+0x5c>)
 8001176:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3, (uint8_t *)preamble, strlen(preamble), HAL_MAX_DELAY);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff f8f9 	bl	8000370 <strlen>
 800117e:	4603      	mov	r3, r0
 8001180:	b29a      	uxth	r2, r3
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <sendFFT_UART+0x60>)
 800118a:	f008 fc23 	bl	80099d4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart3, (uint8_t *)input_FFT, (FFT_BUFFER_SIZE / 2) * sizeof(float), HAL_MAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001196:	490b      	ldr	r1, [pc, #44]	@ (80011c4 <sendFFT_UART+0x64>)
 8001198:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <sendFFT_UART+0x60>)
 800119a:	f008 fc1b 	bl	80099d4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)output_FFT, (FFT_BUFFER_SIZE / 2) * sizeof(float), HAL_MAX_DELAY);
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <sendFFT_UART+0x68>)
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <sendFFT_UART+0x60>)
 80011aa:	f008 fc13 	bl	80099d4 <HAL_UART_Transmit>
		}
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000d90d 	.word	0x2000d90d
 80011bc:	0800ee38 	.word	0x0800ee38
 80011c0:	20000500 	.word	0x20000500
 80011c4:	2000d910 	.word	0x2000d910
 80011c8:	2000f910 	.word	0x2000f910

080011cc <send_img>:
		HAL_UART_Transmit(&huart3, &end[i], 1, HAL_MAX_DELAY);
	}
}


void send_img(){
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	f5ad 4d43 	sub.w	sp, sp, #49920	@ 0xc300
 80011d2:	b0b9      	sub	sp, #228	@ 0xe4
 80011d4:	af00      	add	r7, sp, #0
	uint8_t pream[] = "\r\nPREAMBLE!\r\n"; 
 80011d6:	4b50      	ldr	r3, [pc, #320]	@ (8001318 <send_img+0x14c>)
 80011d8:	f507 4443 	add.w	r4, r7, #49920	@ 0xc300
 80011dc:	f104 04c0 	add.w	r4, r4, #192	@ 0xc0
 80011e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e2:	c407      	stmia	r4!, {r0, r1, r2}
 80011e4:	8023      	strh	r3, [r4, #0]
	uint8_t send_ptr[FRAMESIZE * 2] = {0};
 80011e6:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 80011ea:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	3304      	adds	r3, #4
 80011f4:	f24c 32bc 	movw	r2, #50108	@ 0xc3bc
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00b f951 	bl	800c4a2 <memset>

	uint8_t* byte_ptr = (uint8_t*)snapshot_buff;
 8001200:	4b46      	ldr	r3, [pc, #280]	@ (800131c <send_img+0x150>)
 8001202:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 8001206:	f102 02d0 	add.w	r2, r2, #208	@ 0xd0
 800120a:	6013      	str	r3, [r2, #0]

	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 800120c:	f24c 33bf 	movw	r3, #50111	@ 0xc3bf
 8001210:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 8001214:	f102 02dc 	add.w	r2, r2, #220	@ 0xdc
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 8001220:	f102 02d8 	add.w	r2, r2, #216	@ 0xd8
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e02d      	b.n	8001284 <send_img+0xb8>
    	send_ptr[j] = byte_ptr[i];
 8001228:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 800122c:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 8001236:	f102 02d0 	add.w	r2, r2, #208	@ 0xd0
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	4413      	add	r3, r2
 800123e:	7819      	ldrb	r1, [r3, #0]
 8001240:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8001244:	f5a3 7278 	sub.w	r2, r3, #992	@ 0x3e0
 8001248:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 800124c:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	460a      	mov	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]
	for (int i = FRAMESIZE * 2 - 1, j = 0; i >= 0 && j < FRAMESIZE*2-1; i--, j++) {
 8001258:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 800125c:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 8001268:	f102 02dc 	add.w	r2, r2, #220	@ 0xdc
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 8001272:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 800127e:	f102 02d8 	add.w	r2, r2, #216	@ 0xd8
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 8001288:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db08      	blt.n	80012a4 <send_img+0xd8>
 8001292:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 8001296:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f24c 32be 	movw	r2, #50110	@ 0xc3be
 80012a0:	4293      	cmp	r3, r2
 80012a2:	ddc1      	ble.n	8001228 <send_img+0x5c>
	#else
		#define LOG() do { } while (0)
	#endif

	//SEND PREAMBLE
	for(int i = 0; i < 13; i++){ 
 80012a4:	2300      	movs	r3, #0
 80012a6:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 80012aa:	f102 02d4 	add.w	r2, r2, #212	@ 0xd4
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e01a      	b.n	80012e8 <send_img+0x11c>
		HAL_UART_Transmit(&huart3, &pream[i], 1, HAL_MAX_DELAY);
 80012b2:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 80012b6:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80012ba:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 80012be:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	18d1      	adds	r1, r2, r3
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	2201      	movs	r2, #1
 80012cc:	4814      	ldr	r0, [pc, #80]	@ (8001320 <send_img+0x154>)
 80012ce:	f008 fb81 	bl	80099d4 <HAL_UART_Transmit>
	for(int i = 0; i < 13; i++){ 
 80012d2:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 80012d6:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	f507 4243 	add.w	r2, r7, #49920	@ 0xc300
 80012e2:	f102 02d4 	add.w	r2, r2, #212	@ 0xd4
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	f507 4343 	add.w	r3, r7, #49920	@ 0xc300
 80012ec:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	dddd      	ble.n	80012b2 <send_img+0xe6>
	}
	
	// Send image data through serial port.
	
	HAL_UART_Transmit(&huart3, send_ptr, FRAMESIZE*2, HAL_MAX_DELAY);
 80012f6:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 80012fa:	39e0      	subs	r1, #224	@ 0xe0
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	f24c 32c0 	movw	r2, #50112	@ 0xc3c0
 8001304:	4806      	ldr	r0, [pc, #24]	@ (8001320 <send_img+0x154>)
 8001306:	f008 fb65 	bl	80099d4 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, &send_ptr[FRAMESIZE], FRAMESIZE, HAL_MAX_DELAY);
	
}
 800130a:	bf00      	nop
 800130c:	f507 4743 	add.w	r7, r7, #49920	@ 0xc300
 8001310:	37e4      	adds	r7, #228	@ 0xe4
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	0800eeec 	.word	0x0800eeec
 800131c:	20000548 	.word	0x20000548
 8001320:	20000500 	.word	0x20000500

08001324 <p3>:


void p3(){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	ov7670_snapshot(snapshot_buff);
 8001328:	480a      	ldr	r0, [pc, #40]	@ (8001354 <p3+0x30>)
 800132a:	f001 f889 	bl	8002440 <ov7670_snapshot>
		while(!dma_flag)
 800132e:	e002      	b.n	8001336 <p3+0x12>
		{
			HAL_Delay(10);	
 8001330:	200a      	movs	r0, #10
 8001332:	f002 f849 	bl	80033c8 <HAL_Delay>
		while(!dma_flag)
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <p3+0x34>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f8      	beq.n	8001330 <p3+0xc>
		}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800133e:	2180      	movs	r1, #128	@ 0x80
 8001340:	4806      	ldr	r0, [pc, #24]	@ (800135c <p3+0x38>)
 8001342:	f004 ff8c 	bl	800625e <HAL_GPIO_TogglePin>
		dma_flag = 0;
 8001346:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <p3+0x34>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
		//print_ss(); 
		send_img(); 
 800134c:	f7ff ff3e 	bl	80011cc <send_img>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000548 	.word	0x20000548
 8001358:	2000c908 	.word	0x2000c908
 800135c:	40020400 	.word	0x40020400

08001360 <print_msg>:
#include <string.h>
#include <stdio.h>



void print_msg(char * msg) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), 100);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff f801 	bl	8000370 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	2364      	movs	r3, #100	@ 0x64
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4803      	ldr	r0, [pc, #12]	@ (8001384 <print_msg+0x24>)
 8001378:	f008 fb2c 	bl	80099d4 <HAL_UART_Transmit>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000500 	.word	0x20000500

08001388 <flashLED>:

void flashLED(GPIO_TypeDef* GPIO_Port, uint16_t GPIO_Pin, uint32_t delay_ms, uint8_t toggles) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	461a      	mov	r2, r3
 8001394:	460b      	mov	r3, r1
 8001396:	817b      	strh	r3, [r7, #10]
 8001398:	4613      	mov	r3, r2
 800139a:	727b      	strb	r3, [r7, #9]
    for (uint8_t i = 0; i < toggles; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	75fb      	strb	r3, [r7, #23]
 80013a0:	e00a      	b.n	80013b8 <flashLED+0x30>
        HAL_GPIO_TogglePin(GPIO_Port, GPIO_Pin);
 80013a2:	897b      	ldrh	r3, [r7, #10]
 80013a4:	4619      	mov	r1, r3
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f004 ff59 	bl	800625e <HAL_GPIO_TogglePin>
        HAL_Delay(delay_ms);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f002 f80b 	bl	80033c8 <HAL_Delay>
    for (uint8_t i = 0; i < toggles; i++) {
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	3301      	adds	r3, #1
 80013b6:	75fb      	strb	r3, [r7, #23]
 80013b8:	7dfa      	ldrb	r2, [r7, #23]
 80013ba:	7a7b      	ldrb	r3, [r7, #9]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3f0      	bcc.n	80013a2 <flashLED+0x1a>
    }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	@ 0x50
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	2234      	movs	r2, #52	@ 0x34
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f00b f861 	bl	800c4a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	4b29      	ldr	r3, [pc, #164]	@ (800149c <SystemClock_Config+0xd0>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	4a28      	ldr	r2, [pc, #160]	@ (800149c <SystemClock_Config+0xd0>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <SystemClock_Config+0xd0>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800140c:	2300      	movs	r3, #0
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <SystemClock_Config+0xd4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a22      	ldr	r2, [pc, #136]	@ (80014a0 <SystemClock_Config+0xd4>)
 8001416:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <SystemClock_Config+0xd4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001428:	2301      	movs	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800142c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001430:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2302      	movs	r3, #2
 8001434:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001436:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800143a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800143c:	2304      	movs	r3, #4
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001440:	23a8      	movs	r3, #168	@ 0xa8
 8001442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001448:	2307      	movs	r3, #7
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4618      	mov	r0, r3
 8001456:	f006 ff2f 	bl	80082b8 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001460:	f000 fb70 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001464:	230f      	movs	r3, #15
 8001466:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001468:	2302      	movs	r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001470:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001474:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2105      	movs	r1, #5
 8001482:	4618      	mov	r0, r3
 8001484:	f006 fbce 	bl	8007c24 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800148e:	f000 fb59 	bl	8001b44 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3750      	adds	r7, #80	@ 0x50
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_ADC1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014b8:	4a22      	ldr	r2, [pc, #136]	@ (8001544 <MX_ADC1_Init+0xa0>)
 80014ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014de:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014e8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_ADC1_Init+0x9c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_ADC1_Init+0x9c>)
 8001504:	2201      	movs	r2, #1
 8001506:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <MX_ADC1_Init+0x9c>)
 800150a:	f001 ff81 	bl	8003410 <HAL_ADC_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001514:	f000 fb16 	bl	8001b44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800151c:	2301      	movs	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_ADC1_Init+0x9c>)
 800152a:	f002 f933 	bl	8003794 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001534:	f000 fb06 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000228 	.word	0x20000228
 8001544:	40012000 	.word	0x40012000

08001548 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
 void MX_DCMI_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_DCMI_Init+0x60>)
 800154e:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <MX_DCMI_Init+0x64>)
 8001550:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <MX_DCMI_Init+0x60>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <MX_DCMI_Init+0x60>)
 800155a:	2220      	movs	r2, #32
 800155c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <MX_DCMI_Init+0x60>)
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001564:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <MX_DCMI_Init+0x60>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <MX_DCMI_Init+0x60>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001570:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <MX_DCMI_Init+0x60>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_DCMI_Init+0x60>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <MX_DCMI_Init+0x60>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_DCMI_Init+0x60>)
 8001584:	2200      	movs	r2, #0
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <MX_DCMI_Init+0x60>)
 800158a:	2200      	movs	r2, #0
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_DCMI_Init+0x60>)
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <MX_DCMI_Init+0x60>)
 8001596:	f002 feb1 	bl	80042fc <HAL_DCMI_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80015a0:	f000 fad0 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002d0 	.word	0x200002d0
 80015ac:	50050000 	.word	0x50050000

080015b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015b6:	4a13      	ldr	r2, [pc, #76]	@ (8001604 <MX_I2C1_Init+0x54>)
 80015b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015bc:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <MX_I2C1_Init+0x58>)
 80015be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ec:	4804      	ldr	r0, [pc, #16]	@ (8001600 <MX_I2C1_Init+0x50>)
 80015ee:	f004 fe75 	bl	80062dc <HAL_I2C_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015f8:	f000 faa4 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000380 	.word	0x20000380
 8001604:	40005400 	.word	0x40005400
 8001608:	000186a0 	.word	0x000186a0

0800160c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <MX_I2C2_Init+0x50>)
 8001612:	4a13      	ldr	r2, [pc, #76]	@ (8001660 <MX_I2C2_Init+0x54>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_I2C2_Init+0x50>)
 8001618:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <MX_I2C2_Init+0x58>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <MX_I2C2_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_I2C2_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_I2C2_Init+0x50>)
 800162a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800162e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <MX_I2C2_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_I2C2_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <MX_I2C2_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_I2C2_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001648:	4804      	ldr	r0, [pc, #16]	@ (800165c <MX_I2C2_Init+0x50>)
 800164a:	f004 fe47 	bl	80062dc <HAL_I2C_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001654:	f000 fa76 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200003d4 	.word	0x200003d4
 8001660:	40005800 	.word	0x40005800
 8001664:	000186a0 	.word	0x000186a0

08001668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b092      	sub	sp, #72	@ 0x48
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2220      	movs	r2, #32
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f00a ff05 	bl	800c4a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001698:	4b32      	ldr	r3, [pc, #200]	@ (8001764 <MX_TIM1_Init+0xfc>)
 800169a:	4a33      	ldr	r2, [pc, #204]	@ (8001768 <MX_TIM1_Init+0x100>)
 800169c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800169e:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <MX_TIM1_Init+0xfc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <MX_TIM1_Init+0xfc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80016aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001764 <MX_TIM1_Init+0xfc>)
 80016ac:	2214      	movs	r2, #20
 80016ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <MX_TIM1_Init+0xfc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001764 <MX_TIM1_Init+0xfc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016bc:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <MX_TIM1_Init+0xfc>)
 80016be:	2280      	movs	r2, #128	@ 0x80
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016c2:	4828      	ldr	r0, [pc, #160]	@ (8001764 <MX_TIM1_Init+0xfc>)
 80016c4:	f007 f975 	bl	80089b2 <HAL_TIM_PWM_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80016ce:	f000 fa39 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016de:	4619      	mov	r1, r3
 80016e0:	4820      	ldr	r0, [pc, #128]	@ (8001764 <MX_TIM1_Init+0xfc>)
 80016e2:	f008 f845 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80016ec:	f000 fa2a 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2360      	movs	r3, #96	@ 0x60
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 80016f4:	230a      	movs	r3, #10
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	4813      	ldr	r0, [pc, #76]	@ (8001764 <MX_TIM1_Init+0xfc>)
 8001716:	f007 fb53 	bl	8008dc0 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001720:	f000 fa10 	bl	8001b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800173c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4807      	ldr	r0, [pc, #28]	@ (8001764 <MX_TIM1_Init+0xfc>)
 8001748:	f008 f88e 	bl	8009868 <HAL_TIMEx_ConfigBreakDeadTime>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001752:	f000 f9f7 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001756:	4803      	ldr	r0, [pc, #12]	@ (8001764 <MX_TIM1_Init+0xfc>)
 8001758:	f001 fbca 	bl	8002ef0 <HAL_TIM_MspPostInit>

}
 800175c:	bf00      	nop
 800175e:	3748      	adds	r7, #72	@ 0x48
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000428 	.word	0x20000428
 8001768:	40010000 	.word	0x40010000

0800176c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	463b      	mov	r3, r7
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <MX_TIM2_Init+0x94>)
 800178a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800178e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <MX_TIM2_Init+0x94>)
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <MX_TIM2_Init+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83;
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <MX_TIM2_Init+0x94>)
 800179e:	2253      	movs	r2, #83	@ 0x53
 80017a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ae:	4814      	ldr	r0, [pc, #80]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017b0:	f007 f820 	bl	80087f4 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80017ba:	f000 f9c3 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	4619      	mov	r1, r3
 80017ca:	480d      	ldr	r0, [pc, #52]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017cc:	f007 fbba 	bl	8008f44 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 f9b5 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017da:	2320      	movs	r3, #32
 80017dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e2:	463b      	mov	r3, r7
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	@ (8001800 <MX_TIM2_Init+0x94>)
 80017e8:	f007 ffc2 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80017f2:	f000 f9a7 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000470 	.word	0x20000470

08001804 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM6_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <MX_TIM6_Init+0x64>)
 8001814:	4a15      	ldr	r2, [pc, #84]	@ (800186c <MX_TIM6_Init+0x68>)
 8001816:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <MX_TIM6_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <MX_TIM6_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_TIM6_Init+0x64>)
 8001826:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800182a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <MX_TIM6_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001832:	480d      	ldr	r0, [pc, #52]	@ (8001868 <MX_TIM6_Init+0x64>)
 8001834:	f006 ffde 	bl	80087f4 <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800183e:	f000 f981 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800184a:	463b      	mov	r3, r7
 800184c:	4619      	mov	r1, r3
 800184e:	4806      	ldr	r0, [pc, #24]	@ (8001868 <MX_TIM6_Init+0x64>)
 8001850:	f007 ff8e 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800185a:	f000 f973 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200004b8 	.word	0x200004b8
 800186c:	40001000 	.word	0x40001000

08001870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART3_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 8001876:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <MX_USART3_UART_Init+0x60>)
 8001878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018a6:	4809      	ldr	r0, [pc, #36]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 80018a8:	f008 f844 	bl	8009934 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018b2:	f000 f947 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <MX_USART3_UART_Init+0x5c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0220 	orr.w	r2, r2, #32
 80018c4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000500 	.word	0x20000500
 80018d0:	40004800 	.word	0x40004800

080018d4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
 void MX_USB_OTG_FS_USB_Init(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
 void MX_DMA_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <MX_DMA_Init+0x4c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <MX_DMA_Init+0x4c>)
 80018f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <MX_DMA_Init+0x4c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2038      	movs	r0, #56	@ 0x38
 800190c:	f002 facd 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001910:	2038      	movs	r0, #56	@ 0x38
 8001912:	f002 fae6 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2039      	movs	r0, #57	@ 0x39
 800191c:	f002 fac5 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001920:	2039      	movs	r0, #57	@ 0x39
 8001922:	f002 fade 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	@ 0x38
 8001938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	4b77      	ldr	r3, [pc, #476]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a76      	ldr	r2, [pc, #472]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001954:	f043 0310 	orr.w	r3, r3, #16
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b74      	ldr	r3, [pc, #464]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	623b      	str	r3, [r7, #32]
 8001964:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	4b70      	ldr	r3, [pc, #448]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a6f      	ldr	r2, [pc, #444]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b6d      	ldr	r3, [pc, #436]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	4b69      	ldr	r3, [pc, #420]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a68      	ldr	r2, [pc, #416]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 800198c:	f043 0320 	orr.w	r3, r3, #32
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b66      	ldr	r3, [pc, #408]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	4b62      	ldr	r3, [pc, #392]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a61      	ldr	r2, [pc, #388]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b5f      	ldr	r3, [pc, #380]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b5b      	ldr	r3, [pc, #364]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a53      	ldr	r2, [pc, #332]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a4c      	ldr	r2, [pc, #304]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b46      	ldr	r3, [pc, #280]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a45      	ldr	r2, [pc, #276]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <MX_GPIO_Init+0x1f8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001a30:	483f      	ldr	r0, [pc, #252]	@ (8001b30 <MX_GPIO_Init+0x1fc>)
 8001a32:	f004 fbfb 	bl	800622c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001a3c:	483d      	ldr	r0, [pc, #244]	@ (8001b34 <MX_GPIO_Init+0x200>)
 8001a3e:	f004 fbf5 	bl	800622c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	483c      	ldr	r0, [pc, #240]	@ (8001b38 <MX_GPIO_Init+0x204>)
 8001a48:	f004 fbf0 	bl	800622c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a60:	4619      	mov	r1, r3
 8001a62:	4836      	ldr	r0, [pc, #216]	@ (8001b3c <MX_GPIO_Init+0x208>)
 8001a64:	f004 fa4e 	bl	8005f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a68:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	482b      	ldr	r0, [pc, #172]	@ (8001b30 <MX_GPIO_Init+0x1fc>)
 8001a82:	f004 fa3f 	bl	8005f04 <HAL_GPIO_Init>


  //MOTOR PINS
  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a86:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4825      	ldr	r0, [pc, #148]	@ (8001b34 <MX_GPIO_Init+0x200>)
 8001aa0:	f004 fa30 	bl	8005f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001aa4:	2340      	movs	r3, #64	@ 0x40
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481f      	ldr	r0, [pc, #124]	@ (8001b38 <MX_GPIO_Init+0x204>)
 8001abc:	f004 fa22 	bl	8005f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ac0:	2380      	movs	r3, #128	@ 0x80
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4819      	ldr	r0, [pc, #100]	@ (8001b38 <MX_GPIO_Init+0x204>)
 8001ad4:	f004 fa16 	bl	8005f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ad8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001aea:	230a      	movs	r3, #10
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <MX_GPIO_Init+0x20c>)
 8001af6:	f004 fa05 	bl	8005f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001afa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <MX_GPIO_Init+0x20c>)
 8001b10:	f004 f9f8 	bl	8005f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2028      	movs	r0, #40	@ 0x28
 8001b1a:	f002 f9c6 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b1e:	2028      	movs	r0, #40	@ 0x28
 8001b20:	f002 f9df 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b24:	bf00      	nop
 8001b26:	3738      	adds	r7, #56	@ 0x38
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40021400 	.word	0x40021400
 8001b38:	40021800 	.word	0x40021800
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020000 	.word	0x40020000

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <HAL_UART_RxCpltCallback>:
float posY = 0.0f;

extern arm_rfft_fast_instance_f32 fftHandler;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

    if (!(huart->Instance == USART3)) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a28      	ldr	r2, [pc, #160]	@ (8001c00 <HAL_UART_RxCpltCallback+0xb0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d149      	bne.n	8001bf6 <HAL_UART_RxCpltCallback+0xa6>
        return; // Not from USART3, ignore
    }

    switch (state) {
 8001b62:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <HAL_UART_RxCpltCallback+0xb4>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_UART_RxCpltCallback+0x20>
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d025      	beq.n	8001bba <HAL_UART_RxCpltCallback+0x6a>
 8001b6e:	e036      	b.n	8001bde <HAL_UART_RxCpltCallback+0x8e>
        case STATE_LISTEN:
            if (match_command(rx_data_arr, CMD_TAKEPIC)) {
 8001b70:	4925      	ldr	r1, [pc, #148]	@ (8001c08 <HAL_UART_RxCpltCallback+0xb8>)
 8001b72:	4826      	ldr	r0, [pc, #152]	@ (8001c0c <HAL_UART_RxCpltCallback+0xbc>)
 8001b74:	f000 f95a 	bl	8001e2c <match_command>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_UART_RxCpltCallback+0x36>
                ptr_state = State_Picture; //next state 
 8001b7e:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <HAL_UART_RxCpltCallback+0xc0>)
 8001b80:	4a24      	ldr	r2, [pc, #144]	@ (8001c14 <HAL_UART_RxCpltCallback+0xc4>)
 8001b82:	601a      	str	r2, [r3, #0]
            } else if (match_command(rx_data_arr, CMD_ADCFFT)) {
                ptr_state = State_ADC_FFT;
            } else {
                ptr_state = State_Listen;
            }
            break;
 8001b84:	e038      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0xa8>
            } else if (match_command(rx_data_arr, CMD_COORDS)) {
 8001b86:	4924      	ldr	r1, [pc, #144]	@ (8001c18 <HAL_UART_RxCpltCallback+0xc8>)
 8001b88:	4820      	ldr	r0, [pc, #128]	@ (8001c0c <HAL_UART_RxCpltCallback+0xbc>)
 8001b8a:	f000 f94f 	bl	8001e2c <match_command>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_UART_RxCpltCallback+0x4c>
                ptr_state = State_Coord_RX;
 8001b94:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <HAL_UART_RxCpltCallback+0xc0>)
 8001b96:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <HAL_UART_RxCpltCallback+0xcc>)
 8001b98:	601a      	str	r2, [r3, #0]
            break;
 8001b9a:	e02d      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0xa8>
            } else if (match_command(rx_data_arr, CMD_ADCFFT)) {
 8001b9c:	4920      	ldr	r1, [pc, #128]	@ (8001c20 <HAL_UART_RxCpltCallback+0xd0>)
 8001b9e:	481b      	ldr	r0, [pc, #108]	@ (8001c0c <HAL_UART_RxCpltCallback+0xbc>)
 8001ba0:	f000 f944 	bl	8001e2c <match_command>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_UART_RxCpltCallback+0x62>
                ptr_state = State_ADC_FFT;
 8001baa:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_UART_RxCpltCallback+0xc0>)
 8001bac:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <HAL_UART_RxCpltCallback+0xd4>)
 8001bae:	601a      	str	r2, [r3, #0]
            break;
 8001bb0:	e022      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0xa8>
                ptr_state = State_Listen;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <HAL_UART_RxCpltCallback+0xc0>)
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <HAL_UART_RxCpltCallback+0xd8>)
 8001bb6:	601a      	str	r2, [r3, #0]
            break;
 8001bb8:	e01e      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0xa8>

        case STATE_COORDS:
        	
            memcpy(&posX, &rx_data_arr[0], 4);
 8001bba:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <HAL_UART_RxCpltCallback+0xbc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001c2c <HAL_UART_RxCpltCallback+0xdc>)
 8001bc0:	6013      	str	r3, [r2, #0]
            memcpy(&posY, &rx_data_arr[4], 4);
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_UART_RxCpltCallback+0xbc>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_UART_RxCpltCallback+0xe0>)
 8001bc8:	6013      	str	r3, [r2, #0]
            ptr_state = State_Motors;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_UART_RxCpltCallback+0xc0>)
 8001bcc:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_UART_RxCpltCallback+0xe4>)
 8001bce:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart3, rx_data_arr, 8, 100); //return received coords
 8001bd0:	2364      	movs	r3, #100	@ 0x64
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <HAL_UART_RxCpltCallback+0xbc>)
 8001bd6:	4818      	ldr	r0, [pc, #96]	@ (8001c38 <HAL_UART_RxCpltCallback+0xe8>)
 8001bd8:	f007 fefc 	bl	80099d4 <HAL_UART_Transmit>
            break;
 8001bdc:	e00c      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0xa8>

        default:
            // Unexpected state in UART callback
        	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001bde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001be2:	4816      	ldr	r0, [pc, #88]	@ (8001c3c <HAL_UART_RxCpltCallback+0xec>)
 8001be4:	f004 fb3b 	bl	800625e <HAL_GPIO_TogglePin>
            state = STATE_LISTEN;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_UART_RxCpltCallback+0xb4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
            ptr_state = State_Listen;
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_UART_RxCpltCallback+0xc0>)
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <HAL_UART_RxCpltCallback+0xd8>)
 8001bf2:	601a      	str	r2, [r3, #0]
            break;
 8001bf4:	e000      	b.n	8001bf8 <HAL_UART_RxCpltCallback+0xa8>
        return; // Not from USART3, ignore
 8001bf6:	bf00      	nop
    }
}
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40004800 	.word	0x40004800
 8001c04:	2001192c 	.word	0x2001192c
 8001c08:	0800efb8 	.word	0x0800efb8
 8001c0c:	20000204 	.word	0x20000204
 8001c10:	20011928 	.word	0x20011928
 8001c14:	08001c71 	.word	0x08001c71
 8001c18:	0800efd0 	.word	0x0800efd0
 8001c1c:	08001ca9 	.word	0x08001ca9
 8001c20:	0800efc4 	.word	0x0800efc4
 8001c24:	08001d4d 	.word	0x08001d4d
 8001c28:	08001c41 	.word	0x08001c41
 8001c2c:	20000220 	.word	0x20000220
 8001c30:	20000224 	.word	0x20000224
 8001c34:	08001ce9 	.word	0x08001ce9
 8001c38:	20000500 	.word	0x20000500
 8001c3c:	40020400 	.word	0x40020400

08001c40 <State_Listen>:

void State_Listen(void){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    state = STATE_LISTEN;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <State_Listen+0x20>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <State_Listen+0x24>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    //State listen will blink LED1 and wait for UART communications to determine the next state to go into 
    //it will wait for certain preambles
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for preamble
 8001c50:	2208      	movs	r2, #8
 8001c52:	4905      	ldr	r1, [pc, #20]	@ (8001c68 <State_Listen+0x28>)
 8001c54:	4805      	ldr	r0, [pc, #20]	@ (8001c6c <State_Listen+0x2c>)
 8001c56:	f007 ff48 	bl	8009aea <HAL_UART_Receive_IT>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2001192c 	.word	0x2001192c
 8001c64:	20011928 	.word	0x20011928
 8001c68:	20000204 	.word	0x20000204
 8001c6c:	20000500 	.word	0x20000500

08001c70 <State_Picture>:

void State_Picture(void){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, CMD_TAKEPIC, 8, 100); //ack state entry
 8001c74:	2364      	movs	r3, #100	@ 0x64
 8001c76:	2208      	movs	r2, #8
 8001c78:	4906      	ldr	r1, [pc, #24]	@ (8001c94 <State_Picture+0x24>)
 8001c7a:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <State_Picture+0x28>)
 8001c7c:	f007 feaa 	bl	80099d4 <HAL_UART_Transmit>
    state = STATE_TAKEPIC;
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <State_Picture+0x2c>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
    p3();
 8001c86:	f7ff fb4d 	bl	8001324 <p3>
    ptr_state = State_Listen;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <State_Picture+0x30>)
 8001c8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <State_Picture+0x34>)
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	0800efb8 	.word	0x0800efb8
 8001c98:	20000500 	.word	0x20000500
 8001c9c:	2001192c 	.word	0x2001192c
 8001ca0:	20011928 	.word	0x20011928
 8001ca4:	08001c41 	.word	0x08001c41

08001ca8 <State_Coord_RX>:

void State_Coord_RX(void){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
    state = STATE_COORDS;
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <State_Coord_RX+0x2c>)
 8001cae:	2203      	movs	r2, #3
 8001cb0:	701a      	strb	r2, [r3, #0]
    ptr_state = NULL;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <State_Coord_RX+0x30>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, rx_data_arr, 8);  //arm the interrupt for 2 floats
 8001cb8:	2208      	movs	r2, #8
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <State_Coord_RX+0x34>)
 8001cbc:	4808      	ldr	r0, [pc, #32]	@ (8001ce0 <State_Coord_RX+0x38>)
 8001cbe:	f007 ff14 	bl	8009aea <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart3, CMD_COORDS, 8, 100); //ack ready for coords
 8001cc2:	2364      	movs	r3, #100	@ 0x64
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4907      	ldr	r1, [pc, #28]	@ (8001ce4 <State_Coord_RX+0x3c>)
 8001cc8:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <State_Coord_RX+0x38>)
 8001cca:	f007 fe83 	bl	80099d4 <HAL_UART_Transmit>
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2001192c 	.word	0x2001192c
 8001cd8:	20011928 	.word	0x20011928
 8001cdc:	20000204 	.word	0x20000204
 8001ce0:	20000500 	.word	0x20000500
 8001ce4:	0800efd0 	.word	0x0800efd0

08001ce8 <State_Motors>:

void State_Motors(void){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
    state = STATE_MOTORS;
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <State_Motors+0x4c>)
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	701a      	strb	r2, [r3, #0]
    Position test = {posX, posY, 0.0};
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <State_Motors+0x50>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <State_Motors+0x54>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
    moveProbe_test(&myProbe, test);
 8001d06:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d12:	eeb0 0a66 	vmov.f32	s0, s13
 8001d16:	eef0 0a47 	vmov.f32	s1, s14
 8001d1a:	eeb0 1a67 	vmov.f32	s2, s15
 8001d1e:	4808      	ldr	r0, [pc, #32]	@ (8001d40 <State_Motors+0x58>)
 8001d20:	f000 fa76 	bl	8002210 <moveProbe_test>
    ptr_state = State_Listen;
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <State_Motors+0x5c>)
 8001d26:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <State_Motors+0x60>)
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2001192c 	.word	0x2001192c
 8001d38:	20000220 	.word	0x20000220
 8001d3c:	20000224 	.word	0x20000224
 8001d40:	20011930 	.word	0x20011930
 8001d44:	20011928 	.word	0x20011928
 8001d48:	08001c41 	.word	0x08001c41

08001d4c <State_ADC_FFT>:
    //basically a blocker to motor actuate until it receives a go. If receives anything other than go it indicates a problem and should force you to reset.
    ptr_state = NULL;
}


void State_ADC_FFT(void){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, CMD_ADCFFT, 8, 100);
 8001d52:	2364      	movs	r3, #100	@ 0x64
 8001d54:	2208      	movs	r2, #8
 8001d56:	4928      	ldr	r1, [pc, #160]	@ (8001df8 <State_ADC_FFT+0xac>)
 8001d58:	4828      	ldr	r0, [pc, #160]	@ (8001dfc <State_ADC_FFT+0xb0>)
 8001d5a:	f007 fe3b 	bl	80099d4 <HAL_UART_Transmit>
    state = STATE_ADCFFT;
 8001d5e:	4b28      	ldr	r3, [pc, #160]	@ (8001e00 <State_ADC_FFT+0xb4>)
 8001d60:	2202      	movs	r2, #2
 8001d62:	701a      	strb	r2, [r3, #0]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_LEN); //start DMA and ADC
 8001d64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d68:	4926      	ldr	r1, [pc, #152]	@ (8001e04 <State_ADC_FFT+0xb8>)
 8001d6a:	4827      	ldr	r0, [pc, #156]	@ (8001e08 <State_ADC_FFT+0xbc>)
 8001d6c:	f001 fb94 	bl	8003498 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);  // Start the timer that triggers ADC
 8001d70:	4826      	ldr	r0, [pc, #152]	@ (8001e0c <State_ADC_FFT+0xc0>)
 8001d72:	f006 fd8f 	bl	8008894 <HAL_TIM_Base_Start>
	//data is ready for FFT
    while(1){
        if(ADC_full == 1){
 8001d76:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <State_ADC_FFT+0xc4>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d12e      	bne.n	8001ddc <State_ADC_FFT+0x90>
            ADC_full = 0;
 8001d7e:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <State_ADC_FFT+0xc4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
            HAL_ADC_Stop_DMA(&hadc1);
 8001d84:	4820      	ldr	r0, [pc, #128]	@ (8001e08 <State_ADC_FFT+0xbc>)
 8001d86:	f001 fc97 	bl	80036b8 <HAL_ADC_Stop_DMA>
            HAL_TIM_Base_Stop(&htim2); // stop the adc and timer
 8001d8a:	4820      	ldr	r0, [pc, #128]	@ (8001e0c <State_ADC_FFT+0xc0>)
 8001d8c:	f006 fdea 	bl	8008964 <HAL_TIM_Base_Stop>

            for(int i = 0; i < ADC_BUF_LEN; i++){
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	e010      	b.n	8001db8 <State_ADC_FFT+0x6c>
			    input_FFT[i] = (float)(adc_buffer[i]); //note the usage of float here - should consider optimization reasons and configurations
 8001d96:	4a1b      	ldr	r2, [pc, #108]	@ (8001e04 <State_ADC_FFT+0xb8>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <State_ADC_FFT+0xc8>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	edc3 7a00 	vstr	s15, [r3]
            for(int i = 0; i < ADC_BUF_LEN; i++){
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3301      	adds	r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dbe:	dbea      	blt.n	8001d96 <State_ADC_FFT+0x4a>
		    }

            //FFT
            arm_rfft_fast_f32(&fftHandler, input_FFT, output_FFT, 0);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4a15      	ldr	r2, [pc, #84]	@ (8001e18 <State_ADC_FFT+0xcc>)
 8001dc4:	4913      	ldr	r1, [pc, #76]	@ (8001e14 <State_ADC_FFT+0xc8>)
 8001dc6:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <State_ADC_FFT+0xd0>)
 8001dc8:	f008 fe8e 	bl	800aae8 <arm_rfft_fast_f32>
            computeCoeffs(output_FFT);
 8001dcc:	4812      	ldr	r0, [pc, #72]	@ (8001e18 <State_ADC_FFT+0xcc>)
 8001dce:	f7ff f933 	bl	8001038 <computeCoeffs>

            sendADC_UART();
 8001dd2:	f7ff f989 	bl	80010e8 <sendADC_UART>
            sendFFT_UART();
 8001dd6:	f7ff f9c3 	bl	8001160 <sendFFT_UART>
            break;
 8001dda:	e006      	b.n	8001dea <State_ADC_FFT+0x9e>
        }
        flashLED(LD2_GPIO_Port, LD2_Pin, 100, 1);
 8001ddc:	2301      	movs	r3, #1
 8001dde:	2264      	movs	r2, #100	@ 0x64
 8001de0:	2180      	movs	r1, #128	@ 0x80
 8001de2:	480f      	ldr	r0, [pc, #60]	@ (8001e20 <State_ADC_FFT+0xd4>)
 8001de4:	f7ff fad0 	bl	8001388 <flashLED>
        if(ADC_full == 1){
 8001de8:	e7c5      	b.n	8001d76 <State_ADC_FFT+0x2a>
    }
    ptr_state = State_Listen;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <State_ADC_FFT+0xd8>)
 8001dec:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <State_ADC_FFT+0xdc>)
 8001dee:	601a      	str	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	0800efc4 	.word	0x0800efc4
 8001dfc:	20000500 	.word	0x20000500
 8001e00:	2001192c 	.word	0x2001192c
 8001e04:	2000c90c 	.word	0x2000c90c
 8001e08:	20000228 	.word	0x20000228
 8001e0c:	20000470 	.word	0x20000470
 8001e10:	2000d90c 	.word	0x2000d90c
 8001e14:	2000d910 	.word	0x2000d910
 8001e18:	2000f910 	.word	0x2000f910
 8001e1c:	20011910 	.word	0x20011910
 8001e20:	40020400 	.word	0x40020400
 8001e24:	20011928 	.word	0x20011928
 8001e28:	08001c41 	.word	0x08001c41

08001e2c <match_command>:
 * @brief Compare fixed-length 8-byte command strings.
 * @param input     Pointer to received buffer (must be at least 8 bytes)
 * @param command   Pointer to expected command (8-byte string)
 * @return 1 if match, 0 if not
 */
uint8_t match_command(const uint8_t* input, const uint8_t* command) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    return (memcmp(input, command, 8) == 0);
 8001e36:	2208      	movs	r2, #8
 8001e38:	6839      	ldr	r1, [r7, #0]
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f00a fb21 	bl	800c482 <memcmp>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <main>:

const Position HOME = {6.0, 6.0, 12.2};
	

int main(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	HAL_Init();
 8001e58:	f001 fa44 	bl	80032e4 <HAL_Init>
  	SystemClock_Config();
 8001e5c:	f7ff fab6 	bl	80013cc <SystemClock_Config>
	MX_GPIO_Init();
 8001e60:	f7ff fd68 	bl	8001934 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e64:	f7ff fd3e 	bl	80018e4 <MX_DMA_Init>
	MX_DCMI_Init();
 8001e68:	f7ff fb6e 	bl	8001548 <MX_DCMI_Init>
	MX_USART3_UART_Init();
 8001e6c:	f7ff fd00 	bl	8001870 <MX_USART3_UART_Init>
	MX_I2C2_Init();
 8001e70:	f7ff fbcc 	bl	800160c <MX_I2C2_Init>
	MX_TIM1_Init();
 8001e74:	f7ff fbf8 	bl	8001668 <MX_TIM1_Init>
	MX_TIM6_Init();
 8001e78:	f7ff fcc4 	bl	8001804 <MX_TIM6_Init>
	MX_ADC1_Init();
 8001e7c:	f7ff fb12 	bl	80014a4 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001e80:	f7ff fb96 	bl	80015b0 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001e84:	f7ff fc72 	bl	800176c <MX_TIM2_Init>
	MX_USB_OTG_FS_USB_Init();
 8001e88:	f7ff fd24 	bl	80018d4 <MX_USB_OTG_FS_USB_Init>
	
	//init FFT
	arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
 8001e8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e90:	4829      	ldr	r0, [pc, #164]	@ (8001f38 <main+0xe4>)
 8001e92:	f008 fda5 	bl	800a9e0 <arm_rfft_fast_init_f32>


	//init PCA
	PCA9685_Init(50); // 50Hz for servo
 8001e96:	2032      	movs	r0, #50	@ 0x32
 8001e98:	f000 fb82 	bl	80025a0 <PCA9685_Init>
	//init probe
	myProbe.lin = &lin;
 8001e9c:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <main+0xe8>)
 8001e9e:	4a28      	ldr	r2, [pc, #160]	@ (8001f40 <main+0xec>)
 8001ea0:	60da      	str	r2, [r3, #12]
	myProbe.rot = &rot;
 8001ea2:	4b26      	ldr	r3, [pc, #152]	@ (8001f3c <main+0xe8>)
 8001ea4:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <main+0xf0>)
 8001ea6:	611a      	str	r2, [r3, #16]
	myProbe.nema = &nema;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <main+0xe8>)
 8001eaa:	4a27      	ldr	r2, [pc, #156]	@ (8001f48 <main+0xf4>)
 8001eac:	615a      	str	r2, [r3, #20]
	
    myProbe.probePos = HOME; 
 8001eae:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <main+0xe8>)
 8001eb0:	4a26      	ldr	r2, [pc, #152]	@ (8001f4c <main+0xf8>)
 8001eb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    myProbe.lin->Channel = 0;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <main+0xe8>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	721a      	strb	r2, [r3, #8]
    myProbe.lin->currAngle = 0;
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <main+0xe8>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
    myProbe.lin->homeAngle = 0;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <main+0xe8>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]

    myProbe.rot->Channel = 15;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <main+0xe8>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	220f      	movs	r2, #15
 8001eda:	721a      	strb	r2, [r3, #8]
    myProbe.rot->currAngle = 0;
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <main+0xe8>)
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
    myProbe.rot->homeAngle = 0;
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <main+0xe8>)
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]

    myProbe.nema->currAngle = 0;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <main+0xe8>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
	
	ptr_state = State_Listen;
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <main+0xfc>)
 8001efc:	4a15      	ldr	r2, [pc, #84]	@ (8001f54 <main+0x100>)
 8001efe:	601a      	str	r2, [r3, #0]

	__HAL_DMA_ENABLE_IT(&hdma_dcmi, DMA_IT_TC);
 8001f00:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <main+0x104>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <main+0x104>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0210 	orr.w	r2, r2, #16
 8001f0e:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001f10:	2039      	movs	r0, #57	@ 0x39
 8001f12:	f001 ffe6 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f16:	2100      	movs	r1, #0
 8001f18:	4810      	ldr	r0, [pc, #64]	@ (8001f5c <main+0x108>)
 8001f1a:	f006 fd99 	bl	8008a50 <HAL_TIM_PWM_Start>
	ov7670_init();
 8001f1e:	f000 f9cb 	bl	80022b8 <ov7670_init>
	ov7_config();
 8001f22:	f000 f9fb 	bl	800231c <ov7_config>

	while(1){

		if (ptr_state != NULL) {
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <main+0xfc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0fb      	beq.n	8001f26 <main+0xd2>
            ptr_state();       // Run the state logic
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <main+0xfc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4798      	blx	r3
		if (ptr_state != NULL) {
 8001f34:	e7f7      	b.n	8001f26 <main+0xd2>
 8001f36:	bf00      	nop
 8001f38:	20011910 	.word	0x20011910
 8001f3c:	20011930 	.word	0x20011930
 8001f40:	20011948 	.word	0x20011948
 8001f44:	20011954 	.word	0x20011954
 8001f48:	20011960 	.word	0x20011960
 8001f4c:	0800efdc 	.word	0x0800efdc
 8001f50:	20011928 	.word	0x20011928
 8001f54:	08001c41 	.word	0x08001c41
 8001f58:	20000320 	.word	0x20000320
 8001f5c:	20000428 	.word	0x20000428

08001f60 <home_Align>:
#include <math.h>

extern const Position HOME;

// Calculates the motor position based on given (x, y) coords
void home_Align(Probe* myProbe){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
    // 1. retract the motor
    setServoAngle(myProbe->lin, myProbe->lin->homeAngle);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f74:	eeb0 0a67 	vmov.f32	s0, s15
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f000 fb55 	bl	8002628 <setServoAngle>
    myProbe->lin->currAngle = myProbe->rot->homeAngle; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	6852      	ldr	r2, [r2, #4]
 8001f88:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); 
 8001f8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f8e:	f001 fa1b 	bl	80033c8 <HAL_Delay>

    // 2. rotate to home angle
    setServoAngle(myProbe->rot, myProbe->rot->homeAngle);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 fb40 	bl	8002628 <setServoAngle>
    myProbe->rot->currAngle = myProbe->rot->homeAngle; 
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	6852      	ldr	r2, [r2, #4]
 8001fb2:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); 
 8001fb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fb8:	f001 fa06 	bl	80033c8 <HAL_Delay>

    // 3. retract to home direction in stepper
    float move_cm =  -1 * myProbe->nema->currAngle; // move left
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	eef1 7a67 	vneg.f32	s15, s15
 8001fc8:	edc7 7a03 	vstr	s15, [r7, #12]
    if(move_cm == 0.0){
        //flashLED(LD1_GPIO_Port, LD1_Pin, 500, 10);
    }
    stp_moveDistance((myProbe->nema), move_cm);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fccd 	bl	8002974 <stp_moveDistance>
    myProbe->nema->currAngle = 0.0;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); 
 8001fe4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fe8:	f001 f9ee 	bl	80033c8 <HAL_Delay>
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <x_align>:

void x_align(Probe* myProbe, Position desiredLoc){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	eef0 6a40 	vmov.f32	s13, s0
 8002000:	eeb0 7a60 	vmov.f32	s14, s1
 8002004:	eef0 7a41 	vmov.f32	s15, s2
 8002008:	edc7 6a00 	vstr	s13, [r7]
 800200c:	ed87 7a01 	vstr	s14, [r7, #4]
 8002010:	edc7 7a02 	vstr	s15, [r7, #8]

    float move_cm = fabsf(HOME.x - desiredLoc.x); //move right
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <x_align+0x6c>)
 8002016:	ed93 7a00 	vldr	s14, [r3]
 800201a:	edd7 7a00 	vldr	s15, [r7]
 800201e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002022:	eef0 7ae7 	vabs.f32	s15, s15
 8002026:	edc7 7a05 	vstr	s15, [r7, #20]
    if(move_cm > X_MAX){
 800202a:	edd7 7a05 	vldr	s15, [r7, #20]
 800202e:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8002032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	dd01      	ble.n	8002040 <x_align+0x4c>
        move_cm = X_MAX;
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <x_align+0x70>)
 800203e:	617b      	str	r3, [r7, #20]
    }
    myProbe->nema->currAngle = move_cm; 
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	601a      	str	r2, [r3, #0]
    stp_moveDistance(((myProbe->nema)), move_cm);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fc8f 	bl	8002974 <stp_moveDistance>
    
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	0800efdc 	.word	0x0800efdc
 8002064:	41500000 	.word	0x41500000

08002068 <theta_align>:

void theta_align(Probe* myProbe, Position desiredLoc){
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	eef0 6a40 	vmov.f32	s13, s0
 8002074:	eeb0 7a60 	vmov.f32	s14, s1
 8002078:	eef0 7a41 	vmov.f32	s15, s2
 800207c:	edc7 6a00 	vstr	s13, [r7]
 8002080:	ed87 7a01 	vstr	s14, [r7, #4]
 8002084:	edc7 7a02 	vstr	s15, [r7, #8]
    float theta_rad = atan(fabsf(HOME.y -desiredLoc.y) / H);
 8002088:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <theta_align+0xc8>)
 800208a:	ed93 7a01 	vldr	s14, [r3, #4]
 800208e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002096:	eef0 7ae7 	vabs.f32	s15, s15
 800209a:	ee17 0a90 	vmov	r0, s15
 800209e:	f7fe fad3 	bl	8000648 <__aeabi_f2d>
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <theta_align+0xcc>)
 80020a8:	f7fe fc50 	bl	800094c <__aeabi_ddiv>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	ec43 2b17 	vmov	d7, r2, r3
 80020b4:	eeb0 0a47 	vmov.f32	s0, s14
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	f00c faf0 	bl	800e6a0 <atan>
 80020c0:	ec53 2b10 	vmov	r2, r3, d0
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fdee 	bl	8000ca8 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	613b      	str	r3, [r7, #16]
    float theta_deg = theta_rad * DEGREE_CONVERSION;
 80020d0:	6938      	ldr	r0, [r7, #16]
 80020d2:	f7fe fab9 	bl	8000648 <__aeabi_f2d>
 80020d6:	a314      	add	r3, pc, #80	@ (adr r3, 8002128 <theta_align+0xc0>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe fb0c 	bl	80006f8 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fdde 	bl	8000ca8 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]
    if(theta_deg > THETA_MAX){
 80020f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002138 <theta_align+0xd0>
 80020f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	dd01      	ble.n	8002106 <theta_align+0x9e>
        theta_deg = THETA_MAX;
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <theta_align+0xd4>)
 8002104:	617b      	str	r3, [r7, #20]
    }
    setServoAngle(myProbe->rot, theta_deg);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	ed97 0a05 	vldr	s0, [r7, #20]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fa8a 	bl	8002628 <setServoAngle>
    myProbe->rot->currAngle = theta_deg;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	f3af 8000 	nop.w
 8002128:	1a63c1f8 	.word	0x1a63c1f8
 800212c:	404ca5dc 	.word	0x404ca5dc
 8002130:	0800efdc 	.word	0x0800efdc
 8002134:	40290000 	.word	0x40290000
 8002138:	42080000 	.word	0x42080000
 800213c:	42080000 	.word	0x42080000

08002140 <R_align>:

void R_align(Probe* myProbe, Position desiredLoc){
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	eef0 6a40 	vmov.f32	s13, s0
 800214c:	eeb0 7a60 	vmov.f32	s14, s1
 8002150:	eef0 7a41 	vmov.f32	s15, s2
 8002154:	edc7 6a00 	vstr	s13, [r7]
 8002158:	ed87 7a01 	vstr	s14, [r7, #4]
 800215c:	edc7 7a02 	vstr	s15, [r7, #8]
    float hypotenuse = hypot(H, fabsf(HOME.y - desiredLoc.y));
 8002160:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <R_align+0xc8>)
 8002162:	ed93 7a01 	vldr	s14, [r3, #4]
 8002166:	edd7 7a01 	vldr	s15, [r7, #4]
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	eef0 7ae7 	vabs.f32	s15, s15
 8002172:	ee17 0a90 	vmov	r0, s15
 8002176:	f7fe fa67 	bl	8000648 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	ec43 2b11 	vmov	d1, r2, r3
 8002182:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 80021f0 <R_align+0xb0>
 8002186:	f00c fa57 	bl	800e638 <hypot>
 800218a:	ec53 2b10 	vmov	r2, r3, d0
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f7fe fd89 	bl	8000ca8 <__aeabi_d2f>
 8002196:	4603      	mov	r3, r0
 8002198:	613b      	str	r3, [r7, #16]
    float move_cm = hypotenuse - PROBE_LEN;
 800219a:	6938      	ldr	r0, [r7, #16]
 800219c:	f7fe fa54 	bl	8000648 <__aeabi_f2d>
 80021a0:	a315      	add	r3, pc, #84	@ (adr r3, 80021f8 <R_align+0xb8>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe f8ef 	bl	8000388 <__aeabi_dsub>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fd79 	bl	8000ca8 <__aeabi_d2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	617b      	str	r3, [r7, #20]
    if(move_cm > DR_MAX){
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7fe fa44 	bl	8000648 <__aeabi_f2d>
 80021c0:	a30f      	add	r3, pc, #60	@ (adr r3, 8002200 <R_align+0xc0>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe fd27 	bl	8000c18 <__aeabi_dcmpgt>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <R_align+0x94>
        move_cm = DR_MAX; 
 80021d0:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <R_align+0xcc>)
 80021d2:	617b      	str	r3, [r7, #20]
    }
    sv_moveDistance(myProbe->lin, move_cm); // automatically updates cur_angle
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fa8b 	bl	80026f8 <sv_moveDistance>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	f3af 8000 	nop.w
 80021f0:	00000000 	.word	0x00000000
 80021f4:	40290000 	.word	0x40290000
 80021f8:	9999999a 	.word	0x9999999a
 80021fc:	40289999 	.word	0x40289999
 8002200:	9999999a 	.word	0x9999999a
 8002204:	40059999 	.word	0x40059999
 8002208:	0800efdc 	.word	0x0800efdc
 800220c:	402ccccd 	.word	0x402ccccd

08002210 <moveProbe_test>:

// assume probe at home
void moveProbe_test(Probe* myProbe, Position desiredLoc){
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	eef0 6a40 	vmov.f32	s13, s0
 800221c:	eeb0 7a60 	vmov.f32	s14, s1
 8002220:	eef0 7a41 	vmov.f32	s15, s2
 8002224:	edc7 6a00 	vstr	s13, [r7]
 8002228:	ed87 7a01 	vstr	s14, [r7, #4]
 800222c:	edc7 7a02 	vstr	s15, [r7, #8]

    // 1. send home
    home_Align(myProbe);
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fe95 	bl	8001f60 <home_Align>
    HAL_Delay(500); 
 8002236:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800223a:	f001 f8c5 	bl	80033c8 <HAL_Delay>

    // 2. align stepper, theta, R in order
    x_align(myProbe, desiredLoc);
 800223e:	edd7 6a00 	vldr	s13, [r7]
 8002242:	ed97 7a01 	vldr	s14, [r7, #4]
 8002246:	edd7 7a02 	vldr	s15, [r7, #8]
 800224a:	eeb0 0a66 	vmov.f32	s0, s13
 800224e:	eef0 0a47 	vmov.f32	s1, s14
 8002252:	eeb0 1a67 	vmov.f32	s2, s15
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fecc 	bl	8001ff4 <x_align>
    HAL_Delay(500); 
 800225c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002260:	f001 f8b2 	bl	80033c8 <HAL_Delay>
    theta_align(myProbe, desiredLoc);
 8002264:	edd7 6a00 	vldr	s13, [r7]
 8002268:	ed97 7a01 	vldr	s14, [r7, #4]
 800226c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002270:	eeb0 0a66 	vmov.f32	s0, s13
 8002274:	eef0 0a47 	vmov.f32	s1, s14
 8002278:	eeb0 1a67 	vmov.f32	s2, s15
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff fef3 	bl	8002068 <theta_align>
    HAL_Delay(500); 
 8002282:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002286:	f001 f89f 	bl	80033c8 <HAL_Delay>
    R_align(myProbe, desiredLoc);
 800228a:	edd7 6a00 	vldr	s13, [r7]
 800228e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002292:	edd7 7a02 	vldr	s15, [r7, #8]
 8002296:	eeb0 0a66 	vmov.f32	s0, s13
 800229a:	eef0 0a47 	vmov.f32	s1, s14
 800229e:	eeb0 1a67 	vmov.f32	s2, s15
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7ff ff4c 	bl	8002140 <R_align>
    HAL_Delay(500); 
 80022a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022ac:	f001 f88c 	bl	80033c8 <HAL_Delay>
    //HAL_Delay(1000); 

    // 4. Align back home
    //home_Align(myProbe);

}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <ov7670_init>:
  { 0xb3, 0x82 }, //
  { 0x4b, 0x01 },
};


uint8_t ov7670_init(void){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b09a      	sub	sp, #104	@ 0x68
 80022bc:	af00      	add	r7, sp, #0
  uint8_t val;
  char msg[100];

  print_msg("init_test\r\n");
 80022be:	4814      	ldr	r0, [pc, #80]	@ (8002310 <ov7670_init+0x58>)
 80022c0:	f7ff f84e 	bl	8001360 <print_msg>
  val = ov7670_read(0x0A);
 80022c4:	200a      	movs	r0, #10
 80022c6:	f000 f875 	bl	80023b4 <ov7670_read>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  if (val != 0x76) {
 80022d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80022d4:	2b76      	cmp	r3, #118	@ 0x76
 80022d6:	d00c      	beq.n	80022f2 <ov7670_init+0x3a>
    sprintf(msg, "Wrong product id (0x%x)\r\n", val);
 80022d8:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80022dc:	463b      	mov	r3, r7
 80022de:	490d      	ldr	r1, [pc, #52]	@ (8002314 <ov7670_init+0x5c>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f00a f86b 	bl	800c3bc <siprintf>
    print_msg(msg);
 80022e6:	463b      	mov	r3, r7
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff f839 	bl	8001360 <print_msg>
    return 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e009      	b.n	8002306 <ov7670_init+0x4e>
  }else{
		sprintf(msg, "success\n");
 80022f2:	463b      	mov	r3, r7
 80022f4:	4908      	ldr	r1, [pc, #32]	@ (8002318 <ov7670_init+0x60>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00a f860 	bl	800c3bc <siprintf>
    print_msg(msg);
 80022fc:	463b      	mov	r3, r7
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f82e 	bl	8001360 <print_msg>

  // Your code here

  //

  return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3768      	adds	r7, #104	@ 0x68
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	0800ef08 	.word	0x0800ef08
 8002314:	0800ef14 	.word	0x0800ef14
 8002318:	0800ef30 	.word	0x0800ef30

0800231c <ov7_config>:
    }

    print_msg("OV7670 Register Read Complete.\n");
}

void ov7_config(){
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af02      	add	r7, sp, #8
	char msg[20];
	uint8_t data[2];
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	e037      	b.n	8002398 <ov7_config+0x7c>
		data[0] = OV7670_reg[i][0]; 
 8002328:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <ov7_config+0x8c>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002330:	703b      	strb	r3, [r7, #0]
		data[1] = OV7670_reg[i][1];
 8002332:	4a1d      	ldr	r2, [pc, #116]	@ (80023a8 <ov7_config+0x8c>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	707b      	strb	r3, [r7, #1]
		HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); //send address frame
 800233e:	463a      	mov	r2, r7
 8002340:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2302      	movs	r3, #2
 8002348:	2142      	movs	r1, #66	@ 0x42
 800234a:	4818      	ldr	r0, [pc, #96]	@ (80023ac <ov7_config+0x90>)
 800234c:	f004 f90a 	bl	8006564 <HAL_I2C_Master_Transmit>
 8002350:	4603      	mov	r3, r0
 8002352:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8002354:	e017      	b.n	8002386 <ov7_config+0x6a>
			 sprintf(msg, "Error hi\n");
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4915      	ldr	r1, [pc, #84]	@ (80023b0 <ov7_config+0x94>)
 800235a:	4618      	mov	r0, r3
 800235c:	f00a f82e 	bl	800c3bc <siprintf>
       print_msg(msg);
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fffc 	bl	8001360 <print_msg>
       HAL_Delay(1000);
 8002368:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800236c:	f001 f82c 	bl	80033c8 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, data, 2, 10000); 
 8002370:	463a      	mov	r2, r7
 8002372:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2302      	movs	r3, #2
 800237a:	2142      	movs	r1, #66	@ 0x42
 800237c:	480b      	ldr	r0, [pc, #44]	@ (80023ac <ov7_config+0x90>)
 800237e:	f004 f8f1 	bl	8006564 <HAL_I2C_Master_Transmit>
 8002382:	4603      	mov	r3, r0
 8002384:	76fb      	strb	r3, [r7, #27]
		while(status != HAL_OK) {
 8002386:	7efb      	ldrb	r3, [r7, #27]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e4      	bne.n	8002356 <ov7_config+0x3a>
    }
		HAL_Delay(10);
 800238c:	200a      	movs	r0, #10
 800238e:	f001 f81b 	bl	80033c8 <HAL_Delay>
	for(int i = 0; i < OV7670_REG_NUM; i++){ //for all rows of array, send an address and data frame corresponding to [i][0] and [i][1]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b79      	cmp	r3, #121	@ 0x79
 800239c:	ddc4      	ble.n	8002328 <ov7_config+0xc>
	}
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	0800efe8 	.word	0x0800efe8
 80023ac:	200003d4 	.word	0x200003d4
 80023b0:	0800ef90 	.word	0x0800ef90

080023b4 <ov7670_read>:

uint8_t ov7670_read(uint8_t reg){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b09e      	sub	sp, #120	@ 0x78
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
		char msg[100];
    // Transmit register
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 80023be:	1dfa      	adds	r2, r7, #7
 80023c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	2142      	movs	r1, #66	@ 0x42
 80023ca:	481b      	ldr	r0, [pc, #108]	@ (8002438 <ov7670_read+0x84>)
 80023cc:	f004 f8ca 	bl	8006564 <HAL_I2C_Master_Transmit>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 80023d6:	e01a      	b.n	800240e <ov7670_read+0x5a>
			 sprintf(msg, "Error\n");
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	4917      	ldr	r1, [pc, #92]	@ (800243c <ov7670_read+0x88>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f009 ffec 	bl	800c3bc <siprintf>
       print_msg(msg);
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ffb9 	bl	8001360 <print_msg>
       HAL_Delay(1000);
 80023ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023f2:	f000 ffe9 	bl	80033c8 <HAL_Delay>
       status = HAL_I2C_Master_Transmit(&hi2c2, ADDR_OV7670, &reg, 1, 10000); 
 80023f6:	1dfa      	adds	r2, r7, #7
 80023f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2301      	movs	r3, #1
 8002400:	2142      	movs	r1, #66	@ 0x42
 8002402:	480d      	ldr	r0, [pc, #52]	@ (8002438 <ov7670_read+0x84>)
 8002404:	f004 f8ae 	bl	8006564 <HAL_I2C_Master_Transmit>
 8002408:	4603      	mov	r3, r0
 800240a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    while(status != HAL_OK) {
 800240e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e0      	bne.n	80023d8 <ov7670_read+0x24>
    }
    // Read data
    HAL_I2C_Master_Receive(&hi2c2, (reADDR_OV7670), &data, 1, HAL_MAX_DELAY);
 8002416:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2301      	movs	r3, #1
 8002422:	2143      	movs	r1, #67	@ 0x43
 8002424:	4804      	ldr	r0, [pc, #16]	@ (8002438 <ov7670_read+0x84>)
 8002426:	f004 f99b 	bl	8006760 <HAL_I2C_Master_Receive>
    return data;
 800242a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 800242e:	4618      	mov	r0, r3
 8002430:	3770      	adds	r7, #112	@ 0x70
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200003d4 	.word	0x200003d4
 800243c:	0800ef9c 	.word	0x0800ef9c

08002440 <ov7670_snapshot>:




void ov7670_snapshot(uint16_t *buff){
 8002440:	b580      	push	{r7, lr}
 8002442:	b09c      	sub	sp, #112	@ 0x70
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  // Your code here
	char msg[100];
	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA( &hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)snapshot_buff, BUFFER_SIZE/2); //SUS
 8002448:	4a0e      	ldr	r2, [pc, #56]	@ (8002484 <ov7670_snapshot+0x44>)
 800244a:	f243 03f0 	movw	r3, #12528	@ 0x30f0
 800244e:	2102      	movs	r1, #2
 8002450:	480d      	ldr	r0, [pc, #52]	@ (8002488 <ov7670_snapshot+0x48>)
 8002452:	f001 fd61 	bl	8003f18 <HAL_DCMI_Start_DMA>
 8002456:	4603      	mov	r3, r0
 8002458:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(status != HAL_OK) {
 800245c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <ov7670_snapshot+0x3a>
			 sprintf(msg, "Error DMA failed\n");
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	4908      	ldr	r1, [pc, #32]	@ (800248c <ov7670_snapshot+0x4c>)
 800246a:	4618      	mov	r0, r3
 800246c:	f009 ffa6 	bl	800c3bc <siprintf>
       print_msg(msg);
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe ff73 	bl	8001360 <print_msg>
    }
}//goes back to main for waiting for interrupt
 800247a:	bf00      	nop
 800247c:	3770      	adds	r7, #112	@ 0x70
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000548 	.word	0x20000548
 8002488:	200002d0 	.word	0x200002d0
 800248c:	0800efa4 	.word	0x0800efa4

08002490 <PCA9685_SetBit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af04      	add	r7, sp, #16
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	460b      	mov	r3, r1
 800249c:	71bb      	strb	r3, [r7, #6]
 800249e:	4613      	mov	r3, r2
 80024a0:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	230a      	movs	r3, #10
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	2301      	movs	r3, #1
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	f107 030f 	add.w	r3, r7, #15
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2301      	movs	r3, #1
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	4819      	ldr	r0, [pc, #100]	@ (8002520 <PCA9685_SetBit+0x90>)
 80024ba:	f004 fc7d 	bl	8006db8 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 80024be:	797b      	ldrb	r3, [r7, #5]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10d      	bne.n	80024e0 <PCA9685_SetBit+0x50>
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	2201      	movs	r2, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	b25a      	sxtb	r2, r3
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	4013      	ands	r3, r2
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e00a      	b.n	80024f6 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	2201      	movs	r2, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	b25a      	sxtb	r2, r3
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	230a      	movs	r3, #10
 80024fc:	9302      	str	r3, [sp, #8]
 80024fe:	2301      	movs	r3, #1
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	f107 030f 	add.w	r3, r7, #15
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2301      	movs	r3, #1
 800250a:	2180      	movs	r1, #128	@ 0x80
 800250c:	4804      	ldr	r0, [pc, #16]	@ (8002520 <PCA9685_SetBit+0x90>)
 800250e:	f004 fb59 	bl	8006bc4 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8002512:	2001      	movs	r0, #1
 8002514:	f000 ff58 	bl	80033c8 <HAL_Delay>
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000380 	.word	0x20000380

08002524 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af04      	add	r7, sp, #16
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03; // why?
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8002534:	4293      	cmp	r3, r2
 8002536:	d902      	bls.n	800253e <PCA9685_SetPWMFrequency+0x1a>
 8002538:	2303      	movs	r3, #3
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e00c      	b.n	8002558 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	2b18      	cmp	r3, #24
 8002542:	d802      	bhi.n	800254a <PCA9685_SetPWMFrequency+0x26>
 8002544:	23ff      	movs	r3, #255	@ 0xff
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e006      	b.n	8002558 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	031b      	lsls	r3, r3, #12
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <PCA9685_SetPWMFrequency+0x74>)
 8002550:	fb92 f3f3 	sdiv	r3, r2, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8002558:	2201      	movs	r2, #1
 800255a:	2104      	movs	r1, #4
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff ff97 	bl	8002490 <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8002562:	230a      	movs	r3, #10
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	2301      	movs	r3, #1
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	f107 030f 	add.w	r3, r7, #15
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2301      	movs	r3, #1
 8002572:	22fe      	movs	r2, #254	@ 0xfe
 8002574:	2180      	movs	r1, #128	@ 0x80
 8002576:	4809      	ldr	r0, [pc, #36]	@ (800259c <PCA9685_SetPWMFrequency+0x78>)
 8002578:	f004 fb24 	bl	8006bc4 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2104      	movs	r1, #4
 8002580:	2000      	movs	r0, #0
 8002582:	f7ff ff85 	bl	8002490 <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8002586:	2201      	movs	r2, #1
 8002588:	2107      	movs	r1, #7
 800258a:	2000      	movs	r0, #0
 800258c:	f7ff ff80 	bl	8002490 <PCA9685_SetBit>
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	017d7840 	.word	0x017d7840
 800259c:	20000380 	.word	0x20000380

080025a0 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffb9 	bl	8002524 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 80025b2:	2201      	movs	r2, #1
 80025b4:	2105      	movs	r1, #5
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7ff ff6a 	bl	8002490 <PCA9685_SetBit>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
 80025ce:	460b      	mov	r3, r1
 80025d0:	80bb      	strh	r3, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3306      	adds	r3, #6
 80025de:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 80025e0:	88bb      	ldrh	r3, [r7, #4]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 80025e6:	88bb      	ldrh	r3, [r7, #4]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	b29a      	uxth	r2, r3
 8002604:	230a      	movs	r3, #10
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	2304      	movs	r3, #4
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	f107 0308 	add.w	r3, r7, #8
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	4803      	ldr	r0, [pc, #12]	@ (8002624 <PCA9685_SetPWM+0x60>)
 8002618:	f004 fad4 	bl	8006bc4 <HAL_I2C_Mem_Write>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000380 	.word	0x20000380

08002628 <setServoAngle>:
  Value = (205.0 + (Angle / 180.0) * (410.0 - 205.0));
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
}

void setServoAngle(Servo* sv, float Angle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	ed87 0a00 	vstr	s0, [r7]
  // this one is for the position
  float Value;
    if (Angle < 0) Angle = 0;
 8002634:	edd7 7a00 	vldr	s15, [r7]
 8002638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	d502      	bpl.n	8002648 <setServoAngle+0x20>
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	603b      	str	r3, [r7, #0]
    if (Angle > 180) Angle = 180;
 8002648:	edd7 7a00 	vldr	s15, [r7]
 800264c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80026e8 <setServoAngle+0xc0>
 8002650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002658:	dd01      	ble.n	800265e <setServoAngle+0x36>
 800265a:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <setServoAngle+0xc4>)
 800265c:	603b      	str	r3, [r7, #0]

    float Rev_Angle = 180 - Angle; //in order to make positive values forward and negative values backwards ;)
 800265e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80026e8 <setServoAngle+0xc0>
 8002662:	edd7 7a00 	vldr	s15, [r7]
 8002666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266a:	edc7 7a03 	vstr	s15, [r7, #12]

  Value = (Rev_Angle * (511.9 - 102.4) / 180.0) + 102.4;
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7fd ffea 	bl	8000648 <__aeabi_f2d>
 8002674:	a318      	add	r3, pc, #96	@ (adr r3, 80026d8 <setServoAngle+0xb0>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fe f83d 	bl	80006f8 <__aeabi_dmul>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <setServoAngle+0xc8>)
 800268c:	f7fe f95e 	bl	800094c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	a311      	add	r3, pc, #68	@ (adr r3, 80026e0 <setServoAngle+0xb8>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd fe75 	bl	800038c <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fafd 	bl	8000ca8 <__aeabi_d2f>
 80026ae:	4603      	mov	r3, r0
 80026b0:	60bb      	str	r3, [r7, #8]
  PCA9685_SetPWM(sv->Channel, 0, (uint16_t)Value);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7a1b      	ldrb	r3, [r3, #8]
 80026b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026be:	ee17 2a90 	vmov	r2, s15
 80026c2:	b292      	uxth	r2, r2
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff7c 	bl	80025c4 <PCA9685_SetPWM>
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	f3af 8000 	nop.w
 80026d8:	00000000 	.word	0x00000000
 80026dc:	40799800 	.word	0x40799800
 80026e0:	9999999a 	.word	0x9999999a
 80026e4:	40599999 	.word	0x40599999
 80026e8:	43340000 	.word	0x43340000
 80026ec:	43340000 	.word	0x43340000
 80026f0:	40668000 	.word	0x40668000
 80026f4:	00000000 	.word	0x00000000

080026f8 <sv_moveDistance>:
  sv->homeAngle = homeAngle;
  setServoAngle(sv, homeAngle);
}

//pass in the current Angle of the servo, and modify that value by its angle equivalent of the distance 
void sv_moveDistance(Servo* sv, float distance_cm) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	ed87 0a00 	vstr	s0, [r7]

  //theoretically we have around 2.8cm per 180 deg
  //experimentally we have around 2.52cm per 180 deg. 

    float delta_angle = distance_cm / 0.01544; // (0.014)
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f7fd ff9f 	bl	8000648 <__aeabi_f2d>
 800270a:	a323      	add	r3, pc, #140	@ (adr r3, 8002798 <sv_moveDistance+0xa0>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fe f91c 	bl	800094c <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fac4 	bl	8000ca8 <__aeabi_d2f>
 8002720:	4603      	mov	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]


    
    if(delta_angle + sv->currAngle > 0 && delta_angle + sv->currAngle <= 180){
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	edd7 7a03 	vldr	s15, [r7, #12]
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	dd18      	ble.n	800276e <sv_moveDistance+0x76>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	edd7 7a03 	vldr	s15, [r7, #12]
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002790 <sv_moveDistance+0x98>
 800274e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	d80a      	bhi.n	800276e <sv_moveDistance+0x76>
      sv->currAngle += delta_angle;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	ed93 7a00 	vldr	s14, [r3]
 800275e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	edc3 7a00 	vstr	s15, [r3]
 800276c:	e003      	b.n	8002776 <sv_moveDistance+0x7e>
    }else{
      //print_msg("Angle change request exceeded bounds");
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800276e:	2101      	movs	r1, #1
 8002770:	4808      	ldr	r0, [pc, #32]	@ (8002794 <sv_moveDistance+0x9c>)
 8002772:	f003 fd74 	bl	800625e <HAL_GPIO_TogglePin>

    }

    setServoAngle(sv, sv->currAngle);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	eeb0 0a67 	vmov.f32	s0, s15
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff51 	bl	8002628 <setServoAngle>
  
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	43340000 	.word	0x43340000
 8002794:	40020400 	.word	0x40020400
 8002798:	b866e43b 	.word	0xb866e43b
 800279c:	3f8f9f01 	.word	0x3f8f9f01

080027a0 <stp_Step>:

#include "steppermotors.h"
#include "stdlib.h"


void stp_Step(Stepper* motor, int step) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
   switch(step % 4) {
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	425a      	negs	r2, r3
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	f002 0203 	and.w	r2, r2, #3
 80027b6:	bf58      	it	pl
 80027b8:	4253      	negpl	r3, r2
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d86e      	bhi.n	800289c <stp_Step+0xfc>
 80027be:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <stp_Step+0x24>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	080027d5 	.word	0x080027d5
 80027c8:	08002807 	.word	0x08002807
 80027cc:	08002839 	.word	0x08002839
 80027d0:	0800286b 	.word	0x0800286b
       case 0:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 80027d4:	2201      	movs	r2, #1
 80027d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027da:	4832      	ldr	r0, [pc, #200]	@ (80028a4 <stp_Step+0x104>)
 80027dc:	f003 fd26 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 80027e0:	2200      	movs	r2, #0
 80027e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027e6:	482f      	ldr	r0, [pc, #188]	@ (80028a4 <stp_Step+0x104>)
 80027e8:	f003 fd20 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 80027ec:	2201      	movs	r2, #1
 80027ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027f2:	482c      	ldr	r0, [pc, #176]	@ (80028a4 <stp_Step+0x104>)
 80027f4:	f003 fd1a 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 80027f8:	2200      	movs	r2, #0
 80027fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027fe:	4829      	ldr	r0, [pc, #164]	@ (80028a4 <stp_Step+0x104>)
 8002800:	f003 fd14 	bl	800622c <HAL_GPIO_WritePin>
           break;
 8002804:	e04a      	b.n	800289c <stp_Step+0xfc>
       case 1:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002806:	2200      	movs	r2, #0
 8002808:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800280c:	4825      	ldr	r0, [pc, #148]	@ (80028a4 <stp_Step+0x104>)
 800280e:	f003 fd0d 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 8002812:	2201      	movs	r2, #1
 8002814:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002818:	4822      	ldr	r0, [pc, #136]	@ (80028a4 <stp_Step+0x104>)
 800281a:	f003 fd07 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_SET);
 800281e:	2201      	movs	r2, #1
 8002820:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002824:	481f      	ldr	r0, [pc, #124]	@ (80028a4 <stp_Step+0x104>)
 8002826:	f003 fd01 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002830:	481c      	ldr	r0, [pc, #112]	@ (80028a4 <stp_Step+0x104>)
 8002832:	f003 fcfb 	bl	800622c <HAL_GPIO_WritePin>
           break;
 8002836:	e031      	b.n	800289c <stp_Step+0xfc>
       case 2:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 8002838:	2200      	movs	r2, #0
 800283a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800283e:	4819      	ldr	r0, [pc, #100]	@ (80028a4 <stp_Step+0x104>)
 8002840:	f003 fcf4 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_SET);
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800284a:	4816      	ldr	r0, [pc, #88]	@ (80028a4 <stp_Step+0x104>)
 800284c:	f003 fcee 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002850:	2200      	movs	r2, #0
 8002852:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002856:	4813      	ldr	r0, [pc, #76]	@ (80028a4 <stp_Step+0x104>)
 8002858:	f003 fce8 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 800285c:	2201      	movs	r2, #1
 800285e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002862:	4810      	ldr	r0, [pc, #64]	@ (80028a4 <stp_Step+0x104>)
 8002864:	f003 fce2 	bl	800622c <HAL_GPIO_WritePin>
           break;
 8002868:	e018      	b.n	800289c <stp_Step+0xfc>
       case 3:
           HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_SET);
 800286a:	2201      	movs	r2, #1
 800286c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <stp_Step+0x104>)
 8002872:	f003 fcdb 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800287c:	4809      	ldr	r0, [pc, #36]	@ (80028a4 <stp_Step+0x104>)
 800287e:	f003 fcd5 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002888:	4806      	ldr	r0, [pc, #24]	@ (80028a4 <stp_Step+0x104>)
 800288a:	f003 fccf 	bl	800622c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_SET);
 800288e:	2201      	movs	r2, #1
 8002890:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002894:	4803      	ldr	r0, [pc, #12]	@ (80028a4 <stp_Step+0x104>)
 8002896:	f003 fcc9 	bl	800622c <HAL_GPIO_WritePin>
           break;
 800289a:	bf00      	nop
   }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021400 	.word	0x40021400

080028a8 <stp_Stop>:


void stp_Stop(Stepper* motor) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MOTOR_PORT, IN1, GPIO_PIN_RESET);
 80028b0:	2200      	movs	r2, #0
 80028b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028b6:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <stp_Stop+0x40>)
 80028b8:	f003 fcb8 	bl	800622c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN2, GPIO_PIN_RESET);
 80028bc:	2200      	movs	r2, #0
 80028be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028c2:	4809      	ldr	r0, [pc, #36]	@ (80028e8 <stp_Stop+0x40>)
 80028c4:	f003 fcb2 	bl	800622c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN3, GPIO_PIN_RESET);
 80028c8:	2200      	movs	r2, #0
 80028ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028ce:	4806      	ldr	r0, [pc, #24]	@ (80028e8 <stp_Stop+0x40>)
 80028d0:	f003 fcac 	bl	800622c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MOTOR_PORT, IN4, GPIO_PIN_RESET);
 80028d4:	2200      	movs	r2, #0
 80028d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028da:	4803      	ldr	r0, [pc, #12]	@ (80028e8 <stp_Stop+0x40>)
 80028dc:	f003 fca6 	bl	800622c <HAL_GPIO_WritePin>

}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021400 	.word	0x40021400

080028ec <stp_Move>:

void stp_Move(Stepper* motor, int steps, int delay) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
   int direction = (steps > 0) ? 1 : -1; // Determine direction
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	dd01      	ble.n	8002902 <stp_Move+0x16>
 80028fe:	2301      	movs	r3, #1
 8002900:	e001      	b.n	8002906 <stp_Move+0x1a>
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	61bb      	str	r3, [r7, #24]
   int stepCount = abs(steps);  // Get absolute step count
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	bfb8      	it	lt
 800290e:	425b      	neglt	r3, r3
 8002910:	617b      	str	r3, [r7, #20]

   for (int i = 0; i < stepCount; i++) {
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e021      	b.n	800295c <stp_Move+0x70>
       int stepIndex = (direction > 0) ? (i % 4) : (3 - (i % 4));
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	dd08      	ble.n	8002930 <stp_Move+0x44>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	425a      	negs	r2, r3
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	bf58      	it	pl
 800292c:	4253      	negpl	r3, r2
 800292e:	e009      	b.n	8002944 <stp_Move+0x58>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	425a      	negs	r2, r3
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	f002 0203 	and.w	r2, r2, #3
 800293c:	bf58      	it	pl
 800293e:	4253      	negpl	r3, r2
 8002940:	f1c3 0303 	rsb	r3, r3, #3
 8002944:	613b      	str	r3, [r7, #16]
       stp_Step(motor, stepIndex);
 8002946:	6939      	ldr	r1, [r7, #16]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff ff29 	bl	80027a0 <stp_Step>
       HAL_Delay(delay); // Speed control
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fd39 	bl	80033c8 <HAL_Delay>
   for (int i = 0; i < stepCount; i++) {
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	dbd9      	blt.n	8002918 <stp_Move+0x2c>
   }
   stp_Stop(motor);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ff9f 	bl	80028a8 <stp_Stop>
}
 800296a:	bf00      	nop
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <stp_moveDistance>:

void stp_moveDistance(Stepper* motor, float distance_cm){
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	ed87 0a00 	vstr	s0, [r7]
	int sign = 1;
 8002980:	2301      	movs	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
    if(distance_cm < 0.0){
 8002984:	edd7 7a00 	vldr	s15, [r7]
 8002988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002990:	d502      	bpl.n	8002998 <stp_moveDistance+0x24>
        sign = -1;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	60fb      	str	r3, [r7, #12]
        // flashLED(LD3_GPIO_Port, LD3_Pin, 500, 10);
    }
    
   int convertedSteps = sign * abs(distance_cm * NEMA_DISTANCE_TO_STEPS);
 8002998:	edd7 7a00 	vldr	s15, [r7]
 800299c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80029d0 <stp_moveDistance+0x5c>
 80029a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a8:	ee17 3a90 	vmov	r3, s15
 80029ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80029b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	60bb      	str	r3, [r7, #8]
   stp_Move(motor, convertedSteps, 5);
 80029bc:	2205      	movs	r2, #5
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff93 	bl	80028ec <stp_Move>
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	42440000 	.word	0x42440000

080029d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a08      	ldr	r2, [pc, #32]	@ (8002a20 <HAL_MspInit+0x4c>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_MspInit+0x4c>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800

08002a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a2f      	ldr	r2, [pc, #188]	@ (8002b00 <HAL_ADC_MspInit+0xdc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d158      	bne.n	8002af8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <HAL_ADC_MspInit+0xe0>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b04 <HAL_ADC_MspInit+0xe0>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a56:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_ADC_MspInit+0xe0>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_ADC_MspInit+0xe0>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a26      	ldr	r2, [pc, #152]	@ (8002b04 <HAL_ADC_MspInit+0xe0>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <HAL_ADC_MspInit+0xe0>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a82:	2303      	movs	r3, #3
 8002a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	481d      	ldr	r0, [pc, #116]	@ (8002b08 <HAL_ADC_MspInit+0xe4>)
 8002a92:	f003 fa37 	bl	8005f04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a96:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002a98:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <HAL_ADC_MspInit+0xec>)
 8002a9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aae:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002ab0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ab4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002ab8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002abc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002abe:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002acc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002ace:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002ad0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ad4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002adc:	480b      	ldr	r0, [pc, #44]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002ade:	f001 fc87 	bl	80043f0 <HAL_DMA_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002ae8:	f7ff f82c 	bl	8001b44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a07      	ldr	r2, [pc, #28]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002af0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002af2:	4a06      	ldr	r2, [pc, #24]	@ (8002b0c <HAL_ADC_MspInit+0xe8>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	@ 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40012000 	.word	0x40012000
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	20000270 	.word	0x20000270
 8002b10:	40026410 	.word	0x40026410

08002b14 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	@ 0x38
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a78      	ldr	r2, [pc, #480]	@ (8002d14 <HAL_DCMI_MspInit+0x200>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	f040 80e9 	bne.w	8002d0a <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	4b76      	ldr	r3, [pc, #472]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b40:	4a75      	ldr	r2, [pc, #468]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6353      	str	r3, [r2, #52]	@ 0x34
 8002b48:	4b73      	ldr	r3, [pc, #460]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	623b      	str	r3, [r7, #32]
 8002b52:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	4b6f      	ldr	r3, [pc, #444]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b5e:	f043 0310 	orr.w	r3, r3, #16
 8002b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b64:	4b6c      	ldr	r3, [pc, #432]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	4b68      	ldr	r3, [pc, #416]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	4a67      	ldr	r2, [pc, #412]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b80:	4b65      	ldr	r3, [pc, #404]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	4b61      	ldr	r3, [pc, #388]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	4a60      	ldr	r2, [pc, #384]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	4b5a      	ldr	r3, [pc, #360]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	4a59      	ldr	r2, [pc, #356]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb8:	4b57      	ldr	r3, [pc, #348]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	4b53      	ldr	r3, [pc, #332]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	4a52      	ldr	r2, [pc, #328]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd4:	4b50      	ldr	r3, [pc, #320]	@ (8002d18 <HAL_DCMI_MspInit+0x204>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002be0:	2370      	movs	r3, #112	@ 0x70
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bf0:	230d      	movs	r3, #13
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4848      	ldr	r0, [pc, #288]	@ (8002d1c <HAL_DCMI_MspInit+0x208>)
 8002bfc:	f003 f982 	bl	8005f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002c00:	2350      	movs	r3, #80	@ 0x50
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c10:	230d      	movs	r3, #13
 8002c12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4841      	ldr	r0, [pc, #260]	@ (8002d20 <HAL_DCMI_MspInit+0x20c>)
 8002c1c:	f003 f972 	bl	8005f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c20:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c32:	230d      	movs	r3, #13
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4839      	ldr	r0, [pc, #228]	@ (8002d24 <HAL_DCMI_MspInit+0x210>)
 8002c3e:	f003 f961 	bl	8005f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c42:	2308      	movs	r3, #8
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c52:	230d      	movs	r3, #13
 8002c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4832      	ldr	r0, [pc, #200]	@ (8002d28 <HAL_DCMI_MspInit+0x214>)
 8002c5e:	f003 f951 	bl	8005f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c74:	230d      	movs	r3, #13
 8002c76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	482b      	ldr	r0, [pc, #172]	@ (8002d2c <HAL_DCMI_MspInit+0x218>)
 8002c80:	f003 f940 	bl	8005f04 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002c84:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002c86:	4a2b      	ldr	r2, [pc, #172]	@ (8002d34 <HAL_DCMI_MspInit+0x220>)
 8002c88:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002c8a:	4b29      	ldr	r3, [pc, #164]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c90:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c92:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002c9e:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ca6:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002ca8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cac:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cb4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cbc:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cc4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cc8:	2204      	movs	r2, #4
 8002cca:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ccc:	4b18      	ldr	r3, [pc, #96]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cce:	2203      	movs	r2, #3
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002cd2:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002cde:	4814      	ldr	r0, [pc, #80]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002ce0:	f001 fb86 	bl	80043f0 <HAL_DMA_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8002cea:	f7fe ff2b 	bl	8001b44 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cf2:	649a      	str	r2, [r3, #72]	@ 0x48
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d30 <HAL_DCMI_MspInit+0x21c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	204e      	movs	r0, #78	@ 0x4e
 8002d00:	f001 f8d3 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002d04:	204e      	movs	r0, #78	@ 0x4e
 8002d06:	f001 f8ec 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 8002d0a:	bf00      	nop
 8002d0c:	3738      	adds	r7, #56	@ 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	50050000 	.word	0x50050000
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020800 	.word	0x40020800
 8002d28:	40020c00 	.word	0x40020c00
 8002d2c:	40021800 	.word	0x40021800
 8002d30:	20000320 	.word	0x20000320
 8002d34:	40026428 	.word	0x40026428

08002d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	@ 0x30
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 031c 	add.w	r3, r7, #28
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a32      	ldr	r2, [pc, #200]	@ (8002e20 <HAL_I2C_MspInit+0xe8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d12d      	bne.n	8002db6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	4b31      	ldr	r3, [pc, #196]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	4a30      	ldr	r2, [pc, #192]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002d76:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d7c:	2312      	movs	r3, #18
 8002d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d88:	2304      	movs	r3, #4
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	4619      	mov	r1, r3
 8002d92:	4825      	ldr	r0, [pc, #148]	@ (8002e28 <HAL_I2C_MspInit+0xf0>)
 8002d94:	f003 f8b6 	bl	8005f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	4b21      	ldr	r3, [pc, #132]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	4a20      	ldr	r2, [pc, #128]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002da2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002db4:	e030      	b.n	8002e18 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1c      	ldr	r2, [pc, #112]	@ (8002e2c <HAL_I2C_MspInit+0xf4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d12b      	bne.n	8002e18 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	4a16      	ldr	r2, [pc, #88]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002dca:	f043 0320 	orr.w	r3, r3, #32
 8002dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd0:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de0:	2312      	movs	r3, #18
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dec:	2304      	movs	r3, #4
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	480e      	ldr	r0, [pc, #56]	@ (8002e30 <HAL_I2C_MspInit+0xf8>)
 8002df8:	f003 f884 	bl	8005f04 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	4a07      	ldr	r2, [pc, #28]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002e06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0c:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_I2C_MspInit+0xec>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3730      	adds	r7, #48	@ 0x30
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40005400 	.word	0x40005400
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	40005800 	.word	0x40005800
 8002e30:	40021400 	.word	0x40021400

08002e34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0b      	ldr	r2, [pc, #44]	@ (8002e70 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10d      	bne.n	8002e62 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <HAL_TIM_PWM_MspInit+0x40>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	4a09      	ldr	r2, [pc, #36]	@ (8002e74 <HAL_TIM_PWM_MspInit+0x40>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <HAL_TIM_PWM_MspInit+0x40>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ee8 <HAL_TIM_Base_MspInit+0x70>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	4a15      	ldr	r2, [pc, #84]	@ (8002ee8 <HAL_TIM_Base_MspInit+0x70>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ee8 <HAL_TIM_Base_MspInit+0x70>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002ea6:	e01a      	b.n	8002ede <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0f      	ldr	r2, [pc, #60]	@ (8002eec <HAL_TIM_Base_MspInit+0x74>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d115      	bne.n	8002ede <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <HAL_TIM_Base_MspInit+0x70>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee8 <HAL_TIM_Base_MspInit+0x70>)
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_TIM_Base_MspInit+0x70>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2036      	movs	r0, #54	@ 0x36
 8002ed4:	f000 ffe9 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ed8:	2036      	movs	r0, #54	@ 0x36
 8002eda:	f001 f802 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40001000 	.word	0x40001000

08002ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <HAL_TIM_MspPostInit+0x68>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d11e      	bne.n	8002f50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <HAL_TIM_MspPostInit+0x6c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4a10      	ldr	r2, [pc, #64]	@ (8002f5c <HAL_TIM_MspPostInit+0x6c>)
 8002f1c:	f043 0310 	orr.w	r3, r3, #16
 8002f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f22:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <HAL_TIM_MspPostInit+0x6c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f40:	2301      	movs	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4805      	ldr	r0, [pc, #20]	@ (8002f60 <HAL_TIM_MspPostInit+0x70>)
 8002f4c:	f002 ffda 	bl	8005f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f50:	bf00      	nop
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff8 <HAL_UART_MspInit+0x94>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d134      	bne.n	8002ff0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ffc <HAL_UART_MspInit+0x98>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ffc <HAL_UART_MspInit+0x98>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f96:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <HAL_UART_MspInit+0x98>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <HAL_UART_MspInit+0x98>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	4a14      	ldr	r2, [pc, #80]	@ (8002ffc <HAL_UART_MspInit+0x98>)
 8002fac:	f043 0308 	orr.w	r3, r3, #8
 8002fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb2:	4b12      	ldr	r3, [pc, #72]	@ (8002ffc <HAL_UART_MspInit+0x98>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002fbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4809      	ldr	r0, [pc, #36]	@ (8003000 <HAL_UART_MspInit+0x9c>)
 8002fdc:	f002 ff92 	bl	8005f04 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2027      	movs	r0, #39	@ 0x27
 8002fe6:	f000 ff60 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fea:	2027      	movs	r0, #39	@ 0x27
 8002fec:	f000 ff79 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	@ 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40004800 	.word	0x40004800
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020c00 	.word	0x40020c00

08003004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <NMI_Handler+0x4>

0800300c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <HardFault_Handler+0x4>

08003014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <MemManage_Handler+0x4>

0800301c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <BusFault_Handler+0x4>

08003024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <UsageFault_Handler+0x4>

0800302c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800305a:	f000 f995 	bl	8003388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003068:	4802      	ldr	r0, [pc, #8]	@ (8003074 <USART3_IRQHandler+0x10>)
 800306a:	f006 fd63 	bl	8009b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000500 	.word	0x20000500

08003078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800307c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003080:	f003 f908 	bl	8006294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}

08003088 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800308c:	4802      	ldr	r0, [pc, #8]	@ (8003098 <TIM6_DAC_IRQHandler+0x10>)
 800308e:	f005 fda7 	bl	8008be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200004b8 	.word	0x200004b8

0800309c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030a0:	4802      	ldr	r0, [pc, #8]	@ (80030ac <DMA2_Stream0_IRQHandler+0x10>)
 80030a2:	f001 fb3d 	bl	8004720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000270 	.word	0x20000270

080030b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80030b4:	4803      	ldr	r0, [pc, #12]	@ (80030c4 <DMA2_Stream1_IRQHandler+0x14>)
 80030b6:	f001 fb33 	bl	8004720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	dma_flag = 1;
 80030ba:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <DMA2_Stream1_IRQHandler+0x18>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000320 	.word	0x20000320
 80030c8:	2000c908 	.word	0x2000c908

080030cc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80030d0:	4802      	ldr	r0, [pc, #8]	@ (80030dc <DCMI_IRQHandler+0x10>)
 80030d2:	f000 ffc1 	bl	8004058 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200002d0 	.word	0x200002d0

080030e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return 1;
 80030e4:	2301      	movs	r3, #1
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_kill>:

int _kill(int pid, int sig)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030fa:	f009 fa25 	bl	800c548 <__errno>
 80030fe:	4603      	mov	r3, r0
 8003100:	2216      	movs	r2, #22
 8003102:	601a      	str	r2, [r3, #0]
  return -1;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_exit>:

void _exit (int status)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003118:	f04f 31ff 	mov.w	r1, #4294967295
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ffe7 	bl	80030f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003122:	bf00      	nop
 8003124:	e7fd      	b.n	8003122 <_exit+0x12>

08003126 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e00a      	b.n	800314e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003138:	f3af 8000 	nop.w
 800313c:	4601      	mov	r1, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	60ba      	str	r2, [r7, #8]
 8003144:	b2ca      	uxtb	r2, r1
 8003146:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	dbf0      	blt.n	8003138 <_read+0x12>
  }

  return len;
 8003156:	687b      	ldr	r3, [r7, #4]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e009      	b.n	8003186 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	60ba      	str	r2, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	3301      	adds	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	dbf1      	blt.n	8003172 <_write+0x12>
  }
  return len;
 800318e:	687b      	ldr	r3, [r7, #4]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_close>:

int _close(int file)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031c0:	605a      	str	r2, [r3, #4]
  return 0;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_isatty>:

int _isatty(int file)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031d8:	2301      	movs	r3, #1
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003208:	4a14      	ldr	r2, [pc, #80]	@ (800325c <_sbrk+0x5c>)
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <_sbrk+0x60>)
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003214:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800321c:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <_sbrk+0x64>)
 800321e:	4a12      	ldr	r2, [pc, #72]	@ (8003268 <_sbrk+0x68>)
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	429a      	cmp	r2, r3
 800322e:	d207      	bcs.n	8003240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003230:	f009 f98a 	bl	800c548 <__errno>
 8003234:	4603      	mov	r3, r0
 8003236:	220c      	movs	r2, #12
 8003238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e009      	b.n	8003254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003240:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <_sbrk+0x64>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003246:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	4a05      	ldr	r2, [pc, #20]	@ (8003264 <_sbrk+0x64>)
 8003250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20020000 	.word	0x20020000
 8003260:	00000400 	.word	0x00000400
 8003264:	20011964 	.word	0x20011964
 8003268:	20011ab8 	.word	0x20011ab8

0800326c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <SystemInit+0x20>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003276:	4a05      	ldr	r2, [pc, #20]	@ (800328c <SystemInit+0x20>)
 8003278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800327c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003294:	f7ff ffea 	bl	800326c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003298:	480c      	ldr	r0, [pc, #48]	@ (80032cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800329a:	490d      	ldr	r1, [pc, #52]	@ (80032d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800329c:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800329e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a0:	e002      	b.n	80032a8 <LoopCopyDataInit>

080032a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032a6:	3304      	adds	r3, #4

080032a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032ac:	d3f9      	bcc.n	80032a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ae:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032b0:	4c0a      	ldr	r4, [pc, #40]	@ (80032dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b4:	e001      	b.n	80032ba <LoopFillZerobss>

080032b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b8:	3204      	adds	r2, #4

080032ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032bc:	d3fb      	bcc.n	80032b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80032be:	f009 f949 	bl	800c554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c2:	f7fe fdc7 	bl	8001e54 <main>
  bx  lr    
 80032c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80032d4:	08022918 	.word	0x08022918
  ldr r2, =_sbss
 80032d8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80032dc:	20011ab8 	.word	0x20011ab8

080032e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e0:	e7fe      	b.n	80032e0 <ADC_IRQHandler>
	...

080032e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <HAL_Init+0x40>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003324 <HAL_Init+0x40>)
 80032ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_Init+0x40>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <HAL_Init+0x40>)
 80032fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003300:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a07      	ldr	r2, [pc, #28]	@ (8003324 <HAL_Init+0x40>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330c:	2003      	movs	r0, #3
 800330e:	f000 fdc1 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003312:	2000      	movs	r0, #0
 8003314:	f000 f808 	bl	8003328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003318:	f7ff fb5c 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023c00 	.word	0x40023c00

08003328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003330:	4b12      	ldr	r3, [pc, #72]	@ (800337c <HAL_InitTick+0x54>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b12      	ldr	r3, [pc, #72]	@ (8003380 <HAL_InitTick+0x58>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800333e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fdd9 	bl	8003efe <HAL_SYSTICK_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e00e      	b.n	8003374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b0f      	cmp	r3, #15
 800335a:	d80a      	bhi.n	8003372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800335c:	2200      	movs	r2, #0
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	f000 fda1 	bl	8003eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003368:	4a06      	ldr	r2, [pc, #24]	@ (8003384 <HAL_InitTick+0x5c>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000000 	.word	0x20000000
 8003380:	20000008 	.word	0x20000008
 8003384:	20000004 	.word	0x20000004

08003388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <HAL_IncTick+0x20>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <HAL_IncTick+0x24>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4413      	add	r3, r2
 8003398:	4a04      	ldr	r2, [pc, #16]	@ (80033ac <HAL_IncTick+0x24>)
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000008 	.word	0x20000008
 80033ac:	20011968 	.word	0x20011968

080033b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return uwTick;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_GetTick+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20011968 	.word	0x20011968

080033c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d0:	f7ff ffee 	bl	80033b0 <HAL_GetTick>
 80033d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d005      	beq.n	80033ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_Delay+0x44>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033ee:	bf00      	nop
 80033f0:	f7ff ffde 	bl	80033b0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d8f7      	bhi.n	80033f0 <HAL_Delay+0x28>
  {
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000008 	.word	0x20000008

08003410 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e033      	b.n	800348e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff faf8 	bl	8002a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003456:	f023 0302 	bic.w	r3, r3, #2
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fac8 	bl	80039f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	641a      	str	r2, [r3, #64]	@ 0x40
 800347e:	e001      	b.n	8003484 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_ADC_Start_DMA+0x1e>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e0e9      	b.n	800368a <HAL_ADC_Start_DMA+0x1f2>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d018      	beq.n	80034fe <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003694 <HAL_ADC_Start_DMA+0x1fc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a6d      	ldr	r2, [pc, #436]	@ (8003698 <HAL_ADC_Start_DMA+0x200>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	0c9a      	lsrs	r2, r3, #18
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80034f0:	e002      	b.n	80034f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f9      	bne.n	80034f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800350c:	d107      	bne.n	800351e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	f040 80a1 	bne.w	8003670 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003558:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356c:	d106      	bne.n	800357c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	f023 0206 	bic.w	r2, r3, #6
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	645a      	str	r2, [r3, #68]	@ 0x44
 800357a:	e002      	b.n	8003582 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800358a:	4b44      	ldr	r3, [pc, #272]	@ (800369c <HAL_ADC_Start_DMA+0x204>)
 800358c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	4a43      	ldr	r2, [pc, #268]	@ (80036a0 <HAL_ADC_Start_DMA+0x208>)
 8003594:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	4a42      	ldr	r2, [pc, #264]	@ (80036a4 <HAL_ADC_Start_DMA+0x20c>)
 800359c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a2:	4a41      	ldr	r2, [pc, #260]	@ (80036a8 <HAL_ADC_Start_DMA+0x210>)
 80035a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80035ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80035be:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ce:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	334c      	adds	r3, #76	@ 0x4c
 80035da:	4619      	mov	r1, r3
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f000 ffb4 	bl	800454c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d12a      	bne.n	8003646 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2d      	ldr	r2, [pc, #180]	@ (80036ac <HAL_ADC_Start_DMA+0x214>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d015      	beq.n	8003626 <HAL_ADC_Start_DMA+0x18e>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2c      	ldr	r2, [pc, #176]	@ (80036b0 <HAL_ADC_Start_DMA+0x218>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d105      	bne.n	8003610 <HAL_ADC_Start_DMA+0x178>
 8003604:	4b25      	ldr	r3, [pc, #148]	@ (800369c <HAL_ADC_Start_DMA+0x204>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a27      	ldr	r2, [pc, #156]	@ (80036b4 <HAL_ADC_Start_DMA+0x21c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d136      	bne.n	8003688 <HAL_ADC_Start_DMA+0x1f0>
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_ADC_Start_DMA+0x204>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d130      	bne.n	8003688 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d129      	bne.n	8003688 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	e020      	b.n	8003688 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a18      	ldr	r2, [pc, #96]	@ (80036ac <HAL_ADC_Start_DMA+0x214>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d11b      	bne.n	8003688 <HAL_ADC_Start_DMA+0x1f0>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d114      	bne.n	8003688 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	e00b      	b.n	8003688 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	f043 0210 	orr.w	r2, r3, #16
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003680:	f043 0201 	orr.w	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000
 8003698:	431bde83 	.word	0x431bde83
 800369c:	40012300 	.word	0x40012300
 80036a0:	08003bf1 	.word	0x08003bf1
 80036a4:	08003cab 	.word	0x08003cab
 80036a8:	08003cc7 	.word	0x08003cc7
 80036ac:	40012000 	.word	0x40012000
 80036b0:	40012100 	.word	0x40012100
 80036b4:	40012200 	.word	0x40012200

080036b8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_Stop_DMA+0x1a>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e048      	b.n	8003764 <HAL_ADC_Stop_DMA+0xac>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d130      	bne.n	800375a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003706:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d10f      	bne.n	8003736 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	4618      	mov	r0, r3
 800371c:	f000 ff6e 	bl	80045fc <HAL_DMA_Abort>
 8003720:	4603      	mov	r3, r0
 8003722:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003744:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1c>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e113      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x244>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d925      	bls.n	800380c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68d9      	ldr	r1, [r3, #12]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	4613      	mov	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4413      	add	r3, r2
 80037d4:	3b1e      	subs	r3, #30
 80037d6:	2207      	movs	r2, #7
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43da      	mvns	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	400a      	ands	r2, r1
 80037e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68d9      	ldr	r1, [r3, #12]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4618      	mov	r0, r3
 80037f8:	4603      	mov	r3, r0
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4403      	add	r3, r0
 80037fe:	3b1e      	subs	r3, #30
 8003800:	409a      	lsls	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	e022      	b.n	8003852 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6919      	ldr	r1, [r3, #16]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	2207      	movs	r2, #7
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	400a      	ands	r2, r1
 800382e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6919      	ldr	r1, [r3, #16]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	4618      	mov	r0, r3
 8003842:	4603      	mov	r3, r0
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4403      	add	r3, r0
 8003848:	409a      	lsls	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b06      	cmp	r3, #6
 8003858:	d824      	bhi.n	80038a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	3b05      	subs	r3, #5
 800386c:	221f      	movs	r2, #31
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43da      	mvns	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	400a      	ands	r2, r1
 800387a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	4618      	mov	r0, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	3b05      	subs	r3, #5
 8003896:	fa00 f203 	lsl.w	r2, r0, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80038a2:	e04c      	b.n	800393e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d824      	bhi.n	80038f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	3b23      	subs	r3, #35	@ 0x23
 80038be:	221f      	movs	r2, #31
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43da      	mvns	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	400a      	ands	r2, r1
 80038cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4618      	mov	r0, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	3b23      	subs	r3, #35	@ 0x23
 80038e8:	fa00 f203 	lsl.w	r2, r0, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80038f4:	e023      	b.n	800393e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	3b41      	subs	r3, #65	@ 0x41
 8003908:	221f      	movs	r2, #31
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43da      	mvns	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	400a      	ands	r2, r1
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	3b41      	subs	r3, #65	@ 0x41
 8003932:	fa00 f203 	lsl.w	r2, r0, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <HAL_ADC_ConfigChannel+0x250>)
 8003940:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a28      	ldr	r2, [pc, #160]	@ (80039e8 <HAL_ADC_ConfigChannel+0x254>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10f      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1d8>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b12      	cmp	r3, #18
 8003952:	d10b      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <HAL_ADC_ConfigChannel+0x254>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d12b      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x23a>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <HAL_ADC_ConfigChannel+0x258>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <HAL_ADC_ConfigChannel+0x1f4>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b11      	cmp	r3, #17
 8003986:	d122      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <HAL_ADC_ConfigChannel+0x258>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d111      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039aa:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <HAL_ADC_ConfigChannel+0x25c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a11      	ldr	r2, [pc, #68]	@ (80039f4 <HAL_ADC_ConfigChannel+0x260>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9a      	lsrs	r2, r3, #18
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039c0:	e002      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f9      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40012300 	.word	0x40012300
 80039e8:	40012000 	.word	0x40012000
 80039ec:	10000012 	.word	0x10000012
 80039f0:	20000000 	.word	0x20000000
 80039f4:	431bde83 	.word	0x431bde83

080039f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a00:	4b79      	ldr	r3, [pc, #484]	@ (8003be8 <ADC_Init+0x1f0>)
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	4a58      	ldr	r2, [pc, #352]	@ (8003bec <ADC_Init+0x1f4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	e00f      	b.n	8003af6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003af4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0202 	bic.w	r2, r2, #2
 8003b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7e1b      	ldrb	r3, [r3, #24]
 8003b10:	005a      	lsls	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	035a      	lsls	r2, r3, #13
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	e007      	b.n	8003b6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	051a      	lsls	r2, r3, #20
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bae:	025a      	lsls	r2, r3, #9
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	029a      	lsls	r2, r3, #10
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40012300 	.word	0x40012300
 8003bec:	0f000001 	.word	0x0f000001

08003bf0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d13c      	bne.n	8003c84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d12b      	bne.n	8003c7c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d127      	bne.n	8003c7c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d119      	bne.n	8003c7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0220 	bic.w	r2, r2, #32
 8003c56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7fd fa55 	bl	800112c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c82:	e00e      	b.n	8003ca2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff fd75 	bl	8003780 <HAL_ADC_ErrorCallback>
}
 8003c96:	e004      	b.n	8003ca2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fd57 	bl	800376c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2240      	movs	r2, #64	@ 0x40
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	f043 0204 	orr.w	r2, r3, #4
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff fd4a 	bl	8003780 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	@ (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	@ (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	@ (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	@ 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e60:	d301      	bcc.n	8003e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <SysTick_Config+0x40>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6e:	210f      	movs	r1, #15
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	f7ff ff8e 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <SysTick_Config+0x40>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7e:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <SysTick_Config+0x40>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff29 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ebc:	f7ff ff3e 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff8e 	bl	8003de8 <NVIC_EncodePriority>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff5d 	bl	8003d94 <__NVIC_SetPriority>
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff31 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffa2 	bl	8003e50 <SysTick_Config>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_DCMI_Start_DMA+0x20>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e086      	b.n	8004046 <HAL_DCMI_Start_DMA+0x12e>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f56:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0202 	bic.w	r2, r2, #2
 8003f66:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7c:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_DCMI_Start_DMA+0x138>)
 8003f7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	4a33      	ldr	r2, [pc, #204]	@ (8004054 <HAL_DCMI_Start_DMA+0x13c>)
 8003f86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	651a      	str	r2, [r3, #80]	@ 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  if(Length <= 0xFFFFU)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa2:	d20a      	bcs.n	8003fba <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3328      	adds	r3, #40	@ 0x28
 8003fae:	4619      	mov	r1, r3
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	f000 faca 	bl	800454c <HAL_DMA_Start_IT>
 8003fb8:	e038      	b.n	800402c <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbe:	4a24      	ldr	r2, [pc, #144]	@ (8004050 <HAL_DCMI_Start_DMA+0x138>)
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8003fd4:	e009      	b.n	8003fea <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fda:	085a      	lsrs	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	005a      	lsls	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    while(hdcmi->XferSize > 0xFFFFU)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff2:	d2f0      	bcs.n	8003fd6 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff8:	1e9a      	subs	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3328      	adds	r3, #40	@ 0x28
 800401c:	4619      	mov	r1, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	f000 fde4 	bl	8004bf4 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	080041a5 	.word	0x080041a5
 8004054:	080042cf 	.word	0x080042cf

08004058 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2204      	movs	r2, #4
 8004078:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407e:	f043 0202 	orr.w	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2204      	movs	r2, #4
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004092:	4a2f      	ldr	r2, [pc, #188]	@ (8004150 <HAL_DCMI_IRQHandler+0xf8>)
 8004094:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fb1e 	bl	80046dc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2202      	movs	r2, #2
 80040b0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2204      	movs	r2, #4
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ca:	4a21      	ldr	r2, [pc, #132]	@ (8004150 <HAL_DCMI_IRQHandler+0xf8>)
 80040cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb02 	bl	80046dc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d006      	beq.n	80040f0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2210      	movs	r2, #16
 80040e8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f83c 	bl	8004168 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d006      	beq.n	8004108 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2208      	movs	r2, #8
 8004100:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f83a 	bl	800417c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d019      	beq.n	8004146 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b02      	cmp	r3, #2
 800411e:	d107      	bne.n	8004130 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 021e 	bic.w	r2, r2, #30
 800412e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f825 	bl	8004190 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	080042cf 	.word	0x080042cf

08004154 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d043      	beq.n	8004246 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ca:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d118      	bne.n	800420a <DCMI_DMAXferCplt+0x66>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d015      	beq.n	800420a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	00da      	lsls	r2, r3, #3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	4619      	mov	r1, r3
 80041fa:	f001 fe43 	bl	8005e84 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	1e5a      	subs	r2, r3, #1
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	639a      	str	r2, [r3, #56]	@ 0x38
 8004208:	e044      	b.n	8004294 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d13c      	bne.n	8004294 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	00da      	lsls	r2, r3, #3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4413      	add	r3, r2
 8004232:	2201      	movs	r2, #1
 8004234:	4619      	mov	r1, r3
 8004236:	f001 fe25 	bl	8005e84 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	1e5a      	subs	r2, r3, #1
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	639a      	str	r2, [r3, #56]	@ 0x38
 8004244:	e026      	b.n	8004294 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	e017      	b.n	8004294 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10f      	bne.n	8004294 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004278:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427e:	0099      	lsls	r1, r3, #2
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	440a      	add	r2, r1
 800428a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	429a      	cmp	r2, r3
 800429e:	d112      	bne.n	80042c6 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d103      	bne.n	80042c6 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042da:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d003      	beq.n	80042ee <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff ff30 	bl	8004154 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e069      	b.n	80043e2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fe fbf6 	bl	8002b14 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fe fbf3 	bl	8002b14 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6819      	ldr	r1, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <HAL_DCMI_Init+0xf0>)
 8004342:	400b      	ands	r3, r1
 8004344:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800435a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004366:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004372:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 800437e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800438a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b10      	cmp	r3, #16
 800439a:	d112      	bne.n	80043c2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	7f1b      	ldrb	r3, [r3, #28]
 80043a0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7f5b      	ldrb	r3, [r3, #29]
 80043a6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80043a8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7f9b      	ldrb	r3, [r3, #30]
 80043ae:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80043b0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7fdb      	ldrb	r3, [r3, #31]
 80043b8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80043be:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80043c0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 021e 	orr.w	r2, r2, #30
 80043d0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	ffe0f007 	.word	0xffe0f007

080043f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043fc:	f7fe ffd8 	bl	80033b0 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e099      	b.n	8004540 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800442c:	e00f      	b.n	800444e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800442e:	f7fe ffbf 	bl	80033b0 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b05      	cmp	r3, #5
 800443a:	d908      	bls.n	800444e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2203      	movs	r2, #3
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e078      	b.n	8004540 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e8      	bne.n	800442e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4b38      	ldr	r3, [pc, #224]	@ (8004548 <HAL_DMA_Init+0x158>)
 8004468:	4013      	ands	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800447a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d107      	bne.n	80044b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	4313      	orrs	r3, r2
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d117      	bne.n	8004512 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00e      	beq.n	8004512 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fb01 	bl	8004afc <DMA_CheckFifoParam>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2240      	movs	r2, #64	@ 0x40
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800450e:	2301      	movs	r3, #1
 8004510:	e016      	b.n	8004540 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fab8 	bl	8004a90 <DMA_CalcBaseAndBitshift>
 8004520:	4603      	mov	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	223f      	movs	r2, #63	@ 0x3f
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	f010803f 	.word	0xf010803f

0800454c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_DMA_Start_IT+0x26>
 800456e:	2302      	movs	r3, #2
 8004570:	e040      	b.n	80045f4 <HAL_DMA_Start_IT+0xa8>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d12f      	bne.n	80045e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fa4a 	bl	8004a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a4:	223f      	movs	r2, #63	@ 0x3f
 80045a6:	409a      	lsls	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0216 	orr.w	r2, r2, #22
 80045ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0208 	orr.w	r2, r2, #8
 80045d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e005      	b.n	80045f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004608:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800460a:	f7fe fed1 	bl	80033b0 <HAL_GetTick>
 800460e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d008      	beq.n	800462e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2280      	movs	r2, #128	@ 0x80
 8004620:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e052      	b.n	80046d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0216 	bic.w	r2, r2, #22
 800463c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800464c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <HAL_DMA_Abort+0x62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0208 	bic.w	r2, r2, #8
 800466c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800467e:	e013      	b.n	80046a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004680:	f7fe fe96 	bl	80033b0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b05      	cmp	r3, #5
 800468c:	d90c      	bls.n	80046a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e015      	b.n	80046d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e4      	bne.n	8004680 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	223f      	movs	r2, #63	@ 0x3f
 80046bc:	409a      	lsls	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d004      	beq.n	80046fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2280      	movs	r2, #128	@ 0x80
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e00c      	b.n	8004714 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2205      	movs	r2, #5
 80046fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800472c:	4b8e      	ldr	r3, [pc, #568]	@ (8004968 <HAL_DMA_IRQHandler+0x248>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a8e      	ldr	r2, [pc, #568]	@ (800496c <HAL_DMA_IRQHandler+0x24c>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	0a9b      	lsrs	r3, r3, #10
 8004738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474a:	2208      	movs	r2, #8
 800474c:	409a      	lsls	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01a      	beq.n	800478c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0204 	bic.w	r2, r2, #4
 8004772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	2208      	movs	r2, #8
 800477a:	409a      	lsls	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004790:	2201      	movs	r2, #1
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ae:	2201      	movs	r2, #1
 80047b0:	409a      	lsls	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c6:	2204      	movs	r2, #4
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d012      	beq.n	80047f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	2204      	movs	r2, #4
 80047e6:	409a      	lsls	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	f043 0204 	orr.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	2210      	movs	r2, #16
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d043      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d03c      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	2210      	movs	r2, #16
 800481c:	409a      	lsls	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d024      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
 800484e:	e01f      	b.n	8004890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e016      	b.n	8004890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0208 	bic.w	r2, r2, #8
 800487e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004894:	2220      	movs	r2, #32
 8004896:	409a      	lsls	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 808f 	beq.w	80049c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8087 	beq.w	80049c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b6:	2220      	movs	r2, #32
 80048b8:	409a      	lsls	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d136      	bne.n	8004938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0216 	bic.w	r2, r2, #22
 80048d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_DMA_IRQHandler+0x1da>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490e:	223f      	movs	r2, #63	@ 0x3f
 8004910:	409a      	lsls	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d07e      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
        }
        return;
 8004936:	e079      	b.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004958:	2b00      	cmp	r3, #0
 800495a:	d031      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
 8004964:	e02c      	b.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
 8004966:	bf00      	nop
 8004968:	20000000 	.word	0x20000000
 800496c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d023      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
 8004980:	e01e      	b.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0210 	bic.w	r2, r2, #16
 800499e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d032      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d022      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2205      	movs	r2, #5
 80049d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d307      	bcc.n	8004a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f2      	bne.n	80049ec <HAL_DMA_IRQHandler+0x2cc>
 8004a06:	e000      	b.n	8004a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e000      	b.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a2c:	bf00      	nop
    }
  }
}
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b40      	cmp	r3, #64	@ 0x40
 8004a60:	d108      	bne.n	8004a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a72:	e007      	b.n	8004a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	3b10      	subs	r3, #16
 8004aa0:	4a14      	ldr	r2, [pc, #80]	@ (8004af4 <DMA_CalcBaseAndBitshift+0x64>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aaa:	4a13      	ldr	r2, [pc, #76]	@ (8004af8 <DMA_CalcBaseAndBitshift+0x68>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d909      	bls.n	8004ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ad0:	e007      	b.n	8004ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	aaaaaaab 	.word	0xaaaaaaab
 8004af8:	0800f0f4 	.word	0x0800f0f4

08004afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d856      	bhi.n	8004bca <DMA_CheckFifoParam+0xce>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <DMA_CheckFifoParam+0x28>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b47 	.word	0x08004b47
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004bcb 	.word	0x08004bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d046      	beq.n	8004bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b44:	e043      	b.n	8004bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b4e:	d140      	bne.n	8004bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e03d      	b.n	8004bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b5e:	d121      	bne.n	8004ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d837      	bhi.n	8004bd6 <DMA_CheckFifoParam+0xda>
 8004b66:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <DMA_CheckFifoParam+0x70>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b83 	.word	0x08004b83
 8004b74:	08004b7d 	.word	0x08004b7d
 8004b78:	08004b95 	.word	0x08004b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e030      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d025      	beq.n	8004bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b92:	e022      	b.n	8004bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b9c:	d11f      	bne.n	8004bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ba2:	e01c      	b.n	8004bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d903      	bls.n	8004bb2 <DMA_CheckFifoParam+0xb6>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d003      	beq.n	8004bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bb0:	e018      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb6:	e015      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc8:	e00b      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e00a      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e008      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e006      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e004      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004be2:	bf00      	nop
    }
  } 
  
  return status; 
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop

08004bf4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b80      	cmp	r3, #128	@ 0x80
 8004c0c:	d106      	bne.n	8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f001 b911 	b.w	8005e3e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2240      	movs	r2, #64	@ 0x40
 8004c38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f001 b8ff 	b.w	8005e3e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d102      	bne.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	f001 b8f7 	b.w	8005e3e <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f041 80e5 	bne.w	8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c82:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f001 f910 	bl	8005eb8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8004ed4 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d960      	bls.n	8004d66 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a8b      	ldr	r2, [pc, #556]	@ (8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d057      	beq.n	8004d5e <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a8a      	ldr	r2, [pc, #552]	@ (8004edc <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d050      	beq.n	8004d5a <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a88      	ldr	r2, [pc, #544]	@ (8004ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d049      	beq.n	8004d56 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a87      	ldr	r2, [pc, #540]	@ (8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d042      	beq.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a85      	ldr	r2, [pc, #532]	@ (8004ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d03a      	beq.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a84      	ldr	r2, [pc, #528]	@ (8004eec <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d032      	beq.n	8004d46 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a82      	ldr	r2, [pc, #520]	@ (8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02a      	beq.n	8004d40 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a81      	ldr	r2, [pc, #516]	@ (8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01a      	beq.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a7e      	ldr	r2, [pc, #504]	@ (8004efc <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d012      	beq.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004f00 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00a      	beq.n	8004d28 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a7b      	ldr	r2, [pc, #492]	@ (8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d102      	bne.n	8004d22 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004d1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d20:	e01e      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d26:	e01b      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d2c:	e018      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d2e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d32:	e015      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d34:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d38:	e012      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d3e:	e00f      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d44:	e00c      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d4a:	e009      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d50:	e006      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d52:	2320      	movs	r3, #32
 8004d54:	e004      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d56:	2320      	movs	r3, #32
 8004d58:	e002      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d5a:	2320      	movs	r3, #32
 8004d5c:	e000      	b.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004d5e:	2320      	movs	r3, #32
 8004d60:	4a69      	ldr	r2, [pc, #420]	@ (8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004d62:	60d3      	str	r3, [r2, #12]
 8004d64:	e14f      	b.n	8005006 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4b67      	ldr	r3, [pc, #412]	@ (8004f0c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d960      	bls.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a58      	ldr	r2, [pc, #352]	@ (8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d057      	beq.n	8004e2c <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a56      	ldr	r2, [pc, #344]	@ (8004edc <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d050      	beq.n	8004e28 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a55      	ldr	r2, [pc, #340]	@ (8004ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d049      	beq.n	8004e24 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a53      	ldr	r2, [pc, #332]	@ (8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d042      	beq.n	8004e20 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a52      	ldr	r2, [pc, #328]	@ (8004ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d03a      	beq.n	8004e1a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a50      	ldr	r2, [pc, #320]	@ (8004eec <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d032      	beq.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4f      	ldr	r2, [pc, #316]	@ (8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02a      	beq.n	8004e0e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a4d      	ldr	r2, [pc, #308]	@ (8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d022      	beq.n	8004e08 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4c      	ldr	r2, [pc, #304]	@ (8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d01a      	beq.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8004efc <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d012      	beq.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a49      	ldr	r2, [pc, #292]	@ (8004f00 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00a      	beq.n	8004df6 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a47      	ldr	r2, [pc, #284]	@ (8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d102      	bne.n	8004df0 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8004dea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004dee:	e01e      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004df0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004df4:	e01b      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004df6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004dfa:	e018      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004dfc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004e00:	e015      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e02:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004e06:	e012      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e0c:	e00f      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e12:	e00c      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e18:	e009      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e1e:	e006      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e20:	2320      	movs	r3, #32
 8004e22:	e004      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e24:	2320      	movs	r3, #32
 8004e26:	e002      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e28:	2320      	movs	r3, #32
 8004e2a:	e000      	b.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	4a36      	ldr	r2, [pc, #216]	@ (8004f08 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	e0e8      	b.n	8005006 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b35      	ldr	r3, [pc, #212]	@ (8004f10 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	f240 8082 	bls.w	8004f46 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a24      	ldr	r2, [pc, #144]	@ (8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d078      	beq.n	8004f3e <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a22      	ldr	r2, [pc, #136]	@ (8004edc <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d071      	beq.n	8004f3a <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d06a      	beq.n	8004f36 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d063      	beq.n	8004f32 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d05b      	beq.n	8004f2c <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1c      	ldr	r2, [pc, #112]	@ (8004eec <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d053      	beq.n	8004f26 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef0 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d04b      	beq.n	8004f20 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	@ (8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d043      	beq.n	8004f1a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a18      	ldr	r2, [pc, #96]	@ (8004ef8 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d03b      	beq.n	8004f14 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	@ (8004efc <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d012      	beq.n	8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a15      	ldr	r2, [pc, #84]	@ (8004f00 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00a      	beq.n	8004ec6 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a13      	ldr	r2, [pc, #76]	@ (8004f04 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d102      	bne.n	8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8004eba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ebe:	e03f      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004ec0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ec4:	e03c      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004ec6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004eca:	e039      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004ecc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ed0:	e036      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004ed2:	bf00      	nop
 8004ed4:	40026458 	.word	0x40026458
 8004ed8:	40026010 	.word	0x40026010
 8004edc:	40026410 	.word	0x40026410
 8004ee0:	40026070 	.word	0x40026070
 8004ee4:	40026470 	.word	0x40026470
 8004ee8:	40026028 	.word	0x40026028
 8004eec:	40026428 	.word	0x40026428
 8004ef0:	40026088 	.word	0x40026088
 8004ef4:	40026488 	.word	0x40026488
 8004ef8:	40026040 	.word	0x40026040
 8004efc:	40026440 	.word	0x40026440
 8004f00:	400260a0 	.word	0x400260a0
 8004f04:	400264a0 	.word	0x400264a0
 8004f08:	40026400 	.word	0x40026400
 8004f0c:	400260b8 	.word	0x400260b8
 8004f10:	40026058 	.word	0x40026058
 8004f14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004f18:	e012      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004f1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f1e:	e00f      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004f20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f24:	e00c      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004f26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f2a:	e009      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f30:	e006      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004f32:	2320      	movs	r3, #32
 8004f34:	e004      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004f36:	2320      	movs	r3, #32
 8004f38:	e002      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004f3a:	2320      	movs	r3, #32
 8004f3c:	e000      	b.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8004f3e:	2320      	movs	r3, #32
 8004f40:	4a8c      	ldr	r2, [pc, #560]	@ (8005174 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004f42:	60d3      	str	r3, [r2, #12]
 8004f44:	e05f      	b.n	8005006 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a8b      	ldr	r2, [pc, #556]	@ (8005178 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d057      	beq.n	8005000 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a89      	ldr	r2, [pc, #548]	@ (800517c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d050      	beq.n	8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a88      	ldr	r2, [pc, #544]	@ (8005180 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d049      	beq.n	8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a86      	ldr	r2, [pc, #536]	@ (8005184 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d042      	beq.n	8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a85      	ldr	r2, [pc, #532]	@ (8005188 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d03a      	beq.n	8004fee <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a83      	ldr	r2, [pc, #524]	@ (800518c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d032      	beq.n	8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a82      	ldr	r2, [pc, #520]	@ (8005190 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d02a      	beq.n	8004fe2 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a80      	ldr	r2, [pc, #512]	@ (8005194 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d022      	beq.n	8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a7f      	ldr	r2, [pc, #508]	@ (8005198 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d01a      	beq.n	8004fd6 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a7d      	ldr	r2, [pc, #500]	@ (800519c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d012      	beq.n	8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a7c      	ldr	r2, [pc, #496]	@ (80051a0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00a      	beq.n	8004fca <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a7a      	ldr	r2, [pc, #488]	@ (80051a4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d102      	bne.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004fbe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004fc2:	e01e      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004fc4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fc8:	e01b      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004fca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004fce:	e018      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004fd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004fd4:	e015      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004fd6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004fda:	e012      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004fdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fe0:	e00f      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004fe2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fe6:	e00c      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004fe8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fec:	e009      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004fee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ff2:	e006      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	e004      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	e002      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8004ffc:	2320      	movs	r3, #32
 8004ffe:	e000      	b.n	8005002 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8005000:	2320      	movs	r3, #32
 8005002:	4a5c      	ldr	r2, [pc, #368]	@ (8005174 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8005004:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	4b66      	ldr	r3, [pc, #408]	@ (80051a8 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800500e:	429a      	cmp	r2, r3
 8005010:	d960      	bls.n	80050d4 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a58      	ldr	r2, [pc, #352]	@ (8005178 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d057      	beq.n	80050cc <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a56      	ldr	r2, [pc, #344]	@ (800517c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d050      	beq.n	80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a55      	ldr	r2, [pc, #340]	@ (8005180 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d049      	beq.n	80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a53      	ldr	r2, [pc, #332]	@ (8005184 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d042      	beq.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a52      	ldr	r2, [pc, #328]	@ (8005188 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d03a      	beq.n	80050ba <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a50      	ldr	r2, [pc, #320]	@ (800518c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d032      	beq.n	80050b4 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4f      	ldr	r2, [pc, #316]	@ (8005190 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d02a      	beq.n	80050ae <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a4d      	ldr	r2, [pc, #308]	@ (8005194 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d022      	beq.n	80050a8 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a4c      	ldr	r2, [pc, #304]	@ (8005198 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d01a      	beq.n	80050a2 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a4a      	ldr	r2, [pc, #296]	@ (800519c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d012      	beq.n	800509c <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a49      	ldr	r2, [pc, #292]	@ (80051a0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00a      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a47      	ldr	r2, [pc, #284]	@ (80051a4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d102      	bne.n	8005090 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800508a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800508e:	e01e      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8005090:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005094:	e01b      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8005096:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800509a:	e018      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800509c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80050a0:	e015      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050a2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80050a6:	e012      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050ac:	e00f      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050b2:	e00c      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050b8:	e009      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050be:	e006      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050c0:	2310      	movs	r3, #16
 80050c2:	e004      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050c4:	2310      	movs	r3, #16
 80050c6:	e002      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050c8:	2310      	movs	r3, #16
 80050ca:	e000      	b.n	80050ce <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80050cc:	2310      	movs	r3, #16
 80050ce:	4a37      	ldr	r2, [pc, #220]	@ (80051ac <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80050d0:	60d3      	str	r3, [r2, #12]
 80050d2:	e14f      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	4b35      	ldr	r3, [pc, #212]	@ (80051b0 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80050dc:	429a      	cmp	r2, r3
 80050de:	f240 8082 	bls.w	80051e6 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d078      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a22      	ldr	r2, [pc, #136]	@ (800517c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d071      	beq.n	80051da <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a21      	ldr	r2, [pc, #132]	@ (8005180 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d06a      	beq.n	80051d6 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d063      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d05b      	beq.n	80051cc <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d053      	beq.n	80051c6 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d04b      	beq.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a19      	ldr	r2, [pc, #100]	@ (8005194 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d043      	beq.n	80051ba <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a18      	ldr	r2, [pc, #96]	@ (8005198 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d03b      	beq.n	80051b4 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a16      	ldr	r2, [pc, #88]	@ (800519c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d012      	beq.n	800516c <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a15      	ldr	r2, [pc, #84]	@ (80051a0 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00a      	beq.n	8005166 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a13      	ldr	r2, [pc, #76]	@ (80051a4 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d102      	bne.n	8005160 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800515a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800515e:	e03f      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8005160:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005164:	e03c      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8005166:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800516a:	e039      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800516c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005170:	e036      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8005172:	bf00      	nop
 8005174:	40026000 	.word	0x40026000
 8005178:	40026010 	.word	0x40026010
 800517c:	40026410 	.word	0x40026410
 8005180:	40026070 	.word	0x40026070
 8005184:	40026470 	.word	0x40026470
 8005188:	40026028 	.word	0x40026028
 800518c:	40026428 	.word	0x40026428
 8005190:	40026088 	.word	0x40026088
 8005194:	40026488 	.word	0x40026488
 8005198:	40026040 	.word	0x40026040
 800519c:	40026440 	.word	0x40026440
 80051a0:	400260a0 	.word	0x400260a0
 80051a4:	400264a0 	.word	0x400264a0
 80051a8:	40026458 	.word	0x40026458
 80051ac:	40026400 	.word	0x40026400
 80051b0:	400260b8 	.word	0x400260b8
 80051b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80051b8:	e012      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80051ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051be:	e00f      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80051c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051c4:	e00c      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80051c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051ca:	e009      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80051cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051d0:	e006      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80051d2:	2310      	movs	r3, #16
 80051d4:	e004      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80051d6:	2310      	movs	r3, #16
 80051d8:	e002      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80051da:	2310      	movs	r3, #16
 80051dc:	e000      	b.n	80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80051de:	2310      	movs	r3, #16
 80051e0:	4a8c      	ldr	r2, [pc, #560]	@ (8005414 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80051e2:	6093      	str	r3, [r2, #8]
 80051e4:	e0c6      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005418 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d960      	bls.n	80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a89      	ldr	r2, [pc, #548]	@ (800541c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d057      	beq.n	80052ac <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a87      	ldr	r2, [pc, #540]	@ (8005420 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d050      	beq.n	80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a86      	ldr	r2, [pc, #536]	@ (8005424 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d049      	beq.n	80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a84      	ldr	r2, [pc, #528]	@ (8005428 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d042      	beq.n	80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a83      	ldr	r2, [pc, #524]	@ (800542c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d03a      	beq.n	800529a <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a81      	ldr	r2, [pc, #516]	@ (8005430 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d032      	beq.n	8005294 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a80      	ldr	r2, [pc, #512]	@ (8005434 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d02a      	beq.n	800528e <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a7e      	ldr	r2, [pc, #504]	@ (8005438 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d022      	beq.n	8005288 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a7d      	ldr	r2, [pc, #500]	@ (800543c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d01a      	beq.n	8005282 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a7b      	ldr	r2, [pc, #492]	@ (8005440 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d012      	beq.n	800527c <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a7a      	ldr	r2, [pc, #488]	@ (8005444 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00a      	beq.n	8005276 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a78      	ldr	r2, [pc, #480]	@ (8005448 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d102      	bne.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800526a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800526e:	e01e      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8005270:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005274:	e01b      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8005276:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800527a:	e018      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800527c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005280:	e015      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8005282:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005286:	e012      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8005288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800528c:	e00f      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800528e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005292:	e00c      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8005294:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005298:	e009      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800529a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800529e:	e006      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80052a0:	2310      	movs	r3, #16
 80052a2:	e004      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80052a4:	2310      	movs	r3, #16
 80052a6:	e002      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80052a8:	2310      	movs	r3, #16
 80052aa:	e000      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80052ac:	2310      	movs	r3, #16
 80052ae:	4a67      	ldr	r2, [pc, #412]	@ (800544c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80052b0:	60d3      	str	r3, [r2, #12]
 80052b2:	e05f      	b.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a58      	ldr	r2, [pc, #352]	@ (800541c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d057      	beq.n	800536e <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a57      	ldr	r2, [pc, #348]	@ (8005420 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d050      	beq.n	800536a <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a55      	ldr	r2, [pc, #340]	@ (8005424 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d049      	beq.n	8005366 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a54      	ldr	r2, [pc, #336]	@ (8005428 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d042      	beq.n	8005362 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a52      	ldr	r2, [pc, #328]	@ (800542c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d03a      	beq.n	800535c <HAL_DMAEx_MultiBufferStart_IT+0x768>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a51      	ldr	r2, [pc, #324]	@ (8005430 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d032      	beq.n	8005356 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005434 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d02a      	beq.n	8005350 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a4e      	ldr	r2, [pc, #312]	@ (8005438 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d022      	beq.n	800534a <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a4c      	ldr	r2, [pc, #304]	@ (800543c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01a      	beq.n	8005344 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a4b      	ldr	r2, [pc, #300]	@ (8005440 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d012      	beq.n	800533e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a49      	ldr	r2, [pc, #292]	@ (8005444 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00a      	beq.n	8005338 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a48      	ldr	r2, [pc, #288]	@ (8005448 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d102      	bne.n	8005332 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 800532c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005330:	e01e      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005332:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005336:	e01b      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005338:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800533c:	e018      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800533e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005342:	e015      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005344:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005348:	e012      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800534a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800534e:	e00f      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005354:	e00c      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800535a:	e009      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800535c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005360:	e006      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005362:	2310      	movs	r3, #16
 8005364:	e004      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8005366:	2310      	movs	r3, #16
 8005368:	e002      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800536a:	2310      	movs	r3, #16
 800536c:	e000      	b.n	8005370 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800536e:	2310      	movs	r3, #16
 8005370:	4a36      	ldr	r2, [pc, #216]	@ (800544c <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8005372:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	4b35      	ldr	r3, [pc, #212]	@ (8005450 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800537c:	429a      	cmp	r2, r3
 800537e:	f240 8082 	bls.w	8005486 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a25      	ldr	r2, [pc, #148]	@ (800541c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d078      	beq.n	800547e <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a23      	ldr	r2, [pc, #140]	@ (8005420 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d071      	beq.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a22      	ldr	r2, [pc, #136]	@ (8005424 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d06a      	beq.n	8005476 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a20      	ldr	r2, [pc, #128]	@ (8005428 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d063      	beq.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1f      	ldr	r2, [pc, #124]	@ (800542c <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d05b      	beq.n	800546c <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d053      	beq.n	8005466 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d04b      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005438 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d043      	beq.n	800545a <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a19      	ldr	r2, [pc, #100]	@ (800543c <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d03b      	beq.n	8005454 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a17      	ldr	r2, [pc, #92]	@ (8005440 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d012      	beq.n	800540c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a16      	ldr	r2, [pc, #88]	@ (8005444 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00a      	beq.n	8005406 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a14      	ldr	r2, [pc, #80]	@ (8005448 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d102      	bne.n	8005400 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 80053fa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80053fe:	e03f      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005404:	e03c      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005406:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800540a:	e039      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800540c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005410:	e036      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005412:	bf00      	nop
 8005414:	40026400 	.word	0x40026400
 8005418:	40026058 	.word	0x40026058
 800541c:	40026010 	.word	0x40026010
 8005420:	40026410 	.word	0x40026410
 8005424:	40026070 	.word	0x40026070
 8005428:	40026470 	.word	0x40026470
 800542c:	40026028 	.word	0x40026028
 8005430:	40026428 	.word	0x40026428
 8005434:	40026088 	.word	0x40026088
 8005438:	40026488 	.word	0x40026488
 800543c:	40026040 	.word	0x40026040
 8005440:	40026440 	.word	0x40026440
 8005444:	400260a0 	.word	0x400260a0
 8005448:	400264a0 	.word	0x400264a0
 800544c:	40026000 	.word	0x40026000
 8005450:	40026458 	.word	0x40026458
 8005454:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005458:	e012      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800545a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800545e:	e00f      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005464:	e00c      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800546a:	e009      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800546c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005470:	e006      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005472:	2308      	movs	r3, #8
 8005474:	e004      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8005476:	2308      	movs	r3, #8
 8005478:	e002      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800547a:	2308      	movs	r3, #8
 800547c:	e000      	b.n	8005480 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800547e:	2308      	movs	r3, #8
 8005480:	4a8c      	ldr	r2, [pc, #560]	@ (80056b4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8005482:	60d3      	str	r3, [r2, #12]
 8005484:	e14e      	b.n	8005724 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	4b8a      	ldr	r3, [pc, #552]	@ (80056b8 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800548e:	429a      	cmp	r2, r3
 8005490:	d960      	bls.n	8005554 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a89      	ldr	r2, [pc, #548]	@ (80056bc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d057      	beq.n	800554c <HAL_DMAEx_MultiBufferStart_IT+0x958>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a87      	ldr	r2, [pc, #540]	@ (80056c0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d050      	beq.n	8005548 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a86      	ldr	r2, [pc, #536]	@ (80056c4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d049      	beq.n	8005544 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a84      	ldr	r2, [pc, #528]	@ (80056c8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d042      	beq.n	8005540 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a83      	ldr	r2, [pc, #524]	@ (80056cc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03a      	beq.n	800553a <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a81      	ldr	r2, [pc, #516]	@ (80056d0 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d032      	beq.n	8005534 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a80      	ldr	r2, [pc, #512]	@ (80056d4 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d02a      	beq.n	800552e <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a7e      	ldr	r2, [pc, #504]	@ (80056d8 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d022      	beq.n	8005528 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a7d      	ldr	r2, [pc, #500]	@ (80056dc <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d01a      	beq.n	8005522 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a7b      	ldr	r2, [pc, #492]	@ (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d012      	beq.n	800551c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a7a      	ldr	r2, [pc, #488]	@ (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00a      	beq.n	8005516 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a78      	ldr	r2, [pc, #480]	@ (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d102      	bne.n	8005510 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800550a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800550e:	e01e      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005514:	e01b      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005516:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800551a:	e018      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800551c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005520:	e015      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005522:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005526:	e012      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800552c:	e00f      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800552e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005532:	e00c      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005534:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005538:	e009      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800553a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800553e:	e006      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005540:	2308      	movs	r3, #8
 8005542:	e004      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005544:	2308      	movs	r3, #8
 8005546:	e002      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8005548:	2308      	movs	r3, #8
 800554a:	e000      	b.n	800554e <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800554c:	2308      	movs	r3, #8
 800554e:	4a59      	ldr	r2, [pc, #356]	@ (80056b4 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8005550:	6093      	str	r3, [r2, #8]
 8005552:	e0e7      	b.n	8005724 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	4b64      	ldr	r3, [pc, #400]	@ (80056ec <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800555c:	429a      	cmp	r2, r3
 800555e:	d960      	bls.n	8005622 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a55      	ldr	r2, [pc, #340]	@ (80056bc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d057      	beq.n	800561a <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a54      	ldr	r2, [pc, #336]	@ (80056c0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d050      	beq.n	8005616 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a52      	ldr	r2, [pc, #328]	@ (80056c4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d049      	beq.n	8005612 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a51      	ldr	r2, [pc, #324]	@ (80056c8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d042      	beq.n	800560e <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a4f      	ldr	r2, [pc, #316]	@ (80056cc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d03a      	beq.n	8005608 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a4e      	ldr	r2, [pc, #312]	@ (80056d0 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d032      	beq.n	8005602 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a4c      	ldr	r2, [pc, #304]	@ (80056d4 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d02a      	beq.n	80055fc <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a4b      	ldr	r2, [pc, #300]	@ (80056d8 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d022      	beq.n	80055f6 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a49      	ldr	r2, [pc, #292]	@ (80056dc <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01a      	beq.n	80055f0 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a48      	ldr	r2, [pc, #288]	@ (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d012      	beq.n	80055ea <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a46      	ldr	r2, [pc, #280]	@ (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00a      	beq.n	80055e4 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a45      	ldr	r2, [pc, #276]	@ (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d102      	bne.n	80055de <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80055d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80055dc:	e01e      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80055de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055e2:	e01b      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80055e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80055e8:	e018      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80055ea:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80055ee:	e015      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80055f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80055f4:	e012      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80055f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055fa:	e00f      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80055fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005600:	e00c      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005602:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005606:	e009      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800560c:	e006      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800560e:	2308      	movs	r3, #8
 8005610:	e004      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005612:	2308      	movs	r3, #8
 8005614:	e002      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8005616:	2308      	movs	r3, #8
 8005618:	e000      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800561a:	2308      	movs	r3, #8
 800561c:	4a34      	ldr	r2, [pc, #208]	@ (80056f0 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800561e:	60d3      	str	r3, [r2, #12]
 8005620:	e080      	b.n	8005724 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a25      	ldr	r2, [pc, #148]	@ (80056bc <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d078      	beq.n	800571e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a23      	ldr	r2, [pc, #140]	@ (80056c0 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d071      	beq.n	800571a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a22      	ldr	r2, [pc, #136]	@ (80056c4 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d06a      	beq.n	8005716 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a20      	ldr	r2, [pc, #128]	@ (80056c8 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d063      	beq.n	8005712 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1f      	ldr	r2, [pc, #124]	@ (80056cc <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d05b      	beq.n	800570c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1d      	ldr	r2, [pc, #116]	@ (80056d0 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d053      	beq.n	8005706 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1c      	ldr	r2, [pc, #112]	@ (80056d4 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d04b      	beq.n	8005700 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1a      	ldr	r2, [pc, #104]	@ (80056d8 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d043      	beq.n	80056fa <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d03b      	beq.n	80056f4 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a17      	ldr	r2, [pc, #92]	@ (80056e0 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d012      	beq.n	80056ac <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a16      	ldr	r2, [pc, #88]	@ (80056e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00a      	beq.n	80056a6 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d102      	bne.n	80056a0 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800569a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800569e:	e03f      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80056a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056a4:	e03c      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80056a6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80056aa:	e039      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80056ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80056b0:	e036      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80056b2:	bf00      	nop
 80056b4:	40026400 	.word	0x40026400
 80056b8:	400260b8 	.word	0x400260b8
 80056bc:	40026010 	.word	0x40026010
 80056c0:	40026410 	.word	0x40026410
 80056c4:	40026070 	.word	0x40026070
 80056c8:	40026470 	.word	0x40026470
 80056cc:	40026028 	.word	0x40026028
 80056d0:	40026428 	.word	0x40026428
 80056d4:	40026088 	.word	0x40026088
 80056d8:	40026488 	.word	0x40026488
 80056dc:	40026040 	.word	0x40026040
 80056e0:	40026440 	.word	0x40026440
 80056e4:	400260a0 	.word	0x400260a0
 80056e8:	400264a0 	.word	0x400264a0
 80056ec:	40026058 	.word	0x40026058
 80056f0:	40026000 	.word	0x40026000
 80056f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80056f8:	e012      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80056fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056fe:	e00f      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8005700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005704:	e00c      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8005706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800570a:	e009      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800570c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005710:	e006      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8005712:	2308      	movs	r3, #8
 8005714:	e004      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8005716:	2308      	movs	r3, #8
 8005718:	e002      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800571a:	2308      	movs	r3, #8
 800571c:	e000      	b.n	8005720 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800571e:	2308      	movs	r3, #8
 8005720:	4a8a      	ldr	r2, [pc, #552]	@ (800594c <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8005722:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	4b89      	ldr	r3, [pc, #548]	@ (8005950 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 800572c:	429a      	cmp	r2, r3
 800572e:	d960      	bls.n	80057f2 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a87      	ldr	r2, [pc, #540]	@ (8005954 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d057      	beq.n	80057ea <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a86      	ldr	r2, [pc, #536]	@ (8005958 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d050      	beq.n	80057e6 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a84      	ldr	r2, [pc, #528]	@ (800595c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d049      	beq.n	80057e2 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a83      	ldr	r2, [pc, #524]	@ (8005960 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d042      	beq.n	80057de <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a81      	ldr	r2, [pc, #516]	@ (8005964 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03a      	beq.n	80057d8 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a80      	ldr	r2, [pc, #512]	@ (8005968 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d032      	beq.n	80057d2 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a7e      	ldr	r2, [pc, #504]	@ (800596c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02a      	beq.n	80057cc <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a7d      	ldr	r2, [pc, #500]	@ (8005970 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d022      	beq.n	80057c6 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a7b      	ldr	r2, [pc, #492]	@ (8005974 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01a      	beq.n	80057c0 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a7a      	ldr	r2, [pc, #488]	@ (8005978 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d012      	beq.n	80057ba <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a78      	ldr	r2, [pc, #480]	@ (800597c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00a      	beq.n	80057b4 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a77      	ldr	r2, [pc, #476]	@ (8005980 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d102      	bne.n	80057ae <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80057a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80057ac:	e01e      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057b2:	e01b      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80057b8:	e018      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057ba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80057be:	e015      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80057c4:	e012      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057ca:	e00f      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057d0:	e00c      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057d6:	e009      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057dc:	e006      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057de:	2304      	movs	r3, #4
 80057e0:	e004      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057e2:	2304      	movs	r3, #4
 80057e4:	e002      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e000      	b.n	80057ec <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80057ea:	2304      	movs	r3, #4
 80057ec:	4a65      	ldr	r2, [pc, #404]	@ (8005984 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80057ee:	60d3      	str	r3, [r2, #12]
 80057f0:	e150      	b.n	8005a94 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	4b63      	ldr	r3, [pc, #396]	@ (8005988 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d960      	bls.n	80058c0 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a54      	ldr	r2, [pc, #336]	@ (8005954 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d057      	beq.n	80058b8 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a52      	ldr	r2, [pc, #328]	@ (8005958 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d050      	beq.n	80058b4 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a51      	ldr	r2, [pc, #324]	@ (800595c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d049      	beq.n	80058b0 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a4f      	ldr	r2, [pc, #316]	@ (8005960 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d042      	beq.n	80058ac <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a4e      	ldr	r2, [pc, #312]	@ (8005964 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d03a      	beq.n	80058a6 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a4c      	ldr	r2, [pc, #304]	@ (8005968 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d032      	beq.n	80058a0 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a4b      	ldr	r2, [pc, #300]	@ (800596c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d02a      	beq.n	800589a <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a49      	ldr	r2, [pc, #292]	@ (8005970 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a48      	ldr	r2, [pc, #288]	@ (8005974 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d01a      	beq.n	800588e <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a46      	ldr	r2, [pc, #280]	@ (8005978 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d012      	beq.n	8005888 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a45      	ldr	r2, [pc, #276]	@ (800597c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00a      	beq.n	8005882 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a43      	ldr	r2, [pc, #268]	@ (8005980 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d102      	bne.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8005876:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800587a:	e01e      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800587c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005880:	e01b      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005882:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005886:	e018      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005888:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800588c:	e015      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800588e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005892:	e012      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8005894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005898:	e00f      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800589a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800589e:	e00c      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80058a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058a4:	e009      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80058a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058aa:	e006      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80058ac:	2304      	movs	r3, #4
 80058ae:	e004      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80058b0:	2304      	movs	r3, #4
 80058b2:	e002      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80058b4:	2304      	movs	r3, #4
 80058b6:	e000      	b.n	80058ba <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80058b8:	2304      	movs	r3, #4
 80058ba:	4a32      	ldr	r2, [pc, #200]	@ (8005984 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80058bc:	6093      	str	r3, [r2, #8]
 80058be:	e0e9      	b.n	8005a94 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b31      	ldr	r3, [pc, #196]	@ (800598c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80058c8:	429a      	cmp	r2, r3
 80058ca:	f240 8083 	bls.w	80059d4 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a20      	ldr	r2, [pc, #128]	@ (8005954 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d079      	beq.n	80059cc <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d072      	beq.n	80059c8 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1d      	ldr	r2, [pc, #116]	@ (800595c <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d06b      	beq.n	80059c4 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005960 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d064      	beq.n	80059c0 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005964 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d05c      	beq.n	80059ba <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a18      	ldr	r2, [pc, #96]	@ (8005968 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d054      	beq.n	80059b4 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a17      	ldr	r2, [pc, #92]	@ (800596c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d04c      	beq.n	80059ae <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d044      	beq.n	80059a8 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a14      	ldr	r2, [pc, #80]	@ (8005974 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d03c      	beq.n	80059a2 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a12      	ldr	r2, [pc, #72]	@ (8005978 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d034      	beq.n	800599c <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a11      	ldr	r2, [pc, #68]	@ (800597c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d02c      	beq.n	8005996 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a0f      	ldr	r2, [pc, #60]	@ (8005980 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d124      	bne.n	8005990 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8005946:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800594a:	e040      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800594c:	40026000 	.word	0x40026000
 8005950:	40026458 	.word	0x40026458
 8005954:	40026010 	.word	0x40026010
 8005958:	40026410 	.word	0x40026410
 800595c:	40026070 	.word	0x40026070
 8005960:	40026470 	.word	0x40026470
 8005964:	40026028 	.word	0x40026028
 8005968:	40026428 	.word	0x40026428
 800596c:	40026088 	.word	0x40026088
 8005970:	40026488 	.word	0x40026488
 8005974:	40026040 	.word	0x40026040
 8005978:	40026440 	.word	0x40026440
 800597c:	400260a0 	.word	0x400260a0
 8005980:	400264a0 	.word	0x400264a0
 8005984:	40026400 	.word	0x40026400
 8005988:	400260b8 	.word	0x400260b8
 800598c:	40026058 	.word	0x40026058
 8005990:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005994:	e01b      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8005996:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800599a:	e018      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800599c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80059a0:	e015      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059a2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80059a6:	e012      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059ac:	e00f      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059b2:	e00c      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059b8:	e009      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059be:	e006      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059c0:	2304      	movs	r3, #4
 80059c2:	e004      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059c4:	2304      	movs	r3, #4
 80059c6:	e002      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059c8:	2304      	movs	r3, #4
 80059ca:	e000      	b.n	80059ce <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80059cc:	2304      	movs	r3, #4
 80059ce:	4a8b      	ldr	r2, [pc, #556]	@ (8005bfc <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80059d0:	60d3      	str	r3, [r2, #12]
 80059d2:	e05f      	b.n	8005a94 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a89      	ldr	r2, [pc, #548]	@ (8005c00 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d057      	beq.n	8005a8e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a88      	ldr	r2, [pc, #544]	@ (8005c04 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d050      	beq.n	8005a8a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a86      	ldr	r2, [pc, #536]	@ (8005c08 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d049      	beq.n	8005a86 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a85      	ldr	r2, [pc, #532]	@ (8005c0c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d042      	beq.n	8005a82 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a83      	ldr	r2, [pc, #524]	@ (8005c10 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d03a      	beq.n	8005a7c <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a82      	ldr	r2, [pc, #520]	@ (8005c14 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d032      	beq.n	8005a76 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a80      	ldr	r2, [pc, #512]	@ (8005c18 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02a      	beq.n	8005a70 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a7f      	ldr	r2, [pc, #508]	@ (8005c1c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d022      	beq.n	8005a6a <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a7d      	ldr	r2, [pc, #500]	@ (8005c20 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01a      	beq.n	8005a64 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a7c      	ldr	r2, [pc, #496]	@ (8005c24 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d012      	beq.n	8005a5e <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a7a      	ldr	r2, [pc, #488]	@ (8005c28 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00a      	beq.n	8005a58 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a79      	ldr	r2, [pc, #484]	@ (8005c2c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d102      	bne.n	8005a52 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8005a4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005a50:	e01e      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a56:	e01b      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005a5c:	e018      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a5e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005a62:	e015      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005a68:	e012      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a6e:	e00f      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a74:	e00c      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a7a:	e009      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a80:	e006      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a82:	2304      	movs	r3, #4
 8005a84:	e004      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a86:	2304      	movs	r3, #4
 8005a88:	e002      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	e000      	b.n	8005a90 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8005a8e:	2304      	movs	r3, #4
 8005a90:	4a5a      	ldr	r2, [pc, #360]	@ (8005bfc <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8005a92:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4b65      	ldr	r3, [pc, #404]	@ (8005c30 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d95c      	bls.n	8005b5a <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a56      	ldr	r2, [pc, #344]	@ (8005c00 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d053      	beq.n	8005b52 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a55      	ldr	r2, [pc, #340]	@ (8005c04 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d04c      	beq.n	8005b4e <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a53      	ldr	r2, [pc, #332]	@ (8005c08 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d045      	beq.n	8005b4a <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a52      	ldr	r2, [pc, #328]	@ (8005c0c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d03e      	beq.n	8005b46 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a50      	ldr	r2, [pc, #320]	@ (8005c10 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d037      	beq.n	8005b42 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a4f      	ldr	r2, [pc, #316]	@ (8005c14 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d030      	beq.n	8005b3e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8005c18 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d029      	beq.n	8005b3a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a4c      	ldr	r2, [pc, #304]	@ (8005c1c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a4a      	ldr	r2, [pc, #296]	@ (8005c20 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01a      	beq.n	8005b30 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a49      	ldr	r2, [pc, #292]	@ (8005c24 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d012      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a47      	ldr	r2, [pc, #284]	@ (8005c28 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00a      	beq.n	8005b24 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a46      	ldr	r2, [pc, #280]	@ (8005c2c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d102      	bne.n	8005b1e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8005b18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b1c:	e01a      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b22:	e017      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b28:	e014      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b2e:	e011      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b34:	e00e      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b36:	2340      	movs	r3, #64	@ 0x40
 8005b38:	e00c      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b3a:	2340      	movs	r3, #64	@ 0x40
 8005b3c:	e00a      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b3e:	2340      	movs	r3, #64	@ 0x40
 8005b40:	e008      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b42:	2340      	movs	r3, #64	@ 0x40
 8005b44:	e006      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e004      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e002      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4a37      	ldr	r2, [pc, #220]	@ (8005c34 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8005b56:	60d3      	str	r3, [r2, #12]
 8005b58:	e141      	b.n	8005dde <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4b35      	ldr	r3, [pc, #212]	@ (8005c38 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d97c      	bls.n	8005c60 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a25      	ldr	r2, [pc, #148]	@ (8005c00 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d073      	beq.n	8005c58 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a23      	ldr	r2, [pc, #140]	@ (8005c04 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d06c      	beq.n	8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a22      	ldr	r2, [pc, #136]	@ (8005c08 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d065      	beq.n	8005c50 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a20      	ldr	r2, [pc, #128]	@ (8005c0c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d05e      	beq.n	8005c4c <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1f      	ldr	r2, [pc, #124]	@ (8005c10 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d057      	beq.n	8005c48 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d050      	beq.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d049      	beq.n	8005c40 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c1c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d042      	beq.n	8005c3c <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a19      	ldr	r2, [pc, #100]	@ (8005c20 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d01a      	beq.n	8005bf6 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a17      	ldr	r2, [pc, #92]	@ (8005c24 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d012      	beq.n	8005bf0 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a16      	ldr	r2, [pc, #88]	@ (8005c28 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00a      	beq.n	8005bea <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a14      	ldr	r2, [pc, #80]	@ (8005c2c <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d102      	bne.n	8005be4 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8005bde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005be2:	e03a      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005be4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005be8:	e037      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005bea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005bee:	e034      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005bf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005bf4:	e031      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005bf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005bfa:	e02e      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005bfc:	40026000 	.word	0x40026000
 8005c00:	40026010 	.word	0x40026010
 8005c04:	40026410 	.word	0x40026410
 8005c08:	40026070 	.word	0x40026070
 8005c0c:	40026470 	.word	0x40026470
 8005c10:	40026028 	.word	0x40026028
 8005c14:	40026428 	.word	0x40026428
 8005c18:	40026088 	.word	0x40026088
 8005c1c:	40026488 	.word	0x40026488
 8005c20:	40026040 	.word	0x40026040
 8005c24:	40026440 	.word	0x40026440
 8005c28:	400260a0 	.word	0x400260a0
 8005c2c:	400264a0 	.word	0x400264a0
 8005c30:	40026458 	.word	0x40026458
 8005c34:	40026400 	.word	0x40026400
 8005c38:	400260b8 	.word	0x400260b8
 8005c3c:	2340      	movs	r3, #64	@ 0x40
 8005c3e:	e00c      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005c40:	2340      	movs	r3, #64	@ 0x40
 8005c42:	e00a      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005c44:	2340      	movs	r3, #64	@ 0x40
 8005c46:	e008      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005c48:	2340      	movs	r3, #64	@ 0x40
 8005c4a:	e006      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e004      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e002      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	4a7b      	ldr	r2, [pc, #492]	@ (8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005c5c:	6093      	str	r3, [r2, #8]
 8005c5e:	e0be      	b.n	8005dde <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	4b79      	ldr	r3, [pc, #484]	@ (8005e4c <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d95c      	bls.n	8005d26 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a77      	ldr	r2, [pc, #476]	@ (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d053      	beq.n	8005d1e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a76      	ldr	r2, [pc, #472]	@ (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d04c      	beq.n	8005d1a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a74      	ldr	r2, [pc, #464]	@ (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d045      	beq.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a73      	ldr	r2, [pc, #460]	@ (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d03e      	beq.n	8005d12 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a71      	ldr	r2, [pc, #452]	@ (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d037      	beq.n	8005d0e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a70      	ldr	r2, [pc, #448]	@ (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d030      	beq.n	8005d0a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a6e      	ldr	r2, [pc, #440]	@ (8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d029      	beq.n	8005d06 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a6d      	ldr	r2, [pc, #436]	@ (8005e6c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d022      	beq.n	8005d02 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8005e70 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01a      	beq.n	8005cfc <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a6a      	ldr	r2, [pc, #424]	@ (8005e74 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d012      	beq.n	8005cf6 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a68      	ldr	r2, [pc, #416]	@ (8005e78 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a67      	ldr	r2, [pc, #412]	@ (8005e7c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d102      	bne.n	8005cea <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8005ce4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ce8:	e01a      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005cea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005cee:	e017      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005cf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005cf4:	e014      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005cf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005cfa:	e011      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005cfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d00:	e00e      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005d02:	2340      	movs	r3, #64	@ 0x40
 8005d04:	e00c      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005d06:	2340      	movs	r3, #64	@ 0x40
 8005d08:	e00a      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005d0a:	2340      	movs	r3, #64	@ 0x40
 8005d0c:	e008      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005d0e:	2340      	movs	r3, #64	@ 0x40
 8005d10:	e006      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e004      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e002      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4a57      	ldr	r2, [pc, #348]	@ (8005e80 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8005d22:	60d3      	str	r3, [r2, #12]
 8005d24:	e05b      	b.n	8005dde <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a49      	ldr	r2, [pc, #292]	@ (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d053      	beq.n	8005dd8 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a47      	ldr	r2, [pc, #284]	@ (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d04c      	beq.n	8005dd4 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a46      	ldr	r2, [pc, #280]	@ (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d045      	beq.n	8005dd0 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a44      	ldr	r2, [pc, #272]	@ (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d03e      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a43      	ldr	r2, [pc, #268]	@ (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d037      	beq.n	8005dc8 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a41      	ldr	r2, [pc, #260]	@ (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d030      	beq.n	8005dc4 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a40      	ldr	r2, [pc, #256]	@ (8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d029      	beq.n	8005dc0 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a3e      	ldr	r2, [pc, #248]	@ (8005e6c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d022      	beq.n	8005dbc <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e70 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d01a      	beq.n	8005db6 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a3b      	ldr	r2, [pc, #236]	@ (8005e74 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d012      	beq.n	8005db0 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e78 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00a      	beq.n	8005daa <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a38      	ldr	r2, [pc, #224]	@ (8005e7c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d102      	bne.n	8005da4 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8005d9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005da2:	e01a      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005da4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005da8:	e017      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005daa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005dae:	e014      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005db0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005db4:	e011      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005db6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005dba:	e00e      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005dbc:	2340      	movs	r3, #64	@ 0x40
 8005dbe:	e00c      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005dc0:	2340      	movs	r3, #64	@ 0x40
 8005dc2:	e00a      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005dc4:	2340      	movs	r3, #64	@ 0x40
 8005dc6:	e008      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005dc8:	2340      	movs	r3, #64	@ 0x40
 8005dca:	e006      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e004      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e002      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4a29      	ldr	r2, [pc, #164]	@ (8005e80 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8005ddc:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0216 	orr.w	r2, r2, #22
 8005dec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005dfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d103      	bne.n	8005e0e <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0208 	orr.w	r2, r2, #8
 8005e1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e005      	b.n	8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40026400 	.word	0x40026400
 8005e4c:	40026058 	.word	0x40026058
 8005e50:	40026010 	.word	0x40026010
 8005e54:	40026410 	.word	0x40026410
 8005e58:	40026070 	.word	0x40026070
 8005e5c:	40026470 	.word	0x40026470
 8005e60:	40026028 	.word	0x40026028
 8005e64:	40026428 	.word	0x40026428
 8005e68:	40026088 	.word	0x40026088
 8005e6c:	40026488 	.word	0x40026488
 8005e70:	40026040 	.word	0x40026040
 8005e74:	40026440 	.word	0x40026440
 8005e78:	400260a0 	.word	0x400260a0
 8005e7c:	400264a0 	.word	0x400264a0
 8005e80:	40026000 	.word	0x40026000

08005e84 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	60da      	str	r2, [r3, #12]
 8005ea0:	e003      	b.n	8005eaa <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b40      	cmp	r3, #64	@ 0x40
 8005ed4:	d108      	bne.n	8005ee8 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ee6:	e007      	b.n	8005ef8 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b089      	sub	sp, #36	@ 0x24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
 8005f1e:	e165      	b.n	80061ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f20:	2201      	movs	r2, #1
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4013      	ands	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	f040 8154 	bne.w	80061e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d005      	beq.n	8005f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d130      	bne.n	8005fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	2203      	movs	r2, #3
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 0201 	and.w	r2, r3, #1
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d017      	beq.n	8005ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	2203      	movs	r2, #3
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d123      	bne.n	8006048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	08da      	lsrs	r2, r3, #3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3208      	adds	r2, #8
 8006008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	220f      	movs	r2, #15
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4013      	ands	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4313      	orrs	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	08da      	lsrs	r2, r3, #3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3208      	adds	r2, #8
 8006042:	69b9      	ldr	r1, [r7, #24]
 8006044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	2203      	movs	r2, #3
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	43db      	mvns	r3, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4013      	ands	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f003 0203 	and.w	r2, r3, #3
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4313      	orrs	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80ae 	beq.w	80061e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	4b5d      	ldr	r3, [pc, #372]	@ (8006204 <HAL_GPIO_Init+0x300>)
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	4a5c      	ldr	r2, [pc, #368]	@ (8006204 <HAL_GPIO_Init+0x300>)
 8006094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006098:	6453      	str	r3, [r2, #68]	@ 0x44
 800609a:	4b5a      	ldr	r3, [pc, #360]	@ (8006204 <HAL_GPIO_Init+0x300>)
 800609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060a6:	4a58      	ldr	r2, [pc, #352]	@ (8006208 <HAL_GPIO_Init+0x304>)
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	089b      	lsrs	r3, r3, #2
 80060ac:	3302      	adds	r3, #2
 80060ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	220f      	movs	r2, #15
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43db      	mvns	r3, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4013      	ands	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a4f      	ldr	r2, [pc, #316]	@ (800620c <HAL_GPIO_Init+0x308>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d025      	beq.n	800611e <HAL_GPIO_Init+0x21a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a4e      	ldr	r2, [pc, #312]	@ (8006210 <HAL_GPIO_Init+0x30c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01f      	beq.n	800611a <HAL_GPIO_Init+0x216>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a4d      	ldr	r2, [pc, #308]	@ (8006214 <HAL_GPIO_Init+0x310>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d019      	beq.n	8006116 <HAL_GPIO_Init+0x212>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a4c      	ldr	r2, [pc, #304]	@ (8006218 <HAL_GPIO_Init+0x314>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d013      	beq.n	8006112 <HAL_GPIO_Init+0x20e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a4b      	ldr	r2, [pc, #300]	@ (800621c <HAL_GPIO_Init+0x318>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00d      	beq.n	800610e <HAL_GPIO_Init+0x20a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a4a      	ldr	r2, [pc, #296]	@ (8006220 <HAL_GPIO_Init+0x31c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <HAL_GPIO_Init+0x206>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a49      	ldr	r2, [pc, #292]	@ (8006224 <HAL_GPIO_Init+0x320>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d101      	bne.n	8006106 <HAL_GPIO_Init+0x202>
 8006102:	2306      	movs	r3, #6
 8006104:	e00c      	b.n	8006120 <HAL_GPIO_Init+0x21c>
 8006106:	2307      	movs	r3, #7
 8006108:	e00a      	b.n	8006120 <HAL_GPIO_Init+0x21c>
 800610a:	2305      	movs	r3, #5
 800610c:	e008      	b.n	8006120 <HAL_GPIO_Init+0x21c>
 800610e:	2304      	movs	r3, #4
 8006110:	e006      	b.n	8006120 <HAL_GPIO_Init+0x21c>
 8006112:	2303      	movs	r3, #3
 8006114:	e004      	b.n	8006120 <HAL_GPIO_Init+0x21c>
 8006116:	2302      	movs	r3, #2
 8006118:	e002      	b.n	8006120 <HAL_GPIO_Init+0x21c>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <HAL_GPIO_Init+0x21c>
 800611e:	2300      	movs	r3, #0
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	f002 0203 	and.w	r2, r2, #3
 8006126:	0092      	lsls	r2, r2, #2
 8006128:	4093      	lsls	r3, r2
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4313      	orrs	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006130:	4935      	ldr	r1, [pc, #212]	@ (8006208 <HAL_GPIO_Init+0x304>)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	089b      	lsrs	r3, r3, #2
 8006136:	3302      	adds	r3, #2
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800613e:	4b3a      	ldr	r3, [pc, #232]	@ (8006228 <HAL_GPIO_Init+0x324>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006162:	4a31      	ldr	r2, [pc, #196]	@ (8006228 <HAL_GPIO_Init+0x324>)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006168:	4b2f      	ldr	r3, [pc, #188]	@ (8006228 <HAL_GPIO_Init+0x324>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	43db      	mvns	r3, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4013      	ands	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800618c:	4a26      	ldr	r2, [pc, #152]	@ (8006228 <HAL_GPIO_Init+0x324>)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006192:	4b25      	ldr	r3, [pc, #148]	@ (8006228 <HAL_GPIO_Init+0x324>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	43db      	mvns	r3, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4013      	ands	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <HAL_GPIO_Init+0x324>)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006228 <HAL_GPIO_Init+0x324>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	43db      	mvns	r3, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4013      	ands	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061e0:	4a11      	ldr	r2, [pc, #68]	@ (8006228 <HAL_GPIO_Init+0x324>)
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	3301      	adds	r3, #1
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	2b0f      	cmp	r3, #15
 80061f0:	f67f ae96 	bls.w	8005f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	3724      	adds	r7, #36	@ 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40023800 	.word	0x40023800
 8006208:	40013800 	.word	0x40013800
 800620c:	40020000 	.word	0x40020000
 8006210:	40020400 	.word	0x40020400
 8006214:	40020800 	.word	0x40020800
 8006218:	40020c00 	.word	0x40020c00
 800621c:	40021000 	.word	0x40021000
 8006220:	40021400 	.word	0x40021400
 8006224:	40021800 	.word	0x40021800
 8006228:	40013c00 	.word	0x40013c00

0800622c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	807b      	strh	r3, [r7, #2]
 8006238:	4613      	mov	r3, r2
 800623a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800623c:	787b      	ldrb	r3, [r7, #1]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006242:	887a      	ldrh	r2, [r7, #2]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006248:	e003      	b.n	8006252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800624a:	887b      	ldrh	r3, [r7, #2]
 800624c:	041a      	lsls	r2, r3, #16
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	619a      	str	r2, [r3, #24]
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006270:	887a      	ldrh	r2, [r7, #2]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4013      	ands	r3, r2
 8006276:	041a      	lsls	r2, r3, #16
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	43d9      	mvns	r1, r3
 800627c:	887b      	ldrh	r3, [r7, #2]
 800627e:	400b      	ands	r3, r1
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	619a      	str	r2, [r3, #24]
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800629e:	4b08      	ldr	r3, [pc, #32]	@ (80062c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d006      	beq.n	80062b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062aa:	4a05      	ldr	r2, [pc, #20]	@ (80062c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f806 	bl	80062c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40013c00 	.word	0x40013c00

080062c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e12b      	b.n	8006546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fc fd18 	bl	8002d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	@ 0x24
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800632e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800633e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006340:	f001 fd62 	bl	8007e08 <HAL_RCC_GetPCLK1Freq>
 8006344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4a81      	ldr	r2, [pc, #516]	@ (8006550 <HAL_I2C_Init+0x274>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d807      	bhi.n	8006360 <HAL_I2C_Init+0x84>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a80      	ldr	r2, [pc, #512]	@ (8006554 <HAL_I2C_Init+0x278>)
 8006354:	4293      	cmp	r3, r2
 8006356:	bf94      	ite	ls
 8006358:	2301      	movls	r3, #1
 800635a:	2300      	movhi	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	e006      	b.n	800636e <HAL_I2C_Init+0x92>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a7d      	ldr	r2, [pc, #500]	@ (8006558 <HAL_I2C_Init+0x27c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	bf94      	ite	ls
 8006368:	2301      	movls	r3, #1
 800636a:	2300      	movhi	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e0e7      	b.n	8006546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a78      	ldr	r2, [pc, #480]	@ (800655c <HAL_I2C_Init+0x280>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	0c9b      	lsrs	r3, r3, #18
 8006380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a6a      	ldr	r2, [pc, #424]	@ (8006550 <HAL_I2C_Init+0x274>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d802      	bhi.n	80063b0 <HAL_I2C_Init+0xd4>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	3301      	adds	r3, #1
 80063ae:	e009      	b.n	80063c4 <HAL_I2C_Init+0xe8>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
 80063ba:	4a69      	ldr	r2, [pc, #420]	@ (8006560 <HAL_I2C_Init+0x284>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	099b      	lsrs	r3, r3, #6
 80063c2:	3301      	adds	r3, #1
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80063d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	495c      	ldr	r1, [pc, #368]	@ (8006550 <HAL_I2C_Init+0x274>)
 80063e0:	428b      	cmp	r3, r1
 80063e2:	d819      	bhi.n	8006418 <HAL_I2C_Init+0x13c>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	1e59      	subs	r1, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80063f8:	400b      	ands	r3, r1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_I2C_Init+0x138>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1e59      	subs	r1, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	fbb1 f3f3 	udiv	r3, r1, r3
 800640c:	3301      	adds	r3, #1
 800640e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006412:	e051      	b.n	80064b8 <HAL_I2C_Init+0x1dc>
 8006414:	2304      	movs	r3, #4
 8006416:	e04f      	b.n	80064b8 <HAL_I2C_Init+0x1dc>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d111      	bne.n	8006444 <HAL_I2C_Init+0x168>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1e58      	subs	r0, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6859      	ldr	r1, [r3, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	440b      	add	r3, r1
 800642e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006432:	3301      	adds	r3, #1
 8006434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006438:	2b00      	cmp	r3, #0
 800643a:	bf0c      	ite	eq
 800643c:	2301      	moveq	r3, #1
 800643e:	2300      	movne	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e012      	b.n	800646a <HAL_I2C_Init+0x18e>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	1e58      	subs	r0, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6859      	ldr	r1, [r3, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	0099      	lsls	r1, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	fbb0 f3f3 	udiv	r3, r0, r3
 800645a:	3301      	adds	r3, #1
 800645c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_I2C_Init+0x196>
 800646e:	2301      	movs	r3, #1
 8006470:	e022      	b.n	80064b8 <HAL_I2C_Init+0x1dc>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10e      	bne.n	8006498 <HAL_I2C_Init+0x1bc>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1e58      	subs	r0, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6859      	ldr	r1, [r3, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	440b      	add	r3, r1
 8006488:	fbb0 f3f3 	udiv	r3, r0, r3
 800648c:	3301      	adds	r3, #1
 800648e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006496:	e00f      	b.n	80064b8 <HAL_I2C_Init+0x1dc>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	1e58      	subs	r0, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6859      	ldr	r1, [r3, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	0099      	lsls	r1, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ae:	3301      	adds	r3, #1
 80064b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	6809      	ldr	r1, [r1, #0]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80064e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6911      	ldr	r1, [r2, #16]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	68d2      	ldr	r2, [r2, #12]
 80064f2:	4311      	orrs	r1, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695a      	ldr	r2, [r3, #20]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	000186a0 	.word	0x000186a0
 8006554:	001e847f 	.word	0x001e847f
 8006558:	003d08ff 	.word	0x003d08ff
 800655c:	431bde83 	.word	0x431bde83
 8006560:	10624dd3 	.word	0x10624dd3

08006564 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	461a      	mov	r2, r3
 8006570:	460b      	mov	r3, r1
 8006572:	817b      	strh	r3, [r7, #10]
 8006574:	4613      	mov	r3, r2
 8006576:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006578:	f7fc ff1a 	bl	80033b0 <HAL_GetTick>
 800657c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b20      	cmp	r3, #32
 8006588:	f040 80e0 	bne.w	800674c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	2319      	movs	r3, #25
 8006592:	2201      	movs	r2, #1
 8006594:	4970      	ldr	r1, [pc, #448]	@ (8006758 <HAL_I2C_Master_Transmit+0x1f4>)
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f001 f90e 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0d3      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_I2C_Master_Transmit+0x50>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e0cc      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d007      	beq.n	80065da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2221      	movs	r2, #33	@ 0x21
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2210      	movs	r2, #16
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	893a      	ldrh	r2, [r7, #8]
 800660a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a50      	ldr	r2, [pc, #320]	@ (800675c <HAL_I2C_Master_Transmit+0x1f8>)
 800661a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800661c:	8979      	ldrh	r1, [r7, #10]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fdfa 	bl	800721c <I2C_MasterRequestWrite>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e08d      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006648:	e066      	b.n	8006718 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	6a39      	ldr	r1, [r7, #32]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f001 f9cc 	bl	80079ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00d      	beq.n	8006676 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	2b04      	cmp	r3, #4
 8006660:	d107      	bne.n	8006672 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006670:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e06b      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	781a      	ldrb	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d11b      	bne.n	80066ec <HAL_I2C_Master_Transmit+0x188>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	6a39      	ldr	r1, [r7, #32]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f001 f9c3 	bl	8007a7c <I2C_WaitOnBTFFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00d      	beq.n	8006718 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	2b04      	cmp	r3, #4
 8006702:	d107      	bne.n	8006714 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006712:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e01a      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d194      	bne.n	800664a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800672e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	00100002 	.word	0x00100002
 800675c:	ffff0000 	.word	0xffff0000

08006760 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	@ 0x30
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	461a      	mov	r2, r3
 800676c:	460b      	mov	r3, r1
 800676e:	817b      	strh	r3, [r7, #10]
 8006770:	4613      	mov	r3, r2
 8006772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006774:	f7fc fe1c 	bl	80033b0 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b20      	cmp	r3, #32
 8006784:	f040 8217 	bne.w	8006bb6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	2319      	movs	r3, #25
 800678e:	2201      	movs	r2, #1
 8006790:	497c      	ldr	r1, [pc, #496]	@ (8006984 <HAL_I2C_Master_Receive+0x224>)
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f001 f810 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800679e:	2302      	movs	r3, #2
 80067a0:	e20a      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_I2C_Master_Receive+0x50>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e203      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d007      	beq.n	80067d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0201 	orr.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2222      	movs	r2, #34	@ 0x22
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2210      	movs	r2, #16
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	893a      	ldrh	r2, [r7, #8]
 8006806:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a5c      	ldr	r2, [pc, #368]	@ (8006988 <HAL_I2C_Master_Receive+0x228>)
 8006816:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006818:	8979      	ldrh	r1, [r7, #10]
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fd7e 	bl	8007320 <I2C_MasterRequestRead>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e1c4      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006832:	2b00      	cmp	r3, #0
 8006834:	d113      	bne.n	800685e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006836:	2300      	movs	r3, #0
 8006838:	623b      	str	r3, [r7, #32]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	e198      	b.n	8006b90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006862:	2b01      	cmp	r3, #1
 8006864:	d11b      	bne.n	800689e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e178      	b.n	8006b90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d11b      	bne.n	80068de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	e158      	b.n	8006b90 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006904:	e144      	b.n	8006b90 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800690a:	2b03      	cmp	r3, #3
 800690c:	f200 80f1 	bhi.w	8006af2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006914:	2b01      	cmp	r3, #1
 8006916:	d123      	bne.n	8006960 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f001 f8f5 	bl	8007b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e145      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800695e:	e117      	b.n	8006b90 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006964:	2b02      	cmp	r3, #2
 8006966:	d14e      	bne.n	8006a06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	2200      	movs	r2, #0
 8006970:	4906      	ldr	r1, [pc, #24]	@ (800698c <HAL_I2C_Master_Receive+0x22c>)
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 ff20 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e11a      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
 8006982:	bf00      	nop
 8006984:	00100002 	.word	0x00100002
 8006988:	ffff0000 	.word	0xffff0000
 800698c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800699e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a04:	e0c4      	b.n	8006b90 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	496c      	ldr	r1, [pc, #432]	@ (8006bc0 <HAL_I2C_Master_Receive+0x460>)
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fed1 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0cb      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	2200      	movs	r2, #0
 8006a6a:	4955      	ldr	r1, [pc, #340]	@ (8006bc0 <HAL_I2C_Master_Receive+0x460>)
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fea3 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e09d      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006af0:	e04e      	b.n	8006b90 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f001 f808 	bl	8007b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e058      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d124      	bne.n	8006b90 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d107      	bne.n	8006b5e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f47f aeb6 	bne.w	8006906 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e000      	b.n	8006bb8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006bb6:	2302      	movs	r3, #2
  }
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3728      	adds	r7, #40	@ 0x28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	00010004 	.word	0x00010004

08006bc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	4608      	mov	r0, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	817b      	strh	r3, [r7, #10]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	813b      	strh	r3, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bde:	f7fc fbe7 	bl	80033b0 <HAL_GetTick>
 8006be2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	f040 80d9 	bne.w	8006da4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	2319      	movs	r3, #25
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	496d      	ldr	r1, [pc, #436]	@ (8006db0 <HAL_I2C_Mem_Write+0x1ec>)
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fddb 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e0cc      	b.n	8006da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_I2C_Mem_Write+0x56>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e0c5      	b.n	8006da6 <HAL_I2C_Mem_Write+0x1e2>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d007      	beq.n	8006c40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2221      	movs	r2, #33	@ 0x21
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2240      	movs	r2, #64	@ 0x40
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a3a      	ldr	r2, [r7, #32]
 8006c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a4d      	ldr	r2, [pc, #308]	@ (8006db4 <HAL_I2C_Mem_Write+0x1f0>)
 8006c80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c82:	88f8      	ldrh	r0, [r7, #6]
 8006c84:	893a      	ldrh	r2, [r7, #8]
 8006c86:	8979      	ldrh	r1, [r7, #10]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	4603      	mov	r3, r0
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fc12 	bl	80074bc <I2C_RequestMemoryWrite>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d052      	beq.n	8006d44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e081      	b.n	8006da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fea0 	bl	80079ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d107      	bne.n	8006cca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e06b      	b.n	8006da6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	781a      	ldrb	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d11b      	bne.n	8006d44 <HAL_I2C_Mem_Write+0x180>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d017      	beq.n	8006d44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1aa      	bne.n	8006ca2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fe93 	bl	8007a7c <I2C_WaitOnBTFFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d107      	bne.n	8006d74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e016      	b.n	8006da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	00100002 	.word	0x00100002
 8006db4:	ffff0000 	.word	0xffff0000

08006db8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08c      	sub	sp, #48	@ 0x30
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	817b      	strh	r3, [r7, #10]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	813b      	strh	r3, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dd2:	f7fc faed 	bl	80033b0 <HAL_GetTick>
 8006dd6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	f040 8214 	bne.w	800720e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	2319      	movs	r3, #25
 8006dec:	2201      	movs	r2, #1
 8006dee:	497b      	ldr	r1, [pc, #492]	@ (8006fdc <HAL_I2C_Mem_Read+0x224>)
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fce1 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e207      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <HAL_I2C_Mem_Read+0x56>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e200      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d007      	beq.n	8006e34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2222      	movs	r2, #34	@ 0x22
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2240      	movs	r2, #64	@ 0x40
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a5b      	ldr	r2, [pc, #364]	@ (8006fe0 <HAL_I2C_Mem_Read+0x228>)
 8006e74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e76:	88f8      	ldrh	r0, [r7, #6]
 8006e78:	893a      	ldrh	r2, [r7, #8]
 8006e7a:	8979      	ldrh	r1, [r7, #10]
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4603      	mov	r3, r0
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fbae 	bl	80075e8 <I2C_RequestMemoryRead>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e1bc      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d113      	bne.n	8006ec6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	623b      	str	r3, [r7, #32]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	623b      	str	r3, [r7, #32]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e190      	b.n	80071e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d11b      	bne.n	8006f06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e170      	b.n	80071e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d11b      	bne.n	8006f46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	e150      	b.n	80071e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f46:	2300      	movs	r3, #0
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f5c:	e144      	b.n	80071e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	f200 80f1 	bhi.w	800714a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d123      	bne.n	8006fb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 fdc9 	bl	8007b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e145      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691a      	ldr	r2, [r3, #16]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fb6:	e117      	b.n	80071e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d14e      	bne.n	800705e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	4906      	ldr	r1, [pc, #24]	@ (8006fe4 <HAL_I2C_Mem_Read+0x22c>)
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fbf4 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d008      	beq.n	8006fe8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e11a      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
 8006fda:	bf00      	nop
 8006fdc:	00100002 	.word	0x00100002
 8006fe0:	ffff0000 	.word	0xffff0000
 8006fe4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691a      	ldr	r2, [r3, #16]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800705c:	e0c4      	b.n	80071e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	2200      	movs	r2, #0
 8007066:	496c      	ldr	r1, [pc, #432]	@ (8007218 <HAL_I2C_Mem_Read+0x460>)
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 fba5 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0cb      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	2200      	movs	r2, #0
 80070c2:	4955      	ldr	r1, [pc, #340]	@ (8007218 <HAL_I2C_Mem_Read+0x460>)
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fb77 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e09d      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	b2d2      	uxtb	r2, r2
 8007122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007132:	3b01      	subs	r3, #1
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007148:	e04e      	b.n	80071e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800714a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800714c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 fcdc 	bl	8007b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e058      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	2b04      	cmp	r3, #4
 800719c:	d124      	bne.n	80071e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d107      	bne.n	80071b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f47f aeb6 	bne.w	8006f5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	e000      	b.n	8007210 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800720e:	2302      	movs	r3, #2
  }
}
 8007210:	4618      	mov	r0, r3
 8007212:	3728      	adds	r7, #40	@ 0x28
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	00010004 	.word	0x00010004

0800721c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	460b      	mov	r3, r1
 800722a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b08      	cmp	r3, #8
 8007236:	d006      	beq.n	8007246 <I2C_MasterRequestWrite+0x2a>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d003      	beq.n	8007246 <I2C_MasterRequestWrite+0x2a>
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007244:	d108      	bne.n	8007258 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	e00b      	b.n	8007270 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725c:	2b12      	cmp	r3, #18
 800725e:	d107      	bne.n	8007270 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800726e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fa9b 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00d      	beq.n	80072a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007296:	d103      	bne.n	80072a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800729e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e035      	b.n	8007310 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072ac:	d108      	bne.n	80072c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072ae:	897b      	ldrh	r3, [r7, #10]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072bc:	611a      	str	r2, [r3, #16]
 80072be:	e01b      	b.n	80072f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072c0:	897b      	ldrh	r3, [r7, #10]
 80072c2:	11db      	asrs	r3, r3, #7
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 0306 	and.w	r3, r3, #6
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f063 030f 	orn	r3, r3, #15
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	490e      	ldr	r1, [pc, #56]	@ (8007318 <I2C_MasterRequestWrite+0xfc>)
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fae4 	bl	80078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e010      	b.n	8007310 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80072ee:	897b      	ldrh	r3, [r7, #10]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4907      	ldr	r1, [pc, #28]	@ (800731c <I2C_MasterRequestWrite+0x100>)
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 fad4 	bl	80078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e000      	b.n	8007310 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	00010008 	.word	0x00010008
 800731c:	00010002 	.word	0x00010002

08007320 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	460b      	mov	r3, r1
 800732e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007334:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007344:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b08      	cmp	r3, #8
 800734a:	d006      	beq.n	800735a <I2C_MasterRequestRead+0x3a>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d003      	beq.n	800735a <I2C_MasterRequestRead+0x3a>
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007358:	d108      	bne.n	800736c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	e00b      	b.n	8007384 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007370:	2b11      	cmp	r3, #17
 8007372:	d107      	bne.n	8007384 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fa11 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00d      	beq.n	80073b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073aa:	d103      	bne.n	80073b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e079      	b.n	80074ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073c0:	d108      	bne.n	80073d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073c2:	897b      	ldrh	r3, [r7, #10]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	611a      	str	r2, [r3, #16]
 80073d2:	e05f      	b.n	8007494 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80073d4:	897b      	ldrh	r3, [r7, #10]
 80073d6:	11db      	asrs	r3, r3, #7
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 0306 	and.w	r3, r3, #6
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f063 030f 	orn	r3, r3, #15
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4930      	ldr	r1, [pc, #192]	@ (80074b4 <I2C_MasterRequestRead+0x194>)
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fa5a 	bl	80078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e054      	b.n	80074ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007402:	897b      	ldrh	r3, [r7, #10]
 8007404:	b2da      	uxtb	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	4929      	ldr	r1, [pc, #164]	@ (80074b8 <I2C_MasterRequestRead+0x198>)
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fa4a 	bl	80078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e044      	b.n	80074ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007446:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f9af 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00d      	beq.n	800747c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800746e:	d103      	bne.n	8007478 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007476:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e017      	b.n	80074ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800747c:	897b      	ldrh	r3, [r7, #10]
 800747e:	11db      	asrs	r3, r3, #7
 8007480:	b2db      	uxtb	r3, r3
 8007482:	f003 0306 	and.w	r3, r3, #6
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f063 030e 	orn	r3, r3, #14
 800748c:	b2da      	uxtb	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4907      	ldr	r1, [pc, #28]	@ (80074b8 <I2C_MasterRequestRead+0x198>)
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fa06 	bl	80078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	00010008 	.word	0x00010008
 80074b8:	00010002 	.word	0x00010002

080074bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	461a      	mov	r2, r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	817b      	strh	r3, [r7, #10]
 80074ce:	460b      	mov	r3, r1
 80074d0:	813b      	strh	r3, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f960 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00d      	beq.n	800751a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800750c:	d103      	bne.n	8007516 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007514:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e05f      	b.n	80075da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800751a:	897b      	ldrh	r3, [r7, #10]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	461a      	mov	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	6a3a      	ldr	r2, [r7, #32]
 800752e:	492d      	ldr	r1, [pc, #180]	@ (80075e4 <I2C_RequestMemoryWrite+0x128>)
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f9bb 	bl	80078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e04c      	b.n	80075da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007558:	6a39      	ldr	r1, [r7, #32]
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fa46 	bl	80079ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00d      	beq.n	8007582 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	2b04      	cmp	r3, #4
 800756c:	d107      	bne.n	800757e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800757c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e02b      	b.n	80075da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d105      	bne.n	8007594 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007588:	893b      	ldrh	r3, [r7, #8]
 800758a:	b2da      	uxtb	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	611a      	str	r2, [r3, #16]
 8007592:	e021      	b.n	80075d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007594:	893b      	ldrh	r3, [r7, #8]
 8007596:	0a1b      	lsrs	r3, r3, #8
 8007598:	b29b      	uxth	r3, r3
 800759a:	b2da      	uxtb	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a4:	6a39      	ldr	r1, [r7, #32]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fa20 	bl	80079ec <I2C_WaitOnTXEFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00d      	beq.n	80075ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d107      	bne.n	80075ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e005      	b.n	80075da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075ce:	893b      	ldrh	r3, [r7, #8]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	00010002 	.word	0x00010002

080075e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	461a      	mov	r2, r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	817b      	strh	r3, [r7, #10]
 80075fa:	460b      	mov	r3, r1
 80075fc:	813b      	strh	r3, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007610:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	2200      	movs	r2, #0
 800762a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 f8c2 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00d      	beq.n	8007656 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007648:	d103      	bne.n	8007652 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007650:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e0aa      	b.n	80077ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007656:	897b      	ldrh	r3, [r7, #10]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	6a3a      	ldr	r2, [r7, #32]
 800766a:	4952      	ldr	r1, [pc, #328]	@ (80077b4 <I2C_RequestMemoryRead+0x1cc>)
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f91d 	bl	80078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e097      	b.n	80077ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007694:	6a39      	ldr	r1, [r7, #32]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f9a8 	bl	80079ec <I2C_WaitOnTXEFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00d      	beq.n	80076be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d107      	bne.n	80076ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e076      	b.n	80077ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d105      	bne.n	80076d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	611a      	str	r2, [r3, #16]
 80076ce:	e021      	b.n	8007714 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076d0:	893b      	ldrh	r3, [r7, #8]
 80076d2:	0a1b      	lsrs	r3, r3, #8
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e0:	6a39      	ldr	r1, [r7, #32]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 f982 	bl	80079ec <I2C_WaitOnTXEFlagUntilTimeout>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00d      	beq.n	800770a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d107      	bne.n	8007706 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e050      	b.n	80077ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800770a:	893b      	ldrh	r3, [r7, #8]
 800770c:	b2da      	uxtb	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007716:	6a39      	ldr	r1, [r7, #32]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 f967 	bl	80079ec <I2C_WaitOnTXEFlagUntilTimeout>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00d      	beq.n	8007740 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007728:	2b04      	cmp	r3, #4
 800772a:	d107      	bne.n	800773c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800773a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e035      	b.n	80077ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800774e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	2200      	movs	r2, #0
 8007758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f82b 	bl	80077b8 <I2C_WaitOnFlagUntilTimeout>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00d      	beq.n	8007784 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007776:	d103      	bne.n	8007780 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800777e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e013      	b.n	80077ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007784:	897b      	ldrh	r3, [r7, #10]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	b2da      	uxtb	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	6a3a      	ldr	r2, [r7, #32]
 8007798:	4906      	ldr	r1, [pc, #24]	@ (80077b4 <I2C_RequestMemoryRead+0x1cc>)
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f886 	bl	80078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	00010002 	.word	0x00010002

080077b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	4613      	mov	r3, r2
 80077c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077c8:	e048      	b.n	800785c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d044      	beq.n	800785c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077d2:	f7fb fded 	bl	80033b0 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d302      	bcc.n	80077e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d139      	bne.n	800785c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	0c1b      	lsrs	r3, r3, #16
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d10d      	bne.n	800780e <I2C_WaitOnFlagUntilTimeout+0x56>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	43da      	mvns	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	4013      	ands	r3, r2
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf0c      	ite	eq
 8007804:	2301      	moveq	r3, #1
 8007806:	2300      	movne	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	461a      	mov	r2, r3
 800780c:	e00c      	b.n	8007828 <I2C_WaitOnFlagUntilTimeout+0x70>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	43da      	mvns	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4013      	ands	r3, r2
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	bf0c      	ite	eq
 8007820:	2301      	moveq	r3, #1
 8007822:	2300      	movne	r3, #0
 8007824:	b2db      	uxtb	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	429a      	cmp	r2, r3
 800782c:	d116      	bne.n	800785c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007848:	f043 0220 	orr.w	r2, r3, #32
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e023      	b.n	80078a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	0c1b      	lsrs	r3, r3, #16
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b01      	cmp	r3, #1
 8007864:	d10d      	bne.n	8007882 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	43da      	mvns	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4013      	ands	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	e00c      	b.n	800789c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	43da      	mvns	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4013      	ands	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	bf0c      	ite	eq
 8007894:	2301      	moveq	r3, #1
 8007896:	2300      	movne	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d093      	beq.n	80077ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078ba:	e071      	b.n	80079a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ca:	d123      	bne.n	8007914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007900:	f043 0204 	orr.w	r2, r3, #4
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e067      	b.n	80079e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d041      	beq.n	80079a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791c:	f7fb fd48 	bl	80033b0 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d302      	bcc.n	8007932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d136      	bne.n	80079a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	0c1b      	lsrs	r3, r3, #16
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	d10c      	bne.n	8007956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	43da      	mvns	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4013      	ands	r3, r2
 8007948:	b29b      	uxth	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf14      	ite	ne
 800794e:	2301      	movne	r3, #1
 8007950:	2300      	moveq	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	e00b      	b.n	800796e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	43da      	mvns	r2, r3
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	4013      	ands	r3, r2
 8007962:	b29b      	uxth	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	bf14      	ite	ne
 8007968:	2301      	movne	r3, #1
 800796a:	2300      	moveq	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d016      	beq.n	80079a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798c:	f043 0220 	orr.w	r2, r3, #32
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e021      	b.n	80079e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	0c1b      	lsrs	r3, r3, #16
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d10c      	bne.n	80079c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	43da      	mvns	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4013      	ands	r3, r2
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bf14      	ite	ne
 80079bc:	2301      	movne	r3, #1
 80079be:	2300      	moveq	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	e00b      	b.n	80079dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	43da      	mvns	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4013      	ands	r3, r2
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bf14      	ite	ne
 80079d6:	2301      	movne	r3, #1
 80079d8:	2300      	moveq	r3, #0
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f47f af6d 	bne.w	80078bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079f8:	e034      	b.n	8007a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 f8e3 	bl	8007bc6 <I2C_IsAcknowledgeFailed>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e034      	b.n	8007a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d028      	beq.n	8007a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a12:	f7fb fccd 	bl	80033b0 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d302      	bcc.n	8007a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d11d      	bne.n	8007a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a32:	2b80      	cmp	r3, #128	@ 0x80
 8007a34:	d016      	beq.n	8007a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a50:	f043 0220 	orr.w	r2, r3, #32
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e007      	b.n	8007a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a6e:	2b80      	cmp	r3, #128	@ 0x80
 8007a70:	d1c3      	bne.n	80079fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a88:	e034      	b.n	8007af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f89b 	bl	8007bc6 <I2C_IsAcknowledgeFailed>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e034      	b.n	8007b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d028      	beq.n	8007af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa2:	f7fb fc85 	bl	80033b0 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d302      	bcc.n	8007ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11d      	bne.n	8007af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d016      	beq.n	8007af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae0:	f043 0220 	orr.w	r2, r3, #32
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e007      	b.n	8007b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d1c3      	bne.n	8007a8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b18:	e049      	b.n	8007bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d119      	bne.n	8007b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f06f 0210 	mvn.w	r2, #16
 8007b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e030      	b.n	8007bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5c:	f7fb fc28 	bl	80033b0 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d302      	bcc.n	8007b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d11d      	bne.n	8007bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7c:	2b40      	cmp	r3, #64	@ 0x40
 8007b7e:	d016      	beq.n	8007bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e007      	b.n	8007bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb8:	2b40      	cmp	r3, #64	@ 0x40
 8007bba:	d1ae      	bne.n	8007b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bdc:	d11b      	bne.n	8007c16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007be6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c02:	f043 0204 	orr.w	r2, r3, #4
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0cc      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c38:	4b68      	ldr	r3, [pc, #416]	@ (8007ddc <HAL_RCC_ClockConfig+0x1b8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d90c      	bls.n	8007c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c46:	4b65      	ldr	r3, [pc, #404]	@ (8007ddc <HAL_RCC_ClockConfig+0x1b8>)
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4e:	4b63      	ldr	r3, [pc, #396]	@ (8007ddc <HAL_RCC_ClockConfig+0x1b8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 030f 	and.w	r3, r3, #15
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d001      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e0b8      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d020      	beq.n	8007cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c78:	4b59      	ldr	r3, [pc, #356]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	4a58      	ldr	r2, [pc, #352]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c90:	4b53      	ldr	r3, [pc, #332]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	4a52      	ldr	r2, [pc, #328]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c9c:	4b50      	ldr	r3, [pc, #320]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	494d      	ldr	r1, [pc, #308]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d044      	beq.n	8007d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d107      	bne.n	8007cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc2:	4b47      	ldr	r3, [pc, #284]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d119      	bne.n	8007d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e07f      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d003      	beq.n	8007ce2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d107      	bne.n	8007cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e06f      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e067      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d02:	4b37      	ldr	r3, [pc, #220]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f023 0203 	bic.w	r2, r3, #3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	4934      	ldr	r1, [pc, #208]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d14:	f7fb fb4c 	bl	80033b0 <HAL_GetTick>
 8007d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d1a:	e00a      	b.n	8007d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d1c:	f7fb fb48 	bl	80033b0 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e04f      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d32:	4b2b      	ldr	r3, [pc, #172]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 020c 	and.w	r2, r3, #12
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d1eb      	bne.n	8007d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d44:	4b25      	ldr	r3, [pc, #148]	@ (8007ddc <HAL_RCC_ClockConfig+0x1b8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d20c      	bcs.n	8007d6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d52:	4b22      	ldr	r3, [pc, #136]	@ (8007ddc <HAL_RCC_ClockConfig+0x1b8>)
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d5a:	4b20      	ldr	r3, [pc, #128]	@ (8007ddc <HAL_RCC_ClockConfig+0x1b8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d001      	beq.n	8007d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e032      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d78:	4b19      	ldr	r3, [pc, #100]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	4916      	ldr	r1, [pc, #88]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d96:	4b12      	ldr	r3, [pc, #72]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	490e      	ldr	r1, [pc, #56]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007daa:	f000 f855 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8007dae:	4602      	mov	r2, r0
 8007db0:	4b0b      	ldr	r3, [pc, #44]	@ (8007de0 <HAL_RCC_ClockConfig+0x1bc>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	091b      	lsrs	r3, r3, #4
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	490a      	ldr	r1, [pc, #40]	@ (8007de4 <HAL_RCC_ClockConfig+0x1c0>)
 8007dbc:	5ccb      	ldrb	r3, [r1, r3]
 8007dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc2:	4a09      	ldr	r2, [pc, #36]	@ (8007de8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007dc6:	4b09      	ldr	r3, [pc, #36]	@ (8007dec <HAL_RCC_ClockConfig+0x1c8>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fb faac 	bl	8003328 <HAL_InitTick>

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	40023c00 	.word	0x40023c00
 8007de0:	40023800 	.word	0x40023800
 8007de4:	0800f0dc 	.word	0x0800f0dc
 8007de8:	20000000 	.word	0x20000000
 8007dec:	20000004 	.word	0x20000004

08007df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007df4:	4b03      	ldr	r3, [pc, #12]	@ (8007e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8007df6:	681b      	ldr	r3, [r3, #0]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000000 	.word	0x20000000

08007e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e0c:	f7ff fff0 	bl	8007df0 <HAL_RCC_GetHCLKFreq>
 8007e10:	4602      	mov	r2, r0
 8007e12:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	0a9b      	lsrs	r3, r3, #10
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	4903      	ldr	r1, [pc, #12]	@ (8007e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e1e:	5ccb      	ldrb	r3, [r1, r3]
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	0800f0ec 	.word	0x0800f0ec

08007e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e34:	f7ff ffdc 	bl	8007df0 <HAL_RCC_GetHCLKFreq>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	4b05      	ldr	r3, [pc, #20]	@ (8007e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	0b5b      	lsrs	r3, r3, #13
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	4903      	ldr	r1, [pc, #12]	@ (8007e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e46:	5ccb      	ldrb	r3, [r1, r3]
 8007e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	40023800 	.word	0x40023800
 8007e54:	0800f0ec 	.word	0x0800f0ec

08007e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e5c:	b0ae      	sub	sp, #184	@ 0xb8
 8007e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e7e:	4bcb      	ldr	r3, [pc, #812]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 030c 	and.w	r3, r3, #12
 8007e86:	2b0c      	cmp	r3, #12
 8007e88:	f200 8206 	bhi.w	8008298 <HAL_RCC_GetSysClockFreq+0x440>
 8007e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ec9 	.word	0x08007ec9
 8007e98:	08008299 	.word	0x08008299
 8007e9c:	08008299 	.word	0x08008299
 8007ea0:	08008299 	.word	0x08008299
 8007ea4:	08007ed1 	.word	0x08007ed1
 8007ea8:	08008299 	.word	0x08008299
 8007eac:	08008299 	.word	0x08008299
 8007eb0:	08008299 	.word	0x08008299
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08008299 	.word	0x08008299
 8007ebc:	08008299 	.word	0x08008299
 8007ec0:	08008299 	.word	0x08008299
 8007ec4:	080080c9 	.word	0x080080c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ec8:	4bb9      	ldr	r3, [pc, #740]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007ece:	e1e7      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ed0:	4bb8      	ldr	r3, [pc, #736]	@ (80081b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007ed6:	e1e3      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ed8:	4bb4      	ldr	r3, [pc, #720]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ee4:	4bb1      	ldr	r3, [pc, #708]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d071      	beq.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ef0:	4bae      	ldr	r3, [pc, #696]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	099b      	lsrs	r3, r3, #6
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007efc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f16:	4622      	mov	r2, r4
 8007f18:	462b      	mov	r3, r5
 8007f1a:	f04f 0000 	mov.w	r0, #0
 8007f1e:	f04f 0100 	mov.w	r1, #0
 8007f22:	0159      	lsls	r1, r3, #5
 8007f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f28:	0150      	lsls	r0, r2, #5
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4621      	mov	r1, r4
 8007f30:	1a51      	subs	r1, r2, r1
 8007f32:	6439      	str	r1, [r7, #64]	@ 0x40
 8007f34:	4629      	mov	r1, r5
 8007f36:	eb63 0301 	sbc.w	r3, r3, r1
 8007f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007f48:	4649      	mov	r1, r9
 8007f4a:	018b      	lsls	r3, r1, #6
 8007f4c:	4641      	mov	r1, r8
 8007f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f52:	4641      	mov	r1, r8
 8007f54:	018a      	lsls	r2, r1, #6
 8007f56:	4641      	mov	r1, r8
 8007f58:	1a51      	subs	r1, r2, r1
 8007f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007f70:	4649      	mov	r1, r9
 8007f72:	00cb      	lsls	r3, r1, #3
 8007f74:	4641      	mov	r1, r8
 8007f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	00ca      	lsls	r2, r1, #3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	4622      	mov	r2, r4
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f8a:	462b      	mov	r3, r5
 8007f8c:	460a      	mov	r2, r1
 8007f8e:	eb42 0303 	adc.w	r3, r2, r3
 8007f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	024b      	lsls	r3, r1, #9
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007faa:	4621      	mov	r1, r4
 8007fac:	024a      	lsls	r2, r1, #9
 8007fae:	4610      	mov	r0, r2
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007fc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007fc4:	f7f8 fec0 	bl	8000d48 <__aeabi_uldivmod>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4613      	mov	r3, r2
 8007fce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fd2:	e067      	b.n	80080a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fd4:	4b75      	ldr	r3, [pc, #468]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	099b      	lsrs	r3, r3, #6
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fe0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fee:	2300      	movs	r3, #0
 8007ff0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ff2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	462b      	mov	r3, r5
 8007ffa:	f04f 0000 	mov.w	r0, #0
 8007ffe:	f04f 0100 	mov.w	r1, #0
 8008002:	0159      	lsls	r1, r3, #5
 8008004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008008:	0150      	lsls	r0, r2, #5
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4621      	mov	r1, r4
 8008010:	1a51      	subs	r1, r2, r1
 8008012:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008014:	4629      	mov	r1, r5
 8008016:	eb63 0301 	sbc.w	r3, r3, r1
 800801a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	f04f 0300 	mov.w	r3, #0
 8008024:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008028:	4649      	mov	r1, r9
 800802a:	018b      	lsls	r3, r1, #6
 800802c:	4641      	mov	r1, r8
 800802e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008032:	4641      	mov	r1, r8
 8008034:	018a      	lsls	r2, r1, #6
 8008036:	4641      	mov	r1, r8
 8008038:	ebb2 0a01 	subs.w	sl, r2, r1
 800803c:	4649      	mov	r1, r9
 800803e:	eb63 0b01 	sbc.w	fp, r3, r1
 8008042:	f04f 0200 	mov.w	r2, #0
 8008046:	f04f 0300 	mov.w	r3, #0
 800804a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800804e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008056:	4692      	mov	sl, r2
 8008058:	469b      	mov	fp, r3
 800805a:	4623      	mov	r3, r4
 800805c:	eb1a 0303 	adds.w	r3, sl, r3
 8008060:	623b      	str	r3, [r7, #32]
 8008062:	462b      	mov	r3, r5
 8008064:	eb4b 0303 	adc.w	r3, fp, r3
 8008068:	627b      	str	r3, [r7, #36]	@ 0x24
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008076:	4629      	mov	r1, r5
 8008078:	028b      	lsls	r3, r1, #10
 800807a:	4621      	mov	r1, r4
 800807c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008080:	4621      	mov	r1, r4
 8008082:	028a      	lsls	r2, r1, #10
 8008084:	4610      	mov	r0, r2
 8008086:	4619      	mov	r1, r3
 8008088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800808c:	2200      	movs	r2, #0
 800808e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008090:	677a      	str	r2, [r7, #116]	@ 0x74
 8008092:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008096:	f7f8 fe57 	bl	8000d48 <__aeabi_uldivmod>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4613      	mov	r3, r2
 80080a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80080a4:	4b41      	ldr	r3, [pc, #260]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	3301      	adds	r3, #1
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80080b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80080c6:	e0eb      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080c8:	4b38      	ldr	r3, [pc, #224]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080d4:	4b35      	ldr	r3, [pc, #212]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d06b      	beq.n	80081b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080e0:	4b32      	ldr	r3, [pc, #200]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x354>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	099b      	lsrs	r3, r3, #6
 80080e6:	2200      	movs	r2, #0
 80080e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80080f4:	2300      	movs	r3, #0
 80080f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80080f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80080fc:	4622      	mov	r2, r4
 80080fe:	462b      	mov	r3, r5
 8008100:	f04f 0000 	mov.w	r0, #0
 8008104:	f04f 0100 	mov.w	r1, #0
 8008108:	0159      	lsls	r1, r3, #5
 800810a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800810e:	0150      	lsls	r0, r2, #5
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4621      	mov	r1, r4
 8008116:	1a51      	subs	r1, r2, r1
 8008118:	61b9      	str	r1, [r7, #24]
 800811a:	4629      	mov	r1, r5
 800811c:	eb63 0301 	sbc.w	r3, r3, r1
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800812e:	4659      	mov	r1, fp
 8008130:	018b      	lsls	r3, r1, #6
 8008132:	4651      	mov	r1, sl
 8008134:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008138:	4651      	mov	r1, sl
 800813a:	018a      	lsls	r2, r1, #6
 800813c:	4651      	mov	r1, sl
 800813e:	ebb2 0801 	subs.w	r8, r2, r1
 8008142:	4659      	mov	r1, fp
 8008144:	eb63 0901 	sbc.w	r9, r3, r1
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008154:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008158:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800815c:	4690      	mov	r8, r2
 800815e:	4699      	mov	r9, r3
 8008160:	4623      	mov	r3, r4
 8008162:	eb18 0303 	adds.w	r3, r8, r3
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	462b      	mov	r3, r5
 800816a:	eb49 0303 	adc.w	r3, r9, r3
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	f04f 0200 	mov.w	r2, #0
 8008174:	f04f 0300 	mov.w	r3, #0
 8008178:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800817c:	4629      	mov	r1, r5
 800817e:	024b      	lsls	r3, r1, #9
 8008180:	4621      	mov	r1, r4
 8008182:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008186:	4621      	mov	r1, r4
 8008188:	024a      	lsls	r2, r1, #9
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008192:	2200      	movs	r2, #0
 8008194:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008196:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008198:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800819c:	f7f8 fdd4 	bl	8000d48 <__aeabi_uldivmod>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4613      	mov	r3, r2
 80081a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081aa:	e065      	b.n	8008278 <HAL_RCC_GetSysClockFreq+0x420>
 80081ac:	40023800 	.word	0x40023800
 80081b0:	00f42400 	.word	0x00f42400
 80081b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081b8:	4b3d      	ldr	r3, [pc, #244]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	099b      	lsrs	r3, r3, #6
 80081be:	2200      	movs	r2, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	4611      	mov	r1, r2
 80081c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80081ca:	2300      	movs	r3, #0
 80081cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80081ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80081d2:	4642      	mov	r2, r8
 80081d4:	464b      	mov	r3, r9
 80081d6:	f04f 0000 	mov.w	r0, #0
 80081da:	f04f 0100 	mov.w	r1, #0
 80081de:	0159      	lsls	r1, r3, #5
 80081e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081e4:	0150      	lsls	r0, r2, #5
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4641      	mov	r1, r8
 80081ec:	1a51      	subs	r1, r2, r1
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	4649      	mov	r1, r9
 80081f2:	eb63 0301 	sbc.w	r3, r3, r1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008204:	4659      	mov	r1, fp
 8008206:	018b      	lsls	r3, r1, #6
 8008208:	4651      	mov	r1, sl
 800820a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800820e:	4651      	mov	r1, sl
 8008210:	018a      	lsls	r2, r1, #6
 8008212:	4651      	mov	r1, sl
 8008214:	1a54      	subs	r4, r2, r1
 8008216:	4659      	mov	r1, fp
 8008218:	eb63 0501 	sbc.w	r5, r3, r1
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	00eb      	lsls	r3, r5, #3
 8008226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800822a:	00e2      	lsls	r2, r4, #3
 800822c:	4614      	mov	r4, r2
 800822e:	461d      	mov	r5, r3
 8008230:	4643      	mov	r3, r8
 8008232:	18e3      	adds	r3, r4, r3
 8008234:	603b      	str	r3, [r7, #0]
 8008236:	464b      	mov	r3, r9
 8008238:	eb45 0303 	adc.w	r3, r5, r3
 800823c:	607b      	str	r3, [r7, #4]
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800824a:	4629      	mov	r1, r5
 800824c:	028b      	lsls	r3, r1, #10
 800824e:	4621      	mov	r1, r4
 8008250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008254:	4621      	mov	r1, r4
 8008256:	028a      	lsls	r2, r1, #10
 8008258:	4610      	mov	r0, r2
 800825a:	4619      	mov	r1, r3
 800825c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008260:	2200      	movs	r2, #0
 8008262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008264:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008266:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800826a:	f7f8 fd6d 	bl	8000d48 <__aeabi_uldivmod>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4613      	mov	r3, r2
 8008274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008278:	4b0d      	ldr	r3, [pc, #52]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	0f1b      	lsrs	r3, r3, #28
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800828a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800828e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008296:	e003      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008298:	4b06      	ldr	r3, [pc, #24]	@ (80082b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800829a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800829e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	37b8      	adds	r7, #184	@ 0xb8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082ae:	bf00      	nop
 80082b0:	40023800 	.word	0x40023800
 80082b4:	00f42400 	.word	0x00f42400

080082b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e28d      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 8083 	beq.w	80083de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80082d8:	4b94      	ldr	r3, [pc, #592]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 030c 	and.w	r3, r3, #12
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d019      	beq.n	8008318 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80082e4:	4b91      	ldr	r3, [pc, #580]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 030c 	and.w	r3, r3, #12
        || \
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d106      	bne.n	80082fe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80082f0:	4b8e      	ldr	r3, [pc, #568]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082fc:	d00c      	beq.n	8008318 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082fe:	4b8b      	ldr	r3, [pc, #556]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008306:	2b0c      	cmp	r3, #12
 8008308:	d112      	bne.n	8008330 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800830a:	4b88      	ldr	r3, [pc, #544]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008312:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008316:	d10b      	bne.n	8008330 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008318:	4b84      	ldr	r3, [pc, #528]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d05b      	beq.n	80083dc <HAL_RCC_OscConfig+0x124>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d157      	bne.n	80083dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e25a      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008338:	d106      	bne.n	8008348 <HAL_RCC_OscConfig+0x90>
 800833a:	4b7c      	ldr	r3, [pc, #496]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a7b      	ldr	r2, [pc, #492]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	e01d      	b.n	8008384 <HAL_RCC_OscConfig+0xcc>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008350:	d10c      	bne.n	800836c <HAL_RCC_OscConfig+0xb4>
 8008352:	4b76      	ldr	r3, [pc, #472]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a75      	ldr	r2, [pc, #468]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	4b73      	ldr	r3, [pc, #460]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a72      	ldr	r2, [pc, #456]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	e00b      	b.n	8008384 <HAL_RCC_OscConfig+0xcc>
 800836c:	4b6f      	ldr	r3, [pc, #444]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a6e      	ldr	r2, [pc, #440]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	4b6c      	ldr	r3, [pc, #432]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a6b      	ldr	r2, [pc, #428]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800837e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d013      	beq.n	80083b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7fb f810 	bl	80033b0 <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008394:	f7fb f80c 	bl	80033b0 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b64      	cmp	r3, #100	@ 0x64
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e21f      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083a6:	4b61      	ldr	r3, [pc, #388]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f0      	beq.n	8008394 <HAL_RCC_OscConfig+0xdc>
 80083b2:	e014      	b.n	80083de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b4:	f7fa fffc 	bl	80033b0 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083ba:	e008      	b.n	80083ce <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083bc:	f7fa fff8 	bl	80033b0 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b64      	cmp	r3, #100	@ 0x64
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e20b      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083ce:	4b57      	ldr	r3, [pc, #348]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <HAL_RCC_OscConfig+0x104>
 80083da:	e000      	b.n	80083de <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d06f      	beq.n	80084ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80083ea:	4b50      	ldr	r3, [pc, #320]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 030c 	and.w	r3, r3, #12
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d017      	beq.n	8008426 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80083f6:	4b4d      	ldr	r3, [pc, #308]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80083fe:	2b08      	cmp	r3, #8
 8008400:	d105      	bne.n	800840e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008402:	4b4a      	ldr	r3, [pc, #296]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00b      	beq.n	8008426 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800840e:	4b47      	ldr	r3, [pc, #284]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008416:	2b0c      	cmp	r3, #12
 8008418:	d11c      	bne.n	8008454 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800841a:	4b44      	ldr	r3, [pc, #272]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d116      	bne.n	8008454 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008426:	4b41      	ldr	r3, [pc, #260]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d005      	beq.n	800843e <HAL_RCC_OscConfig+0x186>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d001      	beq.n	800843e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e1d3      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800843e:	4b3b      	ldr	r3, [pc, #236]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	4937      	ldr	r1, [pc, #220]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800844e:	4313      	orrs	r3, r2
 8008450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008452:	e03a      	b.n	80084ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d020      	beq.n	800849e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800845c:	4b34      	ldr	r3, [pc, #208]	@ (8008530 <HAL_RCC_OscConfig+0x278>)
 800845e:	2201      	movs	r2, #1
 8008460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008462:	f7fa ffa5 	bl	80033b0 <HAL_GetTick>
 8008466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008468:	e008      	b.n	800847c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800846a:	f7fa ffa1 	bl	80033b0 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	2b02      	cmp	r3, #2
 8008476:	d901      	bls.n	800847c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e1b4      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800847c:	4b2b      	ldr	r3, [pc, #172]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0f0      	beq.n	800846a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008488:	4b28      	ldr	r3, [pc, #160]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	4925      	ldr	r1, [pc, #148]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008498:	4313      	orrs	r3, r2
 800849a:	600b      	str	r3, [r1, #0]
 800849c:	e015      	b.n	80084ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800849e:	4b24      	ldr	r3, [pc, #144]	@ (8008530 <HAL_RCC_OscConfig+0x278>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a4:	f7fa ff84 	bl	80033b0 <HAL_GetTick>
 80084a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ac:	f7fa ff80 	bl	80033b0 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e193      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084be:	4b1b      	ldr	r3, [pc, #108]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1f0      	bne.n	80084ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d036      	beq.n	8008544 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d016      	beq.n	800850c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084de:	4b15      	ldr	r3, [pc, #84]	@ (8008534 <HAL_RCC_OscConfig+0x27c>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e4:	f7fa ff64 	bl	80033b0 <HAL_GetTick>
 80084e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ea:	e008      	b.n	80084fe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ec:	f7fa ff60 	bl	80033b0 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d901      	bls.n	80084fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e173      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084fe:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <HAL_RCC_OscConfig+0x274>)
 8008500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0f0      	beq.n	80084ec <HAL_RCC_OscConfig+0x234>
 800850a:	e01b      	b.n	8008544 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800850c:	4b09      	ldr	r3, [pc, #36]	@ (8008534 <HAL_RCC_OscConfig+0x27c>)
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008512:	f7fa ff4d 	bl	80033b0 <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008518:	e00e      	b.n	8008538 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800851a:	f7fa ff49 	bl	80033b0 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d907      	bls.n	8008538 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e15c      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
 800852c:	40023800 	.word	0x40023800
 8008530:	42470000 	.word	0x42470000
 8008534:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008538:	4b8a      	ldr	r3, [pc, #552]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 800853a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1ea      	bne.n	800851a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 8097 	beq.w	8008680 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008552:	2300      	movs	r3, #0
 8008554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008556:	4b83      	ldr	r3, [pc, #524]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10f      	bne.n	8008582 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008562:	2300      	movs	r3, #0
 8008564:	60bb      	str	r3, [r7, #8]
 8008566:	4b7f      	ldr	r3, [pc, #508]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 8008568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856a:	4a7e      	ldr	r2, [pc, #504]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 800856c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008570:	6413      	str	r3, [r2, #64]	@ 0x40
 8008572:	4b7c      	ldr	r3, [pc, #496]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 8008574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800857a:	60bb      	str	r3, [r7, #8]
 800857c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800857e:	2301      	movs	r3, #1
 8008580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008582:	4b79      	ldr	r3, [pc, #484]	@ (8008768 <HAL_RCC_OscConfig+0x4b0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800858a:	2b00      	cmp	r3, #0
 800858c:	d118      	bne.n	80085c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800858e:	4b76      	ldr	r3, [pc, #472]	@ (8008768 <HAL_RCC_OscConfig+0x4b0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a75      	ldr	r2, [pc, #468]	@ (8008768 <HAL_RCC_OscConfig+0x4b0>)
 8008594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800859a:	f7fa ff09 	bl	80033b0 <HAL_GetTick>
 800859e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085a0:	e008      	b.n	80085b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085a2:	f7fa ff05 	bl	80033b0 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d901      	bls.n	80085b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e118      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b4:	4b6c      	ldr	r3, [pc, #432]	@ (8008768 <HAL_RCC_OscConfig+0x4b0>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0f0      	beq.n	80085a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d106      	bne.n	80085d6 <HAL_RCC_OscConfig+0x31e>
 80085c8:	4b66      	ldr	r3, [pc, #408]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085cc:	4a65      	ldr	r2, [pc, #404]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80085d4:	e01c      	b.n	8008610 <HAL_RCC_OscConfig+0x358>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b05      	cmp	r3, #5
 80085dc:	d10c      	bne.n	80085f8 <HAL_RCC_OscConfig+0x340>
 80085de:	4b61      	ldr	r3, [pc, #388]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80085e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085e2:	4a60      	ldr	r2, [pc, #384]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80085e4:	f043 0304 	orr.w	r3, r3, #4
 80085e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085ea:	4b5e      	ldr	r3, [pc, #376]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80085ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ee:	4a5d      	ldr	r2, [pc, #372]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80085f6:	e00b      	b.n	8008610 <HAL_RCC_OscConfig+0x358>
 80085f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80085fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fc:	4a59      	ldr	r2, [pc, #356]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80085fe:	f023 0301 	bic.w	r3, r3, #1
 8008602:	6713      	str	r3, [r2, #112]	@ 0x70
 8008604:	4b57      	ldr	r3, [pc, #348]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 8008606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008608:	4a56      	ldr	r2, [pc, #344]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 800860a:	f023 0304 	bic.w	r3, r3, #4
 800860e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d015      	beq.n	8008644 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008618:	f7fa feca 	bl	80033b0 <HAL_GetTick>
 800861c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800861e:	e00a      	b.n	8008636 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008620:	f7fa fec6 	bl	80033b0 <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800862e:	4293      	cmp	r3, r2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e0d7      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008636:	4b4b      	ldr	r3, [pc, #300]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 8008638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0ee      	beq.n	8008620 <HAL_RCC_OscConfig+0x368>
 8008642:	e014      	b.n	800866e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008644:	f7fa feb4 	bl	80033b0 <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800864a:	e00a      	b.n	8008662 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800864c:	f7fa feb0 	bl	80033b0 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800865a:	4293      	cmp	r3, r2
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e0c1      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008662:	4b40      	ldr	r3, [pc, #256]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1ee      	bne.n	800864c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d105      	bne.n	8008680 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008674:	4b3b      	ldr	r3, [pc, #236]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 8008676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008678:	4a3a      	ldr	r2, [pc, #232]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 800867a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800867e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80ad 	beq.w	80087e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800868a:	4b36      	ldr	r3, [pc, #216]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 030c 	and.w	r3, r3, #12
 8008692:	2b08      	cmp	r3, #8
 8008694:	d060      	beq.n	8008758 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d145      	bne.n	800872a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800869e:	4b33      	ldr	r3, [pc, #204]	@ (800876c <HAL_RCC_OscConfig+0x4b4>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a4:	f7fa fe84 	bl	80033b0 <HAL_GetTick>
 80086a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086aa:	e008      	b.n	80086be <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086ac:	f7fa fe80 	bl	80033b0 <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d901      	bls.n	80086be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e093      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086be:	4b29      	ldr	r3, [pc, #164]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1f0      	bne.n	80086ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69da      	ldr	r2, [r3, #28]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d8:	019b      	lsls	r3, r3, #6
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e0:	085b      	lsrs	r3, r3, #1
 80086e2:	3b01      	subs	r3, #1
 80086e4:	041b      	lsls	r3, r3, #16
 80086e6:	431a      	orrs	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ec:	061b      	lsls	r3, r3, #24
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f4:	071b      	lsls	r3, r3, #28
 80086f6:	491b      	ldr	r1, [pc, #108]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086fc:	4b1b      	ldr	r3, [pc, #108]	@ (800876c <HAL_RCC_OscConfig+0x4b4>)
 80086fe:	2201      	movs	r2, #1
 8008700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008702:	f7fa fe55 	bl	80033b0 <HAL_GetTick>
 8008706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008708:	e008      	b.n	800871c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800870a:	f7fa fe51 	bl	80033b0 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b02      	cmp	r3, #2
 8008716:	d901      	bls.n	800871c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e064      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800871c:	4b11      	ldr	r3, [pc, #68]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0f0      	beq.n	800870a <HAL_RCC_OscConfig+0x452>
 8008728:	e05c      	b.n	80087e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800872a:	4b10      	ldr	r3, [pc, #64]	@ (800876c <HAL_RCC_OscConfig+0x4b4>)
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008730:	f7fa fe3e 	bl	80033b0 <HAL_GetTick>
 8008734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008736:	e008      	b.n	800874a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008738:	f7fa fe3a 	bl	80033b0 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b02      	cmp	r3, #2
 8008744:	d901      	bls.n	800874a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e04d      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800874a:	4b06      	ldr	r3, [pc, #24]	@ (8008764 <HAL_RCC_OscConfig+0x4ac>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1f0      	bne.n	8008738 <HAL_RCC_OscConfig+0x480>
 8008756:	e045      	b.n	80087e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d107      	bne.n	8008770 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e040      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
 8008764:	40023800 	.word	0x40023800
 8008768:	40007000 	.word	0x40007000
 800876c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008770:	4b1f      	ldr	r3, [pc, #124]	@ (80087f0 <HAL_RCC_OscConfig+0x538>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d030      	beq.n	80087e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008788:	429a      	cmp	r2, r3
 800878a:	d129      	bne.n	80087e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008796:	429a      	cmp	r2, r3
 8008798:	d122      	bne.n	80087e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80087a0:	4013      	ands	r3, r2
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80087a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d119      	bne.n	80087e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	3b01      	subs	r3, #1
 80087ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087bc:	429a      	cmp	r2, r3
 80087be:	d10f      	bne.n	80087e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d107      	bne.n	80087e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087dc:	429a      	cmp	r2, r3
 80087de:	d001      	beq.n	80087e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	40023800 	.word	0x40023800

080087f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e041      	b.n	800888a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7fa fb2c 	bl	8002e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3304      	adds	r3, #4
 8008830:	4619      	mov	r1, r3
 8008832:	4610      	mov	r0, r2
 8008834:	f000 fc80 	bl	8009138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d001      	beq.n	80088ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e046      	b.n	800893a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a23      	ldr	r2, [pc, #140]	@ (8008948 <HAL_TIM_Base_Start+0xb4>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d022      	beq.n	8008904 <HAL_TIM_Base_Start+0x70>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c6:	d01d      	beq.n	8008904 <HAL_TIM_Base_Start+0x70>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1f      	ldr	r2, [pc, #124]	@ (800894c <HAL_TIM_Base_Start+0xb8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d018      	beq.n	8008904 <HAL_TIM_Base_Start+0x70>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008950 <HAL_TIM_Base_Start+0xbc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d013      	beq.n	8008904 <HAL_TIM_Base_Start+0x70>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008954 <HAL_TIM_Base_Start+0xc0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00e      	beq.n	8008904 <HAL_TIM_Base_Start+0x70>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008958 <HAL_TIM_Base_Start+0xc4>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d009      	beq.n	8008904 <HAL_TIM_Base_Start+0x70>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a19      	ldr	r2, [pc, #100]	@ (800895c <HAL_TIM_Base_Start+0xc8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d004      	beq.n	8008904 <HAL_TIM_Base_Start+0x70>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a18      	ldr	r2, [pc, #96]	@ (8008960 <HAL_TIM_Base_Start+0xcc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d111      	bne.n	8008928 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b06      	cmp	r3, #6
 8008914:	d010      	beq.n	8008938 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f042 0201 	orr.w	r2, r2, #1
 8008924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008926:	e007      	b.n	8008938 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40010000 	.word	0x40010000
 800894c:	40000400 	.word	0x40000400
 8008950:	40000800 	.word	0x40000800
 8008954:	40000c00 	.word	0x40000c00
 8008958:	40010400 	.word	0x40010400
 800895c:	40014000 	.word	0x40014000
 8008960:	40001800 	.word	0x40001800

08008964 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6a1a      	ldr	r2, [r3, #32]
 8008972:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008976:	4013      	ands	r3, r2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10f      	bne.n	800899c <HAL_TIM_Base_Stop+0x38>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	f240 4344 	movw	r3, #1092	@ 0x444
 8008986:	4013      	ands	r3, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d107      	bne.n	800899c <HAL_TIM_Base_Stop+0x38>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e041      	b.n	8008a48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d106      	bne.n	80089de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7fa fa2b 	bl	8002e34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2202      	movs	r2, #2
 80089e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f000 fba1 	bl	8009138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d109      	bne.n	8008a74 <HAL_TIM_PWM_Start+0x24>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	e022      	b.n	8008aba <HAL_TIM_PWM_Start+0x6a>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d109      	bne.n	8008a8e <HAL_TIM_PWM_Start+0x3e>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	bf14      	ite	ne
 8008a86:	2301      	movne	r3, #1
 8008a88:	2300      	moveq	r3, #0
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	e015      	b.n	8008aba <HAL_TIM_PWM_Start+0x6a>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d109      	bne.n	8008aa8 <HAL_TIM_PWM_Start+0x58>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	bf14      	ite	ne
 8008aa0:	2301      	movne	r3, #1
 8008aa2:	2300      	moveq	r3, #0
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	e008      	b.n	8008aba <HAL_TIM_PWM_Start+0x6a>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	bf14      	ite	ne
 8008ab4:	2301      	movne	r3, #1
 8008ab6:	2300      	moveq	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e07c      	b.n	8008bbc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <HAL_TIM_PWM_Start+0x82>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ad0:	e013      	b.n	8008afa <HAL_TIM_PWM_Start+0xaa>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d104      	bne.n	8008ae2 <HAL_TIM_PWM_Start+0x92>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ae0:	e00b      	b.n	8008afa <HAL_TIM_PWM_Start+0xaa>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d104      	bne.n	8008af2 <HAL_TIM_PWM_Start+0xa2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008af0:	e003      	b.n	8008afa <HAL_TIM_PWM_Start+0xaa>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2202      	movs	r2, #2
 8008af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2201      	movs	r2, #1
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fe0e 	bl	8009724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8008bc4 <HAL_TIM_PWM_Start+0x174>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d004      	beq.n	8008b1c <HAL_TIM_PWM_Start+0xcc>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a2c      	ldr	r2, [pc, #176]	@ (8008bc8 <HAL_TIM_PWM_Start+0x178>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d101      	bne.n	8008b20 <HAL_TIM_PWM_Start+0xd0>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e000      	b.n	8008b22 <HAL_TIM_PWM_Start+0xd2>
 8008b20:	2300      	movs	r3, #0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d007      	beq.n	8008b36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a22      	ldr	r2, [pc, #136]	@ (8008bc4 <HAL_TIM_PWM_Start+0x174>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d022      	beq.n	8008b86 <HAL_TIM_PWM_Start+0x136>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b48:	d01d      	beq.n	8008b86 <HAL_TIM_PWM_Start+0x136>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bcc <HAL_TIM_PWM_Start+0x17c>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d018      	beq.n	8008b86 <HAL_TIM_PWM_Start+0x136>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1d      	ldr	r2, [pc, #116]	@ (8008bd0 <HAL_TIM_PWM_Start+0x180>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d013      	beq.n	8008b86 <HAL_TIM_PWM_Start+0x136>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd4 <HAL_TIM_PWM_Start+0x184>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d00e      	beq.n	8008b86 <HAL_TIM_PWM_Start+0x136>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a16      	ldr	r2, [pc, #88]	@ (8008bc8 <HAL_TIM_PWM_Start+0x178>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d009      	beq.n	8008b86 <HAL_TIM_PWM_Start+0x136>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a18      	ldr	r2, [pc, #96]	@ (8008bd8 <HAL_TIM_PWM_Start+0x188>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d004      	beq.n	8008b86 <HAL_TIM_PWM_Start+0x136>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a16      	ldr	r2, [pc, #88]	@ (8008bdc <HAL_TIM_PWM_Start+0x18c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d111      	bne.n	8008baa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b06      	cmp	r3, #6
 8008b96:	d010      	beq.n	8008bba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f042 0201 	orr.w	r2, r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba8:	e007      	b.n	8008bba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0201 	orr.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	40010000 	.word	0x40010000
 8008bc8:	40010400 	.word	0x40010400
 8008bcc:	40000400 	.word	0x40000400
 8008bd0:	40000800 	.word	0x40000800
 8008bd4:	40000c00 	.word	0x40000c00
 8008bd8:	40014000 	.word	0x40014000
 8008bdc:	40001800 	.word	0x40001800

08008be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d020      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01b      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f06f 0202 	mvn.w	r2, #2
 8008c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fa65 	bl	80090fa <HAL_TIM_IC_CaptureCallback>
 8008c30:	e005      	b.n	8008c3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fa57 	bl	80090e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fa68 	bl	800910e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d020      	beq.n	8008c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d01b      	beq.n	8008c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f06f 0204 	mvn.w	r2, #4
 8008c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2202      	movs	r2, #2
 8008c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa3f 	bl	80090fa <HAL_TIM_IC_CaptureCallback>
 8008c7c:	e005      	b.n	8008c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa31 	bl	80090e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fa42 	bl	800910e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d020      	beq.n	8008cdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f003 0308 	and.w	r3, r3, #8
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01b      	beq.n	8008cdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f06f 0208 	mvn.w	r2, #8
 8008cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2204      	movs	r2, #4
 8008cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa19 	bl	80090fa <HAL_TIM_IC_CaptureCallback>
 8008cc8:	e005      	b.n	8008cd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa0b 	bl	80090e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fa1c 	bl	800910e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f003 0310 	and.w	r3, r3, #16
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d020      	beq.n	8008d28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01b      	beq.n	8008d28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f06f 0210 	mvn.w	r2, #16
 8008cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f9f3 	bl	80090fa <HAL_TIM_IC_CaptureCallback>
 8008d14:	e005      	b.n	8008d22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f9e5 	bl	80090e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f9f6 	bl	800910e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00c      	beq.n	8008d4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d007      	beq.n	8008d4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f06f 0201 	mvn.w	r2, #1
 8008d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9c3 	bl	80090d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00c      	beq.n	8008d70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d007      	beq.n	8008d70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fdd8 	bl	8009920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9c7 	bl	8009122 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f003 0320 	and.w	r3, r3, #32
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00c      	beq.n	8008db8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d007      	beq.n	8008db8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0220 	mvn.w	r2, #32
 8008db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fdaa 	bl	800990c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d101      	bne.n	8008dde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e0ae      	b.n	8008f3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b0c      	cmp	r3, #12
 8008dea:	f200 809f 	bhi.w	8008f2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008dee:	a201      	add	r2, pc, #4	@ (adr r2, 8008df4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e29 	.word	0x08008e29
 8008df8:	08008f2d 	.word	0x08008f2d
 8008dfc:	08008f2d 	.word	0x08008f2d
 8008e00:	08008f2d 	.word	0x08008f2d
 8008e04:	08008e69 	.word	0x08008e69
 8008e08:	08008f2d 	.word	0x08008f2d
 8008e0c:	08008f2d 	.word	0x08008f2d
 8008e10:	08008f2d 	.word	0x08008f2d
 8008e14:	08008eab 	.word	0x08008eab
 8008e18:	08008f2d 	.word	0x08008f2d
 8008e1c:	08008f2d 	.word	0x08008f2d
 8008e20:	08008f2d 	.word	0x08008f2d
 8008e24:	08008eeb 	.word	0x08008eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fa2e 	bl	8009290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	699a      	ldr	r2, [r3, #24]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0208 	orr.w	r2, r2, #8
 8008e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699a      	ldr	r2, [r3, #24]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 0204 	bic.w	r2, r2, #4
 8008e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6999      	ldr	r1, [r3, #24]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	691a      	ldr	r2, [r3, #16]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	619a      	str	r2, [r3, #24]
      break;
 8008e66:	e064      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fa7e 	bl	8009370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699a      	ldr	r2, [r3, #24]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	699a      	ldr	r2, [r3, #24]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6999      	ldr	r1, [r3, #24]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	021a      	lsls	r2, r3, #8
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	619a      	str	r2, [r3, #24]
      break;
 8008ea8:	e043      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fad3 	bl	800945c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69da      	ldr	r2, [r3, #28]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f042 0208 	orr.w	r2, r2, #8
 8008ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	69da      	ldr	r2, [r3, #28]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0204 	bic.w	r2, r2, #4
 8008ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69d9      	ldr	r1, [r3, #28]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	61da      	str	r2, [r3, #28]
      break;
 8008ee8:	e023      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fb27 	bl	8009544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	69da      	ldr	r2, [r3, #28]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	69da      	ldr	r2, [r3, #28]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69d9      	ldr	r1, [r3, #28]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	021a      	lsls	r2, r3, #8
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	61da      	str	r2, [r3, #28]
      break;
 8008f2a:	e002      	b.n	8008f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d101      	bne.n	8008f60 <HAL_TIM_ConfigClockSource+0x1c>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e0b4      	b.n	80090ca <HAL_TIM_ConfigClockSource+0x186>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f98:	d03e      	beq.n	8009018 <HAL_TIM_ConfigClockSource+0xd4>
 8008f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f9e:	f200 8087 	bhi.w	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fa6:	f000 8086 	beq.w	80090b6 <HAL_TIM_ConfigClockSource+0x172>
 8008faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fae:	d87f      	bhi.n	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb0:	2b70      	cmp	r3, #112	@ 0x70
 8008fb2:	d01a      	beq.n	8008fea <HAL_TIM_ConfigClockSource+0xa6>
 8008fb4:	2b70      	cmp	r3, #112	@ 0x70
 8008fb6:	d87b      	bhi.n	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb8:	2b60      	cmp	r3, #96	@ 0x60
 8008fba:	d050      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x11a>
 8008fbc:	2b60      	cmp	r3, #96	@ 0x60
 8008fbe:	d877      	bhi.n	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc0:	2b50      	cmp	r3, #80	@ 0x50
 8008fc2:	d03c      	beq.n	800903e <HAL_TIM_ConfigClockSource+0xfa>
 8008fc4:	2b50      	cmp	r3, #80	@ 0x50
 8008fc6:	d873      	bhi.n	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc8:	2b40      	cmp	r3, #64	@ 0x40
 8008fca:	d058      	beq.n	800907e <HAL_TIM_ConfigClockSource+0x13a>
 8008fcc:	2b40      	cmp	r3, #64	@ 0x40
 8008fce:	d86f      	bhi.n	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fd0:	2b30      	cmp	r3, #48	@ 0x30
 8008fd2:	d064      	beq.n	800909e <HAL_TIM_ConfigClockSource+0x15a>
 8008fd4:	2b30      	cmp	r3, #48	@ 0x30
 8008fd6:	d86b      	bhi.n	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d060      	beq.n	800909e <HAL_TIM_ConfigClockSource+0x15a>
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d867      	bhi.n	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d05c      	beq.n	800909e <HAL_TIM_ConfigClockSource+0x15a>
 8008fe4:	2b10      	cmp	r3, #16
 8008fe6:	d05a      	beq.n	800909e <HAL_TIM_ConfigClockSource+0x15a>
 8008fe8:	e062      	b.n	80090b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ffa:	f000 fb73 	bl	80096e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800900c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	609a      	str	r2, [r3, #8]
      break;
 8009016:	e04f      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009028:	f000 fb5c 	bl	80096e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800903a:	609a      	str	r2, [r3, #8]
      break;
 800903c:	e03c      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800904a:	461a      	mov	r2, r3
 800904c:	f000 fad0 	bl	80095f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2150      	movs	r1, #80	@ 0x50
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fb29 	bl	80096ae <TIM_ITRx_SetConfig>
      break;
 800905c:	e02c      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800906a:	461a      	mov	r2, r3
 800906c:	f000 faef 	bl	800964e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2160      	movs	r1, #96	@ 0x60
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fb19 	bl	80096ae <TIM_ITRx_SetConfig>
      break;
 800907c:	e01c      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800908a:	461a      	mov	r2, r3
 800908c:	f000 fab0 	bl	80095f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2140      	movs	r1, #64	@ 0x40
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fb09 	bl	80096ae <TIM_ITRx_SetConfig>
      break;
 800909c:	e00c      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f000 fb00 	bl	80096ae <TIM_ITRx_SetConfig>
      break;
 80090ae:	e003      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	73fb      	strb	r3, [r7, #15]
      break;
 80090b4:	e000      	b.n	80090b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
	...

08009138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a46      	ldr	r2, [pc, #280]	@ (8009264 <TIM_Base_SetConfig+0x12c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d013      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009156:	d00f      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a43      	ldr	r2, [pc, #268]	@ (8009268 <TIM_Base_SetConfig+0x130>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00b      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a42      	ldr	r2, [pc, #264]	@ (800926c <TIM_Base_SetConfig+0x134>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d007      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a41      	ldr	r2, [pc, #260]	@ (8009270 <TIM_Base_SetConfig+0x138>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d003      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a40      	ldr	r2, [pc, #256]	@ (8009274 <TIM_Base_SetConfig+0x13c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d108      	bne.n	800918a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800917e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a35      	ldr	r2, [pc, #212]	@ (8009264 <TIM_Base_SetConfig+0x12c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d02b      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009198:	d027      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a32      	ldr	r2, [pc, #200]	@ (8009268 <TIM_Base_SetConfig+0x130>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d023      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a31      	ldr	r2, [pc, #196]	@ (800926c <TIM_Base_SetConfig+0x134>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d01f      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a30      	ldr	r2, [pc, #192]	@ (8009270 <TIM_Base_SetConfig+0x138>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d01b      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a2f      	ldr	r2, [pc, #188]	@ (8009274 <TIM_Base_SetConfig+0x13c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d017      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009278 <TIM_Base_SetConfig+0x140>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d013      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2d      	ldr	r2, [pc, #180]	@ (800927c <TIM_Base_SetConfig+0x144>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00f      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009280 <TIM_Base_SetConfig+0x148>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00b      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a2b      	ldr	r2, [pc, #172]	@ (8009284 <TIM_Base_SetConfig+0x14c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d007      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a2a      	ldr	r2, [pc, #168]	@ (8009288 <TIM_Base_SetConfig+0x150>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d003      	beq.n	80091ea <TIM_Base_SetConfig+0xb2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a29      	ldr	r2, [pc, #164]	@ (800928c <TIM_Base_SetConfig+0x154>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d108      	bne.n	80091fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a10      	ldr	r2, [pc, #64]	@ (8009264 <TIM_Base_SetConfig+0x12c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d003      	beq.n	8009230 <TIM_Base_SetConfig+0xf8>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a12      	ldr	r2, [pc, #72]	@ (8009274 <TIM_Base_SetConfig+0x13c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d103      	bne.n	8009238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b01      	cmp	r3, #1
 8009248:	d105      	bne.n	8009256 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	f023 0201 	bic.w	r2, r3, #1
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	611a      	str	r2, [r3, #16]
  }
}
 8009256:	bf00      	nop
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	40010000 	.word	0x40010000
 8009268:	40000400 	.word	0x40000400
 800926c:	40000800 	.word	0x40000800
 8009270:	40000c00 	.word	0x40000c00
 8009274:	40010400 	.word	0x40010400
 8009278:	40014000 	.word	0x40014000
 800927c:	40014400 	.word	0x40014400
 8009280:	40014800 	.word	0x40014800
 8009284:	40001800 	.word	0x40001800
 8009288:	40001c00 	.word	0x40001c00
 800928c:	40002000 	.word	0x40002000

08009290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	f023 0201 	bic.w	r2, r3, #1
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f023 0302 	bic.w	r3, r3, #2
 80092d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a20      	ldr	r2, [pc, #128]	@ (8009368 <TIM_OC1_SetConfig+0xd8>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d003      	beq.n	80092f4 <TIM_OC1_SetConfig+0x64>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a1f      	ldr	r2, [pc, #124]	@ (800936c <TIM_OC1_SetConfig+0xdc>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d10c      	bne.n	800930e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f023 0308 	bic.w	r3, r3, #8
 80092fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f023 0304 	bic.w	r3, r3, #4
 800930c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a15      	ldr	r2, [pc, #84]	@ (8009368 <TIM_OC1_SetConfig+0xd8>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d003      	beq.n	800931e <TIM_OC1_SetConfig+0x8e>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a14      	ldr	r2, [pc, #80]	@ (800936c <TIM_OC1_SetConfig+0xdc>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d111      	bne.n	8009342 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800932c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	4313      	orrs	r3, r2
 8009340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	621a      	str	r2, [r3, #32]
}
 800935c:	bf00      	nop
 800935e:	371c      	adds	r7, #28
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	40010000 	.word	0x40010000
 800936c:	40010400 	.word	0x40010400

08009370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	f023 0210 	bic.w	r2, r3, #16
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800939e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f023 0320 	bic.w	r3, r3, #32
 80093ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a22      	ldr	r2, [pc, #136]	@ (8009454 <TIM_OC2_SetConfig+0xe4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d003      	beq.n	80093d8 <TIM_OC2_SetConfig+0x68>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a21      	ldr	r2, [pc, #132]	@ (8009458 <TIM_OC2_SetConfig+0xe8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d10d      	bne.n	80093f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a17      	ldr	r2, [pc, #92]	@ (8009454 <TIM_OC2_SetConfig+0xe4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d003      	beq.n	8009404 <TIM_OC2_SetConfig+0x94>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a16      	ldr	r2, [pc, #88]	@ (8009458 <TIM_OC2_SetConfig+0xe8>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d113      	bne.n	800942c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800940a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	4313      	orrs	r3, r2
 800941e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	4313      	orrs	r3, r2
 800942a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	621a      	str	r2, [r3, #32]
}
 8009446:	bf00      	nop
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	40010000 	.word	0x40010000
 8009458:	40010400 	.word	0x40010400

0800945c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800948a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a21      	ldr	r2, [pc, #132]	@ (800953c <TIM_OC3_SetConfig+0xe0>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d003      	beq.n	80094c2 <TIM_OC3_SetConfig+0x66>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a20      	ldr	r2, [pc, #128]	@ (8009540 <TIM_OC3_SetConfig+0xe4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d10d      	bne.n	80094de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	021b      	lsls	r3, r3, #8
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a16      	ldr	r2, [pc, #88]	@ (800953c <TIM_OC3_SetConfig+0xe0>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d003      	beq.n	80094ee <TIM_OC3_SetConfig+0x92>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a15      	ldr	r2, [pc, #84]	@ (8009540 <TIM_OC3_SetConfig+0xe4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d113      	bne.n	8009516 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	4313      	orrs	r3, r2
 8009508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	4313      	orrs	r3, r2
 8009514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	621a      	str	r2, [r3, #32]
}
 8009530:	bf00      	nop
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	40010000 	.word	0x40010000
 8009540:	40010400 	.word	0x40010400

08009544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800957a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4313      	orrs	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800958e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	031b      	lsls	r3, r3, #12
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	4313      	orrs	r3, r2
 800959a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a12      	ldr	r2, [pc, #72]	@ (80095e8 <TIM_OC4_SetConfig+0xa4>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_OC4_SetConfig+0x68>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a11      	ldr	r2, [pc, #68]	@ (80095ec <TIM_OC4_SetConfig+0xa8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d109      	bne.n	80095c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	019b      	lsls	r3, r3, #6
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40010400 	.word	0x40010400

080095f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	f023 0201 	bic.w	r2, r3, #1
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800961a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f023 030a 	bic.w	r3, r3, #10
 800962c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4313      	orrs	r3, r2
 8009634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	621a      	str	r2, [r3, #32]
}
 8009642:	bf00      	nop
 8009644:	371c      	adds	r7, #28
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800964e:	b480      	push	{r7}
 8009650:	b087      	sub	sp, #28
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	f023 0210 	bic.w	r2, r3, #16
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	031b      	lsls	r3, r3, #12
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800968a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	4313      	orrs	r3, r2
 8009694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	621a      	str	r2, [r3, #32]
}
 80096a2:	bf00      	nop
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b085      	sub	sp, #20
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	f043 0307 	orr.w	r3, r3, #7
 80096d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	609a      	str	r2, [r3, #8]
}
 80096d8:	bf00      	nop
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	021a      	lsls	r2, r3, #8
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	431a      	orrs	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4313      	orrs	r3, r2
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	609a      	str	r2, [r3, #8]
}
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 031f 	and.w	r3, r3, #31
 8009736:	2201      	movs	r2, #1
 8009738:	fa02 f303 	lsl.w	r3, r2, r3
 800973c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	43db      	mvns	r3, r3
 8009746:	401a      	ands	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a1a      	ldr	r2, [r3, #32]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f003 031f 	and.w	r3, r3, #31
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	fa01 f303 	lsl.w	r3, r1, r3
 800975c:	431a      	orrs	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	621a      	str	r2, [r3, #32]
}
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009784:	2302      	movs	r3, #2
 8009786:	e05a      	b.n	800983e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a21      	ldr	r2, [pc, #132]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d022      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d4:	d01d      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1d      	ldr	r2, [pc, #116]	@ (8009850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d018      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d013      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a1a      	ldr	r2, [pc, #104]	@ (8009858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00e      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a18      	ldr	r2, [pc, #96]	@ (800985c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d009      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a17      	ldr	r2, [pc, #92]	@ (8009860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d004      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a15      	ldr	r2, [pc, #84]	@ (8009864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d10c      	bne.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	4313      	orrs	r3, r2
 8009822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	40010000 	.word	0x40010000
 8009850:	40000400 	.word	0x40000400
 8009854:	40000800 	.word	0x40000800
 8009858:	40000c00 	.word	0x40000c00
 800985c:	40010400 	.word	0x40010400
 8009860:	40014000 	.word	0x40014000
 8009864:	40001800 	.word	0x40001800

08009868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009880:	2302      	movs	r3, #2
 8009882:	e03d      	b.n	8009900 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	4313      	orrs	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e042      	b.n	80099cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7f9 fb02 	bl	8002f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2224      	movs	r2, #36	@ 0x24
 8009964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fdbd 	bl	800a4f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	691a      	ldr	r2, [r3, #16]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800998c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	695a      	ldr	r2, [r3, #20]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800999c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68da      	ldr	r2, [r3, #12]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2220      	movs	r2, #32
 80099b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	@ 0x28
 80099d8:	af02      	add	r7, sp, #8
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	4613      	mov	r3, r2
 80099e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d175      	bne.n	8009ae0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <HAL_UART_Transmit+0x2c>
 80099fa:	88fb      	ldrh	r3, [r7, #6]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e06e      	b.n	8009ae2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2221      	movs	r2, #33	@ 0x21
 8009a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a12:	f7f9 fccd 	bl	80033b0 <HAL_GetTick>
 8009a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	88fa      	ldrh	r2, [r7, #6]
 8009a1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	88fa      	ldrh	r2, [r7, #6]
 8009a22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a2c:	d108      	bne.n	8009a40 <HAL_UART_Transmit+0x6c>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d104      	bne.n	8009a40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	61bb      	str	r3, [r7, #24]
 8009a3e:	e003      	b.n	8009a48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a44:	2300      	movs	r3, #0
 8009a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a48:	e02e      	b.n	8009aa8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2200      	movs	r2, #0
 8009a52:	2180      	movs	r1, #128	@ 0x80
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 fb1f 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e03a      	b.n	8009ae2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	3302      	adds	r3, #2
 8009a86:	61bb      	str	r3, [r7, #24]
 8009a88:	e007      	b.n	8009a9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	781a      	ldrb	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	3301      	adds	r3, #1
 8009a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1cb      	bne.n	8009a4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2140      	movs	r1, #64	@ 0x40
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 faeb 	bl	800a098 <UART_WaitOnFlagUntilTimeout>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2220      	movs	r2, #32
 8009acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e006      	b.n	8009ae2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	e000      	b.n	8009ae2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009ae0:	2302      	movs	r3, #2
  }
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3720      	adds	r7, #32
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	4613      	mov	r3, r2
 8009af6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	d112      	bne.n	8009b2a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <HAL_UART_Receive_IT+0x26>
 8009b0a:	88fb      	ldrh	r3, [r7, #6]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e00b      	b.n	8009b2c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 fb12 	bl	800a14a <UART_Start_Receive_IT>
 8009b26:	4603      	mov	r3, r0
 8009b28:	e000      	b.n	8009b2c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009b2a:	2302      	movs	r3, #2
  }
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b0ba      	sub	sp, #232	@ 0xe8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b6a:	f003 030f 	and.w	r3, r3, #15
 8009b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10f      	bne.n	8009b9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d009      	beq.n	8009b9a <HAL_UART_IRQHandler+0x66>
 8009b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fbf2 	bl	800a37c <UART_Receive_IT>
      return;
 8009b98:	e25b      	b.n	800a052 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 80de 	beq.w	8009d60 <HAL_UART_IRQHandler+0x22c>
 8009ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 80d1 	beq.w	8009d60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00b      	beq.n	8009be2 <HAL_UART_IRQHandler+0xae>
 8009bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bda:	f043 0201 	orr.w	r2, r3, #1
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be6:	f003 0304 	and.w	r3, r3, #4
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00b      	beq.n	8009c06 <HAL_UART_IRQHandler+0xd2>
 8009bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d005      	beq.n	8009c06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfe:	f043 0202 	orr.w	r2, r3, #2
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00b      	beq.n	8009c2a <HAL_UART_IRQHandler+0xf6>
 8009c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c22:	f043 0204 	orr.w	r2, r3, #4
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2e:	f003 0308 	and.w	r3, r3, #8
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d011      	beq.n	8009c5a <HAL_UART_IRQHandler+0x126>
 8009c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d105      	bne.n	8009c4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d005      	beq.n	8009c5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c52:	f043 0208 	orr.w	r2, r3, #8
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 81f2 	beq.w	800a048 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c68:	f003 0320 	and.w	r3, r3, #32
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d008      	beq.n	8009c82 <HAL_UART_IRQHandler+0x14e>
 8009c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fb7d 	bl	800a37c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8c:	2b40      	cmp	r3, #64	@ 0x40
 8009c8e:	bf0c      	ite	eq
 8009c90:	2301      	moveq	r3, #1
 8009c92:	2300      	movne	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c9e:	f003 0308 	and.w	r3, r3, #8
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <HAL_UART_IRQHandler+0x17a>
 8009ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d04f      	beq.n	8009d4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa85 	bl	800a1be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cbe:	2b40      	cmp	r3, #64	@ 0x40
 8009cc0:	d141      	bne.n	8009d46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3314      	adds	r3, #20
 8009cc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3314      	adds	r3, #20
 8009cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009cee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1d9      	bne.n	8009cc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d013      	beq.n	8009d3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8009f14 <HAL_UART_IRQHandler+0x3e0>)
 8009d1c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fa fcda 	bl	80046dc <HAL_DMA_Abort_IT>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d016      	beq.n	8009d5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009d38:	4610      	mov	r0, r2
 8009d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3c:	e00e      	b.n	8009d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f994 	bl	800a06c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d44:	e00a      	b.n	8009d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f990 	bl	800a06c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d4c:	e006      	b.n	8009d5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f98c 	bl	800a06c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009d5a:	e175      	b.n	800a048 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d5c:	bf00      	nop
    return;
 8009d5e:	e173      	b.n	800a048 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	f040 814f 	bne.w	800a008 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d6e:	f003 0310 	and.w	r3, r3, #16
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f000 8148 	beq.w	800a008 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d7c:	f003 0310 	and.w	r3, r3, #16
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 8141 	beq.w	800a008 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d86:	2300      	movs	r3, #0
 8009d88:	60bb      	str	r3, [r7, #8]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	60bb      	str	r3, [r7, #8]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	60bb      	str	r3, [r7, #8]
 8009d9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da6:	2b40      	cmp	r3, #64	@ 0x40
 8009da8:	f040 80b6 	bne.w	8009f18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009db8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8145 	beq.w	800a04c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	f080 813e 	bcs.w	800a04c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009de2:	f000 8088 	beq.w	8009ef6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	330c      	adds	r3, #12
 8009dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	330c      	adds	r3, #12
 8009e0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009e12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1d9      	bne.n	8009de6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3314      	adds	r3, #20
 8009e38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e44:	f023 0301 	bic.w	r3, r3, #1
 8009e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3314      	adds	r3, #20
 8009e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e1      	bne.n	8009e32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3314      	adds	r3, #20
 8009e74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3314      	adds	r3, #20
 8009e8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e3      	bne.n	8009e6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	330c      	adds	r3, #12
 8009eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ec6:	f023 0310 	bic.w	r3, r3, #16
 8009eca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	330c      	adds	r3, #12
 8009ed4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009ed8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009eda:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ede:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ee0:	e841 2300 	strex	r3, r2, [r1]
 8009ee4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e3      	bne.n	8009eb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fa fb83 	bl	80045fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f8b7 	bl	800a080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f12:	e09b      	b.n	800a04c <HAL_UART_IRQHandler+0x518>
 8009f14:	0800a285 	.word	0x0800a285
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 808e 	beq.w	800a050 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 8089 	beq.w	800a050 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	330c      	adds	r3, #12
 8009f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	330c      	adds	r3, #12
 8009f5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009f62:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e3      	bne.n	8009f3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3314      	adds	r3, #20
 8009f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	623b      	str	r3, [r7, #32]
   return(result);
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	f023 0301 	bic.w	r3, r3, #1
 8009f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3314      	adds	r3, #20
 8009f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e3      	bne.n	8009f76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f023 0310 	bic.w	r3, r3, #16
 8009fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	330c      	adds	r3, #12
 8009fdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009fe0:	61fa      	str	r2, [r7, #28]
 8009fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	69b9      	ldr	r1, [r7, #24]
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	617b      	str	r3, [r7, #20]
   return(result);
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e3      	bne.n	8009fbc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ffa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f83d 	bl	800a080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a006:	e023      	b.n	800a050 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a00c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a010:	2b00      	cmp	r3, #0
 800a012:	d009      	beq.n	800a028 <HAL_UART_IRQHandler+0x4f4>
 800a014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f943 	bl	800a2ac <UART_Transmit_IT>
    return;
 800a026:	e014      	b.n	800a052 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a02c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00e      	beq.n	800a052 <HAL_UART_IRQHandler+0x51e>
 800a034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d008      	beq.n	800a052 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f983 	bl	800a34c <UART_EndTransmit_IT>
    return;
 800a046:	e004      	b.n	800a052 <HAL_UART_IRQHandler+0x51e>
    return;
 800a048:	bf00      	nop
 800a04a:	e002      	b.n	800a052 <HAL_UART_IRQHandler+0x51e>
      return;
 800a04c:	bf00      	nop
 800a04e:	e000      	b.n	800a052 <HAL_UART_IRQHandler+0x51e>
      return;
 800a050:	bf00      	nop
  }
}
 800a052:	37e8      	adds	r7, #232	@ 0xe8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	603b      	str	r3, [r7, #0]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a8:	e03b      	b.n	800a122 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b0:	d037      	beq.n	800a122 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0b2:	f7f9 f97d 	bl	80033b0 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	6a3a      	ldr	r2, [r7, #32]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d302      	bcc.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e03a      	b.n	800a142 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f003 0304 	and.w	r3, r3, #4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d023      	beq.n	800a122 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b80      	cmp	r3, #128	@ 0x80
 800a0de:	d020      	beq.n	800a122 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b40      	cmp	r3, #64	@ 0x40
 800a0e4:	d01d      	beq.n	800a122 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0308 	and.w	r3, r3, #8
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d116      	bne.n	800a122 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	617b      	str	r3, [r7, #20]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 f857 	bl	800a1be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2208      	movs	r2, #8
 800a114:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e00f      	b.n	800a142 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4013      	ands	r3, r2
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	429a      	cmp	r2, r3
 800a130:	bf0c      	ite	eq
 800a132:	2301      	moveq	r3, #1
 800a134:	2300      	movne	r3, #0
 800a136:	b2db      	uxtb	r3, r3
 800a138:	461a      	mov	r2, r3
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d0b4      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	60b9      	str	r1, [r7, #8]
 800a154:	4613      	mov	r3, r2
 800a156:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	88fa      	ldrh	r2, [r7, #6]
 800a162:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	88fa      	ldrh	r2, [r7, #6]
 800a168:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2222      	movs	r2, #34	@ 0x22
 800a174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d007      	beq.n	800a190 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a18e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	695a      	ldr	r2, [r3, #20]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f042 0201 	orr.w	r2, r2, #1
 800a19e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68da      	ldr	r2, [r3, #12]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0220 	orr.w	r2, r2, #32
 800a1ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b095      	sub	sp, #84	@ 0x54
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	330c      	adds	r3, #12
 800a1cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d0:	e853 3f00 	ldrex	r3, [r3]
 800a1d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	330c      	adds	r3, #12
 800a1e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1e6:	643a      	str	r2, [r7, #64]	@ 0x40
 800a1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e5      	bne.n	800a1c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3314      	adds	r3, #20
 800a200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	61fb      	str	r3, [r7, #28]
   return(result);
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	f023 0301 	bic.w	r3, r3, #1
 800a210:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3314      	adds	r3, #20
 800a218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a21a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a21c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e5      	bne.n	800a1fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a232:	2b01      	cmp	r3, #1
 800a234:	d119      	bne.n	800a26a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	330c      	adds	r3, #12
 800a23c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	60bb      	str	r3, [r7, #8]
   return(result);
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f023 0310 	bic.w	r3, r3, #16
 800a24c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	330c      	adds	r3, #12
 800a254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a256:	61ba      	str	r2, [r7, #24]
 800a258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	6979      	ldr	r1, [r7, #20]
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	613b      	str	r3, [r7, #16]
   return(result);
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e5      	bne.n	800a236 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a278:	bf00      	nop
 800a27a:	3754      	adds	r7, #84	@ 0x54
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7ff fee4 	bl	800a06c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a4:	bf00      	nop
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b21      	cmp	r3, #33	@ 0x21
 800a2be:	d13e      	bne.n	800a33e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c8:	d114      	bne.n	800a2f4 <UART_Transmit_IT+0x48>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d110      	bne.n	800a2f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	1c9a      	adds	r2, r3, #2
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	621a      	str	r2, [r3, #32]
 800a2f2:	e008      	b.n	800a306 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	1c59      	adds	r1, r3, #1
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	6211      	str	r1, [r2, #32]
 800a2fe:	781a      	ldrb	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	3b01      	subs	r3, #1
 800a30e:	b29b      	uxth	r3, r3
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	4619      	mov	r1, r3
 800a314:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10f      	bne.n	800a33a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68da      	ldr	r2, [r3, #12]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a328:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a338:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	e000      	b.n	800a340 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a33e:	2302      	movs	r3, #2
  }
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a362:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2220      	movs	r2, #32
 800a368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff fe73 	bl	800a058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08c      	sub	sp, #48	@ 0x30
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b22      	cmp	r3, #34	@ 0x22
 800a38e:	f040 80ae 	bne.w	800a4ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a39a:	d117      	bne.n	800a3cc <UART_Receive_IT+0x50>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d113      	bne.n	800a3cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c4:	1c9a      	adds	r2, r3, #2
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	629a      	str	r2, [r3, #40]	@ 0x28
 800a3ca:	e026      	b.n	800a41a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3de:	d007      	beq.n	800a3f0 <UART_Receive_IT+0x74>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <UART_Receive_IT+0x82>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fa:	701a      	strb	r2, [r3, #0]
 800a3fc:	e008      	b.n	800a410 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	b2db      	uxtb	r3, r3
 800a406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a41e:	b29b      	uxth	r3, r3
 800a420:	3b01      	subs	r3, #1
 800a422:	b29b      	uxth	r3, r3
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	4619      	mov	r1, r3
 800a428:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d15d      	bne.n	800a4ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f022 0220 	bic.w	r2, r2, #32
 800a43c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a44c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	695a      	ldr	r2, [r3, #20]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0201 	bic.w	r2, r2, #1
 800a45c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2220      	movs	r2, #32
 800a462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a470:	2b01      	cmp	r3, #1
 800a472:	d135      	bne.n	800a4e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	330c      	adds	r3, #12
 800a480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	613b      	str	r3, [r7, #16]
   return(result);
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f023 0310 	bic.w	r3, r3, #16
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	330c      	adds	r3, #12
 800a498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a49a:	623a      	str	r2, [r7, #32]
 800a49c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49e:	69f9      	ldr	r1, [r7, #28]
 800a4a0:	6a3a      	ldr	r2, [r7, #32]
 800a4a2:	e841 2300 	strex	r3, r2, [r1]
 800a4a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e5      	bne.n	800a47a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0310 	and.w	r3, r3, #16
 800a4b8:	2b10      	cmp	r3, #16
 800a4ba:	d10a      	bne.n	800a4d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff fdd1 	bl	800a080 <HAL_UARTEx_RxEventCallback>
 800a4de:	e002      	b.n	800a4e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7f7 fb35 	bl	8001b50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e002      	b.n	800a4f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e000      	b.n	800a4f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a4ee:	2302      	movs	r3, #2
  }
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3730      	adds	r7, #48	@ 0x30
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4fc:	b0c0      	sub	sp, #256	@ 0x100
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a514:	68d9      	ldr	r1, [r3, #12]
 800a516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	ea40 0301 	orr.w	r3, r0, r1
 800a520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	431a      	orrs	r2, r3
 800a530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	431a      	orrs	r2, r3
 800a538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	4313      	orrs	r3, r2
 800a540:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a550:	f021 010c 	bic.w	r1, r1, #12
 800a554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a55e:	430b      	orrs	r3, r1
 800a560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a572:	6999      	ldr	r1, [r3, #24]
 800a574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	ea40 0301 	orr.w	r3, r0, r1
 800a57e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	4b8f      	ldr	r3, [pc, #572]	@ (800a7c4 <UART_SetConfig+0x2cc>)
 800a588:	429a      	cmp	r2, r3
 800a58a:	d005      	beq.n	800a598 <UART_SetConfig+0xa0>
 800a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	4b8d      	ldr	r3, [pc, #564]	@ (800a7c8 <UART_SetConfig+0x2d0>)
 800a594:	429a      	cmp	r2, r3
 800a596:	d104      	bne.n	800a5a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a598:	f7fd fc4a 	bl	8007e30 <HAL_RCC_GetPCLK2Freq>
 800a59c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a5a0:	e003      	b.n	800a5aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5a2:	f7fd fc31 	bl	8007e08 <HAL_RCC_GetPCLK1Freq>
 800a5a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5b4:	f040 810c 	bne.w	800a7d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a5c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	462b      	mov	r3, r5
 800a5ce:	1891      	adds	r1, r2, r2
 800a5d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a5d2:	415b      	adcs	r3, r3
 800a5d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a5da:	4621      	mov	r1, r4
 800a5dc:	eb12 0801 	adds.w	r8, r2, r1
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	eb43 0901 	adc.w	r9, r3, r1
 800a5e6:	f04f 0200 	mov.w	r2, #0
 800a5ea:	f04f 0300 	mov.w	r3, #0
 800a5ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a5fa:	4690      	mov	r8, r2
 800a5fc:	4699      	mov	r9, r3
 800a5fe:	4623      	mov	r3, r4
 800a600:	eb18 0303 	adds.w	r3, r8, r3
 800a604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a608:	462b      	mov	r3, r5
 800a60a:	eb49 0303 	adc.w	r3, r9, r3
 800a60e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a61e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a626:	460b      	mov	r3, r1
 800a628:	18db      	adds	r3, r3, r3
 800a62a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a62c:	4613      	mov	r3, r2
 800a62e:	eb42 0303 	adc.w	r3, r2, r3
 800a632:	657b      	str	r3, [r7, #84]	@ 0x54
 800a634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a63c:	f7f6 fb84 	bl	8000d48 <__aeabi_uldivmod>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4b61      	ldr	r3, [pc, #388]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a646:	fba3 2302 	umull	r2, r3, r3, r2
 800a64a:	095b      	lsrs	r3, r3, #5
 800a64c:	011c      	lsls	r4, r3, #4
 800a64e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a652:	2200      	movs	r2, #0
 800a654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a658:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a65c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	1891      	adds	r1, r2, r2
 800a666:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a668:	415b      	adcs	r3, r3
 800a66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a66c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a670:	4641      	mov	r1, r8
 800a672:	eb12 0a01 	adds.w	sl, r2, r1
 800a676:	4649      	mov	r1, r9
 800a678:	eb43 0b01 	adc.w	fp, r3, r1
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a68c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a690:	4692      	mov	sl, r2
 800a692:	469b      	mov	fp, r3
 800a694:	4643      	mov	r3, r8
 800a696:	eb1a 0303 	adds.w	r3, sl, r3
 800a69a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a69e:	464b      	mov	r3, r9
 800a6a0:	eb4b 0303 	adc.w	r3, fp, r3
 800a6a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a6b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	18db      	adds	r3, r3, r3
 800a6c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	eb42 0303 	adc.w	r3, r2, r3
 800a6c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a6ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a6d2:	f7f6 fb39 	bl	8000d48 <__aeabi_uldivmod>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4611      	mov	r1, r2
 800a6dc:	4b3b      	ldr	r3, [pc, #236]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a6de:	fba3 2301 	umull	r2, r3, r3, r1
 800a6e2:	095b      	lsrs	r3, r3, #5
 800a6e4:	2264      	movs	r2, #100	@ 0x64
 800a6e6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ea:	1acb      	subs	r3, r1, r3
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a6f2:	4b36      	ldr	r3, [pc, #216]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a6f4:	fba3 2302 	umull	r2, r3, r3, r2
 800a6f8:	095b      	lsrs	r3, r3, #5
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a700:	441c      	add	r4, r3
 800a702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a706:	2200      	movs	r2, #0
 800a708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a70c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	1891      	adds	r1, r2, r2
 800a71a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a71c:	415b      	adcs	r3, r3
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a724:	4641      	mov	r1, r8
 800a726:	1851      	adds	r1, r2, r1
 800a728:	6339      	str	r1, [r7, #48]	@ 0x30
 800a72a:	4649      	mov	r1, r9
 800a72c:	414b      	adcs	r3, r1
 800a72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	f04f 0300 	mov.w	r3, #0
 800a738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a73c:	4659      	mov	r1, fp
 800a73e:	00cb      	lsls	r3, r1, #3
 800a740:	4651      	mov	r1, sl
 800a742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a746:	4651      	mov	r1, sl
 800a748:	00ca      	lsls	r2, r1, #3
 800a74a:	4610      	mov	r0, r2
 800a74c:	4619      	mov	r1, r3
 800a74e:	4603      	mov	r3, r0
 800a750:	4642      	mov	r2, r8
 800a752:	189b      	adds	r3, r3, r2
 800a754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a758:	464b      	mov	r3, r9
 800a75a:	460a      	mov	r2, r1
 800a75c:	eb42 0303 	adc.w	r3, r2, r3
 800a760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a770:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a778:	460b      	mov	r3, r1
 800a77a:	18db      	adds	r3, r3, r3
 800a77c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a77e:	4613      	mov	r3, r2
 800a780:	eb42 0303 	adc.w	r3, r2, r3
 800a784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a78a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a78e:	f7f6 fadb 	bl	8000d48 <__aeabi_uldivmod>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	4b0d      	ldr	r3, [pc, #52]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a798:	fba3 1302 	umull	r1, r3, r3, r2
 800a79c:	095b      	lsrs	r3, r3, #5
 800a79e:	2164      	movs	r1, #100	@ 0x64
 800a7a0:	fb01 f303 	mul.w	r3, r1, r3
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	3332      	adds	r3, #50	@ 0x32
 800a7aa:	4a08      	ldr	r2, [pc, #32]	@ (800a7cc <UART_SetConfig+0x2d4>)
 800a7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b0:	095b      	lsrs	r3, r3, #5
 800a7b2:	f003 0207 	and.w	r2, r3, #7
 800a7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4422      	add	r2, r4
 800a7be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7c0:	e106      	b.n	800a9d0 <UART_SetConfig+0x4d8>
 800a7c2:	bf00      	nop
 800a7c4:	40011000 	.word	0x40011000
 800a7c8:	40011400 	.word	0x40011400
 800a7cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a7de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a7e2:	4642      	mov	r2, r8
 800a7e4:	464b      	mov	r3, r9
 800a7e6:	1891      	adds	r1, r2, r2
 800a7e8:	6239      	str	r1, [r7, #32]
 800a7ea:	415b      	adcs	r3, r3
 800a7ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7f2:	4641      	mov	r1, r8
 800a7f4:	1854      	adds	r4, r2, r1
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	eb43 0501 	adc.w	r5, r3, r1
 800a7fc:	f04f 0200 	mov.w	r2, #0
 800a800:	f04f 0300 	mov.w	r3, #0
 800a804:	00eb      	lsls	r3, r5, #3
 800a806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a80a:	00e2      	lsls	r2, r4, #3
 800a80c:	4614      	mov	r4, r2
 800a80e:	461d      	mov	r5, r3
 800a810:	4643      	mov	r3, r8
 800a812:	18e3      	adds	r3, r4, r3
 800a814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a818:	464b      	mov	r3, r9
 800a81a:	eb45 0303 	adc.w	r3, r5, r3
 800a81e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a82e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a832:	f04f 0200 	mov.w	r2, #0
 800a836:	f04f 0300 	mov.w	r3, #0
 800a83a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a83e:	4629      	mov	r1, r5
 800a840:	008b      	lsls	r3, r1, #2
 800a842:	4621      	mov	r1, r4
 800a844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a848:	4621      	mov	r1, r4
 800a84a:	008a      	lsls	r2, r1, #2
 800a84c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a850:	f7f6 fa7a 	bl	8000d48 <__aeabi_uldivmod>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4b60      	ldr	r3, [pc, #384]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a85a:	fba3 2302 	umull	r2, r3, r3, r2
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	011c      	lsls	r4, r3, #4
 800a862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a866:	2200      	movs	r2, #0
 800a868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a86c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a874:	4642      	mov	r2, r8
 800a876:	464b      	mov	r3, r9
 800a878:	1891      	adds	r1, r2, r2
 800a87a:	61b9      	str	r1, [r7, #24]
 800a87c:	415b      	adcs	r3, r3
 800a87e:	61fb      	str	r3, [r7, #28]
 800a880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a884:	4641      	mov	r1, r8
 800a886:	1851      	adds	r1, r2, r1
 800a888:	6139      	str	r1, [r7, #16]
 800a88a:	4649      	mov	r1, r9
 800a88c:	414b      	adcs	r3, r1
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a89c:	4659      	mov	r1, fp
 800a89e:	00cb      	lsls	r3, r1, #3
 800a8a0:	4651      	mov	r1, sl
 800a8a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8a6:	4651      	mov	r1, sl
 800a8a8:	00ca      	lsls	r2, r1, #3
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	189b      	adds	r3, r3, r2
 800a8b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	460a      	mov	r2, r1
 800a8bc:	eb42 0303 	adc.w	r3, r2, r3
 800a8c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a8d0:	f04f 0200 	mov.w	r2, #0
 800a8d4:	f04f 0300 	mov.w	r3, #0
 800a8d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a8dc:	4649      	mov	r1, r9
 800a8de:	008b      	lsls	r3, r1, #2
 800a8e0:	4641      	mov	r1, r8
 800a8e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8e6:	4641      	mov	r1, r8
 800a8e8:	008a      	lsls	r2, r1, #2
 800a8ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a8ee:	f7f6 fa2b 	bl	8000d48 <__aeabi_uldivmod>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4b38      	ldr	r3, [pc, #224]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a8fa:	fba3 2301 	umull	r2, r3, r3, r1
 800a8fe:	095b      	lsrs	r3, r3, #5
 800a900:	2264      	movs	r2, #100	@ 0x64
 800a902:	fb02 f303 	mul.w	r3, r2, r3
 800a906:	1acb      	subs	r3, r1, r3
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	3332      	adds	r3, #50	@ 0x32
 800a90c:	4a33      	ldr	r2, [pc, #204]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a90e:	fba2 2303 	umull	r2, r3, r2, r3
 800a912:	095b      	lsrs	r3, r3, #5
 800a914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a918:	441c      	add	r4, r3
 800a91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a91e:	2200      	movs	r2, #0
 800a920:	673b      	str	r3, [r7, #112]	@ 0x70
 800a922:	677a      	str	r2, [r7, #116]	@ 0x74
 800a924:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	1891      	adds	r1, r2, r2
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	415b      	adcs	r3, r3
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a938:	4641      	mov	r1, r8
 800a93a:	1851      	adds	r1, r2, r1
 800a93c:	6039      	str	r1, [r7, #0]
 800a93e:	4649      	mov	r1, r9
 800a940:	414b      	adcs	r3, r1
 800a942:	607b      	str	r3, [r7, #4]
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a950:	4659      	mov	r1, fp
 800a952:	00cb      	lsls	r3, r1, #3
 800a954:	4651      	mov	r1, sl
 800a956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a95a:	4651      	mov	r1, sl
 800a95c:	00ca      	lsls	r2, r1, #3
 800a95e:	4610      	mov	r0, r2
 800a960:	4619      	mov	r1, r3
 800a962:	4603      	mov	r3, r0
 800a964:	4642      	mov	r2, r8
 800a966:	189b      	adds	r3, r3, r2
 800a968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a96a:	464b      	mov	r3, r9
 800a96c:	460a      	mov	r2, r1
 800a96e:	eb42 0303 	adc.w	r3, r2, r3
 800a972:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a97e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	f04f 0300 	mov.w	r3, #0
 800a988:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a98c:	4649      	mov	r1, r9
 800a98e:	008b      	lsls	r3, r1, #2
 800a990:	4641      	mov	r1, r8
 800a992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a996:	4641      	mov	r1, r8
 800a998:	008a      	lsls	r2, r1, #2
 800a99a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a99e:	f7f6 f9d3 	bl	8000d48 <__aeabi_uldivmod>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a9a8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ac:	095b      	lsrs	r3, r3, #5
 800a9ae:	2164      	movs	r1, #100	@ 0x64
 800a9b0:	fb01 f303 	mul.w	r3, r1, r3
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	011b      	lsls	r3, r3, #4
 800a9b8:	3332      	adds	r3, #50	@ 0x32
 800a9ba:	4a08      	ldr	r2, [pc, #32]	@ (800a9dc <UART_SetConfig+0x4e4>)
 800a9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	f003 020f 	and.w	r2, r3, #15
 800a9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4422      	add	r2, r4
 800a9ce:	609a      	str	r2, [r3, #8]
}
 800a9d0:	bf00      	nop
 800a9d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9dc:	51eb851f 	.word	0x51eb851f

0800a9e0 <arm_rfft_fast_init_f32>:
 800a9e0:	084b      	lsrs	r3, r1, #1
 800a9e2:	2b80      	cmp	r3, #128	@ 0x80
 800a9e4:	b410      	push	{r4}
 800a9e6:	8201      	strh	r1, [r0, #16]
 800a9e8:	8003      	strh	r3, [r0, #0]
 800a9ea:	d047      	beq.n	800aa7c <arm_rfft_fast_init_f32+0x9c>
 800a9ec:	d917      	bls.n	800aa1e <arm_rfft_fast_init_f32+0x3e>
 800a9ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9f2:	d03d      	beq.n	800aa70 <arm_rfft_fast_init_f32+0x90>
 800a9f4:	d929      	bls.n	800aa4a <arm_rfft_fast_init_f32+0x6a>
 800a9f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9fa:	d020      	beq.n	800aa3e <arm_rfft_fast_init_f32+0x5e>
 800a9fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa00:	d113      	bne.n	800aa2a <arm_rfft_fast_init_f32+0x4a>
 800aa02:	4921      	ldr	r1, [pc, #132]	@ (800aa88 <arm_rfft_fast_init_f32+0xa8>)
 800aa04:	4a21      	ldr	r2, [pc, #132]	@ (800aa8c <arm_rfft_fast_init_f32+0xac>)
 800aa06:	4b22      	ldr	r3, [pc, #136]	@ (800aa90 <arm_rfft_fast_init_f32+0xb0>)
 800aa08:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800aa0c:	8184      	strh	r4, [r0, #12]
 800aa0e:	6081      	str	r1, [r0, #8]
 800aa10:	6042      	str	r2, [r0, #4]
 800aa12:	6143      	str	r3, [r0, #20]
 800aa14:	2000      	movs	r0, #0
 800aa16:	b240      	sxtb	r0, r0
 800aa18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	2b20      	cmp	r3, #32
 800aa20:	d01c      	beq.n	800aa5c <arm_rfft_fast_init_f32+0x7c>
 800aa22:	2b40      	cmp	r3, #64	@ 0x40
 800aa24:	d006      	beq.n	800aa34 <arm_rfft_fast_init_f32+0x54>
 800aa26:	2b10      	cmp	r3, #16
 800aa28:	d01d      	beq.n	800aa66 <arm_rfft_fast_init_f32+0x86>
 800aa2a:	20ff      	movs	r0, #255	@ 0xff
 800aa2c:	b240      	sxtb	r0, r0
 800aa2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	2438      	movs	r4, #56	@ 0x38
 800aa36:	4917      	ldr	r1, [pc, #92]	@ (800aa94 <arm_rfft_fast_init_f32+0xb4>)
 800aa38:	4a17      	ldr	r2, [pc, #92]	@ (800aa98 <arm_rfft_fast_init_f32+0xb8>)
 800aa3a:	4b18      	ldr	r3, [pc, #96]	@ (800aa9c <arm_rfft_fast_init_f32+0xbc>)
 800aa3c:	e7e6      	b.n	800aa0c <arm_rfft_fast_init_f32+0x2c>
 800aa3e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800aa42:	4917      	ldr	r1, [pc, #92]	@ (800aaa0 <arm_rfft_fast_init_f32+0xc0>)
 800aa44:	4a17      	ldr	r2, [pc, #92]	@ (800aaa4 <arm_rfft_fast_init_f32+0xc4>)
 800aa46:	4b18      	ldr	r3, [pc, #96]	@ (800aaa8 <arm_rfft_fast_init_f32+0xc8>)
 800aa48:	e7e0      	b.n	800aa0c <arm_rfft_fast_init_f32+0x2c>
 800aa4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa4e:	d1ec      	bne.n	800aa2a <arm_rfft_fast_init_f32+0x4a>
 800aa50:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800aa54:	4915      	ldr	r1, [pc, #84]	@ (800aaac <arm_rfft_fast_init_f32+0xcc>)
 800aa56:	4a16      	ldr	r2, [pc, #88]	@ (800aab0 <arm_rfft_fast_init_f32+0xd0>)
 800aa58:	4b16      	ldr	r3, [pc, #88]	@ (800aab4 <arm_rfft_fast_init_f32+0xd4>)
 800aa5a:	e7d7      	b.n	800aa0c <arm_rfft_fast_init_f32+0x2c>
 800aa5c:	2430      	movs	r4, #48	@ 0x30
 800aa5e:	4916      	ldr	r1, [pc, #88]	@ (800aab8 <arm_rfft_fast_init_f32+0xd8>)
 800aa60:	4a16      	ldr	r2, [pc, #88]	@ (800aabc <arm_rfft_fast_init_f32+0xdc>)
 800aa62:	4b17      	ldr	r3, [pc, #92]	@ (800aac0 <arm_rfft_fast_init_f32+0xe0>)
 800aa64:	e7d2      	b.n	800aa0c <arm_rfft_fast_init_f32+0x2c>
 800aa66:	2414      	movs	r4, #20
 800aa68:	4916      	ldr	r1, [pc, #88]	@ (800aac4 <arm_rfft_fast_init_f32+0xe4>)
 800aa6a:	4a17      	ldr	r2, [pc, #92]	@ (800aac8 <arm_rfft_fast_init_f32+0xe8>)
 800aa6c:	4b17      	ldr	r3, [pc, #92]	@ (800aacc <arm_rfft_fast_init_f32+0xec>)
 800aa6e:	e7cd      	b.n	800aa0c <arm_rfft_fast_init_f32+0x2c>
 800aa70:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800aa74:	4916      	ldr	r1, [pc, #88]	@ (800aad0 <arm_rfft_fast_init_f32+0xf0>)
 800aa76:	4a17      	ldr	r2, [pc, #92]	@ (800aad4 <arm_rfft_fast_init_f32+0xf4>)
 800aa78:	4b17      	ldr	r3, [pc, #92]	@ (800aad8 <arm_rfft_fast_init_f32+0xf8>)
 800aa7a:	e7c7      	b.n	800aa0c <arm_rfft_fast_init_f32+0x2c>
 800aa7c:	24d0      	movs	r4, #208	@ 0xd0
 800aa7e:	4917      	ldr	r1, [pc, #92]	@ (800aadc <arm_rfft_fast_init_f32+0xfc>)
 800aa80:	4a17      	ldr	r2, [pc, #92]	@ (800aae0 <arm_rfft_fast_init_f32+0x100>)
 800aa82:	4b18      	ldr	r3, [pc, #96]	@ (800aae4 <arm_rfft_fast_init_f32+0x104>)
 800aa84:	e7c2      	b.n	800aa0c <arm_rfft_fast_init_f32+0x2c>
 800aa86:	bf00      	nop
 800aa88:	0801df04 	.word	0x0801df04
 800aa8c:	0800f0fc 	.word	0x0800f0fc
 800aa90:	0801526c 	.word	0x0801526c
 800aa94:	080131fc 	.word	0x080131fc
 800aa98:	0801fcc4 	.word	0x0801fcc4
 800aa9c:	080221b4 	.word	0x080221b4
 800aaa0:	0801bbec 	.word	0x0801bbec
 800aaa4:	08019aec 	.word	0x08019aec
 800aaa8:	0801326c 	.word	0x0801326c
 800aaac:	08021e44 	.word	0x08021e44
 800aab0:	0801926c 	.word	0x0801926c
 800aab4:	0801fec4 	.word	0x0801fec4
 800aab8:	0801caa4 	.word	0x0801caa4
 800aabc:	0801baec 	.word	0x0801baec
 800aac0:	080130fc 	.word	0x080130fc
 800aac4:	0801c9fc 	.word	0x0801c9fc
 800aac8:	08019a6c 	.word	0x08019a6c
 800aacc:	0801ca24 	.word	0x0801ca24
 800aad0:	080206c4 	.word	0x080206c4
 800aad4:	0801cf04 	.word	0x0801cf04
 800aad8:	08020a44 	.word	0x08020a44
 800aadc:	080223b4 	.word	0x080223b4
 800aae0:	0801cb04 	.word	0x0801cb04
 800aae4:	08021a44 	.word	0x08021a44

0800aae8 <arm_rfft_fast_f32>:
 800aae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaec:	8a06      	ldrh	r6, [r0, #16]
 800aaee:	0876      	lsrs	r6, r6, #1
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	4615      	mov	r5, r2
 800aaf4:	8006      	strh	r6, [r0, #0]
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d15c      	bne.n	800abb6 <arm_rfft_fast_f32+0xce>
 800aafc:	461a      	mov	r2, r3
 800aafe:	2301      	movs	r3, #1
 800ab00:	f000 fbe6 	bl	800b2d0 <arm_cfft_f32>
 800ab04:	edd4 7a00 	vldr	s15, [r4]
 800ab08:	ed94 7a01 	vldr	s14, [r4, #4]
 800ab0c:	883e      	ldrh	r6, [r7, #0]
 800ab0e:	6978      	ldr	r0, [r7, #20]
 800ab10:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ab14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ab18:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800ab1c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab24:	3e01      	subs	r6, #1
 800ab26:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800ab2a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ab2e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ab32:	ed85 7a00 	vstr	s14, [r5]
 800ab36:	edc5 7a01 	vstr	s15, [r5, #4]
 800ab3a:	3010      	adds	r0, #16
 800ab3c:	f105 0210 	add.w	r2, r5, #16
 800ab40:	3b08      	subs	r3, #8
 800ab42:	f104 0110 	add.w	r1, r4, #16
 800ab46:	ed51 4a02 	vldr	s9, [r1, #-8]
 800ab4a:	ed93 5a02 	vldr	s10, [r3, #8]
 800ab4e:	ed11 7a01 	vldr	s14, [r1, #-4]
 800ab52:	ed10 6a02 	vldr	s12, [r0, #-8]
 800ab56:	edd3 5a03 	vldr	s11, [r3, #12]
 800ab5a:	ed50 6a01 	vldr	s13, [r0, #-4]
 800ab5e:	ee75 7a64 	vsub.f32	s15, s10, s9
 800ab62:	ee35 4a87 	vadd.f32	s8, s11, s14
 800ab66:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ab6a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800ab6e:	ee66 4a27 	vmul.f32	s9, s12, s15
 800ab72:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800ab76:	ee34 5a85 	vadd.f32	s10, s9, s10
 800ab7a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ab7e:	ee66 6a84 	vmul.f32	s13, s13, s8
 800ab82:	ee77 7a25 	vadd.f32	s15, s14, s11
 800ab86:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ab8a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ab8e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ab92:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ab96:	3e01      	subs	r6, #1
 800ab98:	ed42 6a02 	vstr	s13, [r2, #-8]
 800ab9c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800aba0:	f1a3 0308 	sub.w	r3, r3, #8
 800aba4:	f101 0108 	add.w	r1, r1, #8
 800aba8:	f100 0008 	add.w	r0, r0, #8
 800abac:	f102 0208 	add.w	r2, r2, #8
 800abb0:	d1c9      	bne.n	800ab46 <arm_rfft_fast_f32+0x5e>
 800abb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb6:	edd1 7a00 	vldr	s15, [r1]
 800abba:	edd1 6a01 	vldr	s13, [r1, #4]
 800abbe:	6941      	ldr	r1, [r0, #20]
 800abc0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800abc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abc8:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800abcc:	ee27 7a23 	vmul.f32	s14, s14, s7
 800abd0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800abd4:	3e01      	subs	r6, #1
 800abd6:	ed82 7a00 	vstr	s14, [r2]
 800abda:	edc2 7a01 	vstr	s15, [r2, #4]
 800abde:	00f0      	lsls	r0, r6, #3
 800abe0:	b3ee      	cbz	r6, 800ac5e <arm_rfft_fast_f32+0x176>
 800abe2:	3808      	subs	r0, #8
 800abe4:	f101 0e10 	add.w	lr, r1, #16
 800abe8:	4420      	add	r0, r4
 800abea:	f104 0110 	add.w	r1, r4, #16
 800abee:	f102 0c10 	add.w	ip, r2, #16
 800abf2:	ed90 7a02 	vldr	s14, [r0, #8]
 800abf6:	ed51 6a02 	vldr	s13, [r1, #-8]
 800abfa:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800abfe:	ed90 4a03 	vldr	s8, [r0, #12]
 800ac02:	ed11 5a01 	vldr	s10, [r1, #-4]
 800ac06:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800ac0a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800ac0e:	ee74 4a05 	vadd.f32	s9, s8, s10
 800ac12:	ee26 3a27 	vmul.f32	s6, s12, s15
 800ac16:	ee77 6a26 	vadd.f32	s13, s14, s13
 800ac1a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ac1e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800ac22:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ac26:	ee77 7a05 	vadd.f32	s15, s14, s10
 800ac2a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ac2e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800ac32:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ac36:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800ac3a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ac3e:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ac42:	3e01      	subs	r6, #1
 800ac44:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800ac48:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800ac4c:	f1a0 0008 	sub.w	r0, r0, #8
 800ac50:	f101 0108 	add.w	r1, r1, #8
 800ac54:	f10e 0e08 	add.w	lr, lr, #8
 800ac58:	f10c 0c08 	add.w	ip, ip, #8
 800ac5c:	d1c9      	bne.n	800abf2 <arm_rfft_fast_f32+0x10a>
 800ac5e:	4638      	mov	r0, r7
 800ac60:	4629      	mov	r1, r5
 800ac62:	461a      	mov	r2, r3
 800ac64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac68:	2301      	movs	r3, #1
 800ac6a:	f000 bb31 	b.w	800b2d0 <arm_cfft_f32>
 800ac6e:	bf00      	nop

0800ac70 <arm_cfft_radix8by2_f32>:
 800ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac74:	ed2d 8b08 	vpush	{d8-d11}
 800ac78:	f8b0 e000 	ldrh.w	lr, [r0]
 800ac7c:	6842      	ldr	r2, [r0, #4]
 800ac7e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800ac82:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800ac86:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800ac90:	f000 80af 	beq.w	800adf2 <arm_cfft_radix8by2_f32+0x182>
 800ac94:	3310      	adds	r3, #16
 800ac96:	18ce      	adds	r6, r1, r3
 800ac98:	3210      	adds	r2, #16
 800ac9a:	4443      	add	r3, r8
 800ac9c:	f101 0510 	add.w	r5, r1, #16
 800aca0:	f108 0410 	add.w	r4, r8, #16
 800aca4:	ed54 1a04 	vldr	s3, [r4, #-16]
 800aca8:	ed13 4a04 	vldr	s8, [r3, #-16]
 800acac:	ed53 3a03 	vldr	s7, [r3, #-12]
 800acb0:	ed53 5a02 	vldr	s11, [r3, #-8]
 800acb4:	ed13 5a01 	vldr	s10, [r3, #-4]
 800acb8:	ed54 6a03 	vldr	s13, [r4, #-12]
 800acbc:	ed14 0a02 	vldr	s0, [r4, #-8]
 800acc0:	ed16 2a04 	vldr	s4, [r6, #-16]
 800acc4:	ed56 2a03 	vldr	s5, [r6, #-12]
 800acc8:	ed15 6a03 	vldr	s12, [r5, #-12]
 800accc:	ed15 7a01 	vldr	s14, [r5, #-4]
 800acd0:	ed15 3a04 	vldr	s6, [r5, #-16]
 800acd4:	ed54 7a01 	vldr	s15, [r4, #-4]
 800acd8:	ed56 0a02 	vldr	s1, [r6, #-8]
 800acdc:	ed16 1a01 	vldr	s2, [r6, #-4]
 800ace0:	ed55 4a02 	vldr	s9, [r5, #-8]
 800ace4:	ee73 ba21 	vadd.f32	s23, s6, s3
 800ace8:	ee36 ba26 	vadd.f32	s22, s12, s13
 800acec:	ee37 aa27 	vadd.f32	s20, s14, s15
 800acf0:	ee72 9a04 	vadd.f32	s19, s4, s8
 800acf4:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800acf8:	ee31 8a05 	vadd.f32	s16, s2, s10
 800acfc:	ee74 aa80 	vadd.f32	s21, s9, s0
 800ad00:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800ad04:	ed45 ba04 	vstr	s23, [r5, #-16]
 800ad08:	ed05 ba03 	vstr	s22, [r5, #-12]
 800ad0c:	ed45 aa02 	vstr	s21, [r5, #-8]
 800ad10:	ed05 aa01 	vstr	s20, [r5, #-4]
 800ad14:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ad18:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ad1c:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ad20:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ad24:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ad28:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800ad2c:	ed12 6a03 	vldr	s12, [r2, #-12]
 800ad30:	ed52 2a04 	vldr	s5, [r2, #-16]
 800ad34:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ad38:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ad3c:	ee26 8a86 	vmul.f32	s16, s13, s12
 800ad40:	ee24 2a06 	vmul.f32	s4, s8, s12
 800ad44:	ee63 1a22 	vmul.f32	s3, s6, s5
 800ad48:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ad4c:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ad50:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ad54:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ad58:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ad5c:	ee36 6a04 	vadd.f32	s12, s12, s8
 800ad60:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ad64:	ee72 3a63 	vsub.f32	s7, s4, s7
 800ad68:	ee71 2a88 	vadd.f32	s5, s3, s16
 800ad6c:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ad70:	ed44 2a04 	vstr	s5, [r4, #-16]
 800ad74:	ed43 3a04 	vstr	s7, [r3, #-16]
 800ad78:	ed03 6a03 	vstr	s12, [r3, #-12]
 800ad7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad80:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800ad84:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ad88:	ed52 5a02 	vldr	s11, [r2, #-8]
 800ad8c:	ee35 6a41 	vsub.f32	s12, s10, s2
 800ad90:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ad94:	ee67 3a87 	vmul.f32	s7, s15, s14
 800ad98:	ee26 5a87 	vmul.f32	s10, s13, s14
 800ad9c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800ada0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ada4:	ee64 4a87 	vmul.f32	s9, s9, s14
 800ada8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800adac:	ee26 7a07 	vmul.f32	s14, s12, s14
 800adb0:	ee26 6a25 	vmul.f32	s12, s12, s11
 800adb4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800adb8:	ee74 5a23 	vadd.f32	s11, s8, s7
 800adbc:	ee35 6a46 	vsub.f32	s12, s10, s12
 800adc0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800adc4:	f1be 0e01 	subs.w	lr, lr, #1
 800adc8:	ed44 5a02 	vstr	s11, [r4, #-8]
 800adcc:	f105 0510 	add.w	r5, r5, #16
 800add0:	ed44 7a01 	vstr	s15, [r4, #-4]
 800add4:	f106 0610 	add.w	r6, r6, #16
 800add8:	ed03 6a02 	vstr	s12, [r3, #-8]
 800addc:	ed03 7a01 	vstr	s14, [r3, #-4]
 800ade0:	f102 0210 	add.w	r2, r2, #16
 800ade4:	f104 0410 	add.w	r4, r4, #16
 800ade8:	f103 0310 	add.w	r3, r3, #16
 800adec:	f47f af5a 	bne.w	800aca4 <arm_cfft_radix8by2_f32+0x34>
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	fa1f f48c 	uxth.w	r4, ip
 800adf6:	4608      	mov	r0, r1
 800adf8:	2302      	movs	r3, #2
 800adfa:	4621      	mov	r1, r4
 800adfc:	f000 fae2 	bl	800b3c4 <arm_radix8_butterfly_f32>
 800ae00:	ecbd 8b08 	vpop	{d8-d11}
 800ae04:	4640      	mov	r0, r8
 800ae06:	4621      	mov	r1, r4
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae10:	f000 bad8 	b.w	800b3c4 <arm_radix8_butterfly_f32>

0800ae14 <arm_cfft_radix8by4_f32>:
 800ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	ed2d 8b0a 	vpush	{d8-d12}
 800ae1c:	8802      	ldrh	r2, [r0, #0]
 800ae1e:	ed91 6a00 	vldr	s12, [r1]
 800ae22:	b08f      	sub	sp, #60	@ 0x3c
 800ae24:	460f      	mov	r7, r1
 800ae26:	0852      	lsrs	r2, r2, #1
 800ae28:	0093      	lsls	r3, r2, #2
 800ae2a:	900c      	str	r0, [sp, #48]	@ 0x30
 800ae2c:	9103      	str	r1, [sp, #12]
 800ae2e:	6841      	ldr	r1, [r0, #4]
 800ae30:	ed97 7a01 	vldr	s14, [r7, #4]
 800ae34:	4638      	mov	r0, r7
 800ae36:	4418      	add	r0, r3
 800ae38:	4606      	mov	r6, r0
 800ae3a:	9009      	str	r0, [sp, #36]	@ 0x24
 800ae3c:	4418      	add	r0, r3
 800ae3e:	edd0 6a00 	vldr	s13, [r0]
 800ae42:	edd6 3a00 	vldr	s7, [r6]
 800ae46:	edd6 2a01 	vldr	s5, [r6, #4]
 800ae4a:	edd0 7a01 	vldr	s15, [r0, #4]
 800ae4e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae50:	ee76 5a26 	vadd.f32	s11, s12, s13
 800ae54:	4604      	mov	r4, r0
 800ae56:	4625      	mov	r5, r4
 800ae58:	441c      	add	r4, r3
 800ae5a:	ed94 4a00 	vldr	s8, [r4]
 800ae5e:	ed94 5a01 	vldr	s10, [r4, #4]
 800ae62:	9401      	str	r4, [sp, #4]
 800ae64:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800ae68:	4630      	mov	r0, r6
 800ae6a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ae6e:	463e      	mov	r6, r7
 800ae70:	ee14 ea90 	vmov	lr, s9
 800ae74:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ae78:	f846 eb08 	str.w	lr, [r6], #8
 800ae7c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ae80:	edd0 4a01 	vldr	s9, [r0, #4]
 800ae84:	9604      	str	r6, [sp, #16]
 800ae86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae8a:	9e01      	ldr	r6, [sp, #4]
 800ae8c:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800ae90:	ed96 2a01 	vldr	s4, [r6, #4]
 800ae94:	ee36 7a24 	vadd.f32	s14, s12, s9
 800ae98:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800ae9c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800aea0:	ee36 6a62 	vsub.f32	s12, s12, s5
 800aea4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800aea8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800aeac:	ee73 3a45 	vsub.f32	s7, s6, s10
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	ee36 6a45 	vsub.f32	s12, s12, s10
 800aeb6:	ee75 6a26 	vadd.f32	s13, s10, s13
 800aeba:	46a3      	mov	fp, r4
 800aebc:	ee37 7a02 	vadd.f32	s14, s14, s4
 800aec0:	ee34 5a84 	vadd.f32	s10, s9, s8
 800aec4:	ee13 8a90 	vmov	r8, s7
 800aec8:	46a4      	mov	ip, r4
 800aeca:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800aece:	ed87 7a01 	vstr	s14, [r7, #4]
 800aed2:	f84b 8b08 	str.w	r8, [fp], #8
 800aed6:	f1ac 0704 	sub.w	r7, ip, #4
 800aeda:	ed8c 5a01 	vstr	s10, [ip, #4]
 800aede:	f101 0c08 	add.w	ip, r1, #8
 800aee2:	462c      	mov	r4, r5
 800aee4:	f8cd c014 	str.w	ip, [sp, #20]
 800aee8:	ee15 ca90 	vmov	ip, s11
 800aeec:	f844 cb08 	str.w	ip, [r4], #8
 800aef0:	9407      	str	r4, [sp, #28]
 800aef2:	f101 0410 	add.w	r4, r1, #16
 800aef6:	ed85 6a01 	vstr	s12, [r5, #4]
 800aefa:	0852      	lsrs	r2, r2, #1
 800aefc:	9402      	str	r4, [sp, #8]
 800aefe:	462c      	mov	r4, r5
 800af00:	f101 0518 	add.w	r5, r1, #24
 800af04:	920b      	str	r2, [sp, #44]	@ 0x2c
 800af06:	46b2      	mov	sl, r6
 800af08:	9506      	str	r5, [sp, #24]
 800af0a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800af0e:	3a02      	subs	r2, #2
 800af10:	ee16 5a90 	vmov	r5, s13
 800af14:	46b6      	mov	lr, r6
 800af16:	4630      	mov	r0, r6
 800af18:	0852      	lsrs	r2, r2, #1
 800af1a:	f84a 5b08 	str.w	r5, [sl], #8
 800af1e:	f1a0 0604 	sub.w	r6, r0, #4
 800af22:	edce 7a01 	vstr	s15, [lr, #4]
 800af26:	9208      	str	r2, [sp, #32]
 800af28:	f000 8130 	beq.w	800b18c <arm_cfft_radix8by4_f32+0x378>
 800af2c:	4691      	mov	r9, r2
 800af2e:	9a03      	ldr	r2, [sp, #12]
 800af30:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800af34:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800af38:	3b08      	subs	r3, #8
 800af3a:	f102 0510 	add.w	r5, r2, #16
 800af3e:	f101 0c20 	add.w	ip, r1, #32
 800af42:	f1a4 020c 	sub.w	r2, r4, #12
 800af46:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800af4a:	4433      	add	r3, r6
 800af4c:	3410      	adds	r4, #16
 800af4e:	4650      	mov	r0, sl
 800af50:	4659      	mov	r1, fp
 800af52:	ed55 3a02 	vldr	s7, [r5, #-8]
 800af56:	ed14 5a02 	vldr	s10, [r4, #-8]
 800af5a:	ed91 7a00 	vldr	s14, [r1]
 800af5e:	edd0 7a00 	vldr	s15, [r0]
 800af62:	ed15 4a01 	vldr	s8, [r5, #-4]
 800af66:	ed54 5a01 	vldr	s11, [r4, #-4]
 800af6a:	edd0 6a01 	vldr	s13, [r0, #4]
 800af6e:	ed91 6a01 	vldr	s12, [r1, #4]
 800af72:	ee33 8a85 	vadd.f32	s16, s7, s10
 800af76:	ee34 0a25 	vadd.f32	s0, s8, s11
 800af7a:	ee78 4a07 	vadd.f32	s9, s16, s14
 800af7e:	ee74 5a65 	vsub.f32	s11, s8, s11
 800af82:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800af86:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800af8a:	ed45 4a02 	vstr	s9, [r5, #-8]
 800af8e:	edd1 4a01 	vldr	s9, [r1, #4]
 800af92:	ed90 4a01 	vldr	s8, [r0, #4]
 800af96:	ee70 4a24 	vadd.f32	s9, s0, s9
 800af9a:	ee76 aa05 	vadd.f32	s21, s12, s10
 800af9e:	ee74 4a84 	vadd.f32	s9, s9, s8
 800afa2:	ee35 aac7 	vsub.f32	s20, s11, s14
 800afa6:	ed45 4a01 	vstr	s9, [r5, #-4]
 800afaa:	edd6 1a00 	vldr	s3, [r6]
 800afae:	edd7 0a00 	vldr	s1, [r7]
 800afb2:	ed92 4a02 	vldr	s8, [r2, #8]
 800afb6:	edd3 3a02 	vldr	s7, [r3, #8]
 800afba:	ed93 2a01 	vldr	s4, [r3, #4]
 800afbe:	ed16 1a01 	vldr	s2, [r6, #-4]
 800afc2:	edd2 2a01 	vldr	s5, [r2, #4]
 800afc6:	ed57 9a01 	vldr	s19, [r7, #-4]
 800afca:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800afce:	ee39 3a81 	vadd.f32	s6, s19, s2
 800afd2:	ee74 8a84 	vadd.f32	s17, s9, s8
 800afd6:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800afda:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800afde:	ee7a aae6 	vsub.f32	s21, s21, s13
 800afe2:	ee18 aa90 	vmov	sl, s17
 800afe6:	f847 a908 	str.w	sl, [r7], #-8
 800afea:	edd2 8a01 	vldr	s17, [r2, #4]
 800afee:	ed93 9a01 	vldr	s18, [r3, #4]
 800aff2:	ee73 8a28 	vadd.f32	s17, s6, s17
 800aff6:	ee3a aa27 	vadd.f32	s20, s20, s15
 800affa:	ee78 8a89 	vadd.f32	s17, s17, s18
 800affe:	ee74 0a63 	vsub.f32	s1, s8, s7
 800b002:	edc7 8a01 	vstr	s17, [r7, #4]
 800b006:	ed18 ba02 	vldr	s22, [r8, #-8]
 800b00a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800b00e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800b012:	ee6a ba28 	vmul.f32	s23, s20, s17
 800b016:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800b01a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800b01e:	ee30 9a81 	vadd.f32	s18, s1, s2
 800b022:	ee79 9a82 	vadd.f32	s19, s19, s4
 800b026:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800b02a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800b02e:	ee69 baa8 	vmul.f32	s23, s19, s17
 800b032:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800b036:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800b03a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800b03e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800b042:	ee1c aa10 	vmov	sl, s24
 800b046:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800b04a:	f841 ab08 	str.w	sl, [r1], #8
 800b04e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800b052:	ee3b bacb 	vsub.f32	s22, s23, s22
 800b056:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800b05a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b05e:	ed01 aa01 	vstr	s20, [r1, #-4]
 800b062:	edc2 8a01 	vstr	s17, [r2, #4]
 800b066:	ed82 ba02 	vstr	s22, [r2, #8]
 800b06a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800b06e:	ee74 3a63 	vsub.f32	s7, s8, s7
 800b072:	ee38 8a47 	vsub.f32	s16, s16, s14
 800b076:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800b07a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b07e:	ee33 3a42 	vsub.f32	s6, s6, s4
 800b082:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b086:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b08a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800b08e:	ee63 8a04 	vmul.f32	s17, s6, s8
 800b092:	ee28 aa24 	vmul.f32	s20, s16, s9
 800b096:	ee60 9a04 	vmul.f32	s19, s0, s8
 800b09a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800b09e:	ee20 0a24 	vmul.f32	s0, s0, s9
 800b0a2:	ee63 3a84 	vmul.f32	s7, s7, s8
 800b0a6:	ee39 4a68 	vsub.f32	s8, s18, s17
 800b0aa:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800b0ae:	ee14 aa10 	vmov	sl, s8
 800b0b2:	ee30 0a48 	vsub.f32	s0, s0, s16
 800b0b6:	ee63 4a24 	vmul.f32	s9, s6, s9
 800b0ba:	ed44 9a02 	vstr	s19, [r4, #-8]
 800b0be:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b0c2:	ed04 0a01 	vstr	s0, [r4, #-4]
 800b0c6:	f846 a908 	str.w	sl, [r6], #-8
 800b0ca:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b0ce:	ee35 7a87 	vadd.f32	s14, s11, s14
 800b0d2:	edc6 3a01 	vstr	s7, [r6, #4]
 800b0d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b0da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0de:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800b0e2:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800b0e6:	ee67 5a86 	vmul.f32	s11, s15, s12
 800b0ea:	ee26 5a87 	vmul.f32	s10, s13, s14
 800b0ee:	ee72 2a62 	vsub.f32	s5, s4, s5
 800b0f2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800b0f6:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800b0fa:	ee75 5a25 	vadd.f32	s11, s10, s11
 800b0fe:	ee62 0a86 	vmul.f32	s1, s5, s12
 800b102:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b10a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800b10e:	ee62 2a87 	vmul.f32	s5, s5, s14
 800b112:	ee21 1a07 	vmul.f32	s2, s2, s14
 800b116:	ee15 aa90 	vmov	sl, s11
 800b11a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b11e:	f840 ab08 	str.w	sl, [r0], #8
 800b122:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800b126:	ee76 2a22 	vadd.f32	s5, s12, s5
 800b12a:	f1b9 0901 	subs.w	r9, r9, #1
 800b12e:	ed40 7a01 	vstr	s15, [r0, #-4]
 800b132:	f105 0508 	add.w	r5, r5, #8
 800b136:	ed83 1a02 	vstr	s2, [r3, #8]
 800b13a:	edc3 2a01 	vstr	s5, [r3, #4]
 800b13e:	f108 0808 	add.w	r8, r8, #8
 800b142:	f1a2 0208 	sub.w	r2, r2, #8
 800b146:	f10c 0c10 	add.w	ip, ip, #16
 800b14a:	f104 0408 	add.w	r4, r4, #8
 800b14e:	f10e 0e18 	add.w	lr, lr, #24
 800b152:	f1a3 0308 	sub.w	r3, r3, #8
 800b156:	f47f aefc 	bne.w	800af52 <arm_cfft_radix8by4_f32+0x13e>
 800b15a:	9908      	ldr	r1, [sp, #32]
 800b15c:	9802      	ldr	r0, [sp, #8]
 800b15e:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800b162:	00cb      	lsls	r3, r1, #3
 800b164:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b168:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b16c:	9102      	str	r1, [sp, #8]
 800b16e:	9904      	ldr	r1, [sp, #16]
 800b170:	4419      	add	r1, r3
 800b172:	9104      	str	r1, [sp, #16]
 800b174:	9905      	ldr	r1, [sp, #20]
 800b176:	4419      	add	r1, r3
 800b178:	9105      	str	r1, [sp, #20]
 800b17a:	9907      	ldr	r1, [sp, #28]
 800b17c:	449b      	add	fp, r3
 800b17e:	4419      	add	r1, r3
 800b180:	449a      	add	sl, r3
 800b182:	9b06      	ldr	r3, [sp, #24]
 800b184:	9107      	str	r1, [sp, #28]
 800b186:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b18a:	9306      	str	r3, [sp, #24]
 800b18c:	9a04      	ldr	r2, [sp, #16]
 800b18e:	9807      	ldr	r0, [sp, #28]
 800b190:	edd2 3a00 	vldr	s7, [r2]
 800b194:	ed90 4a00 	vldr	s8, [r0]
 800b198:	eddb 7a00 	vldr	s15, [fp]
 800b19c:	ed9a 3a00 	vldr	s6, [sl]
 800b1a0:	edd2 4a01 	vldr	s9, [r2, #4]
 800b1a4:	ed90 7a01 	vldr	s14, [r0, #4]
 800b1a8:	ed9b 2a01 	vldr	s4, [fp, #4]
 800b1ac:	edda 5a01 	vldr	s11, [sl, #4]
 800b1b0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800b1b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1b6:	ee73 6a84 	vadd.f32	s13, s7, s8
 800b1ba:	ee34 6a87 	vadd.f32	s12, s9, s14
 800b1be:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800b1c2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800b1c6:	ee33 5a05 	vadd.f32	s10, s6, s10
 800b1ca:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b1ce:	ed82 5a00 	vstr	s10, [r2]
 800b1d2:	ed9b 5a01 	vldr	s10, [fp, #4]
 800b1d6:	edda 4a01 	vldr	s9, [sl, #4]
 800b1da:	ee36 5a05 	vadd.f32	s10, s12, s10
 800b1de:	ee72 3a04 	vadd.f32	s7, s4, s8
 800b1e2:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b1e6:	ee77 4a67 	vsub.f32	s9, s14, s15
 800b1ea:	ed82 5a01 	vstr	s10, [r2, #4]
 800b1ee:	9a05      	ldr	r2, [sp, #20]
 800b1f0:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b1f4:	edd2 1a00 	vldr	s3, [r2]
 800b1f8:	edd2 2a01 	vldr	s5, [r2, #4]
 800b1fc:	9a02      	ldr	r2, [sp, #8]
 800b1fe:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800b202:	ee36 6a42 	vsub.f32	s12, s12, s4
 800b206:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800b20a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800b20e:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b212:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b216:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b21a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b21e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b222:	edcb 2a00 	vstr	s5, [fp]
 800b226:	ed8b 5a01 	vstr	s10, [fp, #4]
 800b22a:	edd2 3a01 	vldr	s7, [r2, #4]
 800b22e:	ed92 5a00 	vldr	s10, [r2]
 800b232:	9a06      	ldr	r2, [sp, #24]
 800b234:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b238:	ee36 6a65 	vsub.f32	s12, s12, s11
 800b23c:	ee66 4a85 	vmul.f32	s9, s13, s10
 800b240:	ee26 5a05 	vmul.f32	s10, s12, s10
 800b244:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b248:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b24c:	ee75 6a66 	vsub.f32	s13, s10, s13
 800b250:	ee34 6a86 	vadd.f32	s12, s9, s12
 800b254:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b25c:	edc0 6a01 	vstr	s13, [r0, #4]
 800b260:	ed80 6a00 	vstr	s12, [r0]
 800b264:	ed92 6a01 	vldr	s12, [r2, #4]
 800b268:	9803      	ldr	r0, [sp, #12]
 800b26a:	ee77 7a43 	vsub.f32	s15, s14, s6
 800b26e:	ee75 5a84 	vadd.f32	s11, s11, s8
 800b272:	ed92 7a00 	vldr	s14, [r2]
 800b276:	ee65 6a87 	vmul.f32	s13, s11, s14
 800b27a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b27e:	ee65 5a86 	vmul.f32	s11, s11, s12
 800b282:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b286:	ee77 5a65 	vsub.f32	s11, s14, s11
 800b28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b28e:	edca 5a01 	vstr	s11, [sl, #4]
 800b292:	edca 7a00 	vstr	s15, [sl]
 800b296:	6872      	ldr	r2, [r6, #4]
 800b298:	4621      	mov	r1, r4
 800b29a:	2304      	movs	r3, #4
 800b29c:	f000 f892 	bl	800b3c4 <arm_radix8_butterfly_f32>
 800b2a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2a2:	6872      	ldr	r2, [r6, #4]
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	2304      	movs	r3, #4
 800b2a8:	f000 f88c 	bl	800b3c4 <arm_radix8_butterfly_f32>
 800b2ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b2ae:	6872      	ldr	r2, [r6, #4]
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	2304      	movs	r3, #4
 800b2b4:	f000 f886 	bl	800b3c4 <arm_radix8_butterfly_f32>
 800b2b8:	9801      	ldr	r0, [sp, #4]
 800b2ba:	6872      	ldr	r2, [r6, #4]
 800b2bc:	4621      	mov	r1, r4
 800b2be:	2304      	movs	r3, #4
 800b2c0:	b00f      	add	sp, #60	@ 0x3c
 800b2c2:	ecbd 8b0a 	vpop	{d8-d12}
 800b2c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ca:	f000 b87b 	b.w	800b3c4 <arm_radix8_butterfly_f32>
 800b2ce:	bf00      	nop

0800b2d0 <arm_cfft_f32>:
 800b2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d4:	2a01      	cmp	r2, #1
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	4617      	mov	r7, r2
 800b2da:	460c      	mov	r4, r1
 800b2dc:	4698      	mov	r8, r3
 800b2de:	8805      	ldrh	r5, [r0, #0]
 800b2e0:	d054      	beq.n	800b38c <arm_cfft_f32+0xbc>
 800b2e2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b2e6:	d04c      	beq.n	800b382 <arm_cfft_f32+0xb2>
 800b2e8:	d916      	bls.n	800b318 <arm_cfft_f32+0x48>
 800b2ea:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b2ee:	d01a      	beq.n	800b326 <arm_cfft_f32+0x56>
 800b2f0:	d95c      	bls.n	800b3ac <arm_cfft_f32+0xdc>
 800b2f2:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b2f6:	d044      	beq.n	800b382 <arm_cfft_f32+0xb2>
 800b2f8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b2fc:	d105      	bne.n	800b30a <arm_cfft_f32+0x3a>
 800b2fe:	4620      	mov	r0, r4
 800b300:	4629      	mov	r1, r5
 800b302:	6872      	ldr	r2, [r6, #4]
 800b304:	2301      	movs	r3, #1
 800b306:	f000 f85d 	bl	800b3c4 <arm_radix8_butterfly_f32>
 800b30a:	f1b8 0f00 	cmp.w	r8, #0
 800b30e:	d111      	bne.n	800b334 <arm_cfft_f32+0x64>
 800b310:	2f01      	cmp	r7, #1
 800b312:	d016      	beq.n	800b342 <arm_cfft_f32+0x72>
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	2d20      	cmp	r5, #32
 800b31a:	d032      	beq.n	800b382 <arm_cfft_f32+0xb2>
 800b31c:	d94a      	bls.n	800b3b4 <arm_cfft_f32+0xe4>
 800b31e:	2d40      	cmp	r5, #64	@ 0x40
 800b320:	d0ed      	beq.n	800b2fe <arm_cfft_f32+0x2e>
 800b322:	2d80      	cmp	r5, #128	@ 0x80
 800b324:	d1f1      	bne.n	800b30a <arm_cfft_f32+0x3a>
 800b326:	4630      	mov	r0, r6
 800b328:	4621      	mov	r1, r4
 800b32a:	f7ff fca1 	bl	800ac70 <arm_cfft_radix8by2_f32>
 800b32e:	f1b8 0f00 	cmp.w	r8, #0
 800b332:	d0ed      	beq.n	800b310 <arm_cfft_f32+0x40>
 800b334:	4620      	mov	r0, r4
 800b336:	89b1      	ldrh	r1, [r6, #12]
 800b338:	68b2      	ldr	r2, [r6, #8]
 800b33a:	f7f4 ff69 	bl	8000210 <arm_bitreversal_32>
 800b33e:	2f01      	cmp	r7, #1
 800b340:	d1e8      	bne.n	800b314 <arm_cfft_f32+0x44>
 800b342:	ee07 5a90 	vmov	s15, r5
 800b346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b34a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b34e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800b352:	2d00      	cmp	r5, #0
 800b354:	d0de      	beq.n	800b314 <arm_cfft_f32+0x44>
 800b356:	f104 0108 	add.w	r1, r4, #8
 800b35a:	2300      	movs	r3, #0
 800b35c:	3301      	adds	r3, #1
 800b35e:	429d      	cmp	r5, r3
 800b360:	f101 0108 	add.w	r1, r1, #8
 800b364:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b368:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b36c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b370:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b374:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b378:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b37c:	d1ee      	bne.n	800b35c <arm_cfft_f32+0x8c>
 800b37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b382:	4630      	mov	r0, r6
 800b384:	4621      	mov	r1, r4
 800b386:	f7ff fd45 	bl	800ae14 <arm_cfft_radix8by4_f32>
 800b38a:	e7be      	b.n	800b30a <arm_cfft_f32+0x3a>
 800b38c:	b1ad      	cbz	r5, 800b3ba <arm_cfft_f32+0xea>
 800b38e:	f101 030c 	add.w	r3, r1, #12
 800b392:	2200      	movs	r2, #0
 800b394:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b398:	3201      	adds	r2, #1
 800b39a:	eef1 7a67 	vneg.f32	s15, s15
 800b39e:	4295      	cmp	r5, r2
 800b3a0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b3a4:	f103 0308 	add.w	r3, r3, #8
 800b3a8:	d1f4      	bne.n	800b394 <arm_cfft_f32+0xc4>
 800b3aa:	e79a      	b.n	800b2e2 <arm_cfft_f32+0x12>
 800b3ac:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b3b0:	d0a5      	beq.n	800b2fe <arm_cfft_f32+0x2e>
 800b3b2:	e7aa      	b.n	800b30a <arm_cfft_f32+0x3a>
 800b3b4:	2d10      	cmp	r5, #16
 800b3b6:	d0b6      	beq.n	800b326 <arm_cfft_f32+0x56>
 800b3b8:	e7a7      	b.n	800b30a <arm_cfft_f32+0x3a>
 800b3ba:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b3be:	d894      	bhi.n	800b2ea <arm_cfft_f32+0x1a>
 800b3c0:	e7aa      	b.n	800b318 <arm_cfft_f32+0x48>
 800b3c2:	bf00      	nop

0800b3c4 <arm_radix8_butterfly_f32>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	ed2d 8b10 	vpush	{d8-d15}
 800b3cc:	b09d      	sub	sp, #116	@ 0x74
 800b3ce:	461c      	mov	r4, r3
 800b3d0:	ed9f bac8 	vldr	s22, [pc, #800]	@ 800b6f4 <arm_radix8_butterfly_f32+0x330>
 800b3d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800b3d6:	1d03      	adds	r3, r0, #4
 800b3d8:	4682      	mov	sl, r0
 800b3da:	4689      	mov	r9, r1
 800b3dc:	468b      	mov	fp, r1
 800b3de:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b3e0:	9400      	str	r4, [sp, #0]
 800b3e2:	469e      	mov	lr, r3
 800b3e4:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800b3e8:	005a      	lsls	r2, r3, #1
 800b3ea:	18d6      	adds	r6, r2, r3
 800b3ec:	18f5      	adds	r5, r6, r3
 800b3ee:	9203      	str	r2, [sp, #12]
 800b3f0:	195a      	adds	r2, r3, r5
 800b3f2:	18d0      	adds	r0, r2, r3
 800b3f4:	00df      	lsls	r7, r3, #3
 800b3f6:	1819      	adds	r1, r3, r0
 800b3f8:	463c      	mov	r4, r7
 800b3fa:	9701      	str	r7, [sp, #4]
 800b3fc:	4457      	add	r7, sl
 800b3fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b400:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800b40a:	eb07 0c04 	add.w	ip, r7, r4
 800b40e:	9c00      	ldr	r4, [sp, #0]
 800b410:	9302      	str	r3, [sp, #8]
 800b412:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800b416:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800b41a:	3204      	adds	r2, #4
 800b41c:	3104      	adds	r1, #4
 800b41e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800b422:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b426:	f04f 0800 	mov.w	r8, #0
 800b42a:	eddc 7a00 	vldr	s15, [ip]
 800b42e:	edd7 6a00 	vldr	s13, [r7]
 800b432:	edd6 3a00 	vldr	s7, [r6]
 800b436:	ed5e aa01 	vldr	s21, [lr, #-4]
 800b43a:	edd5 4a00 	vldr	s9, [r5]
 800b43e:	ed90 2a00 	vldr	s4, [r0]
 800b442:	ed12 7a01 	vldr	s14, [r2, #-4]
 800b446:	ed51 0a01 	vldr	s1, [r1, #-4]
 800b44a:	ee77 8a82 	vadd.f32	s17, s15, s4
 800b44e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800b452:	ee76 1a87 	vadd.f32	s3, s13, s14
 800b456:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800b45a:	ee31 6a84 	vadd.f32	s12, s3, s8
 800b45e:	ee33 5a28 	vadd.f32	s10, s6, s17
 800b462:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b466:	ee75 6a06 	vadd.f32	s13, s10, s12
 800b46a:	ee35 5a46 	vsub.f32	s10, s10, s12
 800b46e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800b472:	ed85 5a00 	vstr	s10, [r5]
 800b476:	ed96 1a01 	vldr	s2, [r6, #4]
 800b47a:	edd7 5a01 	vldr	s11, [r7, #4]
 800b47e:	ed92 aa00 	vldr	s20, [r2]
 800b482:	ed91 6a00 	vldr	s12, [r1]
 800b486:	ed9e 9a00 	vldr	s18, [lr]
 800b48a:	ed95 5a01 	vldr	s10, [r5, #4]
 800b48e:	eddc 6a01 	vldr	s13, [ip, #4]
 800b492:	edd0 9a01 	vldr	s19, [r0, #4]
 800b496:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800b49a:	ee71 2a46 	vsub.f32	s5, s2, s12
 800b49e:	ee75 3aca 	vsub.f32	s7, s11, s20
 800b4a2:	ee37 0a60 	vsub.f32	s0, s14, s1
 800b4a6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800b4aa:	ee37 7a20 	vadd.f32	s14, s14, s1
 800b4ae:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800b4b2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800b4b6:	ee79 3a05 	vadd.f32	s7, s18, s10
 800b4ba:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800b4be:	ee39 5a45 	vsub.f32	s10, s18, s10
 800b4c2:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800b4c6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800b4ca:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800b4ce:	ee31 6a06 	vadd.f32	s12, s2, s12
 800b4d2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800b4d6:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800b4da:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800b4de:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800b4e2:	ee33 3a68 	vsub.f32	s6, s6, s17
 800b4e6:	ee36 0a88 	vadd.f32	s0, s13, s16
 800b4ea:	ee75 8a86 	vadd.f32	s17, s11, s12
 800b4ee:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800b4f2:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800b4f6:	ee75 6a62 	vsub.f32	s13, s10, s5
 800b4fa:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800b4fe:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b502:	ee33 1a89 	vadd.f32	s2, s7, s18
 800b506:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800b50a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800b50e:	ee75 4a22 	vadd.f32	s9, s10, s5
 800b512:	ee32 5a27 	vadd.f32	s10, s4, s15
 800b516:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b51a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800b51e:	ee75 2a87 	vadd.f32	s5, s11, s14
 800b522:	ee31 9a28 	vadd.f32	s18, s2, s17
 800b526:	ee33 6a46 	vsub.f32	s12, s6, s12
 800b52a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800b52e:	ee33 2a80 	vadd.f32	s4, s7, s0
 800b532:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b536:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800b53a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b53e:	ee31 1a68 	vsub.f32	s2, s2, s17
 800b542:	ee34 4a21 	vadd.f32	s8, s8, s3
 800b546:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800b54a:	ee74 4a85 	vadd.f32	s9, s9, s10
 800b54e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b552:	44d8      	add	r8, fp
 800b554:	45c1      	cmp	r9, r8
 800b556:	ed8e 9a00 	vstr	s18, [lr]
 800b55a:	ed85 1a01 	vstr	s2, [r5, #4]
 800b55e:	449e      	add	lr, r3
 800b560:	ed8c 8a00 	vstr	s16, [ip]
 800b564:	441d      	add	r5, r3
 800b566:	ed80 6a00 	vstr	s12, [r0]
 800b56a:	edcc 0a01 	vstr	s1, [ip, #4]
 800b56e:	ed80 4a01 	vstr	s8, [r0, #4]
 800b572:	449c      	add	ip, r3
 800b574:	ed87 2a00 	vstr	s4, [r7]
 800b578:	4418      	add	r0, r3
 800b57a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800b57e:	ed42 2a01 	vstr	s5, [r2, #-4]
 800b582:	ed86 7a00 	vstr	s14, [r6]
 800b586:	ed87 3a01 	vstr	s6, [r7, #4]
 800b58a:	edc1 4a00 	vstr	s9, [r1]
 800b58e:	441f      	add	r7, r3
 800b590:	edc2 5a00 	vstr	s11, [r2]
 800b594:	4419      	add	r1, r3
 800b596:	edc6 6a01 	vstr	s13, [r6, #4]
 800b59a:	441a      	add	r2, r3
 800b59c:	441e      	add	r6, r3
 800b59e:	f63f af44 	bhi.w	800b42a <arm_radix8_butterfly_f32+0x66>
 800b5a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b5a4:	2907      	cmp	r1, #7
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f240 81e9 	bls.w	800b97e <arm_radix8_butterfly_f32+0x5ba>
 800b5ac:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800b5b0:	193e      	adds	r6, r7, r4
 800b5b2:	1935      	adds	r5, r6, r4
 800b5b4:	9c03      	ldr	r4, [sp, #12]
 800b5b6:	9000      	str	r0, [sp, #0]
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	3201      	adds	r2, #1
 800b5bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b5c0:	9900      	ldr	r1, [sp, #0]
 800b5c2:	1828      	adds	r0, r5, r0
 800b5c4:	eb00 0e01 	add.w	lr, r0, r1
 800b5c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b5ca:	440a      	add	r2, r1
 800b5cc:	eb04 0c01 	add.w	ip, r4, r1
 800b5d0:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800b5d4:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800b5d8:	9a00      	ldr	r2, [sp, #0]
 800b5da:	940f      	str	r4, [sp, #60]	@ 0x3c
 800b5dc:	00ed      	lsls	r5, r5, #3
 800b5de:	9511      	str	r5, [sp, #68]	@ 0x44
 800b5e0:	00d5      	lsls	r5, r2, #3
 800b5e2:	950d      	str	r5, [sp, #52]	@ 0x34
 800b5e4:	9d01      	ldr	r5, [sp, #4]
 800b5e6:	3508      	adds	r5, #8
 800b5e8:	9516      	str	r5, [sp, #88]	@ 0x58
 800b5ea:	9d02      	ldr	r5, [sp, #8]
 800b5ec:	3508      	adds	r5, #8
 800b5ee:	0114      	lsls	r4, r2, #4
 800b5f0:	9517      	str	r5, [sp, #92]	@ 0x5c
 800b5f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5f4:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800b5f6:	940e      	str	r4, [sp, #56]	@ 0x38
 800b5f8:	00c0      	lsls	r0, r0, #3
 800b5fa:	9010      	str	r0, [sp, #64]	@ 0x40
 800b5fc:	18aa      	adds	r2, r5, r2
 800b5fe:	9207      	str	r2, [sp, #28]
 800b600:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b602:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b604:	18aa      	adds	r2, r5, r2
 800b606:	9208      	str	r2, [sp, #32]
 800b608:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b60a:	18aa      	adds	r2, r5, r2
 800b60c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b60e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b612:	f10e 0204 	add.w	r2, lr, #4
 800b616:	920a      	str	r2, [sp, #40]	@ 0x28
 800b618:	00c9      	lsls	r1, r1, #3
 800b61a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b61c:	310c      	adds	r1, #12
 800b61e:	00f6      	lsls	r6, r6, #3
 800b620:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800b624:	9114      	str	r1, [sp, #80]	@ 0x50
 800b626:	18a9      	adds	r1, r5, r2
 800b628:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b62a:	9612      	str	r6, [sp, #72]	@ 0x48
 800b62c:	00ff      	lsls	r7, r7, #3
 800b62e:	19ae      	adds	r6, r5, r6
 800b630:	3008      	adds	r0, #8
 800b632:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800b636:	9606      	str	r6, [sp, #24]
 800b638:	9019      	str	r0, [sp, #100]	@ 0x64
 800b63a:	18aa      	adds	r2, r5, r2
 800b63c:	0164      	lsls	r4, r4, #5
 800b63e:	19ee      	adds	r6, r5, r7
 800b640:	f10c 000c 	add.w	r0, ip, #12
 800b644:	9713      	str	r7, [sp, #76]	@ 0x4c
 800b646:	9604      	str	r6, [sp, #16]
 800b648:	9015      	str	r0, [sp, #84]	@ 0x54
 800b64a:	9103      	str	r1, [sp, #12]
 800b64c:	9205      	str	r2, [sp, #20]
 800b64e:	f104 0208 	add.w	r2, r4, #8
 800b652:	9218      	str	r2, [sp, #96]	@ 0x60
 800b654:	f04f 0801 	mov.w	r8, #1
 800b658:	2200      	movs	r2, #0
 800b65a:	f102 0108 	add.w	r1, r2, #8
 800b65e:	460f      	mov	r7, r1
 800b660:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b662:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b664:	188e      	adds	r6, r1, r2
 800b666:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b668:	188d      	adds	r5, r1, r2
 800b66a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b66c:	188c      	adds	r4, r1, r2
 800b66e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800b670:	1888      	adds	r0, r1, r2
 800b672:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800b674:	eb01 0c02 	add.w	ip, r1, r2
 800b678:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b67a:	440a      	add	r2, r1
 800b67c:	9903      	ldr	r1, [sp, #12]
 800b67e:	edd1 fa00 	vldr	s31, [r1]
 800b682:	9905      	ldr	r1, [sp, #20]
 800b684:	ed91 fa00 	vldr	s30, [r1]
 800b688:	9904      	ldr	r1, [sp, #16]
 800b68a:	edd1 ea00 	vldr	s29, [r1]
 800b68e:	9906      	ldr	r1, [sp, #24]
 800b690:	ed91 ea00 	vldr	s28, [r1]
 800b694:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b696:	edd1 da00 	vldr	s27, [r1]
 800b69a:	9908      	ldr	r1, [sp, #32]
 800b69c:	ed91 da00 	vldr	s26, [r1]
 800b6a0:	9907      	ldr	r1, [sp, #28]
 800b6a2:	edd1 ca00 	vldr	s25, [r1]
 800b6a6:	9903      	ldr	r1, [sp, #12]
 800b6a8:	ed91 ca01 	vldr	s24, [r1, #4]
 800b6ac:	9905      	ldr	r1, [sp, #20]
 800b6ae:	edd1 ba01 	vldr	s23, [r1, #4]
 800b6b2:	9904      	ldr	r1, [sp, #16]
 800b6b4:	edd1 aa01 	vldr	s21, [r1, #4]
 800b6b8:	9906      	ldr	r1, [sp, #24]
 800b6ba:	ed91 aa01 	vldr	s20, [r1, #4]
 800b6be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6c0:	edd1 7a01 	vldr	s15, [r1, #4]
 800b6c4:	9908      	ldr	r1, [sp, #32]
 800b6c6:	edcd 7a00 	vstr	s15, [sp]
 800b6ca:	edd1 7a01 	vldr	s15, [r1, #4]
 800b6ce:	9907      	ldr	r1, [sp, #28]
 800b6d0:	edcd 7a01 	vstr	s15, [sp, #4]
 800b6d4:	edd1 7a01 	vldr	s15, [r1, #4]
 800b6d8:	eb0a 0e07 	add.w	lr, sl, r7
 800b6dc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800b6de:	edcd 7a02 	vstr	s15, [sp, #8]
 800b6e2:	eb0c 010a 	add.w	r1, ip, sl
 800b6e6:	4456      	add	r6, sl
 800b6e8:	4455      	add	r5, sl
 800b6ea:	4454      	add	r4, sl
 800b6ec:	4450      	add	r0, sl
 800b6ee:	4452      	add	r2, sl
 800b6f0:	46c4      	mov	ip, r8
 800b6f2:	e001      	b.n	800b6f8 <arm_radix8_butterfly_f32+0x334>
 800b6f4:	3f3504f3 	.word	0x3f3504f3
 800b6f8:	ed96 5a00 	vldr	s10, [r6]
 800b6fc:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b700:	ed11 6a01 	vldr	s12, [r1, #-4]
 800b704:	edd0 7a00 	vldr	s15, [r0]
 800b708:	ed17 7a01 	vldr	s14, [r7, #-4]
 800b70c:	edde 3a00 	vldr	s7, [lr]
 800b710:	ed94 3a00 	vldr	s6, [r4]
 800b714:	ed95 2a00 	vldr	s4, [r5]
 800b718:	ed9e 0a01 	vldr	s0, [lr, #4]
 800b71c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b720:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b724:	ee33 4a29 	vadd.f32	s8, s6, s19
 800b728:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b72c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b730:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b734:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b738:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b73c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b740:	ed8e 6a00 	vstr	s12, [lr]
 800b744:	edd0 8a01 	vldr	s17, [r0, #4]
 800b748:	ed95 9a01 	vldr	s18, [r5, #4]
 800b74c:	edd1 2a00 	vldr	s5, [r1]
 800b750:	ed97 7a00 	vldr	s14, [r7]
 800b754:	edd4 0a01 	vldr	s1, [r4, #4]
 800b758:	ed96 6a01 	vldr	s12, [r6, #4]
 800b75c:	edd2 5a00 	vldr	s11, [r2]
 800b760:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b764:	ee33 3a69 	vsub.f32	s6, s6, s19
 800b768:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b76c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800b770:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b774:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b778:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b77c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b780:	ee75 8a69 	vsub.f32	s17, s10, s19
 800b784:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b788:	ee35 5a29 	vadd.f32	s10, s10, s19
 800b78c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b790:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b794:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800b798:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b79c:	ee32 9a08 	vadd.f32	s18, s4, s16
 800b7a0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b7a4:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b7a8:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b7ac:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b7b0:	ee32 1a87 	vadd.f32	s2, s5, s14
 800b7b4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b7b8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b7bc:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b7c0:	ee73 0a29 	vadd.f32	s1, s6, s19
 800b7c4:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b7c8:	ee33 3a69 	vsub.f32	s6, s6, s19
 800b7cc:	ee32 7a64 	vsub.f32	s14, s4, s9
 800b7d0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800b7d4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b7d8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b7dc:	ee75 8a85 	vadd.f32	s17, s11, s10
 800b7e0:	ee74 3a22 	vadd.f32	s7, s8, s5
 800b7e4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800b7e8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b7ec:	ee79 1a41 	vsub.f32	s3, s18, s2
 800b7f0:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800b7f4:	ee76 5a43 	vsub.f32	s11, s12, s6
 800b7f8:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b7fc:	ee72 4a24 	vadd.f32	s9, s4, s9
 800b800:	ee30 4a60 	vsub.f32	s8, s0, s1
 800b804:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800b808:	ee30 0a20 	vadd.f32	s0, s0, s1
 800b80c:	ee77 9a85 	vadd.f32	s19, s15, s10
 800b810:	ee36 6a03 	vadd.f32	s12, s12, s6
 800b814:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b818:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800b81c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800b820:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800b824:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800b828:	ee39 1a01 	vadd.f32	s2, s18, s2
 800b82c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800b830:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800b834:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800b838:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800b83c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800b840:	ee35 3a03 	vadd.f32	s6, s10, s6
 800b844:	ee72 6a66 	vsub.f32	s13, s4, s13
 800b848:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800b84c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800b850:	ed9d 4a02 	vldr	s8, [sp, #8]
 800b854:	ed8e 1a01 	vstr	s2, [lr, #4]
 800b858:	ee77 3a63 	vsub.f32	s7, s14, s7
 800b85c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b860:	ed9d 7a01 	vldr	s14, [sp, #4]
 800b864:	ed86 3a00 	vstr	s6, [r6]
 800b868:	ee30 9a89 	vadd.f32	s18, s1, s18
 800b86c:	ee32 2a05 	vadd.f32	s4, s4, s10
 800b870:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800b874:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800b878:	ee67 2a22 	vmul.f32	s5, s14, s5
 800b87c:	ee64 1a00 	vmul.f32	s3, s8, s0
 800b880:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b884:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800b888:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800b88c:	ee64 8a28 	vmul.f32	s17, s8, s17
 800b890:	ed9d 4a00 	vldr	s8, [sp]
 800b894:	edc6 6a01 	vstr	s13, [r6, #4]
 800b898:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b89c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800b8a0:	ee64 9a29 	vmul.f32	s19, s8, s19
 800b8a4:	ee24 4a25 	vmul.f32	s8, s8, s11
 800b8a8:	ee30 7a87 	vadd.f32	s14, s1, s14
 800b8ac:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b8b0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800b8b4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800b8b8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800b8bc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800b8c0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800b8c4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800b8c8:	ee75 1a21 	vadd.f32	s3, s10, s3
 800b8cc:	ee30 0a68 	vsub.f32	s0, s0, s17
 800b8d0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800b8d4:	ee70 0a84 	vadd.f32	s1, s1, s8
 800b8d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b8dc:	44dc      	add	ip, fp
 800b8de:	45e1      	cmp	r9, ip
 800b8e0:	ed84 9a00 	vstr	s18, [r4]
 800b8e4:	edc4 3a01 	vstr	s7, [r4, #4]
 800b8e8:	449e      	add	lr, r3
 800b8ea:	ed02 7a01 	vstr	s14, [r2, #-4]
 800b8ee:	edc2 2a00 	vstr	s5, [r2]
 800b8f2:	441e      	add	r6, r3
 800b8f4:	ed85 2a00 	vstr	s4, [r5]
 800b8f8:	ed85 8a01 	vstr	s16, [r5, #4]
 800b8fc:	441c      	add	r4, r3
 800b8fe:	ed47 1a01 	vstr	s3, [r7, #-4]
 800b902:	ed87 0a00 	vstr	s0, [r7]
 800b906:	441a      	add	r2, r3
 800b908:	ed41 4a01 	vstr	s9, [r1, #-4]
 800b90c:	edc1 9a00 	vstr	s19, [r1]
 800b910:	441d      	add	r5, r3
 800b912:	edc0 0a00 	vstr	s1, [r0]
 800b916:	441f      	add	r7, r3
 800b918:	ed80 6a01 	vstr	s12, [r0, #4]
 800b91c:	4419      	add	r1, r3
 800b91e:	4418      	add	r0, r3
 800b920:	f63f aeea 	bhi.w	800b6f8 <arm_radix8_butterfly_f32+0x334>
 800b924:	9a03      	ldr	r2, [sp, #12]
 800b926:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b928:	440a      	add	r2, r1
 800b92a:	9203      	str	r2, [sp, #12]
 800b92c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b92e:	9a05      	ldr	r2, [sp, #20]
 800b930:	440a      	add	r2, r1
 800b932:	9205      	str	r2, [sp, #20]
 800b934:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b936:	9a04      	ldr	r2, [sp, #16]
 800b938:	440a      	add	r2, r1
 800b93a:	9204      	str	r2, [sp, #16]
 800b93c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b93e:	9a06      	ldr	r2, [sp, #24]
 800b940:	440a      	add	r2, r1
 800b942:	9206      	str	r2, [sp, #24]
 800b944:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b948:	440a      	add	r2, r1
 800b94a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b94c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b94e:	9a08      	ldr	r2, [sp, #32]
 800b950:	440a      	add	r2, r1
 800b952:	9208      	str	r2, [sp, #32]
 800b954:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b956:	9a07      	ldr	r2, [sp, #28]
 800b958:	440a      	add	r2, r1
 800b95a:	9207      	str	r2, [sp, #28]
 800b95c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b95e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b960:	f108 0801 	add.w	r8, r8, #1
 800b964:	3208      	adds	r2, #8
 800b966:	4588      	cmp	r8, r1
 800b968:	920a      	str	r2, [sp, #40]	@ 0x28
 800b96a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b96c:	f47f ae75 	bne.w	800b65a <arm_radix8_butterfly_f32+0x296>
 800b970:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	46c3      	mov	fp, r8
 800b978:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 800b97c:	e532      	b.n	800b3e4 <arm_radix8_butterfly_f32+0x20>
 800b97e:	b01d      	add	sp, #116	@ 0x74
 800b980:	ecbd 8b10 	vpop	{d8-d15}
 800b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b988 <__cvt>:
 800b988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b98c:	ec57 6b10 	vmov	r6, r7, d0
 800b990:	2f00      	cmp	r7, #0
 800b992:	460c      	mov	r4, r1
 800b994:	4619      	mov	r1, r3
 800b996:	463b      	mov	r3, r7
 800b998:	bfbb      	ittet	lt
 800b99a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b99e:	461f      	movlt	r7, r3
 800b9a0:	2300      	movge	r3, #0
 800b9a2:	232d      	movlt	r3, #45	@ 0x2d
 800b9a4:	700b      	strb	r3, [r1, #0]
 800b9a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b9ac:	4691      	mov	r9, r2
 800b9ae:	f023 0820 	bic.w	r8, r3, #32
 800b9b2:	bfbc      	itt	lt
 800b9b4:	4632      	movlt	r2, r6
 800b9b6:	4616      	movlt	r6, r2
 800b9b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9bc:	d005      	beq.n	800b9ca <__cvt+0x42>
 800b9be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b9c2:	d100      	bne.n	800b9c6 <__cvt+0x3e>
 800b9c4:	3401      	adds	r4, #1
 800b9c6:	2102      	movs	r1, #2
 800b9c8:	e000      	b.n	800b9cc <__cvt+0x44>
 800b9ca:	2103      	movs	r1, #3
 800b9cc:	ab03      	add	r3, sp, #12
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	ab02      	add	r3, sp, #8
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	ec47 6b10 	vmov	d0, r6, r7
 800b9d8:	4653      	mov	r3, sl
 800b9da:	4622      	mov	r2, r4
 800b9dc:	f000 fe6c 	bl	800c6b8 <_dtoa_r>
 800b9e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	d119      	bne.n	800ba1c <__cvt+0x94>
 800b9e8:	f019 0f01 	tst.w	r9, #1
 800b9ec:	d00e      	beq.n	800ba0c <__cvt+0x84>
 800b9ee:	eb00 0904 	add.w	r9, r0, r4
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f5 f8e5 	bl	8000bc8 <__aeabi_dcmpeq>
 800b9fe:	b108      	cbz	r0, 800ba04 <__cvt+0x7c>
 800ba00:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba04:	2230      	movs	r2, #48	@ 0x30
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	454b      	cmp	r3, r9
 800ba0a:	d31e      	bcc.n	800ba4a <__cvt+0xc2>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba10:	1b5b      	subs	r3, r3, r5
 800ba12:	4628      	mov	r0, r5
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	b004      	add	sp, #16
 800ba18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba20:	eb00 0904 	add.w	r9, r0, r4
 800ba24:	d1e5      	bne.n	800b9f2 <__cvt+0x6a>
 800ba26:	7803      	ldrb	r3, [r0, #0]
 800ba28:	2b30      	cmp	r3, #48	@ 0x30
 800ba2a:	d10a      	bne.n	800ba42 <__cvt+0xba>
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4630      	mov	r0, r6
 800ba32:	4639      	mov	r1, r7
 800ba34:	f7f5 f8c8 	bl	8000bc8 <__aeabi_dcmpeq>
 800ba38:	b918      	cbnz	r0, 800ba42 <__cvt+0xba>
 800ba3a:	f1c4 0401 	rsb	r4, r4, #1
 800ba3e:	f8ca 4000 	str.w	r4, [sl]
 800ba42:	f8da 3000 	ldr.w	r3, [sl]
 800ba46:	4499      	add	r9, r3
 800ba48:	e7d3      	b.n	800b9f2 <__cvt+0x6a>
 800ba4a:	1c59      	adds	r1, r3, #1
 800ba4c:	9103      	str	r1, [sp, #12]
 800ba4e:	701a      	strb	r2, [r3, #0]
 800ba50:	e7d9      	b.n	800ba06 <__cvt+0x7e>

0800ba52 <__exponent>:
 800ba52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba54:	2900      	cmp	r1, #0
 800ba56:	bfba      	itte	lt
 800ba58:	4249      	neglt	r1, r1
 800ba5a:	232d      	movlt	r3, #45	@ 0x2d
 800ba5c:	232b      	movge	r3, #43	@ 0x2b
 800ba5e:	2909      	cmp	r1, #9
 800ba60:	7002      	strb	r2, [r0, #0]
 800ba62:	7043      	strb	r3, [r0, #1]
 800ba64:	dd29      	ble.n	800baba <__exponent+0x68>
 800ba66:	f10d 0307 	add.w	r3, sp, #7
 800ba6a:	461d      	mov	r5, r3
 800ba6c:	270a      	movs	r7, #10
 800ba6e:	461a      	mov	r2, r3
 800ba70:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba74:	fb07 1416 	mls	r4, r7, r6, r1
 800ba78:	3430      	adds	r4, #48	@ 0x30
 800ba7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba7e:	460c      	mov	r4, r1
 800ba80:	2c63      	cmp	r4, #99	@ 0x63
 800ba82:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba86:	4631      	mov	r1, r6
 800ba88:	dcf1      	bgt.n	800ba6e <__exponent+0x1c>
 800ba8a:	3130      	adds	r1, #48	@ 0x30
 800ba8c:	1e94      	subs	r4, r2, #2
 800ba8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba92:	1c41      	adds	r1, r0, #1
 800ba94:	4623      	mov	r3, r4
 800ba96:	42ab      	cmp	r3, r5
 800ba98:	d30a      	bcc.n	800bab0 <__exponent+0x5e>
 800ba9a:	f10d 0309 	add.w	r3, sp, #9
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	42ac      	cmp	r4, r5
 800baa2:	bf88      	it	hi
 800baa4:	2300      	movhi	r3, #0
 800baa6:	3302      	adds	r3, #2
 800baa8:	4403      	add	r3, r0
 800baaa:	1a18      	subs	r0, r3, r0
 800baac:	b003      	add	sp, #12
 800baae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bab4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bab8:	e7ed      	b.n	800ba96 <__exponent+0x44>
 800baba:	2330      	movs	r3, #48	@ 0x30
 800babc:	3130      	adds	r1, #48	@ 0x30
 800babe:	7083      	strb	r3, [r0, #2]
 800bac0:	70c1      	strb	r1, [r0, #3]
 800bac2:	1d03      	adds	r3, r0, #4
 800bac4:	e7f1      	b.n	800baaa <__exponent+0x58>
	...

0800bac8 <_printf_float>:
 800bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	b08d      	sub	sp, #52	@ 0x34
 800bace:	460c      	mov	r4, r1
 800bad0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bad4:	4616      	mov	r6, r2
 800bad6:	461f      	mov	r7, r3
 800bad8:	4605      	mov	r5, r0
 800bada:	f000 fceb 	bl	800c4b4 <_localeconv_r>
 800bade:	6803      	ldr	r3, [r0, #0]
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7f4 fc44 	bl	8000370 <strlen>
 800bae8:	2300      	movs	r3, #0
 800baea:	930a      	str	r3, [sp, #40]	@ 0x28
 800baec:	f8d8 3000 	ldr.w	r3, [r8]
 800baf0:	9005      	str	r0, [sp, #20]
 800baf2:	3307      	adds	r3, #7
 800baf4:	f023 0307 	bic.w	r3, r3, #7
 800baf8:	f103 0208 	add.w	r2, r3, #8
 800bafc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bb00:	f8d4 b000 	ldr.w	fp, [r4]
 800bb04:	f8c8 2000 	str.w	r2, [r8]
 800bb08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bb10:	9307      	str	r3, [sp, #28]
 800bb12:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bb1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb1e:	4b9c      	ldr	r3, [pc, #624]	@ (800bd90 <_printf_float+0x2c8>)
 800bb20:	f04f 32ff 	mov.w	r2, #4294967295
 800bb24:	f7f5 f882 	bl	8000c2c <__aeabi_dcmpun>
 800bb28:	bb70      	cbnz	r0, 800bb88 <_printf_float+0xc0>
 800bb2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb2e:	4b98      	ldr	r3, [pc, #608]	@ (800bd90 <_printf_float+0x2c8>)
 800bb30:	f04f 32ff 	mov.w	r2, #4294967295
 800bb34:	f7f5 f85c 	bl	8000bf0 <__aeabi_dcmple>
 800bb38:	bb30      	cbnz	r0, 800bb88 <_printf_float+0xc0>
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4640      	mov	r0, r8
 800bb40:	4649      	mov	r1, r9
 800bb42:	f7f5 f84b 	bl	8000bdc <__aeabi_dcmplt>
 800bb46:	b110      	cbz	r0, 800bb4e <_printf_float+0x86>
 800bb48:	232d      	movs	r3, #45	@ 0x2d
 800bb4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb4e:	4a91      	ldr	r2, [pc, #580]	@ (800bd94 <_printf_float+0x2cc>)
 800bb50:	4b91      	ldr	r3, [pc, #580]	@ (800bd98 <_printf_float+0x2d0>)
 800bb52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb56:	bf94      	ite	ls
 800bb58:	4690      	movls	r8, r2
 800bb5a:	4698      	movhi	r8, r3
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	6123      	str	r3, [r4, #16]
 800bb60:	f02b 0304 	bic.w	r3, fp, #4
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	f04f 0900 	mov.w	r9, #0
 800bb6a:	9700      	str	r7, [sp, #0]
 800bb6c:	4633      	mov	r3, r6
 800bb6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb70:	4621      	mov	r1, r4
 800bb72:	4628      	mov	r0, r5
 800bb74:	f000 f9d2 	bl	800bf1c <_printf_common>
 800bb78:	3001      	adds	r0, #1
 800bb7a:	f040 808d 	bne.w	800bc98 <_printf_float+0x1d0>
 800bb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb82:	b00d      	add	sp, #52	@ 0x34
 800bb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb88:	4642      	mov	r2, r8
 800bb8a:	464b      	mov	r3, r9
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	4649      	mov	r1, r9
 800bb90:	f7f5 f84c 	bl	8000c2c <__aeabi_dcmpun>
 800bb94:	b140      	cbz	r0, 800bba8 <_printf_float+0xe0>
 800bb96:	464b      	mov	r3, r9
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	bfbc      	itt	lt
 800bb9c:	232d      	movlt	r3, #45	@ 0x2d
 800bb9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bba2:	4a7e      	ldr	r2, [pc, #504]	@ (800bd9c <_printf_float+0x2d4>)
 800bba4:	4b7e      	ldr	r3, [pc, #504]	@ (800bda0 <_printf_float+0x2d8>)
 800bba6:	e7d4      	b.n	800bb52 <_printf_float+0x8a>
 800bba8:	6863      	ldr	r3, [r4, #4]
 800bbaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bbae:	9206      	str	r2, [sp, #24]
 800bbb0:	1c5a      	adds	r2, r3, #1
 800bbb2:	d13b      	bne.n	800bc2c <_printf_float+0x164>
 800bbb4:	2306      	movs	r3, #6
 800bbb6:	6063      	str	r3, [r4, #4]
 800bbb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	6022      	str	r2, [r4, #0]
 800bbc0:	9303      	str	r3, [sp, #12]
 800bbc2:	ab0a      	add	r3, sp, #40	@ 0x28
 800bbc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bbc8:	ab09      	add	r3, sp, #36	@ 0x24
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	6861      	ldr	r1, [r4, #4]
 800bbce:	ec49 8b10 	vmov	d0, r8, r9
 800bbd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	f7ff fed6 	bl	800b988 <__cvt>
 800bbdc:	9b06      	ldr	r3, [sp, #24]
 800bbde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbe0:	2b47      	cmp	r3, #71	@ 0x47
 800bbe2:	4680      	mov	r8, r0
 800bbe4:	d129      	bne.n	800bc3a <_printf_float+0x172>
 800bbe6:	1cc8      	adds	r0, r1, #3
 800bbe8:	db02      	blt.n	800bbf0 <_printf_float+0x128>
 800bbea:	6863      	ldr	r3, [r4, #4]
 800bbec:	4299      	cmp	r1, r3
 800bbee:	dd41      	ble.n	800bc74 <_printf_float+0x1ac>
 800bbf0:	f1aa 0a02 	sub.w	sl, sl, #2
 800bbf4:	fa5f fa8a 	uxtb.w	sl, sl
 800bbf8:	3901      	subs	r1, #1
 800bbfa:	4652      	mov	r2, sl
 800bbfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bc00:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc02:	f7ff ff26 	bl	800ba52 <__exponent>
 800bc06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc08:	1813      	adds	r3, r2, r0
 800bc0a:	2a01      	cmp	r2, #1
 800bc0c:	4681      	mov	r9, r0
 800bc0e:	6123      	str	r3, [r4, #16]
 800bc10:	dc02      	bgt.n	800bc18 <_printf_float+0x150>
 800bc12:	6822      	ldr	r2, [r4, #0]
 800bc14:	07d2      	lsls	r2, r2, #31
 800bc16:	d501      	bpl.n	800bc1c <_printf_float+0x154>
 800bc18:	3301      	adds	r3, #1
 800bc1a:	6123      	str	r3, [r4, #16]
 800bc1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d0a2      	beq.n	800bb6a <_printf_float+0xa2>
 800bc24:	232d      	movs	r3, #45	@ 0x2d
 800bc26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc2a:	e79e      	b.n	800bb6a <_printf_float+0xa2>
 800bc2c:	9a06      	ldr	r2, [sp, #24]
 800bc2e:	2a47      	cmp	r2, #71	@ 0x47
 800bc30:	d1c2      	bne.n	800bbb8 <_printf_float+0xf0>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1c0      	bne.n	800bbb8 <_printf_float+0xf0>
 800bc36:	2301      	movs	r3, #1
 800bc38:	e7bd      	b.n	800bbb6 <_printf_float+0xee>
 800bc3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc3e:	d9db      	bls.n	800bbf8 <_printf_float+0x130>
 800bc40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc44:	d118      	bne.n	800bc78 <_printf_float+0x1b0>
 800bc46:	2900      	cmp	r1, #0
 800bc48:	6863      	ldr	r3, [r4, #4]
 800bc4a:	dd0b      	ble.n	800bc64 <_printf_float+0x19c>
 800bc4c:	6121      	str	r1, [r4, #16]
 800bc4e:	b913      	cbnz	r3, 800bc56 <_printf_float+0x18e>
 800bc50:	6822      	ldr	r2, [r4, #0]
 800bc52:	07d0      	lsls	r0, r2, #31
 800bc54:	d502      	bpl.n	800bc5c <_printf_float+0x194>
 800bc56:	3301      	adds	r3, #1
 800bc58:	440b      	add	r3, r1
 800bc5a:	6123      	str	r3, [r4, #16]
 800bc5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc5e:	f04f 0900 	mov.w	r9, #0
 800bc62:	e7db      	b.n	800bc1c <_printf_float+0x154>
 800bc64:	b913      	cbnz	r3, 800bc6c <_printf_float+0x1a4>
 800bc66:	6822      	ldr	r2, [r4, #0]
 800bc68:	07d2      	lsls	r2, r2, #31
 800bc6a:	d501      	bpl.n	800bc70 <_printf_float+0x1a8>
 800bc6c:	3302      	adds	r3, #2
 800bc6e:	e7f4      	b.n	800bc5a <_printf_float+0x192>
 800bc70:	2301      	movs	r3, #1
 800bc72:	e7f2      	b.n	800bc5a <_printf_float+0x192>
 800bc74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc7a:	4299      	cmp	r1, r3
 800bc7c:	db05      	blt.n	800bc8a <_printf_float+0x1c2>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	6121      	str	r1, [r4, #16]
 800bc82:	07d8      	lsls	r0, r3, #31
 800bc84:	d5ea      	bpl.n	800bc5c <_printf_float+0x194>
 800bc86:	1c4b      	adds	r3, r1, #1
 800bc88:	e7e7      	b.n	800bc5a <_printf_float+0x192>
 800bc8a:	2900      	cmp	r1, #0
 800bc8c:	bfd4      	ite	le
 800bc8e:	f1c1 0202 	rsble	r2, r1, #2
 800bc92:	2201      	movgt	r2, #1
 800bc94:	4413      	add	r3, r2
 800bc96:	e7e0      	b.n	800bc5a <_printf_float+0x192>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	055a      	lsls	r2, r3, #21
 800bc9c:	d407      	bmi.n	800bcae <_printf_float+0x1e6>
 800bc9e:	6923      	ldr	r3, [r4, #16]
 800bca0:	4642      	mov	r2, r8
 800bca2:	4631      	mov	r1, r6
 800bca4:	4628      	mov	r0, r5
 800bca6:	47b8      	blx	r7
 800bca8:	3001      	adds	r0, #1
 800bcaa:	d12b      	bne.n	800bd04 <_printf_float+0x23c>
 800bcac:	e767      	b.n	800bb7e <_printf_float+0xb6>
 800bcae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bcb2:	f240 80dd 	bls.w	800be70 <_printf_float+0x3a8>
 800bcb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f7f4 ff83 	bl	8000bc8 <__aeabi_dcmpeq>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d033      	beq.n	800bd2e <_printf_float+0x266>
 800bcc6:	4a37      	ldr	r2, [pc, #220]	@ (800bda4 <_printf_float+0x2dc>)
 800bcc8:	2301      	movs	r3, #1
 800bcca:	4631      	mov	r1, r6
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b8      	blx	r7
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	f43f af54 	beq.w	800bb7e <_printf_float+0xb6>
 800bcd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bcda:	4543      	cmp	r3, r8
 800bcdc:	db02      	blt.n	800bce4 <_printf_float+0x21c>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	07d8      	lsls	r0, r3, #31
 800bce2:	d50f      	bpl.n	800bd04 <_printf_float+0x23c>
 800bce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bce8:	4631      	mov	r1, r6
 800bcea:	4628      	mov	r0, r5
 800bcec:	47b8      	blx	r7
 800bcee:	3001      	adds	r0, #1
 800bcf0:	f43f af45 	beq.w	800bb7e <_printf_float+0xb6>
 800bcf4:	f04f 0900 	mov.w	r9, #0
 800bcf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcfc:	f104 0a1a 	add.w	sl, r4, #26
 800bd00:	45c8      	cmp	r8, r9
 800bd02:	dc09      	bgt.n	800bd18 <_printf_float+0x250>
 800bd04:	6823      	ldr	r3, [r4, #0]
 800bd06:	079b      	lsls	r3, r3, #30
 800bd08:	f100 8103 	bmi.w	800bf12 <_printf_float+0x44a>
 800bd0c:	68e0      	ldr	r0, [r4, #12]
 800bd0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd10:	4298      	cmp	r0, r3
 800bd12:	bfb8      	it	lt
 800bd14:	4618      	movlt	r0, r3
 800bd16:	e734      	b.n	800bb82 <_printf_float+0xba>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	4652      	mov	r2, sl
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b8      	blx	r7
 800bd22:	3001      	adds	r0, #1
 800bd24:	f43f af2b 	beq.w	800bb7e <_printf_float+0xb6>
 800bd28:	f109 0901 	add.w	r9, r9, #1
 800bd2c:	e7e8      	b.n	800bd00 <_printf_float+0x238>
 800bd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	dc39      	bgt.n	800bda8 <_printf_float+0x2e0>
 800bd34:	4a1b      	ldr	r2, [pc, #108]	@ (800bda4 <_printf_float+0x2dc>)
 800bd36:	2301      	movs	r3, #1
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	47b8      	blx	r7
 800bd3e:	3001      	adds	r0, #1
 800bd40:	f43f af1d 	beq.w	800bb7e <_printf_float+0xb6>
 800bd44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd48:	ea59 0303 	orrs.w	r3, r9, r3
 800bd4c:	d102      	bne.n	800bd54 <_printf_float+0x28c>
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	07d9      	lsls	r1, r3, #31
 800bd52:	d5d7      	bpl.n	800bd04 <_printf_float+0x23c>
 800bd54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b8      	blx	r7
 800bd5e:	3001      	adds	r0, #1
 800bd60:	f43f af0d 	beq.w	800bb7e <_printf_float+0xb6>
 800bd64:	f04f 0a00 	mov.w	sl, #0
 800bd68:	f104 0b1a 	add.w	fp, r4, #26
 800bd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd6e:	425b      	negs	r3, r3
 800bd70:	4553      	cmp	r3, sl
 800bd72:	dc01      	bgt.n	800bd78 <_printf_float+0x2b0>
 800bd74:	464b      	mov	r3, r9
 800bd76:	e793      	b.n	800bca0 <_printf_float+0x1d8>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	465a      	mov	r2, fp
 800bd7c:	4631      	mov	r1, r6
 800bd7e:	4628      	mov	r0, r5
 800bd80:	47b8      	blx	r7
 800bd82:	3001      	adds	r0, #1
 800bd84:	f43f aefb 	beq.w	800bb7e <_printf_float+0xb6>
 800bd88:	f10a 0a01 	add.w	sl, sl, #1
 800bd8c:	e7ee      	b.n	800bd6c <_printf_float+0x2a4>
 800bd8e:	bf00      	nop
 800bd90:	7fefffff 	.word	0x7fefffff
 800bd94:	08022554 	.word	0x08022554
 800bd98:	08022558 	.word	0x08022558
 800bd9c:	0802255c 	.word	0x0802255c
 800bda0:	08022560 	.word	0x08022560
 800bda4:	08022564 	.word	0x08022564
 800bda8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdaa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bdae:	4553      	cmp	r3, sl
 800bdb0:	bfa8      	it	ge
 800bdb2:	4653      	movge	r3, sl
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	4699      	mov	r9, r3
 800bdb8:	dc36      	bgt.n	800be28 <_printf_float+0x360>
 800bdba:	f04f 0b00 	mov.w	fp, #0
 800bdbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdc2:	f104 021a 	add.w	r2, r4, #26
 800bdc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bdc8:	9306      	str	r3, [sp, #24]
 800bdca:	eba3 0309 	sub.w	r3, r3, r9
 800bdce:	455b      	cmp	r3, fp
 800bdd0:	dc31      	bgt.n	800be36 <_printf_float+0x36e>
 800bdd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd4:	459a      	cmp	sl, r3
 800bdd6:	dc3a      	bgt.n	800be4e <_printf_float+0x386>
 800bdd8:	6823      	ldr	r3, [r4, #0]
 800bdda:	07da      	lsls	r2, r3, #31
 800bddc:	d437      	bmi.n	800be4e <_printf_float+0x386>
 800bdde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bde0:	ebaa 0903 	sub.w	r9, sl, r3
 800bde4:	9b06      	ldr	r3, [sp, #24]
 800bde6:	ebaa 0303 	sub.w	r3, sl, r3
 800bdea:	4599      	cmp	r9, r3
 800bdec:	bfa8      	it	ge
 800bdee:	4699      	movge	r9, r3
 800bdf0:	f1b9 0f00 	cmp.w	r9, #0
 800bdf4:	dc33      	bgt.n	800be5e <_printf_float+0x396>
 800bdf6:	f04f 0800 	mov.w	r8, #0
 800bdfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdfe:	f104 0b1a 	add.w	fp, r4, #26
 800be02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be04:	ebaa 0303 	sub.w	r3, sl, r3
 800be08:	eba3 0309 	sub.w	r3, r3, r9
 800be0c:	4543      	cmp	r3, r8
 800be0e:	f77f af79 	ble.w	800bd04 <_printf_float+0x23c>
 800be12:	2301      	movs	r3, #1
 800be14:	465a      	mov	r2, fp
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	f43f aeae 	beq.w	800bb7e <_printf_float+0xb6>
 800be22:	f108 0801 	add.w	r8, r8, #1
 800be26:	e7ec      	b.n	800be02 <_printf_float+0x33a>
 800be28:	4642      	mov	r2, r8
 800be2a:	4631      	mov	r1, r6
 800be2c:	4628      	mov	r0, r5
 800be2e:	47b8      	blx	r7
 800be30:	3001      	adds	r0, #1
 800be32:	d1c2      	bne.n	800bdba <_printf_float+0x2f2>
 800be34:	e6a3      	b.n	800bb7e <_printf_float+0xb6>
 800be36:	2301      	movs	r3, #1
 800be38:	4631      	mov	r1, r6
 800be3a:	4628      	mov	r0, r5
 800be3c:	9206      	str	r2, [sp, #24]
 800be3e:	47b8      	blx	r7
 800be40:	3001      	adds	r0, #1
 800be42:	f43f ae9c 	beq.w	800bb7e <_printf_float+0xb6>
 800be46:	9a06      	ldr	r2, [sp, #24]
 800be48:	f10b 0b01 	add.w	fp, fp, #1
 800be4c:	e7bb      	b.n	800bdc6 <_printf_float+0x2fe>
 800be4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be52:	4631      	mov	r1, r6
 800be54:	4628      	mov	r0, r5
 800be56:	47b8      	blx	r7
 800be58:	3001      	adds	r0, #1
 800be5a:	d1c0      	bne.n	800bdde <_printf_float+0x316>
 800be5c:	e68f      	b.n	800bb7e <_printf_float+0xb6>
 800be5e:	9a06      	ldr	r2, [sp, #24]
 800be60:	464b      	mov	r3, r9
 800be62:	4442      	add	r2, r8
 800be64:	4631      	mov	r1, r6
 800be66:	4628      	mov	r0, r5
 800be68:	47b8      	blx	r7
 800be6a:	3001      	adds	r0, #1
 800be6c:	d1c3      	bne.n	800bdf6 <_printf_float+0x32e>
 800be6e:	e686      	b.n	800bb7e <_printf_float+0xb6>
 800be70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be74:	f1ba 0f01 	cmp.w	sl, #1
 800be78:	dc01      	bgt.n	800be7e <_printf_float+0x3b6>
 800be7a:	07db      	lsls	r3, r3, #31
 800be7c:	d536      	bpl.n	800beec <_printf_float+0x424>
 800be7e:	2301      	movs	r3, #1
 800be80:	4642      	mov	r2, r8
 800be82:	4631      	mov	r1, r6
 800be84:	4628      	mov	r0, r5
 800be86:	47b8      	blx	r7
 800be88:	3001      	adds	r0, #1
 800be8a:	f43f ae78 	beq.w	800bb7e <_printf_float+0xb6>
 800be8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be92:	4631      	mov	r1, r6
 800be94:	4628      	mov	r0, r5
 800be96:	47b8      	blx	r7
 800be98:	3001      	adds	r0, #1
 800be9a:	f43f ae70 	beq.w	800bb7e <_printf_float+0xb6>
 800be9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bea2:	2200      	movs	r2, #0
 800bea4:	2300      	movs	r3, #0
 800bea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beaa:	f7f4 fe8d 	bl	8000bc8 <__aeabi_dcmpeq>
 800beae:	b9c0      	cbnz	r0, 800bee2 <_printf_float+0x41a>
 800beb0:	4653      	mov	r3, sl
 800beb2:	f108 0201 	add.w	r2, r8, #1
 800beb6:	4631      	mov	r1, r6
 800beb8:	4628      	mov	r0, r5
 800beba:	47b8      	blx	r7
 800bebc:	3001      	adds	r0, #1
 800bebe:	d10c      	bne.n	800beda <_printf_float+0x412>
 800bec0:	e65d      	b.n	800bb7e <_printf_float+0xb6>
 800bec2:	2301      	movs	r3, #1
 800bec4:	465a      	mov	r2, fp
 800bec6:	4631      	mov	r1, r6
 800bec8:	4628      	mov	r0, r5
 800beca:	47b8      	blx	r7
 800becc:	3001      	adds	r0, #1
 800bece:	f43f ae56 	beq.w	800bb7e <_printf_float+0xb6>
 800bed2:	f108 0801 	add.w	r8, r8, #1
 800bed6:	45d0      	cmp	r8, sl
 800bed8:	dbf3      	blt.n	800bec2 <_printf_float+0x3fa>
 800beda:	464b      	mov	r3, r9
 800bedc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bee0:	e6df      	b.n	800bca2 <_printf_float+0x1da>
 800bee2:	f04f 0800 	mov.w	r8, #0
 800bee6:	f104 0b1a 	add.w	fp, r4, #26
 800beea:	e7f4      	b.n	800bed6 <_printf_float+0x40e>
 800beec:	2301      	movs	r3, #1
 800beee:	4642      	mov	r2, r8
 800bef0:	e7e1      	b.n	800beb6 <_printf_float+0x3ee>
 800bef2:	2301      	movs	r3, #1
 800bef4:	464a      	mov	r2, r9
 800bef6:	4631      	mov	r1, r6
 800bef8:	4628      	mov	r0, r5
 800befa:	47b8      	blx	r7
 800befc:	3001      	adds	r0, #1
 800befe:	f43f ae3e 	beq.w	800bb7e <_printf_float+0xb6>
 800bf02:	f108 0801 	add.w	r8, r8, #1
 800bf06:	68e3      	ldr	r3, [r4, #12]
 800bf08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf0a:	1a5b      	subs	r3, r3, r1
 800bf0c:	4543      	cmp	r3, r8
 800bf0e:	dcf0      	bgt.n	800bef2 <_printf_float+0x42a>
 800bf10:	e6fc      	b.n	800bd0c <_printf_float+0x244>
 800bf12:	f04f 0800 	mov.w	r8, #0
 800bf16:	f104 0919 	add.w	r9, r4, #25
 800bf1a:	e7f4      	b.n	800bf06 <_printf_float+0x43e>

0800bf1c <_printf_common>:
 800bf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf20:	4616      	mov	r6, r2
 800bf22:	4698      	mov	r8, r3
 800bf24:	688a      	ldr	r2, [r1, #8]
 800bf26:	690b      	ldr	r3, [r1, #16]
 800bf28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	bfb8      	it	lt
 800bf30:	4613      	movlt	r3, r2
 800bf32:	6033      	str	r3, [r6, #0]
 800bf34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf38:	4607      	mov	r7, r0
 800bf3a:	460c      	mov	r4, r1
 800bf3c:	b10a      	cbz	r2, 800bf42 <_printf_common+0x26>
 800bf3e:	3301      	adds	r3, #1
 800bf40:	6033      	str	r3, [r6, #0]
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	0699      	lsls	r1, r3, #26
 800bf46:	bf42      	ittt	mi
 800bf48:	6833      	ldrmi	r3, [r6, #0]
 800bf4a:	3302      	addmi	r3, #2
 800bf4c:	6033      	strmi	r3, [r6, #0]
 800bf4e:	6825      	ldr	r5, [r4, #0]
 800bf50:	f015 0506 	ands.w	r5, r5, #6
 800bf54:	d106      	bne.n	800bf64 <_printf_common+0x48>
 800bf56:	f104 0a19 	add.w	sl, r4, #25
 800bf5a:	68e3      	ldr	r3, [r4, #12]
 800bf5c:	6832      	ldr	r2, [r6, #0]
 800bf5e:	1a9b      	subs	r3, r3, r2
 800bf60:	42ab      	cmp	r3, r5
 800bf62:	dc26      	bgt.n	800bfb2 <_printf_common+0x96>
 800bf64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf68:	6822      	ldr	r2, [r4, #0]
 800bf6a:	3b00      	subs	r3, #0
 800bf6c:	bf18      	it	ne
 800bf6e:	2301      	movne	r3, #1
 800bf70:	0692      	lsls	r2, r2, #26
 800bf72:	d42b      	bmi.n	800bfcc <_printf_common+0xb0>
 800bf74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf78:	4641      	mov	r1, r8
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	47c8      	blx	r9
 800bf7e:	3001      	adds	r0, #1
 800bf80:	d01e      	beq.n	800bfc0 <_printf_common+0xa4>
 800bf82:	6823      	ldr	r3, [r4, #0]
 800bf84:	6922      	ldr	r2, [r4, #16]
 800bf86:	f003 0306 	and.w	r3, r3, #6
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	bf02      	ittt	eq
 800bf8e:	68e5      	ldreq	r5, [r4, #12]
 800bf90:	6833      	ldreq	r3, [r6, #0]
 800bf92:	1aed      	subeq	r5, r5, r3
 800bf94:	68a3      	ldr	r3, [r4, #8]
 800bf96:	bf0c      	ite	eq
 800bf98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf9c:	2500      	movne	r5, #0
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	bfc4      	itt	gt
 800bfa2:	1a9b      	subgt	r3, r3, r2
 800bfa4:	18ed      	addgt	r5, r5, r3
 800bfa6:	2600      	movs	r6, #0
 800bfa8:	341a      	adds	r4, #26
 800bfaa:	42b5      	cmp	r5, r6
 800bfac:	d11a      	bne.n	800bfe4 <_printf_common+0xc8>
 800bfae:	2000      	movs	r0, #0
 800bfb0:	e008      	b.n	800bfc4 <_printf_common+0xa8>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	4652      	mov	r2, sl
 800bfb6:	4641      	mov	r1, r8
 800bfb8:	4638      	mov	r0, r7
 800bfba:	47c8      	blx	r9
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d103      	bne.n	800bfc8 <_printf_common+0xac>
 800bfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc8:	3501      	adds	r5, #1
 800bfca:	e7c6      	b.n	800bf5a <_printf_common+0x3e>
 800bfcc:	18e1      	adds	r1, r4, r3
 800bfce:	1c5a      	adds	r2, r3, #1
 800bfd0:	2030      	movs	r0, #48	@ 0x30
 800bfd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfd6:	4422      	add	r2, r4
 800bfd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfe0:	3302      	adds	r3, #2
 800bfe2:	e7c7      	b.n	800bf74 <_printf_common+0x58>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	4622      	mov	r2, r4
 800bfe8:	4641      	mov	r1, r8
 800bfea:	4638      	mov	r0, r7
 800bfec:	47c8      	blx	r9
 800bfee:	3001      	adds	r0, #1
 800bff0:	d0e6      	beq.n	800bfc0 <_printf_common+0xa4>
 800bff2:	3601      	adds	r6, #1
 800bff4:	e7d9      	b.n	800bfaa <_printf_common+0x8e>
	...

0800bff8 <_printf_i>:
 800bff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bffc:	7e0f      	ldrb	r7, [r1, #24]
 800bffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c000:	2f78      	cmp	r7, #120	@ 0x78
 800c002:	4691      	mov	r9, r2
 800c004:	4680      	mov	r8, r0
 800c006:	460c      	mov	r4, r1
 800c008:	469a      	mov	sl, r3
 800c00a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c00e:	d807      	bhi.n	800c020 <_printf_i+0x28>
 800c010:	2f62      	cmp	r7, #98	@ 0x62
 800c012:	d80a      	bhi.n	800c02a <_printf_i+0x32>
 800c014:	2f00      	cmp	r7, #0
 800c016:	f000 80d2 	beq.w	800c1be <_printf_i+0x1c6>
 800c01a:	2f58      	cmp	r7, #88	@ 0x58
 800c01c:	f000 80b9 	beq.w	800c192 <_printf_i+0x19a>
 800c020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c028:	e03a      	b.n	800c0a0 <_printf_i+0xa8>
 800c02a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c02e:	2b15      	cmp	r3, #21
 800c030:	d8f6      	bhi.n	800c020 <_printf_i+0x28>
 800c032:	a101      	add	r1, pc, #4	@ (adr r1, 800c038 <_printf_i+0x40>)
 800c034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c038:	0800c091 	.word	0x0800c091
 800c03c:	0800c0a5 	.word	0x0800c0a5
 800c040:	0800c021 	.word	0x0800c021
 800c044:	0800c021 	.word	0x0800c021
 800c048:	0800c021 	.word	0x0800c021
 800c04c:	0800c021 	.word	0x0800c021
 800c050:	0800c0a5 	.word	0x0800c0a5
 800c054:	0800c021 	.word	0x0800c021
 800c058:	0800c021 	.word	0x0800c021
 800c05c:	0800c021 	.word	0x0800c021
 800c060:	0800c021 	.word	0x0800c021
 800c064:	0800c1a5 	.word	0x0800c1a5
 800c068:	0800c0cf 	.word	0x0800c0cf
 800c06c:	0800c15f 	.word	0x0800c15f
 800c070:	0800c021 	.word	0x0800c021
 800c074:	0800c021 	.word	0x0800c021
 800c078:	0800c1c7 	.word	0x0800c1c7
 800c07c:	0800c021 	.word	0x0800c021
 800c080:	0800c0cf 	.word	0x0800c0cf
 800c084:	0800c021 	.word	0x0800c021
 800c088:	0800c021 	.word	0x0800c021
 800c08c:	0800c167 	.word	0x0800c167
 800c090:	6833      	ldr	r3, [r6, #0]
 800c092:	1d1a      	adds	r2, r3, #4
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6032      	str	r2, [r6, #0]
 800c098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c09c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e09d      	b.n	800c1e0 <_printf_i+0x1e8>
 800c0a4:	6833      	ldr	r3, [r6, #0]
 800c0a6:	6820      	ldr	r0, [r4, #0]
 800c0a8:	1d19      	adds	r1, r3, #4
 800c0aa:	6031      	str	r1, [r6, #0]
 800c0ac:	0606      	lsls	r6, r0, #24
 800c0ae:	d501      	bpl.n	800c0b4 <_printf_i+0xbc>
 800c0b0:	681d      	ldr	r5, [r3, #0]
 800c0b2:	e003      	b.n	800c0bc <_printf_i+0xc4>
 800c0b4:	0645      	lsls	r5, r0, #25
 800c0b6:	d5fb      	bpl.n	800c0b0 <_printf_i+0xb8>
 800c0b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	da03      	bge.n	800c0c8 <_printf_i+0xd0>
 800c0c0:	232d      	movs	r3, #45	@ 0x2d
 800c0c2:	426d      	negs	r5, r5
 800c0c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0c8:	4859      	ldr	r0, [pc, #356]	@ (800c230 <_printf_i+0x238>)
 800c0ca:	230a      	movs	r3, #10
 800c0cc:	e011      	b.n	800c0f2 <_printf_i+0xfa>
 800c0ce:	6821      	ldr	r1, [r4, #0]
 800c0d0:	6833      	ldr	r3, [r6, #0]
 800c0d2:	0608      	lsls	r0, r1, #24
 800c0d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0d8:	d402      	bmi.n	800c0e0 <_printf_i+0xe8>
 800c0da:	0649      	lsls	r1, r1, #25
 800c0dc:	bf48      	it	mi
 800c0de:	b2ad      	uxthmi	r5, r5
 800c0e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0e2:	4853      	ldr	r0, [pc, #332]	@ (800c230 <_printf_i+0x238>)
 800c0e4:	6033      	str	r3, [r6, #0]
 800c0e6:	bf14      	ite	ne
 800c0e8:	230a      	movne	r3, #10
 800c0ea:	2308      	moveq	r3, #8
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0f2:	6866      	ldr	r6, [r4, #4]
 800c0f4:	60a6      	str	r6, [r4, #8]
 800c0f6:	2e00      	cmp	r6, #0
 800c0f8:	bfa2      	ittt	ge
 800c0fa:	6821      	ldrge	r1, [r4, #0]
 800c0fc:	f021 0104 	bicge.w	r1, r1, #4
 800c100:	6021      	strge	r1, [r4, #0]
 800c102:	b90d      	cbnz	r5, 800c108 <_printf_i+0x110>
 800c104:	2e00      	cmp	r6, #0
 800c106:	d04b      	beq.n	800c1a0 <_printf_i+0x1a8>
 800c108:	4616      	mov	r6, r2
 800c10a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c10e:	fb03 5711 	mls	r7, r3, r1, r5
 800c112:	5dc7      	ldrb	r7, [r0, r7]
 800c114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c118:	462f      	mov	r7, r5
 800c11a:	42bb      	cmp	r3, r7
 800c11c:	460d      	mov	r5, r1
 800c11e:	d9f4      	bls.n	800c10a <_printf_i+0x112>
 800c120:	2b08      	cmp	r3, #8
 800c122:	d10b      	bne.n	800c13c <_printf_i+0x144>
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	07df      	lsls	r7, r3, #31
 800c128:	d508      	bpl.n	800c13c <_printf_i+0x144>
 800c12a:	6923      	ldr	r3, [r4, #16]
 800c12c:	6861      	ldr	r1, [r4, #4]
 800c12e:	4299      	cmp	r1, r3
 800c130:	bfde      	ittt	le
 800c132:	2330      	movle	r3, #48	@ 0x30
 800c134:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c138:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c13c:	1b92      	subs	r2, r2, r6
 800c13e:	6122      	str	r2, [r4, #16]
 800c140:	f8cd a000 	str.w	sl, [sp]
 800c144:	464b      	mov	r3, r9
 800c146:	aa03      	add	r2, sp, #12
 800c148:	4621      	mov	r1, r4
 800c14a:	4640      	mov	r0, r8
 800c14c:	f7ff fee6 	bl	800bf1c <_printf_common>
 800c150:	3001      	adds	r0, #1
 800c152:	d14a      	bne.n	800c1ea <_printf_i+0x1f2>
 800c154:	f04f 30ff 	mov.w	r0, #4294967295
 800c158:	b004      	add	sp, #16
 800c15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	f043 0320 	orr.w	r3, r3, #32
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	4833      	ldr	r0, [pc, #204]	@ (800c234 <_printf_i+0x23c>)
 800c168:	2778      	movs	r7, #120	@ 0x78
 800c16a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	6831      	ldr	r1, [r6, #0]
 800c172:	061f      	lsls	r7, r3, #24
 800c174:	f851 5b04 	ldr.w	r5, [r1], #4
 800c178:	d402      	bmi.n	800c180 <_printf_i+0x188>
 800c17a:	065f      	lsls	r7, r3, #25
 800c17c:	bf48      	it	mi
 800c17e:	b2ad      	uxthmi	r5, r5
 800c180:	6031      	str	r1, [r6, #0]
 800c182:	07d9      	lsls	r1, r3, #31
 800c184:	bf44      	itt	mi
 800c186:	f043 0320 	orrmi.w	r3, r3, #32
 800c18a:	6023      	strmi	r3, [r4, #0]
 800c18c:	b11d      	cbz	r5, 800c196 <_printf_i+0x19e>
 800c18e:	2310      	movs	r3, #16
 800c190:	e7ac      	b.n	800c0ec <_printf_i+0xf4>
 800c192:	4827      	ldr	r0, [pc, #156]	@ (800c230 <_printf_i+0x238>)
 800c194:	e7e9      	b.n	800c16a <_printf_i+0x172>
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	f023 0320 	bic.w	r3, r3, #32
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	e7f6      	b.n	800c18e <_printf_i+0x196>
 800c1a0:	4616      	mov	r6, r2
 800c1a2:	e7bd      	b.n	800c120 <_printf_i+0x128>
 800c1a4:	6833      	ldr	r3, [r6, #0]
 800c1a6:	6825      	ldr	r5, [r4, #0]
 800c1a8:	6961      	ldr	r1, [r4, #20]
 800c1aa:	1d18      	adds	r0, r3, #4
 800c1ac:	6030      	str	r0, [r6, #0]
 800c1ae:	062e      	lsls	r6, r5, #24
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	d501      	bpl.n	800c1b8 <_printf_i+0x1c0>
 800c1b4:	6019      	str	r1, [r3, #0]
 800c1b6:	e002      	b.n	800c1be <_printf_i+0x1c6>
 800c1b8:	0668      	lsls	r0, r5, #25
 800c1ba:	d5fb      	bpl.n	800c1b4 <_printf_i+0x1bc>
 800c1bc:	8019      	strh	r1, [r3, #0]
 800c1be:	2300      	movs	r3, #0
 800c1c0:	6123      	str	r3, [r4, #16]
 800c1c2:	4616      	mov	r6, r2
 800c1c4:	e7bc      	b.n	800c140 <_printf_i+0x148>
 800c1c6:	6833      	ldr	r3, [r6, #0]
 800c1c8:	1d1a      	adds	r2, r3, #4
 800c1ca:	6032      	str	r2, [r6, #0]
 800c1cc:	681e      	ldr	r6, [r3, #0]
 800c1ce:	6862      	ldr	r2, [r4, #4]
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7f4 f87c 	bl	80002d0 <memchr>
 800c1d8:	b108      	cbz	r0, 800c1de <_printf_i+0x1e6>
 800c1da:	1b80      	subs	r0, r0, r6
 800c1dc:	6060      	str	r0, [r4, #4]
 800c1de:	6863      	ldr	r3, [r4, #4]
 800c1e0:	6123      	str	r3, [r4, #16]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1e8:	e7aa      	b.n	800c140 <_printf_i+0x148>
 800c1ea:	6923      	ldr	r3, [r4, #16]
 800c1ec:	4632      	mov	r2, r6
 800c1ee:	4649      	mov	r1, r9
 800c1f0:	4640      	mov	r0, r8
 800c1f2:	47d0      	blx	sl
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	d0ad      	beq.n	800c154 <_printf_i+0x15c>
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	079b      	lsls	r3, r3, #30
 800c1fc:	d413      	bmi.n	800c226 <_printf_i+0x22e>
 800c1fe:	68e0      	ldr	r0, [r4, #12]
 800c200:	9b03      	ldr	r3, [sp, #12]
 800c202:	4298      	cmp	r0, r3
 800c204:	bfb8      	it	lt
 800c206:	4618      	movlt	r0, r3
 800c208:	e7a6      	b.n	800c158 <_printf_i+0x160>
 800c20a:	2301      	movs	r3, #1
 800c20c:	4632      	mov	r2, r6
 800c20e:	4649      	mov	r1, r9
 800c210:	4640      	mov	r0, r8
 800c212:	47d0      	blx	sl
 800c214:	3001      	adds	r0, #1
 800c216:	d09d      	beq.n	800c154 <_printf_i+0x15c>
 800c218:	3501      	adds	r5, #1
 800c21a:	68e3      	ldr	r3, [r4, #12]
 800c21c:	9903      	ldr	r1, [sp, #12]
 800c21e:	1a5b      	subs	r3, r3, r1
 800c220:	42ab      	cmp	r3, r5
 800c222:	dcf2      	bgt.n	800c20a <_printf_i+0x212>
 800c224:	e7eb      	b.n	800c1fe <_printf_i+0x206>
 800c226:	2500      	movs	r5, #0
 800c228:	f104 0619 	add.w	r6, r4, #25
 800c22c:	e7f5      	b.n	800c21a <_printf_i+0x222>
 800c22e:	bf00      	nop
 800c230:	08022566 	.word	0x08022566
 800c234:	08022577 	.word	0x08022577

0800c238 <std>:
 800c238:	2300      	movs	r3, #0
 800c23a:	b510      	push	{r4, lr}
 800c23c:	4604      	mov	r4, r0
 800c23e:	e9c0 3300 	strd	r3, r3, [r0]
 800c242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c246:	6083      	str	r3, [r0, #8]
 800c248:	8181      	strh	r1, [r0, #12]
 800c24a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c24c:	81c2      	strh	r2, [r0, #14]
 800c24e:	6183      	str	r3, [r0, #24]
 800c250:	4619      	mov	r1, r3
 800c252:	2208      	movs	r2, #8
 800c254:	305c      	adds	r0, #92	@ 0x5c
 800c256:	f000 f924 	bl	800c4a2 <memset>
 800c25a:	4b0d      	ldr	r3, [pc, #52]	@ (800c290 <std+0x58>)
 800c25c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c25e:	4b0d      	ldr	r3, [pc, #52]	@ (800c294 <std+0x5c>)
 800c260:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c262:	4b0d      	ldr	r3, [pc, #52]	@ (800c298 <std+0x60>)
 800c264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c266:	4b0d      	ldr	r3, [pc, #52]	@ (800c29c <std+0x64>)
 800c268:	6323      	str	r3, [r4, #48]	@ 0x30
 800c26a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2a0 <std+0x68>)
 800c26c:	6224      	str	r4, [r4, #32]
 800c26e:	429c      	cmp	r4, r3
 800c270:	d006      	beq.n	800c280 <std+0x48>
 800c272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c276:	4294      	cmp	r4, r2
 800c278:	d002      	beq.n	800c280 <std+0x48>
 800c27a:	33d0      	adds	r3, #208	@ 0xd0
 800c27c:	429c      	cmp	r4, r3
 800c27e:	d105      	bne.n	800c28c <std+0x54>
 800c280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c288:	f000 b988 	b.w	800c59c <__retarget_lock_init_recursive>
 800c28c:	bd10      	pop	{r4, pc}
 800c28e:	bf00      	nop
 800c290:	0800c3fd 	.word	0x0800c3fd
 800c294:	0800c41f 	.word	0x0800c41f
 800c298:	0800c457 	.word	0x0800c457
 800c29c:	0800c47b 	.word	0x0800c47b
 800c2a0:	2001196c 	.word	0x2001196c

0800c2a4 <stdio_exit_handler>:
 800c2a4:	4a02      	ldr	r2, [pc, #8]	@ (800c2b0 <stdio_exit_handler+0xc>)
 800c2a6:	4903      	ldr	r1, [pc, #12]	@ (800c2b4 <stdio_exit_handler+0x10>)
 800c2a8:	4803      	ldr	r0, [pc, #12]	@ (800c2b8 <stdio_exit_handler+0x14>)
 800c2aa:	f000 b869 	b.w	800c380 <_fwalk_sglue>
 800c2ae:	bf00      	nop
 800c2b0:	2000000c 	.word	0x2000000c
 800c2b4:	0800defd 	.word	0x0800defd
 800c2b8:	2000001c 	.word	0x2000001c

0800c2bc <cleanup_stdio>:
 800c2bc:	6841      	ldr	r1, [r0, #4]
 800c2be:	4b0c      	ldr	r3, [pc, #48]	@ (800c2f0 <cleanup_stdio+0x34>)
 800c2c0:	4299      	cmp	r1, r3
 800c2c2:	b510      	push	{r4, lr}
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	d001      	beq.n	800c2cc <cleanup_stdio+0x10>
 800c2c8:	f001 fe18 	bl	800defc <_fflush_r>
 800c2cc:	68a1      	ldr	r1, [r4, #8]
 800c2ce:	4b09      	ldr	r3, [pc, #36]	@ (800c2f4 <cleanup_stdio+0x38>)
 800c2d0:	4299      	cmp	r1, r3
 800c2d2:	d002      	beq.n	800c2da <cleanup_stdio+0x1e>
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f001 fe11 	bl	800defc <_fflush_r>
 800c2da:	68e1      	ldr	r1, [r4, #12]
 800c2dc:	4b06      	ldr	r3, [pc, #24]	@ (800c2f8 <cleanup_stdio+0x3c>)
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	d004      	beq.n	800c2ec <cleanup_stdio+0x30>
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2e8:	f001 be08 	b.w	800defc <_fflush_r>
 800c2ec:	bd10      	pop	{r4, pc}
 800c2ee:	bf00      	nop
 800c2f0:	2001196c 	.word	0x2001196c
 800c2f4:	200119d4 	.word	0x200119d4
 800c2f8:	20011a3c 	.word	0x20011a3c

0800c2fc <global_stdio_init.part.0>:
 800c2fc:	b510      	push	{r4, lr}
 800c2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800c32c <global_stdio_init.part.0+0x30>)
 800c300:	4c0b      	ldr	r4, [pc, #44]	@ (800c330 <global_stdio_init.part.0+0x34>)
 800c302:	4a0c      	ldr	r2, [pc, #48]	@ (800c334 <global_stdio_init.part.0+0x38>)
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	4620      	mov	r0, r4
 800c308:	2200      	movs	r2, #0
 800c30a:	2104      	movs	r1, #4
 800c30c:	f7ff ff94 	bl	800c238 <std>
 800c310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c314:	2201      	movs	r2, #1
 800c316:	2109      	movs	r1, #9
 800c318:	f7ff ff8e 	bl	800c238 <std>
 800c31c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c320:	2202      	movs	r2, #2
 800c322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c326:	2112      	movs	r1, #18
 800c328:	f7ff bf86 	b.w	800c238 <std>
 800c32c:	20011aa4 	.word	0x20011aa4
 800c330:	2001196c 	.word	0x2001196c
 800c334:	0800c2a5 	.word	0x0800c2a5

0800c338 <__sfp_lock_acquire>:
 800c338:	4801      	ldr	r0, [pc, #4]	@ (800c340 <__sfp_lock_acquire+0x8>)
 800c33a:	f000 b930 	b.w	800c59e <__retarget_lock_acquire_recursive>
 800c33e:	bf00      	nop
 800c340:	20011aad 	.word	0x20011aad

0800c344 <__sfp_lock_release>:
 800c344:	4801      	ldr	r0, [pc, #4]	@ (800c34c <__sfp_lock_release+0x8>)
 800c346:	f000 b92b 	b.w	800c5a0 <__retarget_lock_release_recursive>
 800c34a:	bf00      	nop
 800c34c:	20011aad 	.word	0x20011aad

0800c350 <__sinit>:
 800c350:	b510      	push	{r4, lr}
 800c352:	4604      	mov	r4, r0
 800c354:	f7ff fff0 	bl	800c338 <__sfp_lock_acquire>
 800c358:	6a23      	ldr	r3, [r4, #32]
 800c35a:	b11b      	cbz	r3, 800c364 <__sinit+0x14>
 800c35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c360:	f7ff bff0 	b.w	800c344 <__sfp_lock_release>
 800c364:	4b04      	ldr	r3, [pc, #16]	@ (800c378 <__sinit+0x28>)
 800c366:	6223      	str	r3, [r4, #32]
 800c368:	4b04      	ldr	r3, [pc, #16]	@ (800c37c <__sinit+0x2c>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1f5      	bne.n	800c35c <__sinit+0xc>
 800c370:	f7ff ffc4 	bl	800c2fc <global_stdio_init.part.0>
 800c374:	e7f2      	b.n	800c35c <__sinit+0xc>
 800c376:	bf00      	nop
 800c378:	0800c2bd 	.word	0x0800c2bd
 800c37c:	20011aa4 	.word	0x20011aa4

0800c380 <_fwalk_sglue>:
 800c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c384:	4607      	mov	r7, r0
 800c386:	4688      	mov	r8, r1
 800c388:	4614      	mov	r4, r2
 800c38a:	2600      	movs	r6, #0
 800c38c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c390:	f1b9 0901 	subs.w	r9, r9, #1
 800c394:	d505      	bpl.n	800c3a2 <_fwalk_sglue+0x22>
 800c396:	6824      	ldr	r4, [r4, #0]
 800c398:	2c00      	cmp	r4, #0
 800c39a:	d1f7      	bne.n	800c38c <_fwalk_sglue+0xc>
 800c39c:	4630      	mov	r0, r6
 800c39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3a2:	89ab      	ldrh	r3, [r5, #12]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d907      	bls.n	800c3b8 <_fwalk_sglue+0x38>
 800c3a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	d003      	beq.n	800c3b8 <_fwalk_sglue+0x38>
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	47c0      	blx	r8
 800c3b6:	4306      	orrs	r6, r0
 800c3b8:	3568      	adds	r5, #104	@ 0x68
 800c3ba:	e7e9      	b.n	800c390 <_fwalk_sglue+0x10>

0800c3bc <siprintf>:
 800c3bc:	b40e      	push	{r1, r2, r3}
 800c3be:	b500      	push	{lr}
 800c3c0:	b09c      	sub	sp, #112	@ 0x70
 800c3c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800c3c4:	9002      	str	r0, [sp, #8]
 800c3c6:	9006      	str	r0, [sp, #24]
 800c3c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c3cc:	4809      	ldr	r0, [pc, #36]	@ (800c3f4 <siprintf+0x38>)
 800c3ce:	9107      	str	r1, [sp, #28]
 800c3d0:	9104      	str	r1, [sp, #16]
 800c3d2:	4909      	ldr	r1, [pc, #36]	@ (800c3f8 <siprintf+0x3c>)
 800c3d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3d8:	9105      	str	r1, [sp, #20]
 800c3da:	6800      	ldr	r0, [r0, #0]
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	a902      	add	r1, sp, #8
 800c3e0:	f001 fc0c 	bl	800dbfc <_svfiprintf_r>
 800c3e4:	9b02      	ldr	r3, [sp, #8]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	701a      	strb	r2, [r3, #0]
 800c3ea:	b01c      	add	sp, #112	@ 0x70
 800c3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f0:	b003      	add	sp, #12
 800c3f2:	4770      	bx	lr
 800c3f4:	20000018 	.word	0x20000018
 800c3f8:	ffff0208 	.word	0xffff0208

0800c3fc <__sread>:
 800c3fc:	b510      	push	{r4, lr}
 800c3fe:	460c      	mov	r4, r1
 800c400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c404:	f000 f87c 	bl	800c500 <_read_r>
 800c408:	2800      	cmp	r0, #0
 800c40a:	bfab      	itete	ge
 800c40c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c40e:	89a3      	ldrhlt	r3, [r4, #12]
 800c410:	181b      	addge	r3, r3, r0
 800c412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c416:	bfac      	ite	ge
 800c418:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c41a:	81a3      	strhlt	r3, [r4, #12]
 800c41c:	bd10      	pop	{r4, pc}

0800c41e <__swrite>:
 800c41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c422:	461f      	mov	r7, r3
 800c424:	898b      	ldrh	r3, [r1, #12]
 800c426:	05db      	lsls	r3, r3, #23
 800c428:	4605      	mov	r5, r0
 800c42a:	460c      	mov	r4, r1
 800c42c:	4616      	mov	r6, r2
 800c42e:	d505      	bpl.n	800c43c <__swrite+0x1e>
 800c430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c434:	2302      	movs	r3, #2
 800c436:	2200      	movs	r2, #0
 800c438:	f000 f850 	bl	800c4dc <_lseek_r>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	4632      	mov	r2, r6
 800c44a:	463b      	mov	r3, r7
 800c44c:	4628      	mov	r0, r5
 800c44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c452:	f000 b867 	b.w	800c524 <_write_r>

0800c456 <__sseek>:
 800c456:	b510      	push	{r4, lr}
 800c458:	460c      	mov	r4, r1
 800c45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c45e:	f000 f83d 	bl	800c4dc <_lseek_r>
 800c462:	1c43      	adds	r3, r0, #1
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	bf15      	itete	ne
 800c468:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c46a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c46e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c472:	81a3      	strheq	r3, [r4, #12]
 800c474:	bf18      	it	ne
 800c476:	81a3      	strhne	r3, [r4, #12]
 800c478:	bd10      	pop	{r4, pc}

0800c47a <__sclose>:
 800c47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47e:	f000 b81d 	b.w	800c4bc <_close_r>

0800c482 <memcmp>:
 800c482:	b510      	push	{r4, lr}
 800c484:	3901      	subs	r1, #1
 800c486:	4402      	add	r2, r0
 800c488:	4290      	cmp	r0, r2
 800c48a:	d101      	bne.n	800c490 <memcmp+0xe>
 800c48c:	2000      	movs	r0, #0
 800c48e:	e005      	b.n	800c49c <memcmp+0x1a>
 800c490:	7803      	ldrb	r3, [r0, #0]
 800c492:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c496:	42a3      	cmp	r3, r4
 800c498:	d001      	beq.n	800c49e <memcmp+0x1c>
 800c49a:	1b18      	subs	r0, r3, r4
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	3001      	adds	r0, #1
 800c4a0:	e7f2      	b.n	800c488 <memcmp+0x6>

0800c4a2 <memset>:
 800c4a2:	4402      	add	r2, r0
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d100      	bne.n	800c4ac <memset+0xa>
 800c4aa:	4770      	bx	lr
 800c4ac:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b0:	e7f9      	b.n	800c4a6 <memset+0x4>
	...

0800c4b4 <_localeconv_r>:
 800c4b4:	4800      	ldr	r0, [pc, #0]	@ (800c4b8 <_localeconv_r+0x4>)
 800c4b6:	4770      	bx	lr
 800c4b8:	20000158 	.word	0x20000158

0800c4bc <_close_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4d06      	ldr	r5, [pc, #24]	@ (800c4d8 <_close_r+0x1c>)
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	4608      	mov	r0, r1
 800c4c6:	602b      	str	r3, [r5, #0]
 800c4c8:	f7f6 fe66 	bl	8003198 <_close>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_close_r+0x1a>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_close_r+0x1a>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	20011aa8 	.word	0x20011aa8

0800c4dc <_lseek_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4d07      	ldr	r5, [pc, #28]	@ (800c4fc <_lseek_r+0x20>)
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	602a      	str	r2, [r5, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f7f6 fe7b 	bl	80031e6 <_lseek>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_lseek_r+0x1e>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_lseek_r+0x1e>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	20011aa8 	.word	0x20011aa8

0800c500 <_read_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d07      	ldr	r5, [pc, #28]	@ (800c520 <_read_r+0x20>)
 800c504:	4604      	mov	r4, r0
 800c506:	4608      	mov	r0, r1
 800c508:	4611      	mov	r1, r2
 800c50a:	2200      	movs	r2, #0
 800c50c:	602a      	str	r2, [r5, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	f7f6 fe09 	bl	8003126 <_read>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d102      	bne.n	800c51e <_read_r+0x1e>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b103      	cbz	r3, 800c51e <_read_r+0x1e>
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	20011aa8 	.word	0x20011aa8

0800c524 <_write_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d07      	ldr	r5, [pc, #28]	@ (800c544 <_write_r+0x20>)
 800c528:	4604      	mov	r4, r0
 800c52a:	4608      	mov	r0, r1
 800c52c:	4611      	mov	r1, r2
 800c52e:	2200      	movs	r2, #0
 800c530:	602a      	str	r2, [r5, #0]
 800c532:	461a      	mov	r2, r3
 800c534:	f7f6 fe14 	bl	8003160 <_write>
 800c538:	1c43      	adds	r3, r0, #1
 800c53a:	d102      	bne.n	800c542 <_write_r+0x1e>
 800c53c:	682b      	ldr	r3, [r5, #0]
 800c53e:	b103      	cbz	r3, 800c542 <_write_r+0x1e>
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	bd38      	pop	{r3, r4, r5, pc}
 800c544:	20011aa8 	.word	0x20011aa8

0800c548 <__errno>:
 800c548:	4b01      	ldr	r3, [pc, #4]	@ (800c550 <__errno+0x8>)
 800c54a:	6818      	ldr	r0, [r3, #0]
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	20000018 	.word	0x20000018

0800c554 <__libc_init_array>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	4d0d      	ldr	r5, [pc, #52]	@ (800c58c <__libc_init_array+0x38>)
 800c558:	4c0d      	ldr	r4, [pc, #52]	@ (800c590 <__libc_init_array+0x3c>)
 800c55a:	1b64      	subs	r4, r4, r5
 800c55c:	10a4      	asrs	r4, r4, #2
 800c55e:	2600      	movs	r6, #0
 800c560:	42a6      	cmp	r6, r4
 800c562:	d109      	bne.n	800c578 <__libc_init_array+0x24>
 800c564:	4d0b      	ldr	r5, [pc, #44]	@ (800c594 <__libc_init_array+0x40>)
 800c566:	4c0c      	ldr	r4, [pc, #48]	@ (800c598 <__libc_init_array+0x44>)
 800c568:	f002 fc56 	bl	800ee18 <_init>
 800c56c:	1b64      	subs	r4, r4, r5
 800c56e:	10a4      	asrs	r4, r4, #2
 800c570:	2600      	movs	r6, #0
 800c572:	42a6      	cmp	r6, r4
 800c574:	d105      	bne.n	800c582 <__libc_init_array+0x2e>
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	f855 3b04 	ldr.w	r3, [r5], #4
 800c57c:	4798      	blx	r3
 800c57e:	3601      	adds	r6, #1
 800c580:	e7ee      	b.n	800c560 <__libc_init_array+0xc>
 800c582:	f855 3b04 	ldr.w	r3, [r5], #4
 800c586:	4798      	blx	r3
 800c588:	3601      	adds	r6, #1
 800c58a:	e7f2      	b.n	800c572 <__libc_init_array+0x1e>
 800c58c:	08022910 	.word	0x08022910
 800c590:	08022910 	.word	0x08022910
 800c594:	08022910 	.word	0x08022910
 800c598:	08022914 	.word	0x08022914

0800c59c <__retarget_lock_init_recursive>:
 800c59c:	4770      	bx	lr

0800c59e <__retarget_lock_acquire_recursive>:
 800c59e:	4770      	bx	lr

0800c5a0 <__retarget_lock_release_recursive>:
 800c5a0:	4770      	bx	lr

0800c5a2 <quorem>:
 800c5a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a6:	6903      	ldr	r3, [r0, #16]
 800c5a8:	690c      	ldr	r4, [r1, #16]
 800c5aa:	42a3      	cmp	r3, r4
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	db7e      	blt.n	800c6ae <quorem+0x10c>
 800c5b0:	3c01      	subs	r4, #1
 800c5b2:	f101 0814 	add.w	r8, r1, #20
 800c5b6:	00a3      	lsls	r3, r4, #2
 800c5b8:	f100 0514 	add.w	r5, r0, #20
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5d8:	d32e      	bcc.n	800c638 <quorem+0x96>
 800c5da:	f04f 0a00 	mov.w	sl, #0
 800c5de:	46c4      	mov	ip, r8
 800c5e0:	46ae      	mov	lr, r5
 800c5e2:	46d3      	mov	fp, sl
 800c5e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5e8:	b298      	uxth	r0, r3
 800c5ea:	fb06 a000 	mla	r0, r6, r0, sl
 800c5ee:	0c02      	lsrs	r2, r0, #16
 800c5f0:	0c1b      	lsrs	r3, r3, #16
 800c5f2:	fb06 2303 	mla	r3, r6, r3, r2
 800c5f6:	f8de 2000 	ldr.w	r2, [lr]
 800c5fa:	b280      	uxth	r0, r0
 800c5fc:	b292      	uxth	r2, r2
 800c5fe:	1a12      	subs	r2, r2, r0
 800c600:	445a      	add	r2, fp
 800c602:	f8de 0000 	ldr.w	r0, [lr]
 800c606:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c610:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c614:	b292      	uxth	r2, r2
 800c616:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c61a:	45e1      	cmp	r9, ip
 800c61c:	f84e 2b04 	str.w	r2, [lr], #4
 800c620:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c624:	d2de      	bcs.n	800c5e4 <quorem+0x42>
 800c626:	9b00      	ldr	r3, [sp, #0]
 800c628:	58eb      	ldr	r3, [r5, r3]
 800c62a:	b92b      	cbnz	r3, 800c638 <quorem+0x96>
 800c62c:	9b01      	ldr	r3, [sp, #4]
 800c62e:	3b04      	subs	r3, #4
 800c630:	429d      	cmp	r5, r3
 800c632:	461a      	mov	r2, r3
 800c634:	d32f      	bcc.n	800c696 <quorem+0xf4>
 800c636:	613c      	str	r4, [r7, #16]
 800c638:	4638      	mov	r0, r7
 800c63a:	f001 f97b 	bl	800d934 <__mcmp>
 800c63e:	2800      	cmp	r0, #0
 800c640:	db25      	blt.n	800c68e <quorem+0xec>
 800c642:	4629      	mov	r1, r5
 800c644:	2000      	movs	r0, #0
 800c646:	f858 2b04 	ldr.w	r2, [r8], #4
 800c64a:	f8d1 c000 	ldr.w	ip, [r1]
 800c64e:	fa1f fe82 	uxth.w	lr, r2
 800c652:	fa1f f38c 	uxth.w	r3, ip
 800c656:	eba3 030e 	sub.w	r3, r3, lr
 800c65a:	4403      	add	r3, r0
 800c65c:	0c12      	lsrs	r2, r2, #16
 800c65e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c662:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c666:	b29b      	uxth	r3, r3
 800c668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c66c:	45c1      	cmp	r9, r8
 800c66e:	f841 3b04 	str.w	r3, [r1], #4
 800c672:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c676:	d2e6      	bcs.n	800c646 <quorem+0xa4>
 800c678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c67c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c680:	b922      	cbnz	r2, 800c68c <quorem+0xea>
 800c682:	3b04      	subs	r3, #4
 800c684:	429d      	cmp	r5, r3
 800c686:	461a      	mov	r2, r3
 800c688:	d30b      	bcc.n	800c6a2 <quorem+0x100>
 800c68a:	613c      	str	r4, [r7, #16]
 800c68c:	3601      	adds	r6, #1
 800c68e:	4630      	mov	r0, r6
 800c690:	b003      	add	sp, #12
 800c692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	3b04      	subs	r3, #4
 800c69a:	2a00      	cmp	r2, #0
 800c69c:	d1cb      	bne.n	800c636 <quorem+0x94>
 800c69e:	3c01      	subs	r4, #1
 800c6a0:	e7c6      	b.n	800c630 <quorem+0x8e>
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	3b04      	subs	r3, #4
 800c6a6:	2a00      	cmp	r2, #0
 800c6a8:	d1ef      	bne.n	800c68a <quorem+0xe8>
 800c6aa:	3c01      	subs	r4, #1
 800c6ac:	e7ea      	b.n	800c684 <quorem+0xe2>
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	e7ee      	b.n	800c690 <quorem+0xee>
 800c6b2:	0000      	movs	r0, r0
 800c6b4:	0000      	movs	r0, r0
	...

0800c6b8 <_dtoa_r>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	69c7      	ldr	r7, [r0, #28]
 800c6be:	b099      	sub	sp, #100	@ 0x64
 800c6c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c6c4:	ec55 4b10 	vmov	r4, r5, d0
 800c6c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c6ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6cc:	4683      	mov	fp, r0
 800c6ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6d2:	b97f      	cbnz	r7, 800c6f4 <_dtoa_r+0x3c>
 800c6d4:	2010      	movs	r0, #16
 800c6d6:	f000 fdfd 	bl	800d2d4 <malloc>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800c6e0:	b920      	cbnz	r0, 800c6ec <_dtoa_r+0x34>
 800c6e2:	4ba7      	ldr	r3, [pc, #668]	@ (800c980 <_dtoa_r+0x2c8>)
 800c6e4:	21ef      	movs	r1, #239	@ 0xef
 800c6e6:	48a7      	ldr	r0, [pc, #668]	@ (800c984 <_dtoa_r+0x2cc>)
 800c6e8:	f001 fc68 	bl	800dfbc <__assert_func>
 800c6ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c6f0:	6007      	str	r7, [r0, #0]
 800c6f2:	60c7      	str	r7, [r0, #12]
 800c6f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6f8:	6819      	ldr	r1, [r3, #0]
 800c6fa:	b159      	cbz	r1, 800c714 <_dtoa_r+0x5c>
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	604a      	str	r2, [r1, #4]
 800c700:	2301      	movs	r3, #1
 800c702:	4093      	lsls	r3, r2
 800c704:	608b      	str	r3, [r1, #8]
 800c706:	4658      	mov	r0, fp
 800c708:	f000 feda 	bl	800d4c0 <_Bfree>
 800c70c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	1e2b      	subs	r3, r5, #0
 800c716:	bfb9      	ittee	lt
 800c718:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c71c:	9303      	strlt	r3, [sp, #12]
 800c71e:	2300      	movge	r3, #0
 800c720:	6033      	strge	r3, [r6, #0]
 800c722:	9f03      	ldr	r7, [sp, #12]
 800c724:	4b98      	ldr	r3, [pc, #608]	@ (800c988 <_dtoa_r+0x2d0>)
 800c726:	bfbc      	itt	lt
 800c728:	2201      	movlt	r2, #1
 800c72a:	6032      	strlt	r2, [r6, #0]
 800c72c:	43bb      	bics	r3, r7
 800c72e:	d112      	bne.n	800c756 <_dtoa_r+0x9e>
 800c730:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c732:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c73c:	4323      	orrs	r3, r4
 800c73e:	f000 854d 	beq.w	800d1dc <_dtoa_r+0xb24>
 800c742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c744:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c99c <_dtoa_r+0x2e4>
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 854f 	beq.w	800d1ec <_dtoa_r+0xb34>
 800c74e:	f10a 0303 	add.w	r3, sl, #3
 800c752:	f000 bd49 	b.w	800d1e8 <_dtoa_r+0xb30>
 800c756:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c75a:	2200      	movs	r2, #0
 800c75c:	ec51 0b17 	vmov	r0, r1, d7
 800c760:	2300      	movs	r3, #0
 800c762:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c766:	f7f4 fa2f 	bl	8000bc8 <__aeabi_dcmpeq>
 800c76a:	4680      	mov	r8, r0
 800c76c:	b158      	cbz	r0, 800c786 <_dtoa_r+0xce>
 800c76e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c770:	2301      	movs	r3, #1
 800c772:	6013      	str	r3, [r2, #0]
 800c774:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c776:	b113      	cbz	r3, 800c77e <_dtoa_r+0xc6>
 800c778:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c77a:	4b84      	ldr	r3, [pc, #528]	@ (800c98c <_dtoa_r+0x2d4>)
 800c77c:	6013      	str	r3, [r2, #0]
 800c77e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c9a0 <_dtoa_r+0x2e8>
 800c782:	f000 bd33 	b.w	800d1ec <_dtoa_r+0xb34>
 800c786:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c78a:	aa16      	add	r2, sp, #88	@ 0x58
 800c78c:	a917      	add	r1, sp, #92	@ 0x5c
 800c78e:	4658      	mov	r0, fp
 800c790:	f001 f980 	bl	800da94 <__d2b>
 800c794:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c798:	4681      	mov	r9, r0
 800c79a:	2e00      	cmp	r6, #0
 800c79c:	d077      	beq.n	800c88e <_dtoa_r+0x1d6>
 800c79e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c7a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c7b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c7b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	4b74      	ldr	r3, [pc, #464]	@ (800c990 <_dtoa_r+0x2d8>)
 800c7be:	f7f3 fde3 	bl	8000388 <__aeabi_dsub>
 800c7c2:	a369      	add	r3, pc, #420	@ (adr r3, 800c968 <_dtoa_r+0x2b0>)
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	f7f3 ff96 	bl	80006f8 <__aeabi_dmul>
 800c7cc:	a368      	add	r3, pc, #416	@ (adr r3, 800c970 <_dtoa_r+0x2b8>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7f3 fddb 	bl	800038c <__adddf3>
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4630      	mov	r0, r6
 800c7da:	460d      	mov	r5, r1
 800c7dc:	f7f3 ff22 	bl	8000624 <__aeabi_i2d>
 800c7e0:	a365      	add	r3, pc, #404	@ (adr r3, 800c978 <_dtoa_r+0x2c0>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	f7f3 ff87 	bl	80006f8 <__aeabi_dmul>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7f3 fdcb 	bl	800038c <__adddf3>
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	460d      	mov	r5, r1
 800c7fa:	f7f4 fa2d 	bl	8000c58 <__aeabi_d2iz>
 800c7fe:	2200      	movs	r2, #0
 800c800:	4607      	mov	r7, r0
 800c802:	2300      	movs	r3, #0
 800c804:	4620      	mov	r0, r4
 800c806:	4629      	mov	r1, r5
 800c808:	f7f4 f9e8 	bl	8000bdc <__aeabi_dcmplt>
 800c80c:	b140      	cbz	r0, 800c820 <_dtoa_r+0x168>
 800c80e:	4638      	mov	r0, r7
 800c810:	f7f3 ff08 	bl	8000624 <__aeabi_i2d>
 800c814:	4622      	mov	r2, r4
 800c816:	462b      	mov	r3, r5
 800c818:	f7f4 f9d6 	bl	8000bc8 <__aeabi_dcmpeq>
 800c81c:	b900      	cbnz	r0, 800c820 <_dtoa_r+0x168>
 800c81e:	3f01      	subs	r7, #1
 800c820:	2f16      	cmp	r7, #22
 800c822:	d851      	bhi.n	800c8c8 <_dtoa_r+0x210>
 800c824:	4b5b      	ldr	r3, [pc, #364]	@ (800c994 <_dtoa_r+0x2dc>)
 800c826:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c832:	f7f4 f9d3 	bl	8000bdc <__aeabi_dcmplt>
 800c836:	2800      	cmp	r0, #0
 800c838:	d048      	beq.n	800c8cc <_dtoa_r+0x214>
 800c83a:	3f01      	subs	r7, #1
 800c83c:	2300      	movs	r3, #0
 800c83e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c840:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c842:	1b9b      	subs	r3, r3, r6
 800c844:	1e5a      	subs	r2, r3, #1
 800c846:	bf44      	itt	mi
 800c848:	f1c3 0801 	rsbmi	r8, r3, #1
 800c84c:	2300      	movmi	r3, #0
 800c84e:	9208      	str	r2, [sp, #32]
 800c850:	bf54      	ite	pl
 800c852:	f04f 0800 	movpl.w	r8, #0
 800c856:	9308      	strmi	r3, [sp, #32]
 800c858:	2f00      	cmp	r7, #0
 800c85a:	db39      	blt.n	800c8d0 <_dtoa_r+0x218>
 800c85c:	9b08      	ldr	r3, [sp, #32]
 800c85e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c860:	443b      	add	r3, r7
 800c862:	9308      	str	r3, [sp, #32]
 800c864:	2300      	movs	r3, #0
 800c866:	930a      	str	r3, [sp, #40]	@ 0x28
 800c868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c86a:	2b09      	cmp	r3, #9
 800c86c:	d864      	bhi.n	800c938 <_dtoa_r+0x280>
 800c86e:	2b05      	cmp	r3, #5
 800c870:	bfc4      	itt	gt
 800c872:	3b04      	subgt	r3, #4
 800c874:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c878:	f1a3 0302 	sub.w	r3, r3, #2
 800c87c:	bfcc      	ite	gt
 800c87e:	2400      	movgt	r4, #0
 800c880:	2401      	movle	r4, #1
 800c882:	2b03      	cmp	r3, #3
 800c884:	d863      	bhi.n	800c94e <_dtoa_r+0x296>
 800c886:	e8df f003 	tbb	[pc, r3]
 800c88a:	372a      	.short	0x372a
 800c88c:	5535      	.short	0x5535
 800c88e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c892:	441e      	add	r6, r3
 800c894:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c898:	2b20      	cmp	r3, #32
 800c89a:	bfc1      	itttt	gt
 800c89c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c8a0:	409f      	lslgt	r7, r3
 800c8a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c8a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c8aa:	bfd6      	itet	le
 800c8ac:	f1c3 0320 	rsble	r3, r3, #32
 800c8b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c8b4:	fa04 f003 	lslle.w	r0, r4, r3
 800c8b8:	f7f3 fea4 	bl	8000604 <__aeabi_ui2d>
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c8c2:	3e01      	subs	r6, #1
 800c8c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800c8c6:	e777      	b.n	800c7b8 <_dtoa_r+0x100>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e7b8      	b.n	800c83e <_dtoa_r+0x186>
 800c8cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800c8ce:	e7b7      	b.n	800c840 <_dtoa_r+0x188>
 800c8d0:	427b      	negs	r3, r7
 800c8d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	eba8 0807 	sub.w	r8, r8, r7
 800c8da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8dc:	e7c4      	b.n	800c868 <_dtoa_r+0x1b0>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dc35      	bgt.n	800c954 <_dtoa_r+0x29c>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	9307      	str	r3, [sp, #28]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8f2:	e00b      	b.n	800c90c <_dtoa_r+0x254>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e7f3      	b.n	800c8e0 <_dtoa_r+0x228>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8fe:	18fb      	adds	r3, r7, r3
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	3301      	adds	r3, #1
 800c904:	2b01      	cmp	r3, #1
 800c906:	9307      	str	r3, [sp, #28]
 800c908:	bfb8      	it	lt
 800c90a:	2301      	movlt	r3, #1
 800c90c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c910:	2100      	movs	r1, #0
 800c912:	2204      	movs	r2, #4
 800c914:	f102 0514 	add.w	r5, r2, #20
 800c918:	429d      	cmp	r5, r3
 800c91a:	d91f      	bls.n	800c95c <_dtoa_r+0x2a4>
 800c91c:	6041      	str	r1, [r0, #4]
 800c91e:	4658      	mov	r0, fp
 800c920:	f000 fd8e 	bl	800d440 <_Balloc>
 800c924:	4682      	mov	sl, r0
 800c926:	2800      	cmp	r0, #0
 800c928:	d13c      	bne.n	800c9a4 <_dtoa_r+0x2ec>
 800c92a:	4b1b      	ldr	r3, [pc, #108]	@ (800c998 <_dtoa_r+0x2e0>)
 800c92c:	4602      	mov	r2, r0
 800c92e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c932:	e6d8      	b.n	800c6e6 <_dtoa_r+0x2e>
 800c934:	2301      	movs	r3, #1
 800c936:	e7e0      	b.n	800c8fa <_dtoa_r+0x242>
 800c938:	2401      	movs	r4, #1
 800c93a:	2300      	movs	r3, #0
 800c93c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c93e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c940:	f04f 33ff 	mov.w	r3, #4294967295
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	9307      	str	r3, [sp, #28]
 800c948:	2200      	movs	r2, #0
 800c94a:	2312      	movs	r3, #18
 800c94c:	e7d0      	b.n	800c8f0 <_dtoa_r+0x238>
 800c94e:	2301      	movs	r3, #1
 800c950:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c952:	e7f5      	b.n	800c940 <_dtoa_r+0x288>
 800c954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	9307      	str	r3, [sp, #28]
 800c95a:	e7d7      	b.n	800c90c <_dtoa_r+0x254>
 800c95c:	3101      	adds	r1, #1
 800c95e:	0052      	lsls	r2, r2, #1
 800c960:	e7d8      	b.n	800c914 <_dtoa_r+0x25c>
 800c962:	bf00      	nop
 800c964:	f3af 8000 	nop.w
 800c968:	636f4361 	.word	0x636f4361
 800c96c:	3fd287a7 	.word	0x3fd287a7
 800c970:	8b60c8b3 	.word	0x8b60c8b3
 800c974:	3fc68a28 	.word	0x3fc68a28
 800c978:	509f79fb 	.word	0x509f79fb
 800c97c:	3fd34413 	.word	0x3fd34413
 800c980:	08022595 	.word	0x08022595
 800c984:	080225ac 	.word	0x080225ac
 800c988:	7ff00000 	.word	0x7ff00000
 800c98c:	08022565 	.word	0x08022565
 800c990:	3ff80000 	.word	0x3ff80000
 800c994:	080226a8 	.word	0x080226a8
 800c998:	08022604 	.word	0x08022604
 800c99c:	08022591 	.word	0x08022591
 800c9a0:	08022564 	.word	0x08022564
 800c9a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9a8:	6018      	str	r0, [r3, #0]
 800c9aa:	9b07      	ldr	r3, [sp, #28]
 800c9ac:	2b0e      	cmp	r3, #14
 800c9ae:	f200 80a4 	bhi.w	800cafa <_dtoa_r+0x442>
 800c9b2:	2c00      	cmp	r4, #0
 800c9b4:	f000 80a1 	beq.w	800cafa <_dtoa_r+0x442>
 800c9b8:	2f00      	cmp	r7, #0
 800c9ba:	dd33      	ble.n	800ca24 <_dtoa_r+0x36c>
 800c9bc:	4bad      	ldr	r3, [pc, #692]	@ (800cc74 <_dtoa_r+0x5bc>)
 800c9be:	f007 020f 	and.w	r2, r7, #15
 800c9c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9c6:	ed93 7b00 	vldr	d7, [r3]
 800c9ca:	05f8      	lsls	r0, r7, #23
 800c9cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c9d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9d4:	d516      	bpl.n	800ca04 <_dtoa_r+0x34c>
 800c9d6:	4ba8      	ldr	r3, [pc, #672]	@ (800cc78 <_dtoa_r+0x5c0>)
 800c9d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9e0:	f7f3 ffb4 	bl	800094c <__aeabi_ddiv>
 800c9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9e8:	f004 040f 	and.w	r4, r4, #15
 800c9ec:	2603      	movs	r6, #3
 800c9ee:	4da2      	ldr	r5, [pc, #648]	@ (800cc78 <_dtoa_r+0x5c0>)
 800c9f0:	b954      	cbnz	r4, 800ca08 <_dtoa_r+0x350>
 800c9f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9fa:	f7f3 ffa7 	bl	800094c <__aeabi_ddiv>
 800c9fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca02:	e028      	b.n	800ca56 <_dtoa_r+0x39e>
 800ca04:	2602      	movs	r6, #2
 800ca06:	e7f2      	b.n	800c9ee <_dtoa_r+0x336>
 800ca08:	07e1      	lsls	r1, r4, #31
 800ca0a:	d508      	bpl.n	800ca1e <_dtoa_r+0x366>
 800ca0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca14:	f7f3 fe70 	bl	80006f8 <__aeabi_dmul>
 800ca18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca1c:	3601      	adds	r6, #1
 800ca1e:	1064      	asrs	r4, r4, #1
 800ca20:	3508      	adds	r5, #8
 800ca22:	e7e5      	b.n	800c9f0 <_dtoa_r+0x338>
 800ca24:	f000 80d2 	beq.w	800cbcc <_dtoa_r+0x514>
 800ca28:	427c      	negs	r4, r7
 800ca2a:	4b92      	ldr	r3, [pc, #584]	@ (800cc74 <_dtoa_r+0x5bc>)
 800ca2c:	4d92      	ldr	r5, [pc, #584]	@ (800cc78 <_dtoa_r+0x5c0>)
 800ca2e:	f004 020f 	and.w	r2, r4, #15
 800ca32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca3e:	f7f3 fe5b 	bl	80006f8 <__aeabi_dmul>
 800ca42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca46:	1124      	asrs	r4, r4, #4
 800ca48:	2300      	movs	r3, #0
 800ca4a:	2602      	movs	r6, #2
 800ca4c:	2c00      	cmp	r4, #0
 800ca4e:	f040 80b2 	bne.w	800cbb6 <_dtoa_r+0x4fe>
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1d3      	bne.n	800c9fe <_dtoa_r+0x346>
 800ca56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 80b7 	beq.w	800cbd0 <_dtoa_r+0x518>
 800ca62:	4b86      	ldr	r3, [pc, #536]	@ (800cc7c <_dtoa_r+0x5c4>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	4620      	mov	r0, r4
 800ca68:	4629      	mov	r1, r5
 800ca6a:	f7f4 f8b7 	bl	8000bdc <__aeabi_dcmplt>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	f000 80ae 	beq.w	800cbd0 <_dtoa_r+0x518>
 800ca74:	9b07      	ldr	r3, [sp, #28]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 80aa 	beq.w	800cbd0 <_dtoa_r+0x518>
 800ca7c:	9b00      	ldr	r3, [sp, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	dd37      	ble.n	800caf2 <_dtoa_r+0x43a>
 800ca82:	1e7b      	subs	r3, r7, #1
 800ca84:	9304      	str	r3, [sp, #16]
 800ca86:	4620      	mov	r0, r4
 800ca88:	4b7d      	ldr	r3, [pc, #500]	@ (800cc80 <_dtoa_r+0x5c8>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	f7f3 fe33 	bl	80006f8 <__aeabi_dmul>
 800ca92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca96:	9c00      	ldr	r4, [sp, #0]
 800ca98:	3601      	adds	r6, #1
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	f7f3 fdc2 	bl	8000624 <__aeabi_i2d>
 800caa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caa4:	f7f3 fe28 	bl	80006f8 <__aeabi_dmul>
 800caa8:	4b76      	ldr	r3, [pc, #472]	@ (800cc84 <_dtoa_r+0x5cc>)
 800caaa:	2200      	movs	r2, #0
 800caac:	f7f3 fc6e 	bl	800038c <__adddf3>
 800cab0:	4605      	mov	r5, r0
 800cab2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cab6:	2c00      	cmp	r4, #0
 800cab8:	f040 808d 	bne.w	800cbd6 <_dtoa_r+0x51e>
 800cabc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cac0:	4b71      	ldr	r3, [pc, #452]	@ (800cc88 <_dtoa_r+0x5d0>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	f7f3 fc60 	bl	8000388 <__aeabi_dsub>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cad0:	462a      	mov	r2, r5
 800cad2:	4633      	mov	r3, r6
 800cad4:	f7f4 f8a0 	bl	8000c18 <__aeabi_dcmpgt>
 800cad8:	2800      	cmp	r0, #0
 800cada:	f040 828b 	bne.w	800cff4 <_dtoa_r+0x93c>
 800cade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae2:	462a      	mov	r2, r5
 800cae4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cae8:	f7f4 f878 	bl	8000bdc <__aeabi_dcmplt>
 800caec:	2800      	cmp	r0, #0
 800caee:	f040 8128 	bne.w	800cd42 <_dtoa_r+0x68a>
 800caf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800caf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cafa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f2c0 815a 	blt.w	800cdb6 <_dtoa_r+0x6fe>
 800cb02:	2f0e      	cmp	r7, #14
 800cb04:	f300 8157 	bgt.w	800cdb6 <_dtoa_r+0x6fe>
 800cb08:	4b5a      	ldr	r3, [pc, #360]	@ (800cc74 <_dtoa_r+0x5bc>)
 800cb0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb0e:	ed93 7b00 	vldr	d7, [r3]
 800cb12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	ed8d 7b00 	vstr	d7, [sp]
 800cb1a:	da03      	bge.n	800cb24 <_dtoa_r+0x46c>
 800cb1c:	9b07      	ldr	r3, [sp, #28]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f340 8101 	ble.w	800cd26 <_dtoa_r+0x66e>
 800cb24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb28:	4656      	mov	r6, sl
 800cb2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb2e:	4620      	mov	r0, r4
 800cb30:	4629      	mov	r1, r5
 800cb32:	f7f3 ff0b 	bl	800094c <__aeabi_ddiv>
 800cb36:	f7f4 f88f 	bl	8000c58 <__aeabi_d2iz>
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	f7f3 fd72 	bl	8000624 <__aeabi_i2d>
 800cb40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb44:	f7f3 fdd8 	bl	80006f8 <__aeabi_dmul>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	4629      	mov	r1, r5
 800cb50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb54:	f7f3 fc18 	bl	8000388 <__aeabi_dsub>
 800cb58:	f806 4b01 	strb.w	r4, [r6], #1
 800cb5c:	9d07      	ldr	r5, [sp, #28]
 800cb5e:	eba6 040a 	sub.w	r4, r6, sl
 800cb62:	42a5      	cmp	r5, r4
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	f040 8117 	bne.w	800cd9a <_dtoa_r+0x6e2>
 800cb6c:	f7f3 fc0e 	bl	800038c <__adddf3>
 800cb70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb74:	4604      	mov	r4, r0
 800cb76:	460d      	mov	r5, r1
 800cb78:	f7f4 f84e 	bl	8000c18 <__aeabi_dcmpgt>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	f040 80f9 	bne.w	800cd74 <_dtoa_r+0x6bc>
 800cb82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb86:	4620      	mov	r0, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7f4 f81d 	bl	8000bc8 <__aeabi_dcmpeq>
 800cb8e:	b118      	cbz	r0, 800cb98 <_dtoa_r+0x4e0>
 800cb90:	f018 0f01 	tst.w	r8, #1
 800cb94:	f040 80ee 	bne.w	800cd74 <_dtoa_r+0x6bc>
 800cb98:	4649      	mov	r1, r9
 800cb9a:	4658      	mov	r0, fp
 800cb9c:	f000 fc90 	bl	800d4c0 <_Bfree>
 800cba0:	2300      	movs	r3, #0
 800cba2:	7033      	strb	r3, [r6, #0]
 800cba4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cba6:	3701      	adds	r7, #1
 800cba8:	601f      	str	r7, [r3, #0]
 800cbaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 831d 	beq.w	800d1ec <_dtoa_r+0xb34>
 800cbb2:	601e      	str	r6, [r3, #0]
 800cbb4:	e31a      	b.n	800d1ec <_dtoa_r+0xb34>
 800cbb6:	07e2      	lsls	r2, r4, #31
 800cbb8:	d505      	bpl.n	800cbc6 <_dtoa_r+0x50e>
 800cbba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbbe:	f7f3 fd9b 	bl	80006f8 <__aeabi_dmul>
 800cbc2:	3601      	adds	r6, #1
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	1064      	asrs	r4, r4, #1
 800cbc8:	3508      	adds	r5, #8
 800cbca:	e73f      	b.n	800ca4c <_dtoa_r+0x394>
 800cbcc:	2602      	movs	r6, #2
 800cbce:	e742      	b.n	800ca56 <_dtoa_r+0x39e>
 800cbd0:	9c07      	ldr	r4, [sp, #28]
 800cbd2:	9704      	str	r7, [sp, #16]
 800cbd4:	e761      	b.n	800ca9a <_dtoa_r+0x3e2>
 800cbd6:	4b27      	ldr	r3, [pc, #156]	@ (800cc74 <_dtoa_r+0x5bc>)
 800cbd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cbda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbe2:	4454      	add	r4, sl
 800cbe4:	2900      	cmp	r1, #0
 800cbe6:	d053      	beq.n	800cc90 <_dtoa_r+0x5d8>
 800cbe8:	4928      	ldr	r1, [pc, #160]	@ (800cc8c <_dtoa_r+0x5d4>)
 800cbea:	2000      	movs	r0, #0
 800cbec:	f7f3 feae 	bl	800094c <__aeabi_ddiv>
 800cbf0:	4633      	mov	r3, r6
 800cbf2:	462a      	mov	r2, r5
 800cbf4:	f7f3 fbc8 	bl	8000388 <__aeabi_dsub>
 800cbf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbfc:	4656      	mov	r6, sl
 800cbfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc02:	f7f4 f829 	bl	8000c58 <__aeabi_d2iz>
 800cc06:	4605      	mov	r5, r0
 800cc08:	f7f3 fd0c 	bl	8000624 <__aeabi_i2d>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc14:	f7f3 fbb8 	bl	8000388 <__aeabi_dsub>
 800cc18:	3530      	adds	r5, #48	@ 0x30
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc22:	f806 5b01 	strb.w	r5, [r6], #1
 800cc26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc2a:	f7f3 ffd7 	bl	8000bdc <__aeabi_dcmplt>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d171      	bne.n	800cd16 <_dtoa_r+0x65e>
 800cc32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc36:	4911      	ldr	r1, [pc, #68]	@ (800cc7c <_dtoa_r+0x5c4>)
 800cc38:	2000      	movs	r0, #0
 800cc3a:	f7f3 fba5 	bl	8000388 <__aeabi_dsub>
 800cc3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc42:	f7f3 ffcb 	bl	8000bdc <__aeabi_dcmplt>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	f040 8095 	bne.w	800cd76 <_dtoa_r+0x6be>
 800cc4c:	42a6      	cmp	r6, r4
 800cc4e:	f43f af50 	beq.w	800caf2 <_dtoa_r+0x43a>
 800cc52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc56:	4b0a      	ldr	r3, [pc, #40]	@ (800cc80 <_dtoa_r+0x5c8>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f7f3 fd4d 	bl	80006f8 <__aeabi_dmul>
 800cc5e:	4b08      	ldr	r3, [pc, #32]	@ (800cc80 <_dtoa_r+0x5c8>)
 800cc60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc64:	2200      	movs	r2, #0
 800cc66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc6a:	f7f3 fd45 	bl	80006f8 <__aeabi_dmul>
 800cc6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc72:	e7c4      	b.n	800cbfe <_dtoa_r+0x546>
 800cc74:	080226a8 	.word	0x080226a8
 800cc78:	08022680 	.word	0x08022680
 800cc7c:	3ff00000 	.word	0x3ff00000
 800cc80:	40240000 	.word	0x40240000
 800cc84:	401c0000 	.word	0x401c0000
 800cc88:	40140000 	.word	0x40140000
 800cc8c:	3fe00000 	.word	0x3fe00000
 800cc90:	4631      	mov	r1, r6
 800cc92:	4628      	mov	r0, r5
 800cc94:	f7f3 fd30 	bl	80006f8 <__aeabi_dmul>
 800cc98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800cc9e:	4656      	mov	r6, sl
 800cca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cca4:	f7f3 ffd8 	bl	8000c58 <__aeabi_d2iz>
 800cca8:	4605      	mov	r5, r0
 800ccaa:	f7f3 fcbb 	bl	8000624 <__aeabi_i2d>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccb6:	f7f3 fb67 	bl	8000388 <__aeabi_dsub>
 800ccba:	3530      	adds	r5, #48	@ 0x30
 800ccbc:	f806 5b01 	strb.w	r5, [r6], #1
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	42a6      	cmp	r6, r4
 800ccc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccca:	f04f 0200 	mov.w	r2, #0
 800ccce:	d124      	bne.n	800cd1a <_dtoa_r+0x662>
 800ccd0:	4bac      	ldr	r3, [pc, #688]	@ (800cf84 <_dtoa_r+0x8cc>)
 800ccd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ccd6:	f7f3 fb59 	bl	800038c <__adddf3>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cce2:	f7f3 ff99 	bl	8000c18 <__aeabi_dcmpgt>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d145      	bne.n	800cd76 <_dtoa_r+0x6be>
 800ccea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ccee:	49a5      	ldr	r1, [pc, #660]	@ (800cf84 <_dtoa_r+0x8cc>)
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	f7f3 fb49 	bl	8000388 <__aeabi_dsub>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccfe:	f7f3 ff6d 	bl	8000bdc <__aeabi_dcmplt>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	f43f aef5 	beq.w	800caf2 <_dtoa_r+0x43a>
 800cd08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cd0a:	1e73      	subs	r3, r6, #1
 800cd0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd12:	2b30      	cmp	r3, #48	@ 0x30
 800cd14:	d0f8      	beq.n	800cd08 <_dtoa_r+0x650>
 800cd16:	9f04      	ldr	r7, [sp, #16]
 800cd18:	e73e      	b.n	800cb98 <_dtoa_r+0x4e0>
 800cd1a:	4b9b      	ldr	r3, [pc, #620]	@ (800cf88 <_dtoa_r+0x8d0>)
 800cd1c:	f7f3 fcec 	bl	80006f8 <__aeabi_dmul>
 800cd20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd24:	e7bc      	b.n	800cca0 <_dtoa_r+0x5e8>
 800cd26:	d10c      	bne.n	800cd42 <_dtoa_r+0x68a>
 800cd28:	4b98      	ldr	r3, [pc, #608]	@ (800cf8c <_dtoa_r+0x8d4>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd30:	f7f3 fce2 	bl	80006f8 <__aeabi_dmul>
 800cd34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd38:	f7f3 ff64 	bl	8000c04 <__aeabi_dcmpge>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	f000 8157 	beq.w	800cff0 <_dtoa_r+0x938>
 800cd42:	2400      	movs	r4, #0
 800cd44:	4625      	mov	r5, r4
 800cd46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd48:	43db      	mvns	r3, r3
 800cd4a:	9304      	str	r3, [sp, #16]
 800cd4c:	4656      	mov	r6, sl
 800cd4e:	2700      	movs	r7, #0
 800cd50:	4621      	mov	r1, r4
 800cd52:	4658      	mov	r0, fp
 800cd54:	f000 fbb4 	bl	800d4c0 <_Bfree>
 800cd58:	2d00      	cmp	r5, #0
 800cd5a:	d0dc      	beq.n	800cd16 <_dtoa_r+0x65e>
 800cd5c:	b12f      	cbz	r7, 800cd6a <_dtoa_r+0x6b2>
 800cd5e:	42af      	cmp	r7, r5
 800cd60:	d003      	beq.n	800cd6a <_dtoa_r+0x6b2>
 800cd62:	4639      	mov	r1, r7
 800cd64:	4658      	mov	r0, fp
 800cd66:	f000 fbab 	bl	800d4c0 <_Bfree>
 800cd6a:	4629      	mov	r1, r5
 800cd6c:	4658      	mov	r0, fp
 800cd6e:	f000 fba7 	bl	800d4c0 <_Bfree>
 800cd72:	e7d0      	b.n	800cd16 <_dtoa_r+0x65e>
 800cd74:	9704      	str	r7, [sp, #16]
 800cd76:	4633      	mov	r3, r6
 800cd78:	461e      	mov	r6, r3
 800cd7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd7e:	2a39      	cmp	r2, #57	@ 0x39
 800cd80:	d107      	bne.n	800cd92 <_dtoa_r+0x6da>
 800cd82:	459a      	cmp	sl, r3
 800cd84:	d1f8      	bne.n	800cd78 <_dtoa_r+0x6c0>
 800cd86:	9a04      	ldr	r2, [sp, #16]
 800cd88:	3201      	adds	r2, #1
 800cd8a:	9204      	str	r2, [sp, #16]
 800cd8c:	2230      	movs	r2, #48	@ 0x30
 800cd8e:	f88a 2000 	strb.w	r2, [sl]
 800cd92:	781a      	ldrb	r2, [r3, #0]
 800cd94:	3201      	adds	r2, #1
 800cd96:	701a      	strb	r2, [r3, #0]
 800cd98:	e7bd      	b.n	800cd16 <_dtoa_r+0x65e>
 800cd9a:	4b7b      	ldr	r3, [pc, #492]	@ (800cf88 <_dtoa_r+0x8d0>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f7f3 fcab 	bl	80006f8 <__aeabi_dmul>
 800cda2:	2200      	movs	r2, #0
 800cda4:	2300      	movs	r3, #0
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	f7f3 ff0d 	bl	8000bc8 <__aeabi_dcmpeq>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f43f aebb 	beq.w	800cb2a <_dtoa_r+0x472>
 800cdb4:	e6f0      	b.n	800cb98 <_dtoa_r+0x4e0>
 800cdb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cdb8:	2a00      	cmp	r2, #0
 800cdba:	f000 80db 	beq.w	800cf74 <_dtoa_r+0x8bc>
 800cdbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdc0:	2a01      	cmp	r2, #1
 800cdc2:	f300 80bf 	bgt.w	800cf44 <_dtoa_r+0x88c>
 800cdc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cdc8:	2a00      	cmp	r2, #0
 800cdca:	f000 80b7 	beq.w	800cf3c <_dtoa_r+0x884>
 800cdce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cdd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cdd4:	4646      	mov	r6, r8
 800cdd6:	9a08      	ldr	r2, [sp, #32]
 800cdd8:	2101      	movs	r1, #1
 800cdda:	441a      	add	r2, r3
 800cddc:	4658      	mov	r0, fp
 800cdde:	4498      	add	r8, r3
 800cde0:	9208      	str	r2, [sp, #32]
 800cde2:	f000 fc21 	bl	800d628 <__i2b>
 800cde6:	4605      	mov	r5, r0
 800cde8:	b15e      	cbz	r6, 800ce02 <_dtoa_r+0x74a>
 800cdea:	9b08      	ldr	r3, [sp, #32]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dd08      	ble.n	800ce02 <_dtoa_r+0x74a>
 800cdf0:	42b3      	cmp	r3, r6
 800cdf2:	9a08      	ldr	r2, [sp, #32]
 800cdf4:	bfa8      	it	ge
 800cdf6:	4633      	movge	r3, r6
 800cdf8:	eba8 0803 	sub.w	r8, r8, r3
 800cdfc:	1af6      	subs	r6, r6, r3
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	9308      	str	r3, [sp, #32]
 800ce02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce04:	b1f3      	cbz	r3, 800ce44 <_dtoa_r+0x78c>
 800ce06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 80b7 	beq.w	800cf7c <_dtoa_r+0x8c4>
 800ce0e:	b18c      	cbz	r4, 800ce34 <_dtoa_r+0x77c>
 800ce10:	4629      	mov	r1, r5
 800ce12:	4622      	mov	r2, r4
 800ce14:	4658      	mov	r0, fp
 800ce16:	f000 fcc7 	bl	800d7a8 <__pow5mult>
 800ce1a:	464a      	mov	r2, r9
 800ce1c:	4601      	mov	r1, r0
 800ce1e:	4605      	mov	r5, r0
 800ce20:	4658      	mov	r0, fp
 800ce22:	f000 fc17 	bl	800d654 <__multiply>
 800ce26:	4649      	mov	r1, r9
 800ce28:	9004      	str	r0, [sp, #16]
 800ce2a:	4658      	mov	r0, fp
 800ce2c:	f000 fb48 	bl	800d4c0 <_Bfree>
 800ce30:	9b04      	ldr	r3, [sp, #16]
 800ce32:	4699      	mov	r9, r3
 800ce34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce36:	1b1a      	subs	r2, r3, r4
 800ce38:	d004      	beq.n	800ce44 <_dtoa_r+0x78c>
 800ce3a:	4649      	mov	r1, r9
 800ce3c:	4658      	mov	r0, fp
 800ce3e:	f000 fcb3 	bl	800d7a8 <__pow5mult>
 800ce42:	4681      	mov	r9, r0
 800ce44:	2101      	movs	r1, #1
 800ce46:	4658      	mov	r0, fp
 800ce48:	f000 fbee 	bl	800d628 <__i2b>
 800ce4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4e:	4604      	mov	r4, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 81cf 	beq.w	800d1f4 <_dtoa_r+0xb3c>
 800ce56:	461a      	mov	r2, r3
 800ce58:	4601      	mov	r1, r0
 800ce5a:	4658      	mov	r0, fp
 800ce5c:	f000 fca4 	bl	800d7a8 <__pow5mult>
 800ce60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	4604      	mov	r4, r0
 800ce66:	f300 8095 	bgt.w	800cf94 <_dtoa_r+0x8dc>
 800ce6a:	9b02      	ldr	r3, [sp, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f040 8087 	bne.w	800cf80 <_dtoa_r+0x8c8>
 800ce72:	9b03      	ldr	r3, [sp, #12]
 800ce74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f040 8089 	bne.w	800cf90 <_dtoa_r+0x8d8>
 800ce7e:	9b03      	ldr	r3, [sp, #12]
 800ce80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce84:	0d1b      	lsrs	r3, r3, #20
 800ce86:	051b      	lsls	r3, r3, #20
 800ce88:	b12b      	cbz	r3, 800ce96 <_dtoa_r+0x7de>
 800ce8a:	9b08      	ldr	r3, [sp, #32]
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	9308      	str	r3, [sp, #32]
 800ce90:	f108 0801 	add.w	r8, r8, #1
 800ce94:	2301      	movs	r3, #1
 800ce96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 81b0 	beq.w	800d200 <_dtoa_r+0xb48>
 800cea0:	6923      	ldr	r3, [r4, #16]
 800cea2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cea6:	6918      	ldr	r0, [r3, #16]
 800cea8:	f000 fb72 	bl	800d590 <__hi0bits>
 800ceac:	f1c0 0020 	rsb	r0, r0, #32
 800ceb0:	9b08      	ldr	r3, [sp, #32]
 800ceb2:	4418      	add	r0, r3
 800ceb4:	f010 001f 	ands.w	r0, r0, #31
 800ceb8:	d077      	beq.n	800cfaa <_dtoa_r+0x8f2>
 800ceba:	f1c0 0320 	rsb	r3, r0, #32
 800cebe:	2b04      	cmp	r3, #4
 800cec0:	dd6b      	ble.n	800cf9a <_dtoa_r+0x8e2>
 800cec2:	9b08      	ldr	r3, [sp, #32]
 800cec4:	f1c0 001c 	rsb	r0, r0, #28
 800cec8:	4403      	add	r3, r0
 800ceca:	4480      	add	r8, r0
 800cecc:	4406      	add	r6, r0
 800cece:	9308      	str	r3, [sp, #32]
 800ced0:	f1b8 0f00 	cmp.w	r8, #0
 800ced4:	dd05      	ble.n	800cee2 <_dtoa_r+0x82a>
 800ced6:	4649      	mov	r1, r9
 800ced8:	4642      	mov	r2, r8
 800ceda:	4658      	mov	r0, fp
 800cedc:	f000 fcbe 	bl	800d85c <__lshift>
 800cee0:	4681      	mov	r9, r0
 800cee2:	9b08      	ldr	r3, [sp, #32]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	dd05      	ble.n	800cef4 <_dtoa_r+0x83c>
 800cee8:	4621      	mov	r1, r4
 800ceea:	461a      	mov	r2, r3
 800ceec:	4658      	mov	r0, fp
 800ceee:	f000 fcb5 	bl	800d85c <__lshift>
 800cef2:	4604      	mov	r4, r0
 800cef4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d059      	beq.n	800cfae <_dtoa_r+0x8f6>
 800cefa:	4621      	mov	r1, r4
 800cefc:	4648      	mov	r0, r9
 800cefe:	f000 fd19 	bl	800d934 <__mcmp>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	da53      	bge.n	800cfae <_dtoa_r+0x8f6>
 800cf06:	1e7b      	subs	r3, r7, #1
 800cf08:	9304      	str	r3, [sp, #16]
 800cf0a:	4649      	mov	r1, r9
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	220a      	movs	r2, #10
 800cf10:	4658      	mov	r0, fp
 800cf12:	f000 faf7 	bl	800d504 <__multadd>
 800cf16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf18:	4681      	mov	r9, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 8172 	beq.w	800d204 <_dtoa_r+0xb4c>
 800cf20:	2300      	movs	r3, #0
 800cf22:	4629      	mov	r1, r5
 800cf24:	220a      	movs	r2, #10
 800cf26:	4658      	mov	r0, fp
 800cf28:	f000 faec 	bl	800d504 <__multadd>
 800cf2c:	9b00      	ldr	r3, [sp, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	4605      	mov	r5, r0
 800cf32:	dc67      	bgt.n	800d004 <_dtoa_r+0x94c>
 800cf34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	dc41      	bgt.n	800cfbe <_dtoa_r+0x906>
 800cf3a:	e063      	b.n	800d004 <_dtoa_r+0x94c>
 800cf3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf42:	e746      	b.n	800cdd2 <_dtoa_r+0x71a>
 800cf44:	9b07      	ldr	r3, [sp, #28]
 800cf46:	1e5c      	subs	r4, r3, #1
 800cf48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf4a:	42a3      	cmp	r3, r4
 800cf4c:	bfbf      	itttt	lt
 800cf4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cf50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cf52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cf54:	1ae3      	sublt	r3, r4, r3
 800cf56:	bfb4      	ite	lt
 800cf58:	18d2      	addlt	r2, r2, r3
 800cf5a:	1b1c      	subge	r4, r3, r4
 800cf5c:	9b07      	ldr	r3, [sp, #28]
 800cf5e:	bfbc      	itt	lt
 800cf60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cf62:	2400      	movlt	r4, #0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	bfb5      	itete	lt
 800cf68:	eba8 0603 	sublt.w	r6, r8, r3
 800cf6c:	9b07      	ldrge	r3, [sp, #28]
 800cf6e:	2300      	movlt	r3, #0
 800cf70:	4646      	movge	r6, r8
 800cf72:	e730      	b.n	800cdd6 <_dtoa_r+0x71e>
 800cf74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cf78:	4646      	mov	r6, r8
 800cf7a:	e735      	b.n	800cde8 <_dtoa_r+0x730>
 800cf7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf7e:	e75c      	b.n	800ce3a <_dtoa_r+0x782>
 800cf80:	2300      	movs	r3, #0
 800cf82:	e788      	b.n	800ce96 <_dtoa_r+0x7de>
 800cf84:	3fe00000 	.word	0x3fe00000
 800cf88:	40240000 	.word	0x40240000
 800cf8c:	40140000 	.word	0x40140000
 800cf90:	9b02      	ldr	r3, [sp, #8]
 800cf92:	e780      	b.n	800ce96 <_dtoa_r+0x7de>
 800cf94:	2300      	movs	r3, #0
 800cf96:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf98:	e782      	b.n	800cea0 <_dtoa_r+0x7e8>
 800cf9a:	d099      	beq.n	800ced0 <_dtoa_r+0x818>
 800cf9c:	9a08      	ldr	r2, [sp, #32]
 800cf9e:	331c      	adds	r3, #28
 800cfa0:	441a      	add	r2, r3
 800cfa2:	4498      	add	r8, r3
 800cfa4:	441e      	add	r6, r3
 800cfa6:	9208      	str	r2, [sp, #32]
 800cfa8:	e792      	b.n	800ced0 <_dtoa_r+0x818>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	e7f6      	b.n	800cf9c <_dtoa_r+0x8e4>
 800cfae:	9b07      	ldr	r3, [sp, #28]
 800cfb0:	9704      	str	r7, [sp, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	dc20      	bgt.n	800cff8 <_dtoa_r+0x940>
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	dd1e      	ble.n	800cffc <_dtoa_r+0x944>
 800cfbe:	9b00      	ldr	r3, [sp, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f47f aec0 	bne.w	800cd46 <_dtoa_r+0x68e>
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	2205      	movs	r2, #5
 800cfca:	4658      	mov	r0, fp
 800cfcc:	f000 fa9a 	bl	800d504 <__multadd>
 800cfd0:	4601      	mov	r1, r0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4648      	mov	r0, r9
 800cfd6:	f000 fcad 	bl	800d934 <__mcmp>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	f77f aeb3 	ble.w	800cd46 <_dtoa_r+0x68e>
 800cfe0:	4656      	mov	r6, sl
 800cfe2:	2331      	movs	r3, #49	@ 0x31
 800cfe4:	f806 3b01 	strb.w	r3, [r6], #1
 800cfe8:	9b04      	ldr	r3, [sp, #16]
 800cfea:	3301      	adds	r3, #1
 800cfec:	9304      	str	r3, [sp, #16]
 800cfee:	e6ae      	b.n	800cd4e <_dtoa_r+0x696>
 800cff0:	9c07      	ldr	r4, [sp, #28]
 800cff2:	9704      	str	r7, [sp, #16]
 800cff4:	4625      	mov	r5, r4
 800cff6:	e7f3      	b.n	800cfe0 <_dtoa_r+0x928>
 800cff8:	9b07      	ldr	r3, [sp, #28]
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 8104 	beq.w	800d20c <_dtoa_r+0xb54>
 800d004:	2e00      	cmp	r6, #0
 800d006:	dd05      	ble.n	800d014 <_dtoa_r+0x95c>
 800d008:	4629      	mov	r1, r5
 800d00a:	4632      	mov	r2, r6
 800d00c:	4658      	mov	r0, fp
 800d00e:	f000 fc25 	bl	800d85c <__lshift>
 800d012:	4605      	mov	r5, r0
 800d014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d016:	2b00      	cmp	r3, #0
 800d018:	d05a      	beq.n	800d0d0 <_dtoa_r+0xa18>
 800d01a:	6869      	ldr	r1, [r5, #4]
 800d01c:	4658      	mov	r0, fp
 800d01e:	f000 fa0f 	bl	800d440 <_Balloc>
 800d022:	4606      	mov	r6, r0
 800d024:	b928      	cbnz	r0, 800d032 <_dtoa_r+0x97a>
 800d026:	4b84      	ldr	r3, [pc, #528]	@ (800d238 <_dtoa_r+0xb80>)
 800d028:	4602      	mov	r2, r0
 800d02a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d02e:	f7ff bb5a 	b.w	800c6e6 <_dtoa_r+0x2e>
 800d032:	692a      	ldr	r2, [r5, #16]
 800d034:	3202      	adds	r2, #2
 800d036:	0092      	lsls	r2, r2, #2
 800d038:	f105 010c 	add.w	r1, r5, #12
 800d03c:	300c      	adds	r0, #12
 800d03e:	f000 ffaf 	bl	800dfa0 <memcpy>
 800d042:	2201      	movs	r2, #1
 800d044:	4631      	mov	r1, r6
 800d046:	4658      	mov	r0, fp
 800d048:	f000 fc08 	bl	800d85c <__lshift>
 800d04c:	f10a 0301 	add.w	r3, sl, #1
 800d050:	9307      	str	r3, [sp, #28]
 800d052:	9b00      	ldr	r3, [sp, #0]
 800d054:	4453      	add	r3, sl
 800d056:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d058:	9b02      	ldr	r3, [sp, #8]
 800d05a:	f003 0301 	and.w	r3, r3, #1
 800d05e:	462f      	mov	r7, r5
 800d060:	930a      	str	r3, [sp, #40]	@ 0x28
 800d062:	4605      	mov	r5, r0
 800d064:	9b07      	ldr	r3, [sp, #28]
 800d066:	4621      	mov	r1, r4
 800d068:	3b01      	subs	r3, #1
 800d06a:	4648      	mov	r0, r9
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	f7ff fa98 	bl	800c5a2 <quorem>
 800d072:	4639      	mov	r1, r7
 800d074:	9002      	str	r0, [sp, #8]
 800d076:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d07a:	4648      	mov	r0, r9
 800d07c:	f000 fc5a 	bl	800d934 <__mcmp>
 800d080:	462a      	mov	r2, r5
 800d082:	9008      	str	r0, [sp, #32]
 800d084:	4621      	mov	r1, r4
 800d086:	4658      	mov	r0, fp
 800d088:	f000 fc70 	bl	800d96c <__mdiff>
 800d08c:	68c2      	ldr	r2, [r0, #12]
 800d08e:	4606      	mov	r6, r0
 800d090:	bb02      	cbnz	r2, 800d0d4 <_dtoa_r+0xa1c>
 800d092:	4601      	mov	r1, r0
 800d094:	4648      	mov	r0, r9
 800d096:	f000 fc4d 	bl	800d934 <__mcmp>
 800d09a:	4602      	mov	r2, r0
 800d09c:	4631      	mov	r1, r6
 800d09e:	4658      	mov	r0, fp
 800d0a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0a2:	f000 fa0d 	bl	800d4c0 <_Bfree>
 800d0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0aa:	9e07      	ldr	r6, [sp, #28]
 800d0ac:	ea43 0102 	orr.w	r1, r3, r2
 800d0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0b2:	4319      	orrs	r1, r3
 800d0b4:	d110      	bne.n	800d0d8 <_dtoa_r+0xa20>
 800d0b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d0ba:	d029      	beq.n	800d110 <_dtoa_r+0xa58>
 800d0bc:	9b08      	ldr	r3, [sp, #32]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	dd02      	ble.n	800d0c8 <_dtoa_r+0xa10>
 800d0c2:	9b02      	ldr	r3, [sp, #8]
 800d0c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d0c8:	9b00      	ldr	r3, [sp, #0]
 800d0ca:	f883 8000 	strb.w	r8, [r3]
 800d0ce:	e63f      	b.n	800cd50 <_dtoa_r+0x698>
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	e7bb      	b.n	800d04c <_dtoa_r+0x994>
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	e7e1      	b.n	800d09c <_dtoa_r+0x9e4>
 800d0d8:	9b08      	ldr	r3, [sp, #32]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	db04      	blt.n	800d0e8 <_dtoa_r+0xa30>
 800d0de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	d120      	bne.n	800d12a <_dtoa_r+0xa72>
 800d0e8:	2a00      	cmp	r2, #0
 800d0ea:	dded      	ble.n	800d0c8 <_dtoa_r+0xa10>
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	4658      	mov	r0, fp
 800d0f2:	f000 fbb3 	bl	800d85c <__lshift>
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	4681      	mov	r9, r0
 800d0fa:	f000 fc1b 	bl	800d934 <__mcmp>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	dc03      	bgt.n	800d10a <_dtoa_r+0xa52>
 800d102:	d1e1      	bne.n	800d0c8 <_dtoa_r+0xa10>
 800d104:	f018 0f01 	tst.w	r8, #1
 800d108:	d0de      	beq.n	800d0c8 <_dtoa_r+0xa10>
 800d10a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d10e:	d1d8      	bne.n	800d0c2 <_dtoa_r+0xa0a>
 800d110:	9a00      	ldr	r2, [sp, #0]
 800d112:	2339      	movs	r3, #57	@ 0x39
 800d114:	7013      	strb	r3, [r2, #0]
 800d116:	4633      	mov	r3, r6
 800d118:	461e      	mov	r6, r3
 800d11a:	3b01      	subs	r3, #1
 800d11c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d120:	2a39      	cmp	r2, #57	@ 0x39
 800d122:	d052      	beq.n	800d1ca <_dtoa_r+0xb12>
 800d124:	3201      	adds	r2, #1
 800d126:	701a      	strb	r2, [r3, #0]
 800d128:	e612      	b.n	800cd50 <_dtoa_r+0x698>
 800d12a:	2a00      	cmp	r2, #0
 800d12c:	dd07      	ble.n	800d13e <_dtoa_r+0xa86>
 800d12e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d132:	d0ed      	beq.n	800d110 <_dtoa_r+0xa58>
 800d134:	9a00      	ldr	r2, [sp, #0]
 800d136:	f108 0301 	add.w	r3, r8, #1
 800d13a:	7013      	strb	r3, [r2, #0]
 800d13c:	e608      	b.n	800cd50 <_dtoa_r+0x698>
 800d13e:	9b07      	ldr	r3, [sp, #28]
 800d140:	9a07      	ldr	r2, [sp, #28]
 800d142:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d148:	4293      	cmp	r3, r2
 800d14a:	d028      	beq.n	800d19e <_dtoa_r+0xae6>
 800d14c:	4649      	mov	r1, r9
 800d14e:	2300      	movs	r3, #0
 800d150:	220a      	movs	r2, #10
 800d152:	4658      	mov	r0, fp
 800d154:	f000 f9d6 	bl	800d504 <__multadd>
 800d158:	42af      	cmp	r7, r5
 800d15a:	4681      	mov	r9, r0
 800d15c:	f04f 0300 	mov.w	r3, #0
 800d160:	f04f 020a 	mov.w	r2, #10
 800d164:	4639      	mov	r1, r7
 800d166:	4658      	mov	r0, fp
 800d168:	d107      	bne.n	800d17a <_dtoa_r+0xac2>
 800d16a:	f000 f9cb 	bl	800d504 <__multadd>
 800d16e:	4607      	mov	r7, r0
 800d170:	4605      	mov	r5, r0
 800d172:	9b07      	ldr	r3, [sp, #28]
 800d174:	3301      	adds	r3, #1
 800d176:	9307      	str	r3, [sp, #28]
 800d178:	e774      	b.n	800d064 <_dtoa_r+0x9ac>
 800d17a:	f000 f9c3 	bl	800d504 <__multadd>
 800d17e:	4629      	mov	r1, r5
 800d180:	4607      	mov	r7, r0
 800d182:	2300      	movs	r3, #0
 800d184:	220a      	movs	r2, #10
 800d186:	4658      	mov	r0, fp
 800d188:	f000 f9bc 	bl	800d504 <__multadd>
 800d18c:	4605      	mov	r5, r0
 800d18e:	e7f0      	b.n	800d172 <_dtoa_r+0xaba>
 800d190:	9b00      	ldr	r3, [sp, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	bfcc      	ite	gt
 800d196:	461e      	movgt	r6, r3
 800d198:	2601      	movle	r6, #1
 800d19a:	4456      	add	r6, sl
 800d19c:	2700      	movs	r7, #0
 800d19e:	4649      	mov	r1, r9
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	4658      	mov	r0, fp
 800d1a4:	f000 fb5a 	bl	800d85c <__lshift>
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	4681      	mov	r9, r0
 800d1ac:	f000 fbc2 	bl	800d934 <__mcmp>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	dcb0      	bgt.n	800d116 <_dtoa_r+0xa5e>
 800d1b4:	d102      	bne.n	800d1bc <_dtoa_r+0xb04>
 800d1b6:	f018 0f01 	tst.w	r8, #1
 800d1ba:	d1ac      	bne.n	800d116 <_dtoa_r+0xa5e>
 800d1bc:	4633      	mov	r3, r6
 800d1be:	461e      	mov	r6, r3
 800d1c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1c4:	2a30      	cmp	r2, #48	@ 0x30
 800d1c6:	d0fa      	beq.n	800d1be <_dtoa_r+0xb06>
 800d1c8:	e5c2      	b.n	800cd50 <_dtoa_r+0x698>
 800d1ca:	459a      	cmp	sl, r3
 800d1cc:	d1a4      	bne.n	800d118 <_dtoa_r+0xa60>
 800d1ce:	9b04      	ldr	r3, [sp, #16]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	9304      	str	r3, [sp, #16]
 800d1d4:	2331      	movs	r3, #49	@ 0x31
 800d1d6:	f88a 3000 	strb.w	r3, [sl]
 800d1da:	e5b9      	b.n	800cd50 <_dtoa_r+0x698>
 800d1dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d23c <_dtoa_r+0xb84>
 800d1e2:	b11b      	cbz	r3, 800d1ec <_dtoa_r+0xb34>
 800d1e4:	f10a 0308 	add.w	r3, sl, #8
 800d1e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d1ea:	6013      	str	r3, [r2, #0]
 800d1ec:	4650      	mov	r0, sl
 800d1ee:	b019      	add	sp, #100	@ 0x64
 800d1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	f77f ae37 	ble.w	800ce6a <_dtoa_r+0x7b2>
 800d1fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d200:	2001      	movs	r0, #1
 800d202:	e655      	b.n	800ceb0 <_dtoa_r+0x7f8>
 800d204:	9b00      	ldr	r3, [sp, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	f77f aed6 	ble.w	800cfb8 <_dtoa_r+0x900>
 800d20c:	4656      	mov	r6, sl
 800d20e:	4621      	mov	r1, r4
 800d210:	4648      	mov	r0, r9
 800d212:	f7ff f9c6 	bl	800c5a2 <quorem>
 800d216:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d21a:	f806 8b01 	strb.w	r8, [r6], #1
 800d21e:	9b00      	ldr	r3, [sp, #0]
 800d220:	eba6 020a 	sub.w	r2, r6, sl
 800d224:	4293      	cmp	r3, r2
 800d226:	ddb3      	ble.n	800d190 <_dtoa_r+0xad8>
 800d228:	4649      	mov	r1, r9
 800d22a:	2300      	movs	r3, #0
 800d22c:	220a      	movs	r2, #10
 800d22e:	4658      	mov	r0, fp
 800d230:	f000 f968 	bl	800d504 <__multadd>
 800d234:	4681      	mov	r9, r0
 800d236:	e7ea      	b.n	800d20e <_dtoa_r+0xb56>
 800d238:	08022604 	.word	0x08022604
 800d23c:	08022588 	.word	0x08022588

0800d240 <_free_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	4605      	mov	r5, r0
 800d244:	2900      	cmp	r1, #0
 800d246:	d041      	beq.n	800d2cc <_free_r+0x8c>
 800d248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d24c:	1f0c      	subs	r4, r1, #4
 800d24e:	2b00      	cmp	r3, #0
 800d250:	bfb8      	it	lt
 800d252:	18e4      	addlt	r4, r4, r3
 800d254:	f000 f8e8 	bl	800d428 <__malloc_lock>
 800d258:	4a1d      	ldr	r2, [pc, #116]	@ (800d2d0 <_free_r+0x90>)
 800d25a:	6813      	ldr	r3, [r2, #0]
 800d25c:	b933      	cbnz	r3, 800d26c <_free_r+0x2c>
 800d25e:	6063      	str	r3, [r4, #4]
 800d260:	6014      	str	r4, [r2, #0]
 800d262:	4628      	mov	r0, r5
 800d264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d268:	f000 b8e4 	b.w	800d434 <__malloc_unlock>
 800d26c:	42a3      	cmp	r3, r4
 800d26e:	d908      	bls.n	800d282 <_free_r+0x42>
 800d270:	6820      	ldr	r0, [r4, #0]
 800d272:	1821      	adds	r1, r4, r0
 800d274:	428b      	cmp	r3, r1
 800d276:	bf01      	itttt	eq
 800d278:	6819      	ldreq	r1, [r3, #0]
 800d27a:	685b      	ldreq	r3, [r3, #4]
 800d27c:	1809      	addeq	r1, r1, r0
 800d27e:	6021      	streq	r1, [r4, #0]
 800d280:	e7ed      	b.n	800d25e <_free_r+0x1e>
 800d282:	461a      	mov	r2, r3
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	b10b      	cbz	r3, 800d28c <_free_r+0x4c>
 800d288:	42a3      	cmp	r3, r4
 800d28a:	d9fa      	bls.n	800d282 <_free_r+0x42>
 800d28c:	6811      	ldr	r1, [r2, #0]
 800d28e:	1850      	adds	r0, r2, r1
 800d290:	42a0      	cmp	r0, r4
 800d292:	d10b      	bne.n	800d2ac <_free_r+0x6c>
 800d294:	6820      	ldr	r0, [r4, #0]
 800d296:	4401      	add	r1, r0
 800d298:	1850      	adds	r0, r2, r1
 800d29a:	4283      	cmp	r3, r0
 800d29c:	6011      	str	r1, [r2, #0]
 800d29e:	d1e0      	bne.n	800d262 <_free_r+0x22>
 800d2a0:	6818      	ldr	r0, [r3, #0]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	6053      	str	r3, [r2, #4]
 800d2a6:	4408      	add	r0, r1
 800d2a8:	6010      	str	r0, [r2, #0]
 800d2aa:	e7da      	b.n	800d262 <_free_r+0x22>
 800d2ac:	d902      	bls.n	800d2b4 <_free_r+0x74>
 800d2ae:	230c      	movs	r3, #12
 800d2b0:	602b      	str	r3, [r5, #0]
 800d2b2:	e7d6      	b.n	800d262 <_free_r+0x22>
 800d2b4:	6820      	ldr	r0, [r4, #0]
 800d2b6:	1821      	adds	r1, r4, r0
 800d2b8:	428b      	cmp	r3, r1
 800d2ba:	bf04      	itt	eq
 800d2bc:	6819      	ldreq	r1, [r3, #0]
 800d2be:	685b      	ldreq	r3, [r3, #4]
 800d2c0:	6063      	str	r3, [r4, #4]
 800d2c2:	bf04      	itt	eq
 800d2c4:	1809      	addeq	r1, r1, r0
 800d2c6:	6021      	streq	r1, [r4, #0]
 800d2c8:	6054      	str	r4, [r2, #4]
 800d2ca:	e7ca      	b.n	800d262 <_free_r+0x22>
 800d2cc:	bd38      	pop	{r3, r4, r5, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20011ab4 	.word	0x20011ab4

0800d2d4 <malloc>:
 800d2d4:	4b02      	ldr	r3, [pc, #8]	@ (800d2e0 <malloc+0xc>)
 800d2d6:	4601      	mov	r1, r0
 800d2d8:	6818      	ldr	r0, [r3, #0]
 800d2da:	f000 b825 	b.w	800d328 <_malloc_r>
 800d2de:	bf00      	nop
 800d2e0:	20000018 	.word	0x20000018

0800d2e4 <sbrk_aligned>:
 800d2e4:	b570      	push	{r4, r5, r6, lr}
 800d2e6:	4e0f      	ldr	r6, [pc, #60]	@ (800d324 <sbrk_aligned+0x40>)
 800d2e8:	460c      	mov	r4, r1
 800d2ea:	6831      	ldr	r1, [r6, #0]
 800d2ec:	4605      	mov	r5, r0
 800d2ee:	b911      	cbnz	r1, 800d2f6 <sbrk_aligned+0x12>
 800d2f0:	f000 fe46 	bl	800df80 <_sbrk_r>
 800d2f4:	6030      	str	r0, [r6, #0]
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	f000 fe41 	bl	800df80 <_sbrk_r>
 800d2fe:	1c43      	adds	r3, r0, #1
 800d300:	d103      	bne.n	800d30a <sbrk_aligned+0x26>
 800d302:	f04f 34ff 	mov.w	r4, #4294967295
 800d306:	4620      	mov	r0, r4
 800d308:	bd70      	pop	{r4, r5, r6, pc}
 800d30a:	1cc4      	adds	r4, r0, #3
 800d30c:	f024 0403 	bic.w	r4, r4, #3
 800d310:	42a0      	cmp	r0, r4
 800d312:	d0f8      	beq.n	800d306 <sbrk_aligned+0x22>
 800d314:	1a21      	subs	r1, r4, r0
 800d316:	4628      	mov	r0, r5
 800d318:	f000 fe32 	bl	800df80 <_sbrk_r>
 800d31c:	3001      	adds	r0, #1
 800d31e:	d1f2      	bne.n	800d306 <sbrk_aligned+0x22>
 800d320:	e7ef      	b.n	800d302 <sbrk_aligned+0x1e>
 800d322:	bf00      	nop
 800d324:	20011ab0 	.word	0x20011ab0

0800d328 <_malloc_r>:
 800d328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d32c:	1ccd      	adds	r5, r1, #3
 800d32e:	f025 0503 	bic.w	r5, r5, #3
 800d332:	3508      	adds	r5, #8
 800d334:	2d0c      	cmp	r5, #12
 800d336:	bf38      	it	cc
 800d338:	250c      	movcc	r5, #12
 800d33a:	2d00      	cmp	r5, #0
 800d33c:	4606      	mov	r6, r0
 800d33e:	db01      	blt.n	800d344 <_malloc_r+0x1c>
 800d340:	42a9      	cmp	r1, r5
 800d342:	d904      	bls.n	800d34e <_malloc_r+0x26>
 800d344:	230c      	movs	r3, #12
 800d346:	6033      	str	r3, [r6, #0]
 800d348:	2000      	movs	r0, #0
 800d34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d34e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d424 <_malloc_r+0xfc>
 800d352:	f000 f869 	bl	800d428 <__malloc_lock>
 800d356:	f8d8 3000 	ldr.w	r3, [r8]
 800d35a:	461c      	mov	r4, r3
 800d35c:	bb44      	cbnz	r4, 800d3b0 <_malloc_r+0x88>
 800d35e:	4629      	mov	r1, r5
 800d360:	4630      	mov	r0, r6
 800d362:	f7ff ffbf 	bl	800d2e4 <sbrk_aligned>
 800d366:	1c43      	adds	r3, r0, #1
 800d368:	4604      	mov	r4, r0
 800d36a:	d158      	bne.n	800d41e <_malloc_r+0xf6>
 800d36c:	f8d8 4000 	ldr.w	r4, [r8]
 800d370:	4627      	mov	r7, r4
 800d372:	2f00      	cmp	r7, #0
 800d374:	d143      	bne.n	800d3fe <_malloc_r+0xd6>
 800d376:	2c00      	cmp	r4, #0
 800d378:	d04b      	beq.n	800d412 <_malloc_r+0xea>
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	4639      	mov	r1, r7
 800d37e:	4630      	mov	r0, r6
 800d380:	eb04 0903 	add.w	r9, r4, r3
 800d384:	f000 fdfc 	bl	800df80 <_sbrk_r>
 800d388:	4581      	cmp	r9, r0
 800d38a:	d142      	bne.n	800d412 <_malloc_r+0xea>
 800d38c:	6821      	ldr	r1, [r4, #0]
 800d38e:	1a6d      	subs	r5, r5, r1
 800d390:	4629      	mov	r1, r5
 800d392:	4630      	mov	r0, r6
 800d394:	f7ff ffa6 	bl	800d2e4 <sbrk_aligned>
 800d398:	3001      	adds	r0, #1
 800d39a:	d03a      	beq.n	800d412 <_malloc_r+0xea>
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	442b      	add	r3, r5
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	bb62      	cbnz	r2, 800d404 <_malloc_r+0xdc>
 800d3aa:	f8c8 7000 	str.w	r7, [r8]
 800d3ae:	e00f      	b.n	800d3d0 <_malloc_r+0xa8>
 800d3b0:	6822      	ldr	r2, [r4, #0]
 800d3b2:	1b52      	subs	r2, r2, r5
 800d3b4:	d420      	bmi.n	800d3f8 <_malloc_r+0xd0>
 800d3b6:	2a0b      	cmp	r2, #11
 800d3b8:	d917      	bls.n	800d3ea <_malloc_r+0xc2>
 800d3ba:	1961      	adds	r1, r4, r5
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	6025      	str	r5, [r4, #0]
 800d3c0:	bf18      	it	ne
 800d3c2:	6059      	strne	r1, [r3, #4]
 800d3c4:	6863      	ldr	r3, [r4, #4]
 800d3c6:	bf08      	it	eq
 800d3c8:	f8c8 1000 	streq.w	r1, [r8]
 800d3cc:	5162      	str	r2, [r4, r5]
 800d3ce:	604b      	str	r3, [r1, #4]
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f000 f82f 	bl	800d434 <__malloc_unlock>
 800d3d6:	f104 000b 	add.w	r0, r4, #11
 800d3da:	1d23      	adds	r3, r4, #4
 800d3dc:	f020 0007 	bic.w	r0, r0, #7
 800d3e0:	1ac2      	subs	r2, r0, r3
 800d3e2:	bf1c      	itt	ne
 800d3e4:	1a1b      	subne	r3, r3, r0
 800d3e6:	50a3      	strne	r3, [r4, r2]
 800d3e8:	e7af      	b.n	800d34a <_malloc_r+0x22>
 800d3ea:	6862      	ldr	r2, [r4, #4]
 800d3ec:	42a3      	cmp	r3, r4
 800d3ee:	bf0c      	ite	eq
 800d3f0:	f8c8 2000 	streq.w	r2, [r8]
 800d3f4:	605a      	strne	r2, [r3, #4]
 800d3f6:	e7eb      	b.n	800d3d0 <_malloc_r+0xa8>
 800d3f8:	4623      	mov	r3, r4
 800d3fa:	6864      	ldr	r4, [r4, #4]
 800d3fc:	e7ae      	b.n	800d35c <_malloc_r+0x34>
 800d3fe:	463c      	mov	r4, r7
 800d400:	687f      	ldr	r7, [r7, #4]
 800d402:	e7b6      	b.n	800d372 <_malloc_r+0x4a>
 800d404:	461a      	mov	r2, r3
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	42a3      	cmp	r3, r4
 800d40a:	d1fb      	bne.n	800d404 <_malloc_r+0xdc>
 800d40c:	2300      	movs	r3, #0
 800d40e:	6053      	str	r3, [r2, #4]
 800d410:	e7de      	b.n	800d3d0 <_malloc_r+0xa8>
 800d412:	230c      	movs	r3, #12
 800d414:	6033      	str	r3, [r6, #0]
 800d416:	4630      	mov	r0, r6
 800d418:	f000 f80c 	bl	800d434 <__malloc_unlock>
 800d41c:	e794      	b.n	800d348 <_malloc_r+0x20>
 800d41e:	6005      	str	r5, [r0, #0]
 800d420:	e7d6      	b.n	800d3d0 <_malloc_r+0xa8>
 800d422:	bf00      	nop
 800d424:	20011ab4 	.word	0x20011ab4

0800d428 <__malloc_lock>:
 800d428:	4801      	ldr	r0, [pc, #4]	@ (800d430 <__malloc_lock+0x8>)
 800d42a:	f7ff b8b8 	b.w	800c59e <__retarget_lock_acquire_recursive>
 800d42e:	bf00      	nop
 800d430:	20011aac 	.word	0x20011aac

0800d434 <__malloc_unlock>:
 800d434:	4801      	ldr	r0, [pc, #4]	@ (800d43c <__malloc_unlock+0x8>)
 800d436:	f7ff b8b3 	b.w	800c5a0 <__retarget_lock_release_recursive>
 800d43a:	bf00      	nop
 800d43c:	20011aac 	.word	0x20011aac

0800d440 <_Balloc>:
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	69c6      	ldr	r6, [r0, #28]
 800d444:	4604      	mov	r4, r0
 800d446:	460d      	mov	r5, r1
 800d448:	b976      	cbnz	r6, 800d468 <_Balloc+0x28>
 800d44a:	2010      	movs	r0, #16
 800d44c:	f7ff ff42 	bl	800d2d4 <malloc>
 800d450:	4602      	mov	r2, r0
 800d452:	61e0      	str	r0, [r4, #28]
 800d454:	b920      	cbnz	r0, 800d460 <_Balloc+0x20>
 800d456:	4b18      	ldr	r3, [pc, #96]	@ (800d4b8 <_Balloc+0x78>)
 800d458:	4818      	ldr	r0, [pc, #96]	@ (800d4bc <_Balloc+0x7c>)
 800d45a:	216b      	movs	r1, #107	@ 0x6b
 800d45c:	f000 fdae 	bl	800dfbc <__assert_func>
 800d460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d464:	6006      	str	r6, [r0, #0]
 800d466:	60c6      	str	r6, [r0, #12]
 800d468:	69e6      	ldr	r6, [r4, #28]
 800d46a:	68f3      	ldr	r3, [r6, #12]
 800d46c:	b183      	cbz	r3, 800d490 <_Balloc+0x50>
 800d46e:	69e3      	ldr	r3, [r4, #28]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d476:	b9b8      	cbnz	r0, 800d4a8 <_Balloc+0x68>
 800d478:	2101      	movs	r1, #1
 800d47a:	fa01 f605 	lsl.w	r6, r1, r5
 800d47e:	1d72      	adds	r2, r6, #5
 800d480:	0092      	lsls	r2, r2, #2
 800d482:	4620      	mov	r0, r4
 800d484:	f000 fdb8 	bl	800dff8 <_calloc_r>
 800d488:	b160      	cbz	r0, 800d4a4 <_Balloc+0x64>
 800d48a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d48e:	e00e      	b.n	800d4ae <_Balloc+0x6e>
 800d490:	2221      	movs	r2, #33	@ 0x21
 800d492:	2104      	movs	r1, #4
 800d494:	4620      	mov	r0, r4
 800d496:	f000 fdaf 	bl	800dff8 <_calloc_r>
 800d49a:	69e3      	ldr	r3, [r4, #28]
 800d49c:	60f0      	str	r0, [r6, #12]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1e4      	bne.n	800d46e <_Balloc+0x2e>
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}
 800d4a8:	6802      	ldr	r2, [r0, #0]
 800d4aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4b4:	e7f7      	b.n	800d4a6 <_Balloc+0x66>
 800d4b6:	bf00      	nop
 800d4b8:	08022595 	.word	0x08022595
 800d4bc:	08022615 	.word	0x08022615

0800d4c0 <_Bfree>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	69c6      	ldr	r6, [r0, #28]
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	b976      	cbnz	r6, 800d4e8 <_Bfree+0x28>
 800d4ca:	2010      	movs	r0, #16
 800d4cc:	f7ff ff02 	bl	800d2d4 <malloc>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	61e8      	str	r0, [r5, #28]
 800d4d4:	b920      	cbnz	r0, 800d4e0 <_Bfree+0x20>
 800d4d6:	4b09      	ldr	r3, [pc, #36]	@ (800d4fc <_Bfree+0x3c>)
 800d4d8:	4809      	ldr	r0, [pc, #36]	@ (800d500 <_Bfree+0x40>)
 800d4da:	218f      	movs	r1, #143	@ 0x8f
 800d4dc:	f000 fd6e 	bl	800dfbc <__assert_func>
 800d4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4e4:	6006      	str	r6, [r0, #0]
 800d4e6:	60c6      	str	r6, [r0, #12]
 800d4e8:	b13c      	cbz	r4, 800d4fa <_Bfree+0x3a>
 800d4ea:	69eb      	ldr	r3, [r5, #28]
 800d4ec:	6862      	ldr	r2, [r4, #4]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4f4:	6021      	str	r1, [r4, #0]
 800d4f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4fa:	bd70      	pop	{r4, r5, r6, pc}
 800d4fc:	08022595 	.word	0x08022595
 800d500:	08022615 	.word	0x08022615

0800d504 <__multadd>:
 800d504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d508:	690d      	ldr	r5, [r1, #16]
 800d50a:	4607      	mov	r7, r0
 800d50c:	460c      	mov	r4, r1
 800d50e:	461e      	mov	r6, r3
 800d510:	f101 0c14 	add.w	ip, r1, #20
 800d514:	2000      	movs	r0, #0
 800d516:	f8dc 3000 	ldr.w	r3, [ip]
 800d51a:	b299      	uxth	r1, r3
 800d51c:	fb02 6101 	mla	r1, r2, r1, r6
 800d520:	0c1e      	lsrs	r6, r3, #16
 800d522:	0c0b      	lsrs	r3, r1, #16
 800d524:	fb02 3306 	mla	r3, r2, r6, r3
 800d528:	b289      	uxth	r1, r1
 800d52a:	3001      	adds	r0, #1
 800d52c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d530:	4285      	cmp	r5, r0
 800d532:	f84c 1b04 	str.w	r1, [ip], #4
 800d536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d53a:	dcec      	bgt.n	800d516 <__multadd+0x12>
 800d53c:	b30e      	cbz	r6, 800d582 <__multadd+0x7e>
 800d53e:	68a3      	ldr	r3, [r4, #8]
 800d540:	42ab      	cmp	r3, r5
 800d542:	dc19      	bgt.n	800d578 <__multadd+0x74>
 800d544:	6861      	ldr	r1, [r4, #4]
 800d546:	4638      	mov	r0, r7
 800d548:	3101      	adds	r1, #1
 800d54a:	f7ff ff79 	bl	800d440 <_Balloc>
 800d54e:	4680      	mov	r8, r0
 800d550:	b928      	cbnz	r0, 800d55e <__multadd+0x5a>
 800d552:	4602      	mov	r2, r0
 800d554:	4b0c      	ldr	r3, [pc, #48]	@ (800d588 <__multadd+0x84>)
 800d556:	480d      	ldr	r0, [pc, #52]	@ (800d58c <__multadd+0x88>)
 800d558:	21ba      	movs	r1, #186	@ 0xba
 800d55a:	f000 fd2f 	bl	800dfbc <__assert_func>
 800d55e:	6922      	ldr	r2, [r4, #16]
 800d560:	3202      	adds	r2, #2
 800d562:	f104 010c 	add.w	r1, r4, #12
 800d566:	0092      	lsls	r2, r2, #2
 800d568:	300c      	adds	r0, #12
 800d56a:	f000 fd19 	bl	800dfa0 <memcpy>
 800d56e:	4621      	mov	r1, r4
 800d570:	4638      	mov	r0, r7
 800d572:	f7ff ffa5 	bl	800d4c0 <_Bfree>
 800d576:	4644      	mov	r4, r8
 800d578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d57c:	3501      	adds	r5, #1
 800d57e:	615e      	str	r6, [r3, #20]
 800d580:	6125      	str	r5, [r4, #16]
 800d582:	4620      	mov	r0, r4
 800d584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d588:	08022604 	.word	0x08022604
 800d58c:	08022615 	.word	0x08022615

0800d590 <__hi0bits>:
 800d590:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d594:	4603      	mov	r3, r0
 800d596:	bf36      	itet	cc
 800d598:	0403      	lslcc	r3, r0, #16
 800d59a:	2000      	movcs	r0, #0
 800d59c:	2010      	movcc	r0, #16
 800d59e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d5a2:	bf3c      	itt	cc
 800d5a4:	021b      	lslcc	r3, r3, #8
 800d5a6:	3008      	addcc	r0, #8
 800d5a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5ac:	bf3c      	itt	cc
 800d5ae:	011b      	lslcc	r3, r3, #4
 800d5b0:	3004      	addcc	r0, #4
 800d5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5b6:	bf3c      	itt	cc
 800d5b8:	009b      	lslcc	r3, r3, #2
 800d5ba:	3002      	addcc	r0, #2
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	db05      	blt.n	800d5cc <__hi0bits+0x3c>
 800d5c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d5c4:	f100 0001 	add.w	r0, r0, #1
 800d5c8:	bf08      	it	eq
 800d5ca:	2020      	moveq	r0, #32
 800d5cc:	4770      	bx	lr

0800d5ce <__lo0bits>:
 800d5ce:	6803      	ldr	r3, [r0, #0]
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	f013 0007 	ands.w	r0, r3, #7
 800d5d6:	d00b      	beq.n	800d5f0 <__lo0bits+0x22>
 800d5d8:	07d9      	lsls	r1, r3, #31
 800d5da:	d421      	bmi.n	800d620 <__lo0bits+0x52>
 800d5dc:	0798      	lsls	r0, r3, #30
 800d5de:	bf49      	itett	mi
 800d5e0:	085b      	lsrmi	r3, r3, #1
 800d5e2:	089b      	lsrpl	r3, r3, #2
 800d5e4:	2001      	movmi	r0, #1
 800d5e6:	6013      	strmi	r3, [r2, #0]
 800d5e8:	bf5c      	itt	pl
 800d5ea:	6013      	strpl	r3, [r2, #0]
 800d5ec:	2002      	movpl	r0, #2
 800d5ee:	4770      	bx	lr
 800d5f0:	b299      	uxth	r1, r3
 800d5f2:	b909      	cbnz	r1, 800d5f8 <__lo0bits+0x2a>
 800d5f4:	0c1b      	lsrs	r3, r3, #16
 800d5f6:	2010      	movs	r0, #16
 800d5f8:	b2d9      	uxtb	r1, r3
 800d5fa:	b909      	cbnz	r1, 800d600 <__lo0bits+0x32>
 800d5fc:	3008      	adds	r0, #8
 800d5fe:	0a1b      	lsrs	r3, r3, #8
 800d600:	0719      	lsls	r1, r3, #28
 800d602:	bf04      	itt	eq
 800d604:	091b      	lsreq	r3, r3, #4
 800d606:	3004      	addeq	r0, #4
 800d608:	0799      	lsls	r1, r3, #30
 800d60a:	bf04      	itt	eq
 800d60c:	089b      	lsreq	r3, r3, #2
 800d60e:	3002      	addeq	r0, #2
 800d610:	07d9      	lsls	r1, r3, #31
 800d612:	d403      	bmi.n	800d61c <__lo0bits+0x4e>
 800d614:	085b      	lsrs	r3, r3, #1
 800d616:	f100 0001 	add.w	r0, r0, #1
 800d61a:	d003      	beq.n	800d624 <__lo0bits+0x56>
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	4770      	bx	lr
 800d620:	2000      	movs	r0, #0
 800d622:	4770      	bx	lr
 800d624:	2020      	movs	r0, #32
 800d626:	4770      	bx	lr

0800d628 <__i2b>:
 800d628:	b510      	push	{r4, lr}
 800d62a:	460c      	mov	r4, r1
 800d62c:	2101      	movs	r1, #1
 800d62e:	f7ff ff07 	bl	800d440 <_Balloc>
 800d632:	4602      	mov	r2, r0
 800d634:	b928      	cbnz	r0, 800d642 <__i2b+0x1a>
 800d636:	4b05      	ldr	r3, [pc, #20]	@ (800d64c <__i2b+0x24>)
 800d638:	4805      	ldr	r0, [pc, #20]	@ (800d650 <__i2b+0x28>)
 800d63a:	f240 1145 	movw	r1, #325	@ 0x145
 800d63e:	f000 fcbd 	bl	800dfbc <__assert_func>
 800d642:	2301      	movs	r3, #1
 800d644:	6144      	str	r4, [r0, #20]
 800d646:	6103      	str	r3, [r0, #16]
 800d648:	bd10      	pop	{r4, pc}
 800d64a:	bf00      	nop
 800d64c:	08022604 	.word	0x08022604
 800d650:	08022615 	.word	0x08022615

0800d654 <__multiply>:
 800d654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d658:	4614      	mov	r4, r2
 800d65a:	690a      	ldr	r2, [r1, #16]
 800d65c:	6923      	ldr	r3, [r4, #16]
 800d65e:	429a      	cmp	r2, r3
 800d660:	bfa8      	it	ge
 800d662:	4623      	movge	r3, r4
 800d664:	460f      	mov	r7, r1
 800d666:	bfa4      	itt	ge
 800d668:	460c      	movge	r4, r1
 800d66a:	461f      	movge	r7, r3
 800d66c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d670:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d674:	68a3      	ldr	r3, [r4, #8]
 800d676:	6861      	ldr	r1, [r4, #4]
 800d678:	eb0a 0609 	add.w	r6, sl, r9
 800d67c:	42b3      	cmp	r3, r6
 800d67e:	b085      	sub	sp, #20
 800d680:	bfb8      	it	lt
 800d682:	3101      	addlt	r1, #1
 800d684:	f7ff fedc 	bl	800d440 <_Balloc>
 800d688:	b930      	cbnz	r0, 800d698 <__multiply+0x44>
 800d68a:	4602      	mov	r2, r0
 800d68c:	4b44      	ldr	r3, [pc, #272]	@ (800d7a0 <__multiply+0x14c>)
 800d68e:	4845      	ldr	r0, [pc, #276]	@ (800d7a4 <__multiply+0x150>)
 800d690:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d694:	f000 fc92 	bl	800dfbc <__assert_func>
 800d698:	f100 0514 	add.w	r5, r0, #20
 800d69c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d6a0:	462b      	mov	r3, r5
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	4543      	cmp	r3, r8
 800d6a6:	d321      	bcc.n	800d6ec <__multiply+0x98>
 800d6a8:	f107 0114 	add.w	r1, r7, #20
 800d6ac:	f104 0214 	add.w	r2, r4, #20
 800d6b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d6b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d6b8:	9302      	str	r3, [sp, #8]
 800d6ba:	1b13      	subs	r3, r2, r4
 800d6bc:	3b15      	subs	r3, #21
 800d6be:	f023 0303 	bic.w	r3, r3, #3
 800d6c2:	3304      	adds	r3, #4
 800d6c4:	f104 0715 	add.w	r7, r4, #21
 800d6c8:	42ba      	cmp	r2, r7
 800d6ca:	bf38      	it	cc
 800d6cc:	2304      	movcc	r3, #4
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	9b02      	ldr	r3, [sp, #8]
 800d6d2:	9103      	str	r1, [sp, #12]
 800d6d4:	428b      	cmp	r3, r1
 800d6d6:	d80c      	bhi.n	800d6f2 <__multiply+0x9e>
 800d6d8:	2e00      	cmp	r6, #0
 800d6da:	dd03      	ble.n	800d6e4 <__multiply+0x90>
 800d6dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d05b      	beq.n	800d79c <__multiply+0x148>
 800d6e4:	6106      	str	r6, [r0, #16]
 800d6e6:	b005      	add	sp, #20
 800d6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ec:	f843 2b04 	str.w	r2, [r3], #4
 800d6f0:	e7d8      	b.n	800d6a4 <__multiply+0x50>
 800d6f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d6f6:	f1ba 0f00 	cmp.w	sl, #0
 800d6fa:	d024      	beq.n	800d746 <__multiply+0xf2>
 800d6fc:	f104 0e14 	add.w	lr, r4, #20
 800d700:	46a9      	mov	r9, r5
 800d702:	f04f 0c00 	mov.w	ip, #0
 800d706:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d70a:	f8d9 3000 	ldr.w	r3, [r9]
 800d70e:	fa1f fb87 	uxth.w	fp, r7
 800d712:	b29b      	uxth	r3, r3
 800d714:	fb0a 330b 	mla	r3, sl, fp, r3
 800d718:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d71c:	f8d9 7000 	ldr.w	r7, [r9]
 800d720:	4463      	add	r3, ip
 800d722:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d726:	fb0a c70b 	mla	r7, sl, fp, ip
 800d72a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d72e:	b29b      	uxth	r3, r3
 800d730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d734:	4572      	cmp	r2, lr
 800d736:	f849 3b04 	str.w	r3, [r9], #4
 800d73a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d73e:	d8e2      	bhi.n	800d706 <__multiply+0xb2>
 800d740:	9b01      	ldr	r3, [sp, #4]
 800d742:	f845 c003 	str.w	ip, [r5, r3]
 800d746:	9b03      	ldr	r3, [sp, #12]
 800d748:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d74c:	3104      	adds	r1, #4
 800d74e:	f1b9 0f00 	cmp.w	r9, #0
 800d752:	d021      	beq.n	800d798 <__multiply+0x144>
 800d754:	682b      	ldr	r3, [r5, #0]
 800d756:	f104 0c14 	add.w	ip, r4, #20
 800d75a:	46ae      	mov	lr, r5
 800d75c:	f04f 0a00 	mov.w	sl, #0
 800d760:	f8bc b000 	ldrh.w	fp, [ip]
 800d764:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d768:	fb09 770b 	mla	r7, r9, fp, r7
 800d76c:	4457      	add	r7, sl
 800d76e:	b29b      	uxth	r3, r3
 800d770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d774:	f84e 3b04 	str.w	r3, [lr], #4
 800d778:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d77c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d780:	f8be 3000 	ldrh.w	r3, [lr]
 800d784:	fb09 330a 	mla	r3, r9, sl, r3
 800d788:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d78c:	4562      	cmp	r2, ip
 800d78e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d792:	d8e5      	bhi.n	800d760 <__multiply+0x10c>
 800d794:	9f01      	ldr	r7, [sp, #4]
 800d796:	51eb      	str	r3, [r5, r7]
 800d798:	3504      	adds	r5, #4
 800d79a:	e799      	b.n	800d6d0 <__multiply+0x7c>
 800d79c:	3e01      	subs	r6, #1
 800d79e:	e79b      	b.n	800d6d8 <__multiply+0x84>
 800d7a0:	08022604 	.word	0x08022604
 800d7a4:	08022615 	.word	0x08022615

0800d7a8 <__pow5mult>:
 800d7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7ac:	4615      	mov	r5, r2
 800d7ae:	f012 0203 	ands.w	r2, r2, #3
 800d7b2:	4607      	mov	r7, r0
 800d7b4:	460e      	mov	r6, r1
 800d7b6:	d007      	beq.n	800d7c8 <__pow5mult+0x20>
 800d7b8:	4c25      	ldr	r4, [pc, #148]	@ (800d850 <__pow5mult+0xa8>)
 800d7ba:	3a01      	subs	r2, #1
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7c2:	f7ff fe9f 	bl	800d504 <__multadd>
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	10ad      	asrs	r5, r5, #2
 800d7ca:	d03d      	beq.n	800d848 <__pow5mult+0xa0>
 800d7cc:	69fc      	ldr	r4, [r7, #28]
 800d7ce:	b97c      	cbnz	r4, 800d7f0 <__pow5mult+0x48>
 800d7d0:	2010      	movs	r0, #16
 800d7d2:	f7ff fd7f 	bl	800d2d4 <malloc>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	61f8      	str	r0, [r7, #28]
 800d7da:	b928      	cbnz	r0, 800d7e8 <__pow5mult+0x40>
 800d7dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d854 <__pow5mult+0xac>)
 800d7de:	481e      	ldr	r0, [pc, #120]	@ (800d858 <__pow5mult+0xb0>)
 800d7e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d7e4:	f000 fbea 	bl	800dfbc <__assert_func>
 800d7e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7ec:	6004      	str	r4, [r0, #0]
 800d7ee:	60c4      	str	r4, [r0, #12]
 800d7f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d7f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7f8:	b94c      	cbnz	r4, 800d80e <__pow5mult+0x66>
 800d7fa:	f240 2171 	movw	r1, #625	@ 0x271
 800d7fe:	4638      	mov	r0, r7
 800d800:	f7ff ff12 	bl	800d628 <__i2b>
 800d804:	2300      	movs	r3, #0
 800d806:	f8c8 0008 	str.w	r0, [r8, #8]
 800d80a:	4604      	mov	r4, r0
 800d80c:	6003      	str	r3, [r0, #0]
 800d80e:	f04f 0900 	mov.w	r9, #0
 800d812:	07eb      	lsls	r3, r5, #31
 800d814:	d50a      	bpl.n	800d82c <__pow5mult+0x84>
 800d816:	4631      	mov	r1, r6
 800d818:	4622      	mov	r2, r4
 800d81a:	4638      	mov	r0, r7
 800d81c:	f7ff ff1a 	bl	800d654 <__multiply>
 800d820:	4631      	mov	r1, r6
 800d822:	4680      	mov	r8, r0
 800d824:	4638      	mov	r0, r7
 800d826:	f7ff fe4b 	bl	800d4c0 <_Bfree>
 800d82a:	4646      	mov	r6, r8
 800d82c:	106d      	asrs	r5, r5, #1
 800d82e:	d00b      	beq.n	800d848 <__pow5mult+0xa0>
 800d830:	6820      	ldr	r0, [r4, #0]
 800d832:	b938      	cbnz	r0, 800d844 <__pow5mult+0x9c>
 800d834:	4622      	mov	r2, r4
 800d836:	4621      	mov	r1, r4
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff ff0b 	bl	800d654 <__multiply>
 800d83e:	6020      	str	r0, [r4, #0]
 800d840:	f8c0 9000 	str.w	r9, [r0]
 800d844:	4604      	mov	r4, r0
 800d846:	e7e4      	b.n	800d812 <__pow5mult+0x6a>
 800d848:	4630      	mov	r0, r6
 800d84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d84e:	bf00      	nop
 800d850:	08022670 	.word	0x08022670
 800d854:	08022595 	.word	0x08022595
 800d858:	08022615 	.word	0x08022615

0800d85c <__lshift>:
 800d85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d860:	460c      	mov	r4, r1
 800d862:	6849      	ldr	r1, [r1, #4]
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d86a:	68a3      	ldr	r3, [r4, #8]
 800d86c:	4607      	mov	r7, r0
 800d86e:	4691      	mov	r9, r2
 800d870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d874:	f108 0601 	add.w	r6, r8, #1
 800d878:	42b3      	cmp	r3, r6
 800d87a:	db0b      	blt.n	800d894 <__lshift+0x38>
 800d87c:	4638      	mov	r0, r7
 800d87e:	f7ff fddf 	bl	800d440 <_Balloc>
 800d882:	4605      	mov	r5, r0
 800d884:	b948      	cbnz	r0, 800d89a <__lshift+0x3e>
 800d886:	4602      	mov	r2, r0
 800d888:	4b28      	ldr	r3, [pc, #160]	@ (800d92c <__lshift+0xd0>)
 800d88a:	4829      	ldr	r0, [pc, #164]	@ (800d930 <__lshift+0xd4>)
 800d88c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d890:	f000 fb94 	bl	800dfbc <__assert_func>
 800d894:	3101      	adds	r1, #1
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	e7ee      	b.n	800d878 <__lshift+0x1c>
 800d89a:	2300      	movs	r3, #0
 800d89c:	f100 0114 	add.w	r1, r0, #20
 800d8a0:	f100 0210 	add.w	r2, r0, #16
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	4553      	cmp	r3, sl
 800d8a8:	db33      	blt.n	800d912 <__lshift+0xb6>
 800d8aa:	6920      	ldr	r0, [r4, #16]
 800d8ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8b0:	f104 0314 	add.w	r3, r4, #20
 800d8b4:	f019 091f 	ands.w	r9, r9, #31
 800d8b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8c0:	d02b      	beq.n	800d91a <__lshift+0xbe>
 800d8c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d8c6:	468a      	mov	sl, r1
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	6818      	ldr	r0, [r3, #0]
 800d8cc:	fa00 f009 	lsl.w	r0, r0, r9
 800d8d0:	4310      	orrs	r0, r2
 800d8d2:	f84a 0b04 	str.w	r0, [sl], #4
 800d8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8da:	459c      	cmp	ip, r3
 800d8dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8e0:	d8f3      	bhi.n	800d8ca <__lshift+0x6e>
 800d8e2:	ebac 0304 	sub.w	r3, ip, r4
 800d8e6:	3b15      	subs	r3, #21
 800d8e8:	f023 0303 	bic.w	r3, r3, #3
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	f104 0015 	add.w	r0, r4, #21
 800d8f2:	4584      	cmp	ip, r0
 800d8f4:	bf38      	it	cc
 800d8f6:	2304      	movcc	r3, #4
 800d8f8:	50ca      	str	r2, [r1, r3]
 800d8fa:	b10a      	cbz	r2, 800d900 <__lshift+0xa4>
 800d8fc:	f108 0602 	add.w	r6, r8, #2
 800d900:	3e01      	subs	r6, #1
 800d902:	4638      	mov	r0, r7
 800d904:	612e      	str	r6, [r5, #16]
 800d906:	4621      	mov	r1, r4
 800d908:	f7ff fdda 	bl	800d4c0 <_Bfree>
 800d90c:	4628      	mov	r0, r5
 800d90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d912:	f842 0f04 	str.w	r0, [r2, #4]!
 800d916:	3301      	adds	r3, #1
 800d918:	e7c5      	b.n	800d8a6 <__lshift+0x4a>
 800d91a:	3904      	subs	r1, #4
 800d91c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d920:	f841 2f04 	str.w	r2, [r1, #4]!
 800d924:	459c      	cmp	ip, r3
 800d926:	d8f9      	bhi.n	800d91c <__lshift+0xc0>
 800d928:	e7ea      	b.n	800d900 <__lshift+0xa4>
 800d92a:	bf00      	nop
 800d92c:	08022604 	.word	0x08022604
 800d930:	08022615 	.word	0x08022615

0800d934 <__mcmp>:
 800d934:	690a      	ldr	r2, [r1, #16]
 800d936:	4603      	mov	r3, r0
 800d938:	6900      	ldr	r0, [r0, #16]
 800d93a:	1a80      	subs	r0, r0, r2
 800d93c:	b530      	push	{r4, r5, lr}
 800d93e:	d10e      	bne.n	800d95e <__mcmp+0x2a>
 800d940:	3314      	adds	r3, #20
 800d942:	3114      	adds	r1, #20
 800d944:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d948:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d94c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d950:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d954:	4295      	cmp	r5, r2
 800d956:	d003      	beq.n	800d960 <__mcmp+0x2c>
 800d958:	d205      	bcs.n	800d966 <__mcmp+0x32>
 800d95a:	f04f 30ff 	mov.w	r0, #4294967295
 800d95e:	bd30      	pop	{r4, r5, pc}
 800d960:	42a3      	cmp	r3, r4
 800d962:	d3f3      	bcc.n	800d94c <__mcmp+0x18>
 800d964:	e7fb      	b.n	800d95e <__mcmp+0x2a>
 800d966:	2001      	movs	r0, #1
 800d968:	e7f9      	b.n	800d95e <__mcmp+0x2a>
	...

0800d96c <__mdiff>:
 800d96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d970:	4689      	mov	r9, r1
 800d972:	4606      	mov	r6, r0
 800d974:	4611      	mov	r1, r2
 800d976:	4648      	mov	r0, r9
 800d978:	4614      	mov	r4, r2
 800d97a:	f7ff ffdb 	bl	800d934 <__mcmp>
 800d97e:	1e05      	subs	r5, r0, #0
 800d980:	d112      	bne.n	800d9a8 <__mdiff+0x3c>
 800d982:	4629      	mov	r1, r5
 800d984:	4630      	mov	r0, r6
 800d986:	f7ff fd5b 	bl	800d440 <_Balloc>
 800d98a:	4602      	mov	r2, r0
 800d98c:	b928      	cbnz	r0, 800d99a <__mdiff+0x2e>
 800d98e:	4b3f      	ldr	r3, [pc, #252]	@ (800da8c <__mdiff+0x120>)
 800d990:	f240 2137 	movw	r1, #567	@ 0x237
 800d994:	483e      	ldr	r0, [pc, #248]	@ (800da90 <__mdiff+0x124>)
 800d996:	f000 fb11 	bl	800dfbc <__assert_func>
 800d99a:	2301      	movs	r3, #1
 800d99c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	b003      	add	sp, #12
 800d9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a8:	bfbc      	itt	lt
 800d9aa:	464b      	movlt	r3, r9
 800d9ac:	46a1      	movlt	r9, r4
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d9b4:	bfba      	itte	lt
 800d9b6:	461c      	movlt	r4, r3
 800d9b8:	2501      	movlt	r5, #1
 800d9ba:	2500      	movge	r5, #0
 800d9bc:	f7ff fd40 	bl	800d440 <_Balloc>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	b918      	cbnz	r0, 800d9cc <__mdiff+0x60>
 800d9c4:	4b31      	ldr	r3, [pc, #196]	@ (800da8c <__mdiff+0x120>)
 800d9c6:	f240 2145 	movw	r1, #581	@ 0x245
 800d9ca:	e7e3      	b.n	800d994 <__mdiff+0x28>
 800d9cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d9d0:	6926      	ldr	r6, [r4, #16]
 800d9d2:	60c5      	str	r5, [r0, #12]
 800d9d4:	f109 0310 	add.w	r3, r9, #16
 800d9d8:	f109 0514 	add.w	r5, r9, #20
 800d9dc:	f104 0e14 	add.w	lr, r4, #20
 800d9e0:	f100 0b14 	add.w	fp, r0, #20
 800d9e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d9e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d9ec:	9301      	str	r3, [sp, #4]
 800d9ee:	46d9      	mov	r9, fp
 800d9f0:	f04f 0c00 	mov.w	ip, #0
 800d9f4:	9b01      	ldr	r3, [sp, #4]
 800d9f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d9fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	fa1f f38a 	uxth.w	r3, sl
 800da04:	4619      	mov	r1, r3
 800da06:	b283      	uxth	r3, r0
 800da08:	1acb      	subs	r3, r1, r3
 800da0a:	0c00      	lsrs	r0, r0, #16
 800da0c:	4463      	add	r3, ip
 800da0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800da12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800da16:	b29b      	uxth	r3, r3
 800da18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800da1c:	4576      	cmp	r6, lr
 800da1e:	f849 3b04 	str.w	r3, [r9], #4
 800da22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da26:	d8e5      	bhi.n	800d9f4 <__mdiff+0x88>
 800da28:	1b33      	subs	r3, r6, r4
 800da2a:	3b15      	subs	r3, #21
 800da2c:	f023 0303 	bic.w	r3, r3, #3
 800da30:	3415      	adds	r4, #21
 800da32:	3304      	adds	r3, #4
 800da34:	42a6      	cmp	r6, r4
 800da36:	bf38      	it	cc
 800da38:	2304      	movcc	r3, #4
 800da3a:	441d      	add	r5, r3
 800da3c:	445b      	add	r3, fp
 800da3e:	461e      	mov	r6, r3
 800da40:	462c      	mov	r4, r5
 800da42:	4544      	cmp	r4, r8
 800da44:	d30e      	bcc.n	800da64 <__mdiff+0xf8>
 800da46:	f108 0103 	add.w	r1, r8, #3
 800da4a:	1b49      	subs	r1, r1, r5
 800da4c:	f021 0103 	bic.w	r1, r1, #3
 800da50:	3d03      	subs	r5, #3
 800da52:	45a8      	cmp	r8, r5
 800da54:	bf38      	it	cc
 800da56:	2100      	movcc	r1, #0
 800da58:	440b      	add	r3, r1
 800da5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da5e:	b191      	cbz	r1, 800da86 <__mdiff+0x11a>
 800da60:	6117      	str	r7, [r2, #16]
 800da62:	e79d      	b.n	800d9a0 <__mdiff+0x34>
 800da64:	f854 1b04 	ldr.w	r1, [r4], #4
 800da68:	46e6      	mov	lr, ip
 800da6a:	0c08      	lsrs	r0, r1, #16
 800da6c:	fa1c fc81 	uxtah	ip, ip, r1
 800da70:	4471      	add	r1, lr
 800da72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da76:	b289      	uxth	r1, r1
 800da78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da7c:	f846 1b04 	str.w	r1, [r6], #4
 800da80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da84:	e7dd      	b.n	800da42 <__mdiff+0xd6>
 800da86:	3f01      	subs	r7, #1
 800da88:	e7e7      	b.n	800da5a <__mdiff+0xee>
 800da8a:	bf00      	nop
 800da8c:	08022604 	.word	0x08022604
 800da90:	08022615 	.word	0x08022615

0800da94 <__d2b>:
 800da94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da98:	460f      	mov	r7, r1
 800da9a:	2101      	movs	r1, #1
 800da9c:	ec59 8b10 	vmov	r8, r9, d0
 800daa0:	4616      	mov	r6, r2
 800daa2:	f7ff fccd 	bl	800d440 <_Balloc>
 800daa6:	4604      	mov	r4, r0
 800daa8:	b930      	cbnz	r0, 800dab8 <__d2b+0x24>
 800daaa:	4602      	mov	r2, r0
 800daac:	4b23      	ldr	r3, [pc, #140]	@ (800db3c <__d2b+0xa8>)
 800daae:	4824      	ldr	r0, [pc, #144]	@ (800db40 <__d2b+0xac>)
 800dab0:	f240 310f 	movw	r1, #783	@ 0x30f
 800dab4:	f000 fa82 	bl	800dfbc <__assert_func>
 800dab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dabc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dac0:	b10d      	cbz	r5, 800dac6 <__d2b+0x32>
 800dac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dac6:	9301      	str	r3, [sp, #4]
 800dac8:	f1b8 0300 	subs.w	r3, r8, #0
 800dacc:	d023      	beq.n	800db16 <__d2b+0x82>
 800dace:	4668      	mov	r0, sp
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	f7ff fd7c 	bl	800d5ce <__lo0bits>
 800dad6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dada:	b1d0      	cbz	r0, 800db12 <__d2b+0x7e>
 800dadc:	f1c0 0320 	rsb	r3, r0, #32
 800dae0:	fa02 f303 	lsl.w	r3, r2, r3
 800dae4:	430b      	orrs	r3, r1
 800dae6:	40c2      	lsrs	r2, r0
 800dae8:	6163      	str	r3, [r4, #20]
 800daea:	9201      	str	r2, [sp, #4]
 800daec:	9b01      	ldr	r3, [sp, #4]
 800daee:	61a3      	str	r3, [r4, #24]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	bf0c      	ite	eq
 800daf4:	2201      	moveq	r2, #1
 800daf6:	2202      	movne	r2, #2
 800daf8:	6122      	str	r2, [r4, #16]
 800dafa:	b1a5      	cbz	r5, 800db26 <__d2b+0x92>
 800dafc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800db00:	4405      	add	r5, r0
 800db02:	603d      	str	r5, [r7, #0]
 800db04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800db08:	6030      	str	r0, [r6, #0]
 800db0a:	4620      	mov	r0, r4
 800db0c:	b003      	add	sp, #12
 800db0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db12:	6161      	str	r1, [r4, #20]
 800db14:	e7ea      	b.n	800daec <__d2b+0x58>
 800db16:	a801      	add	r0, sp, #4
 800db18:	f7ff fd59 	bl	800d5ce <__lo0bits>
 800db1c:	9b01      	ldr	r3, [sp, #4]
 800db1e:	6163      	str	r3, [r4, #20]
 800db20:	3020      	adds	r0, #32
 800db22:	2201      	movs	r2, #1
 800db24:	e7e8      	b.n	800daf8 <__d2b+0x64>
 800db26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800db2e:	6038      	str	r0, [r7, #0]
 800db30:	6918      	ldr	r0, [r3, #16]
 800db32:	f7ff fd2d 	bl	800d590 <__hi0bits>
 800db36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db3a:	e7e5      	b.n	800db08 <__d2b+0x74>
 800db3c:	08022604 	.word	0x08022604
 800db40:	08022615 	.word	0x08022615

0800db44 <__ssputs_r>:
 800db44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db48:	688e      	ldr	r6, [r1, #8]
 800db4a:	461f      	mov	r7, r3
 800db4c:	42be      	cmp	r6, r7
 800db4e:	680b      	ldr	r3, [r1, #0]
 800db50:	4682      	mov	sl, r0
 800db52:	460c      	mov	r4, r1
 800db54:	4690      	mov	r8, r2
 800db56:	d82d      	bhi.n	800dbb4 <__ssputs_r+0x70>
 800db58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db60:	d026      	beq.n	800dbb0 <__ssputs_r+0x6c>
 800db62:	6965      	ldr	r5, [r4, #20]
 800db64:	6909      	ldr	r1, [r1, #16]
 800db66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db6a:	eba3 0901 	sub.w	r9, r3, r1
 800db6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db72:	1c7b      	adds	r3, r7, #1
 800db74:	444b      	add	r3, r9
 800db76:	106d      	asrs	r5, r5, #1
 800db78:	429d      	cmp	r5, r3
 800db7a:	bf38      	it	cc
 800db7c:	461d      	movcc	r5, r3
 800db7e:	0553      	lsls	r3, r2, #21
 800db80:	d527      	bpl.n	800dbd2 <__ssputs_r+0x8e>
 800db82:	4629      	mov	r1, r5
 800db84:	f7ff fbd0 	bl	800d328 <_malloc_r>
 800db88:	4606      	mov	r6, r0
 800db8a:	b360      	cbz	r0, 800dbe6 <__ssputs_r+0xa2>
 800db8c:	6921      	ldr	r1, [r4, #16]
 800db8e:	464a      	mov	r2, r9
 800db90:	f000 fa06 	bl	800dfa0 <memcpy>
 800db94:	89a3      	ldrh	r3, [r4, #12]
 800db96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db9e:	81a3      	strh	r3, [r4, #12]
 800dba0:	6126      	str	r6, [r4, #16]
 800dba2:	6165      	str	r5, [r4, #20]
 800dba4:	444e      	add	r6, r9
 800dba6:	eba5 0509 	sub.w	r5, r5, r9
 800dbaa:	6026      	str	r6, [r4, #0]
 800dbac:	60a5      	str	r5, [r4, #8]
 800dbae:	463e      	mov	r6, r7
 800dbb0:	42be      	cmp	r6, r7
 800dbb2:	d900      	bls.n	800dbb6 <__ssputs_r+0x72>
 800dbb4:	463e      	mov	r6, r7
 800dbb6:	6820      	ldr	r0, [r4, #0]
 800dbb8:	4632      	mov	r2, r6
 800dbba:	4641      	mov	r1, r8
 800dbbc:	f000 f9c6 	bl	800df4c <memmove>
 800dbc0:	68a3      	ldr	r3, [r4, #8]
 800dbc2:	1b9b      	subs	r3, r3, r6
 800dbc4:	60a3      	str	r3, [r4, #8]
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	4433      	add	r3, r6
 800dbca:	6023      	str	r3, [r4, #0]
 800dbcc:	2000      	movs	r0, #0
 800dbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd2:	462a      	mov	r2, r5
 800dbd4:	f000 fa36 	bl	800e044 <_realloc_r>
 800dbd8:	4606      	mov	r6, r0
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d1e0      	bne.n	800dba0 <__ssputs_r+0x5c>
 800dbde:	6921      	ldr	r1, [r4, #16]
 800dbe0:	4650      	mov	r0, sl
 800dbe2:	f7ff fb2d 	bl	800d240 <_free_r>
 800dbe6:	230c      	movs	r3, #12
 800dbe8:	f8ca 3000 	str.w	r3, [sl]
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	e7e9      	b.n	800dbce <__ssputs_r+0x8a>
	...

0800dbfc <_svfiprintf_r>:
 800dbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc00:	4698      	mov	r8, r3
 800dc02:	898b      	ldrh	r3, [r1, #12]
 800dc04:	061b      	lsls	r3, r3, #24
 800dc06:	b09d      	sub	sp, #116	@ 0x74
 800dc08:	4607      	mov	r7, r0
 800dc0a:	460d      	mov	r5, r1
 800dc0c:	4614      	mov	r4, r2
 800dc0e:	d510      	bpl.n	800dc32 <_svfiprintf_r+0x36>
 800dc10:	690b      	ldr	r3, [r1, #16]
 800dc12:	b973      	cbnz	r3, 800dc32 <_svfiprintf_r+0x36>
 800dc14:	2140      	movs	r1, #64	@ 0x40
 800dc16:	f7ff fb87 	bl	800d328 <_malloc_r>
 800dc1a:	6028      	str	r0, [r5, #0]
 800dc1c:	6128      	str	r0, [r5, #16]
 800dc1e:	b930      	cbnz	r0, 800dc2e <_svfiprintf_r+0x32>
 800dc20:	230c      	movs	r3, #12
 800dc22:	603b      	str	r3, [r7, #0]
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295
 800dc28:	b01d      	add	sp, #116	@ 0x74
 800dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2e:	2340      	movs	r3, #64	@ 0x40
 800dc30:	616b      	str	r3, [r5, #20]
 800dc32:	2300      	movs	r3, #0
 800dc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc36:	2320      	movs	r3, #32
 800dc38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc40:	2330      	movs	r3, #48	@ 0x30
 800dc42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dde0 <_svfiprintf_r+0x1e4>
 800dc46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc4a:	f04f 0901 	mov.w	r9, #1
 800dc4e:	4623      	mov	r3, r4
 800dc50:	469a      	mov	sl, r3
 800dc52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc56:	b10a      	cbz	r2, 800dc5c <_svfiprintf_r+0x60>
 800dc58:	2a25      	cmp	r2, #37	@ 0x25
 800dc5a:	d1f9      	bne.n	800dc50 <_svfiprintf_r+0x54>
 800dc5c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc60:	d00b      	beq.n	800dc7a <_svfiprintf_r+0x7e>
 800dc62:	465b      	mov	r3, fp
 800dc64:	4622      	mov	r2, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	4638      	mov	r0, r7
 800dc6a:	f7ff ff6b 	bl	800db44 <__ssputs_r>
 800dc6e:	3001      	adds	r0, #1
 800dc70:	f000 80a7 	beq.w	800ddc2 <_svfiprintf_r+0x1c6>
 800dc74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc76:	445a      	add	r2, fp
 800dc78:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc7a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f000 809f 	beq.w	800ddc2 <_svfiprintf_r+0x1c6>
 800dc84:	2300      	movs	r3, #0
 800dc86:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc8e:	f10a 0a01 	add.w	sl, sl, #1
 800dc92:	9304      	str	r3, [sp, #16]
 800dc94:	9307      	str	r3, [sp, #28]
 800dc96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc9c:	4654      	mov	r4, sl
 800dc9e:	2205      	movs	r2, #5
 800dca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca4:	484e      	ldr	r0, [pc, #312]	@ (800dde0 <_svfiprintf_r+0x1e4>)
 800dca6:	f7f2 fb13 	bl	80002d0 <memchr>
 800dcaa:	9a04      	ldr	r2, [sp, #16]
 800dcac:	b9d8      	cbnz	r0, 800dce6 <_svfiprintf_r+0xea>
 800dcae:	06d0      	lsls	r0, r2, #27
 800dcb0:	bf44      	itt	mi
 800dcb2:	2320      	movmi	r3, #32
 800dcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcb8:	0711      	lsls	r1, r2, #28
 800dcba:	bf44      	itt	mi
 800dcbc:	232b      	movmi	r3, #43	@ 0x2b
 800dcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcc2:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcc8:	d015      	beq.n	800dcf6 <_svfiprintf_r+0xfa>
 800dcca:	9a07      	ldr	r2, [sp, #28]
 800dccc:	4654      	mov	r4, sl
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f04f 0c0a 	mov.w	ip, #10
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcda:	3b30      	subs	r3, #48	@ 0x30
 800dcdc:	2b09      	cmp	r3, #9
 800dcde:	d94b      	bls.n	800dd78 <_svfiprintf_r+0x17c>
 800dce0:	b1b0      	cbz	r0, 800dd10 <_svfiprintf_r+0x114>
 800dce2:	9207      	str	r2, [sp, #28]
 800dce4:	e014      	b.n	800dd10 <_svfiprintf_r+0x114>
 800dce6:	eba0 0308 	sub.w	r3, r0, r8
 800dcea:	fa09 f303 	lsl.w	r3, r9, r3
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	46a2      	mov	sl, r4
 800dcf4:	e7d2      	b.n	800dc9c <_svfiprintf_r+0xa0>
 800dcf6:	9b03      	ldr	r3, [sp, #12]
 800dcf8:	1d19      	adds	r1, r3, #4
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	9103      	str	r1, [sp, #12]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	bfbb      	ittet	lt
 800dd02:	425b      	neglt	r3, r3
 800dd04:	f042 0202 	orrlt.w	r2, r2, #2
 800dd08:	9307      	strge	r3, [sp, #28]
 800dd0a:	9307      	strlt	r3, [sp, #28]
 800dd0c:	bfb8      	it	lt
 800dd0e:	9204      	strlt	r2, [sp, #16]
 800dd10:	7823      	ldrb	r3, [r4, #0]
 800dd12:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd14:	d10a      	bne.n	800dd2c <_svfiprintf_r+0x130>
 800dd16:	7863      	ldrb	r3, [r4, #1]
 800dd18:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd1a:	d132      	bne.n	800dd82 <_svfiprintf_r+0x186>
 800dd1c:	9b03      	ldr	r3, [sp, #12]
 800dd1e:	1d1a      	adds	r2, r3, #4
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	9203      	str	r2, [sp, #12]
 800dd24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd28:	3402      	adds	r4, #2
 800dd2a:	9305      	str	r3, [sp, #20]
 800dd2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ddf0 <_svfiprintf_r+0x1f4>
 800dd30:	7821      	ldrb	r1, [r4, #0]
 800dd32:	2203      	movs	r2, #3
 800dd34:	4650      	mov	r0, sl
 800dd36:	f7f2 facb 	bl	80002d0 <memchr>
 800dd3a:	b138      	cbz	r0, 800dd4c <_svfiprintf_r+0x150>
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	eba0 000a 	sub.w	r0, r0, sl
 800dd42:	2240      	movs	r2, #64	@ 0x40
 800dd44:	4082      	lsls	r2, r0
 800dd46:	4313      	orrs	r3, r2
 800dd48:	3401      	adds	r4, #1
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd50:	4824      	ldr	r0, [pc, #144]	@ (800dde4 <_svfiprintf_r+0x1e8>)
 800dd52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd56:	2206      	movs	r2, #6
 800dd58:	f7f2 faba 	bl	80002d0 <memchr>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d036      	beq.n	800ddce <_svfiprintf_r+0x1d2>
 800dd60:	4b21      	ldr	r3, [pc, #132]	@ (800dde8 <_svfiprintf_r+0x1ec>)
 800dd62:	bb1b      	cbnz	r3, 800ddac <_svfiprintf_r+0x1b0>
 800dd64:	9b03      	ldr	r3, [sp, #12]
 800dd66:	3307      	adds	r3, #7
 800dd68:	f023 0307 	bic.w	r3, r3, #7
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	9303      	str	r3, [sp, #12]
 800dd70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd72:	4433      	add	r3, r6
 800dd74:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd76:	e76a      	b.n	800dc4e <_svfiprintf_r+0x52>
 800dd78:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	2001      	movs	r0, #1
 800dd80:	e7a8      	b.n	800dcd4 <_svfiprintf_r+0xd8>
 800dd82:	2300      	movs	r3, #0
 800dd84:	3401      	adds	r4, #1
 800dd86:	9305      	str	r3, [sp, #20]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	f04f 0c0a 	mov.w	ip, #10
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd94:	3a30      	subs	r2, #48	@ 0x30
 800dd96:	2a09      	cmp	r2, #9
 800dd98:	d903      	bls.n	800dda2 <_svfiprintf_r+0x1a6>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0c6      	beq.n	800dd2c <_svfiprintf_r+0x130>
 800dd9e:	9105      	str	r1, [sp, #20]
 800dda0:	e7c4      	b.n	800dd2c <_svfiprintf_r+0x130>
 800dda2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dda6:	4604      	mov	r4, r0
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e7f0      	b.n	800dd8e <_svfiprintf_r+0x192>
 800ddac:	ab03      	add	r3, sp, #12
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	4b0e      	ldr	r3, [pc, #56]	@ (800ddec <_svfiprintf_r+0x1f0>)
 800ddb4:	a904      	add	r1, sp, #16
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	f7fd fe86 	bl	800bac8 <_printf_float>
 800ddbc:	1c42      	adds	r2, r0, #1
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	d1d6      	bne.n	800dd70 <_svfiprintf_r+0x174>
 800ddc2:	89ab      	ldrh	r3, [r5, #12]
 800ddc4:	065b      	lsls	r3, r3, #25
 800ddc6:	f53f af2d 	bmi.w	800dc24 <_svfiprintf_r+0x28>
 800ddca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddcc:	e72c      	b.n	800dc28 <_svfiprintf_r+0x2c>
 800ddce:	ab03      	add	r3, sp, #12
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	462a      	mov	r2, r5
 800ddd4:	4b05      	ldr	r3, [pc, #20]	@ (800ddec <_svfiprintf_r+0x1f0>)
 800ddd6:	a904      	add	r1, sp, #16
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f7fe f90d 	bl	800bff8 <_printf_i>
 800ddde:	e7ed      	b.n	800ddbc <_svfiprintf_r+0x1c0>
 800dde0:	08022770 	.word	0x08022770
 800dde4:	0802277a 	.word	0x0802277a
 800dde8:	0800bac9 	.word	0x0800bac9
 800ddec:	0800db45 	.word	0x0800db45
 800ddf0:	08022776 	.word	0x08022776

0800ddf4 <__sflush_r>:
 800ddf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfc:	0716      	lsls	r6, r2, #28
 800ddfe:	4605      	mov	r5, r0
 800de00:	460c      	mov	r4, r1
 800de02:	d454      	bmi.n	800deae <__sflush_r+0xba>
 800de04:	684b      	ldr	r3, [r1, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	dc02      	bgt.n	800de10 <__sflush_r+0x1c>
 800de0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	dd48      	ble.n	800dea2 <__sflush_r+0xae>
 800de10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de12:	2e00      	cmp	r6, #0
 800de14:	d045      	beq.n	800dea2 <__sflush_r+0xae>
 800de16:	2300      	movs	r3, #0
 800de18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de1c:	682f      	ldr	r7, [r5, #0]
 800de1e:	6a21      	ldr	r1, [r4, #32]
 800de20:	602b      	str	r3, [r5, #0]
 800de22:	d030      	beq.n	800de86 <__sflush_r+0x92>
 800de24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	0759      	lsls	r1, r3, #29
 800de2a:	d505      	bpl.n	800de38 <__sflush_r+0x44>
 800de2c:	6863      	ldr	r3, [r4, #4]
 800de2e:	1ad2      	subs	r2, r2, r3
 800de30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de32:	b10b      	cbz	r3, 800de38 <__sflush_r+0x44>
 800de34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de36:	1ad2      	subs	r2, r2, r3
 800de38:	2300      	movs	r3, #0
 800de3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de3c:	6a21      	ldr	r1, [r4, #32]
 800de3e:	4628      	mov	r0, r5
 800de40:	47b0      	blx	r6
 800de42:	1c43      	adds	r3, r0, #1
 800de44:	89a3      	ldrh	r3, [r4, #12]
 800de46:	d106      	bne.n	800de56 <__sflush_r+0x62>
 800de48:	6829      	ldr	r1, [r5, #0]
 800de4a:	291d      	cmp	r1, #29
 800de4c:	d82b      	bhi.n	800dea6 <__sflush_r+0xb2>
 800de4e:	4a2a      	ldr	r2, [pc, #168]	@ (800def8 <__sflush_r+0x104>)
 800de50:	410a      	asrs	r2, r1
 800de52:	07d6      	lsls	r6, r2, #31
 800de54:	d427      	bmi.n	800dea6 <__sflush_r+0xb2>
 800de56:	2200      	movs	r2, #0
 800de58:	6062      	str	r2, [r4, #4]
 800de5a:	04d9      	lsls	r1, r3, #19
 800de5c:	6922      	ldr	r2, [r4, #16]
 800de5e:	6022      	str	r2, [r4, #0]
 800de60:	d504      	bpl.n	800de6c <__sflush_r+0x78>
 800de62:	1c42      	adds	r2, r0, #1
 800de64:	d101      	bne.n	800de6a <__sflush_r+0x76>
 800de66:	682b      	ldr	r3, [r5, #0]
 800de68:	b903      	cbnz	r3, 800de6c <__sflush_r+0x78>
 800de6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800de6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de6e:	602f      	str	r7, [r5, #0]
 800de70:	b1b9      	cbz	r1, 800dea2 <__sflush_r+0xae>
 800de72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de76:	4299      	cmp	r1, r3
 800de78:	d002      	beq.n	800de80 <__sflush_r+0x8c>
 800de7a:	4628      	mov	r0, r5
 800de7c:	f7ff f9e0 	bl	800d240 <_free_r>
 800de80:	2300      	movs	r3, #0
 800de82:	6363      	str	r3, [r4, #52]	@ 0x34
 800de84:	e00d      	b.n	800dea2 <__sflush_r+0xae>
 800de86:	2301      	movs	r3, #1
 800de88:	4628      	mov	r0, r5
 800de8a:	47b0      	blx	r6
 800de8c:	4602      	mov	r2, r0
 800de8e:	1c50      	adds	r0, r2, #1
 800de90:	d1c9      	bne.n	800de26 <__sflush_r+0x32>
 800de92:	682b      	ldr	r3, [r5, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d0c6      	beq.n	800de26 <__sflush_r+0x32>
 800de98:	2b1d      	cmp	r3, #29
 800de9a:	d001      	beq.n	800dea0 <__sflush_r+0xac>
 800de9c:	2b16      	cmp	r3, #22
 800de9e:	d11e      	bne.n	800dede <__sflush_r+0xea>
 800dea0:	602f      	str	r7, [r5, #0]
 800dea2:	2000      	movs	r0, #0
 800dea4:	e022      	b.n	800deec <__sflush_r+0xf8>
 800dea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deaa:	b21b      	sxth	r3, r3
 800deac:	e01b      	b.n	800dee6 <__sflush_r+0xf2>
 800deae:	690f      	ldr	r7, [r1, #16]
 800deb0:	2f00      	cmp	r7, #0
 800deb2:	d0f6      	beq.n	800dea2 <__sflush_r+0xae>
 800deb4:	0793      	lsls	r3, r2, #30
 800deb6:	680e      	ldr	r6, [r1, #0]
 800deb8:	bf08      	it	eq
 800deba:	694b      	ldreq	r3, [r1, #20]
 800debc:	600f      	str	r7, [r1, #0]
 800debe:	bf18      	it	ne
 800dec0:	2300      	movne	r3, #0
 800dec2:	eba6 0807 	sub.w	r8, r6, r7
 800dec6:	608b      	str	r3, [r1, #8]
 800dec8:	f1b8 0f00 	cmp.w	r8, #0
 800decc:	dde9      	ble.n	800dea2 <__sflush_r+0xae>
 800dece:	6a21      	ldr	r1, [r4, #32]
 800ded0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ded2:	4643      	mov	r3, r8
 800ded4:	463a      	mov	r2, r7
 800ded6:	4628      	mov	r0, r5
 800ded8:	47b0      	blx	r6
 800deda:	2800      	cmp	r0, #0
 800dedc:	dc08      	bgt.n	800def0 <__sflush_r+0xfc>
 800dede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dee6:	81a3      	strh	r3, [r4, #12]
 800dee8:	f04f 30ff 	mov.w	r0, #4294967295
 800deec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def0:	4407      	add	r7, r0
 800def2:	eba8 0800 	sub.w	r8, r8, r0
 800def6:	e7e7      	b.n	800dec8 <__sflush_r+0xd4>
 800def8:	dfbffffe 	.word	0xdfbffffe

0800defc <_fflush_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	690b      	ldr	r3, [r1, #16]
 800df00:	4605      	mov	r5, r0
 800df02:	460c      	mov	r4, r1
 800df04:	b913      	cbnz	r3, 800df0c <_fflush_r+0x10>
 800df06:	2500      	movs	r5, #0
 800df08:	4628      	mov	r0, r5
 800df0a:	bd38      	pop	{r3, r4, r5, pc}
 800df0c:	b118      	cbz	r0, 800df16 <_fflush_r+0x1a>
 800df0e:	6a03      	ldr	r3, [r0, #32]
 800df10:	b90b      	cbnz	r3, 800df16 <_fflush_r+0x1a>
 800df12:	f7fe fa1d 	bl	800c350 <__sinit>
 800df16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0f3      	beq.n	800df06 <_fflush_r+0xa>
 800df1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df20:	07d0      	lsls	r0, r2, #31
 800df22:	d404      	bmi.n	800df2e <_fflush_r+0x32>
 800df24:	0599      	lsls	r1, r3, #22
 800df26:	d402      	bmi.n	800df2e <_fflush_r+0x32>
 800df28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df2a:	f7fe fb38 	bl	800c59e <__retarget_lock_acquire_recursive>
 800df2e:	4628      	mov	r0, r5
 800df30:	4621      	mov	r1, r4
 800df32:	f7ff ff5f 	bl	800ddf4 <__sflush_r>
 800df36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df38:	07da      	lsls	r2, r3, #31
 800df3a:	4605      	mov	r5, r0
 800df3c:	d4e4      	bmi.n	800df08 <_fflush_r+0xc>
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	059b      	lsls	r3, r3, #22
 800df42:	d4e1      	bmi.n	800df08 <_fflush_r+0xc>
 800df44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df46:	f7fe fb2b 	bl	800c5a0 <__retarget_lock_release_recursive>
 800df4a:	e7dd      	b.n	800df08 <_fflush_r+0xc>

0800df4c <memmove>:
 800df4c:	4288      	cmp	r0, r1
 800df4e:	b510      	push	{r4, lr}
 800df50:	eb01 0402 	add.w	r4, r1, r2
 800df54:	d902      	bls.n	800df5c <memmove+0x10>
 800df56:	4284      	cmp	r4, r0
 800df58:	4623      	mov	r3, r4
 800df5a:	d807      	bhi.n	800df6c <memmove+0x20>
 800df5c:	1e43      	subs	r3, r0, #1
 800df5e:	42a1      	cmp	r1, r4
 800df60:	d008      	beq.n	800df74 <memmove+0x28>
 800df62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df6a:	e7f8      	b.n	800df5e <memmove+0x12>
 800df6c:	4402      	add	r2, r0
 800df6e:	4601      	mov	r1, r0
 800df70:	428a      	cmp	r2, r1
 800df72:	d100      	bne.n	800df76 <memmove+0x2a>
 800df74:	bd10      	pop	{r4, pc}
 800df76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df7e:	e7f7      	b.n	800df70 <memmove+0x24>

0800df80 <_sbrk_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4d06      	ldr	r5, [pc, #24]	@ (800df9c <_sbrk_r+0x1c>)
 800df84:	2300      	movs	r3, #0
 800df86:	4604      	mov	r4, r0
 800df88:	4608      	mov	r0, r1
 800df8a:	602b      	str	r3, [r5, #0]
 800df8c:	f7f5 f938 	bl	8003200 <_sbrk>
 800df90:	1c43      	adds	r3, r0, #1
 800df92:	d102      	bne.n	800df9a <_sbrk_r+0x1a>
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	b103      	cbz	r3, 800df9a <_sbrk_r+0x1a>
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	bd38      	pop	{r3, r4, r5, pc}
 800df9c:	20011aa8 	.word	0x20011aa8

0800dfa0 <memcpy>:
 800dfa0:	440a      	add	r2, r1
 800dfa2:	4291      	cmp	r1, r2
 800dfa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfa8:	d100      	bne.n	800dfac <memcpy+0xc>
 800dfaa:	4770      	bx	lr
 800dfac:	b510      	push	{r4, lr}
 800dfae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfb6:	4291      	cmp	r1, r2
 800dfb8:	d1f9      	bne.n	800dfae <memcpy+0xe>
 800dfba:	bd10      	pop	{r4, pc}

0800dfbc <__assert_func>:
 800dfbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfbe:	4614      	mov	r4, r2
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	4b09      	ldr	r3, [pc, #36]	@ (800dfe8 <__assert_func+0x2c>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	68d8      	ldr	r0, [r3, #12]
 800dfca:	b954      	cbnz	r4, 800dfe2 <__assert_func+0x26>
 800dfcc:	4b07      	ldr	r3, [pc, #28]	@ (800dfec <__assert_func+0x30>)
 800dfce:	461c      	mov	r4, r3
 800dfd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfd4:	9100      	str	r1, [sp, #0]
 800dfd6:	462b      	mov	r3, r5
 800dfd8:	4905      	ldr	r1, [pc, #20]	@ (800dff0 <__assert_func+0x34>)
 800dfda:	f000 f86f 	bl	800e0bc <fiprintf>
 800dfde:	f000 f87f 	bl	800e0e0 <abort>
 800dfe2:	4b04      	ldr	r3, [pc, #16]	@ (800dff4 <__assert_func+0x38>)
 800dfe4:	e7f4      	b.n	800dfd0 <__assert_func+0x14>
 800dfe6:	bf00      	nop
 800dfe8:	20000018 	.word	0x20000018
 800dfec:	080227c6 	.word	0x080227c6
 800dff0:	08022798 	.word	0x08022798
 800dff4:	0802278b 	.word	0x0802278b

0800dff8 <_calloc_r>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	fba1 5402 	umull	r5, r4, r1, r2
 800dffe:	b93c      	cbnz	r4, 800e010 <_calloc_r+0x18>
 800e000:	4629      	mov	r1, r5
 800e002:	f7ff f991 	bl	800d328 <_malloc_r>
 800e006:	4606      	mov	r6, r0
 800e008:	b928      	cbnz	r0, 800e016 <_calloc_r+0x1e>
 800e00a:	2600      	movs	r6, #0
 800e00c:	4630      	mov	r0, r6
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
 800e010:	220c      	movs	r2, #12
 800e012:	6002      	str	r2, [r0, #0]
 800e014:	e7f9      	b.n	800e00a <_calloc_r+0x12>
 800e016:	462a      	mov	r2, r5
 800e018:	4621      	mov	r1, r4
 800e01a:	f7fe fa42 	bl	800c4a2 <memset>
 800e01e:	e7f5      	b.n	800e00c <_calloc_r+0x14>

0800e020 <__ascii_mbtowc>:
 800e020:	b082      	sub	sp, #8
 800e022:	b901      	cbnz	r1, 800e026 <__ascii_mbtowc+0x6>
 800e024:	a901      	add	r1, sp, #4
 800e026:	b142      	cbz	r2, 800e03a <__ascii_mbtowc+0x1a>
 800e028:	b14b      	cbz	r3, 800e03e <__ascii_mbtowc+0x1e>
 800e02a:	7813      	ldrb	r3, [r2, #0]
 800e02c:	600b      	str	r3, [r1, #0]
 800e02e:	7812      	ldrb	r2, [r2, #0]
 800e030:	1e10      	subs	r0, r2, #0
 800e032:	bf18      	it	ne
 800e034:	2001      	movne	r0, #1
 800e036:	b002      	add	sp, #8
 800e038:	4770      	bx	lr
 800e03a:	4610      	mov	r0, r2
 800e03c:	e7fb      	b.n	800e036 <__ascii_mbtowc+0x16>
 800e03e:	f06f 0001 	mvn.w	r0, #1
 800e042:	e7f8      	b.n	800e036 <__ascii_mbtowc+0x16>

0800e044 <_realloc_r>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	4680      	mov	r8, r0
 800e04a:	4615      	mov	r5, r2
 800e04c:	460c      	mov	r4, r1
 800e04e:	b921      	cbnz	r1, 800e05a <_realloc_r+0x16>
 800e050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e054:	4611      	mov	r1, r2
 800e056:	f7ff b967 	b.w	800d328 <_malloc_r>
 800e05a:	b92a      	cbnz	r2, 800e068 <_realloc_r+0x24>
 800e05c:	f7ff f8f0 	bl	800d240 <_free_r>
 800e060:	2400      	movs	r4, #0
 800e062:	4620      	mov	r0, r4
 800e064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e068:	f000 f841 	bl	800e0ee <_malloc_usable_size_r>
 800e06c:	4285      	cmp	r5, r0
 800e06e:	4606      	mov	r6, r0
 800e070:	d802      	bhi.n	800e078 <_realloc_r+0x34>
 800e072:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e076:	d8f4      	bhi.n	800e062 <_realloc_r+0x1e>
 800e078:	4629      	mov	r1, r5
 800e07a:	4640      	mov	r0, r8
 800e07c:	f7ff f954 	bl	800d328 <_malloc_r>
 800e080:	4607      	mov	r7, r0
 800e082:	2800      	cmp	r0, #0
 800e084:	d0ec      	beq.n	800e060 <_realloc_r+0x1c>
 800e086:	42b5      	cmp	r5, r6
 800e088:	462a      	mov	r2, r5
 800e08a:	4621      	mov	r1, r4
 800e08c:	bf28      	it	cs
 800e08e:	4632      	movcs	r2, r6
 800e090:	f7ff ff86 	bl	800dfa0 <memcpy>
 800e094:	4621      	mov	r1, r4
 800e096:	4640      	mov	r0, r8
 800e098:	f7ff f8d2 	bl	800d240 <_free_r>
 800e09c:	463c      	mov	r4, r7
 800e09e:	e7e0      	b.n	800e062 <_realloc_r+0x1e>

0800e0a0 <__ascii_wctomb>:
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	4608      	mov	r0, r1
 800e0a4:	b141      	cbz	r1, 800e0b8 <__ascii_wctomb+0x18>
 800e0a6:	2aff      	cmp	r2, #255	@ 0xff
 800e0a8:	d904      	bls.n	800e0b4 <__ascii_wctomb+0x14>
 800e0aa:	228a      	movs	r2, #138	@ 0x8a
 800e0ac:	601a      	str	r2, [r3, #0]
 800e0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b2:	4770      	bx	lr
 800e0b4:	700a      	strb	r2, [r1, #0]
 800e0b6:	2001      	movs	r0, #1
 800e0b8:	4770      	bx	lr
	...

0800e0bc <fiprintf>:
 800e0bc:	b40e      	push	{r1, r2, r3}
 800e0be:	b503      	push	{r0, r1, lr}
 800e0c0:	4601      	mov	r1, r0
 800e0c2:	ab03      	add	r3, sp, #12
 800e0c4:	4805      	ldr	r0, [pc, #20]	@ (800e0dc <fiprintf+0x20>)
 800e0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0ca:	6800      	ldr	r0, [r0, #0]
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	f000 f83f 	bl	800e150 <_vfiprintf_r>
 800e0d2:	b002      	add	sp, #8
 800e0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0d8:	b003      	add	sp, #12
 800e0da:	4770      	bx	lr
 800e0dc:	20000018 	.word	0x20000018

0800e0e0 <abort>:
 800e0e0:	b508      	push	{r3, lr}
 800e0e2:	2006      	movs	r0, #6
 800e0e4:	f000 fa08 	bl	800e4f8 <raise>
 800e0e8:	2001      	movs	r0, #1
 800e0ea:	f7f5 f811 	bl	8003110 <_exit>

0800e0ee <_malloc_usable_size_r>:
 800e0ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f2:	1f18      	subs	r0, r3, #4
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	bfbc      	itt	lt
 800e0f8:	580b      	ldrlt	r3, [r1, r0]
 800e0fa:	18c0      	addlt	r0, r0, r3
 800e0fc:	4770      	bx	lr

0800e0fe <__sfputc_r>:
 800e0fe:	6893      	ldr	r3, [r2, #8]
 800e100:	3b01      	subs	r3, #1
 800e102:	2b00      	cmp	r3, #0
 800e104:	b410      	push	{r4}
 800e106:	6093      	str	r3, [r2, #8]
 800e108:	da08      	bge.n	800e11c <__sfputc_r+0x1e>
 800e10a:	6994      	ldr	r4, [r2, #24]
 800e10c:	42a3      	cmp	r3, r4
 800e10e:	db01      	blt.n	800e114 <__sfputc_r+0x16>
 800e110:	290a      	cmp	r1, #10
 800e112:	d103      	bne.n	800e11c <__sfputc_r+0x1e>
 800e114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e118:	f000 b932 	b.w	800e380 <__swbuf_r>
 800e11c:	6813      	ldr	r3, [r2, #0]
 800e11e:	1c58      	adds	r0, r3, #1
 800e120:	6010      	str	r0, [r2, #0]
 800e122:	7019      	strb	r1, [r3, #0]
 800e124:	4608      	mov	r0, r1
 800e126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <__sfputs_r>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	4606      	mov	r6, r0
 800e130:	460f      	mov	r7, r1
 800e132:	4614      	mov	r4, r2
 800e134:	18d5      	adds	r5, r2, r3
 800e136:	42ac      	cmp	r4, r5
 800e138:	d101      	bne.n	800e13e <__sfputs_r+0x12>
 800e13a:	2000      	movs	r0, #0
 800e13c:	e007      	b.n	800e14e <__sfputs_r+0x22>
 800e13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e142:	463a      	mov	r2, r7
 800e144:	4630      	mov	r0, r6
 800e146:	f7ff ffda 	bl	800e0fe <__sfputc_r>
 800e14a:	1c43      	adds	r3, r0, #1
 800e14c:	d1f3      	bne.n	800e136 <__sfputs_r+0xa>
 800e14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e150 <_vfiprintf_r>:
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	460d      	mov	r5, r1
 800e156:	b09d      	sub	sp, #116	@ 0x74
 800e158:	4614      	mov	r4, r2
 800e15a:	4698      	mov	r8, r3
 800e15c:	4606      	mov	r6, r0
 800e15e:	b118      	cbz	r0, 800e168 <_vfiprintf_r+0x18>
 800e160:	6a03      	ldr	r3, [r0, #32]
 800e162:	b90b      	cbnz	r3, 800e168 <_vfiprintf_r+0x18>
 800e164:	f7fe f8f4 	bl	800c350 <__sinit>
 800e168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e16a:	07d9      	lsls	r1, r3, #31
 800e16c:	d405      	bmi.n	800e17a <_vfiprintf_r+0x2a>
 800e16e:	89ab      	ldrh	r3, [r5, #12]
 800e170:	059a      	lsls	r2, r3, #22
 800e172:	d402      	bmi.n	800e17a <_vfiprintf_r+0x2a>
 800e174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e176:	f7fe fa12 	bl	800c59e <__retarget_lock_acquire_recursive>
 800e17a:	89ab      	ldrh	r3, [r5, #12]
 800e17c:	071b      	lsls	r3, r3, #28
 800e17e:	d501      	bpl.n	800e184 <_vfiprintf_r+0x34>
 800e180:	692b      	ldr	r3, [r5, #16]
 800e182:	b99b      	cbnz	r3, 800e1ac <_vfiprintf_r+0x5c>
 800e184:	4629      	mov	r1, r5
 800e186:	4630      	mov	r0, r6
 800e188:	f000 f938 	bl	800e3fc <__swsetup_r>
 800e18c:	b170      	cbz	r0, 800e1ac <_vfiprintf_r+0x5c>
 800e18e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e190:	07dc      	lsls	r4, r3, #31
 800e192:	d504      	bpl.n	800e19e <_vfiprintf_r+0x4e>
 800e194:	f04f 30ff 	mov.w	r0, #4294967295
 800e198:	b01d      	add	sp, #116	@ 0x74
 800e19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19e:	89ab      	ldrh	r3, [r5, #12]
 800e1a0:	0598      	lsls	r0, r3, #22
 800e1a2:	d4f7      	bmi.n	800e194 <_vfiprintf_r+0x44>
 800e1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1a6:	f7fe f9fb 	bl	800c5a0 <__retarget_lock_release_recursive>
 800e1aa:	e7f3      	b.n	800e194 <_vfiprintf_r+0x44>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1b0:	2320      	movs	r3, #32
 800e1b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1ba:	2330      	movs	r3, #48	@ 0x30
 800e1bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e36c <_vfiprintf_r+0x21c>
 800e1c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1c4:	f04f 0901 	mov.w	r9, #1
 800e1c8:	4623      	mov	r3, r4
 800e1ca:	469a      	mov	sl, r3
 800e1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1d0:	b10a      	cbz	r2, 800e1d6 <_vfiprintf_r+0x86>
 800e1d2:	2a25      	cmp	r2, #37	@ 0x25
 800e1d4:	d1f9      	bne.n	800e1ca <_vfiprintf_r+0x7a>
 800e1d6:	ebba 0b04 	subs.w	fp, sl, r4
 800e1da:	d00b      	beq.n	800e1f4 <_vfiprintf_r+0xa4>
 800e1dc:	465b      	mov	r3, fp
 800e1de:	4622      	mov	r2, r4
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7ff ffa2 	bl	800e12c <__sfputs_r>
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	f000 80a7 	beq.w	800e33c <_vfiprintf_r+0x1ec>
 800e1ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1f0:	445a      	add	r2, fp
 800e1f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 809f 	beq.w	800e33c <_vfiprintf_r+0x1ec>
 800e1fe:	2300      	movs	r3, #0
 800e200:	f04f 32ff 	mov.w	r2, #4294967295
 800e204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e208:	f10a 0a01 	add.w	sl, sl, #1
 800e20c:	9304      	str	r3, [sp, #16]
 800e20e:	9307      	str	r3, [sp, #28]
 800e210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e214:	931a      	str	r3, [sp, #104]	@ 0x68
 800e216:	4654      	mov	r4, sl
 800e218:	2205      	movs	r2, #5
 800e21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e21e:	4853      	ldr	r0, [pc, #332]	@ (800e36c <_vfiprintf_r+0x21c>)
 800e220:	f7f2 f856 	bl	80002d0 <memchr>
 800e224:	9a04      	ldr	r2, [sp, #16]
 800e226:	b9d8      	cbnz	r0, 800e260 <_vfiprintf_r+0x110>
 800e228:	06d1      	lsls	r1, r2, #27
 800e22a:	bf44      	itt	mi
 800e22c:	2320      	movmi	r3, #32
 800e22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e232:	0713      	lsls	r3, r2, #28
 800e234:	bf44      	itt	mi
 800e236:	232b      	movmi	r3, #43	@ 0x2b
 800e238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e23c:	f89a 3000 	ldrb.w	r3, [sl]
 800e240:	2b2a      	cmp	r3, #42	@ 0x2a
 800e242:	d015      	beq.n	800e270 <_vfiprintf_r+0x120>
 800e244:	9a07      	ldr	r2, [sp, #28]
 800e246:	4654      	mov	r4, sl
 800e248:	2000      	movs	r0, #0
 800e24a:	f04f 0c0a 	mov.w	ip, #10
 800e24e:	4621      	mov	r1, r4
 800e250:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e254:	3b30      	subs	r3, #48	@ 0x30
 800e256:	2b09      	cmp	r3, #9
 800e258:	d94b      	bls.n	800e2f2 <_vfiprintf_r+0x1a2>
 800e25a:	b1b0      	cbz	r0, 800e28a <_vfiprintf_r+0x13a>
 800e25c:	9207      	str	r2, [sp, #28]
 800e25e:	e014      	b.n	800e28a <_vfiprintf_r+0x13a>
 800e260:	eba0 0308 	sub.w	r3, r0, r8
 800e264:	fa09 f303 	lsl.w	r3, r9, r3
 800e268:	4313      	orrs	r3, r2
 800e26a:	9304      	str	r3, [sp, #16]
 800e26c:	46a2      	mov	sl, r4
 800e26e:	e7d2      	b.n	800e216 <_vfiprintf_r+0xc6>
 800e270:	9b03      	ldr	r3, [sp, #12]
 800e272:	1d19      	adds	r1, r3, #4
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	9103      	str	r1, [sp, #12]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	bfbb      	ittet	lt
 800e27c:	425b      	neglt	r3, r3
 800e27e:	f042 0202 	orrlt.w	r2, r2, #2
 800e282:	9307      	strge	r3, [sp, #28]
 800e284:	9307      	strlt	r3, [sp, #28]
 800e286:	bfb8      	it	lt
 800e288:	9204      	strlt	r2, [sp, #16]
 800e28a:	7823      	ldrb	r3, [r4, #0]
 800e28c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e28e:	d10a      	bne.n	800e2a6 <_vfiprintf_r+0x156>
 800e290:	7863      	ldrb	r3, [r4, #1]
 800e292:	2b2a      	cmp	r3, #42	@ 0x2a
 800e294:	d132      	bne.n	800e2fc <_vfiprintf_r+0x1ac>
 800e296:	9b03      	ldr	r3, [sp, #12]
 800e298:	1d1a      	adds	r2, r3, #4
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	9203      	str	r2, [sp, #12]
 800e29e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2a2:	3402      	adds	r4, #2
 800e2a4:	9305      	str	r3, [sp, #20]
 800e2a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e37c <_vfiprintf_r+0x22c>
 800e2aa:	7821      	ldrb	r1, [r4, #0]
 800e2ac:	2203      	movs	r2, #3
 800e2ae:	4650      	mov	r0, sl
 800e2b0:	f7f2 f80e 	bl	80002d0 <memchr>
 800e2b4:	b138      	cbz	r0, 800e2c6 <_vfiprintf_r+0x176>
 800e2b6:	9b04      	ldr	r3, [sp, #16]
 800e2b8:	eba0 000a 	sub.w	r0, r0, sl
 800e2bc:	2240      	movs	r2, #64	@ 0x40
 800e2be:	4082      	lsls	r2, r0
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	3401      	adds	r4, #1
 800e2c4:	9304      	str	r3, [sp, #16]
 800e2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ca:	4829      	ldr	r0, [pc, #164]	@ (800e370 <_vfiprintf_r+0x220>)
 800e2cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2d0:	2206      	movs	r2, #6
 800e2d2:	f7f1 fffd 	bl	80002d0 <memchr>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d03f      	beq.n	800e35a <_vfiprintf_r+0x20a>
 800e2da:	4b26      	ldr	r3, [pc, #152]	@ (800e374 <_vfiprintf_r+0x224>)
 800e2dc:	bb1b      	cbnz	r3, 800e326 <_vfiprintf_r+0x1d6>
 800e2de:	9b03      	ldr	r3, [sp, #12]
 800e2e0:	3307      	adds	r3, #7
 800e2e2:	f023 0307 	bic.w	r3, r3, #7
 800e2e6:	3308      	adds	r3, #8
 800e2e8:	9303      	str	r3, [sp, #12]
 800e2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ec:	443b      	add	r3, r7
 800e2ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2f0:	e76a      	b.n	800e1c8 <_vfiprintf_r+0x78>
 800e2f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	2001      	movs	r0, #1
 800e2fa:	e7a8      	b.n	800e24e <_vfiprintf_r+0xfe>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	3401      	adds	r4, #1
 800e300:	9305      	str	r3, [sp, #20]
 800e302:	4619      	mov	r1, r3
 800e304:	f04f 0c0a 	mov.w	ip, #10
 800e308:	4620      	mov	r0, r4
 800e30a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e30e:	3a30      	subs	r2, #48	@ 0x30
 800e310:	2a09      	cmp	r2, #9
 800e312:	d903      	bls.n	800e31c <_vfiprintf_r+0x1cc>
 800e314:	2b00      	cmp	r3, #0
 800e316:	d0c6      	beq.n	800e2a6 <_vfiprintf_r+0x156>
 800e318:	9105      	str	r1, [sp, #20]
 800e31a:	e7c4      	b.n	800e2a6 <_vfiprintf_r+0x156>
 800e31c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e320:	4604      	mov	r4, r0
 800e322:	2301      	movs	r3, #1
 800e324:	e7f0      	b.n	800e308 <_vfiprintf_r+0x1b8>
 800e326:	ab03      	add	r3, sp, #12
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	462a      	mov	r2, r5
 800e32c:	4b12      	ldr	r3, [pc, #72]	@ (800e378 <_vfiprintf_r+0x228>)
 800e32e:	a904      	add	r1, sp, #16
 800e330:	4630      	mov	r0, r6
 800e332:	f7fd fbc9 	bl	800bac8 <_printf_float>
 800e336:	4607      	mov	r7, r0
 800e338:	1c78      	adds	r0, r7, #1
 800e33a:	d1d6      	bne.n	800e2ea <_vfiprintf_r+0x19a>
 800e33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e33e:	07d9      	lsls	r1, r3, #31
 800e340:	d405      	bmi.n	800e34e <_vfiprintf_r+0x1fe>
 800e342:	89ab      	ldrh	r3, [r5, #12]
 800e344:	059a      	lsls	r2, r3, #22
 800e346:	d402      	bmi.n	800e34e <_vfiprintf_r+0x1fe>
 800e348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e34a:	f7fe f929 	bl	800c5a0 <__retarget_lock_release_recursive>
 800e34e:	89ab      	ldrh	r3, [r5, #12]
 800e350:	065b      	lsls	r3, r3, #25
 800e352:	f53f af1f 	bmi.w	800e194 <_vfiprintf_r+0x44>
 800e356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e358:	e71e      	b.n	800e198 <_vfiprintf_r+0x48>
 800e35a:	ab03      	add	r3, sp, #12
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	462a      	mov	r2, r5
 800e360:	4b05      	ldr	r3, [pc, #20]	@ (800e378 <_vfiprintf_r+0x228>)
 800e362:	a904      	add	r1, sp, #16
 800e364:	4630      	mov	r0, r6
 800e366:	f7fd fe47 	bl	800bff8 <_printf_i>
 800e36a:	e7e4      	b.n	800e336 <_vfiprintf_r+0x1e6>
 800e36c:	08022770 	.word	0x08022770
 800e370:	0802277a 	.word	0x0802277a
 800e374:	0800bac9 	.word	0x0800bac9
 800e378:	0800e12d 	.word	0x0800e12d
 800e37c:	08022776 	.word	0x08022776

0800e380 <__swbuf_r>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	460e      	mov	r6, r1
 800e384:	4614      	mov	r4, r2
 800e386:	4605      	mov	r5, r0
 800e388:	b118      	cbz	r0, 800e392 <__swbuf_r+0x12>
 800e38a:	6a03      	ldr	r3, [r0, #32]
 800e38c:	b90b      	cbnz	r3, 800e392 <__swbuf_r+0x12>
 800e38e:	f7fd ffdf 	bl	800c350 <__sinit>
 800e392:	69a3      	ldr	r3, [r4, #24]
 800e394:	60a3      	str	r3, [r4, #8]
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	071a      	lsls	r2, r3, #28
 800e39a:	d501      	bpl.n	800e3a0 <__swbuf_r+0x20>
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	b943      	cbnz	r3, 800e3b2 <__swbuf_r+0x32>
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 f82a 	bl	800e3fc <__swsetup_r>
 800e3a8:	b118      	cbz	r0, 800e3b2 <__swbuf_r+0x32>
 800e3aa:	f04f 37ff 	mov.w	r7, #4294967295
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	6922      	ldr	r2, [r4, #16]
 800e3b6:	1a98      	subs	r0, r3, r2
 800e3b8:	6963      	ldr	r3, [r4, #20]
 800e3ba:	b2f6      	uxtb	r6, r6
 800e3bc:	4283      	cmp	r3, r0
 800e3be:	4637      	mov	r7, r6
 800e3c0:	dc05      	bgt.n	800e3ce <__swbuf_r+0x4e>
 800e3c2:	4621      	mov	r1, r4
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f7ff fd99 	bl	800defc <_fflush_r>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d1ed      	bne.n	800e3aa <__swbuf_r+0x2a>
 800e3ce:	68a3      	ldr	r3, [r4, #8]
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	60a3      	str	r3, [r4, #8]
 800e3d4:	6823      	ldr	r3, [r4, #0]
 800e3d6:	1c5a      	adds	r2, r3, #1
 800e3d8:	6022      	str	r2, [r4, #0]
 800e3da:	701e      	strb	r6, [r3, #0]
 800e3dc:	6962      	ldr	r2, [r4, #20]
 800e3de:	1c43      	adds	r3, r0, #1
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d004      	beq.n	800e3ee <__swbuf_r+0x6e>
 800e3e4:	89a3      	ldrh	r3, [r4, #12]
 800e3e6:	07db      	lsls	r3, r3, #31
 800e3e8:	d5e1      	bpl.n	800e3ae <__swbuf_r+0x2e>
 800e3ea:	2e0a      	cmp	r6, #10
 800e3ec:	d1df      	bne.n	800e3ae <__swbuf_r+0x2e>
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f7ff fd83 	bl	800defc <_fflush_r>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d0d9      	beq.n	800e3ae <__swbuf_r+0x2e>
 800e3fa:	e7d6      	b.n	800e3aa <__swbuf_r+0x2a>

0800e3fc <__swsetup_r>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	4b29      	ldr	r3, [pc, #164]	@ (800e4a4 <__swsetup_r+0xa8>)
 800e400:	4605      	mov	r5, r0
 800e402:	6818      	ldr	r0, [r3, #0]
 800e404:	460c      	mov	r4, r1
 800e406:	b118      	cbz	r0, 800e410 <__swsetup_r+0x14>
 800e408:	6a03      	ldr	r3, [r0, #32]
 800e40a:	b90b      	cbnz	r3, 800e410 <__swsetup_r+0x14>
 800e40c:	f7fd ffa0 	bl	800c350 <__sinit>
 800e410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e414:	0719      	lsls	r1, r3, #28
 800e416:	d422      	bmi.n	800e45e <__swsetup_r+0x62>
 800e418:	06da      	lsls	r2, r3, #27
 800e41a:	d407      	bmi.n	800e42c <__swsetup_r+0x30>
 800e41c:	2209      	movs	r2, #9
 800e41e:	602a      	str	r2, [r5, #0]
 800e420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e424:	81a3      	strh	r3, [r4, #12]
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	e033      	b.n	800e494 <__swsetup_r+0x98>
 800e42c:	0758      	lsls	r0, r3, #29
 800e42e:	d512      	bpl.n	800e456 <__swsetup_r+0x5a>
 800e430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e432:	b141      	cbz	r1, 800e446 <__swsetup_r+0x4a>
 800e434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e438:	4299      	cmp	r1, r3
 800e43a:	d002      	beq.n	800e442 <__swsetup_r+0x46>
 800e43c:	4628      	mov	r0, r5
 800e43e:	f7fe feff 	bl	800d240 <_free_r>
 800e442:	2300      	movs	r3, #0
 800e444:	6363      	str	r3, [r4, #52]	@ 0x34
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e44c:	81a3      	strh	r3, [r4, #12]
 800e44e:	2300      	movs	r3, #0
 800e450:	6063      	str	r3, [r4, #4]
 800e452:	6923      	ldr	r3, [r4, #16]
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	f043 0308 	orr.w	r3, r3, #8
 800e45c:	81a3      	strh	r3, [r4, #12]
 800e45e:	6923      	ldr	r3, [r4, #16]
 800e460:	b94b      	cbnz	r3, 800e476 <__swsetup_r+0x7a>
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e46c:	d003      	beq.n	800e476 <__swsetup_r+0x7a>
 800e46e:	4621      	mov	r1, r4
 800e470:	4628      	mov	r0, r5
 800e472:	f000 f883 	bl	800e57c <__smakebuf_r>
 800e476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47a:	f013 0201 	ands.w	r2, r3, #1
 800e47e:	d00a      	beq.n	800e496 <__swsetup_r+0x9a>
 800e480:	2200      	movs	r2, #0
 800e482:	60a2      	str	r2, [r4, #8]
 800e484:	6962      	ldr	r2, [r4, #20]
 800e486:	4252      	negs	r2, r2
 800e488:	61a2      	str	r2, [r4, #24]
 800e48a:	6922      	ldr	r2, [r4, #16]
 800e48c:	b942      	cbnz	r2, 800e4a0 <__swsetup_r+0xa4>
 800e48e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e492:	d1c5      	bne.n	800e420 <__swsetup_r+0x24>
 800e494:	bd38      	pop	{r3, r4, r5, pc}
 800e496:	0799      	lsls	r1, r3, #30
 800e498:	bf58      	it	pl
 800e49a:	6962      	ldrpl	r2, [r4, #20]
 800e49c:	60a2      	str	r2, [r4, #8]
 800e49e:	e7f4      	b.n	800e48a <__swsetup_r+0x8e>
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e7f7      	b.n	800e494 <__swsetup_r+0x98>
 800e4a4:	20000018 	.word	0x20000018

0800e4a8 <_raise_r>:
 800e4a8:	291f      	cmp	r1, #31
 800e4aa:	b538      	push	{r3, r4, r5, lr}
 800e4ac:	4605      	mov	r5, r0
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	d904      	bls.n	800e4bc <_raise_r+0x14>
 800e4b2:	2316      	movs	r3, #22
 800e4b4:	6003      	str	r3, [r0, #0]
 800e4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}
 800e4bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e4be:	b112      	cbz	r2, 800e4c6 <_raise_r+0x1e>
 800e4c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4c4:	b94b      	cbnz	r3, 800e4da <_raise_r+0x32>
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 f830 	bl	800e52c <_getpid_r>
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4601      	mov	r1, r0
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4d6:	f000 b817 	b.w	800e508 <_kill_r>
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d00a      	beq.n	800e4f4 <_raise_r+0x4c>
 800e4de:	1c59      	adds	r1, r3, #1
 800e4e0:	d103      	bne.n	800e4ea <_raise_r+0x42>
 800e4e2:	2316      	movs	r3, #22
 800e4e4:	6003      	str	r3, [r0, #0]
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	e7e7      	b.n	800e4ba <_raise_r+0x12>
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	4798      	blx	r3
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	e7e0      	b.n	800e4ba <_raise_r+0x12>

0800e4f8 <raise>:
 800e4f8:	4b02      	ldr	r3, [pc, #8]	@ (800e504 <raise+0xc>)
 800e4fa:	4601      	mov	r1, r0
 800e4fc:	6818      	ldr	r0, [r3, #0]
 800e4fe:	f7ff bfd3 	b.w	800e4a8 <_raise_r>
 800e502:	bf00      	nop
 800e504:	20000018 	.word	0x20000018

0800e508 <_kill_r>:
 800e508:	b538      	push	{r3, r4, r5, lr}
 800e50a:	4d07      	ldr	r5, [pc, #28]	@ (800e528 <_kill_r+0x20>)
 800e50c:	2300      	movs	r3, #0
 800e50e:	4604      	mov	r4, r0
 800e510:	4608      	mov	r0, r1
 800e512:	4611      	mov	r1, r2
 800e514:	602b      	str	r3, [r5, #0]
 800e516:	f7f4 fdeb 	bl	80030f0 <_kill>
 800e51a:	1c43      	adds	r3, r0, #1
 800e51c:	d102      	bne.n	800e524 <_kill_r+0x1c>
 800e51e:	682b      	ldr	r3, [r5, #0]
 800e520:	b103      	cbz	r3, 800e524 <_kill_r+0x1c>
 800e522:	6023      	str	r3, [r4, #0]
 800e524:	bd38      	pop	{r3, r4, r5, pc}
 800e526:	bf00      	nop
 800e528:	20011aa8 	.word	0x20011aa8

0800e52c <_getpid_r>:
 800e52c:	f7f4 bdd8 	b.w	80030e0 <_getpid>

0800e530 <__swhatbuf_r>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	460c      	mov	r4, r1
 800e534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e538:	2900      	cmp	r1, #0
 800e53a:	b096      	sub	sp, #88	@ 0x58
 800e53c:	4615      	mov	r5, r2
 800e53e:	461e      	mov	r6, r3
 800e540:	da0d      	bge.n	800e55e <__swhatbuf_r+0x2e>
 800e542:	89a3      	ldrh	r3, [r4, #12]
 800e544:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e548:	f04f 0100 	mov.w	r1, #0
 800e54c:	bf14      	ite	ne
 800e54e:	2340      	movne	r3, #64	@ 0x40
 800e550:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e554:	2000      	movs	r0, #0
 800e556:	6031      	str	r1, [r6, #0]
 800e558:	602b      	str	r3, [r5, #0]
 800e55a:	b016      	add	sp, #88	@ 0x58
 800e55c:	bd70      	pop	{r4, r5, r6, pc}
 800e55e:	466a      	mov	r2, sp
 800e560:	f000 f848 	bl	800e5f4 <_fstat_r>
 800e564:	2800      	cmp	r0, #0
 800e566:	dbec      	blt.n	800e542 <__swhatbuf_r+0x12>
 800e568:	9901      	ldr	r1, [sp, #4]
 800e56a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e56e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e572:	4259      	negs	r1, r3
 800e574:	4159      	adcs	r1, r3
 800e576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e57a:	e7eb      	b.n	800e554 <__swhatbuf_r+0x24>

0800e57c <__smakebuf_r>:
 800e57c:	898b      	ldrh	r3, [r1, #12]
 800e57e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e580:	079d      	lsls	r5, r3, #30
 800e582:	4606      	mov	r6, r0
 800e584:	460c      	mov	r4, r1
 800e586:	d507      	bpl.n	800e598 <__smakebuf_r+0x1c>
 800e588:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e58c:	6023      	str	r3, [r4, #0]
 800e58e:	6123      	str	r3, [r4, #16]
 800e590:	2301      	movs	r3, #1
 800e592:	6163      	str	r3, [r4, #20]
 800e594:	b003      	add	sp, #12
 800e596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e598:	ab01      	add	r3, sp, #4
 800e59a:	466a      	mov	r2, sp
 800e59c:	f7ff ffc8 	bl	800e530 <__swhatbuf_r>
 800e5a0:	9f00      	ldr	r7, [sp, #0]
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	4639      	mov	r1, r7
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	f7fe febe 	bl	800d328 <_malloc_r>
 800e5ac:	b948      	cbnz	r0, 800e5c2 <__smakebuf_r+0x46>
 800e5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5b2:	059a      	lsls	r2, r3, #22
 800e5b4:	d4ee      	bmi.n	800e594 <__smakebuf_r+0x18>
 800e5b6:	f023 0303 	bic.w	r3, r3, #3
 800e5ba:	f043 0302 	orr.w	r3, r3, #2
 800e5be:	81a3      	strh	r3, [r4, #12]
 800e5c0:	e7e2      	b.n	800e588 <__smakebuf_r+0xc>
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	6020      	str	r0, [r4, #0]
 800e5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5ca:	81a3      	strh	r3, [r4, #12]
 800e5cc:	9b01      	ldr	r3, [sp, #4]
 800e5ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e5d2:	b15b      	cbz	r3, 800e5ec <__smakebuf_r+0x70>
 800e5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5d8:	4630      	mov	r0, r6
 800e5da:	f000 f81d 	bl	800e618 <_isatty_r>
 800e5de:	b128      	cbz	r0, 800e5ec <__smakebuf_r+0x70>
 800e5e0:	89a3      	ldrh	r3, [r4, #12]
 800e5e2:	f023 0303 	bic.w	r3, r3, #3
 800e5e6:	f043 0301 	orr.w	r3, r3, #1
 800e5ea:	81a3      	strh	r3, [r4, #12]
 800e5ec:	89a3      	ldrh	r3, [r4, #12]
 800e5ee:	431d      	orrs	r5, r3
 800e5f0:	81a5      	strh	r5, [r4, #12]
 800e5f2:	e7cf      	b.n	800e594 <__smakebuf_r+0x18>

0800e5f4 <_fstat_r>:
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	4d07      	ldr	r5, [pc, #28]	@ (800e614 <_fstat_r+0x20>)
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	4608      	mov	r0, r1
 800e5fe:	4611      	mov	r1, r2
 800e600:	602b      	str	r3, [r5, #0]
 800e602:	f7f4 fdd5 	bl	80031b0 <_fstat>
 800e606:	1c43      	adds	r3, r0, #1
 800e608:	d102      	bne.n	800e610 <_fstat_r+0x1c>
 800e60a:	682b      	ldr	r3, [r5, #0]
 800e60c:	b103      	cbz	r3, 800e610 <_fstat_r+0x1c>
 800e60e:	6023      	str	r3, [r4, #0]
 800e610:	bd38      	pop	{r3, r4, r5, pc}
 800e612:	bf00      	nop
 800e614:	20011aa8 	.word	0x20011aa8

0800e618 <_isatty_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4d06      	ldr	r5, [pc, #24]	@ (800e634 <_isatty_r+0x1c>)
 800e61c:	2300      	movs	r3, #0
 800e61e:	4604      	mov	r4, r0
 800e620:	4608      	mov	r0, r1
 800e622:	602b      	str	r3, [r5, #0]
 800e624:	f7f4 fdd4 	bl	80031d0 <_isatty>
 800e628:	1c43      	adds	r3, r0, #1
 800e62a:	d102      	bne.n	800e632 <_isatty_r+0x1a>
 800e62c:	682b      	ldr	r3, [r5, #0]
 800e62e:	b103      	cbz	r3, 800e632 <_isatty_r+0x1a>
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	bd38      	pop	{r3, r4, r5, pc}
 800e634:	20011aa8 	.word	0x20011aa8

0800e638 <hypot>:
 800e638:	b508      	push	{r3, lr}
 800e63a:	ed2d 8b06 	vpush	{d8-d10}
 800e63e:	eeb0 aa40 	vmov.f32	s20, s0
 800e642:	eef0 aa60 	vmov.f32	s21, s1
 800e646:	eeb0 9a41 	vmov.f32	s18, s2
 800e64a:	eef0 9a61 	vmov.f32	s19, s3
 800e64e:	f000 f9f3 	bl	800ea38 <__ieee754_hypot>
 800e652:	eeb0 8a40 	vmov.f32	s16, s0
 800e656:	eef0 8a60 	vmov.f32	s17, s1
 800e65a:	f000 f9df 	bl	800ea1c <finite>
 800e65e:	b998      	cbnz	r0, 800e688 <hypot+0x50>
 800e660:	eeb0 0a4a 	vmov.f32	s0, s20
 800e664:	eef0 0a6a 	vmov.f32	s1, s21
 800e668:	f000 f9d8 	bl	800ea1c <finite>
 800e66c:	b160      	cbz	r0, 800e688 <hypot+0x50>
 800e66e:	eeb0 0a49 	vmov.f32	s0, s18
 800e672:	eef0 0a69 	vmov.f32	s1, s19
 800e676:	f000 f9d1 	bl	800ea1c <finite>
 800e67a:	b128      	cbz	r0, 800e688 <hypot+0x50>
 800e67c:	f7fd ff64 	bl	800c548 <__errno>
 800e680:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800e698 <hypot+0x60>
 800e684:	2322      	movs	r3, #34	@ 0x22
 800e686:	6003      	str	r3, [r0, #0]
 800e688:	eeb0 0a48 	vmov.f32	s0, s16
 800e68c:	eef0 0a68 	vmov.f32	s1, s17
 800e690:	ecbd 8b06 	vpop	{d8-d10}
 800e694:	bd08      	pop	{r3, pc}
 800e696:	bf00      	nop
 800e698:	00000000 	.word	0x00000000
 800e69c:	7ff00000 	.word	0x7ff00000

0800e6a0 <atan>:
 800e6a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a4:	ec55 4b10 	vmov	r4, r5, d0
 800e6a8:	4bbf      	ldr	r3, [pc, #764]	@ (800e9a8 <atan+0x308>)
 800e6aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e6ae:	429e      	cmp	r6, r3
 800e6b0:	46ab      	mov	fp, r5
 800e6b2:	d918      	bls.n	800e6e6 <atan+0x46>
 800e6b4:	4bbd      	ldr	r3, [pc, #756]	@ (800e9ac <atan+0x30c>)
 800e6b6:	429e      	cmp	r6, r3
 800e6b8:	d801      	bhi.n	800e6be <atan+0x1e>
 800e6ba:	d109      	bne.n	800e6d0 <atan+0x30>
 800e6bc:	b144      	cbz	r4, 800e6d0 <atan+0x30>
 800e6be:	4622      	mov	r2, r4
 800e6c0:	462b      	mov	r3, r5
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	f7f1 fe61 	bl	800038c <__adddf3>
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	e006      	b.n	800e6de <atan+0x3e>
 800e6d0:	f1bb 0f00 	cmp.w	fp, #0
 800e6d4:	f340 812b 	ble.w	800e92e <atan+0x28e>
 800e6d8:	a597      	add	r5, pc, #604	@ (adr r5, 800e938 <atan+0x298>)
 800e6da:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e6de:	ec45 4b10 	vmov	d0, r4, r5
 800e6e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e6:	4bb2      	ldr	r3, [pc, #712]	@ (800e9b0 <atan+0x310>)
 800e6e8:	429e      	cmp	r6, r3
 800e6ea:	d813      	bhi.n	800e714 <atan+0x74>
 800e6ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e6f0:	429e      	cmp	r6, r3
 800e6f2:	d80c      	bhi.n	800e70e <atan+0x6e>
 800e6f4:	a392      	add	r3, pc, #584	@ (adr r3, 800e940 <atan+0x2a0>)
 800e6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	f7f1 fe45 	bl	800038c <__adddf3>
 800e702:	4bac      	ldr	r3, [pc, #688]	@ (800e9b4 <atan+0x314>)
 800e704:	2200      	movs	r2, #0
 800e706:	f7f2 fa87 	bl	8000c18 <__aeabi_dcmpgt>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d1e7      	bne.n	800e6de <atan+0x3e>
 800e70e:	f04f 3aff 	mov.w	sl, #4294967295
 800e712:	e029      	b.n	800e768 <atan+0xc8>
 800e714:	f000 f95c 	bl	800e9d0 <fabs>
 800e718:	4ba7      	ldr	r3, [pc, #668]	@ (800e9b8 <atan+0x318>)
 800e71a:	429e      	cmp	r6, r3
 800e71c:	ec55 4b10 	vmov	r4, r5, d0
 800e720:	f200 80bc 	bhi.w	800e89c <atan+0x1fc>
 800e724:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e728:	429e      	cmp	r6, r3
 800e72a:	f200 809e 	bhi.w	800e86a <atan+0x1ca>
 800e72e:	4622      	mov	r2, r4
 800e730:	462b      	mov	r3, r5
 800e732:	4620      	mov	r0, r4
 800e734:	4629      	mov	r1, r5
 800e736:	f7f1 fe29 	bl	800038c <__adddf3>
 800e73a:	4b9e      	ldr	r3, [pc, #632]	@ (800e9b4 <atan+0x314>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	f7f1 fe23 	bl	8000388 <__aeabi_dsub>
 800e742:	2200      	movs	r2, #0
 800e744:	4606      	mov	r6, r0
 800e746:	460f      	mov	r7, r1
 800e748:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e74c:	4620      	mov	r0, r4
 800e74e:	4629      	mov	r1, r5
 800e750:	f7f1 fe1c 	bl	800038c <__adddf3>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4630      	mov	r0, r6
 800e75a:	4639      	mov	r1, r7
 800e75c:	f7f2 f8f6 	bl	800094c <__aeabi_ddiv>
 800e760:	f04f 0a00 	mov.w	sl, #0
 800e764:	4604      	mov	r4, r0
 800e766:	460d      	mov	r5, r1
 800e768:	4622      	mov	r2, r4
 800e76a:	462b      	mov	r3, r5
 800e76c:	4620      	mov	r0, r4
 800e76e:	4629      	mov	r1, r5
 800e770:	f7f1 ffc2 	bl	80006f8 <__aeabi_dmul>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	4680      	mov	r8, r0
 800e77a:	4689      	mov	r9, r1
 800e77c:	f7f1 ffbc 	bl	80006f8 <__aeabi_dmul>
 800e780:	a371      	add	r3, pc, #452	@ (adr r3, 800e948 <atan+0x2a8>)
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	4606      	mov	r6, r0
 800e788:	460f      	mov	r7, r1
 800e78a:	f7f1 ffb5 	bl	80006f8 <__aeabi_dmul>
 800e78e:	a370      	add	r3, pc, #448	@ (adr r3, 800e950 <atan+0x2b0>)
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	f7f1 fdfa 	bl	800038c <__adddf3>
 800e798:	4632      	mov	r2, r6
 800e79a:	463b      	mov	r3, r7
 800e79c:	f7f1 ffac 	bl	80006f8 <__aeabi_dmul>
 800e7a0:	a36d      	add	r3, pc, #436	@ (adr r3, 800e958 <atan+0x2b8>)
 800e7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a6:	f7f1 fdf1 	bl	800038c <__adddf3>
 800e7aa:	4632      	mov	r2, r6
 800e7ac:	463b      	mov	r3, r7
 800e7ae:	f7f1 ffa3 	bl	80006f8 <__aeabi_dmul>
 800e7b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e960 <atan+0x2c0>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	f7f1 fde8 	bl	800038c <__adddf3>
 800e7bc:	4632      	mov	r2, r6
 800e7be:	463b      	mov	r3, r7
 800e7c0:	f7f1 ff9a 	bl	80006f8 <__aeabi_dmul>
 800e7c4:	a368      	add	r3, pc, #416	@ (adr r3, 800e968 <atan+0x2c8>)
 800e7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ca:	f7f1 fddf 	bl	800038c <__adddf3>
 800e7ce:	4632      	mov	r2, r6
 800e7d0:	463b      	mov	r3, r7
 800e7d2:	f7f1 ff91 	bl	80006f8 <__aeabi_dmul>
 800e7d6:	a366      	add	r3, pc, #408	@ (adr r3, 800e970 <atan+0x2d0>)
 800e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7dc:	f7f1 fdd6 	bl	800038c <__adddf3>
 800e7e0:	4642      	mov	r2, r8
 800e7e2:	464b      	mov	r3, r9
 800e7e4:	f7f1 ff88 	bl	80006f8 <__aeabi_dmul>
 800e7e8:	a363      	add	r3, pc, #396	@ (adr r3, 800e978 <atan+0x2d8>)
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	4680      	mov	r8, r0
 800e7f0:	4689      	mov	r9, r1
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	4639      	mov	r1, r7
 800e7f6:	f7f1 ff7f 	bl	80006f8 <__aeabi_dmul>
 800e7fa:	a361      	add	r3, pc, #388	@ (adr r3, 800e980 <atan+0x2e0>)
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	f7f1 fdc2 	bl	8000388 <__aeabi_dsub>
 800e804:	4632      	mov	r2, r6
 800e806:	463b      	mov	r3, r7
 800e808:	f7f1 ff76 	bl	80006f8 <__aeabi_dmul>
 800e80c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e988 <atan+0x2e8>)
 800e80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e812:	f7f1 fdb9 	bl	8000388 <__aeabi_dsub>
 800e816:	4632      	mov	r2, r6
 800e818:	463b      	mov	r3, r7
 800e81a:	f7f1 ff6d 	bl	80006f8 <__aeabi_dmul>
 800e81e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e990 <atan+0x2f0>)
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	f7f1 fdb0 	bl	8000388 <__aeabi_dsub>
 800e828:	4632      	mov	r2, r6
 800e82a:	463b      	mov	r3, r7
 800e82c:	f7f1 ff64 	bl	80006f8 <__aeabi_dmul>
 800e830:	a359      	add	r3, pc, #356	@ (adr r3, 800e998 <atan+0x2f8>)
 800e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e836:	f7f1 fda7 	bl	8000388 <__aeabi_dsub>
 800e83a:	4632      	mov	r2, r6
 800e83c:	463b      	mov	r3, r7
 800e83e:	f7f1 ff5b 	bl	80006f8 <__aeabi_dmul>
 800e842:	4602      	mov	r2, r0
 800e844:	460b      	mov	r3, r1
 800e846:	4640      	mov	r0, r8
 800e848:	4649      	mov	r1, r9
 800e84a:	f7f1 fd9f 	bl	800038c <__adddf3>
 800e84e:	4622      	mov	r2, r4
 800e850:	462b      	mov	r3, r5
 800e852:	f7f1 ff51 	bl	80006f8 <__aeabi_dmul>
 800e856:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e85a:	4602      	mov	r2, r0
 800e85c:	460b      	mov	r3, r1
 800e85e:	d148      	bne.n	800e8f2 <atan+0x252>
 800e860:	4620      	mov	r0, r4
 800e862:	4629      	mov	r1, r5
 800e864:	f7f1 fd90 	bl	8000388 <__aeabi_dsub>
 800e868:	e72f      	b.n	800e6ca <atan+0x2a>
 800e86a:	4b52      	ldr	r3, [pc, #328]	@ (800e9b4 <atan+0x314>)
 800e86c:	2200      	movs	r2, #0
 800e86e:	4620      	mov	r0, r4
 800e870:	4629      	mov	r1, r5
 800e872:	f7f1 fd89 	bl	8000388 <__aeabi_dsub>
 800e876:	4b4f      	ldr	r3, [pc, #316]	@ (800e9b4 <atan+0x314>)
 800e878:	4606      	mov	r6, r0
 800e87a:	460f      	mov	r7, r1
 800e87c:	2200      	movs	r2, #0
 800e87e:	4620      	mov	r0, r4
 800e880:	4629      	mov	r1, r5
 800e882:	f7f1 fd83 	bl	800038c <__adddf3>
 800e886:	4602      	mov	r2, r0
 800e888:	460b      	mov	r3, r1
 800e88a:	4630      	mov	r0, r6
 800e88c:	4639      	mov	r1, r7
 800e88e:	f7f2 f85d 	bl	800094c <__aeabi_ddiv>
 800e892:	f04f 0a01 	mov.w	sl, #1
 800e896:	4604      	mov	r4, r0
 800e898:	460d      	mov	r5, r1
 800e89a:	e765      	b.n	800e768 <atan+0xc8>
 800e89c:	4b47      	ldr	r3, [pc, #284]	@ (800e9bc <atan+0x31c>)
 800e89e:	429e      	cmp	r6, r3
 800e8a0:	d21c      	bcs.n	800e8dc <atan+0x23c>
 800e8a2:	4b47      	ldr	r3, [pc, #284]	@ (800e9c0 <atan+0x320>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	f7f1 fd6d 	bl	8000388 <__aeabi_dsub>
 800e8ae:	4b44      	ldr	r3, [pc, #272]	@ (800e9c0 <atan+0x320>)
 800e8b0:	4606      	mov	r6, r0
 800e8b2:	460f      	mov	r7, r1
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7f1 ff1d 	bl	80006f8 <__aeabi_dmul>
 800e8be:	4b3d      	ldr	r3, [pc, #244]	@ (800e9b4 <atan+0x314>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f7f1 fd63 	bl	800038c <__adddf3>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	f7f2 f83d 	bl	800094c <__aeabi_ddiv>
 800e8d2:	f04f 0a02 	mov.w	sl, #2
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	460d      	mov	r5, r1
 800e8da:	e745      	b.n	800e768 <atan+0xc8>
 800e8dc:	4622      	mov	r2, r4
 800e8de:	462b      	mov	r3, r5
 800e8e0:	4938      	ldr	r1, [pc, #224]	@ (800e9c4 <atan+0x324>)
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	f7f2 f832 	bl	800094c <__aeabi_ddiv>
 800e8e8:	f04f 0a03 	mov.w	sl, #3
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	460d      	mov	r5, r1
 800e8f0:	e73a      	b.n	800e768 <atan+0xc8>
 800e8f2:	4b35      	ldr	r3, [pc, #212]	@ (800e9c8 <atan+0x328>)
 800e8f4:	4e35      	ldr	r6, [pc, #212]	@ (800e9cc <atan+0x32c>)
 800e8f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fe:	f7f1 fd43 	bl	8000388 <__aeabi_dsub>
 800e902:	4622      	mov	r2, r4
 800e904:	462b      	mov	r3, r5
 800e906:	f7f1 fd3f 	bl	8000388 <__aeabi_dsub>
 800e90a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e916:	f7f1 fd37 	bl	8000388 <__aeabi_dsub>
 800e91a:	f1bb 0f00 	cmp.w	fp, #0
 800e91e:	4604      	mov	r4, r0
 800e920:	460d      	mov	r5, r1
 800e922:	f6bf aedc 	bge.w	800e6de <atan+0x3e>
 800e926:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e92a:	461d      	mov	r5, r3
 800e92c:	e6d7      	b.n	800e6de <atan+0x3e>
 800e92e:	a51c      	add	r5, pc, #112	@ (adr r5, 800e9a0 <atan+0x300>)
 800e930:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e934:	e6d3      	b.n	800e6de <atan+0x3e>
 800e936:	bf00      	nop
 800e938:	54442d18 	.word	0x54442d18
 800e93c:	3ff921fb 	.word	0x3ff921fb
 800e940:	8800759c 	.word	0x8800759c
 800e944:	7e37e43c 	.word	0x7e37e43c
 800e948:	e322da11 	.word	0xe322da11
 800e94c:	3f90ad3a 	.word	0x3f90ad3a
 800e950:	24760deb 	.word	0x24760deb
 800e954:	3fa97b4b 	.word	0x3fa97b4b
 800e958:	a0d03d51 	.word	0xa0d03d51
 800e95c:	3fb10d66 	.word	0x3fb10d66
 800e960:	c54c206e 	.word	0xc54c206e
 800e964:	3fb745cd 	.word	0x3fb745cd
 800e968:	920083ff 	.word	0x920083ff
 800e96c:	3fc24924 	.word	0x3fc24924
 800e970:	5555550d 	.word	0x5555550d
 800e974:	3fd55555 	.word	0x3fd55555
 800e978:	2c6a6c2f 	.word	0x2c6a6c2f
 800e97c:	bfa2b444 	.word	0xbfa2b444
 800e980:	52defd9a 	.word	0x52defd9a
 800e984:	3fadde2d 	.word	0x3fadde2d
 800e988:	af749a6d 	.word	0xaf749a6d
 800e98c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e990:	fe231671 	.word	0xfe231671
 800e994:	3fbc71c6 	.word	0x3fbc71c6
 800e998:	9998ebc4 	.word	0x9998ebc4
 800e99c:	3fc99999 	.word	0x3fc99999
 800e9a0:	54442d18 	.word	0x54442d18
 800e9a4:	bff921fb 	.word	0xbff921fb
 800e9a8:	440fffff 	.word	0x440fffff
 800e9ac:	7ff00000 	.word	0x7ff00000
 800e9b0:	3fdbffff 	.word	0x3fdbffff
 800e9b4:	3ff00000 	.word	0x3ff00000
 800e9b8:	3ff2ffff 	.word	0x3ff2ffff
 800e9bc:	40038000 	.word	0x40038000
 800e9c0:	3ff80000 	.word	0x3ff80000
 800e9c4:	bff00000 	.word	0xbff00000
 800e9c8:	080228c8 	.word	0x080228c8
 800e9cc:	080228e8 	.word	0x080228e8

0800e9d0 <fabs>:
 800e9d0:	ec51 0b10 	vmov	r0, r1, d0
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e9da:	ec43 2b10 	vmov	d0, r2, r3
 800e9de:	4770      	bx	lr

0800e9e0 <sqrtf>:
 800e9e0:	b508      	push	{r3, lr}
 800e9e2:	ed2d 8b02 	vpush	{d8}
 800e9e6:	eeb0 8a40 	vmov.f32	s16, s0
 800e9ea:	f000 f822 	bl	800ea32 <__ieee754_sqrtf>
 800e9ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800e9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f6:	d60c      	bvs.n	800ea12 <sqrtf+0x32>
 800e9f8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ea18 <sqrtf+0x38>
 800e9fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea04:	d505      	bpl.n	800ea12 <sqrtf+0x32>
 800ea06:	f7fd fd9f 	bl	800c548 <__errno>
 800ea0a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ea0e:	2321      	movs	r3, #33	@ 0x21
 800ea10:	6003      	str	r3, [r0, #0]
 800ea12:	ecbd 8b02 	vpop	{d8}
 800ea16:	bd08      	pop	{r3, pc}
 800ea18:	00000000 	.word	0x00000000

0800ea1c <finite>:
 800ea1c:	b082      	sub	sp, #8
 800ea1e:	ed8d 0b00 	vstr	d0, [sp]
 800ea22:	9801      	ldr	r0, [sp, #4]
 800ea24:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ea28:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ea2c:	0fc0      	lsrs	r0, r0, #31
 800ea2e:	b002      	add	sp, #8
 800ea30:	4770      	bx	lr

0800ea32 <__ieee754_sqrtf>:
 800ea32:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ea36:	4770      	bx	lr

0800ea38 <__ieee754_hypot>:
 800ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	ec51 0b10 	vmov	r0, r1, d0
 800ea40:	ec53 2b11 	vmov	r2, r3, d1
 800ea44:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800ea48:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800ea4c:	42a5      	cmp	r5, r4
 800ea4e:	b087      	sub	sp, #28
 800ea50:	da05      	bge.n	800ea5e <__ieee754_hypot+0x26>
 800ea52:	462e      	mov	r6, r5
 800ea54:	4625      	mov	r5, r4
 800ea56:	4634      	mov	r4, r6
 800ea58:	4606      	mov	r6, r0
 800ea5a:	4610      	mov	r0, r2
 800ea5c:	4632      	mov	r2, r6
 800ea5e:	1b2b      	subs	r3, r5, r4
 800ea60:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800ea64:	4629      	mov	r1, r5
 800ea66:	4682      	mov	sl, r0
 800ea68:	46ab      	mov	fp, r5
 800ea6a:	4616      	mov	r6, r2
 800ea6c:	4627      	mov	r7, r4
 800ea6e:	dd05      	ble.n	800ea7c <__ieee754_hypot+0x44>
 800ea70:	4623      	mov	r3, r4
 800ea72:	f7f1 fc8b 	bl	800038c <__adddf3>
 800ea76:	4682      	mov	sl, r0
 800ea78:	468b      	mov	fp, r1
 800ea7a:	e016      	b.n	800eaaa <__ieee754_hypot+0x72>
 800ea7c:	4b75      	ldr	r3, [pc, #468]	@ (800ec54 <__ieee754_hypot+0x21c>)
 800ea7e:	429d      	cmp	r5, r3
 800ea80:	f340 8096 	ble.w	800ebb0 <__ieee754_hypot+0x178>
 800ea84:	4b74      	ldr	r3, [pc, #464]	@ (800ec58 <__ieee754_hypot+0x220>)
 800ea86:	429d      	cmp	r5, r3
 800ea88:	dd14      	ble.n	800eab4 <__ieee754_hypot+0x7c>
 800ea8a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ea8e:	4305      	orrs	r5, r0
 800ea90:	d004      	beq.n	800ea9c <__ieee754_hypot+0x64>
 800ea92:	4623      	mov	r3, r4
 800ea94:	f7f1 fc7a 	bl	800038c <__adddf3>
 800ea98:	4682      	mov	sl, r0
 800ea9a:	468b      	mov	fp, r1
 800ea9c:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800eaa0:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800eaa4:	4334      	orrs	r4, r6
 800eaa6:	f000 80d2 	beq.w	800ec4e <__ieee754_hypot+0x216>
 800eaaa:	ec4b ab10 	vmov	d0, sl, fp
 800eaae:	b007      	add	sp, #28
 800eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800eab8:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800eabc:	46ab      	mov	fp, r5
 800eabe:	4627      	mov	r7, r4
 800eac0:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800eac4:	9301      	str	r3, [sp, #4]
 800eac6:	4b65      	ldr	r3, [pc, #404]	@ (800ec5c <__ieee754_hypot+0x224>)
 800eac8:	429c      	cmp	r4, r3
 800eaca:	dc19      	bgt.n	800eb00 <__ieee754_hypot+0xc8>
 800eacc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800ead0:	da70      	bge.n	800ebb4 <__ieee754_hypot+0x17c>
 800ead2:	4633      	mov	r3, r6
 800ead4:	4323      	orrs	r3, r4
 800ead6:	d0e8      	beq.n	800eaaa <__ieee754_hypot+0x72>
 800ead8:	4b61      	ldr	r3, [pc, #388]	@ (800ec60 <__ieee754_hypot+0x228>)
 800eada:	2200      	movs	r2, #0
 800eadc:	4630      	mov	r0, r6
 800eade:	4639      	mov	r1, r7
 800eae0:	f7f1 fe0a 	bl	80006f8 <__aeabi_dmul>
 800eae4:	4b5e      	ldr	r3, [pc, #376]	@ (800ec60 <__ieee754_hypot+0x228>)
 800eae6:	4606      	mov	r6, r0
 800eae8:	460f      	mov	r7, r1
 800eaea:	4650      	mov	r0, sl
 800eaec:	4659      	mov	r1, fp
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f7f1 fe02 	bl	80006f8 <__aeabi_dmul>
 800eaf4:	9b01      	ldr	r3, [sp, #4]
 800eaf6:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800eafa:	4682      	mov	sl, r0
 800eafc:	468b      	mov	fp, r1
 800eafe:	9301      	str	r3, [sp, #4]
 800eb00:	4632      	mov	r2, r6
 800eb02:	463b      	mov	r3, r7
 800eb04:	4650      	mov	r0, sl
 800eb06:	4659      	mov	r1, fp
 800eb08:	f7f1 fc3e 	bl	8000388 <__aeabi_dsub>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4680      	mov	r8, r0
 800eb12:	4689      	mov	r9, r1
 800eb14:	4630      	mov	r0, r6
 800eb16:	4639      	mov	r1, r7
 800eb18:	f7f2 f860 	bl	8000bdc <__aeabi_dcmplt>
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	d053      	beq.n	800ebca <__ieee754_hypot+0x192>
 800eb22:	462b      	mov	r3, r5
 800eb24:	4610      	mov	r0, r2
 800eb26:	4629      	mov	r1, r5
 800eb28:	4614      	mov	r4, r2
 800eb2a:	f7f1 fde5 	bl	80006f8 <__aeabi_dmul>
 800eb2e:	4632      	mov	r2, r6
 800eb30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb34:	463b      	mov	r3, r7
 800eb36:	4630      	mov	r0, r6
 800eb38:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800eb3c:	f7f1 fddc 	bl	80006f8 <__aeabi_dmul>
 800eb40:	4622      	mov	r2, r4
 800eb42:	4606      	mov	r6, r0
 800eb44:	460f      	mov	r7, r1
 800eb46:	462b      	mov	r3, r5
 800eb48:	4650      	mov	r0, sl
 800eb4a:	4659      	mov	r1, fp
 800eb4c:	f7f1 fc1e 	bl	800038c <__adddf3>
 800eb50:	4622      	mov	r2, r4
 800eb52:	4680      	mov	r8, r0
 800eb54:	4689      	mov	r9, r1
 800eb56:	462b      	mov	r3, r5
 800eb58:	4650      	mov	r0, sl
 800eb5a:	4659      	mov	r1, fp
 800eb5c:	f7f1 fc14 	bl	8000388 <__aeabi_dsub>
 800eb60:	4602      	mov	r2, r0
 800eb62:	460b      	mov	r3, r1
 800eb64:	4640      	mov	r0, r8
 800eb66:	4649      	mov	r1, r9
 800eb68:	f7f1 fdc6 	bl	80006f8 <__aeabi_dmul>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	460b      	mov	r3, r1
 800eb70:	4630      	mov	r0, r6
 800eb72:	4639      	mov	r1, r7
 800eb74:	f7f1 fc08 	bl	8000388 <__aeabi_dsub>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb80:	f7f1 fc02 	bl	8000388 <__aeabi_dsub>
 800eb84:	ec41 0b10 	vmov	d0, r0, r1
 800eb88:	f000 f86c 	bl	800ec64 <__ieee754_sqrt>
 800eb8c:	9b01      	ldr	r3, [sp, #4]
 800eb8e:	ec5b ab10 	vmov	sl, fp, d0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d089      	beq.n	800eaaa <__ieee754_hypot+0x72>
 800eb96:	051b      	lsls	r3, r3, #20
 800eb98:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	4650      	mov	r0, sl
 800eba8:	4659      	mov	r1, fp
 800ebaa:	f7f1 fda5 	bl	80006f8 <__aeabi_dmul>
 800ebae:	e762      	b.n	800ea76 <__ieee754_hypot+0x3e>
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	e787      	b.n	800eac4 <__ieee754_hypot+0x8c>
 800ebb4:	9b01      	ldr	r3, [sp, #4]
 800ebb6:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800ebba:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800ebbe:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	46ab      	mov	fp, r5
 800ebc6:	4627      	mov	r7, r4
 800ebc8:	e79a      	b.n	800eb00 <__ieee754_hypot+0xc8>
 800ebca:	4623      	mov	r3, r4
 800ebcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ebd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800ebda:	4614      	mov	r4, r2
 800ebdc:	461d      	mov	r5, r3
 800ebde:	f7f1 fd8b 	bl	80006f8 <__aeabi_dmul>
 800ebe2:	4642      	mov	r2, r8
 800ebe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebe8:	464b      	mov	r3, r9
 800ebea:	4640      	mov	r0, r8
 800ebec:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800ebf0:	f7f1 fd82 	bl	80006f8 <__aeabi_dmul>
 800ebf4:	4652      	mov	r2, sl
 800ebf6:	465b      	mov	r3, fp
 800ebf8:	4680      	mov	r8, r0
 800ebfa:	4689      	mov	r9, r1
 800ebfc:	4650      	mov	r0, sl
 800ebfe:	4659      	mov	r1, fp
 800ec00:	f7f1 fbc4 	bl	800038c <__adddf3>
 800ec04:	4622      	mov	r2, r4
 800ec06:	462b      	mov	r3, r5
 800ec08:	f7f1 fbbe 	bl	8000388 <__aeabi_dsub>
 800ec0c:	4632      	mov	r2, r6
 800ec0e:	463b      	mov	r3, r7
 800ec10:	f7f1 fd72 	bl	80006f8 <__aeabi_dmul>
 800ec14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec18:	4682      	mov	sl, r0
 800ec1a:	468b      	mov	fp, r1
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	4639      	mov	r1, r7
 800ec20:	f7f1 fbb2 	bl	8000388 <__aeabi_dsub>
 800ec24:	4622      	mov	r2, r4
 800ec26:	462b      	mov	r3, r5
 800ec28:	f7f1 fd66 	bl	80006f8 <__aeabi_dmul>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	460b      	mov	r3, r1
 800ec30:	4650      	mov	r0, sl
 800ec32:	4659      	mov	r1, fp
 800ec34:	f7f1 fbaa 	bl	800038c <__adddf3>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4640      	mov	r0, r8
 800ec3e:	4649      	mov	r1, r9
 800ec40:	f7f1 fba2 	bl	8000388 <__aeabi_dsub>
 800ec44:	4602      	mov	r2, r0
 800ec46:	460b      	mov	r3, r1
 800ec48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec4c:	e798      	b.n	800eb80 <__ieee754_hypot+0x148>
 800ec4e:	46b2      	mov	sl, r6
 800ec50:	46bb      	mov	fp, r7
 800ec52:	e72a      	b.n	800eaaa <__ieee754_hypot+0x72>
 800ec54:	5f300000 	.word	0x5f300000
 800ec58:	7fefffff 	.word	0x7fefffff
 800ec5c:	20afffff 	.word	0x20afffff
 800ec60:	7fd00000 	.word	0x7fd00000

0800ec64 <__ieee754_sqrt>:
 800ec64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec68:	4a68      	ldr	r2, [pc, #416]	@ (800ee0c <__ieee754_sqrt+0x1a8>)
 800ec6a:	ec55 4b10 	vmov	r4, r5, d0
 800ec6e:	43aa      	bics	r2, r5
 800ec70:	462b      	mov	r3, r5
 800ec72:	4621      	mov	r1, r4
 800ec74:	d110      	bne.n	800ec98 <__ieee754_sqrt+0x34>
 800ec76:	4622      	mov	r2, r4
 800ec78:	4620      	mov	r0, r4
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	f7f1 fd3c 	bl	80006f8 <__aeabi_dmul>
 800ec80:	4602      	mov	r2, r0
 800ec82:	460b      	mov	r3, r1
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 fb80 	bl	800038c <__adddf3>
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	460d      	mov	r5, r1
 800ec90:	ec45 4b10 	vmov	d0, r4, r5
 800ec94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	dc0e      	bgt.n	800ecba <__ieee754_sqrt+0x56>
 800ec9c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800eca0:	4322      	orrs	r2, r4
 800eca2:	d0f5      	beq.n	800ec90 <__ieee754_sqrt+0x2c>
 800eca4:	b19d      	cbz	r5, 800ecce <__ieee754_sqrt+0x6a>
 800eca6:	4622      	mov	r2, r4
 800eca8:	4620      	mov	r0, r4
 800ecaa:	4629      	mov	r1, r5
 800ecac:	f7f1 fb6c 	bl	8000388 <__aeabi_dsub>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	f7f1 fe4a 	bl	800094c <__aeabi_ddiv>
 800ecb8:	e7e8      	b.n	800ec8c <__ieee754_sqrt+0x28>
 800ecba:	152a      	asrs	r2, r5, #20
 800ecbc:	d115      	bne.n	800ecea <__ieee754_sqrt+0x86>
 800ecbe:	2000      	movs	r0, #0
 800ecc0:	e009      	b.n	800ecd6 <__ieee754_sqrt+0x72>
 800ecc2:	0acb      	lsrs	r3, r1, #11
 800ecc4:	3a15      	subs	r2, #21
 800ecc6:	0549      	lsls	r1, r1, #21
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d0fa      	beq.n	800ecc2 <__ieee754_sqrt+0x5e>
 800eccc:	e7f7      	b.n	800ecbe <__ieee754_sqrt+0x5a>
 800ecce:	462a      	mov	r2, r5
 800ecd0:	e7fa      	b.n	800ecc8 <__ieee754_sqrt+0x64>
 800ecd2:	005b      	lsls	r3, r3, #1
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	02dc      	lsls	r4, r3, #11
 800ecd8:	d5fb      	bpl.n	800ecd2 <__ieee754_sqrt+0x6e>
 800ecda:	1e44      	subs	r4, r0, #1
 800ecdc:	1b12      	subs	r2, r2, r4
 800ecde:	f1c0 0420 	rsb	r4, r0, #32
 800ece2:	fa21 f404 	lsr.w	r4, r1, r4
 800ece6:	4323      	orrs	r3, r4
 800ece8:	4081      	lsls	r1, r0
 800ecea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ecf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ecf6:	07d2      	lsls	r2, r2, #31
 800ecf8:	bf5c      	itt	pl
 800ecfa:	005b      	lslpl	r3, r3, #1
 800ecfc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ed00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed04:	bf58      	it	pl
 800ed06:	0049      	lslpl	r1, r1, #1
 800ed08:	2600      	movs	r6, #0
 800ed0a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ed0e:	106d      	asrs	r5, r5, #1
 800ed10:	0049      	lsls	r1, r1, #1
 800ed12:	2016      	movs	r0, #22
 800ed14:	4632      	mov	r2, r6
 800ed16:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ed1a:	1917      	adds	r7, r2, r4
 800ed1c:	429f      	cmp	r7, r3
 800ed1e:	bfde      	ittt	le
 800ed20:	193a      	addle	r2, r7, r4
 800ed22:	1bdb      	suble	r3, r3, r7
 800ed24:	1936      	addle	r6, r6, r4
 800ed26:	0fcf      	lsrs	r7, r1, #31
 800ed28:	3801      	subs	r0, #1
 800ed2a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ed2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed32:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ed36:	d1f0      	bne.n	800ed1a <__ieee754_sqrt+0xb6>
 800ed38:	4604      	mov	r4, r0
 800ed3a:	2720      	movs	r7, #32
 800ed3c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ed40:	429a      	cmp	r2, r3
 800ed42:	eb00 0e0c 	add.w	lr, r0, ip
 800ed46:	db02      	blt.n	800ed4e <__ieee754_sqrt+0xea>
 800ed48:	d113      	bne.n	800ed72 <__ieee754_sqrt+0x10e>
 800ed4a:	458e      	cmp	lr, r1
 800ed4c:	d811      	bhi.n	800ed72 <__ieee754_sqrt+0x10e>
 800ed4e:	f1be 0f00 	cmp.w	lr, #0
 800ed52:	eb0e 000c 	add.w	r0, lr, ip
 800ed56:	da42      	bge.n	800edde <__ieee754_sqrt+0x17a>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	db40      	blt.n	800edde <__ieee754_sqrt+0x17a>
 800ed5c:	f102 0801 	add.w	r8, r2, #1
 800ed60:	1a9b      	subs	r3, r3, r2
 800ed62:	458e      	cmp	lr, r1
 800ed64:	bf88      	it	hi
 800ed66:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ed6a:	eba1 010e 	sub.w	r1, r1, lr
 800ed6e:	4464      	add	r4, ip
 800ed70:	4642      	mov	r2, r8
 800ed72:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ed76:	3f01      	subs	r7, #1
 800ed78:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ed7c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed80:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ed84:	d1dc      	bne.n	800ed40 <__ieee754_sqrt+0xdc>
 800ed86:	4319      	orrs	r1, r3
 800ed88:	d01b      	beq.n	800edc2 <__ieee754_sqrt+0x15e>
 800ed8a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ee10 <__ieee754_sqrt+0x1ac>
 800ed8e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ee14 <__ieee754_sqrt+0x1b0>
 800ed92:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed96:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed9a:	f7f1 faf5 	bl	8000388 <__aeabi_dsub>
 800ed9e:	e9da 8900 	ldrd	r8, r9, [sl]
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
 800eda6:	4640      	mov	r0, r8
 800eda8:	4649      	mov	r1, r9
 800edaa:	f7f1 ff21 	bl	8000bf0 <__aeabi_dcmple>
 800edae:	b140      	cbz	r0, 800edc2 <__ieee754_sqrt+0x15e>
 800edb0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800edb4:	e9da 0100 	ldrd	r0, r1, [sl]
 800edb8:	e9db 2300 	ldrd	r2, r3, [fp]
 800edbc:	d111      	bne.n	800ede2 <__ieee754_sqrt+0x17e>
 800edbe:	3601      	adds	r6, #1
 800edc0:	463c      	mov	r4, r7
 800edc2:	1072      	asrs	r2, r6, #1
 800edc4:	0863      	lsrs	r3, r4, #1
 800edc6:	07f1      	lsls	r1, r6, #31
 800edc8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800edcc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800edd0:	bf48      	it	mi
 800edd2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800edd6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800edda:	4618      	mov	r0, r3
 800eddc:	e756      	b.n	800ec8c <__ieee754_sqrt+0x28>
 800edde:	4690      	mov	r8, r2
 800ede0:	e7be      	b.n	800ed60 <__ieee754_sqrt+0xfc>
 800ede2:	f7f1 fad3 	bl	800038c <__adddf3>
 800ede6:	e9da 8900 	ldrd	r8, r9, [sl]
 800edea:	4602      	mov	r2, r0
 800edec:	460b      	mov	r3, r1
 800edee:	4640      	mov	r0, r8
 800edf0:	4649      	mov	r1, r9
 800edf2:	f7f1 fef3 	bl	8000bdc <__aeabi_dcmplt>
 800edf6:	b120      	cbz	r0, 800ee02 <__ieee754_sqrt+0x19e>
 800edf8:	1ca0      	adds	r0, r4, #2
 800edfa:	bf08      	it	eq
 800edfc:	3601      	addeq	r6, #1
 800edfe:	3402      	adds	r4, #2
 800ee00:	e7df      	b.n	800edc2 <__ieee754_sqrt+0x15e>
 800ee02:	1c63      	adds	r3, r4, #1
 800ee04:	f023 0401 	bic.w	r4, r3, #1
 800ee08:	e7db      	b.n	800edc2 <__ieee754_sqrt+0x15e>
 800ee0a:	bf00      	nop
 800ee0c:	7ff00000 	.word	0x7ff00000
 800ee10:	200001e0 	.word	0x200001e0
 800ee14:	200001d8 	.word	0x200001d8

0800ee18 <_init>:
 800ee18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1a:	bf00      	nop
 800ee1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee1e:	bc08      	pop	{r3}
 800ee20:	469e      	mov	lr, r3
 800ee22:	4770      	bx	lr

0800ee24 <_fini>:
 800ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee26:	bf00      	nop
 800ee28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee2a:	bc08      	pop	{r3}
 800ee2c:	469e      	mov	lr, r3
 800ee2e:	4770      	bx	lr
